// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters used for replica operations.
 */
@Fluent
public final class MongoClusterReplicaParameters implements JsonSerializable<MongoClusterReplicaParameters> {
    /*
     * The id of the replication source cluster.
     */
    private String sourceResourceId;

    /*
     * The location of the source cluster
     */
    private String sourceLocation;

    /**
     * Creates an instance of MongoClusterReplicaParameters class.
     */
    public MongoClusterReplicaParameters() {
    }

    /**
     * Get the sourceResourceId property: The id of the replication source cluster.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: The id of the replication source cluster.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the MongoClusterReplicaParameters object itself.
     */
    public MongoClusterReplicaParameters withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the sourceLocation property: The location of the source cluster.
     * 
     * @return the sourceLocation value.
     */
    public String sourceLocation() {
        return this.sourceLocation;
    }

    /**
     * Set the sourceLocation property: The location of the source cluster.
     * 
     * @param sourceLocation the sourceLocation value to set.
     * @return the MongoClusterReplicaParameters object itself.
     */
    public MongoClusterReplicaParameters withSourceLocation(String sourceLocation) {
        this.sourceLocation = sourceLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceResourceId in model MongoClusterReplicaParameters"));
        }
        if (sourceLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceLocation in model MongoClusterReplicaParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoClusterReplicaParameters.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeStringField("sourceLocation", this.sourceLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoClusterReplicaParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoClusterReplicaParameters if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoClusterReplicaParameters.
     */
    public static MongoClusterReplicaParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoClusterReplicaParameters deserializedMongoClusterReplicaParameters
                = new MongoClusterReplicaParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceResourceId".equals(fieldName)) {
                    deserializedMongoClusterReplicaParameters.sourceResourceId = reader.getString();
                } else if ("sourceLocation".equals(fieldName)) {
                    deserializedMongoClusterReplicaParameters.sourceLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoClusterReplicaParameters;
        });
    }
}
