// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Database role definition that is assigned to a user.
 */
@Fluent
public final class DatabaseRole implements JsonSerializable<DatabaseRole> {
    /*
     * Database scope that the role is assigned to.
     */
    private String db;

    /*
     * The role that is assigned to the user on the database scope.
     */
    private UserRole role;

    /**
     * Creates an instance of DatabaseRole class.
     */
    public DatabaseRole() {
    }

    /**
     * Get the db property: Database scope that the role is assigned to.
     * 
     * @return the db value.
     */
    public String db() {
        return this.db;
    }

    /**
     * Set the db property: Database scope that the role is assigned to.
     * 
     * @param db the db value to set.
     * @return the DatabaseRole object itself.
     */
    public DatabaseRole withDb(String db) {
        this.db = db;
        return this;
    }

    /**
     * Get the role property: The role that is assigned to the user on the database scope.
     * 
     * @return the role value.
     */
    public UserRole role() {
        return this.role;
    }

    /**
     * Set the role property: The role that is assigned to the user on the database scope.
     * 
     * @param role the role value to set.
     * @return the DatabaseRole object itself.
     */
    public DatabaseRole withRole(UserRole role) {
        this.role = role;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (db() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property db in model DatabaseRole"));
        }
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property role in model DatabaseRole"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabaseRole.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("db", this.db);
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseRole from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseRole if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabaseRole.
     */
    public static DatabaseRole fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseRole deserializedDatabaseRole = new DatabaseRole();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("db".equals(fieldName)) {
                    deserializedDatabaseRole.db = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedDatabaseRole.role = UserRole.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseRole;
        });
    }
}
