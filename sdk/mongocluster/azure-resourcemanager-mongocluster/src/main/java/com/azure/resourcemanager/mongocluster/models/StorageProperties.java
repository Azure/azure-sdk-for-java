// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongocluster.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The storage properties of the cluster. This includes the data storage size and scaling applied to servers in the
 * cluster.
 */
@Fluent
public final class StorageProperties implements JsonSerializable<StorageProperties> {
    /*
     * The size of the data disk assigned to each server.
     */
    private Long sizeGb;

    /*
     * The type of storage to provision the cluster servers with.
     */
    private StorageType type;

    /*
     * The IOPs of the storage assigned to each server. Only applicable if the type is 'PremiumSSDv2'.
     */
    private Long iops;

    /*
     * The throughput of the storage assigned to each server. Only applicable if the type is 'PremiumSSDv2'.
     */
    private Long throughput;

    /**
     * Creates an instance of StorageProperties class.
     */
    public StorageProperties() {
    }

    /**
     * Get the sizeGb property: The size of the data disk assigned to each server.
     * 
     * @return the sizeGb value.
     */
    public Long sizeGb() {
        return this.sizeGb;
    }

    /**
     * Set the sizeGb property: The size of the data disk assigned to each server.
     * 
     * @param sizeGb the sizeGb value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withSizeGb(Long sizeGb) {
        this.sizeGb = sizeGb;
        return this;
    }

    /**
     * Get the type property: The type of storage to provision the cluster servers with.
     * 
     * @return the type value.
     */
    public StorageType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of storage to provision the cluster servers with.
     * 
     * @param type the type value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withType(StorageType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the iops property: The IOPs of the storage assigned to each server. Only applicable if the type is
     * 'PremiumSSDv2'.
     * 
     * @return the iops value.
     */
    public Long iops() {
        return this.iops;
    }

    /**
     * Set the iops property: The IOPs of the storage assigned to each server. Only applicable if the type is
     * 'PremiumSSDv2'.
     * 
     * @param iops the iops value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withIops(Long iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the throughput property: The throughput of the storage assigned to each server. Only applicable if the type
     * is 'PremiumSSDv2'.
     * 
     * @return the throughput value.
     */
    public Long throughput() {
        return this.throughput;
    }

    /**
     * Set the throughput property: The throughput of the storage assigned to each server. Only applicable if the type
     * is 'PremiumSSDv2'.
     * 
     * @param throughput the throughput value to set.
     * @return the StorageProperties object itself.
     */
    public StorageProperties withThroughput(Long throughput) {
        this.throughput = throughput;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("sizeGb", this.sizeGb);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeNumberField("throughput", this.throughput);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageProperties.
     */
    public static StorageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageProperties deserializedStorageProperties = new StorageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sizeGb".equals(fieldName)) {
                    deserializedStorageProperties.sizeGb = reader.getNullable(JsonReader::getLong);
                } else if ("type".equals(fieldName)) {
                    deserializedStorageProperties.type = StorageType.fromString(reader.getString());
                } else if ("iops".equals(fieldName)) {
                    deserializedStorageProperties.iops = reader.getNullable(JsonReader::getLong);
                } else if ("throughput".equals(fieldName)) {
                    deserializedStorageProperties.throughput = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageProperties;
        });
    }
}
