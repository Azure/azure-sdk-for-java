/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.resourcegraph.v2019_04_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The options for facet evaluation.
 */
public class FacetRequestOptions {
    /**
     * The column name or query expression to sort on. Defaults to count if not
     * present.
     */
    @JsonProperty(value = "sortBy")
    private String sortBy;

    /**
     * The sorting order by the selected column (count by default). Possible
     * values include: 'asc', 'desc'.
     */
    @JsonProperty(value = "sortOrder")
    private FacetSortOrder sortOrder;

    /**
     * Specifies the filter condition for the 'where' clause which will be run
     * on main query's result, just before the actual faceting.
     */
    @JsonProperty(value = "filter")
    private String filter;

    /**
     * The maximum number of facet rows that should be returned.
     */
    @JsonProperty(value = "$top")
    private Integer top;

    /**
     * Get the column name or query expression to sort on. Defaults to count if not present.
     *
     * @return the sortBy value
     */
    public String sortBy() {
        return this.sortBy;
    }

    /**
     * Set the column name or query expression to sort on. Defaults to count if not present.
     *
     * @param sortBy the sortBy value to set
     * @return the FacetRequestOptions object itself.
     */
    public FacetRequestOptions withSortBy(String sortBy) {
        this.sortBy = sortBy;
        return this;
    }

    /**
     * Get the sorting order by the selected column (count by default). Possible values include: 'asc', 'desc'.
     *
     * @return the sortOrder value
     */
    public FacetSortOrder sortOrder() {
        return this.sortOrder;
    }

    /**
     * Set the sorting order by the selected column (count by default). Possible values include: 'asc', 'desc'.
     *
     * @param sortOrder the sortOrder value to set
     * @return the FacetRequestOptions object itself.
     */
    public FacetRequestOptions withSortOrder(FacetSortOrder sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }

    /**
     * Get specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.
     *
     * @return the filter value
     */
    public String filter() {
        return this.filter;
    }

    /**
     * Set specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.
     *
     * @param filter the filter value to set
     * @return the FacetRequestOptions object itself.
     */
    public FacetRequestOptions withFilter(String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the maximum number of facet rows that should be returned.
     *
     * @return the top value
     */
    public Integer top() {
        return this.top;
    }

    /**
     * Set the maximum number of facet rows that should be returned.
     *
     * @param top the top value to set
     * @return the FacetRequestOptions object itself.
     */
    public FacetRequestOptions withTop(Integer top) {
        this.top = top;
        return this;
    }

}
