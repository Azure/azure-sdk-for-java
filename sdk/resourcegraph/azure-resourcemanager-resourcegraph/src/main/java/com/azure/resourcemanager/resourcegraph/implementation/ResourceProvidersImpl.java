// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.resourcegraph.ResourceGraphManager;
import com.azure.resourcemanager.resourcegraph.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.resourcegraph.fluent.models.QueryResponseInner;
import com.azure.resourcemanager.resourcegraph.fluent.models.ResourceChangeDataInner;
import com.azure.resourcemanager.resourcegraph.fluent.models.ResourceChangeListInner;
import com.azure.resourcemanager.resourcegraph.models.QueryRequest;
import com.azure.resourcemanager.resourcegraph.models.QueryResponse;
import com.azure.resourcemanager.resourcegraph.models.ResourceChangeData;
import com.azure.resourcemanager.resourcegraph.models.ResourceChangeDetailsRequestParameters;
import com.azure.resourcemanager.resourcegraph.models.ResourceChangeList;
import com.azure.resourcemanager.resourcegraph.models.ResourceChangesRequestParameters;
import com.azure.resourcemanager.resourcegraph.models.ResourceProviders;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ResourceProvidersImpl implements ResourceProviders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final ResourceGraphManager serviceManager;

    public ResourceProvidersImpl(ResourceProvidersClient innerClient, ResourceGraphManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public QueryResponse resources(QueryRequest query) {
        QueryResponseInner inner = this.serviceClient().resources(query);
        if (inner != null) {
            return new QueryResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<QueryResponse> resourcesWithResponse(QueryRequest query, Context context) {
        Response<QueryResponseInner> inner = this.serviceClient().resourcesWithResponse(query, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new QueryResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ResourceChangeList resourceChanges(ResourceChangesRequestParameters parameters) {
        ResourceChangeListInner inner = this.serviceClient().resourceChanges(parameters);
        if (inner != null) {
            return new ResourceChangeListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResourceChangeList> resourceChangesWithResponse(
        ResourceChangesRequestParameters parameters, Context context) {
        Response<ResourceChangeListInner> inner = this.serviceClient().resourceChangesWithResponse(parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResourceChangeListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ResourceChangeData resourceChangeDetails(ResourceChangeDetailsRequestParameters parameters) {
        ResourceChangeDataInner inner = this.serviceClient().resourceChangeDetails(parameters);
        if (inner != null) {
            return new ResourceChangeDataImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResourceChangeData> resourceChangeDetailsWithResponse(
        ResourceChangeDetailsRequestParameters parameters, Context context) {
        Response<ResourceChangeDataInner> inner =
            this.serviceClient().resourceChangeDetailsWithResponse(parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResourceChangeDataImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private ResourceGraphManager manager() {
        return this.serviceManager;
    }
}
