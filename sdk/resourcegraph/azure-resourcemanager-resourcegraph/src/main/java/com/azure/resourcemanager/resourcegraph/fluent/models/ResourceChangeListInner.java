// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A list of changes associated with a resource over a specific time interval. */
@Fluent
public final class ResourceChangeListInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceChangeListInner.class);

    /*
     * The pageable value returned by the operation, i.e. a list of changes to
     * the resource.
     *
     * - The list is ordered from the most recent changes to the least recent
     * changes.
     * - This list will be empty if there were no changes during the requested
     * interval.
     * - The `Before` snapshot timestamp value of the oldest change can be
     * outside of the specified time interval.
     */
    @JsonProperty(value = "changes")
    private List<ResourceChangeDataInner> changes;

    /*
     * Skip token that encodes the skip information while executing the current
     * request
     */
    @JsonProperty(value = "$skipToken")
    private Object skipToken;

    /**
     * Get the changes property: The pageable value returned by the operation, i.e. a list of changes to the resource.
     *
     * <p>- The list is ordered from the most recent changes to the least recent changes. - This list will be empty if
     * there were no changes during the requested interval. - The `Before` snapshot timestamp value of the oldest change
     * can be outside of the specified time interval.
     *
     * @return the changes value.
     */
    public List<ResourceChangeDataInner> changes() {
        return this.changes;
    }

    /**
     * Set the changes property: The pageable value returned by the operation, i.e. a list of changes to the resource.
     *
     * <p>- The list is ordered from the most recent changes to the least recent changes. - This list will be empty if
     * there were no changes during the requested interval. - The `Before` snapshot timestamp value of the oldest change
     * can be outside of the specified time interval.
     *
     * @param changes the changes value to set.
     * @return the ResourceChangeListInner object itself.
     */
    public ResourceChangeListInner withChanges(List<ResourceChangeDataInner> changes) {
        this.changes = changes;
        return this;
    }

    /**
     * Get the skipToken property: Skip token that encodes the skip information while executing the current request.
     *
     * @return the skipToken value.
     */
    public Object skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: Skip token that encodes the skip information while executing the current request.
     *
     * @param skipToken the skipToken value to set.
     * @return the ResourceChangeListInner object itself.
     */
    public ResourceChangeListInner withSkipToken(Object skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (changes() != null) {
            changes().forEach(e -> e.validate());
        }
    }
}
