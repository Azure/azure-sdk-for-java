// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** An interval in time specifying the date and time for the inclusive start and exclusive end, i.e. `[start, end)`. */
@Fluent
public class DateTimeInterval {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DateTimeInterval.class);

    /*
     * A datetime indicating the inclusive/closed start of the time interval,
     * i.e. `[`**`start`**`, end)`. Specifying a `start` that occurs
     * chronologically after `end` will result in an error.
     */
    @JsonProperty(value = "start", required = true)
    private OffsetDateTime start;

    /*
     * A datetime indicating the exclusive/open end of the time interval, i.e.
     * `[start, `**`end`**`)`. Specifying an `end` that occurs chronologically
     * before `start` will result in an error.
     */
    @JsonProperty(value = "end", required = true)
    private OffsetDateTime end;

    /**
     * Get the start property: A datetime indicating the inclusive/closed start of the time interval, i.e.
     * `[`**`start`**`, end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.
     *
     * @return the start value.
     */
    public OffsetDateTime start() {
        return this.start;
    }

    /**
     * Set the start property: A datetime indicating the inclusive/closed start of the time interval, i.e.
     * `[`**`start`**`, end)`. Specifying a `start` that occurs chronologically after `end` will result in an error.
     *
     * @param start the start value to set.
     * @return the DateTimeInterval object itself.
     */
    public DateTimeInterval withStart(OffsetDateTime start) {
        this.start = start;
        return this;
    }

    /**
     * Get the end property: A datetime indicating the exclusive/open end of the time interval, i.e. `[start,
     * `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in an error.
     *
     * @return the end value.
     */
    public OffsetDateTime end() {
        return this.end;
    }

    /**
     * Set the end property: A datetime indicating the exclusive/open end of the time interval, i.e. `[start,
     * `**`end`**`)`. Specifying an `end` that occurs chronologically before `start` will result in an error.
     *
     * @param end the end value to set.
     * @return the DateTimeInterval object itself.
     */
    public DateTimeInterval withEnd(OffsetDateTime end) {
        this.end = end;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (start() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property start in model DateTimeInterval"));
        }
        if (end() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property end in model DateTimeInterval"));
        }
    }
}
