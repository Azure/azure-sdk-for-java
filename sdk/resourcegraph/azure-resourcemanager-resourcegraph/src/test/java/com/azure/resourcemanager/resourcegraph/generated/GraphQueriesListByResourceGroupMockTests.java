// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.resourcegraph.ResourceGraphManager;
import com.azure.resourcemanager.resourcegraph.models.GraphQueryResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GraphQueriesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"timeModified\":\"2021-01-16T07:23:11Z\",\"description\":\"hix\",\"query\":\"igdtopbob\",\"resultKind\":\"basic\"},\"etag\":\"m\",\"location\":\"w\",\"tags\":{\"hrzayvvtpgvdf\":\"a\"},\"id\":\"iotkftutqxl\",\"name\":\"gxlefgugnxkrxd\",\"type\":\"mi\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ResourceGraphManager manager = ResourceGraphManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<GraphQueryResource> response
            = manager.graphQueries().listByResourceGroup("jthjqkwpyei", "xmqci", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("w", response.iterator().next().location());
        Assertions.assertEquals("a", response.iterator().next().tags().get("hrzayvvtpgvdf"));
        Assertions.assertEquals("m", response.iterator().next().etag());
        Assertions.assertEquals("hix", response.iterator().next().description());
        Assertions.assertEquals("igdtopbob", response.iterator().next().query());
    }
}
