// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.resourcegraph.ResourceGraphManager;
import com.azure.resourcemanager.resourcegraph.models.GraphQueryResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GraphQueriesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"timeModified\":\"2020-12-23T07:48:17Z\",\"description\":\"e\",\"query\":\"kh\",\"resultKind\":\"basic\"},\"etag\":\"vfyexfw\",\"location\":\"ybcibvyvdcsit\",\"tags\":{\"hfiqscjeypvhe\":\"aamdect\",\"gm\":\"rkgqhcjrefo\"},\"id\":\"qsl\",\"name\":\"yyvxyqjpkcattpn\",\"type\":\"jcrcczsqpjhvmda\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ResourceGraphManager manager = ResourceGraphManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        GraphQueryResource response = manager.graphQueries()
            .define("njeaseipheofloke")
            .withRegion("zvdudgwdslfhotwm")
            .withExistingResourceGroup("mpmngnzscxaqwoo", "hcbonqvpkvlr")
            .withTags(mapOf("cftadeh", "pwlbjnpg", "dejbavo", "nltyfsoppusuesnz", "vudwx", "xzdmohctb"))
            .withEtag("jj")
            .withDescription("jbdlwtgrhpdjpju")
            .withQuery("asxazjpqyegualhb")
            .create();

        Assertions.assertEquals("ybcibvyvdcsit", response.location());
        Assertions.assertEquals("aamdect", response.tags().get("hfiqscjeypvhe"));
        Assertions.assertEquals("vfyexfw", response.etag());
        Assertions.assertEquals("e", response.description());
        Assertions.assertEquals("kh", response.query());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
