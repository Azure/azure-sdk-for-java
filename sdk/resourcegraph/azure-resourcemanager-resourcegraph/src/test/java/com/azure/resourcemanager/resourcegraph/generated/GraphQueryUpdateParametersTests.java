// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcegraph.models.GraphQueryUpdateParameters;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GraphQueryUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GraphQueryUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"uitnwuiz\":\"hmuouqfprwzwbn\",\"x\":\"a\",\"hr\":\"fizuckyf\",\"zwdzuh\":\"idf\"},\"etag\":\"mwisdkfthwxmnt\",\"properties\":{\"description\":\"aop\",\"query\":\"mijcmmxdcufufs\"}}")
            .toObject(GraphQueryUpdateParameters.class);
        Assertions.assertEquals("hmuouqfprwzwbn", model.tags().get("uitnwuiz"));
        Assertions.assertEquals("mwisdkfthwxmnt", model.etag());
        Assertions.assertEquals("aop", model.description());
        Assertions.assertEquals("mijcmmxdcufufs", model.query());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GraphQueryUpdateParameters model = new GraphQueryUpdateParameters()
            .withTags(mapOf("uitnwuiz", "hmuouqfprwzwbn", "x", "a", "hr", "fizuckyf", "zwdzuh", "idf"))
            .withEtag("mwisdkfthwxmnt")
            .withDescription("aop")
            .withQuery("mijcmmxdcufufs");
        model = BinaryData.fromObject(model).toObject(GraphQueryUpdateParameters.class);
        Assertions.assertEquals("hmuouqfprwzwbn", model.tags().get("uitnwuiz"));
        Assertions.assertEquals("mwisdkfthwxmnt", model.etag());
        Assertions.assertEquals("aop", model.description());
        Assertions.assertEquals("mijcmmxdcufufs", model.query());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
