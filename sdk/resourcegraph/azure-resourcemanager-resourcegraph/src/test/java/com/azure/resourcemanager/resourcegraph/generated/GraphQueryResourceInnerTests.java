// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourcegraph.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.resourcegraph.fluent.models.GraphQueryResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GraphQueryResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GraphQueryResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"timeModified\":\"2021-09-06T16:19:25Z\",\"description\":\"tduqktapspwgcuer\",\"query\":\"umkdosvqwhbmd\",\"resultKind\":\"basic\"},\"etag\":\"f\",\"location\":\"dgmb\",\"tags\":{\"fpfpsalgbquxigj\":\"xppbhtqqro\"},\"id\":\"jgzjaoyfhrtx\",\"name\":\"lnerkujysvleju\",\"type\":\"fqawrlyxw\"}")
            .toObject(GraphQueryResourceInner.class);
        Assertions.assertEquals("dgmb", model.location());
        Assertions.assertEquals("xppbhtqqro", model.tags().get("fpfpsalgbquxigj"));
        Assertions.assertEquals("f", model.etag());
        Assertions.assertEquals("tduqktapspwgcuer", model.description());
        Assertions.assertEquals("umkdosvqwhbmd", model.query());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GraphQueryResourceInner model = new GraphQueryResourceInner().withLocation("dgmb")
            .withTags(mapOf("fpfpsalgbquxigj", "xppbhtqqro"))
            .withEtag("f")
            .withDescription("tduqktapspwgcuer")
            .withQuery("umkdosvqwhbmd");
        model = BinaryData.fromObject(model).toObject(GraphQueryResourceInner.class);
        Assertions.assertEquals("dgmb", model.location());
        Assertions.assertEquals("xppbhtqqro", model.tags().get("fpfpsalgbquxigj"));
        Assertions.assertEquals("f", model.etag());
        Assertions.assertEquals("tduqktapspwgcuer", model.description());
        Assertions.assertEquals("umkdosvqwhbmd", model.query());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
