// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.terraform.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.terraform.models.ExportQuery;
import com.azure.resourcemanager.terraform.models.TargetProvider;
import org.junit.jupiter.api.Assertions;

public final class ExportQueryTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExportQuery model = BinaryData.fromString(
            "{\"type\":\"ExportQuery\",\"query\":\"vg\",\"namePattern\":\"zsymglzufcyzkohd\",\"recursive\":true,\"targetProvider\":\"azurerm\",\"fullProperties\":false,\"maskSensitive\":true}")
            .toObject(ExportQuery.class);
        Assertions.assertEquals(TargetProvider.AZURERM, model.targetProvider());
        Assertions.assertEquals(false, model.fullProperties());
        Assertions.assertEquals(true, model.maskSensitive());
        Assertions.assertEquals("vg", model.query());
        Assertions.assertEquals("zsymglzufcyzkohd", model.namePattern());
        Assertions.assertEquals(true, model.recursive());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExportQuery model = new ExportQuery().withTargetProvider(TargetProvider.AZURERM)
            .withFullProperties(false)
            .withMaskSensitive(true)
            .withQuery("vg")
            .withNamePattern("zsymglzufcyzkohd")
            .withRecursive(true);
        model = BinaryData.fromObject(model).toObject(ExportQuery.class);
        Assertions.assertEquals(TargetProvider.AZURERM, model.targetProvider());
        Assertions.assertEquals(false, model.fullProperties());
        Assertions.assertEquals(true, model.maskSensitive());
        Assertions.assertEquals("vg", model.query());
        Assertions.assertEquals("zsymglzufcyzkohd", model.namePattern());
        Assertions.assertEquals(true, model.recursive());
    }
}
