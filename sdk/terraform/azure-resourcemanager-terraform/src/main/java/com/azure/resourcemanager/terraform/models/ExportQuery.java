// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.terraform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Uses ARG (Azure Resource Graph) query to choose resources to be exported.
 */
@Fluent
public final class ExportQuery extends BaseExportModel {
    /*
     * The parameter type
     */
    private Type type = Type.EXPORT_QUERY;

    /*
     * The ARG where predicate. Multiple predicates can be combined using `and` operator. Example: `resourceGroup =~
     * "my-rg" and type =~ "microsoft.network/virtualnetworks"`. The default ARG table is `Resources`, use 'table'
     * property to query a different table.
     */
    private String query;

    /*
     * The id prefix for the exported Terraform resources. Defaults to `res-`.
     */
    private String namePattern;

    /*
     * Recursively includes child resources. Defaults to `false`.
     */
    private Boolean recursive;

    /*
     * Includes the resource group in the exported Terraform resources. Defaults to `false`.
     */
    private Boolean includeResourceGroup;

    /*
     * The ARG table name. Defaults to 'Resources'.
     */
    private String table;

    /*
     * The ARG Scope Filter parameter.
     */
    private AuthorizationScopeFilter authorizationScopeFilter;

    /**
     * Creates an instance of ExportQuery class.
     */
    public ExportQuery() {
    }

    /**
     * Get the type property: The parameter type.
     * 
     * @return the type value.
     */
    @Override
    public Type type() {
        return this.type;
    }

    /**
     * Get the query property: The ARG where predicate. Multiple predicates can be combined using `and` operator.
     * Example: `resourceGroup =~ "my-rg" and type =~ "microsoft.network/virtualnetworks"`. The default ARG table is
     * `Resources`, use 'table' property to query a different table.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: The ARG where predicate. Multiple predicates can be combined using `and` operator.
     * Example: `resourceGroup =~ "my-rg" and type =~ "microsoft.network/virtualnetworks"`. The default ARG table is
     * `Resources`, use 'table' property to query a different table.
     * 
     * @param query the query value to set.
     * @return the ExportQuery object itself.
     */
    public ExportQuery withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the namePattern property: The id prefix for the exported Terraform resources. Defaults to `res-`.
     * 
     * @return the namePattern value.
     */
    public String namePattern() {
        return this.namePattern;
    }

    /**
     * Set the namePattern property: The id prefix for the exported Terraform resources. Defaults to `res-`.
     * 
     * @param namePattern the namePattern value to set.
     * @return the ExportQuery object itself.
     */
    public ExportQuery withNamePattern(String namePattern) {
        this.namePattern = namePattern;
        return this;
    }

    /**
     * Get the recursive property: Recursively includes child resources. Defaults to `false`.
     * 
     * @return the recursive value.
     */
    public Boolean recursive() {
        return this.recursive;
    }

    /**
     * Set the recursive property: Recursively includes child resources. Defaults to `false`.
     * 
     * @param recursive the recursive value to set.
     * @return the ExportQuery object itself.
     */
    public ExportQuery withRecursive(Boolean recursive) {
        this.recursive = recursive;
        return this;
    }

    /**
     * Get the includeResourceGroup property: Includes the resource group in the exported Terraform resources. Defaults
     * to `false`.
     * 
     * @return the includeResourceGroup value.
     */
    public Boolean includeResourceGroup() {
        return this.includeResourceGroup;
    }

    /**
     * Set the includeResourceGroup property: Includes the resource group in the exported Terraform resources. Defaults
     * to `false`.
     * 
     * @param includeResourceGroup the includeResourceGroup value to set.
     * @return the ExportQuery object itself.
     */
    public ExportQuery withIncludeResourceGroup(Boolean includeResourceGroup) {
        this.includeResourceGroup = includeResourceGroup;
        return this;
    }

    /**
     * Get the table property: The ARG table name. Defaults to 'Resources'.
     * 
     * @return the table value.
     */
    public String table() {
        return this.table;
    }

    /**
     * Set the table property: The ARG table name. Defaults to 'Resources'.
     * 
     * @param table the table value to set.
     * @return the ExportQuery object itself.
     */
    public ExportQuery withTable(String table) {
        this.table = table;
        return this;
    }

    /**
     * Get the authorizationScopeFilter property: The ARG Scope Filter parameter.
     * 
     * @return the authorizationScopeFilter value.
     */
    public AuthorizationScopeFilter authorizationScopeFilter() {
        return this.authorizationScopeFilter;
    }

    /**
     * Set the authorizationScopeFilter property: The ARG Scope Filter parameter.
     * 
     * @param authorizationScopeFilter the authorizationScopeFilter value to set.
     * @return the ExportQuery object itself.
     */
    public ExportQuery withAuthorizationScopeFilter(AuthorizationScopeFilter authorizationScopeFilter) {
        this.authorizationScopeFilter = authorizationScopeFilter;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportQuery withTargetProvider(TargetProvider targetProvider) {
        super.withTargetProvider(targetProvider);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportQuery withFullProperties(Boolean fullProperties) {
        super.withFullProperties(fullProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportQuery withMaskSensitive(Boolean maskSensitive) {
        super.withMaskSensitive(maskSensitive);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportQuery withIncludeRoleAssignment(Boolean includeRoleAssignment) {
        super.withIncludeRoleAssignment(includeRoleAssignment);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportQuery withIncludeManagedResource(Boolean includeManagedResource) {
        super.withIncludeManagedResource(includeManagedResource);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportQuery withExcludeAzureResource(List<String> excludeAzureResource) {
        super.withExcludeAzureResource(excludeAzureResource);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportQuery withExcludeTerraformResource(List<String> excludeTerraformResource) {
        super.withExcludeTerraformResource(excludeTerraformResource);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (query() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property query in model ExportQuery"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportQuery.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetProvider", targetProvider() == null ? null : targetProvider().toString());
        jsonWriter.writeBooleanField("fullProperties", fullProperties());
        jsonWriter.writeBooleanField("maskSensitive", maskSensitive());
        jsonWriter.writeBooleanField("includeRoleAssignment", includeRoleAssignment());
        jsonWriter.writeBooleanField("includeManagedResource", includeManagedResource());
        jsonWriter.writeArrayField("excludeAzureResource", excludeAzureResource(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludeTerraformResource", excludeTerraformResource(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("namePattern", this.namePattern);
        jsonWriter.writeBooleanField("recursive", this.recursive);
        jsonWriter.writeBooleanField("includeResourceGroup", this.includeResourceGroup);
        jsonWriter.writeStringField("table", this.table);
        jsonWriter.writeStringField("authorizationScopeFilter",
            this.authorizationScopeFilter == null ? null : this.authorizationScopeFilter.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportQuery if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportQuery.
     */
    public static ExportQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportQuery deserializedExportQuery = new ExportQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetProvider".equals(fieldName)) {
                    deserializedExportQuery.withTargetProvider(TargetProvider.fromString(reader.getString()));
                } else if ("fullProperties".equals(fieldName)) {
                    deserializedExportQuery.withFullProperties(reader.getNullable(JsonReader::getBoolean));
                } else if ("maskSensitive".equals(fieldName)) {
                    deserializedExportQuery.withMaskSensitive(reader.getNullable(JsonReader::getBoolean));
                } else if ("includeRoleAssignment".equals(fieldName)) {
                    deserializedExportQuery.withIncludeRoleAssignment(reader.getNullable(JsonReader::getBoolean));
                } else if ("includeManagedResource".equals(fieldName)) {
                    deserializedExportQuery.withIncludeManagedResource(reader.getNullable(JsonReader::getBoolean));
                } else if ("excludeAzureResource".equals(fieldName)) {
                    List<String> excludeAzureResource = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportQuery.withExcludeAzureResource(excludeAzureResource);
                } else if ("excludeTerraformResource".equals(fieldName)) {
                    List<String> excludeTerraformResource = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportQuery.withExcludeTerraformResource(excludeTerraformResource);
                } else if ("query".equals(fieldName)) {
                    deserializedExportQuery.query = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedExportQuery.type = Type.fromString(reader.getString());
                } else if ("namePattern".equals(fieldName)) {
                    deserializedExportQuery.namePattern = reader.getString();
                } else if ("recursive".equals(fieldName)) {
                    deserializedExportQuery.recursive = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeResourceGroup".equals(fieldName)) {
                    deserializedExportQuery.includeResourceGroup = reader.getNullable(JsonReader::getBoolean);
                } else if ("table".equals(fieldName)) {
                    deserializedExportQuery.table = reader.getString();
                } else if ("authorizationScopeFilter".equals(fieldName)) {
                    deserializedExportQuery.authorizationScopeFilter
                        = AuthorizationScopeFilter.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportQuery;
        });
    }
}
