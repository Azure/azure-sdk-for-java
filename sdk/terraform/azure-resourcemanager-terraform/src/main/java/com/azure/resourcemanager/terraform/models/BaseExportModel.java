// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.terraform.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The base export parameter.
 */
@Fluent
public class BaseExportModel implements JsonSerializable<BaseExportModel> {
    /*
     * The parameter type
     */
    private Type type = Type.fromString("BaseExportModel");

    /*
     * The target Azure Terraform provider. Defaults to `azurerm`.
     */
    private TargetProvider targetProvider;

    /*
     * Whether to output all non-computed properties in the generated Terraform configuration. If set to `false`
     * empty-valued properties will be omitted from the configuration. Defaults to `true`.
     */
    private Boolean fullProperties;

    /*
     * Mask sensitive attributes in the Terraform configuration. Defaults to `true`.
     */
    private Boolean maskSensitive;

    /*
     * Whether to include RBAC role assignments assigned to the resources exported. Only resource-scoped role
     * assignments are supported. Defaults to `false`.
     */
    private Boolean includeRoleAssignment;

    /*
     * Whether to include internal resources managed by Azure in the exported configuration. Defaults to `false`.
     */
    private Boolean includeManagedResource;

    /*
     * Excludes specified Azure Resource Ids. Case-insensitive Azure Resource ID regular expression. Example:
     * `["/subscriptions/[0-9a-f-]+/resourceGroups/my-rg.*"]`.
     */
    private List<String> excludeAzureResource;

    /*
     * Excludes specified Terraform resource types. Example: `["azurerm_virtual_network"]`.
     */
    private List<String> excludeTerraformResource;

    /**
     * Creates an instance of BaseExportModel class.
     */
    public BaseExportModel() {
    }

    /**
     * Get the type property: The parameter type.
     * 
     * @return the type value.
     */
    public Type type() {
        return this.type;
    }

    /**
     * Get the targetProvider property: The target Azure Terraform provider. Defaults to `azurerm`.
     * 
     * @return the targetProvider value.
     */
    public TargetProvider targetProvider() {
        return this.targetProvider;
    }

    /**
     * Set the targetProvider property: The target Azure Terraform provider. Defaults to `azurerm`.
     * 
     * @param targetProvider the targetProvider value to set.
     * @return the BaseExportModel object itself.
     */
    public BaseExportModel withTargetProvider(TargetProvider targetProvider) {
        this.targetProvider = targetProvider;
        return this;
    }

    /**
     * Get the fullProperties property: Whether to output all non-computed properties in the generated Terraform
     * configuration. If set to `false` empty-valued properties will be omitted from the configuration. Defaults to
     * `true`.
     * 
     * @return the fullProperties value.
     */
    public Boolean fullProperties() {
        return this.fullProperties;
    }

    /**
     * Set the fullProperties property: Whether to output all non-computed properties in the generated Terraform
     * configuration. If set to `false` empty-valued properties will be omitted from the configuration. Defaults to
     * `true`.
     * 
     * @param fullProperties the fullProperties value to set.
     * @return the BaseExportModel object itself.
     */
    public BaseExportModel withFullProperties(Boolean fullProperties) {
        this.fullProperties = fullProperties;
        return this;
    }

    /**
     * Get the maskSensitive property: Mask sensitive attributes in the Terraform configuration. Defaults to `true`.
     * 
     * @return the maskSensitive value.
     */
    public Boolean maskSensitive() {
        return this.maskSensitive;
    }

    /**
     * Set the maskSensitive property: Mask sensitive attributes in the Terraform configuration. Defaults to `true`.
     * 
     * @param maskSensitive the maskSensitive value to set.
     * @return the BaseExportModel object itself.
     */
    public BaseExportModel withMaskSensitive(Boolean maskSensitive) {
        this.maskSensitive = maskSensitive;
        return this;
    }

    /**
     * Get the includeRoleAssignment property: Whether to include RBAC role assignments assigned to the resources
     * exported. Only resource-scoped role assignments are supported. Defaults to `false`.
     * 
     * @return the includeRoleAssignment value.
     */
    public Boolean includeRoleAssignment() {
        return this.includeRoleAssignment;
    }

    /**
     * Set the includeRoleAssignment property: Whether to include RBAC role assignments assigned to the resources
     * exported. Only resource-scoped role assignments are supported. Defaults to `false`.
     * 
     * @param includeRoleAssignment the includeRoleAssignment value to set.
     * @return the BaseExportModel object itself.
     */
    public BaseExportModel withIncludeRoleAssignment(Boolean includeRoleAssignment) {
        this.includeRoleAssignment = includeRoleAssignment;
        return this;
    }

    /**
     * Get the includeManagedResource property: Whether to include internal resources managed by Azure in the exported
     * configuration. Defaults to `false`.
     * 
     * @return the includeManagedResource value.
     */
    public Boolean includeManagedResource() {
        return this.includeManagedResource;
    }

    /**
     * Set the includeManagedResource property: Whether to include internal resources managed by Azure in the exported
     * configuration. Defaults to `false`.
     * 
     * @param includeManagedResource the includeManagedResource value to set.
     * @return the BaseExportModel object itself.
     */
    public BaseExportModel withIncludeManagedResource(Boolean includeManagedResource) {
        this.includeManagedResource = includeManagedResource;
        return this;
    }

    /**
     * Get the excludeAzureResource property: Excludes specified Azure Resource Ids. Case-insensitive Azure Resource ID
     * regular expression. Example: `["/subscriptions/[0-9a-f-]+/resourceGroups/my-rg.*"]`.
     * 
     * @return the excludeAzureResource value.
     */
    public List<String> excludeAzureResource() {
        return this.excludeAzureResource;
    }

    /**
     * Set the excludeAzureResource property: Excludes specified Azure Resource Ids. Case-insensitive Azure Resource ID
     * regular expression. Example: `["/subscriptions/[0-9a-f-]+/resourceGroups/my-rg.*"]`.
     * 
     * @param excludeAzureResource the excludeAzureResource value to set.
     * @return the BaseExportModel object itself.
     */
    public BaseExportModel withExcludeAzureResource(List<String> excludeAzureResource) {
        this.excludeAzureResource = excludeAzureResource;
        return this;
    }

    /**
     * Get the excludeTerraformResource property: Excludes specified Terraform resource types. Example:
     * `["azurerm_virtual_network"]`.
     * 
     * @return the excludeTerraformResource value.
     */
    public List<String> excludeTerraformResource() {
        return this.excludeTerraformResource;
    }

    /**
     * Set the excludeTerraformResource property: Excludes specified Terraform resource types. Example:
     * `["azurerm_virtual_network"]`.
     * 
     * @param excludeTerraformResource the excludeTerraformResource value to set.
     * @return the BaseExportModel object itself.
     */
    public BaseExportModel withExcludeTerraformResource(List<String> excludeTerraformResource) {
        this.excludeTerraformResource = excludeTerraformResource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("targetProvider",
            this.targetProvider == null ? null : this.targetProvider.toString());
        jsonWriter.writeBooleanField("fullProperties", this.fullProperties);
        jsonWriter.writeBooleanField("maskSensitive", this.maskSensitive);
        jsonWriter.writeBooleanField("includeRoleAssignment", this.includeRoleAssignment);
        jsonWriter.writeBooleanField("includeManagedResource", this.includeManagedResource);
        jsonWriter.writeArrayField("excludeAzureResource", this.excludeAzureResource,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludeTerraformResource", this.excludeTerraformResource,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BaseExportModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BaseExportModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BaseExportModel.
     */
    public static BaseExportModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ExportQuery".equals(discriminatorValue)) {
                    return ExportQuery.fromJson(readerToUse.reset());
                } else if ("ExportResource".equals(discriminatorValue)) {
                    return ExportResource.fromJson(readerToUse.reset());
                } else if ("ExportResourceGroup".equals(discriminatorValue)) {
                    return ExportResourceGroup.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static BaseExportModel fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BaseExportModel deserializedBaseExportModel = new BaseExportModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedBaseExportModel.type = Type.fromString(reader.getString());
                } else if ("targetProvider".equals(fieldName)) {
                    deserializedBaseExportModel.targetProvider = TargetProvider.fromString(reader.getString());
                } else if ("fullProperties".equals(fieldName)) {
                    deserializedBaseExportModel.fullProperties = reader.getNullable(JsonReader::getBoolean);
                } else if ("maskSensitive".equals(fieldName)) {
                    deserializedBaseExportModel.maskSensitive = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeRoleAssignment".equals(fieldName)) {
                    deserializedBaseExportModel.includeRoleAssignment = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeManagedResource".equals(fieldName)) {
                    deserializedBaseExportModel.includeManagedResource = reader.getNullable(JsonReader::getBoolean);
                } else if ("excludeAzureResource".equals(fieldName)) {
                    List<String> excludeAzureResource = reader.readArray(reader1 -> reader1.getString());
                    deserializedBaseExportModel.excludeAzureResource = excludeAzureResource;
                } else if ("excludeTerraformResource".equals(fieldName)) {
                    List<String> excludeTerraformResource = reader.readArray(reader1 -> reader1.getString());
                    deserializedBaseExportModel.excludeTerraformResource = excludeTerraformResource;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaseExportModel;
        });
    }
}
