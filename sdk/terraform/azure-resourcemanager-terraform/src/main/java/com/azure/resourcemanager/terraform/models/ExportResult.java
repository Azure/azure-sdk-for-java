// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.terraform.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Terraform export result.
 */
@Immutable
public final class ExportResult implements JsonSerializable<ExportResult> {
    /*
     * The exported Terraform HCL configuration.
     */
    private String configuration;

    /*
     * The Terraform import blocks for the configuration, necessary for managing existing Azure resources in Terraform.
     */
    private String importProperty;

    /*
     * A list of Azure resources which could not be exported to Terraform. The most common cause is lack of Terraform
     * provider support. Change the provider type to `azapi` for bigger set of supported resources.
     */
    private List<String> skippedResources;

    /*
     * A list of errors encountered during export operation.
     */
    private List<ManagementError> errors;

    /**
     * Creates an instance of ExportResult class.
     */
    private ExportResult() {
    }

    /**
     * Get the configuration property: The exported Terraform HCL configuration.
     * 
     * @return the configuration value.
     */
    public String configuration() {
        return this.configuration;
    }

    /**
     * Get the importProperty property: The Terraform import blocks for the configuration, necessary for managing
     * existing Azure resources in Terraform.
     * 
     * @return the importProperty value.
     */
    public String importProperty() {
        return this.importProperty;
    }

    /**
     * Get the skippedResources property: A list of Azure resources which could not be exported to Terraform. The most
     * common cause is lack of Terraform provider support. Change the provider type to `azapi` for bigger set of
     * supported resources.
     * 
     * @return the skippedResources value.
     */
    public List<String> skippedResources() {
        return this.skippedResources;
    }

    /**
     * Get the errors property: A list of errors encountered during export operation.
     * 
     * @return the errors value.
     */
    public List<ManagementError> errors() {
        return this.errors;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configuration", this.configuration);
        jsonWriter.writeStringField("import", this.importProperty);
        jsonWriter.writeArrayField("skippedResources", this.skippedResources,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExportResult.
     */
    public static ExportResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportResult deserializedExportResult = new ExportResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuration".equals(fieldName)) {
                    deserializedExportResult.configuration = reader.getString();
                } else if ("import".equals(fieldName)) {
                    deserializedExportResult.importProperty = reader.getString();
                } else if ("skippedResources".equals(fieldName)) {
                    List<String> skippedResources = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportResult.skippedResources = skippedResources;
                } else if ("errors".equals(fieldName)) {
                    List<ManagementError> errors = reader.readArray(reader1 -> ManagementError.fromJson(reader1));
                    deserializedExportResult.errors = errors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportResult;
        });
    }
}
