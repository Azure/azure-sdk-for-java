// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.terraform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specified resources to be exported by their ids.
 */
@Fluent
public final class ExportResource extends BaseExportModel {
    /*
     * The parameter type
     */
    private Type type = Type.EXPORT_RESOURCE;

    /*
     * The id(s) of the resource to be exported. Example:
     * `["/subscriptions/12345678-1234-1234-1234-1234567890ab/resourceGroups/my-rg"].
     */
    private List<String> resourceIds;

    /*
     * The Terraform id of the exported resource. Only effective when `resourceIds` contains only one item. Defaults to
     * `res-0`.
     */
    private String resourceName;

    /*
     * The Terraform resource type to map to. Only effective when `resourceIds` has one item. Example:
     * `azurerm_virtual_network`. Automatic type mapping will be performed if not provided.
     */
    private String resourceType;

    /*
     * The id prefix for the exported Terraform resources. Defaults to `res-`.
     */
    private String namePattern;

    /*
     * Recursively includes child resources. Defaults to `false`.
     */
    private Boolean recursive;

    /*
     * Includes the resource group in the exported Terraform resources. Defaults to `false`.
     */
    private Boolean includeResourceGroup;

    /**
     * Creates an instance of ExportResource class.
     */
    public ExportResource() {
    }

    /**
     * Get the type property: The parameter type.
     * 
     * @return the type value.
     */
    @Override
    public Type type() {
        return this.type;
    }

    /**
     * Get the resourceIds property: The id(s) of the resource to be exported. Example:
     * `["/subscriptions/12345678-1234-1234-1234-1234567890ab/resourceGroups/my-rg"].
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: The id(s) of the resource to be exported. Example:
     * `["/subscriptions/12345678-1234-1234-1234-1234567890ab/resourceGroups/my-rg"].
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the ExportResource object itself.
     */
    public ExportResource withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * Get the resourceName property: The Terraform id of the exported resource. Only effective when `resourceIds`
     * contains only one item. Defaults to `res-0`.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: The Terraform id of the exported resource. Only effective when `resourceIds`
     * contains only one item. Defaults to `res-0`.
     * 
     * @param resourceName the resourceName value to set.
     * @return the ExportResource object itself.
     */
    public ExportResource withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the resourceType property: The Terraform resource type to map to. Only effective when `resourceIds` has one
     * item. Example: `azurerm_virtual_network`. Automatic type mapping will be performed if not provided.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The Terraform resource type to map to. Only effective when `resourceIds` has one
     * item. Example: `azurerm_virtual_network`. Automatic type mapping will be performed if not provided.
     * 
     * @param resourceType the resourceType value to set.
     * @return the ExportResource object itself.
     */
    public ExportResource withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the namePattern property: The id prefix for the exported Terraform resources. Defaults to `res-`.
     * 
     * @return the namePattern value.
     */
    public String namePattern() {
        return this.namePattern;
    }

    /**
     * Set the namePattern property: The id prefix for the exported Terraform resources. Defaults to `res-`.
     * 
     * @param namePattern the namePattern value to set.
     * @return the ExportResource object itself.
     */
    public ExportResource withNamePattern(String namePattern) {
        this.namePattern = namePattern;
        return this;
    }

    /**
     * Get the recursive property: Recursively includes child resources. Defaults to `false`.
     * 
     * @return the recursive value.
     */
    public Boolean recursive() {
        return this.recursive;
    }

    /**
     * Set the recursive property: Recursively includes child resources. Defaults to `false`.
     * 
     * @param recursive the recursive value to set.
     * @return the ExportResource object itself.
     */
    public ExportResource withRecursive(Boolean recursive) {
        this.recursive = recursive;
        return this;
    }

    /**
     * Get the includeResourceGroup property: Includes the resource group in the exported Terraform resources. Defaults
     * to `false`.
     * 
     * @return the includeResourceGroup value.
     */
    public Boolean includeResourceGroup() {
        return this.includeResourceGroup;
    }

    /**
     * Set the includeResourceGroup property: Includes the resource group in the exported Terraform resources. Defaults
     * to `false`.
     * 
     * @param includeResourceGroup the includeResourceGroup value to set.
     * @return the ExportResource object itself.
     */
    public ExportResource withIncludeResourceGroup(Boolean includeResourceGroup) {
        this.includeResourceGroup = includeResourceGroup;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportResource withTargetProvider(TargetProvider targetProvider) {
        super.withTargetProvider(targetProvider);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportResource withFullProperties(Boolean fullProperties) {
        super.withFullProperties(fullProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportResource withMaskSensitive(Boolean maskSensitive) {
        super.withMaskSensitive(maskSensitive);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportResource withIncludeRoleAssignment(Boolean includeRoleAssignment) {
        super.withIncludeRoleAssignment(includeRoleAssignment);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportResource withIncludeManagedResource(Boolean includeManagedResource) {
        super.withIncludeManagedResource(includeManagedResource);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportResource withExcludeAzureResource(List<String> excludeAzureResource) {
        super.withExcludeAzureResource(excludeAzureResource);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExportResource withExcludeTerraformResource(List<String> excludeTerraformResource) {
        super.withExcludeTerraformResource(excludeTerraformResource);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (resourceIds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceIds in model ExportResource"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportResource.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetProvider", targetProvider() == null ? null : targetProvider().toString());
        jsonWriter.writeBooleanField("fullProperties", fullProperties());
        jsonWriter.writeBooleanField("maskSensitive", maskSensitive());
        jsonWriter.writeBooleanField("includeRoleAssignment", includeRoleAssignment());
        jsonWriter.writeBooleanField("includeManagedResource", includeManagedResource());
        jsonWriter.writeArrayField("excludeAzureResource", excludeAzureResource(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludeTerraformResource", excludeTerraformResource(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("resourceName", this.resourceName);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("namePattern", this.namePattern);
        jsonWriter.writeBooleanField("recursive", this.recursive);
        jsonWriter.writeBooleanField("includeResourceGroup", this.includeResourceGroup);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportResource.
     */
    public static ExportResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportResource deserializedExportResource = new ExportResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetProvider".equals(fieldName)) {
                    deserializedExportResource.withTargetProvider(TargetProvider.fromString(reader.getString()));
                } else if ("fullProperties".equals(fieldName)) {
                    deserializedExportResource.withFullProperties(reader.getNullable(JsonReader::getBoolean));
                } else if ("maskSensitive".equals(fieldName)) {
                    deserializedExportResource.withMaskSensitive(reader.getNullable(JsonReader::getBoolean));
                } else if ("includeRoleAssignment".equals(fieldName)) {
                    deserializedExportResource.withIncludeRoleAssignment(reader.getNullable(JsonReader::getBoolean));
                } else if ("includeManagedResource".equals(fieldName)) {
                    deserializedExportResource.withIncludeManagedResource(reader.getNullable(JsonReader::getBoolean));
                } else if ("excludeAzureResource".equals(fieldName)) {
                    List<String> excludeAzureResource = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportResource.withExcludeAzureResource(excludeAzureResource);
                } else if ("excludeTerraformResource".equals(fieldName)) {
                    List<String> excludeTerraformResource = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportResource.withExcludeTerraformResource(excludeTerraformResource);
                } else if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportResource.resourceIds = resourceIds;
                } else if ("type".equals(fieldName)) {
                    deserializedExportResource.type = Type.fromString(reader.getString());
                } else if ("resourceName".equals(fieldName)) {
                    deserializedExportResource.resourceName = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedExportResource.resourceType = reader.getString();
                } else if ("namePattern".equals(fieldName)) {
                    deserializedExportResource.namePattern = reader.getString();
                } else if ("recursive".equals(fieldName)) {
                    deserializedExportResource.recursive = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeResourceGroup".equals(fieldName)) {
                    deserializedExportResource.includeResourceGroup = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportResource;
        });
    }
}
