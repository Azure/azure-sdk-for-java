// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.terraform.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.terraform.fluent.TerraformsClient;
import com.azure.resourcemanager.terraform.fluent.models.TerraformOperationStatusInner;
import com.azure.resourcemanager.terraform.models.BaseExportModel;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in TerraformsClient.
 */
public final class TerraformsClientImpl implements TerraformsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TerraformsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureTerraformManagementClientImpl client;

    /**
     * Initializes an instance of TerraformsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TerraformsClientImpl(AzureTerraformManagementClientImpl client) {
        this.service
            = RestProxy.create(TerraformsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureTerraformManagementClientTerraforms to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureTerraformManagementClientTerraforms")
    public interface TerraformsService {
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AzureTerraform/exportTerraform")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> exportTerraform(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BaseExportModel body, Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AzureTerraform/exportTerraform")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> exportTerraformSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BaseExportModel body, Context context);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> exportTerraformWithResponseAsync(BaseExportModel body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.exportTerraform(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> exportTerraformWithResponse(BaseExportModel body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.exportTerraformSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), contentType, accept, body, Context.NONE);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> exportTerraformWithResponse(BaseExportModel body, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.exportTerraformSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), contentType, accept, body, context);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<TerraformOperationStatusInner>, TerraformOperationStatusInner>
        beginExportTerraformAsync(BaseExportModel body) {
        Mono<Response<Flux<ByteBuffer>>> mono = exportTerraformWithResponseAsync(body);
        return this.client.<TerraformOperationStatusInner, TerraformOperationStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), TerraformOperationStatusInner.class, TerraformOperationStatusInner.class,
            this.client.getContext());
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TerraformOperationStatusInner>, TerraformOperationStatusInner>
        beginExportTerraform(BaseExportModel body) {
        Response<BinaryData> response = exportTerraformWithResponse(body);
        return this.client.<TerraformOperationStatusInner, TerraformOperationStatusInner>getLroResult(response,
            TerraformOperationStatusInner.class, TerraformOperationStatusInner.class, Context.NONE);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<TerraformOperationStatusInner>, TerraformOperationStatusInner>
        beginExportTerraform(BaseExportModel body, Context context) {
        Response<BinaryData> response = exportTerraformWithResponse(body, context);
        return this.client.<TerraformOperationStatusInner, TerraformOperationStatusInner>getLroResult(response,
            TerraformOperationStatusInner.class, TerraformOperationStatusInner.class, context);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TerraformOperationStatusInner> exportTerraformAsync(BaseExportModel body) {
        return beginExportTerraformAsync(body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TerraformOperationStatusInner exportTerraform(BaseExportModel body) {
        return beginExportTerraform(body).getFinalResult();
    }

    /**
     * Exports the Terraform configuration of the specified resource(s).
     * 
     * @param body The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TerraformOperationStatusInner exportTerraform(BaseExportModel body, Context context) {
        return beginExportTerraform(body, context).getFinalResult();
    }
}
