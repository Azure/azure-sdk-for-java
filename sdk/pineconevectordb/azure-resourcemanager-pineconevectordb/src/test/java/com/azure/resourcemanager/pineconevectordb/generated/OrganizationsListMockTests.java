// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.pineconevectordb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.pineconevectordb.PineconeVectorDbManager;
import com.azure.resourcemanager.pineconevectordb.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.pineconevectordb.models.OrganizationResource;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnStates;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"leggzfbu\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"vfaxkffeiith\",\"offerId\":\"vmezy\",\"planId\":\"shxmzsbbzoggigrx\",\"planName\":\"ur\",\"termUnit\":\"xxjnspydptk\",\"termId\":\"nkoukn\"}},\"user\":{\"firstName\":\"udwtiukbl\",\"lastName\":\"ngkpocipazy\",\"emailAddress\":\"o\",\"upn\":\"ukgjnpiucgygevq\",\"phoneNumber\":\"typmrbpizcdrqjsd\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"displayName\":\"fyhxde\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Enable\",\"enterpriseAppId\":\"w\",\"url\":\"sjttgzfbish\",\"aadDomains\":[\"hajdeyeamdpha\"]}},\"identity\":{\"principalId\":\"pbuxwgipwhon\",\"tenantId\":\"kgshwa\",\"type\":\"None\",\"userAssignedIdentities\":{\"tmryw\":{\"principalId\":\"bin\",\"clientId\":\"pu\"},\"nwvlryavwhheunmm\":{\"principalId\":\"zoqftiyqzrnkcqvy\",\"clientId\":\"whzlsicohoq\"},\"conuqszfkbeype\":{\"principalId\":\"gyxzk\",\"clientId\":\"ocukoklyax\"}}},\"location\":\"mjmwvvjektcx\",\"tags\":{\"rzpwvlqdqgbiq\":\"hwlrsf\",\"vf\":\"lihkaetcktvfc\",\"xerf\":\"nkymuctqhjfbebrj\",\"phxepcyvahf\":\"wutttxfvjrbi\"},\"id\":\"ljkyqxjvuuj\",\"name\":\"gidokgjljyoxgvcl\",\"type\":\"bgsncghkjeszzhb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PineconeVectorDbManager manager = PineconeVectorDbManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OrganizationResource> response = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mjmwvvjektcx", response.iterator().next().location());
        Assertions.assertEquals("hwlrsf", response.iterator().next().tags().get("rzpwvlqdqgbiq"));
        Assertions.assertEquals("leggzfbu", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("vfaxkffeiith",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("vmezy",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("shxmzsbbzoggigrx",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("ur", response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("xxjnspydptk",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("nkoukn",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("udwtiukbl", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("ngkpocipazy", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("o", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("ukgjnpiucgygevq", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("typmrbpizcdrqjsd", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("fyhxde", response.iterator().next().properties().partnerProperties().displayName());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("w",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("sjttgzfbish", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("hajdeyeamdpha",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
    }
}
