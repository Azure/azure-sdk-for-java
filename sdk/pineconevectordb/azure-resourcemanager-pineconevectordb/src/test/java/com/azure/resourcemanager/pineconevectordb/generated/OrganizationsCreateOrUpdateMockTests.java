// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.pineconevectordb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.pineconevectordb.PineconeVectorDbManager;
import com.azure.resourcemanager.pineconevectordb.models.ManagedServiceIdentity;
import com.azure.resourcemanager.pineconevectordb.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.pineconevectordb.models.MarketplaceDetails;
import com.azure.resourcemanager.pineconevectordb.models.OfferDetails;
import com.azure.resourcemanager.pineconevectordb.models.OrganizationProperties;
import com.azure.resourcemanager.pineconevectordb.models.OrganizationResource;
import com.azure.resourcemanager.pineconevectordb.models.PartnerProperties;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnStates;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnType;
import com.azure.resourcemanager.pineconevectordb.models.UserAssignedIdentity;
import com.azure.resourcemanager.pineconevectordb.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"dqmh\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"htldwk\",\"offerId\":\"zxuutkncwscwsvl\",\"planId\":\"otogtwrupqs\",\"planName\":\"nmic\",\"termUnit\":\"vce\",\"termId\":\"eil\"}},\"user\":{\"firstName\":\"vnotyfjfcnj\",\"lastName\":\"k\",\"emailAddress\":\"nxdhbt\",\"upn\":\"phywpnvj\",\"phoneNumber\":\"qnermclfplphoxu\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"displayName\":\"abgy\"},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Initial\",\"enterpriseAppId\":\"azqugxywpmueefj\",\"url\":\"fqkquj\",\"aadDomains\":[\"uyonobglaoc\",\"xtccmg\",\"udxytlmoyrx\",\"wfudwpzntxhdzhl\"]}},\"identity\":{\"principalId\":\"bh\",\"tenantId\":\"frlh\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ehhseyvjusrts\":{\"principalId\":\"yvpycanuzbpzk\",\"clientId\":\"kuwbcrnwb\"},\"ahvljuaha\":{\"principalId\":\"spkdee\",\"clientId\":\"ofmxagkvtmelmqkr\"}}},\"location\":\"hcdhmdual\",\"tags\":{\"adm\":\"qpv\",\"r\":\"sr\",\"fmisg\":\"vxpvgomz\"},\"id\":\"bnbbeldawkz\",\"name\":\"ali\",\"type\":\"urqhaka\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PineconeVectorDbManager manager = PineconeVectorDbManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        OrganizationResource response = manager.organizations()
            .define("mpvecxgodebfqk")
            .withRegion("bhvgy")
            .withExistingResourceGroup("jhtxfvgxbfsmxne")
            .withTags(mapOf("ss", "osvmk", "gmgsxnkjzkde", "qukkfp", "yighxpk", "lpvlopw", "baumnyqupedeoj", "wzbaiue"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("bmpukgriwflz")
                    .withOfferDetails(new OfferDetails().withPublisherId("xzpuzycisp")
                        .withOfferId("qzahmgkbrp")
                        .withPlanId("y")
                        .withPlanName("ibnuqqkpik")
                        .withTermUnit("rgvtqag")
                        .withTermId("uynhijg")))
                .withUser(new UserDetails().withFirstName("mebf")
                    .withLastName("iarbutrcvpna")
                    .withEmailAddress("zmhjrunmp")
                    .withUpn("tdbhrbnla")
                    .withPhoneNumber("xmyskp"))
                .withPartnerProperties(new PartnerProperties().withDisplayName("btkcxywnytnrsyn"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                    .withState(SingleSignOnStates.DISABLE)
                    .withEnterpriseAppId("yxczfclh")
                    .withUrl("xdbabphlwr")
                    .withAadDomains(Arrays.asList("ktsthsucocmny"))))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("qwalmuzyoxaepd", new UserAssignedIdentity(), "zt", new UserAssignedIdentity(),
                            "xbzpfzab", new UserAssignedIdentity(), "iklbbovpl", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("hcdhmdual", response.location());
        Assertions.assertEquals("qpv", response.tags().get("adm"));
        Assertions.assertEquals("dqmh", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("htldwk", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("zxuutkncwscwsvl", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("otogtwrupqs", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("nmic", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("vce", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("eil", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("vnotyfjfcnj", response.properties().user().firstName());
        Assertions.assertEquals("k", response.properties().user().lastName());
        Assertions.assertEquals("nxdhbt", response.properties().user().emailAddress());
        Assertions.assertEquals("phywpnvj", response.properties().user().upn());
        Assertions.assertEquals("qnermclfplphoxu", response.properties().user().phoneNumber());
        Assertions.assertEquals("abgy", response.properties().partnerProperties().displayName());
        Assertions.assertEquals(SingleSignOnType.SAML, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("azqugxywpmueefj", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("fqkquj", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("uyonobglaoc", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
