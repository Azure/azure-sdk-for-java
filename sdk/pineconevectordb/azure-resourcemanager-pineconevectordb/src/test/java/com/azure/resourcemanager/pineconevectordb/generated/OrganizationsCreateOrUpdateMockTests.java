// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.pineconevectordb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.pineconevectordb.PineconeVectorDbManager;
import com.azure.resourcemanager.pineconevectordb.models.ManagedServiceIdentity;
import com.azure.resourcemanager.pineconevectordb.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.pineconevectordb.models.MarketplaceDetails;
import com.azure.resourcemanager.pineconevectordb.models.OfferDetails;
import com.azure.resourcemanager.pineconevectordb.models.OrganizationProperties;
import com.azure.resourcemanager.pineconevectordb.models.OrganizationResource;
import com.azure.resourcemanager.pineconevectordb.models.PartnerProperties;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnStates;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnType;
import com.azure.resourcemanager.pineconevectordb.models.UserAssignedIdentity;
import com.azure.resourcemanager.pineconevectordb.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"vt\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"mqkrhahvljuahaqu\",\"offerId\":\"c\",\"planId\":\"hmdua\",\"planName\":\"exq\",\"termUnit\":\"fadmws\",\"termId\":\"r\"}},\"user\":{\"firstName\":\"xpvgo\",\"lastName\":\"lf\",\"emailAddress\":\"sgwbnbbeld\",\"upn\":\"k\",\"phoneNumber\":\"ali\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"displayName\":\"hakauhashsf\"},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Disable\",\"enterpriseAppId\":\"z\",\"url\":\"ugicjooxdjebw\",\"aadDomains\":[\"wwfvov\",\"vmeueci\",\"yhz\"]}},\"identity\":{\"principalId\":\"ojgjrwjueiotwmc\",\"tenantId\":\"tdx\",\"type\":\"None\",\"userAssignedIdentities\":{\"skxfbk\":{\"clientId\":\"rjaw\",\"principalId\":\"wgxhn\"}}},\"location\":\"cg\",\"tags\":{\"auwhvylwzbtdhx\":\"ndnhj\",\"pow\":\"jznb\"},\"id\":\"wpr\",\"name\":\"qlveualupjmkh\",\"type\":\"xobbcswsrt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PineconeVectorDbManager manager = PineconeVectorDbManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .define("ux")
            .withRegion("jbhckfrlhr")
            .withExistingResourceGroup("zyoxaepdkzjan")
            .withTags(mapOf("ycanuzbpzkafku", "kyv", "rnwb", "b"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("wbavxbniwdj")
                    .withOfferDetails(new OfferDetails().withPublisherId("tsdbpgn")
                        .withOfferId("ytxhp")
                        .withPlanId("xbzpfzab")
                        .withPlanName("cuh")
                        .withTermUnit("tcty")
                        .withTermId("klbb")))
                .withUser(new UserDetails().withFirstName("plwzbhvgyugu")
                    .withLastName("vmkfssxqu")
                    .withEmailAddress("fpl")
                    .withUpn("gsxnkjzkdeslpv")
                    .withPhoneNumber("pwiyig"))
                .withPartnerProperties(new PartnerProperties().withDisplayName("dwzbaiue"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.SAML)
                    .withState(SingleSignOnStates.DISABLE)
                    .withEnterpriseAppId("yqupedeojnabckh")
                    .withUrl("txp")
                    .withAadDomains(Arrays.asList("btfhvpesaps", "rdqmhjjdhtldwkyz", "uutkncw"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("nv", new UserAssignedIdentity(), "azqugxywpmueefj",
                    new UserAssignedIdentity(), "tcc", new UserAssignedIdentity(), "hl", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("cg", response.location());
        Assertions.assertEquals("ndnhj", response.tags().get("auwhvylwzbtdhx"));
        Assertions.assertEquals("vt", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("mqkrhahvljuahaqu", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("c", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("hmdua", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("exq", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("fadmws", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("r", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("xpvgo", response.properties().user().firstName());
        Assertions.assertEquals("lf", response.properties().user().lastName());
        Assertions.assertEquals("sgwbnbbeld", response.properties().user().emailAddress());
        Assertions.assertEquals("k", response.properties().user().upn());
        Assertions.assertEquals("ali", response.properties().user().phoneNumber());
        Assertions.assertEquals("hakauhashsf", response.properties().partnerProperties().displayName());
        Assertions.assertEquals(SingleSignOnType.SAML, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("z", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("ugicjooxdjebw", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("wwfvov", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
