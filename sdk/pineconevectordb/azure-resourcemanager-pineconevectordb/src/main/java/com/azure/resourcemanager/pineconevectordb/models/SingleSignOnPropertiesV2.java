// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.pineconevectordb.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to Single Sign On Resource.
 */
@Fluent
public final class SingleSignOnPropertiesV2 implements JsonSerializable<SingleSignOnPropertiesV2> {
    /*
     * Type of Single Sign-On mechanism being used
     */
    private SingleSignOnType type;

    /*
     * State of the Single Sign On for the resource
     */
    private SingleSignOnStates state;

    /*
     * AAD enterprise application Id used to setup SSO
     */
    private String enterpriseAppId;

    /*
     * URL for SSO to be used by the partner to redirect the user to their system
     */
    private String url;

    /*
     * List of AAD domains fetched from Microsoft Graph for user.
     */
    private List<String> aadDomains;

    /**
     * Creates an instance of SingleSignOnPropertiesV2 class.
     */
    public SingleSignOnPropertiesV2() {
    }

    /**
     * Get the type property: Type of Single Sign-On mechanism being used.
     * 
     * @return the type value.
     */
    public SingleSignOnType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of Single Sign-On mechanism being used.
     * 
     * @param type the type value to set.
     * @return the SingleSignOnPropertiesV2 object itself.
     */
    public SingleSignOnPropertiesV2 withType(SingleSignOnType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the state property: State of the Single Sign On for the resource.
     * 
     * @return the state value.
     */
    public SingleSignOnStates state() {
        return this.state;
    }

    /**
     * Set the state property: State of the Single Sign On for the resource.
     * 
     * @param state the state value to set.
     * @return the SingleSignOnPropertiesV2 object itself.
     */
    public SingleSignOnPropertiesV2 withState(SingleSignOnStates state) {
        this.state = state;
        return this;
    }

    /**
     * Get the enterpriseAppId property: AAD enterprise application Id used to setup SSO.
     * 
     * @return the enterpriseAppId value.
     */
    public String enterpriseAppId() {
        return this.enterpriseAppId;
    }

    /**
     * Set the enterpriseAppId property: AAD enterprise application Id used to setup SSO.
     * 
     * @param enterpriseAppId the enterpriseAppId value to set.
     * @return the SingleSignOnPropertiesV2 object itself.
     */
    public SingleSignOnPropertiesV2 withEnterpriseAppId(String enterpriseAppId) {
        this.enterpriseAppId = enterpriseAppId;
        return this;
    }

    /**
     * Get the url property: URL for SSO to be used by the partner to redirect the user to their system.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: URL for SSO to be used by the partner to redirect the user to their system.
     * 
     * @param url the url value to set.
     * @return the SingleSignOnPropertiesV2 object itself.
     */
    public SingleSignOnPropertiesV2 withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the aadDomains property: List of AAD domains fetched from Microsoft Graph for user.
     * 
     * @return the aadDomains value.
     */
    public List<String> aadDomains() {
        return this.aadDomains;
    }

    /**
     * Set the aadDomains property: List of AAD domains fetched from Microsoft Graph for user.
     * 
     * @param aadDomains the aadDomains value to set.
     * @return the SingleSignOnPropertiesV2 object itself.
     */
    public SingleSignOnPropertiesV2 withAadDomains(List<String> aadDomains) {
        this.aadDomains = aadDomains;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model SingleSignOnPropertiesV2"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SingleSignOnPropertiesV2.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("enterpriseAppId", this.enterpriseAppId);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeArrayField("aadDomains", this.aadDomains, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SingleSignOnPropertiesV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SingleSignOnPropertiesV2 if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SingleSignOnPropertiesV2.
     */
    public static SingleSignOnPropertiesV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SingleSignOnPropertiesV2 deserializedSingleSignOnPropertiesV2 = new SingleSignOnPropertiesV2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSingleSignOnPropertiesV2.type = SingleSignOnType.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedSingleSignOnPropertiesV2.state = SingleSignOnStates.fromString(reader.getString());
                } else if ("enterpriseAppId".equals(fieldName)) {
                    deserializedSingleSignOnPropertiesV2.enterpriseAppId = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedSingleSignOnPropertiesV2.url = reader.getString();
                } else if ("aadDomains".equals(fieldName)) {
                    List<String> aadDomains = reader.readArray(reader1 -> reader1.getString());
                    deserializedSingleSignOnPropertiesV2.aadDomains = aadDomains;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSingleSignOnPropertiesV2;
        });
    }
}
