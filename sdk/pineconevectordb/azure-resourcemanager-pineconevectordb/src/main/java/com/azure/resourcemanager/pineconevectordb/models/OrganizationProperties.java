// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.pineconevectordb.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties specific to Organization.
 */
@Fluent
public final class OrganizationProperties implements JsonSerializable<OrganizationProperties> {
    /*
     * Marketplace details of the resource.
     */
    private MarketplaceDetails marketplace;

    /*
     * Details of the user.
     */
    private UserDetails user;

    /*
     * Provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * partner properties
     */
    private PartnerProperties partnerProperties;

    /*
     * Single sign-on properties
     */
    private SingleSignOnPropertiesV2 singleSignOnProperties;

    /**
     * Creates an instance of OrganizationProperties class.
     */
    public OrganizationProperties() {
    }

    /**
     * Get the marketplace property: Marketplace details of the resource.
     * 
     * @return the marketplace value.
     */
    public MarketplaceDetails marketplace() {
        return this.marketplace;
    }

    /**
     * Set the marketplace property: Marketplace details of the resource.
     * 
     * @param marketplace the marketplace value to set.
     * @return the OrganizationProperties object itself.
     */
    public OrganizationProperties withMarketplace(MarketplaceDetails marketplace) {
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Get the user property: Details of the user.
     * 
     * @return the user value.
     */
    public UserDetails user() {
        return this.user;
    }

    /**
     * Set the user property: Details of the user.
     * 
     * @param user the user value to set.
     * @return the OrganizationProperties object itself.
     */
    public OrganizationProperties withUser(UserDetails user) {
        this.user = user;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the partnerProperties property: partner properties.
     * 
     * @return the partnerProperties value.
     */
    public PartnerProperties partnerProperties() {
        return this.partnerProperties;
    }

    /**
     * Set the partnerProperties property: partner properties.
     * 
     * @param partnerProperties the partnerProperties value to set.
     * @return the OrganizationProperties object itself.
     */
    public OrganizationProperties withPartnerProperties(PartnerProperties partnerProperties) {
        this.partnerProperties = partnerProperties;
        return this;
    }

    /**
     * Get the singleSignOnProperties property: Single sign-on properties.
     * 
     * @return the singleSignOnProperties value.
     */
    public SingleSignOnPropertiesV2 singleSignOnProperties() {
        return this.singleSignOnProperties;
    }

    /**
     * Set the singleSignOnProperties property: Single sign-on properties.
     * 
     * @param singleSignOnProperties the singleSignOnProperties value to set.
     * @return the OrganizationProperties object itself.
     */
    public OrganizationProperties withSingleSignOnProperties(SingleSignOnPropertiesV2 singleSignOnProperties) {
        this.singleSignOnProperties = singleSignOnProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplace() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketplace in model OrganizationProperties"));
        } else {
            marketplace().validate();
        }
        if (user() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property user in model OrganizationProperties"));
        } else {
            user().validate();
        }
        if (partnerProperties() != null) {
            partnerProperties().validate();
        }
        if (singleSignOnProperties() != null) {
            singleSignOnProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrganizationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("marketplace", this.marketplace);
        jsonWriter.writeJsonField("user", this.user);
        jsonWriter.writeJsonField("partnerProperties", this.partnerProperties);
        jsonWriter.writeJsonField("singleSignOnProperties", this.singleSignOnProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrganizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrganizationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrganizationProperties.
     */
    public static OrganizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrganizationProperties deserializedOrganizationProperties = new OrganizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("marketplace".equals(fieldName)) {
                    deserializedOrganizationProperties.marketplace = MarketplaceDetails.fromJson(reader);
                } else if ("user".equals(fieldName)) {
                    deserializedOrganizationProperties.user = UserDetails.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOrganizationProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("partnerProperties".equals(fieldName)) {
                    deserializedOrganizationProperties.partnerProperties = PartnerProperties.fromJson(reader);
                } else if ("singleSignOnProperties".equals(fieldName)) {
                    deserializedOrganizationProperties.singleSignOnProperties
                        = SingleSignOnPropertiesV2.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrganizationProperties;
        });
    }
}
