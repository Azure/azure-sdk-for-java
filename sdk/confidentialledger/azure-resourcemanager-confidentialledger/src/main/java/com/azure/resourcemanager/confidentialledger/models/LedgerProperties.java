// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * LedgerProperties
 * 
 * Additional Confidential Ledger properties.
 */
@Fluent
public final class LedgerProperties implements JsonSerializable<LedgerProperties> {
    /*
     * Unique name for the Confidential Ledger.
     */
    private String ledgerName;

    /*
     * Endpoint for calling Ledger Service.
     */
    private String ledgerUri;

    /*
     * Endpoint for accessing network identity.
     */
    private String identityServiceUri;

    /*
     * Internal namespace for the Ledger
     */
    private String ledgerInternalNamespace;

    /*
     * Type of Confidential Ledger
     */
    private LedgerType ledgerType;

    /*
     * Provisioning state of Ledger Resource
     */
    private ProvisioningState provisioningState;

    /*
     * Array of all AAD based Security Principals.
     */
    private List<AadBasedSecurityPrincipal> aadBasedSecurityPrincipals;

    /*
     * Array of all cert based Security Principals.
     */
    private List<CertBasedSecurityPrincipal> certBasedSecurityPrincipals;

    /**
     * Creates an instance of LedgerProperties class.
     */
    public LedgerProperties() {
    }

    /**
     * Get the ledgerName property: Unique name for the Confidential Ledger.
     * 
     * @return the ledgerName value.
     */
    public String ledgerName() {
        return this.ledgerName;
    }

    /**
     * Get the ledgerUri property: Endpoint for calling Ledger Service.
     * 
     * @return the ledgerUri value.
     */
    public String ledgerUri() {
        return this.ledgerUri;
    }

    /**
     * Get the identityServiceUri property: Endpoint for accessing network identity.
     * 
     * @return the identityServiceUri value.
     */
    public String identityServiceUri() {
        return this.identityServiceUri;
    }

    /**
     * Get the ledgerInternalNamespace property: Internal namespace for the Ledger.
     * 
     * @return the ledgerInternalNamespace value.
     */
    public String ledgerInternalNamespace() {
        return this.ledgerInternalNamespace;
    }

    /**
     * Get the ledgerType property: Type of Confidential Ledger.
     * 
     * @return the ledgerType value.
     */
    public LedgerType ledgerType() {
        return this.ledgerType;
    }

    /**
     * Set the ledgerType property: Type of Confidential Ledger.
     * 
     * @param ledgerType the ledgerType value to set.
     * @return the LedgerProperties object itself.
     */
    public LedgerProperties withLedgerType(LedgerType ledgerType) {
        this.ledgerType = ledgerType;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of Ledger Resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the aadBasedSecurityPrincipals property: Array of all AAD based Security Principals.
     * 
     * @return the aadBasedSecurityPrincipals value.
     */
    public List<AadBasedSecurityPrincipal> aadBasedSecurityPrincipals() {
        return this.aadBasedSecurityPrincipals;
    }

    /**
     * Set the aadBasedSecurityPrincipals property: Array of all AAD based Security Principals.
     * 
     * @param aadBasedSecurityPrincipals the aadBasedSecurityPrincipals value to set.
     * @return the LedgerProperties object itself.
     */
    public LedgerProperties withAadBasedSecurityPrincipals(List<AadBasedSecurityPrincipal> aadBasedSecurityPrincipals) {
        this.aadBasedSecurityPrincipals = aadBasedSecurityPrincipals;
        return this;
    }

    /**
     * Get the certBasedSecurityPrincipals property: Array of all cert based Security Principals.
     * 
     * @return the certBasedSecurityPrincipals value.
     */
    public List<CertBasedSecurityPrincipal> certBasedSecurityPrincipals() {
        return this.certBasedSecurityPrincipals;
    }

    /**
     * Set the certBasedSecurityPrincipals property: Array of all cert based Security Principals.
     * 
     * @param certBasedSecurityPrincipals the certBasedSecurityPrincipals value to set.
     * @return the LedgerProperties object itself.
     */
    public LedgerProperties
        withCertBasedSecurityPrincipals(List<CertBasedSecurityPrincipal> certBasedSecurityPrincipals) {
        this.certBasedSecurityPrincipals = certBasedSecurityPrincipals;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aadBasedSecurityPrincipals() != null) {
            aadBasedSecurityPrincipals().forEach(e -> e.validate());
        }
        if (certBasedSecurityPrincipals() != null) {
            certBasedSecurityPrincipals().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ledgerType", this.ledgerType == null ? null : this.ledgerType.toString());
        jsonWriter.writeArrayField("aadBasedSecurityPrincipals", this.aadBasedSecurityPrincipals,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("certBasedSecurityPrincipals", this.certBasedSecurityPrincipals,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LedgerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LedgerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LedgerProperties.
     */
    public static LedgerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LedgerProperties deserializedLedgerProperties = new LedgerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ledgerName".equals(fieldName)) {
                    deserializedLedgerProperties.ledgerName = reader.getString();
                } else if ("ledgerUri".equals(fieldName)) {
                    deserializedLedgerProperties.ledgerUri = reader.getString();
                } else if ("identityServiceUri".equals(fieldName)) {
                    deserializedLedgerProperties.identityServiceUri = reader.getString();
                } else if ("ledgerInternalNamespace".equals(fieldName)) {
                    deserializedLedgerProperties.ledgerInternalNamespace = reader.getString();
                } else if ("ledgerType".equals(fieldName)) {
                    deserializedLedgerProperties.ledgerType = LedgerType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLedgerProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("aadBasedSecurityPrincipals".equals(fieldName)) {
                    List<AadBasedSecurityPrincipal> aadBasedSecurityPrincipals
                        = reader.readArray(reader1 -> AadBasedSecurityPrincipal.fromJson(reader1));
                    deserializedLedgerProperties.aadBasedSecurityPrincipals = aadBasedSecurityPrincipals;
                } else if ("certBasedSecurityPrincipals".equals(fieldName)) {
                    List<CertBasedSecurityPrincipal> certBasedSecurityPrincipals
                        = reader.readArray(reader1 -> CertBasedSecurityPrincipal.fromJson(reader1));
                    deserializedLedgerProperties.certBasedSecurityPrincipals = certBasedSecurityPrincipals;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLedgerProperties;
        });
    }
}
