// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ManagedCCFProperties
 * 
 * Additional Managed CCF properties.
 */
@Fluent
public final class ManagedCcfProperties implements JsonSerializable<ManagedCcfProperties> {
    /*
     * Unique name for the Managed CCF.
     */
    private String appName;

    /*
     * Endpoint for calling Managed CCF Service.
     */
    private String appUri;

    /*
     * Endpoint for accessing network identity.
     */
    private String identityServiceUri;

    /*
     * List of member identity certificates for Managed CCF
     */
    private List<MemberIdentityCertificate> memberIdentityCertificates;

    /*
     * Deployment Type of Managed CCF
     */
    private DeploymentType deploymentType;

    /*
     * Object representing RunningState for Managed CCF.
     */
    private RunningState runningState;

    /*
     * Provisioning state of Managed CCF Resource
     */
    private ProvisioningState provisioningState;

    /*
     * Number of CCF nodes in the Managed CCF.
     */
    private Integer nodeCount;

    /**
     * Creates an instance of ManagedCcfProperties class.
     */
    public ManagedCcfProperties() {
    }

    /**
     * Get the appName property: Unique name for the Managed CCF.
     * 
     * @return the appName value.
     */
    public String appName() {
        return this.appName;
    }

    /**
     * Get the appUri property: Endpoint for calling Managed CCF Service.
     * 
     * @return the appUri value.
     */
    public String appUri() {
        return this.appUri;
    }

    /**
     * Get the identityServiceUri property: Endpoint for accessing network identity.
     * 
     * @return the identityServiceUri value.
     */
    public String identityServiceUri() {
        return this.identityServiceUri;
    }

    /**
     * Get the memberIdentityCertificates property: List of member identity certificates for Managed CCF.
     * 
     * @return the memberIdentityCertificates value.
     */
    public List<MemberIdentityCertificate> memberIdentityCertificates() {
        return this.memberIdentityCertificates;
    }

    /**
     * Set the memberIdentityCertificates property: List of member identity certificates for Managed CCF.
     * 
     * @param memberIdentityCertificates the memberIdentityCertificates value to set.
     * @return the ManagedCcfProperties object itself.
     */
    public ManagedCcfProperties
        withMemberIdentityCertificates(List<MemberIdentityCertificate> memberIdentityCertificates) {
        this.memberIdentityCertificates = memberIdentityCertificates;
        return this;
    }

    /**
     * Get the deploymentType property: Deployment Type of Managed CCF.
     * 
     * @return the deploymentType value.
     */
    public DeploymentType deploymentType() {
        return this.deploymentType;
    }

    /**
     * Set the deploymentType property: Deployment Type of Managed CCF.
     * 
     * @param deploymentType the deploymentType value to set.
     * @return the ManagedCcfProperties object itself.
     */
    public ManagedCcfProperties withDeploymentType(DeploymentType deploymentType) {
        this.deploymentType = deploymentType;
        return this;
    }

    /**
     * Get the runningState property: Object representing RunningState for Managed CCF.
     * 
     * @return the runningState value.
     */
    public RunningState runningState() {
        return this.runningState;
    }

    /**
     * Set the runningState property: Object representing RunningState for Managed CCF.
     * 
     * @param runningState the runningState value to set.
     * @return the ManagedCcfProperties object itself.
     */
    public ManagedCcfProperties withRunningState(RunningState runningState) {
        this.runningState = runningState;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of Managed CCF Resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the nodeCount property: Number of CCF nodes in the Managed CCF.
     * 
     * @return the nodeCount value.
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: Number of CCF nodes in the Managed CCF.
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the ManagedCcfProperties object itself.
     */
    public ManagedCcfProperties withNodeCount(Integer nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (memberIdentityCertificates() != null) {
            memberIdentityCertificates().forEach(e -> e.validate());
        }
        if (deploymentType() != null) {
            deploymentType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("memberIdentityCertificates", this.memberIdentityCertificates,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("deploymentType", this.deploymentType);
        jsonWriter.writeStringField("runningState", this.runningState == null ? null : this.runningState.toString());
        jsonWriter.writeNumberField("nodeCount", this.nodeCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedCcfProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedCcfProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedCcfProperties.
     */
    public static ManagedCcfProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedCcfProperties deserializedManagedCcfProperties = new ManagedCcfProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appName".equals(fieldName)) {
                    deserializedManagedCcfProperties.appName = reader.getString();
                } else if ("appUri".equals(fieldName)) {
                    deserializedManagedCcfProperties.appUri = reader.getString();
                } else if ("identityServiceUri".equals(fieldName)) {
                    deserializedManagedCcfProperties.identityServiceUri = reader.getString();
                } else if ("memberIdentityCertificates".equals(fieldName)) {
                    List<MemberIdentityCertificate> memberIdentityCertificates
                        = reader.readArray(reader1 -> MemberIdentityCertificate.fromJson(reader1));
                    deserializedManagedCcfProperties.memberIdentityCertificates = memberIdentityCertificates;
                } else if ("deploymentType".equals(fieldName)) {
                    deserializedManagedCcfProperties.deploymentType = DeploymentType.fromJson(reader);
                } else if ("runningState".equals(fieldName)) {
                    deserializedManagedCcfProperties.runningState = RunningState.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedManagedCcfProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedManagedCcfProperties.nodeCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedCcfProperties;
        });
    }
}
