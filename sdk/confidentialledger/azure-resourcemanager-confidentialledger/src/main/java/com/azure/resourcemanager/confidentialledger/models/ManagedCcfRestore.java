// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Object representing Restore properties of Managed CCF Resource.
 */
@Fluent
public final class ManagedCcfRestore implements JsonSerializable<ManagedCcfRestore> {
    /*
     * Fileshare where the managed CCF resource backup is stored.
     */
    private String fileShareName;

    /*
     * The region the managed CCF resource is being restored to.
     */
    private String restoreRegion;

    /*
     * SAS URI used to access the backup Fileshare.
     */
    private String uri;

    /**
     * Creates an instance of ManagedCcfRestore class.
     */
    public ManagedCcfRestore() {
    }

    /**
     * Get the fileShareName property: Fileshare where the managed CCF resource backup is stored.
     * 
     * @return the fileShareName value.
     */
    public String fileShareName() {
        return this.fileShareName;
    }

    /**
     * Set the fileShareName property: Fileshare where the managed CCF resource backup is stored.
     * 
     * @param fileShareName the fileShareName value to set.
     * @return the ManagedCcfRestore object itself.
     */
    public ManagedCcfRestore withFileShareName(String fileShareName) {
        this.fileShareName = fileShareName;
        return this;
    }

    /**
     * Get the restoreRegion property: The region the managed CCF resource is being restored to.
     * 
     * @return the restoreRegion value.
     */
    public String restoreRegion() {
        return this.restoreRegion;
    }

    /**
     * Set the restoreRegion property: The region the managed CCF resource is being restored to.
     * 
     * @param restoreRegion the restoreRegion value to set.
     * @return the ManagedCcfRestore object itself.
     */
    public ManagedCcfRestore withRestoreRegion(String restoreRegion) {
        this.restoreRegion = restoreRegion;
        return this;
    }

    /**
     * Get the uri property: SAS URI used to access the backup Fileshare.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: SAS URI used to access the backup Fileshare.
     * 
     * @param uri the uri value to set.
     * @return the ManagedCcfRestore object itself.
     */
    public ManagedCcfRestore withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fileShareName() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property fileShareName in model ManagedCcfRestore"));
        }
        if (restoreRegion() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property restoreRegion in model ManagedCcfRestore"));
        }
        if (uri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property uri in model ManagedCcfRestore"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedCcfRestore.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fileShareName", this.fileShareName);
        jsonWriter.writeStringField("restoreRegion", this.restoreRegion);
        jsonWriter.writeStringField("uri", this.uri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedCcfRestore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedCcfRestore if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedCcfRestore.
     */
    public static ManagedCcfRestore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedCcfRestore deserializedManagedCcfRestore = new ManagedCcfRestore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileShareName".equals(fieldName)) {
                    deserializedManagedCcfRestore.fileShareName = reader.getString();
                } else if ("restoreRegion".equals(fieldName)) {
                    deserializedManagedCcfRestore.restoreRegion = reader.getString();
                } else if ("uri".equals(fieldName)) {
                    deserializedManagedCcfRestore.uri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedCcfRestore;
        });
    }
}
