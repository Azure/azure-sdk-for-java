// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.confidentialledger.fluent.LedgersClient;
import com.azure.resourcemanager.confidentialledger.fluent.models.ConfidentialLedgerInner;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedgerList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in LedgersClient. */
public final class LedgersClientImpl implements LedgersClient {
    private final ClientLogger logger = new ClientLogger(LedgersClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final LedgersService service;

    /** The service client containing this operation class. */
    private final ConfidentialLedgerManagementClientImpl client;

    /**
     * Initializes an instance of LedgersClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    LedgersClientImpl(ConfidentialLedgerManagementClientImpl client) {
        this.service = RestProxy.create(LedgersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ConfidentialLedgerManagementClientLedgers to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ConfidentialLedgerMa")
    private interface LedgersService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger"
                + "/ledgers/{ledgerName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfidentialLedgerInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("ledgerName") String ledgerName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger"
                + "/ledgers/{ledgerName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("ledgerName") String ledgerName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger"
                + "/ledgers/{ledgerName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("ledgerName") String ledgerName,
            @BodyParam("application/json") ConfidentialLedgerInner confidentialLedger,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger"
                + "/ledgers/{ledgerName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("ledgerName") String ledgerName,
            @BodyParam("application/json") ConfidentialLedgerInner confidentialLedger,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger"
                + "/ledgers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfidentialLedgerList>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/ledgers/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfidentialLedgerList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfidentialLedgerList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConfidentialLedgerList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfidentialLedgerInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String ledgerName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            ledgerName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConfidentialLedgerInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String ledgerName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                ledgerName,
                accept,
                context);
    }

    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfidentialLedgerInner> getByResourceGroupAsync(String resourceGroupName, String ledgerName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, ledgerName)
            .flatMap(
                (Response<ConfidentialLedgerInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfidentialLedgerInner getByResourceGroup(String resourceGroupName, String ledgerName) {
        return getByResourceGroupAsync(resourceGroupName, ledgerName).block();
    }

    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfidentialLedgerInner> getByResourceGroupWithResponse(
        String resourceGroupName, String ledgerName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, ledgerName, context).block();
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String ledgerName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            ledgerName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String ledgerName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                ledgerName,
                accept,
                context);
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String ledgerName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, ledgerName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String ledgerName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, ledgerName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String ledgerName) {
        return beginDeleteAsync(resourceGroupName, ledgerName).getSyncPoller();
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String ledgerName, Context context) {
        return beginDeleteAsync(resourceGroupName, ledgerName, context).getSyncPoller();
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String ledgerName) {
        return beginDeleteAsync(resourceGroupName, ledgerName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String ledgerName, Context context) {
        return beginDeleteAsync(resourceGroupName, ledgerName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String ledgerName) {
        deleteAsync(resourceGroupName, ledgerName).block();
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String ledgerName, Context context) {
        deleteAsync(resourceGroupName, ledgerName, context).block();
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        if (confidentialLedger == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter confidentialLedger is required and cannot be null."));
        } else {
            confidentialLedger.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            ledgerName,
                            confidentialLedger,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        if (confidentialLedger == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter confidentialLedger is required and cannot be null."));
        } else {
            confidentialLedger.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                ledgerName,
                confidentialLedger,
                accept,
                context);
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginCreateAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, ledgerName, confidentialLedger);
        return this
            .client
            .<ConfidentialLedgerInner, ConfidentialLedgerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ConfidentialLedgerInner.class,
                ConfidentialLedgerInner.class,
                Context.NONE);
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginCreateAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, ledgerName, confidentialLedger, context);
        return this
            .client
            .<ConfidentialLedgerInner, ConfidentialLedgerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ConfidentialLedgerInner.class,
                ConfidentialLedgerInner.class,
                context);
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginCreate(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        return beginCreateAsync(resourceGroupName, ledgerName, confidentialLedger).getSyncPoller();
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginCreate(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        return beginCreateAsync(resourceGroupName, ledgerName, confidentialLedger, context).getSyncPoller();
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfidentialLedgerInner> createAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        return beginCreateAsync(resourceGroupName, ledgerName, confidentialLedger)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfidentialLedgerInner> createAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        return beginCreateAsync(resourceGroupName, ledgerName, confidentialLedger, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfidentialLedgerInner create(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        return createAsync(resourceGroupName, ledgerName, confidentialLedger).block();
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfidentialLedgerInner create(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        return createAsync(resourceGroupName, ledgerName, confidentialLedger, context).block();
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        if (confidentialLedger == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter confidentialLedger is required and cannot be null."));
        } else {
            confidentialLedger.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            ledgerName,
                            confidentialLedger,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ledgerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ledgerName is required and cannot be null."));
        }
        if (confidentialLedger == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter confidentialLedger is required and cannot be null."));
        } else {
            confidentialLedger.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                ledgerName,
                confidentialLedger,
                accept,
                context);
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginUpdateAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, ledgerName, confidentialLedger);
        return this
            .client
            .<ConfidentialLedgerInner, ConfidentialLedgerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ConfidentialLedgerInner.class,
                ConfidentialLedgerInner.class,
                Context.NONE);
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginUpdateAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, ledgerName, confidentialLedger, context);
        return this
            .client
            .<ConfidentialLedgerInner, ConfidentialLedgerInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ConfidentialLedgerInner.class,
                ConfidentialLedgerInner.class,
                context);
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginUpdate(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        return beginUpdateAsync(resourceGroupName, ledgerName, confidentialLedger).getSyncPoller();
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ConfidentialLedgerInner>, ConfidentialLedgerInner> beginUpdate(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        return beginUpdateAsync(resourceGroupName, ledgerName, confidentialLedger, context).getSyncPoller();
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfidentialLedgerInner> updateAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        return beginUpdateAsync(resourceGroupName, ledgerName, confidentialLedger)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConfidentialLedgerInner> updateAsync(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        return beginUpdateAsync(resourceGroupName, ledgerName, confidentialLedger, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfidentialLedgerInner update(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        return updateAsync(resourceGroupName, ledgerName, confidentialLedger).block();
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfidentialLedgerInner update(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        return updateAsync(resourceGroupName, ledgerName, confidentialLedger, context).block();
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            filter,
                            accept,
                            context))
            .<PagedResponse<ConfidentialLedgerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfidentialLedgerInner> listByResourceGroupAsync(String resourceGroupName, String filter) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfidentialLedgerInner> listByResourceGroupAsync(String resourceGroupName) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfidentialLedgerInner> listByResourceGroupAsync(
        String resourceGroupName, String filter, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, filter, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfidentialLedgerInner> listByResourceGroup(String resourceGroupName) {
        final String filter = null;
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, filter));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfidentialLedgerInner> listByResourceGroup(
        String resourceGroupName, String filter, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, filter, context));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listSinglePageAsync(String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            filter,
                            accept,
                            context))
            .<PagedResponse<ConfidentialLedgerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listSinglePageAsync(String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                filter,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfidentialLedgerInner> listAsync(String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(filter), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfidentialLedgerInner> listAsync() {
        final String filter = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(filter), nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConfidentialLedgerInner> listAsync(String filter, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(filter, context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfidentialLedgerInner> list() {
        final String filter = null;
        return new PagedIterable<>(listAsync(filter));
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfidentialLedgerInner> list(String filter, Context context) {
        return new PagedIterable<>(listAsync(filter, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConfidentialLedgerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConfidentialLedgerInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConfidentialLedgerInner>> listBySubscriptionNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
