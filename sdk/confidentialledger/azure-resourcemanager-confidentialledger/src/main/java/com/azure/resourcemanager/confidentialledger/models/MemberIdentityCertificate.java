// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * MemberIdentityCertificate
 * 
 * Object representing MemberIdentityCertificate for Managed CCF.
 */
@Fluent
public final class MemberIdentityCertificate implements JsonSerializable<MemberIdentityCertificate> {
    /*
     * Member Identity Certificate
     */
    private String certificate;

    /*
     * Member Identity Certificate Encryption Key
     */
    private String encryptionkey;

    /*
     * Anything
     */
    private Object tags;

    /**
     * Creates an instance of MemberIdentityCertificate class.
     */
    public MemberIdentityCertificate() {
    }

    /**
     * Get the certificate property: Member Identity Certificate.
     * 
     * @return the certificate value.
     */
    public String certificate() {
        return this.certificate;
    }

    /**
     * Set the certificate property: Member Identity Certificate.
     * 
     * @param certificate the certificate value to set.
     * @return the MemberIdentityCertificate object itself.
     */
    public MemberIdentityCertificate withCertificate(String certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * Get the encryptionkey property: Member Identity Certificate Encryption Key.
     * 
     * @return the encryptionkey value.
     */
    public String encryptionkey() {
        return this.encryptionkey;
    }

    /**
     * Set the encryptionkey property: Member Identity Certificate Encryption Key.
     * 
     * @param encryptionkey the encryptionkey value to set.
     * @return the MemberIdentityCertificate object itself.
     */
    public MemberIdentityCertificate withEncryptionkey(String encryptionkey) {
        this.encryptionkey = encryptionkey;
        return this;
    }

    /**
     * Get the tags property: Anything.
     * 
     * @return the tags value.
     */
    public Object tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Anything.
     * 
     * @param tags the tags value to set.
     * @return the MemberIdentityCertificate object itself.
     */
    public MemberIdentityCertificate withTags(Object tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certificate", this.certificate);
        jsonWriter.writeStringField("encryptionkey", this.encryptionkey);
        jsonWriter.writeUntypedField("tags", this.tags);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MemberIdentityCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MemberIdentityCertificate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MemberIdentityCertificate.
     */
    public static MemberIdentityCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MemberIdentityCertificate deserializedMemberIdentityCertificate = new MemberIdentityCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificate".equals(fieldName)) {
                    deserializedMemberIdentityCertificate.certificate = reader.getString();
                } else if ("encryptionkey".equals(fieldName)) {
                    deserializedMemberIdentityCertificate.encryptionkey = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    deserializedMemberIdentityCertificate.tags = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMemberIdentityCertificate;
        });
    }
}
