// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.confidentialledger.ConfidentialLedgerManager;
import com.azure.resourcemanager.confidentialledger.fluent.LedgersClient;
import com.azure.resourcemanager.confidentialledger.fluent.models.ConfidentialLedgerInner;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedger;
import com.azure.resourcemanager.confidentialledger.models.Ledgers;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class LedgersImpl implements Ledgers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LedgersImpl.class);

    private final LedgersClient innerClient;

    private final ConfidentialLedgerManager serviceManager;

    public LedgersImpl(LedgersClient innerClient, ConfidentialLedgerManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ConfidentialLedger getByResourceGroup(String resourceGroupName, String ledgerName) {
        ConfidentialLedgerInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, ledgerName);
        if (inner != null) {
            return new ConfidentialLedgerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConfidentialLedger> getByResourceGroupWithResponse(
        String resourceGroupName, String ledgerName, Context context) {
        Response<ConfidentialLedgerInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, ledgerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConfidentialLedgerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String ledgerName) {
        this.serviceClient().delete(resourceGroupName, ledgerName);
    }

    public void delete(String resourceGroupName, String ledgerName, Context context) {
        this.serviceClient().delete(resourceGroupName, ledgerName, context);
    }

    public ConfidentialLedger create(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        ConfidentialLedgerInner inner = this.serviceClient().create(resourceGroupName, ledgerName, confidentialLedger);
        if (inner != null) {
            return new ConfidentialLedgerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfidentialLedger create(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        ConfidentialLedgerInner inner =
            this.serviceClient().create(resourceGroupName, ledgerName, confidentialLedger, context);
        if (inner != null) {
            return new ConfidentialLedgerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfidentialLedger update(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger) {
        ConfidentialLedgerInner inner = this.serviceClient().update(resourceGroupName, ledgerName, confidentialLedger);
        if (inner != null) {
            return new ConfidentialLedgerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConfidentialLedger update(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context) {
        ConfidentialLedgerInner inner =
            this.serviceClient().update(resourceGroupName, ledgerName, confidentialLedger, context);
        if (inner != null) {
            return new ConfidentialLedgerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ConfidentialLedger> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ConfidentialLedgerInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new ConfidentialLedgerImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfidentialLedger> listByResourceGroup(
        String resourceGroupName, String filter, Context context) {
        PagedIterable<ConfidentialLedgerInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, filter, context);
        return inner.mapPage(inner1 -> new ConfidentialLedgerImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfidentialLedger> list() {
        PagedIterable<ConfidentialLedgerInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new ConfidentialLedgerImpl(inner1, this.manager()));
    }

    public PagedIterable<ConfidentialLedger> list(String filter, Context context) {
        PagedIterable<ConfidentialLedgerInner> inner = this.serviceClient().list(filter, context);
        return inner.mapPage(inner1 -> new ConfidentialLedgerImpl(inner1, this.manager()));
    }

    private LedgersClient serviceClient() {
        return this.innerClient;
    }

    private ConfidentialLedgerManager manager() {
        return this.serviceManager;
    }
}
