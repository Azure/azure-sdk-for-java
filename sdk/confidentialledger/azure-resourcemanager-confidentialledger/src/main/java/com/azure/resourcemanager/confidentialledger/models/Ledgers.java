// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.confidentialledger.fluent.models.ConfidentialLedgerInner;

/** Resource collection API of Ledgers. */
public interface Ledgers {
    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    ConfidentialLedger getByResourceGroup(String resourceGroupName, String ledgerName);

    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    Response<ConfidentialLedger> getByResourceGroupWithResponse(
        String resourceGroupName, String ledgerName, Context context);

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String ledgerName);

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String ledgerName, Context context);

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    ConfidentialLedger create(String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger);

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    ConfidentialLedger create(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context);

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    ConfidentialLedger update(String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger);

    /**
     * Updates properties of Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @param confidentialLedger Confidential Ledger request body for Updating Ledger.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return confidential Ledger.
     */
    ConfidentialLedger update(
        String resourceGroupName, String ledgerName, ConfidentialLedgerInner confidentialLedger, Context context);

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    PagedIterable<ConfidentialLedger> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    PagedIterable<ConfidentialLedger> listByResourceGroup(String resourceGroupName, String filter, Context context);

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    PagedIterable<ConfidentialLedger> list();

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Confidential Ledgers and a possible link for next set.
     */
    PagedIterable<ConfidentialLedger> list(String filter, Context context);
}
