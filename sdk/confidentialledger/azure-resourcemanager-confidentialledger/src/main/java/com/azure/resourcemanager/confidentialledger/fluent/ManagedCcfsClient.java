// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.confidentialledger.fluent.models.ManagedCcfInner;

/** An instance of this class provides access to all the operations defined in ManagedCcfsClient. */
public interface ManagedCcfsClient {
    /**
     * Retrieves information about a Managed CCF resource.
     *
     * <p>Retrieves the properties of a Managed CCF app.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed CCF along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ManagedCcfInner> getByResourceGroupWithResponse(String resourceGroupName, String appName, Context context);

    /**
     * Retrieves information about a Managed CCF resource.
     *
     * <p>Retrieves the properties of a Managed CCF app.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed CCF.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedCcfInner getByResourceGroup(String resourceGroupName, String appName);

    /**
     * Deletes a Managed CCF resource.
     *
     * <p>Deletes an existing Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String appName);

    /**
     * Deletes a Managed CCF resource.
     *
     * <p>Deletes an existing Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String appName, Context context);

    /**
     * Deletes a Managed CCF resource.
     *
     * <p>Deletes an existing Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String appName);

    /**
     * Deletes a Managed CCF resource.
     *
     * <p>Deletes an existing Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String appName, Context context);

    /**
     * Creates a Managed CCF.
     *
     * <p>Creates a Managed CCF with the specified Managed CCF parameters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Managed CCF Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of managed CCF.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagedCcfInner>, ManagedCcfInner> beginCreate(
        String resourceGroupName, String appName, ManagedCcfInner managedCcf);

    /**
     * Creates a Managed CCF.
     *
     * <p>Creates a Managed CCF with the specified Managed CCF parameters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Managed CCF Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of managed CCF.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagedCcfInner>, ManagedCcfInner> beginCreate(
        String resourceGroupName, String appName, ManagedCcfInner managedCcf, Context context);

    /**
     * Creates a Managed CCF.
     *
     * <p>Creates a Managed CCF with the specified Managed CCF parameters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Managed CCF Create Request Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed CCF.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedCcfInner create(String resourceGroupName, String appName, ManagedCcfInner managedCcf);

    /**
     * Creates a Managed CCF.
     *
     * <p>Creates a Managed CCF with the specified Managed CCF parameters.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Managed CCF Create Request Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return managed CCF.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedCcfInner create(String resourceGroupName, String appName, ManagedCcfInner managedCcf, Context context);

    /**
     * Update Managed CCF properties
     *
     * <p>Updates properties of Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Request body for Updating Managed CCF App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginUpdate(
        String resourceGroupName, String appName, ManagedCcfInner managedCcf);

    /**
     * Update Managed CCF properties
     *
     * <p>Updates properties of Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Request body for Updating Managed CCF App.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginUpdate(
        String resourceGroupName, String appName, ManagedCcfInner managedCcf, Context context);

    /**
     * Update Managed CCF properties
     *
     * <p>Updates properties of Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Request body for Updating Managed CCF App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void update(String resourceGroupName, String appName, ManagedCcfInner managedCcf);

    /**
     * Update Managed CCF properties
     *
     * <p>Updates properties of Managed CCF.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param appName Name of the Managed CCF.
     * @param managedCcf Request body for Updating Managed CCF App.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void update(String resourceGroupName, String appName, ManagedCcfInner managedCcf, Context context);

    /**
     * Retrieves information about all Managed CCF resources under the given subscription and resource group
     *
     * <p>Retrieves the properties of all Managed CCF apps.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Managed CCF and a possible link for next set as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ManagedCcfInner> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieves information about all Managed CCF resources under the given subscription and resource group
     *
     * <p>Retrieves the properties of all Managed CCF apps.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Managed CCF and a possible link for next set as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ManagedCcfInner> listByResourceGroup(String resourceGroupName, String filter, Context context);

    /**
     * Retrieves information about all Managed CCF resources under the given subscription
     *
     * <p>Retrieves the properties of all Managed CCF.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Managed CCF and a possible link for next set as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ManagedCcfInner> list();

    /**
     * Retrieves information about all Managed CCF resources under the given subscription
     *
     * <p>Retrieves the properties of all Managed CCF.
     *
     * @param filter The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return object that includes an array of Managed CCF and a possible link for next set as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ManagedCcfInner> list(String filter, Context context);
}
