// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.confidentialledger.ConfidentialLedgerManager;
import com.azure.resourcemanager.confidentialledger.models.ApplicationType;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedger;
import com.azure.resourcemanager.confidentialledger.models.EnclavePlatform;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerSku;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import com.azure.resourcemanager.confidentialledger.models.RunningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LedgersListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ledgerName\":\"cohslkev\",\"ledgerUri\":\"ggzfbu\",\"identityServiceUri\":\"mvfaxkffeiith\",\"ledgerInternalNamespace\":\"m\",\"runningState\":\"Resuming\",\"ledgerType\":\"Public\",\"provisioningState\":\"Succeeded\",\"ledgerSku\":\"Basic\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"zoggigrxwburvjxx\",\"tenantId\":\"spyd\",\"ledgerRoleName\":\"Reader\"},{\"principalId\":\"enkouknvudw\",\"tenantId\":\"ukbldngkpo\",\"ledgerRoleName\":\"Reader\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"xoegukgjnpiucgy\",\"ledgerRoleName\":\"Reader\"}],\"hostLevel\":\"zntypmrb\",\"maxBodySizeInMb\":2033477361,\"subjectName\":\"drqjsdpy\",\"nodeCount\":1342514759,\"writeLBAddressPrefix\":\"hxdeoejz\",\"workerThreads\":170373532,\"enclavePlatform\":\"IntelSgx\",\"applicationType\":\"ConfidentialLedger\"},\"location\":\"tgzfbishcbkh\",\"tags\":{\"p\":\"eyeam\",\"wkgshwa\":\"agalpbuxwgipwhon\",\"bin\":\"kix\",\"iyqzrnk\":\"eputtmrywnuzoqf\"},\"id\":\"qvyxlwhzlsicoho\",\"name\":\"qnwvlrya\",\"type\":\"w\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConfidentialLedgerManager manager = ConfidentialLedgerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ConfidentialLedger> response
            = manager.ledgers().listByResourceGroup("xc", "onpc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tgzfbishcbkh", response.iterator().next().location());
        Assertions.assertEquals("eyeam", response.iterator().next().tags().get("p"));
        Assertions.assertEquals(RunningState.RESUMING, response.iterator().next().properties().runningState());
        Assertions.assertEquals(LedgerType.PUBLIC, response.iterator().next().properties().ledgerType());
        Assertions.assertEquals(LedgerSku.BASIC, response.iterator().next().properties().ledgerSku());
        Assertions.assertEquals("zoggigrxwburvjxx",
            response.iterator().next().properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("spyd",
            response.iterator().next().properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.iterator().next().properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("xoegukgjnpiucgy",
            response.iterator().next().properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.iterator().next().properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("zntypmrb", response.iterator().next().properties().hostLevel());
        Assertions.assertEquals(2033477361, response.iterator().next().properties().maxBodySizeInMb());
        Assertions.assertEquals("drqjsdpy", response.iterator().next().properties().subjectName());
        Assertions.assertEquals(1342514759, response.iterator().next().properties().nodeCount());
        Assertions.assertEquals("hxdeoejz", response.iterator().next().properties().writeLBAddressPrefix());
        Assertions.assertEquals(170373532, response.iterator().next().properties().workerThreads());
        Assertions.assertEquals(EnclavePlatform.INTEL_SGX, response.iterator().next().properties().enclavePlatform());
        Assertions.assertEquals(ApplicationType.CONFIDENTIAL_LEDGER,
            response.iterator().next().properties().applicationType());
    }
}
