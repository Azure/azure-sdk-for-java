// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.confidentialledger.ConfidentialLedgerManager;
import com.azure.resourcemanager.confidentialledger.models.AadBasedSecurityPrincipal;
import com.azure.resourcemanager.confidentialledger.models.CertBasedSecurityPrincipal;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedger;
import com.azure.resourcemanager.confidentialledger.models.LedgerProperties;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LedgersCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ledgerName\":\"leyyvx\",\"ledgerUri\":\"jpkcattpng\",\"identityServiceUri\":\"rcczsqpjhvmd\",\"ledgerInternalNamespace\":\"v\",\"ledgerType\":\"Unknown\",\"provisioningState\":\"Succeeded\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"canoaeupf\",\"tenantId\":\"hltrpmopjmcmatuo\",\"ledgerRoleName\":\"Contributor\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"uaodsfcpk\",\"ledgerRoleName\":\"Contributor\"},{\"cert\":\"puozmyzydag\",\"ledgerRoleName\":\"Contributor\"},{\"cert\":\"bezy\",\"ledgerRoleName\":\"Reader\"},{\"cert\":\"ktwh\",\"ledgerRoleName\":\"Reader\"}]},\"location\":\"ywqsmbsurexim\",\"tags\":{\"ksymd\":\"ocfs\"},\"id\":\"ys\",\"name\":\"kiiuxhqyudxor\",\"type\":\"qn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConfidentialLedgerManager manager = ConfidentialLedgerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfidentialLedger response = manager.ledgers()
            .define("ebxetqgtzxdp")
            .withExistingResourceGroup("ccfwnfnbacfion")
            .withRegion("lhslazjdyggdtj")
            .withTags(mapOf("uofqwe", "b", "enevfyexfwhybci", "kh", "tynnaamdectehfi", "vyvdcs"))
            .withProperties(new LedgerProperties().withLedgerType(LedgerType.PRIVATE)
                .withAadBasedSecurityPrincipals(Arrays.asList(
                    new AadBasedSecurityPrincipal().withPrincipalId("nqvpkvlrxnje")
                        .withTenantId("eipheoflokeyy")
                        .withLedgerRoleName(LedgerRoleName.ADMINISTRATOR),
                    new AadBasedSecurityPrincipal().withPrincipalId("bdlwtgrhpdjpj")
                        .withTenantId("asxazjpqyegualhb")
                        .withLedgerRoleName(LedgerRoleName.CONTRIBUTOR),
                    new AadBasedSecurityPrincipal().withPrincipalId("jj")
                        .withTenantId("v")
                        .withLedgerRoleName(LedgerRoleName.CONTRIBUTOR),
                    new AadBasedSecurityPrincipal().withPrincipalId("wdslfhotwmcy")
                        .withTenantId("wlbjnpgacftade")
                        .withLedgerRoleName(LedgerRoleName.READER)))
                .withCertBasedSecurityPrincipals(Arrays.asList(
                    new CertBasedSecurityPrincipal().withCert("fsoppusuesnzw")
                        .withLedgerRoleName(LedgerRoleName.ADMINISTRATOR),
                    new CertBasedSecurityPrincipal().withCert("avo").withLedgerRoleName(LedgerRoleName.READER),
                    new CertBasedSecurityPrincipal().withCert("mohctb").withLedgerRoleName(LedgerRoleName.CONTRIBUTOR),
                    new CertBasedSecurityPrincipal().withCert("wxdndnvowgujjug")
                        .withLedgerRoleName(LedgerRoleName.CONTRIBUTOR))))
            .create();

        Assertions.assertEquals(LedgerType.UNKNOWN, response.properties().ledgerType());
        Assertions.assertEquals("canoaeupf", response.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("hltrpmopjmcmatuo",
            response.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.CONTRIBUTOR,
            response.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("uaodsfcpk", response.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.CONTRIBUTOR,
            response.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("ywqsmbsurexim", response.location());
        Assertions.assertEquals("ocfs", response.tags().get("ksymd"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
