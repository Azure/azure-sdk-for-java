// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confidentialledger.fluent.models.ConfidentialLedgerInner;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedgerList;
import com.azure.resourcemanager.confidentialledger.models.LedgerProperties;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import com.azure.resourcemanager.confidentialledger.models.RunningState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfidentialLedgerListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfidentialLedgerList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"runningState\":\"Pausing\",\"properties\":{\"ledgerName\":\"jaeq\",\"ledgerUri\":\"qjbasvms\",\"identityServiceUri\":\"qulngsntnbybkzgc\",\"ledgerInternalNamespace\":\"wclxxwrl\",\"ledgerType\":\"Public\",\"provisioningState\":\"Creating\",\"aadBasedSecurityPrincipals\":[],\"certBasedSecurityPrincipals\":[]},\"tags\":{\"dkvwrwjfe\":\"pdappds\",\"je\":\"snhu\",\"hocdgeab\":\"tmrldhugjzzdatq\"},\"location\":\"jczdzevndh\",\"id\":\"gphuticndvka\",\"name\":\"zwyiftyhxhur\",\"type\":\"k\"},{\"runningState\":\"Unknown\",\"properties\":{\"ledgerName\":\"lniwpwcukjfkgiaw\",\"ledgerUri\":\"lryplwckbasyy\",\"identityServiceUri\":\"ddhsgcbacphe\",\"ledgerInternalNamespace\":\"ot\",\"ledgerType\":\"Unknown\",\"provisioningState\":\"Creating\",\"aadBasedSecurityPrincipals\":[],\"certBasedSecurityPrincipals\":[]},\"tags\":{\"f\":\"dgbb\",\"bexppb\":\"dgmb\",\"rolfpfp\":\"tq\"},\"location\":\"kdosvqw\",\"id\":\"algbquxigjyjg\",\"name\":\"jaoyfhrtx\",\"type\":\"lnerkujysvleju\"},{\"runningState\":\"Resuming\",\"properties\":{\"ledgerName\":\"rlyxwjkcprbnw\",\"ledgerUri\":\"gjvtbv\",\"identityServiceUri\":\"sszdnru\",\"ledgerInternalNamespace\":\"guhmuouqfpr\",\"ledgerType\":\"Public\",\"provisioningState\":\"Canceled\",\"aadBasedSecurityPrincipals\":[],\"certBasedSecurityPrincipals\":[]},\"tags\":{\"rfidfvzwdz\":\"zuckyfi\",\"sdkf\":\"htymw\",\"pvkmijcmmxdcuf\":\"hwxmnteiwa\",\"cxtbzsg\":\"fsrpymzidnse\"},\"location\":\"x\",\"id\":\"yc\",\"name\":\"sne\",\"type\":\"mdwzjeiachboo\"},{\"runningState\":\"Unknown\",\"properties\":{\"ledgerName\":\"osfqpteehzzv\",\"ledgerUri\":\"yqrimzin\",\"identityServiceUri\":\"swjdkirso\",\"ledgerInternalNamespace\":\"qxhcrmn\",\"ledgerType\":\"Private\",\"provisioningState\":\"Unknown\",\"aadBasedSecurityPrincipals\":[],\"certBasedSecurityPrincipals\":[]},\"tags\":{\"l\":\"ocxscpaierhhbcs\"},\"location\":\"e\",\"id\":\"mmajtjaodx\",\"name\":\"bnbdxkqpxokajion\",\"type\":\"imexgstxgcpodgma\"}],\"nextLink\":\"r\"}")
                .toObject(ConfidentialLedgerList.class);
        Assertions.assertEquals("jczdzevndh", model.value().get(0).location());
        Assertions.assertEquals(RunningState.PAUSING, model.value().get(0).runningState());
        Assertions.assertEquals(LedgerType.PUBLIC, model.value().get(0).properties().ledgerType());
        Assertions.assertEquals("pdappds", model.value().get(0).tags().get("dkvwrwjfe"));
        Assertions.assertEquals("r", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfidentialLedgerList model =
            new ConfidentialLedgerList()
                .withValue(
                    Arrays
                        .asList(
                            new ConfidentialLedgerInner()
                                .withLocation("jczdzevndh")
                                .withRunningState(RunningState.PAUSING)
                                .withProperties(
                                    new LedgerProperties()
                                        .withLedgerType(LedgerType.PUBLIC)
                                        .withAadBasedSecurityPrincipals(Arrays.asList())
                                        .withCertBasedSecurityPrincipals(Arrays.asList()))
                                .withTags(mapOf("dkvwrwjfe", "pdappds", "je", "snhu", "hocdgeab", "tmrldhugjzzdatq")),
                            new ConfidentialLedgerInner()
                                .withLocation("kdosvqw")
                                .withRunningState(RunningState.UNKNOWN)
                                .withProperties(
                                    new LedgerProperties()
                                        .withLedgerType(LedgerType.UNKNOWN)
                                        .withAadBasedSecurityPrincipals(Arrays.asList())
                                        .withCertBasedSecurityPrincipals(Arrays.asList()))
                                .withTags(mapOf("f", "dgbb", "bexppb", "dgmb", "rolfpfp", "tq")),
                            new ConfidentialLedgerInner()
                                .withLocation("x")
                                .withRunningState(RunningState.RESUMING)
                                .withProperties(
                                    new LedgerProperties()
                                        .withLedgerType(LedgerType.PUBLIC)
                                        .withAadBasedSecurityPrincipals(Arrays.asList())
                                        .withCertBasedSecurityPrincipals(Arrays.asList()))
                                .withTags(
                                    mapOf(
                                        "rfidfvzwdz",
                                        "zuckyfi",
                                        "sdkf",
                                        "htymw",
                                        "pvkmijcmmxdcuf",
                                        "hwxmnteiwa",
                                        "cxtbzsg",
                                        "fsrpymzidnse")),
                            new ConfidentialLedgerInner()
                                .withLocation("e")
                                .withRunningState(RunningState.UNKNOWN)
                                .withProperties(
                                    new LedgerProperties()
                                        .withLedgerType(LedgerType.PRIVATE)
                                        .withAadBasedSecurityPrincipals(Arrays.asList())
                                        .withCertBasedSecurityPrincipals(Arrays.asList()))
                                .withTags(mapOf("l", "ocxscpaierhhbcs"))))
                .withNextLink("r");
        model = BinaryData.fromObject(model).toObject(ConfidentialLedgerList.class);
        Assertions.assertEquals("jczdzevndh", model.value().get(0).location());
        Assertions.assertEquals(RunningState.PAUSING, model.value().get(0).runningState());
        Assertions.assertEquals(LedgerType.PUBLIC, model.value().get(0).properties().ledgerType());
        Assertions.assertEquals("pdappds", model.value().get(0).tags().get("dkvwrwjfe"));
        Assertions.assertEquals("r", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
