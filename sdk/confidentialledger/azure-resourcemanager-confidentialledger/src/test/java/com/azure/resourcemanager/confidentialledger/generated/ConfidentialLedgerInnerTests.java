// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confidentialledger.fluent.models.ConfidentialLedgerInner;
import com.azure.resourcemanager.confidentialledger.models.AadBasedSecurityPrincipal;
import com.azure.resourcemanager.confidentialledger.models.CertBasedSecurityPrincipal;
import com.azure.resourcemanager.confidentialledger.models.LedgerProperties;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import com.azure.resourcemanager.confidentialledger.models.RunningState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfidentialLedgerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfidentialLedgerInner model =
            BinaryData
                .fromString(
                    "{\"runningState\":\"Active\",\"properties\":{\"ledgerName\":\"uf\",\"ledgerUri\":\"zk\",\"identityServiceUri\":\"dbihanufhfcbj\",\"ledgerInternalNamespace\":\"a\",\"ledgerType\":\"Private\",\"provisioningState\":\"Succeeded\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"bifpikxwczb\",\"tenantId\":\"cnpqxuhivyqniwby\",\"ledgerRoleName\":\"Contributor\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"umjgrtfwvuk\",\"ledgerRoleName\":\"Reader\"}]},\"tags\":{\"jnchgej\":\"kkvnipjox\",\"huxinpmqnj\":\"podmailzydehojwy\"},\"location\":\"kryhtnapczwlokj\",\"id\":\"qwixjspro\",\"name\":\"vcputegj\",\"type\":\"wmfdatscmdvpjhul\"}")
                .toObject(ConfidentialLedgerInner.class);
        Assertions.assertEquals("kryhtnapczwlokj", model.location());
        Assertions.assertEquals(RunningState.ACTIVE, model.runningState());
        Assertions.assertEquals(LedgerType.PRIVATE, model.properties().ledgerType());
        Assertions.assertEquals("bifpikxwczb", model.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("cnpqxuhivyqniwby", model.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions
            .assertEquals(
                LedgerRoleName.CONTRIBUTOR, model.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("umjgrtfwvuk", model.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions
            .assertEquals(
                LedgerRoleName.READER, model.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("kkvnipjox", model.tags().get("jnchgej"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfidentialLedgerInner model =
            new ConfidentialLedgerInner()
                .withLocation("kryhtnapczwlokj")
                .withRunningState(RunningState.ACTIVE)
                .withProperties(
                    new LedgerProperties()
                        .withLedgerType(LedgerType.PRIVATE)
                        .withAadBasedSecurityPrincipals(
                            Arrays
                                .asList(
                                    new AadBasedSecurityPrincipal()
                                        .withPrincipalId("bifpikxwczb")
                                        .withTenantId("cnpqxuhivyqniwby")
                                        .withLedgerRoleName(LedgerRoleName.CONTRIBUTOR)))
                        .withCertBasedSecurityPrincipals(
                            Arrays
                                .asList(
                                    new CertBasedSecurityPrincipal()
                                        .withCert("umjgrtfwvuk")
                                        .withLedgerRoleName(LedgerRoleName.READER))))
                .withTags(mapOf("jnchgej", "kkvnipjox", "huxinpmqnj", "podmailzydehojwy"));
        model = BinaryData.fromObject(model).toObject(ConfidentialLedgerInner.class);
        Assertions.assertEquals("kryhtnapczwlokj", model.location());
        Assertions.assertEquals(RunningState.ACTIVE, model.runningState());
        Assertions.assertEquals(LedgerType.PRIVATE, model.properties().ledgerType());
        Assertions.assertEquals("bifpikxwczb", model.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("cnpqxuhivyqniwby", model.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions
            .assertEquals(
                LedgerRoleName.CONTRIBUTOR, model.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("umjgrtfwvuk", model.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions
            .assertEquals(
                LedgerRoleName.READER, model.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("kkvnipjox", model.tags().get("jnchgej"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
