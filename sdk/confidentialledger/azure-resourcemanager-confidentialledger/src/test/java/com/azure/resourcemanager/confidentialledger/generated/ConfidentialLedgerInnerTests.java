// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confidentialledger.fluent.models.ConfidentialLedgerInner;
import com.azure.resourcemanager.confidentialledger.models.AadBasedSecurityPrincipal;
import com.azure.resourcemanager.confidentialledger.models.CertBasedSecurityPrincipal;
import com.azure.resourcemanager.confidentialledger.models.LedgerProperties;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConfidentialLedgerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfidentialLedgerInner model = BinaryData.fromString(
            "{\"properties\":{\"ledgerName\":\"lzufcyzkohdbi\",\"ledgerUri\":\"nufhf\",\"identityServiceUri\":\"jysagith\",\"ledgerInternalNamespace\":\"hab\",\"ledgerType\":\"Private\",\"provisioningState\":\"Canceled\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"zb\",\"tenantId\":\"cnpqxuhivyqniwby\",\"ledgerRoleName\":\"Contributor\"},{\"principalId\":\"vd\",\"tenantId\":\"jgrtfwvukxga\",\"ledgerRoleName\":\"Contributor\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"h\",\"ledgerRoleName\":\"Administrator\"},{\"cert\":\"yejhk\",\"ledgerRoleName\":\"Contributor\"},{\"cert\":\"napczwlokjy\",\"ledgerRoleName\":\"Contributor\"},{\"cert\":\"vnipjox\",\"ledgerRoleName\":\"Reader\"}]},\"location\":\"gejspodmailzyde\",\"tags\":{\"wixjsprozvcp\":\"wyahuxinpmqnja\",\"atscmd\":\"tegjvwmf\",\"zkrwfn\":\"pjhulsuuvmkj\",\"lwejdpv\":\"iodjp\"},\"id\":\"ryo\",\"name\":\"psoacctazakljl\",\"type\":\"hbcryffdfdosyge\"}")
            .toObject(ConfidentialLedgerInner.class);
        Assertions.assertEquals(LedgerType.PRIVATE, model.properties().ledgerType());
        Assertions.assertEquals("zb", model.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("cnpqxuhivyqniwby", model.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.CONTRIBUTOR,
            model.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("h", model.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.ADMINISTRATOR,
            model.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("gejspodmailzyde", model.location());
        Assertions.assertEquals("wyahuxinpmqnja", model.tags().get("wixjsprozvcp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfidentialLedgerInner model = new ConfidentialLedgerInner()
            .withProperties(new LedgerProperties().withLedgerType(LedgerType.PRIVATE)
                .withAadBasedSecurityPrincipals(Arrays.asList(
                    new AadBasedSecurityPrincipal().withPrincipalId("zb")
                        .withTenantId("cnpqxuhivyqniwby")
                        .withLedgerRoleName(LedgerRoleName.CONTRIBUTOR),
                    new AadBasedSecurityPrincipal().withPrincipalId("vd")
                        .withTenantId("jgrtfwvukxga")
                        .withLedgerRoleName(LedgerRoleName.CONTRIBUTOR)))
                .withCertBasedSecurityPrincipals(Arrays.asList(
                    new CertBasedSecurityPrincipal().withCert("h").withLedgerRoleName(LedgerRoleName.ADMINISTRATOR),
                    new CertBasedSecurityPrincipal().withCert("yejhk").withLedgerRoleName(LedgerRoleName.CONTRIBUTOR),
                    new CertBasedSecurityPrincipal().withCert("napczwlokjy")
                        .withLedgerRoleName(LedgerRoleName.CONTRIBUTOR),
                    new CertBasedSecurityPrincipal().withCert("vnipjox").withLedgerRoleName(LedgerRoleName.READER))))
            .withLocation("gejspodmailzyde")
            .withTags(mapOf("wixjsprozvcp", "wyahuxinpmqnja", "atscmd", "tegjvwmf", "zkrwfn", "pjhulsuuvmkj", "lwejdpv",
                "iodjp"));
        model = BinaryData.fromObject(model).toObject(ConfidentialLedgerInner.class);
        Assertions.assertEquals(LedgerType.PRIVATE, model.properties().ledgerType());
        Assertions.assertEquals("zb", model.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("cnpqxuhivyqniwby", model.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.CONTRIBUTOR,
            model.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("h", model.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.ADMINISTRATOR,
            model.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("gejspodmailzyde", model.location());
        Assertions.assertEquals("wyahuxinpmqnja", model.tags().get("wixjsprozvcp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
