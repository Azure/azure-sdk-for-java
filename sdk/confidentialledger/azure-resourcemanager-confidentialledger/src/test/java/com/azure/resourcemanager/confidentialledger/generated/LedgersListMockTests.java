// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.confidentialledger.ConfidentialLedgerManager;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedger;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LedgersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ledgerName\":\"dfgiot\",\"ledgerUri\":\"tutqxlngxlefgug\",\"identityServiceUri\":\"krxd\",\"ledgerInternalNamespace\":\"i\",\"ledgerType\":\"Unknown\",\"provisioningState\":\"Updating\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"drabhjybige\",\"tenantId\":\"qfbow\",\"ledgerRoleName\":\"Reader\"},{\"principalId\":\"yktz\",\"tenantId\":\"u\",\"ledgerRoleName\":\"Administrator\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"wgndrvynhzgpp\",\"ledgerRoleName\":\"Contributor\"}]},\"location\":\"nc\",\"tags\":{\"oo\":\"ecfvmm\"},\"id\":\"sxlzevgbmqj\",\"name\":\"abcypmivk\",\"type\":\"lzu\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConfidentialLedgerManager manager = ConfidentialLedgerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ConfidentialLedger> response
            = manager.ledgers().list("uhrzayvvt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(LedgerType.UNKNOWN, response.iterator().next().properties().ledgerType());
        Assertions.assertEquals("drabhjybige",
            response.iterator().next().properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("qfbow",
            response.iterator().next().properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.iterator().next().properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("wgndrvynhzgpp",
            response.iterator().next().properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.CONTRIBUTOR,
            response.iterator().next().properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("nc", response.iterator().next().location());
        Assertions.assertEquals("ecfvmm", response.iterator().next().tags().get("oo"));
    }
}
