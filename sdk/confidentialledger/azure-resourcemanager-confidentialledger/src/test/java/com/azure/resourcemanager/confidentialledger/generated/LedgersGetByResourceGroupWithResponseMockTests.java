// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.confidentialledger.ConfidentialLedgerManager;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedger;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LedgersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ledgerName\":\"ckyfih\",\"ledgerUri\":\"idf\",\"identityServiceUri\":\"wdzuhtymwisd\",\"ledgerInternalNamespace\":\"thwxmnteiwaopvkm\",\"ledgerType\":\"Public\",\"provisioningState\":\"Updating\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"ufufsrp\",\"tenantId\":\"zidnsezcxtbzsgfy\",\"ledgerRoleName\":\"Reader\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"mdwzjeiachboo\",\"ledgerRoleName\":\"Reader\"},{\"cert\":\"ro\",\"ledgerRoleName\":\"Administrator\"}]},\"location\":\"eeh\",\"tags\":{\"swjdkirso\":\"ypyqrimzinp\",\"soifiyipjxsqw\":\"dqxhcrmnohjtckwh\",\"bznorcjxvsnby\":\"gr\",\"cyshurzafbljjgp\":\"qabnmoc\"},\"id\":\"toqcjmklja\",\"name\":\"bqidtqaj\",\"type\":\"yulpkudjkr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConfidentialLedgerManager manager = ConfidentialLedgerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfidentialLedger response = manager.ledgers()
            .getByResourceGroupWithResponse("prwzwbnguitnwui", "gazxuf", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(LedgerType.PUBLIC, response.properties().ledgerType());
        Assertions.assertEquals("ufufsrp", response.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("zidnsezcxtbzsgfy",
            response.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("mdwzjeiachboo", response.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("eeh", response.location());
        Assertions.assertEquals("ypyqrimzinp", response.tags().get("swjdkirso"));
    }
}
