// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.confidentialledger.ConfidentialLedgerManager;
import com.azure.resourcemanager.confidentialledger.models.ApplicationType;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedger;
import com.azure.resourcemanager.confidentialledger.models.EnclavePlatform;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerSku;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import com.azure.resourcemanager.confidentialledger.models.RunningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LedgersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ledgerName\":\"vxyqjpkcattpngjc\",\"ledgerUri\":\"czsqpjhvm\",\"identityServiceUri\":\"jvnysounqe\",\"ledgerInternalNamespace\":\"noae\",\"runningState\":\"Unknown\",\"ledgerType\":\"Private\",\"provisioningState\":\"Failed\",\"ledgerSku\":\"Standard\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"pjmcmatuokthfuiu\",\"tenantId\":\"dsfcpkvxodpuoz\",\"ledgerRoleName\":\"Contributor\"},{\"principalId\":\"dagfuaxbezyiuok\",\"tenantId\":\"whrdxwzywqsmbsu\",\"ledgerRoleName\":\"Reader\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"ryocfsfksymdd\",\"ledgerRoleName\":\"Reader\"},{\"cert\":\"i\",\"ledgerRoleName\":\"Administrator\"},{\"cert\":\"qyud\",\"ledgerRoleName\":\"Administrator\"},{\"cert\":\"qn\",\"ledgerRoleName\":\"Contributor\"}],\"hostLevel\":\"zvyifqrvkdvj\",\"maxBodySizeInMb\":838682594,\"subjectName\":\"mvvd\",\"nodeCount\":1391003633,\"writeLBAddressPrefix\":\"kpnpulexxbczwtr\",\"workerThreads\":1083545989,\"enclavePlatform\":\"IntelSgx\",\"applicationType\":\"CodeTransparency\"},\"location\":\"vsovmyokac\",\"tags\":{\"hzdobpxjmflbvvnc\":\"w\",\"rsa\":\"rkcciwwzjuqk\"},\"id\":\"iwkuofos\",\"name\":\"ghsauuimjmvxied\",\"type\":\"ugidyjrr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConfidentialLedgerManager manager = ConfidentialLedgerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConfidentialLedger response = manager.ledgers()
            .getByResourceGroupWithResponse("gm", "qsl", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("vsovmyokac", response.location());
        Assertions.assertEquals("w", response.tags().get("hzdobpxjmflbvvnc"));
        Assertions.assertEquals(RunningState.UNKNOWN, response.properties().runningState());
        Assertions.assertEquals(LedgerType.PRIVATE, response.properties().ledgerType());
        Assertions.assertEquals(LedgerSku.STANDARD, response.properties().ledgerSku());
        Assertions.assertEquals("pjmcmatuokthfuiu",
            response.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("dsfcpkvxodpuoz", response.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.CONTRIBUTOR,
            response.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("ryocfsfksymdd", response.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("zvyifqrvkdvj", response.properties().hostLevel());
        Assertions.assertEquals(838682594, response.properties().maxBodySizeInMb());
        Assertions.assertEquals("mvvd", response.properties().subjectName());
        Assertions.assertEquals(1391003633, response.properties().nodeCount());
        Assertions.assertEquals("kpnpulexxbczwtr", response.properties().writeLBAddressPrefix());
        Assertions.assertEquals(1083545989, response.properties().workerThreads());
        Assertions.assertEquals(EnclavePlatform.INTEL_SGX, response.properties().enclavePlatform());
        Assertions.assertEquals(ApplicationType.CODE_TRANSPARENCY, response.properties().applicationType());
    }
}
