// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confidentialledger.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.confidentialledger.ConfidentialLedgerManager;
import com.azure.resourcemanager.confidentialledger.models.ConfidentialLedger;
import com.azure.resourcemanager.confidentialledger.models.LedgerRoleName;
import com.azure.resourcemanager.confidentialledger.models.LedgerSku;
import com.azure.resourcemanager.confidentialledger.models.LedgerType;
import com.azure.resourcemanager.confidentialledger.models.RunningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LedgersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ledgerName\":\"c\",\"ledgerUri\":\"qwoochcbon\",\"identityServiceUri\":\"pkvlrxn\",\"ledgerInternalNamespace\":\"ase\",\"runningState\":\"Pausing\",\"ledgerType\":\"Unknown\",\"provisioningState\":\"Canceled\",\"ledgerSku\":\"Basic\",\"aadBasedSecurityPrincipals\":[{\"principalId\":\"ienjbdlwtgr\",\"tenantId\":\"djpjumasxazjpq\",\"ledgerRoleName\":\"Reader\"},{\"principalId\":\"alhbx\",\"tenantId\":\"e\",\"ledgerRoleName\":\"Contributor\"}],\"certBasedSecurityPrincipals\":[{\"cert\":\"udgwdslfho\",\"ledgerRoleName\":\"Reader\"}]},\"location\":\"ynpwlbj\",\"tags\":{\"ehxnltyfsop\":\"acfta\",\"nzwdejba\":\"usue\",\"xdn\":\"orxzdmohctbqvud\"},\"id\":\"nvowgujju\",\"name\":\"wdkcglhsl\",\"type\":\"zj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConfidentialLedgerManager manager = ConfidentialLedgerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfidentialLedger response = manager.ledgers()
            .getByResourceGroupWithResponse("xrjfeallnwsub", "snjampmng", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ynpwlbj", response.location());
        Assertions.assertEquals("acfta", response.tags().get("ehxnltyfsop"));
        Assertions.assertEquals(RunningState.PAUSING, response.properties().runningState());
        Assertions.assertEquals(LedgerType.UNKNOWN, response.properties().ledgerType());
        Assertions.assertEquals(LedgerSku.BASIC, response.properties().ledgerSku());
        Assertions.assertEquals("ienjbdlwtgr", response.properties().aadBasedSecurityPrincipals().get(0).principalId());
        Assertions.assertEquals("djpjumasxazjpq", response.properties().aadBasedSecurityPrincipals().get(0).tenantId());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.properties().aadBasedSecurityPrincipals().get(0).ledgerRoleName());
        Assertions.assertEquals("udgwdslfho", response.properties().certBasedSecurityPrincipals().get(0).cert());
        Assertions.assertEquals(LedgerRoleName.READER,
            response.properties().certBasedSecurityPrincipals().get(0).ledgerRoleName());
    }
}
