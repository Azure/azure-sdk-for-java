// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.data.confidentialledger;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.experimental.http.DynamicRequest;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.util.serializer.ObjectSerializer;
import java.net.URL;

/** Initializes a new instance of the ConfidentialLedgerBaseClient type. */
@ServiceClient(builder = ConfidentialLedgerClientBuilder.class)
public final class ConfidentialLedgerBaseClient {
    private final URL ledgerUri;

    private final String apiVersion;

    private final URL identityServiceUri;

    private final HttpPipeline httpPipeline;

    private final ObjectSerializer serializer;

    /**
     * Initializes an instance of ConfidentialLedgerBaseClient client.
     *
     * @param ledgerUri The Confidential Ledger URL, for example https://contoso.confidentialledger.azure.com.
     * @param apiVersion Api Version.
     * @param identityServiceUri The Identity Service URL, for example https://identity.accledger.azure.com.
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializer The serializer to serialize an object into a string.
     */
    ConfidentialLedgerBaseClient(
            URL ledgerUri,
            String apiVersion,
            URL identityServiceUri,
            HttpPipeline httpPipeline,
            ObjectSerializer serializer) {
        this.ledgerUri = ledgerUri;
        this.apiVersion = apiVersion;
        this.identityServiceUri = identityServiceUri;
        this.httpPipeline = httpPipeline;
        this.serializer = serializer;
    }

    /**
     * The constitution is a script that assesses and applies proposals from consortium members.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     digest: String
     *     script: String
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getConstitution() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/governance/constitution")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Consortium members can manage the Confidential Ledger.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     members: [
     *         {
     *             certificate: String
     *             id: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getConsortiumMembers() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/governance/members")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     currentNodeId: String
     *     enclaveQuotes: {
     *         String: {
     *             nodeId: String
     *             mrenclave: String
     *             quoteVersion: String
     *             raw: String
     *         }
     *     }
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getEnclaveQuotes() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/enclaveQuotes")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * A sub-ledger id may optionally be specified. Only entries in the specified (or default) sub-ledger will be
     * returned.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>The sub-ledger id.</td></tr>
     *     <tr><td>fromTransactionId</td><td>String</td><td>Specify the first transaction ID in a range.</td></tr>
     *     <tr><td>toTransactionId</td><td>String</td><td>Specify the last transaction ID in a range.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     nextLink: String
     *     entries: [
     *         {
     *             contents: String
     *             subLedgerId: String
     *             transactionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getLedgerEntries() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/transactions")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     subLedgerId: String
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest postLedgerEntry() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/transactions")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To
     * prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the
     * response, or if the loading is still ongoing.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     entry: {
     *         contents: String
     *         subLedgerId: String
     *         transactionId: String
     *     }
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getLedgerEntry(String transactionId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/transactions/{transactionId}")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .setPathParam("transactionId", transactionId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Gets a receipt certifying ledger contents at a particular transaction id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     receipt: {
     *         leaf: String
     *         nodeId: String
     *         proof: [
     *             {
     *                 left: String
     *                 right: String
     *             }
     *         ]
     *         root: String
     *         signature: String
     *     }
     *     state: String(Loading/Ready)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getReceipt(String transactionId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/transactions/{transactionId}/receipt")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .setPathParam("transactionId", transactionId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Gets the status of an entry identified by a transaction id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Committed/Pending)
     *     transactionId: String
     * }
     * }</pre>
     *
     * @param transactionId Identifies a write transaction.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getTransactionStatus(String transactionId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/transactions/{transactionId}/status")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .setPathParam("transactionId", transactionId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * A sub-ledger id may optionally be specified.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>subLedgerId</td><td>String</td><td>The sub-ledger id.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String
     *     subLedgerId: String
     *     transactionId: String
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getCurrentLedgerEntry() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/transactions/current")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Deletes a user from the Confidential Ledger.
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest deleteUser(String userId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/users/{userId}")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .setPathParam("userId", userId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.DELETE);
    }

    /**
     * Gets a user.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getUser(String userId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/users/{userId}")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .setPathParam("userId", userId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * A JSON merge patch is applied for existing users.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader)
     *     userId: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param userId The user id, either an AAD object ID or certificate fingerprint.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest createOrUpdateUser(String userId) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/app/users/{userId}")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .setPathParam("userId", userId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PATCH);
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready)
     *     nextLink: String
     *     entries: [
     *         {
     *             contents: String
     *             subLedgerId: String
     *             transactionId: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getLedgerEntriesNext(String nextLink) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{ledgerUri}/{nextLink}")
                .setPathParam("ledgerUri", ledgerUri.toString())
                .setPathParam("nextLink", nextLink)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest invoke() {
        return new DynamicRequest(serializer, httpPipeline);
    }
}
