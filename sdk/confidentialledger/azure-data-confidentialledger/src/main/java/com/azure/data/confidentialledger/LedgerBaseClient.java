// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.data.confidentialledger;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.experimental.http.DynamicRequest;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.util.serializer.ObjectSerializer;

/** Initializes a new instance of the LedgerBaseClient type. */
@ServiceClient(builder = ConfidentialLedgerBuilder.class)
public final class LedgerBaseClient {
    private final String subscriptionId;

    private final String host;

    private final String apiVersion;

    private final HttpPipeline httpPipeline;

    private final ObjectSerializer serializer;

    /**
     * Initializes an instance of LedgerBaseClient client.
     *
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param host server parameter.
     * @param apiVersion Api Version.
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializer The serializer to serialize an object into a string.
     */
    LedgerBaseClient(
            String subscriptionId,
            String host,
            String apiVersion,
            HttpPipeline httpPipeline,
            ObjectSerializer serializer) {
        this.subscriptionId = subscriptionId;
        this.host = host;
        this.apiVersion = apiVersion;
        this.httpPipeline = httpPipeline;
        this.serializer = serializer;
    }

    /**
     * Retrieves the properties of a Confidential Ledger.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     id: String
     *     type: String
     *     systemData: {
     *         createdBy: String
     *         createdByType: String(User/Application/ManagedIdentity/Key)
     *         createdAt: OffsetDateTime
     *         lastModifiedBy: String
     *         lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *         lastModifiedAt: OffsetDateTime
     *     }
     *     properties: {
     *         ledgerName: String
     *         ledgerUri: String
     *         identityServiceUri: String
     *         ledgerInternalNamespace: String
     *         ledgerStorageAccount: String
     *         ledgerType: String(Unknown/Public/Private)
     *         provisioningState: String(Unknown/Succeeded/Failed/Canceled/Creating/Deleting/Updating)
     *         aadBasedSecurityPrincipals: [
     *             {
     *                 principalId: String
     *                 tenantId: String
     *                 ledgerRoleName: String(Reader/Contributor/Administrator)
     *             }
     *         ]
     *         certBasedSecurityPrincipals: [
     *             {
     *                 cert: String
     *                 ledgerRoleName: String(Reader/Contributor/Administrator)
     *             }
     *         ]
     *     }
     *     location: String
     *     tags: {
     *         String: String
     *     }
     * }
     * }</pre>
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest get(String resourceGroupName, String ledgerName) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl(
                        "{$host}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}")
                .setPathParam("$host", host)
                .setPathParam("subscriptionId", subscriptionId)
                .setPathParam("resourceGroupName", resourceGroupName)
                .setPathParam("ledgerName", ledgerName)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Deletes an existing Confidential Ledger.
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest delete(String resourceGroupName, String ledgerName) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl(
                        "{$host}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}")
                .setPathParam("$host", host)
                .setPathParam("subscriptionId", subscriptionId)
                .setPathParam("resourceGroupName", resourceGroupName)
                .setPathParam("ledgerName", ledgerName)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.DELETE);
    }

    /**
     * Creates a Confidential Ledger with the specified ledger parameters.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     id: String
     *     type: String
     *     systemData: {
     *         createdBy: String
     *         createdByType: String(User/Application/ManagedIdentity/Key)
     *         createdAt: OffsetDateTime
     *         lastModifiedBy: String
     *         lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *         lastModifiedAt: OffsetDateTime
     *     }
     *     properties: {
     *         ledgerName: String
     *         ledgerUri: String
     *         identityServiceUri: String
     *         ledgerInternalNamespace: String
     *         ledgerStorageAccount: String
     *         ledgerType: String(Unknown/Public/Private)
     *         provisioningState: String(Unknown/Succeeded/Failed/Canceled/Creating/Deleting/Updating)
     *         aadBasedSecurityPrincipals: [
     *             {
     *                 principalId: String
     *                 tenantId: String
     *                 ledgerRoleName: String(Reader/Contributor/Administrator)
     *             }
     *         ]
     *         certBasedSecurityPrincipals: [
     *             {
     *                 cert: String
     *                 ledgerRoleName: String(Reader/Contributor/Administrator)
     *             }
     *         ]
     *     }
     *     location: String
     *     tags: {
     *         String: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest create(String resourceGroupName, String ledgerName) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl(
                        "{$host}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}")
                .setPathParam("$host", host)
                .setPathParam("subscriptionId", subscriptionId)
                .setPathParam("resourceGroupName", resourceGroupName)
                .setPathParam("ledgerName", ledgerName)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Updates properties of Confidential Ledger.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     id: String
     *     type: String
     *     systemData: {
     *         createdBy: String
     *         createdByType: String(User/Application/ManagedIdentity/Key)
     *         createdAt: OffsetDateTime
     *         lastModifiedBy: String
     *         lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *         lastModifiedAt: OffsetDateTime
     *     }
     *     properties: {
     *         ledgerName: String
     *         ledgerUri: String
     *         identityServiceUri: String
     *         ledgerInternalNamespace: String
     *         ledgerStorageAccount: String
     *         ledgerType: String(Unknown/Public/Private)
     *         provisioningState: String(Unknown/Succeeded/Failed/Canceled/Creating/Deleting/Updating)
     *         aadBasedSecurityPrincipals: [
     *             {
     *                 principalId: String
     *                 tenantId: String
     *                 ledgerRoleName: String(Reader/Contributor/Administrator)
     *             }
     *         ]
     *         certBasedSecurityPrincipals: [
     *             {
     *                 cert: String
     *                 ledgerRoleName: String(Reader/Contributor/Administrator)
     *             }
     *         ]
     *     }
     *     location: String
     *     tags: {
     *         String: String
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param resourceGroupName The name of the resource group.
     * @param ledgerName Name of the Confidential Ledger.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest update(String resourceGroupName, String ledgerName) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl(
                        "{$host}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}")
                .setPathParam("$host", host)
                .setPathParam("subscriptionId", subscriptionId)
                .setPathParam("resourceGroupName", resourceGroupName)
                .setPathParam("ledgerName", ledgerName)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PATCH);
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             name: String
     *             id: String
     *             type: String
     *             systemData: {
     *                 createdBy: String
     *                 createdByType: String(User/Application/ManagedIdentity/Key)
     *                 createdAt: OffsetDateTime
     *                 lastModifiedBy: String
     *                 lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *                 lastModifiedAt: OffsetDateTime
     *             }
     *             properties: {
     *                 ledgerName: String
     *                 ledgerUri: String
     *                 identityServiceUri: String
     *                 ledgerInternalNamespace: String
     *                 ledgerStorageAccount: String
     *                 ledgerType: String(Unknown/Public/Private)
     *                 provisioningState: String(Unknown/Succeeded/Failed/Canceled/Creating/Deleting/Updating)
     *                 aadBasedSecurityPrincipals: [
     *                     {
     *                         principalId: String
     *                         tenantId: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *                 certBasedSecurityPrincipals: [
     *                     {
     *                         cert: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *             }
     *             location: String
     *             tags: {
     *                 String: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param resourceGroupName The name of the resource group.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listByResourceGroup(String resourceGroupName) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl(
                        "{$host}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers")
                .setPathParam("$host", host)
                .setPathParam("subscriptionId", subscriptionId)
                .setPathParam("resourceGroupName", resourceGroupName)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Retrieves the properties of all Confidential Ledgers.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             name: String
     *             id: String
     *             type: String
     *             systemData: {
     *                 createdBy: String
     *                 createdByType: String(User/Application/ManagedIdentity/Key)
     *                 createdAt: OffsetDateTime
     *                 lastModifiedBy: String
     *                 lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *                 lastModifiedAt: OffsetDateTime
     *             }
     *             properties: {
     *                 ledgerName: String
     *                 ledgerUri: String
     *                 identityServiceUri: String
     *                 ledgerInternalNamespace: String
     *                 ledgerStorageAccount: String
     *                 ledgerType: String(Unknown/Public/Private)
     *                 provisioningState: String(Unknown/Succeeded/Failed/Canceled/Creating/Deleting/Updating)
     *                 aadBasedSecurityPrincipals: [
     *                     {
     *                         principalId: String
     *                         tenantId: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *                 certBasedSecurityPrincipals: [
     *                     {
     *                         cert: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *             }
     *             location: String
     *             tags: {
     *                 String: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listBySubscription() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{$host}/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/ledgers/")
                .setPathParam("$host", host)
                .setPathParam("subscriptionId", subscriptionId)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             name: String
     *             id: String
     *             type: String
     *             systemData: {
     *                 createdBy: String
     *                 createdByType: String(User/Application/ManagedIdentity/Key)
     *                 createdAt: OffsetDateTime
     *                 lastModifiedBy: String
     *                 lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *                 lastModifiedAt: OffsetDateTime
     *             }
     *             properties: {
     *                 ledgerName: String
     *                 ledgerUri: String
     *                 identityServiceUri: String
     *                 ledgerInternalNamespace: String
     *                 ledgerStorageAccount: String
     *                 ledgerType: String(Unknown/Public/Private)
     *                 provisioningState: String(Unknown/Succeeded/Failed/Canceled/Creating/Deleting/Updating)
     *                 aadBasedSecurityPrincipals: [
     *                     {
     *                         principalId: String
     *                         tenantId: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *                 certBasedSecurityPrincipals: [
     *                     {
     *                         cert: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *             }
     *             location: String
     *             tags: {
     *                 String: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listByResourceGroupNext(String nextLink) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{$host}/{nextLink}")
                .setPathParam("$host", host)
                .setPathParam("nextLink", nextLink)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             name: String
     *             id: String
     *             type: String
     *             systemData: {
     *                 createdBy: String
     *                 createdByType: String(User/Application/ManagedIdentity/Key)
     *                 createdAt: OffsetDateTime
     *                 lastModifiedBy: String
     *                 lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *                 lastModifiedAt: OffsetDateTime
     *             }
     *             properties: {
     *                 ledgerName: String
     *                 ledgerUri: String
     *                 identityServiceUri: String
     *                 ledgerInternalNamespace: String
     *                 ledgerStorageAccount: String
     *                 ledgerType: String(Unknown/Public/Private)
     *                 provisioningState: String(Unknown/Succeeded/Failed/Canceled/Creating/Deleting/Updating)
     *                 aadBasedSecurityPrincipals: [
     *                     {
     *                         principalId: String
     *                         tenantId: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *                 certBasedSecurityPrincipals: [
     *                     {
     *                         cert: String
     *                         ledgerRoleName: String(Reader/Contributor/Administrator)
     *                     }
     *                 ]
     *             }
     *             location: String
     *             tags: {
     *                 String: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listBySubscriptionNext(String nextLink) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{$host}/{nextLink}")
                .setPathParam("$host", host)
                .setPathParam("nextLink", nextLink)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }
}
