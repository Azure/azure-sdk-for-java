// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.confidentialledger;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Iterator;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class GetLedgerEntriesTests extends ConfidentialLedgerClientTestBase {
    @Test
    public void testGetLedgerEntriesTests() {
        int numEntries = 2;
        int modulus = 5;

        String startTransactionId = null;
        String endTransactionId = null;

        for (int i = 0; i < numEntries; i++) {
            BinaryData entry = BinaryData.fromString("{\"contents\":\"" + numEntries + "\"}");
            RequestOptions requestOptions = new RequestOptions().addQueryParam("collectionId", "" + numEntries % i);
            Response<BinaryData> response = confidentialLedgerClient.postLedgerEntryWithResponse(entry, requestOptions);

            startTransactionId = response.getHeaders().get("x-ms-ccf-transaction-id").getValue();
            endTransactionId = null;

            Assertions.assertEquals(200, response.getStatusCode());

            for (int j = 1; j < numEntries; j++) {
                entry = BinaryData.fromString("{\"contents\":\"" + numEntries + "\"}");
                requestOptions = new RequestOptions().addQueryParam("collectionId", "" + j % modulus);
                response = confidentialLedgerClient.postLedgerEntryWithResponse(entry, requestOptions);
        
                endTransactionId = response.getHeaders().get("x-ms-ccf-transaction-id").getValue();
        
                Assertions.assertEquals(200, response.getStatusCode());
            }
        }
        

        for (int i = 0; i < modulus; i++) {
            System.out.println("Start txn = " + startTransactionId);
            System.out.println("End txn = " + endTransactionId);
            RequestOptions auditRequestOptions =
                    new RequestOptions()
                        .addQueryParam("fromTransactionId", startTransactionId)
                        .addQueryParam("toTransactionId", endTransactionId)
                        .addQueryParam("collectionId", "" + i);
            PagedIterable<BinaryData> auditResponse = confidentialLedgerClient.listLedgerEntries(auditRequestOptions);

            Iterator<BinaryData> iterator = auditResponse.iterator();

            while (iterator.hasNext()) {
                BinaryData nextEntry = iterator.next();
                
                ObjectMapper objectMapper = new ObjectMapper();
                JsonNode responseBodyJson = null;

                try {
                    responseBodyJson = objectMapper.readTree(nextEntry.toBytes());
                } catch (IOException e) {
                    e.printStackTrace();
                    Assertions.assertTrue(false);
                }

                System.out.println(responseBodyJson);
            }
        }
    }
}
