// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.confidentialledger;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Iterator;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class GetLedgerEntriesTests extends ConfidentialLedgerClientTestBase {
    @Test
    public void testGetLedgerEntriesTests() {
        int numEntries = 2;
        int modulus = 5;

        BinaryData entry = BinaryData.fromString("{\"contents\":\"" + numEntries + "\"}");
        RequestOptions requestOptions = new RequestOptions().addQueryParam("collectionId", "" + 0);
        Response<BinaryData> response = confidentialLedgerClient.postLedgerEntryWithResponse(entry, requestOptions);

        String startTransactionId = response.getHeaders().get("x-ms-ccf-transaction-id").getValue();
        String endTransactionId = null;

        Assertions.assertEquals(200, response.getStatusCode());

        for (int i = 1; i < numEntries; i++) {
            entry = BinaryData.fromString("{\"contents\":\"" + numEntries + "\"}");
            requestOptions = new RequestOptions().addQueryParam("collectionId", "" + i % modulus);
            response = confidentialLedgerClient.postLedgerEntryWithResponse(entry, requestOptions);
    
            endTransactionId = response.getHeaders().get("x-ms-ccf-transaction-id").getValue();
    
            Assertions.assertEquals(200, response.getStatusCode());
        }

        System.out.println("Start txn = " + startTransactionId);
        System.out.println("End txn = " + endTransactionId);
        RequestOptions auditRequestOptions =
                new RequestOptions()
                       .addQueryParam("fromTransactionId", startTransactionId)
                       .addQueryParam("toTransactionId", endTransactionId);
        PagedIterable<BinaryData> auditResponse = confidentialLedgerClient.listLedgerEntries(auditRequestOptions);

        System.out.println("auditResponse = " + auditResponse.toString());

        Iterator<BinaryData> iterator = auditResponse.iterator();
        System.out.println("Has next " + iterator.hasNext());

        String lastEntry = null;
        while (iterator.hasNext()) {
            BinaryData nextEntry = iterator.next();
            lastEntry =  nextEntry.toString();
            
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseBodyJson = null;

            try {
                responseBodyJson = objectMapper.readTree(nextEntry.toBytes());
            } catch (IOException e) {
                e.printStackTrace();
                Assertions.assertTrue(false);
            }
        }
    }
}
