// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.confidentialledger.generated;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Iterator;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class GetLedgerEntriesTests extends ConfidentialLedgerClientTestBase {
    @Test
    public void testGetLedgerEntriesTests() {
        int numEntries = 2;
        int modulus = 5;

        BinaryData entry = BinaryData.fromString("{\"contents\":\"" + numEntries + "\"}");
        RequestOptions requestOptions = new RequestOptions().addQueryParam("collectionId", "" + 0);
        Response<BinaryData> response = confidentialLedgerClient.postLedgerEntryWithResponse(entry, requestOptions);

        String startTransactionId = response.getHeaders().get("x-ms-ccf-transaction-id").getValue();
        String endTransactionId = null;

        Assertions.assertEquals(200, response.getStatusCode());

        for (int i = 1; i < numEntries; i++) {
            entry = BinaryData.fromString("{\"contents\":\"" + numEntries + "\"}");
            requestOptions = new RequestOptions().addQueryParam("collectionId", "" + i % modulus);
            response = confidentialLedgerClient.postLedgerEntryWithResponse(entry, requestOptions);
    
            endTransactionId = response.getHeaders().get("x-ms-ccf-transaction-id").getValue();
    
            Assertions.assertEquals(200, response.getStatusCode());
        }

        System.out.println("Start txn = " + startTransactionId);
        System.out.println("End txn = " + endTransactionId);
        RequestOptions auditRequestOptions =
                new RequestOptions()
                       .addQueryParam("fromTransactionId", startTransactionId)
                       .addQueryParam("toTransactionId", endTransactionId);
        PagedIterable<BinaryData> auditResponse = confidentialLedgerClient.listLedgerEntries(auditRequestOptions);

        System.out.println("auditResponse = " + auditResponse.toString());

        Iterator<BinaryData> iterator = auditResponse.iterator();
        System.out.println("Has next " + iterator.hasNext());

        String lastEntry = null;
        while (iterator.hasNext()) {
            BinaryData nextEntry = iterator.next();
            lastEntry =  nextEntry.toString();
            // System.out.println(nextEntry.toString());
            
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode responseBodyJson = null;

            try {
                responseBodyJson = objectMapper.readTree(nextEntry.toBytes());
            } catch (IOException e) {
                e.printStackTrace();
                Assertions.assertTrue(false);
            }

            //System.out.println(responseBodyJson);
        }
        System.out.println(lastEntry);

        /*
        Assertions.assertEquals(transactionResponseBodyJson.get("transactionId").asText(), transactionId);
        Assertions.assertTrue(200 == transactionResponse.getStatusCode() || 406 == transactionResponse.getStatusCode());

        Response<BinaryData> currentResponse = confidentialLedgerClient.getCurrentLedgerEntryWithResponse(requestOptions);

        JsonNode currentResponseBodyJson = null;

        try {
            
            currentResponseBodyJson = objectMapper.readTree(currentResponse.getValue().toBytes());
        } catch (IOException e) {
            e.printStackTrace();
            Assertions.assertTrue(false);
        }

        Assertions.assertTrue(200 == currentResponse.getStatusCode());

        // we assume no one else is using this test ledger
        Assertions.assertTrue(currentResponseBodyJson.get("transactionId").asDouble() <= Double.parseDouble(transactionId));

        RequestOptions auditRequestOptions =
                new RequestOptions()
                        .addQueryParam("fromTransactionId", "3.14")
                        .addQueryParam("toTransactionId", "3.42");
        PagedIterable<BinaryData> auditResponse = confidentialLedgerClient.listLedgerEntries(auditRequestOptions);
        Assertions.assertEquals(200, auditResponse.iterableByPage().iterator().next().getStatusCode());
        Assertions.assertEquals(
                BinaryData.fromString(
                                "{\"collectionId\":\"DEFAULT_SUBLEDGER\",\"contents\":\"Ledger entry contents at transaction id 3.14.\",\"transactionId\":\"3.14\"}")
                        .toObject(Object.class),
                response.iterator().next().toObject(Object.class));
                */
    }
}
