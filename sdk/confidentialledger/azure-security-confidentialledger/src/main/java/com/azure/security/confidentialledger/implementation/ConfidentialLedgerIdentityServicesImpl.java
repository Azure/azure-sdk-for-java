// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.confidentialledger.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ConfidentialLedgerIdentityServices. */
public final class ConfidentialLedgerIdentityServicesImpl {
    /** The proxy service used to perform REST calls. */
    private final ConfidentialLedgerIdentityServicesService service;

    /** The service client containing this operation class. */
    private final ConfidentialLedgerClientImpl client;

    /**
     * Initializes an instance of ConfidentialLedgerIdentityServicesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ConfidentialLedgerIdentityServicesImpl(ConfidentialLedgerClientImpl client) {
        this.service =
                RestProxy.create(
                        ConfidentialLedgerIdentityServicesService.class,
                        client.getHttpPipeline(),
                        client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ConfidentialLedgerClientConfidentialLedgerIdentityServices to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{identityServiceUri}")
    @ServiceInterface(name = "ConfidentialLedgerCl")
    private interface ConfidentialLedgerIdentityServicesService {
        @Get("/ledgerIdentity/{ledgerId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLedgerIdentity(
                @HostParam("identityServiceUri") String identityServiceUri,
                @QueryParam("api-version") String apiVersion,
                @PathParam("ledgerId") String ledgerId,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Gets identity information for a Confidential Ledger instance.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ledgerId: String
     *     ledgerTlsCertificate: String
     * }
     * }</pre>
     *
     * @param ledgerId Id of the Confidential Ledger instance to get information for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return identity information for a Confidential Ledger instance along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLedgerIdentityWithResponseAsync(
            String ledgerId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getLedgerIdentity(
                                this.client.getIdentityServiceUri(),
                                this.client.getServiceVersion().getVersion(),
                                ledgerId,
                                requestOptions,
                                context));
    }

    /**
     * Gets identity information for a Confidential Ledger instance.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ledgerId: String
     *     ledgerTlsCertificate: String
     * }
     * }</pre>
     *
     * @param ledgerId Id of the Confidential Ledger instance to get information for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return identity information for a Confidential Ledger instance along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLedgerIdentityWithResponseAsync(
            String ledgerId, RequestOptions requestOptions, Context context) {
        return service.getLedgerIdentity(
                this.client.getIdentityServiceUri(),
                this.client.getServiceVersion().getVersion(),
                ledgerId,
                requestOptions,
                context);
    }

    /**
     * Gets identity information for a Confidential Ledger instance.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ledgerId: String
     *     ledgerTlsCertificate: String
     * }
     * }</pre>
     *
     * @param ledgerId Id of the Confidential Ledger instance to get information for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return identity information for a Confidential Ledger instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLedgerIdentityWithResponse(String ledgerId, RequestOptions requestOptions) {
        return getLedgerIdentityWithResponseAsync(ledgerId, requestOptions).block();
    }
}
