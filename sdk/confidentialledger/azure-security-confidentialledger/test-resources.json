{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"ledgerName": {
			"type": "string",
			"metadata": {
				"description": "Ledger Name"
			},
			"minLength": 3,
			"maxLength": 24
		},
		"principalId": {
			"type": "string",
			"metadata": {
				"description": "Oid of the user"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for all resources."
			}
		}
	},
	"functions": [],
	"variables": {},
	"resources": [{
		"name": "[parameters('ledgerName')]",
		"type": "Microsoft.ConfidentialLedger/ledgers",
		"apiVersion": "2020-12-01-preview",
		"location": "[parameters('location')]",
		"properties": {
			"ledgerType": "Public",
			"aadBasedSecurityPrincipals": [{
				"principalId": "[parameters('principalId')]",
				"ledgerRoleName": "Administrator"
			}]
		}
	}],
    "outputs": {
        "LEDGER_NAME": {
            "type": "string",
            "value": "[parameters('ledgerName')]"
        },
		"IDENTITYSERVICEURI": {
			"type": "string",
			"value": "https://identity.confidential-ledger.core.azure.com"
		},
		"LEDGERURI": {
			"type": "string",
			"value": "https://[parameters('ledgerName')].confidential-ledger.azure.com"
		},
		// this should instead be the service principal for a test application we create for just Java SDK testing
		// we fetch the secret from kv in the Java SDK pipeline
		// the pipeline which creates the ledger is also the user that will be pinging the ledger
		// we _should_ be able to use clientsecretcredentials (we will have client id, tenant id, and the client secret which we retrieve)
		// we obtain a jwt token which we then use to provision the ledger
		"USERAAD": {
			"type": "string",
			"value": "[parameters('principalId')]"
		}
    }
}
