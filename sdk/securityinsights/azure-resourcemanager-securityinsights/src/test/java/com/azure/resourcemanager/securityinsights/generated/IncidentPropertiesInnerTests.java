// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.IncidentPropertiesInner;
import com.azure.resourcemanager.securityinsights.fluent.models.TeamInformationInner;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentLabel;
import com.azure.resourcemanager.securityinsights.models.IncidentOwnerInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class IncidentPropertiesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IncidentPropertiesInner model = BinaryData.fromString(
            "{\"additionalData\":{\"alertsCount\":2017122463,\"bookmarksCount\":816651113,\"commentsCount\":1931804941,\"alertProductNames\":[\"iykhy\",\"wf\",\"jlb\",\"xqvkjlmxhomdyn\"],\"providerIncidentUrl\":\"wdigumbnraauz\",\"tactics\":[\"Exfiltration\"],\"techniques\":[\"ysdzhez\",\"wva\"]},\"classification\":\"BenignPositive\",\"classificationComment\":\"vv\",\"classificationReason\":\"SuspiciousActivity\",\"createdTimeUtc\":\"2021-08-29T14:10:38Z\",\"description\":\"hqyikvy\",\"firstActivityTimeUtc\":\"2021-02-02T17:56:52Z\",\"incidentUrl\":\"avluwmncs\",\"incidentNumber\":736005906,\"labels\":[{\"labelName\":\"y\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"o\",\"labelType\":\"User\"}],\"providerName\":\"gsgbdhuzq\",\"providerIncidentId\":\"j\",\"lastActivityTimeUtc\":\"2021-08-01T19:03:10Z\",\"lastModifiedTimeUtc\":\"2021-03-16T08:46:18Z\",\"owner\":{\"email\":\"liqhzvhx\",\"assignedTo\":\"omtkub\",\"objectId\":\"0ae6f072-c6f5-4a4a-9571-b92bffaa8188\",\"userPrincipalName\":\"pnvdxz\",\"ownerType\":\"Unknown\"},\"relatedAnalyticRuleIds\":[\"rbbcevq\",\"gtltdhlf\"],\"severity\":\"Medium\",\"status\":\"Active\",\"teamInformation\":{\"teamId\":\"ykvgtrdcnifmz\",\"primaryChannelUrl\":\"dymbrny\",\"teamCreationTimeUtc\":\"2021-05-22T13:41:02Z\",\"name\":\"prafwgckhoc\",\"description\":\"d\"},\"title\":\"ffwafq\"}")
            .toObject(IncidentPropertiesInner.class);
        Assertions.assertEquals(IncidentClassification.BENIGN_POSITIVE, model.classification());
        Assertions.assertEquals("vv", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.SUSPICIOUS_ACTIVITY, model.classificationReason());
        Assertions.assertEquals("hqyikvy", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-02T17:56:52Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("y", model.labels().get(0).labelName());
        Assertions.assertEquals("gsgbdhuzq", model.providerName());
        Assertions.assertEquals("j", model.providerIncidentId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T19:03:10Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("liqhzvhx", model.owner().email());
        Assertions.assertEquals("omtkub", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("0ae6f072-c6f5-4a4a-9571-b92bffaa8188"), model.owner().objectId());
        Assertions.assertEquals("pnvdxz", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.UNKNOWN, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.MEDIUM, model.severity());
        Assertions.assertEquals(IncidentStatus.ACTIVE, model.status());
        Assertions.assertEquals("ffwafq", model.title());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IncidentPropertiesInner model = new IncidentPropertiesInner()
            .withClassification(IncidentClassification.BENIGN_POSITIVE)
            .withClassificationComment("vv")
            .withClassificationReason(IncidentClassificationReason.SUSPICIOUS_ACTIVITY)
            .withDescription("hqyikvy")
            .withFirstActivityTimeUtc(OffsetDateTime.parse("2021-02-02T17:56:52Z"))
            .withLabels(Arrays.asList(new IncidentLabel().withLabelName("y"), new IncidentLabel().withLabelName("o")))
            .withProviderName("gsgbdhuzq")
            .withProviderIncidentId("j")
            .withLastActivityTimeUtc(OffsetDateTime.parse("2021-08-01T19:03:10Z"))
            .withOwner(new IncidentOwnerInfo().withEmail("liqhzvhx")
                .withAssignedTo("omtkub")
                .withObjectId(UUID.fromString("0ae6f072-c6f5-4a4a-9571-b92bffaa8188"))
                .withUserPrincipalName("pnvdxz")
                .withOwnerType(OwnerType.UNKNOWN))
            .withSeverity(IncidentSeverity.MEDIUM)
            .withStatus(IncidentStatus.ACTIVE)
            .withTeamInformation(new TeamInformationInner())
            .withTitle("ffwafq");
        model = BinaryData.fromObject(model).toObject(IncidentPropertiesInner.class);
        Assertions.assertEquals(IncidentClassification.BENIGN_POSITIVE, model.classification());
        Assertions.assertEquals("vv", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.SUSPICIOUS_ACTIVITY, model.classificationReason());
        Assertions.assertEquals("hqyikvy", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-02T17:56:52Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("y", model.labels().get(0).labelName());
        Assertions.assertEquals("gsgbdhuzq", model.providerName());
        Assertions.assertEquals("j", model.providerIncidentId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T19:03:10Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("liqhzvhx", model.owner().email());
        Assertions.assertEquals("omtkub", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("0ae6f072-c6f5-4a4a-9571-b92bffaa8188"), model.owner().objectId());
        Assertions.assertEquals("pnvdxz", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.UNKNOWN, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.MEDIUM, model.severity());
        Assertions.assertEquals(IncidentStatus.ACTIVE, model.status());
        Assertions.assertEquals("ffwafq", model.title());
    }
}
