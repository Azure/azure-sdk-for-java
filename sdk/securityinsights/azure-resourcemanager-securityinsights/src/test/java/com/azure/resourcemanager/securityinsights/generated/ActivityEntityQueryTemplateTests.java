// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.ActivityEntityQueryTemplate;
import com.azure.resourcemanager.securityinsights.models.ActivityEntityQueryTemplatePropertiesQueryDefinitions;
import com.azure.resourcemanager.securityinsights.models.DataTypeDefinitions;
import com.azure.resourcemanager.securityinsights.models.EntityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ActivityEntityQueryTemplateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityEntityQueryTemplate model = BinaryData.fromString(
            "{\"kind\":\"Activity\",\"properties\":{\"title\":\"jgxieqfkyfh\",\"content\":\"vjaqu\",\"description\":\"yynvskpa\",\"queryDefinitions\":{\"query\":\"geumexm\",\"summarizeBy\":\"xcbccwkqmt\"},\"dataTypes\":[{\"dataType\":\"qis\"}],\"inputEntityType\":\"Process\",\"requiredInputFieldsSets\":[[\"ftr\",\"rejdaahuqim\",\"dahlfxlmuifmuadj\",\"fsn\"],[\"kiioshj\",\"cz\",\"tybnxgztlcgctj\",\"hfjv\"],[\"wjzebecuvlb\",\"fvwcljk\",\"pylrwoxzgwpsy\",\"jijeypdvrb\"]],\"entitiesFilter\":{\"umentqontwhymxym\":[\"kdkgawqwjxildfkc\",\"feygzqp\",\"oisfmnaybdjn\"],\"h\":[\"wi\",\"qtow\"]}},\"id\":\"ycoybajasqubf\",\"name\":\"j\",\"type\":\"ywhjqwmchq\"}")
            .toObject(ActivityEntityQueryTemplate.class);
        Assertions.assertEquals("jgxieqfkyfh", model.title());
        Assertions.assertEquals("vjaqu", model.content());
        Assertions.assertEquals("yynvskpa", model.description());
        Assertions.assertEquals("geumexm", model.queryDefinitions().query());
        Assertions.assertEquals("xcbccwkqmt", model.queryDefinitions().summarizeBy());
        Assertions.assertEquals("qis", model.dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.PROCESS, model.inputEntityType());
        Assertions.assertEquals("ftr", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("kdkgawqwjxildfkc", model.entitiesFilter().get("umentqontwhymxym").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityEntityQueryTemplate model = new ActivityEntityQueryTemplate().withTitle("jgxieqfkyfh")
            .withContent("vjaqu")
            .withDescription("yynvskpa")
            .withQueryDefinitions(new ActivityEntityQueryTemplatePropertiesQueryDefinitions().withQuery("geumexm")
                .withSummarizeBy("xcbccwkqmt"))
            .withDataTypes(Arrays.asList(new DataTypeDefinitions().withDataType("qis")))
            .withInputEntityType(EntityType.PROCESS)
            .withRequiredInputFieldsSets(Arrays.asList(Arrays.asList("ftr", "rejdaahuqim", "dahlfxlmuifmuadj", "fsn"),
                Arrays.asList("kiioshj", "cz", "tybnxgztlcgctj", "hfjv"),
                Arrays.asList("wjzebecuvlb", "fvwcljk", "pylrwoxzgwpsy", "jijeypdvrb")))
            .withEntitiesFilter(mapOf("umentqontwhymxym", Arrays.asList("kdkgawqwjxildfkc", "feygzqp", "oisfmnaybdjn"),
                "h", Arrays.asList("wi", "qtow")));
        model = BinaryData.fromObject(model).toObject(ActivityEntityQueryTemplate.class);
        Assertions.assertEquals("jgxieqfkyfh", model.title());
        Assertions.assertEquals("vjaqu", model.content());
        Assertions.assertEquals("yynvskpa", model.description());
        Assertions.assertEquals("geumexm", model.queryDefinitions().query());
        Assertions.assertEquals("xcbccwkqmt", model.queryDefinitions().summarizeBy());
        Assertions.assertEquals("qis", model.dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.PROCESS, model.inputEntityType());
        Assertions.assertEquals("ftr", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("kdkgawqwjxildfkc", model.entitiesFilter().get("umentqontwhymxym").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
