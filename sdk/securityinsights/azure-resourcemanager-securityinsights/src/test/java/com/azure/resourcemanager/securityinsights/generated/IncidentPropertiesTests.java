// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.IncidentProperties;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentLabel;
import com.azure.resourcemanager.securityinsights.models.IncidentOwnerInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class IncidentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IncidentProperties model = BinaryData.fromString(
            "{\"additionalData\":{\"alertsCount\":1108075171,\"bookmarksCount\":1125977089,\"commentsCount\":649555961,\"alertProductNames\":[\"tbgsncghkj\",\"szzhbijhtxfvgxbf\",\"mxnehmp\"],\"tactics\":[\"Exfiltration\",\"InhibitResponseFunction\"]},\"classification\":\"FalsePositive\",\"classificationComment\":\"bfqkkr\",\"classificationReason\":\"InaccurateData\",\"createdTimeUtc\":\"2021-12-04T19:14:26Z\",\"description\":\"riwflzlfb\",\"firstActivityTimeUtc\":\"2021-09-10T17:06:39Z\",\"incidentUrl\":\"zycispn\",\"incidentNumber\":2071345899,\"labels\":[{\"labelName\":\"gkbrpyyd\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"nuqqkpikadrgvt\",\"labelType\":\"User\"},{\"labelName\":\"n\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"nhijggmebfsi\",\"labelType\":\"User\"}],\"lastActivityTimeUtc\":\"2021-08-14T22:49:32Z\",\"lastModifiedTimeUtc\":\"2021-02-21T10:02:12Z\",\"owner\":{\"email\":\"azzmhjrunmpxt\",\"assignedTo\":\"bh\",\"objectId\":\"e3195add-7d60-43aa-a6de-88b3cdeb1276\",\"userPrincipalName\":\"l\",\"ownerType\":\"Group\"},\"relatedAnalyticRuleIds\":[\"yskpbhen\",\"tkcxywnytnrsy\",\"lqidyby\",\"czfc\"],\"severity\":\"Low\",\"status\":\"Active\",\"title\":\"axdbabph\"}")
            .toObject(IncidentProperties.class);
        Assertions.assertEquals(IncidentClassification.FALSE_POSITIVE, model.classification());
        Assertions.assertEquals("bfqkkr", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.INACCURATE_DATA, model.classificationReason());
        Assertions.assertEquals("riwflzlfb", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-10T17:06:39Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("gkbrpyyd", model.labels().get(0).labelName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-14T22:49:32Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("azzmhjrunmpxt", model.owner().email());
        Assertions.assertEquals("bh", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("e3195add-7d60-43aa-a6de-88b3cdeb1276"), model.owner().objectId());
        Assertions.assertEquals("l", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.GROUP, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.LOW, model.severity());
        Assertions.assertEquals(IncidentStatus.ACTIVE, model.status());
        Assertions.assertEquals("axdbabph", model.title());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IncidentProperties model = new IncidentProperties().withClassification(IncidentClassification.FALSE_POSITIVE)
            .withClassificationComment("bfqkkr")
            .withClassificationReason(IncidentClassificationReason.INACCURATE_DATA)
            .withDescription("riwflzlfb")
            .withFirstActivityTimeUtc(OffsetDateTime.parse("2021-09-10T17:06:39Z"))
            .withLabels(Arrays.asList(new IncidentLabel().withLabelName("gkbrpyyd"),
                new IncidentLabel().withLabelName("nuqqkpikadrgvt"), new IncidentLabel().withLabelName("n"),
                new IncidentLabel().withLabelName("nhijggmebfsi")))
            .withLastActivityTimeUtc(OffsetDateTime.parse("2021-08-14T22:49:32Z"))
            .withOwner(new IncidentOwnerInfo().withEmail("azzmhjrunmpxt")
                .withAssignedTo("bh")
                .withObjectId(UUID.fromString("e3195add-7d60-43aa-a6de-88b3cdeb1276"))
                .withUserPrincipalName("l")
                .withOwnerType(OwnerType.GROUP))
            .withSeverity(IncidentSeverity.LOW)
            .withStatus(IncidentStatus.ACTIVE)
            .withTitle("axdbabph");
        model = BinaryData.fromObject(model).toObject(IncidentProperties.class);
        Assertions.assertEquals(IncidentClassification.FALSE_POSITIVE, model.classification());
        Assertions.assertEquals("bfqkkr", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.INACCURATE_DATA, model.classificationReason());
        Assertions.assertEquals("riwflzlfb", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-10T17:06:39Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("gkbrpyyd", model.labels().get(0).labelName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-14T22:49:32Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("azzmhjrunmpxt", model.owner().email());
        Assertions.assertEquals("bh", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("e3195add-7d60-43aa-a6de-88b3cdeb1276"), model.owner().objectId());
        Assertions.assertEquals("l", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.GROUP, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.LOW, model.severity());
        Assertions.assertEquals(IncidentStatus.ACTIVE, model.status());
        Assertions.assertEquals("axdbabph", model.title());
    }
}
