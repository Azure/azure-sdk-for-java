// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.EntityTimelineResponseInner;
import com.azure.resourcemanager.securityinsights.models.EntityTimelineItem;
import com.azure.resourcemanager.securityinsights.models.EntityTimelineKind;
import com.azure.resourcemanager.securityinsights.models.TimelineAggregation;
import com.azure.resourcemanager.securityinsights.models.TimelineError;
import com.azure.resourcemanager.securityinsights.models.TimelineResultsMetadata;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EntityTimelineResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EntityTimelineResponseInner model = BinaryData.fromString(
            "{\"metaData\":{\"totalCount\":1994175863,\"aggregations\":[{\"count\":2090841381,\"kind\":\"Anomaly\"}],\"errors\":[{\"kind\":\"Anomaly\",\"queryId\":\"uicybxarzgszuf\",\"errorMessage\":\"x\"},{\"kind\":\"Anomaly\",\"queryId\":\"opidoamciodh\",\"errorMessage\":\"haz\"},{\"kind\":\"SecurityAlert\",\"queryId\":\"nz\",\"errorMessage\":\"onlwntoeg\"},{\"kind\":\"SecurityAlert\",\"queryId\":\"wbw\",\"errorMessage\":\"kszzcmrvexztv\"}]},\"value\":[{\"kind\":\"EntityTimelineItem\"},{\"kind\":\"EntityTimelineItem\"},{\"kind\":\"EntityTimelineItem\"},{\"kind\":\"EntityTimelineItem\"}]}")
            .toObject(EntityTimelineResponseInner.class);
        Assertions.assertEquals(1994175863, model.metadata().totalCount());
        Assertions.assertEquals(2090841381, model.metadata().aggregations().get(0).count());
        Assertions.assertEquals(EntityTimelineKind.ANOMALY, model.metadata().aggregations().get(0).kind());
        Assertions.assertEquals(EntityTimelineKind.ANOMALY, model.metadata().errors().get(0).kind());
        Assertions.assertEquals("uicybxarzgszuf", model.metadata().errors().get(0).queryId());
        Assertions.assertEquals("x", model.metadata().errors().get(0).errorMessage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EntityTimelineResponseInner model = new EntityTimelineResponseInner()
            .withMetadata(new TimelineResultsMetadata().withTotalCount(1994175863)
                .withAggregations(
                    Arrays.asList(new TimelineAggregation().withCount(2090841381).withKind(EntityTimelineKind.ANOMALY)))
                .withErrors(Arrays.asList(
                    new TimelineError().withKind(EntityTimelineKind.ANOMALY)
                        .withQueryId("uicybxarzgszuf")
                        .withErrorMessage("x"),
                    new TimelineError().withKind(EntityTimelineKind.ANOMALY)
                        .withQueryId("opidoamciodh")
                        .withErrorMessage("haz"),
                    new TimelineError().withKind(EntityTimelineKind.SECURITY_ALERT)
                        .withQueryId("nz")
                        .withErrorMessage("onlwntoeg"),
                    new TimelineError().withKind(EntityTimelineKind.SECURITY_ALERT)
                        .withQueryId("wbw")
                        .withErrorMessage("kszzcmrvexztv"))))
            .withValue(Arrays.asList(new EntityTimelineItem(), new EntityTimelineItem(), new EntityTimelineItem(),
                new EntityTimelineItem()));
        model = BinaryData.fromObject(model).toObject(EntityTimelineResponseInner.class);
        Assertions.assertEquals(1994175863, model.metadata().totalCount());
        Assertions.assertEquals(2090841381, model.metadata().aggregations().get(0).count());
        Assertions.assertEquals(EntityTimelineKind.ANOMALY, model.metadata().aggregations().get(0).kind());
        Assertions.assertEquals(EntityTimelineKind.ANOMALY, model.metadata().errors().get(0).kind());
        Assertions.assertEquals("uicybxarzgszuf", model.metadata().errors().get(0).queryId());
        Assertions.assertEquals("x", model.metadata().errors().get(0).errorMessage());
    }
}
