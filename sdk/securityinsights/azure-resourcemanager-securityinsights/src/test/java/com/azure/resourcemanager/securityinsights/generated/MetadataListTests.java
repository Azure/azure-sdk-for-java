// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.MetadataModelInner;
import com.azure.resourcemanager.securityinsights.models.Kind;
import com.azure.resourcemanager.securityinsights.models.MetadataAuthor;
import com.azure.resourcemanager.securityinsights.models.MetadataCategories;
import com.azure.resourcemanager.securityinsights.models.MetadataDependencies;
import com.azure.resourcemanager.securityinsights.models.MetadataList;
import com.azure.resourcemanager.securityinsights.models.MetadataSource;
import com.azure.resourcemanager.securityinsights.models.MetadataSupport;
import com.azure.resourcemanager.securityinsights.models.Operator;
import com.azure.resourcemanager.securityinsights.models.SourceKind;
import com.azure.resourcemanager.securityinsights.models.SupportTier;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MetadataListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MetadataList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"contentId\":\"aipidsdaultxi\",\"parentId\":\"jumfqwazlnq\",\"version\":\"cjngzqdqxtbjwgny\",\"kind\":\"InvestigationQuery\",\"source\":{\"kind\":\"Solution\",\"name\":\"svtui\",\"sourceId\":\"hajqglcfh\"},\"author\":{\"name\":\"qryxyn\",\"email\":\"zrdpsovwxznptgoe\",\"link\":\"bbabp\"},\"support\":{\"tier\":\"Microsoft\",\"name\":\"slkvntjl\",\"email\":\"gjkskyrioov\",\"link\":\"dsxwaab\"},\"dependencies\":{\"contentId\":\"frygznmmax\",\"kind\":\"Parser\",\"version\":\"zob\",\"name\":\"pxl\",\"operator\":\"OR\",\"criteria\":[{},{},{},{}]},\"categories\":{\"domains\":[\"eixynllxecwcroj\",\"hslhca\",\"jutifdwfmvigorqj\"],\"verticals\":[\"zhraglkafh\"]},\"providers\":[\"juj\",\"ickpz\",\"cpopmxel\",\"wcltyjede\"],\"customVersion\":\"f\",\"contentSchemaVersion\":\"qscazuawxtz\",\"icon\":\"uamwabzxrvxc\",\"threatAnalysisTactics\":[\"sphaivmxyasflvg\",\"gzwywak\",\"ihknsmjbl\"],\"threatAnalysisTechniques\":[\"hlnymzotq\",\"ryuzcbmqqv\",\"mv\",\"fgtayxonsup\"],\"previewImages\":[\"lzqnhcvs\",\"ltnzoibgsxg\"],\"previewImagesDark\":[\"yqo\"]},\"etag\":\"p\",\"id\":\"xwdofdb\",\"name\":\"iqxeiiqbimht\",\"type\":\"wwinhehf\"},{\"properties\":{\"contentId\":\"fvwbcb\",\"parentId\":\"embnkbw\",\"version\":\"vxkdivqihebwtswb\",\"kind\":\"AutomationRule\",\"source\":{\"kind\":\"LocalWorkspace\",\"name\":\"duragegizvc\",\"sourceId\":\"elisdjub\"},\"author\":{\"name\":\"qigkx\",\"email\":\"sazgakgacyrcmj\",\"link\":\"spofapvuhry\"},\"support\":{\"tier\":\"Community\",\"name\":\"frzgbzjed\",\"email\":\"tkvnlvxbcuiiznkt\",\"link\":\"ansnvp\"},\"dependencies\":{\"contentId\":\"mik\",\"kind\":\"Watchlist\",\"version\":\"z\",\"name\":\"iwbuqny\",\"operator\":\"OR\",\"criteria\":[{}]},\"categories\":{\"domains\":[\"gcrpfbcun\",\"zzcezelfwyfwlw\",\"jwetnpsihcla\",\"zvaylptrsqqw\"],\"verticals\":[\"mwqkchcxwaxf\",\"w\",\"jkjexf\"]},\"providers\":[\"vhpsylkkshkbffmb\",\"xzjrgy\",\"wpgj\",\"snptfujgicgaao\"],\"customVersion\":\"aqutdewemxswvruu\",\"contentSchemaVersion\":\"zjgehkfkim\",\"icon\":\"ixokffqyin\",\"threatAnalysisTactics\":[\"epqw\",\"ixmonstshiyxg\",\"elfclducc\"],\"threatAnalysisTechniques\":[\"ds\"],\"previewImages\":[\"cobiegstmninwjiz\",\"i\"],\"previewImagesDark\":[\"hgshe\",\"jtbxqmuluxlx\",\"zvners\",\"ycucrwnamikzeb\"]},\"etag\":\"bsmswziqgf\",\"id\":\"okzrus\",\"name\":\"hvhcz\",\"type\":\"n\"}],\"nextLink\":\"bycjsxjwwix\"}")
            .toObject(MetadataList.class);
        Assertions.assertEquals("p", model.value().get(0).etag());
        Assertions.assertEquals("aipidsdaultxi", model.value().get(0).contentId());
        Assertions.assertEquals("jumfqwazlnq", model.value().get(0).parentId());
        Assertions.assertEquals("cjngzqdqxtbjwgny", model.value().get(0).version());
        Assertions.assertEquals(Kind.INVESTIGATION_QUERY, model.value().get(0).kind());
        Assertions.assertEquals(SourceKind.SOLUTION, model.value().get(0).source().kind());
        Assertions.assertEquals("svtui", model.value().get(0).source().name());
        Assertions.assertEquals("hajqglcfh", model.value().get(0).source().sourceId());
        Assertions.assertEquals("qryxyn", model.value().get(0).author().name());
        Assertions.assertEquals("zrdpsovwxznptgoe", model.value().get(0).author().email());
        Assertions.assertEquals("bbabp", model.value().get(0).author().link());
        Assertions.assertEquals(SupportTier.MICROSOFT, model.value().get(0).support().tier());
        Assertions.assertEquals("slkvntjl", model.value().get(0).support().name());
        Assertions.assertEquals("gjkskyrioov", model.value().get(0).support().email());
        Assertions.assertEquals("dsxwaab", model.value().get(0).support().link());
        Assertions.assertEquals("frygznmmax", model.value().get(0).dependencies().contentId());
        Assertions.assertEquals(Kind.PARSER, model.value().get(0).dependencies().kind());
        Assertions.assertEquals("zob", model.value().get(0).dependencies().version());
        Assertions.assertEquals("pxl", model.value().get(0).dependencies().name());
        Assertions.assertEquals(Operator.OR, model.value().get(0).dependencies().operator());
        Assertions.assertEquals("eixynllxecwcroj", model.value().get(0).categories().domains().get(0));
        Assertions.assertEquals("zhraglkafh", model.value().get(0).categories().verticals().get(0));
        Assertions.assertEquals("juj", model.value().get(0).providers().get(0));
        Assertions.assertEquals("f", model.value().get(0).customVersion());
        Assertions.assertEquals("qscazuawxtz", model.value().get(0).contentSchemaVersion());
        Assertions.assertEquals("uamwabzxrvxc", model.value().get(0).icon());
        Assertions.assertEquals("sphaivmxyasflvg", model.value().get(0).threatAnalysisTactics().get(0));
        Assertions.assertEquals("hlnymzotq", model.value().get(0).threatAnalysisTechniques().get(0));
        Assertions.assertEquals("lzqnhcvs", model.value().get(0).previewImages().get(0));
        Assertions.assertEquals("yqo", model.value().get(0).previewImagesDark().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MetadataList model = new MetadataList().withValue(Arrays.asList(
            new MetadataModelInner().withEtag("p")
                .withContentId("aipidsdaultxi")
                .withParentId("jumfqwazlnq")
                .withVersion("cjngzqdqxtbjwgny")
                .withKind(Kind.INVESTIGATION_QUERY)
                .withSource(
                    new MetadataSource().withKind(SourceKind.SOLUTION).withName("svtui").withSourceId("hajqglcfh"))
                .withAuthor(new MetadataAuthor().withName("qryxyn").withEmail("zrdpsovwxznptgoe").withLink("bbabp"))
                .withSupport(new MetadataSupport().withTier(SupportTier.MICROSOFT)
                    .withName("slkvntjl")
                    .withEmail("gjkskyrioov")
                    .withLink("dsxwaab"))
                .withDependencies(new MetadataDependencies().withContentId("frygznmmax")
                    .withKind(Kind.PARSER)
                    .withVersion("zob")
                    .withName("pxl")
                    .withOperator(Operator.OR)
                    .withCriteria(Arrays.asList(new MetadataDependencies(), new MetadataDependencies(),
                        new MetadataDependencies(), new MetadataDependencies())))
                .withCategories(
                    new MetadataCategories().withDomains(Arrays.asList("eixynllxecwcroj", "hslhca", "jutifdwfmvigorqj"))
                        .withVerticals(Arrays.asList("zhraglkafh")))
                .withProviders(Arrays.asList("juj", "ickpz", "cpopmxel", "wcltyjede"))
                .withCustomVersion("f")
                .withContentSchemaVersion("qscazuawxtz")
                .withIcon("uamwabzxrvxc")
                .withThreatAnalysisTactics(Arrays.asList("sphaivmxyasflvg", "gzwywak", "ihknsmjbl"))
                .withThreatAnalysisTechniques(Arrays.asList("hlnymzotq", "ryuzcbmqqv", "mv", "fgtayxonsup"))
                .withPreviewImages(Arrays.asList("lzqnhcvs", "ltnzoibgsxg"))
                .withPreviewImagesDark(Arrays.asList("yqo")),
            new MetadataModelInner().withEtag("bsmswziqgf")
                .withContentId("fvwbcb")
                .withParentId("embnkbw")
                .withVersion("vxkdivqihebwtswb")
                .withKind(Kind.AUTOMATION_RULE)
                .withSource(new MetadataSource().withKind(SourceKind.LOCAL_WORKSPACE)
                    .withName("duragegizvc")
                    .withSourceId("elisdjub"))
                .withAuthor(new MetadataAuthor().withName("qigkx").withEmail("sazgakgacyrcmj").withLink("spofapvuhry"))
                .withSupport(new MetadataSupport().withTier(SupportTier.COMMUNITY)
                    .withName("frzgbzjed")
                    .withEmail("tkvnlvxbcuiiznkt")
                    .withLink("ansnvp"))
                .withDependencies(new MetadataDependencies().withContentId("mik")
                    .withKind(Kind.WATCHLIST)
                    .withVersion("z")
                    .withName("iwbuqny")
                    .withOperator(Operator.OR)
                    .withCriteria(Arrays.asList(new MetadataDependencies())))
                .withCategories(new MetadataCategories()
                    .withDomains(Arrays.asList("gcrpfbcun", "zzcezelfwyfwlw", "jwetnpsihcla", "zvaylptrsqqw"))
                    .withVerticals(Arrays.asList("mwqkchcxwaxf", "w", "jkjexf")))
                .withProviders(Arrays.asList("vhpsylkkshkbffmb", "xzjrgy", "wpgj", "snptfujgicgaao"))
                .withCustomVersion("aqutdewemxswvruu")
                .withContentSchemaVersion("zjgehkfkim")
                .withIcon("ixokffqyin")
                .withThreatAnalysisTactics(Arrays.asList("epqw", "ixmonstshiyxg", "elfclducc"))
                .withThreatAnalysisTechniques(Arrays.asList("ds"))
                .withPreviewImages(Arrays.asList("cobiegstmninwjiz", "i"))
                .withPreviewImagesDark(Arrays.asList("hgshe", "jtbxqmuluxlx", "zvners", "ycucrwnamikzeb"))));
        model = BinaryData.fromObject(model).toObject(MetadataList.class);
        Assertions.assertEquals("p", model.value().get(0).etag());
        Assertions.assertEquals("aipidsdaultxi", model.value().get(0).contentId());
        Assertions.assertEquals("jumfqwazlnq", model.value().get(0).parentId());
        Assertions.assertEquals("cjngzqdqxtbjwgny", model.value().get(0).version());
        Assertions.assertEquals(Kind.INVESTIGATION_QUERY, model.value().get(0).kind());
        Assertions.assertEquals(SourceKind.SOLUTION, model.value().get(0).source().kind());
        Assertions.assertEquals("svtui", model.value().get(0).source().name());
        Assertions.assertEquals("hajqglcfh", model.value().get(0).source().sourceId());
        Assertions.assertEquals("qryxyn", model.value().get(0).author().name());
        Assertions.assertEquals("zrdpsovwxznptgoe", model.value().get(0).author().email());
        Assertions.assertEquals("bbabp", model.value().get(0).author().link());
        Assertions.assertEquals(SupportTier.MICROSOFT, model.value().get(0).support().tier());
        Assertions.assertEquals("slkvntjl", model.value().get(0).support().name());
        Assertions.assertEquals("gjkskyrioov", model.value().get(0).support().email());
        Assertions.assertEquals("dsxwaab", model.value().get(0).support().link());
        Assertions.assertEquals("frygznmmax", model.value().get(0).dependencies().contentId());
        Assertions.assertEquals(Kind.PARSER, model.value().get(0).dependencies().kind());
        Assertions.assertEquals("zob", model.value().get(0).dependencies().version());
        Assertions.assertEquals("pxl", model.value().get(0).dependencies().name());
        Assertions.assertEquals(Operator.OR, model.value().get(0).dependencies().operator());
        Assertions.assertEquals("eixynllxecwcroj", model.value().get(0).categories().domains().get(0));
        Assertions.assertEquals("zhraglkafh", model.value().get(0).categories().verticals().get(0));
        Assertions.assertEquals("juj", model.value().get(0).providers().get(0));
        Assertions.assertEquals("f", model.value().get(0).customVersion());
        Assertions.assertEquals("qscazuawxtz", model.value().get(0).contentSchemaVersion());
        Assertions.assertEquals("uamwabzxrvxc", model.value().get(0).icon());
        Assertions.assertEquals("sphaivmxyasflvg", model.value().get(0).threatAnalysisTactics().get(0));
        Assertions.assertEquals("hlnymzotq", model.value().get(0).threatAnalysisTechniques().get(0));
        Assertions.assertEquals("lzqnhcvs", model.value().get(0).previewImages().get(0));
        Assertions.assertEquals("yqo", model.value().get(0).previewImagesDark().get(0));
    }
}
