// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisContact;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisContacts;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EnrichmentDomainWhoisContactsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnrichmentDomainWhoisContacts model = BinaryData.fromString(
            "{\"admin\":{\"name\":\"qrhzoymibmrqyib\",\"org\":\"wfluszdt\",\"street\":[\"kwofyyvoq\",\"cpi\",\"xpbtgiwbwo\"],\"city\":\"washr\",\"state\":\"tkcnqxwb\",\"postal\":\"kulpiujwaasi\",\"country\":\"i\",\"phone\":\"byuqerpqlp\",\"fax\":\"cciuqgbdbutau\",\"email\":\"btkuwhh\"},\"billing\":{\"name\":\"k\",\"org\":\"oxafn\",\"street\":[\"pichkoymkcdy\",\"bpkkpwdre\"],\"city\":\"ovvqfovljxywsu\",\"state\":\"yrs\",\"postal\":\"sytgadgvraea\",\"country\":\"e\",\"phone\":\"zar\",\"fax\":\"lquuijfqkacewii\",\"email\":\"pubjibw\"},\"registrant\":{\"name\":\"tohqkvpuvksgp\",\"org\":\"aknynfsynljphuop\",\"street\":[\"lqiyntorzihl\",\"osjswsr\",\"slyzrpzbchckqq\"],\"city\":\"ioxiysuiizyn\",\"state\":\"dy\",\"postal\":\"rwyhqmibzyhwitsm\",\"country\":\"yynpcdpumnzgmwz\",\"phone\":\"abikns\",\"fax\":\"gj\",\"email\":\"bldtlww\"},\"tech\":{\"name\":\"dmtnc\",\"org\":\"kotl\",\"street\":[\"yhgsy\"],\"city\":\"ogjltdtbnnhad\",\"state\":\"crkvcikhnv\",\"postal\":\"mqg\",\"country\":\"queziky\",\"phone\":\"gxk\",\"fax\":\"la\",\"email\":\"elwuipi\"}}")
            .toObject(EnrichmentDomainWhoisContacts.class);
        Assertions.assertEquals("qrhzoymibmrqyib", model.admin().name());
        Assertions.assertEquals("wfluszdt", model.admin().org());
        Assertions.assertEquals("kwofyyvoq", model.admin().street().get(0));
        Assertions.assertEquals("washr", model.admin().city());
        Assertions.assertEquals("tkcnqxwb", model.admin().state());
        Assertions.assertEquals("kulpiujwaasi", model.admin().postal());
        Assertions.assertEquals("i", model.admin().country());
        Assertions.assertEquals("byuqerpqlp", model.admin().phone());
        Assertions.assertEquals("cciuqgbdbutau", model.admin().fax());
        Assertions.assertEquals("btkuwhh", model.admin().email());
        Assertions.assertEquals("k", model.billing().name());
        Assertions.assertEquals("oxafn", model.billing().org());
        Assertions.assertEquals("pichkoymkcdy", model.billing().street().get(0));
        Assertions.assertEquals("ovvqfovljxywsu", model.billing().city());
        Assertions.assertEquals("yrs", model.billing().state());
        Assertions.assertEquals("sytgadgvraea", model.billing().postal());
        Assertions.assertEquals("e", model.billing().country());
        Assertions.assertEquals("zar", model.billing().phone());
        Assertions.assertEquals("lquuijfqkacewii", model.billing().fax());
        Assertions.assertEquals("pubjibw", model.billing().email());
        Assertions.assertEquals("tohqkvpuvksgp", model.registrant().name());
        Assertions.assertEquals("aknynfsynljphuop", model.registrant().org());
        Assertions.assertEquals("lqiyntorzihl", model.registrant().street().get(0));
        Assertions.assertEquals("ioxiysuiizyn", model.registrant().city());
        Assertions.assertEquals("dy", model.registrant().state());
        Assertions.assertEquals("rwyhqmibzyhwitsm", model.registrant().postal());
        Assertions.assertEquals("yynpcdpumnzgmwz", model.registrant().country());
        Assertions.assertEquals("abikns", model.registrant().phone());
        Assertions.assertEquals("gj", model.registrant().fax());
        Assertions.assertEquals("bldtlww", model.registrant().email());
        Assertions.assertEquals("dmtnc", model.tech().name());
        Assertions.assertEquals("kotl", model.tech().org());
        Assertions.assertEquals("yhgsy", model.tech().street().get(0));
        Assertions.assertEquals("ogjltdtbnnhad", model.tech().city());
        Assertions.assertEquals("crkvcikhnv", model.tech().state());
        Assertions.assertEquals("mqg", model.tech().postal());
        Assertions.assertEquals("queziky", model.tech().country());
        Assertions.assertEquals("gxk", model.tech().phone());
        Assertions.assertEquals("la", model.tech().fax());
        Assertions.assertEquals("elwuipi", model.tech().email());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnrichmentDomainWhoisContacts model = new EnrichmentDomainWhoisContacts()
            .withAdmin(new EnrichmentDomainWhoisContact().withName("qrhzoymibmrqyib")
                .withOrg("wfluszdt")
                .withStreet(Arrays.asList("kwofyyvoq", "cpi", "xpbtgiwbwo"))
                .withCity("washr")
                .withState("tkcnqxwb")
                .withPostal("kulpiujwaasi")
                .withCountry("i")
                .withPhone("byuqerpqlp")
                .withFax("cciuqgbdbutau")
                .withEmail("btkuwhh"))
            .withBilling(new EnrichmentDomainWhoisContact().withName("k")
                .withOrg("oxafn")
                .withStreet(Arrays.asList("pichkoymkcdy", "bpkkpwdre"))
                .withCity("ovvqfovljxywsu")
                .withState("yrs")
                .withPostal("sytgadgvraea")
                .withCountry("e")
                .withPhone("zar")
                .withFax("lquuijfqkacewii")
                .withEmail("pubjibw"))
            .withRegistrant(new EnrichmentDomainWhoisContact().withName("tohqkvpuvksgp")
                .withOrg("aknynfsynljphuop")
                .withStreet(Arrays.asList("lqiyntorzihl", "osjswsr", "slyzrpzbchckqq"))
                .withCity("ioxiysuiizyn")
                .withState("dy")
                .withPostal("rwyhqmibzyhwitsm")
                .withCountry("yynpcdpumnzgmwz")
                .withPhone("abikns")
                .withFax("gj")
                .withEmail("bldtlww"))
            .withTech(new EnrichmentDomainWhoisContact().withName("dmtnc")
                .withOrg("kotl")
                .withStreet(Arrays.asList("yhgsy"))
                .withCity("ogjltdtbnnhad")
                .withState("crkvcikhnv")
                .withPostal("mqg")
                .withCountry("queziky")
                .withPhone("gxk")
                .withFax("la")
                .withEmail("elwuipi"));
        model = BinaryData.fromObject(model).toObject(EnrichmentDomainWhoisContacts.class);
        Assertions.assertEquals("qrhzoymibmrqyib", model.admin().name());
        Assertions.assertEquals("wfluszdt", model.admin().org());
        Assertions.assertEquals("kwofyyvoq", model.admin().street().get(0));
        Assertions.assertEquals("washr", model.admin().city());
        Assertions.assertEquals("tkcnqxwb", model.admin().state());
        Assertions.assertEquals("kulpiujwaasi", model.admin().postal());
        Assertions.assertEquals("i", model.admin().country());
        Assertions.assertEquals("byuqerpqlp", model.admin().phone());
        Assertions.assertEquals("cciuqgbdbutau", model.admin().fax());
        Assertions.assertEquals("btkuwhh", model.admin().email());
        Assertions.assertEquals("k", model.billing().name());
        Assertions.assertEquals("oxafn", model.billing().org());
        Assertions.assertEquals("pichkoymkcdy", model.billing().street().get(0));
        Assertions.assertEquals("ovvqfovljxywsu", model.billing().city());
        Assertions.assertEquals("yrs", model.billing().state());
        Assertions.assertEquals("sytgadgvraea", model.billing().postal());
        Assertions.assertEquals("e", model.billing().country());
        Assertions.assertEquals("zar", model.billing().phone());
        Assertions.assertEquals("lquuijfqkacewii", model.billing().fax());
        Assertions.assertEquals("pubjibw", model.billing().email());
        Assertions.assertEquals("tohqkvpuvksgp", model.registrant().name());
        Assertions.assertEquals("aknynfsynljphuop", model.registrant().org());
        Assertions.assertEquals("lqiyntorzihl", model.registrant().street().get(0));
        Assertions.assertEquals("ioxiysuiizyn", model.registrant().city());
        Assertions.assertEquals("dy", model.registrant().state());
        Assertions.assertEquals("rwyhqmibzyhwitsm", model.registrant().postal());
        Assertions.assertEquals("yynpcdpumnzgmwz", model.registrant().country());
        Assertions.assertEquals("abikns", model.registrant().phone());
        Assertions.assertEquals("gj", model.registrant().fax());
        Assertions.assertEquals("bldtlww", model.registrant().email());
        Assertions.assertEquals("dmtnc", model.tech().name());
        Assertions.assertEquals("kotl", model.tech().org());
        Assertions.assertEquals("yhgsy", model.tech().street().get(0));
        Assertions.assertEquals("ogjltdtbnnhad", model.tech().city());
        Assertions.assertEquals("crkvcikhnv", model.tech().state());
        Assertions.assertEquals("mqg", model.tech().postal());
        Assertions.assertEquals("queziky", model.tech().country());
        Assertions.assertEquals("gxk", model.tech().phone());
        Assertions.assertEquals("la", model.tech().fax());
        Assertions.assertEquals("elwuipi", model.tech().email());
    }
}
