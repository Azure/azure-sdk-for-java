// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.ActivityEntityQueriesProperties;
import com.azure.resourcemanager.securityinsights.models.ActivityEntityQueriesPropertiesQueryDefinitions;
import com.azure.resourcemanager.securityinsights.models.EntityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ActivityEntityQueriesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityEntityQueriesProperties model = BinaryData.fromString(
            "{\"title\":\"nmliqmvlbhi\",\"content\":\"aqgrv\",\"description\":\"omxp\",\"queryDefinitions\":{\"query\":\"tsdfjyieso\"},\"inputEntityType\":\"RegistryKey\",\"requiredInputFieldsSets\":[[\"outmp\",\"zgleofjsbg\"]],\"entitiesFilter\":{\"jjrlhiqlwix\":[\"vdajfwn\",\"cf\",\"aciq\"],\"qb\":[\"bouguxtndopgjt\",\"bas\",\"alapdlndbe\"],\"bb\":[\"xvvlwyn\"],\"zfe\":[\"vzfjm\",\"pu\"]},\"templateName\":\"jljmphfkyezol\",\"enabled\":true,\"createdTimeUtc\":\"2021-03-28T11:51:40Z\",\"lastModifiedTimeUtc\":\"2021-09-25T08:17:04Z\"}")
            .toObject(ActivityEntityQueriesProperties.class);
        Assertions.assertEquals("nmliqmvlbhi", model.title());
        Assertions.assertEquals("aqgrv", model.content());
        Assertions.assertEquals("omxp", model.description());
        Assertions.assertEquals("tsdfjyieso", model.queryDefinitions().query());
        Assertions.assertEquals(EntityType.REGISTRY_KEY, model.inputEntityType());
        Assertions.assertEquals("outmp", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("vdajfwn", model.entitiesFilter().get("jjrlhiqlwix").get(0));
        Assertions.assertEquals("jljmphfkyezol", model.templateName());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityEntityQueriesProperties model = new ActivityEntityQueriesProperties().withTitle("nmliqmvlbhi")
            .withContent("aqgrv")
            .withDescription("omxp")
            .withQueryDefinitions(new ActivityEntityQueriesPropertiesQueryDefinitions().withQuery("tsdfjyieso"))
            .withInputEntityType(EntityType.REGISTRY_KEY)
            .withRequiredInputFieldsSets(Arrays.asList(Arrays.asList("outmp", "zgleofjsbg")))
            .withEntitiesFilter(mapOf("jjrlhiqlwix", Arrays.asList("vdajfwn", "cf", "aciq"), "qb",
                Arrays.asList("bouguxtndopgjt", "bas", "alapdlndbe"), "bb", Arrays.asList("xvvlwyn"), "zfe",
                Arrays.asList("vzfjm", "pu")))
            .withTemplateName("jljmphfkyezol")
            .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(ActivityEntityQueriesProperties.class);
        Assertions.assertEquals("nmliqmvlbhi", model.title());
        Assertions.assertEquals("aqgrv", model.content());
        Assertions.assertEquals("omxp", model.description());
        Assertions.assertEquals("tsdfjyieso", model.queryDefinitions().query());
        Assertions.assertEquals(EntityType.REGISTRY_KEY, model.inputEntityType());
        Assertions.assertEquals("outmp", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("vdajfwn", model.entitiesFilter().get("jjrlhiqlwix").get(0));
        Assertions.assertEquals("jljmphfkyezol", model.templateName());
        Assertions.assertEquals(true, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
