// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.PermissionProviderScope;
import com.azure.resourcemanager.securityinsights.models.ProviderName;
import com.azure.resourcemanager.securityinsights.models.RequiredPermissions;
import com.azure.resourcemanager.securityinsights.models.ResourceProvider;
import org.junit.jupiter.api.Assertions;

public final class ResourceProviderTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceProvider model = BinaryData.fromString(
            "{\"provider\":\"Microsoft.OperationalInsights/solutions\",\"permissionsDisplayText\":\"mcdcpkshl\",\"providerDisplayName\":\"ermhzicsbfdjhyaa\",\"scope\":\"Subscription\",\"requiredPermissions\":{\"action\":true,\"write\":true,\"read\":false,\"delete\":false}}")
            .toObject(ResourceProvider.class);
        Assertions.assertEquals(ProviderName.MICROSOFT_OPERATIONAL_INSIGHTS_SOLUTIONS, model.provider());
        Assertions.assertEquals("mcdcpkshl", model.permissionsDisplayText());
        Assertions.assertEquals("ermhzicsbfdjhyaa", model.providerDisplayName());
        Assertions.assertEquals(PermissionProviderScope.SUBSCRIPTION, model.scope());
        Assertions.assertEquals(true, model.requiredPermissions().action());
        Assertions.assertEquals(true, model.requiredPermissions().write());
        Assertions.assertEquals(false, model.requiredPermissions().read());
        Assertions.assertEquals(false, model.requiredPermissions().delete());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceProvider model
            = new ResourceProvider().withProvider(ProviderName.MICROSOFT_OPERATIONAL_INSIGHTS_SOLUTIONS)
                .withPermissionsDisplayText("mcdcpkshl")
                .withProviderDisplayName("ermhzicsbfdjhyaa")
                .withScope(PermissionProviderScope.SUBSCRIPTION)
                .withRequiredPermissions(
                    new RequiredPermissions().withAction(true).withWrite(true).withRead(false).withDelete(false));
        model = BinaryData.fromObject(model).toObject(ResourceProvider.class);
        Assertions.assertEquals(ProviderName.MICROSOFT_OPERATIONAL_INSIGHTS_SOLUTIONS, model.provider());
        Assertions.assertEquals("mcdcpkshl", model.permissionsDisplayText());
        Assertions.assertEquals("ermhzicsbfdjhyaa", model.providerDisplayName());
        Assertions.assertEquals(PermissionProviderScope.SUBSCRIPTION, model.scope());
        Assertions.assertEquals(true, model.requiredPermissions().action());
        Assertions.assertEquals(true, model.requiredPermissions().write());
        Assertions.assertEquals(false, model.requiredPermissions().read());
        Assertions.assertEquals(false, model.requiredPermissions().delete());
    }
}
