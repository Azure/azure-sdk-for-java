// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import com.azure.resourcemanager.securityinsights.models.ThreatIntelligenceAlertRuleTemplate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ThreatIntelligenceAlertRuleTemplateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ThreatIntelligenceAlertRuleTemplate model = BinaryData.fromString(
            "{\"kind\":\"ThreatIntelligence\",\"properties\":{\"severity\":\"Low\",\"tactics\":[\"ImpairProcessControl\",\"Collection\",\"Persistence\"],\"techniques\":[\"k\",\"bhxv\"],\"alertRulesCreatedByTemplateCount\":597932404,\"lastUpdatedDateUTC\":\"2021-12-01T17:44:04Z\",\"createdDateUTC\":\"2021-02-13T23:06:36Z\",\"description\":\"hjevd\",\"displayName\":\"nfa\",\"requiredDataConnectors\":[{\"connectorId\":\"skmqozzkivyhj\",\"dataTypes\":[\"izjixlq\",\"hefkwabsolronqq\",\"mgnlqxsjxtel\",\"xhvuqbozool\"]},{\"connectorId\":\"ocarkuzlbcnndt\",\"dataTypes\":[\"awqytllhdyzm\",\"ckze\"]},{\"connectorId\":\"xak\",\"dataTypes\":[\"wymxgaabjk\",\"tfohf\",\"ogzvk\"]}],\"status\":\"Installed\"},\"id\":\"iwdyjqurykcrraue\",\"name\":\"kcsueho\",\"type\":\"ddacbcbgydlqidy\"}")
            .toObject(ThreatIntelligenceAlertRuleTemplate.class);
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(AttackTactic.IMPAIR_PROCESS_CONTROL, model.tactics().get(0));
        Assertions.assertEquals("k", model.techniques().get(0));
        Assertions.assertEquals(597932404, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("hjevd", model.description());
        Assertions.assertEquals("nfa", model.displayName());
        Assertions.assertEquals("skmqozzkivyhj", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("izjixlq", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.INSTALLED, model.status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ThreatIntelligenceAlertRuleTemplate model = new ThreatIntelligenceAlertRuleTemplate()
            .withSeverity(AlertSeverity.LOW)
            .withTactics(
                Arrays.asList(AttackTactic.IMPAIR_PROCESS_CONTROL, AttackTactic.COLLECTION, AttackTactic.PERSISTENCE))
            .withTechniques(Arrays.asList("k", "bhxv"))
            .withAlertRulesCreatedByTemplateCount(597932404)
            .withDescription("hjevd")
            .withDisplayName("nfa")
            .withRequiredDataConnectors(Arrays.asList(
                new AlertRuleTemplateDataSource().withConnectorId("skmqozzkivyhj")
                    .withDataTypes(Arrays.asList("izjixlq", "hefkwabsolronqq", "mgnlqxsjxtel", "xhvuqbozool")),
                new AlertRuleTemplateDataSource().withConnectorId("ocarkuzlbcnndt")
                    .withDataTypes(Arrays.asList("awqytllhdyzm", "ckze")),
                new AlertRuleTemplateDataSource().withConnectorId("xak")
                    .withDataTypes(Arrays.asList("wymxgaabjk", "tfohf", "ogzvk"))))
            .withStatus(TemplateStatus.INSTALLED);
        model = BinaryData.fromObject(model).toObject(ThreatIntelligenceAlertRuleTemplate.class);
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(AttackTactic.IMPAIR_PROCESS_CONTROL, model.tactics().get(0));
        Assertions.assertEquals("k", model.techniques().get(0));
        Assertions.assertEquals(597932404, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("hjevd", model.description());
        Assertions.assertEquals("nfa", model.displayName());
        Assertions.assertEquals("skmqozzkivyhj", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("izjixlq", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.INSTALLED, model.status());
    }
}
