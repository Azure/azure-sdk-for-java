// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.EnrichmentDomainWhoisInner;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisContact;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisContacts;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisDetails;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisRegistrarDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EnrichmentDomainWhoisInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnrichmentDomainWhoisInner model = BinaryData.fromString(
            "{\"domain\":\"iwwroyqbexrmc\",\"server\":\"bycnojvkn\",\"created\":\"2021-07-16T09:24:30Z\",\"updated\":\"2021-06-23T12:33:46Z\",\"expires\":\"2021-05-25T06:46Z\",\"parsedWhois\":{\"registrar\":{\"name\":\"apj\",\"abuseContactEmail\":\"hpvgqz\",\"abuseContactPhone\":\"rvxdjzlmw\",\"ianaId\":\"kvugfhzovawjvzun\",\"url\":\"thnnpr\",\"whoisServer\":\"i\"},\"contacts\":{\"admin\":{\"name\":\"pjzu\",\"org\":\"jxdultskzbbtdzu\",\"street\":[\"ekg\"],\"city\":\"ozuhkfp\",\"state\":\"jyofdxluusdtto\",\"postal\":\"aboekqv\",\"country\":\"lns\",\"phone\":\"bxwyjsflhhcaa\",\"fax\":\"jixisxyawjoyaqcs\",\"email\":\"jpkiidzyexznelix\"},\"billing\":{\"name\":\"ztfolhbnxk\",\"org\":\"laulppg\",\"street\":[\"pnapnyiropuh\",\"igvpgylg\",\"git\",\"medjvcslynqwwncw\"],\"city\":\"hxg\",\"state\":\"rmgucnap\",\"postal\":\"eoellwptfdygp\",\"country\":\"b\",\"phone\":\"ceopzfqrhhuaopp\",\"fax\":\"qeqxo\",\"email\":\"dahzxctobg\"},\"registrant\":{\"name\":\"moizpos\",\"org\":\"grcfb\",\"street\":[\"mfqjhhkxbp\",\"jy\",\"jhxxjyn\",\"u\"],\"city\":\"vkr\",\"state\":\"wbxqzvszjfau\",\"postal\":\"fdxxivetvtcqaqtd\",\"country\":\"mcbxvwvxysl\",\"phone\":\"hsfxoblytkb\",\"fax\":\"pe\",\"email\":\"wfbkrvrns\"},\"tech\":{\"name\":\"q\",\"org\":\"hxcr\",\"street\":[\"ovasrruvwbhsqfsu\",\"cgjbirxbp\"],\"city\":\"srfbjfdtwss\",\"state\":\"ftpvjzbexil\",\"postal\":\"nfqqnvwp\",\"country\":\"taruoujmkcj\",\"phone\":\"qytjrybnwjewgd\",\"fax\":\"ervnaenqpehi\",\"email\":\"oygmift\"}},\"nameServers\":[\"d\",\"dslgnayqigynduh\"],\"statuses\":[\"qlkth\",\"maqolbgycduie\",\"tgccymvaolpss\"]}}")
            .toObject(EnrichmentDomainWhoisInner.class);
        Assertions.assertEquals("iwwroyqbexrmc", model.domain());
        Assertions.assertEquals("bycnojvkn", model.server());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-16T09:24:30Z"), model.created());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-23T12:33:46Z"), model.updated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T06:46Z"), model.expires());
        Assertions.assertEquals("apj", model.parsedWhois().registrar().name());
        Assertions.assertEquals("hpvgqz", model.parsedWhois().registrar().abuseContactEmail());
        Assertions.assertEquals("rvxdjzlmw", model.parsedWhois().registrar().abuseContactPhone());
        Assertions.assertEquals("kvugfhzovawjvzun", model.parsedWhois().registrar().ianaId());
        Assertions.assertEquals("thnnpr", model.parsedWhois().registrar().url());
        Assertions.assertEquals("i", model.parsedWhois().registrar().whoisServer());
        Assertions.assertEquals("pjzu", model.parsedWhois().contacts().admin().name());
        Assertions.assertEquals("jxdultskzbbtdzu", model.parsedWhois().contacts().admin().org());
        Assertions.assertEquals("ekg", model.parsedWhois().contacts().admin().street().get(0));
        Assertions.assertEquals("ozuhkfp", model.parsedWhois().contacts().admin().city());
        Assertions.assertEquals("jyofdxluusdtto", model.parsedWhois().contacts().admin().state());
        Assertions.assertEquals("aboekqv", model.parsedWhois().contacts().admin().postal());
        Assertions.assertEquals("lns", model.parsedWhois().contacts().admin().country());
        Assertions.assertEquals("bxwyjsflhhcaa", model.parsedWhois().contacts().admin().phone());
        Assertions.assertEquals("jixisxyawjoyaqcs", model.parsedWhois().contacts().admin().fax());
        Assertions.assertEquals("jpkiidzyexznelix", model.parsedWhois().contacts().admin().email());
        Assertions.assertEquals("ztfolhbnxk", model.parsedWhois().contacts().billing().name());
        Assertions.assertEquals("laulppg", model.parsedWhois().contacts().billing().org());
        Assertions.assertEquals("pnapnyiropuh", model.parsedWhois().contacts().billing().street().get(0));
        Assertions.assertEquals("hxg", model.parsedWhois().contacts().billing().city());
        Assertions.assertEquals("rmgucnap", model.parsedWhois().contacts().billing().state());
        Assertions.assertEquals("eoellwptfdygp", model.parsedWhois().contacts().billing().postal());
        Assertions.assertEquals("b", model.parsedWhois().contacts().billing().country());
        Assertions.assertEquals("ceopzfqrhhuaopp", model.parsedWhois().contacts().billing().phone());
        Assertions.assertEquals("qeqxo", model.parsedWhois().contacts().billing().fax());
        Assertions.assertEquals("dahzxctobg", model.parsedWhois().contacts().billing().email());
        Assertions.assertEquals("moizpos", model.parsedWhois().contacts().registrant().name());
        Assertions.assertEquals("grcfb", model.parsedWhois().contacts().registrant().org());
        Assertions.assertEquals("mfqjhhkxbp", model.parsedWhois().contacts().registrant().street().get(0));
        Assertions.assertEquals("vkr", model.parsedWhois().contacts().registrant().city());
        Assertions.assertEquals("wbxqzvszjfau", model.parsedWhois().contacts().registrant().state());
        Assertions.assertEquals("fdxxivetvtcqaqtd", model.parsedWhois().contacts().registrant().postal());
        Assertions.assertEquals("mcbxvwvxysl", model.parsedWhois().contacts().registrant().country());
        Assertions.assertEquals("hsfxoblytkb", model.parsedWhois().contacts().registrant().phone());
        Assertions.assertEquals("pe", model.parsedWhois().contacts().registrant().fax());
        Assertions.assertEquals("wfbkrvrns", model.parsedWhois().contacts().registrant().email());
        Assertions.assertEquals("q", model.parsedWhois().contacts().tech().name());
        Assertions.assertEquals("hxcr", model.parsedWhois().contacts().tech().org());
        Assertions.assertEquals("ovasrruvwbhsqfsu", model.parsedWhois().contacts().tech().street().get(0));
        Assertions.assertEquals("srfbjfdtwss", model.parsedWhois().contacts().tech().city());
        Assertions.assertEquals("ftpvjzbexil", model.parsedWhois().contacts().tech().state());
        Assertions.assertEquals("nfqqnvwp", model.parsedWhois().contacts().tech().postal());
        Assertions.assertEquals("taruoujmkcj", model.parsedWhois().contacts().tech().country());
        Assertions.assertEquals("qytjrybnwjewgd", model.parsedWhois().contacts().tech().phone());
        Assertions.assertEquals("ervnaenqpehi", model.parsedWhois().contacts().tech().fax());
        Assertions.assertEquals("oygmift", model.parsedWhois().contacts().tech().email());
        Assertions.assertEquals("d", model.parsedWhois().nameServers().get(0));
        Assertions.assertEquals("qlkth", model.parsedWhois().statuses().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnrichmentDomainWhoisInner model = new EnrichmentDomainWhoisInner().withDomain("iwwroyqbexrmc")
            .withServer("bycnojvkn")
            .withCreated(OffsetDateTime.parse("2021-07-16T09:24:30Z"))
            .withUpdated(OffsetDateTime.parse("2021-06-23T12:33:46Z"))
            .withExpires(OffsetDateTime.parse("2021-05-25T06:46Z"))
            .withParsedWhois(new EnrichmentDomainWhoisDetails()
                .withRegistrar(new EnrichmentDomainWhoisRegistrarDetails().withName("apj")
                    .withAbuseContactEmail("hpvgqz")
                    .withAbuseContactPhone("rvxdjzlmw")
                    .withIanaId("kvugfhzovawjvzun")
                    .withUrl("thnnpr")
                    .withWhoisServer("i"))
                .withContacts(new EnrichmentDomainWhoisContacts()
                    .withAdmin(new EnrichmentDomainWhoisContact().withName("pjzu")
                        .withOrg("jxdultskzbbtdzu")
                        .withStreet(Arrays.asList("ekg"))
                        .withCity("ozuhkfp")
                        .withState("jyofdxluusdtto")
                        .withPostal("aboekqv")
                        .withCountry("lns")
                        .withPhone("bxwyjsflhhcaa")
                        .withFax("jixisxyawjoyaqcs")
                        .withEmail("jpkiidzyexznelix"))
                    .withBilling(new EnrichmentDomainWhoisContact().withName("ztfolhbnxk")
                        .withOrg("laulppg")
                        .withStreet(Arrays.asList("pnapnyiropuh", "igvpgylg", "git", "medjvcslynqwwncw"))
                        .withCity("hxg")
                        .withState("rmgucnap")
                        .withPostal("eoellwptfdygp")
                        .withCountry("b")
                        .withPhone("ceopzfqrhhuaopp")
                        .withFax("qeqxo")
                        .withEmail("dahzxctobg"))
                    .withRegistrant(new EnrichmentDomainWhoisContact().withName("moizpos")
                        .withOrg("grcfb")
                        .withStreet(Arrays.asList("mfqjhhkxbp", "jy", "jhxxjyn", "u"))
                        .withCity("vkr")
                        .withState("wbxqzvszjfau")
                        .withPostal("fdxxivetvtcqaqtd")
                        .withCountry("mcbxvwvxysl")
                        .withPhone("hsfxoblytkb")
                        .withFax("pe")
                        .withEmail("wfbkrvrns"))
                    .withTech(new EnrichmentDomainWhoisContact().withName("q")
                        .withOrg("hxcr")
                        .withStreet(Arrays.asList("ovasrruvwbhsqfsu", "cgjbirxbp"))
                        .withCity("srfbjfdtwss")
                        .withState("ftpvjzbexil")
                        .withPostal("nfqqnvwp")
                        .withCountry("taruoujmkcj")
                        .withPhone("qytjrybnwjewgd")
                        .withFax("ervnaenqpehi")
                        .withEmail("oygmift")))
                .withNameServers(Arrays.asList("d", "dslgnayqigynduh"))
                .withStatuses(Arrays.asList("qlkth", "maqolbgycduie", "tgccymvaolpss")));
        model = BinaryData.fromObject(model).toObject(EnrichmentDomainWhoisInner.class);
        Assertions.assertEquals("iwwroyqbexrmc", model.domain());
        Assertions.assertEquals("bycnojvkn", model.server());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-16T09:24:30Z"), model.created());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-23T12:33:46Z"), model.updated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T06:46Z"), model.expires());
        Assertions.assertEquals("apj", model.parsedWhois().registrar().name());
        Assertions.assertEquals("hpvgqz", model.parsedWhois().registrar().abuseContactEmail());
        Assertions.assertEquals("rvxdjzlmw", model.parsedWhois().registrar().abuseContactPhone());
        Assertions.assertEquals("kvugfhzovawjvzun", model.parsedWhois().registrar().ianaId());
        Assertions.assertEquals("thnnpr", model.parsedWhois().registrar().url());
        Assertions.assertEquals("i", model.parsedWhois().registrar().whoisServer());
        Assertions.assertEquals("pjzu", model.parsedWhois().contacts().admin().name());
        Assertions.assertEquals("jxdultskzbbtdzu", model.parsedWhois().contacts().admin().org());
        Assertions.assertEquals("ekg", model.parsedWhois().contacts().admin().street().get(0));
        Assertions.assertEquals("ozuhkfp", model.parsedWhois().contacts().admin().city());
        Assertions.assertEquals("jyofdxluusdtto", model.parsedWhois().contacts().admin().state());
        Assertions.assertEquals("aboekqv", model.parsedWhois().contacts().admin().postal());
        Assertions.assertEquals("lns", model.parsedWhois().contacts().admin().country());
        Assertions.assertEquals("bxwyjsflhhcaa", model.parsedWhois().contacts().admin().phone());
        Assertions.assertEquals("jixisxyawjoyaqcs", model.parsedWhois().contacts().admin().fax());
        Assertions.assertEquals("jpkiidzyexznelix", model.parsedWhois().contacts().admin().email());
        Assertions.assertEquals("ztfolhbnxk", model.parsedWhois().contacts().billing().name());
        Assertions.assertEquals("laulppg", model.parsedWhois().contacts().billing().org());
        Assertions.assertEquals("pnapnyiropuh", model.parsedWhois().contacts().billing().street().get(0));
        Assertions.assertEquals("hxg", model.parsedWhois().contacts().billing().city());
        Assertions.assertEquals("rmgucnap", model.parsedWhois().contacts().billing().state());
        Assertions.assertEquals("eoellwptfdygp", model.parsedWhois().contacts().billing().postal());
        Assertions.assertEquals("b", model.parsedWhois().contacts().billing().country());
        Assertions.assertEquals("ceopzfqrhhuaopp", model.parsedWhois().contacts().billing().phone());
        Assertions.assertEquals("qeqxo", model.parsedWhois().contacts().billing().fax());
        Assertions.assertEquals("dahzxctobg", model.parsedWhois().contacts().billing().email());
        Assertions.assertEquals("moizpos", model.parsedWhois().contacts().registrant().name());
        Assertions.assertEquals("grcfb", model.parsedWhois().contacts().registrant().org());
        Assertions.assertEquals("mfqjhhkxbp", model.parsedWhois().contacts().registrant().street().get(0));
        Assertions.assertEquals("vkr", model.parsedWhois().contacts().registrant().city());
        Assertions.assertEquals("wbxqzvszjfau", model.parsedWhois().contacts().registrant().state());
        Assertions.assertEquals("fdxxivetvtcqaqtd", model.parsedWhois().contacts().registrant().postal());
        Assertions.assertEquals("mcbxvwvxysl", model.parsedWhois().contacts().registrant().country());
        Assertions.assertEquals("hsfxoblytkb", model.parsedWhois().contacts().registrant().phone());
        Assertions.assertEquals("pe", model.parsedWhois().contacts().registrant().fax());
        Assertions.assertEquals("wfbkrvrns", model.parsedWhois().contacts().registrant().email());
        Assertions.assertEquals("q", model.parsedWhois().contacts().tech().name());
        Assertions.assertEquals("hxcr", model.parsedWhois().contacts().tech().org());
        Assertions.assertEquals("ovasrruvwbhsqfsu", model.parsedWhois().contacts().tech().street().get(0));
        Assertions.assertEquals("srfbjfdtwss", model.parsedWhois().contacts().tech().city());
        Assertions.assertEquals("ftpvjzbexil", model.parsedWhois().contacts().tech().state());
        Assertions.assertEquals("nfqqnvwp", model.parsedWhois().contacts().tech().postal());
        Assertions.assertEquals("taruoujmkcj", model.parsedWhois().contacts().tech().country());
        Assertions.assertEquals("qytjrybnwjewgd", model.parsedWhois().contacts().tech().phone());
        Assertions.assertEquals("ervnaenqpehi", model.parsedWhois().contacts().tech().fax());
        Assertions.assertEquals("oygmift", model.parsedWhois().contacts().tech().email());
        Assertions.assertEquals("d", model.parsedWhois().nameServers().get(0));
        Assertions.assertEquals("qlkth", model.parsedWhois().statuses().get(0));
    }
}
