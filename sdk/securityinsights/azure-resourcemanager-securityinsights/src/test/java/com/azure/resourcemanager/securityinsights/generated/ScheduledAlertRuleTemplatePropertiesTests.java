// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.ScheduledAlertRuleTemplateProperties;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleTemplateProperties model = BinaryData.fromString(
            "{\"alertRulesCreatedByTemplateCount\":1428181970,\"createdDateUTC\":\"2021-06-30T10:02:52Z\",\"lastUpdatedDateUTC\":\"2021-01-29T18:46:46Z\",\"description\":\"hzbezkgi\",\"displayName\":\"idxas\",\"requiredDataConnectors\":[{\"connectorId\":\"yvvjskgfmo\",\"dataTypes\":[\"hpqgatjeaahhvj\"]},{\"connectorId\":\"na\",\"dataTypes\":[\"bbjjidjksyxk\",\"xvxevblbjednljla\",\"euaulxu\"]},{\"connectorId\":\"mjbnk\",\"dataTypes\":[\"ynenlsvxeizz\",\"wklnsrmffeyc\"]}],\"status\":\"NotAvailable\",\"query\":\"piymerteea\",\"queryFrequency\":\"PT193H10M30S\",\"queryPeriod\":\"PT111H41M8S\",\"severity\":\"High\",\"triggerOperator\":\"NotEqual\",\"triggerThreshold\":416757302,\"tactics\":[\"Execution\",\"Exfiltration\",\"DefenseEvasion\",\"Discovery\"],\"techniques\":[\"bmxva\",\"refdee\",\"vecuijpx\"],\"version\":\"s\",\"eventGroupingSettings\":{\"aggregationKind\":\"AlertPerResult\"},\"customDetails\":{\"vit\":\"jwsawddjibab\",\"ecdmdqbwpy\":\"tvtzeexavoxtfg\",\"gsfjac\":\"q\",\"d\":\"slhhxudbxv\"},\"entityMappings\":[{\"entityType\":\"RegistryKey\",\"fieldMappings\":[{\"identifier\":\"hzmme\",\"columnName\":\"kdlpa\"}]},{\"entityType\":\"RegistryValue\",\"fieldMappings\":[{\"identifier\":\"a\",\"columnName\":\"cfxwmdbox\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"sftufqobrjlna\",\"alertDescriptionFormat\":\"cc\",\"alertTacticsColumnName\":\"nhxk\",\"alertSeverityColumnName\":\"v\"}}")
            .toObject(ScheduledAlertRuleTemplateProperties.class);
        Assertions.assertEquals(1428181970, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("hzbezkgi", model.description());
        Assertions.assertEquals("idxas", model.displayName());
        Assertions.assertEquals("yvvjskgfmo", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("hpqgatjeaahhvj", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.NOT_AVAILABLE, model.status());
        Assertions.assertEquals("piymerteea", model.query());
        Assertions.assertEquals(Duration.parse("PT193H10M30S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT111H41M8S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.HIGH, model.severity());
        Assertions.assertEquals(TriggerOperator.NOT_EQUAL, model.triggerOperator());
        Assertions.assertEquals(416757302, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.EXECUTION, model.tactics().get(0));
        Assertions.assertEquals("bmxva", model.techniques().get(0));
        Assertions.assertEquals("s", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("jwsawddjibab", model.customDetails().get("vit"));
        Assertions.assertEquals(EntityMappingType.REGISTRY_KEY, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("hzmme", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("kdlpa", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("sftufqobrjlna", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("cc", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("nhxk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("v", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleTemplateProperties model
            = new ScheduledAlertRuleTemplateProperties().withAlertRulesCreatedByTemplateCount(1428181970)
                .withDescription("hzbezkgi")
                .withDisplayName("idxas")
                .withRequiredDataConnectors(Arrays.asList(
                    new AlertRuleTemplateDataSource().withConnectorId("yvvjskgfmo")
                        .withDataTypes(Arrays.asList("hpqgatjeaahhvj")),
                    new AlertRuleTemplateDataSource().withConnectorId("na")
                        .withDataTypes(Arrays.asList("bbjjidjksyxk", "xvxevblbjednljla", "euaulxu")),
                    new AlertRuleTemplateDataSource().withConnectorId("mjbnk")
                        .withDataTypes(Arrays.asList("ynenlsvxeizz", "wklnsrmffeyc"))))
                .withStatus(TemplateStatus.NOT_AVAILABLE)
                .withQuery("piymerteea")
                .withQueryFrequency(Duration.parse("PT193H10M30S"))
                .withQueryPeriod(Duration.parse("PT111H41M8S"))
                .withSeverity(AlertSeverity.HIGH)
                .withTriggerOperator(TriggerOperator.NOT_EQUAL)
                .withTriggerThreshold(416757302)
                .withTactics(Arrays.asList(AttackTactic.EXECUTION, AttackTactic.EXFILTRATION,
                    AttackTactic.DEFENSE_EVASION, AttackTactic.DISCOVERY))
                .withTechniques(Arrays.asList("bmxva", "refdee", "vecuijpx"))
                .withVersion("s")
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.ALERT_PER_RESULT))
                .withCustomDetails(
                    mapOf("vit", "jwsawddjibab", "ecdmdqbwpy", "tvtzeexavoxtfg", "gsfjac", "q", "d", "slhhxudbxv"))
                .withEntityMappings(Arrays.asList(
                    new EntityMapping().withEntityType(EntityMappingType.REGISTRY_KEY)
                        .withFieldMappings(
                            Arrays.asList(new FieldMapping().withIdentifier("hzmme").withColumnName("kdlpa"))),
                    new EntityMapping().withEntityType(EntityMappingType.REGISTRY_VALUE)
                        .withFieldMappings(
                            Arrays.asList(new FieldMapping().withIdentifier("a").withColumnName("cfxwmdbox")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("sftufqobrjlna")
                    .withAlertDescriptionFormat("cc")
                    .withAlertTacticsColumnName("nhxk")
                    .withAlertSeverityColumnName("v"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleTemplateProperties.class);
        Assertions.assertEquals(1428181970, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("hzbezkgi", model.description());
        Assertions.assertEquals("idxas", model.displayName());
        Assertions.assertEquals("yvvjskgfmo", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("hpqgatjeaahhvj", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.NOT_AVAILABLE, model.status());
        Assertions.assertEquals("piymerteea", model.query());
        Assertions.assertEquals(Duration.parse("PT193H10M30S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT111H41M8S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.HIGH, model.severity());
        Assertions.assertEquals(TriggerOperator.NOT_EQUAL, model.triggerOperator());
        Assertions.assertEquals(416757302, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.EXECUTION, model.tactics().get(0));
        Assertions.assertEquals("bmxva", model.techniques().get(0));
        Assertions.assertEquals("s", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("jwsawddjibab", model.customDetails().get("vit"));
        Assertions.assertEquals(EntityMappingType.REGISTRY_KEY, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("hzmme", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("kdlpa", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("sftufqobrjlna", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("cc", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("nhxk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("v", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
