// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.ScheduledAlertRuleTemplateProperties;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleTemplateProperties model = BinaryData.fromString(
            "{\"alertRulesCreatedByTemplateCount\":1282691385,\"createdDateUTC\":\"2021-03-03T15:41:10Z\",\"lastUpdatedDateUTC\":\"2021-10-04T08:02:18Z\",\"description\":\"zzqrhmngqbedy\",\"displayName\":\"s\",\"requiredDataConnectors\":[{\"connectorId\":\"ykdidj\",\"dataTypes\":[\"rmpwctofld\",\"eacdhztx\",\"brfgdrwji\",\"ewhfjsrwqrxetf\"]},{\"connectorId\":\"wvrrmdqn\",\"dataTypes\":[\"nawthvm\",\"xgnuyeamcmhu\"]},{\"connectorId\":\"jecehokwc\",\"dataTypes\":[\"wloesqrggvrbn\",\"rukoi\"]},{\"connectorId\":\"ciduwjle\",\"dataTypes\":[\"lh\",\"yxpzruzythqk\",\"whbgxvellvul\",\"xdm\"]}],\"status\":\"Available\",\"query\":\"ujdtvmclyymffh\",\"queryFrequency\":\"PT187H36M35S\",\"queryPeriod\":\"PT122H52M5S\",\"severity\":\"High\",\"triggerOperator\":\"LessThan\",\"triggerThreshold\":1116641423,\"tactics\":[\"LateralMovement\",\"PreAttack\"],\"techniques\":[\"mzjqrbr\",\"vnmdyfoeboj\",\"jpp\",\"laohoqkp\"],\"version\":\"nqjilaywk\",\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"customDetails\":{\"lnkkbjpjvlywltmf\":\"yrilmhxdqaolf\",\"fnqzocr\":\"obbjwhlwy\"},\"entityMappings\":[{\"entityType\":\"CloudApplication\",\"fieldMappings\":[{\"identifier\":\"tgxdncaqt\",\"columnName\":\"ekoifuvnyttzgi\"},{\"identifier\":\"yri\",\"columnName\":\"gm\"}]},{\"entityType\":\"MailCluster\",\"fieldMappings\":[{\"identifier\":\"txnr\",\"columnName\":\"kndrndpgfjo\"},{\"identifier\":\"daqotwfh\",\"columnName\":\"xwgsa\"},{\"identifier\":\"c\",\"columnName\":\"owzafczu\"},{\"identifier\":\"ljcirvpefycdvei\",\"columnName\":\"tjnsx\"}]},{\"entityType\":\"SecurityGroup\",\"fieldMappings\":[{\"identifier\":\"jhwjuyxx\",\"columnName\":\"qvmvuaytuadxkxe\"},{\"identifier\":\"wp\",\"columnName\":\"ghyksarcdrnxs\"},{\"identifier\":\"vlzladl\",\"columnName\":\"kpbqhvfdqqjw\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"wzdanojisgglmvo\",\"alertDescriptionFormat\":\"tuz\",\"alertTacticsColumnName\":\"ctibpvbka\",\"alertSeverityColumnName\":\"xsmzygdf\"}}")
            .toObject(ScheduledAlertRuleTemplateProperties.class);
        Assertions.assertEquals(1282691385, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("zzqrhmngqbedy", model.description());
        Assertions.assertEquals("s", model.displayName());
        Assertions.assertEquals("ykdidj", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("rmpwctofld", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.AVAILABLE, model.status());
        Assertions.assertEquals("ujdtvmclyymffh", model.query());
        Assertions.assertEquals(Duration.parse("PT187H36M35S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT122H52M5S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.HIGH, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(1116641423, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.LATERAL_MOVEMENT, model.tactics().get(0));
        Assertions.assertEquals("mzjqrbr", model.techniques().get(0));
        Assertions.assertEquals("nqjilaywk", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("yrilmhxdqaolf", model.customDetails().get("lnkkbjpjvlywltmf"));
        Assertions.assertEquals(EntityMappingType.CLOUD_APPLICATION, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("tgxdncaqt", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("ekoifuvnyttzgi", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("wzdanojisgglmvo", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("tuz", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("ctibpvbka", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("xsmzygdf", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleTemplateProperties model
            = new ScheduledAlertRuleTemplateProperties().withAlertRulesCreatedByTemplateCount(1282691385)
                .withDescription("zzqrhmngqbedy")
                .withDisplayName("s")
                .withRequiredDataConnectors(Arrays.asList(
                    new AlertRuleTemplateDataSource().withConnectorId("ykdidj")
                        .withDataTypes(Arrays.asList("rmpwctofld", "eacdhztx", "brfgdrwji", "ewhfjsrwqrxetf")),
                    new AlertRuleTemplateDataSource().withConnectorId("wvrrmdqn")
                        .withDataTypes(Arrays.asList("nawthvm", "xgnuyeamcmhu")),
                    new AlertRuleTemplateDataSource().withConnectorId("jecehokwc")
                        .withDataTypes(Arrays.asList("wloesqrggvrbn", "rukoi")),
                    new AlertRuleTemplateDataSource().withConnectorId("ciduwjle")
                        .withDataTypes(Arrays.asList("lh", "yxpzruzythqk", "whbgxvellvul", "xdm"))))
                .withStatus(TemplateStatus.AVAILABLE)
                .withQuery("ujdtvmclyymffh")
                .withQueryFrequency(Duration.parse("PT187H36M35S"))
                .withQueryPeriod(Duration.parse("PT122H52M5S"))
                .withSeverity(AlertSeverity.HIGH)
                .withTriggerOperator(TriggerOperator.LESS_THAN)
                .withTriggerThreshold(1116641423)
                .withTactics(Arrays.asList(AttackTactic.LATERAL_MOVEMENT, AttackTactic.PRE_ATTACK))
                .withTechniques(Arrays.asList("mzjqrbr", "vnmdyfoeboj", "jpp", "laohoqkp"))
                .withVersion("nqjilaywk")
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT))
                .withCustomDetails(mapOf("lnkkbjpjvlywltmf", "yrilmhxdqaolf", "fnqzocr", "obbjwhlwy"))
                .withEntityMappings(Arrays.asList(
                    new EntityMapping().withEntityType(EntityMappingType.CLOUD_APPLICATION)
                        .withFieldMappings(Arrays.asList(
                            new FieldMapping().withIdentifier("tgxdncaqt").withColumnName("ekoifuvnyttzgi"),
                            new FieldMapping().withIdentifier("yri").withColumnName("gm"))),
                    new EntityMapping().withEntityType(EntityMappingType.MAIL_CLUSTER)
                        .withFieldMappings(
                            Arrays.asList(new FieldMapping().withIdentifier("txnr").withColumnName("kndrndpgfjo"),
                                new FieldMapping().withIdentifier("daqotwfh").withColumnName("xwgsa"),
                                new FieldMapping().withIdentifier("c").withColumnName("owzafczu"),
                                new FieldMapping().withIdentifier("ljcirvpefycdvei").withColumnName("tjnsx"))),
                    new EntityMapping().withEntityType(EntityMappingType.SECURITY_GROUP)
                        .withFieldMappings(Arrays.asList(
                            new FieldMapping().withIdentifier("jhwjuyxx").withColumnName("qvmvuaytuadxkxe"),
                            new FieldMapping().withIdentifier("wp").withColumnName("ghyksarcdrnxs"),
                            new FieldMapping().withIdentifier("vlzladl").withColumnName("kpbqhvfdqqjw")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("wzdanojisgglmvo")
                    .withAlertDescriptionFormat("tuz")
                    .withAlertTacticsColumnName("ctibpvbka")
                    .withAlertSeverityColumnName("xsmzygdf"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleTemplateProperties.class);
        Assertions.assertEquals(1282691385, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("zzqrhmngqbedy", model.description());
        Assertions.assertEquals("s", model.displayName());
        Assertions.assertEquals("ykdidj", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("rmpwctofld", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.AVAILABLE, model.status());
        Assertions.assertEquals("ujdtvmclyymffh", model.query());
        Assertions.assertEquals(Duration.parse("PT187H36M35S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT122H52M5S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.HIGH, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(1116641423, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.LATERAL_MOVEMENT, model.tactics().get(0));
        Assertions.assertEquals("mzjqrbr", model.techniques().get(0));
        Assertions.assertEquals("nqjilaywk", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("yrilmhxdqaolf", model.customDetails().get("lnkkbjpjvlywltmf"));
        Assertions.assertEquals(EntityMappingType.CLOUD_APPLICATION, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("tgxdncaqt", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("ekoifuvnyttzgi", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("wzdanojisgglmvo", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("tuz", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("ctibpvbka", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("xsmzygdf", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
