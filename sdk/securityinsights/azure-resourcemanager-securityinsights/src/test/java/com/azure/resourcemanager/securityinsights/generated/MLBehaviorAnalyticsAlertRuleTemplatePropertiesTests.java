// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.MLBehaviorAnalyticsAlertRuleTemplateProperties;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MLBehaviorAnalyticsAlertRuleTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MLBehaviorAnalyticsAlertRuleTemplateProperties model = BinaryData.fromString(
            "{\"severity\":\"Medium\",\"tactics\":[\"InhibitResponseFunction\"],\"techniques\":[\"ybfueqfrojsydgr\",\"ydkygywezskieca\"],\"alertRulesCreatedByTemplateCount\":1959769653,\"lastUpdatedDateUTC\":\"2021-03-02T16:54:37Z\",\"createdDateUTC\":\"2021-10-25T10:39:23Z\",\"description\":\"qv\",\"displayName\":\"makli\",\"requiredDataConnectors\":[{\"connectorId\":\"hyhxa\",\"dataTypes\":[\"xawoijpodtblxp\"]},{\"connectorId\":\"wjdjodqhykin\",\"dataTypes\":[\"emehllizh\"]}],\"status\":\"Available\"}")
            .toObject(MLBehaviorAnalyticsAlertRuleTemplateProperties.class);
        Assertions.assertEquals(1959769653, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("qv", model.description());
        Assertions.assertEquals("makli", model.displayName());
        Assertions.assertEquals("hyhxa", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("xawoijpodtblxp", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.AVAILABLE, model.status());
        Assertions.assertEquals(AttackTactic.INHIBIT_RESPONSE_FUNCTION, model.tactics().get(0));
        Assertions.assertEquals("ybfueqfrojsydgr", model.techniques().get(0));
        Assertions.assertEquals(AlertSeverity.MEDIUM, model.severity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MLBehaviorAnalyticsAlertRuleTemplateProperties model
            = new MLBehaviorAnalyticsAlertRuleTemplateProperties().withAlertRulesCreatedByTemplateCount(1959769653)
                .withDescription("qv")
                .withDisplayName("makli")
                .withRequiredDataConnectors(Arrays.asList(
                    new AlertRuleTemplateDataSource().withConnectorId("hyhxa")
                        .withDataTypes(Arrays.asList("xawoijpodtblxp")),
                    new AlertRuleTemplateDataSource().withConnectorId("wjdjodqhykin")
                        .withDataTypes(Arrays.asList("emehllizh"))))
                .withStatus(TemplateStatus.AVAILABLE)
                .withTactics(Arrays.asList(AttackTactic.INHIBIT_RESPONSE_FUNCTION))
                .withTechniques(Arrays.asList("ybfueqfrojsydgr", "ydkygywezskieca"))
                .withSeverity(AlertSeverity.MEDIUM);
        model = BinaryData.fromObject(model).toObject(MLBehaviorAnalyticsAlertRuleTemplateProperties.class);
        Assertions.assertEquals(1959769653, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("qv", model.description());
        Assertions.assertEquals("makli", model.displayName());
        Assertions.assertEquals("hyhxa", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("xawoijpodtblxp", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.AVAILABLE, model.status());
        Assertions.assertEquals(AttackTactic.INHIBIT_RESPONSE_FUNCTION, model.tactics().get(0));
        Assertions.assertEquals("ybfueqfrojsydgr", model.techniques().get(0));
        Assertions.assertEquals(AlertSeverity.MEDIUM, model.severity());
    }
}
