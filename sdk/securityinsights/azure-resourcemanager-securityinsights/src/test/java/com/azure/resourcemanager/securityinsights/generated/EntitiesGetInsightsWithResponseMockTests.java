// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.EntityGetInsightsParameters;
import com.azure.resourcemanager.securityinsights.models.EntityGetInsightsResponse;
import com.azure.resourcemanager.securityinsights.models.GetInsightsError;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EntitiesGetInsightsWithResponseMockTests {
    @Test
    public void testGetInsightsWithResponse() throws Exception {
        String responseStr
            = "{\"metaData\":{\"totalCount\":170747817,\"errors\":[{\"kind\":\"Insight\",\"queryId\":\"rgcjfaiwulpj\",\"errorMessage\":\"akrxi\"},{\"kind\":\"Insight\",\"queryId\":\"fforxsqtzngxbs\",\"errorMessage\":\"lewguxcmmhipbvs\"},{\"kind\":\"Insight\",\"queryId\":\"tlynkwfsaangfg\",\"errorMessage\":\"mcvmhidyliuajkln\"}]},\"value\":[{\"queryId\":\"nxq\",\"queryTimeInterval\":{\"startTime\":\"2021-01-13T22:57:33Z\",\"endTime\":\"2021-02-15T22:20:09Z\"},\"tableQueryResults\":{\"columns\":[{},{},{}],\"rows\":[[\"zngdrzige\",\"wsadsqyu\"],[\"khwqdmohheuyuu\",\"xmyevyigdeipnfi\",\"ejwli\"],[\"cndjzwhajo\",\"apqokhdyn\",\"radxsewbem\"],[\"apmqnmelyksygihi\",\"lmslnunkqvzlbbb\",\"jd\",\"xquawexi\"]]},\"chartQueryResults\":[{\"columns\":[{}],\"rows\":[[],[],[],[]]},{\"columns\":[{},{},{}],\"rows\":[[],[]]}]},{\"queryId\":\"nbmajvvyxtvvx\",\"queryTimeInterval\":{\"startTime\":\"2021-05-16T04:03:30Z\",\"endTime\":\"2020-12-25T05:58:16Z\"},\"tableQueryResults\":{\"columns\":[{}],\"rows\":[[\"mlngfwhrm\"],[\"a\",\"nujmwxnrzb\",\"x\"],[\"hh\",\"mfndcbsyhludzj\",\"kovohwvpr\",\"fdvtdurmdt\"],[\"ntjna\",\"fhvqiias\"]]},\"chartQueryResults\":[{\"columns\":[{},{}],\"rows\":[[]]}]}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        EntityGetInsightsResponse response = manager.entities()
            .getInsightsWithResponse("ysodcikgx", "k", "zfzdjekeb",
                new EntityGetInsightsParameters().withStartTime(OffsetDateTime.parse("2021-11-23T22:41:58Z"))
                    .withEndTime(OffsetDateTime.parse("2021-05-10T14:17:34Z"))
                    .withAddDefaultExtendedTimeRange(true)
                    .withInsightQueryIds(Arrays.asList(UUID.fromString("455bd4f4-e7cc-4457-8fde-632b82ca057a"),
                        UUID.fromString("1171bb89-4d95-4491-95d6-ba43af3a2a95"))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(170747817, response.metadata().totalCount());
        Assertions.assertEquals(GetInsightsError.INSIGHT, response.metadata().errors().get(0).kind());
        Assertions.assertEquals("rgcjfaiwulpj", response.metadata().errors().get(0).queryId());
        Assertions.assertEquals("akrxi", response.metadata().errors().get(0).errorMessage());
        Assertions.assertEquals("nxq", response.value().get(0).queryId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T22:57:33Z"),
            response.value().get(0).queryTimeInterval().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-15T22:20:09Z"),
            response.value().get(0).queryTimeInterval().endTime());
        Assertions.assertEquals("zngdrzige", response.value().get(0).tableQueryResults().rows().get(0).get(0));
    }
}
