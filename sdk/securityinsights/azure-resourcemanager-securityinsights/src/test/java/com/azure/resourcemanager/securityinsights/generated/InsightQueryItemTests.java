// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.EntityQueryItemPropertiesDataTypesItem;
import com.azure.resourcemanager.securityinsights.models.EntityType;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItem;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemProperties;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesAdditionalQuery;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesDefaultTimeRange;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesReferenceTimeRange;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQuery;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem;
import com.azure.resourcemanager.securityinsights.models.OutputType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InsightQueryItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InsightQueryItem model = BinaryData.fromString(
            "{\"kind\":\"Insight\",\"properties\":{\"displayName\":\"cpihtd\",\"description\":\"wjekptycaydbj\",\"baseQuery\":\"qy\",\"tableQuery\":{\"columnsDefinitions\":[{\"header\":\"zhmhsur\",\"outputType\":\"Date\",\"supportDeepLink\":false},{\"header\":\"mmzp\",\"outputType\":\"String\",\"supportDeepLink\":true},{\"header\":\"awi\",\"outputType\":\"String\",\"supportDeepLink\":true}],\"queriesDefinitions\":[{\"filter\":\"vjhvvlr\",\"summarize\":\"hewjjmajnkdflqio\",\"project\":\"waeqkzfzqxjosho\",\"linkColumnsDefinitions\":[{},{}]},{\"filter\":\"ryegp\",\"summarize\":\"xrmexznlw\",\"project\":\"fokxk\",\"linkColumnsDefinitions\":[{}]},{\"filter\":\"erufgjblcdrmy\",\"summarize\":\"emftzgyyky\",\"project\":\"ugekdfqn\",\"linkColumnsDefinitions\":[{}]}]},\"chartQuery\":\"datado\",\"additionalQuery\":{\"query\":\"zfjjnnuxxrkk\",\"text\":\"mnulwe\"},\"defaultTimeRange\":{\"beforeRange\":\"cifrhjulrsulwzpf\",\"afterRange\":\"snawmhhgzotfri\"},\"referenceTimeRange\":{\"beforeRange\":\"koekvzwxx\"},\"dataTypes\":[{\"dataType\":\"ghctxbxmolpcqyde\"},{\"dataType\":\"vskiczd\"},{\"dataType\":\"jei\"}],\"inputEntityType\":\"SecurityGroup\",\"requiredInputFieldsSets\":[[\"boohxbms\",\"ycqsxr\",\"d\"],[\"wuyqaeo\",\"pjhgejkb\"],[\"hdaurghooxaexb\",\"hxjxjoezlqxrkdkn\"]],\"entitiesFilter\":\"databekt\"},\"id\":\"o\",\"name\":\"m\",\"type\":\"amicbigwcdgz\"}")
            .toObject(InsightQueryItem.class);
        Assertions.assertEquals("m", model.name());
        Assertions.assertEquals("amicbigwcdgz", model.type());
        Assertions.assertEquals("ghctxbxmolpcqyde", model.properties().dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.SECURITY_GROUP, model.properties().inputEntityType());
        Assertions.assertEquals("boohxbms", model.properties().requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("cpihtd", model.properties().displayName());
        Assertions.assertEquals("wjekptycaydbj", model.properties().description());
        Assertions.assertEquals("qy", model.properties().baseQuery());
        Assertions.assertEquals("zhmhsur",
            model.properties().tableQuery().columnsDefinitions().get(0).headerProperty());
        Assertions.assertEquals(OutputType.DATE,
            model.properties().tableQuery().columnsDefinitions().get(0).outputType());
        Assertions.assertEquals(false, model.properties().tableQuery().columnsDefinitions().get(0).supportDeepLink());
        Assertions.assertEquals("vjhvvlr", model.properties().tableQuery().queriesDefinitions().get(0).filter());
        Assertions.assertEquals("hewjjmajnkdflqio",
            model.properties().tableQuery().queriesDefinitions().get(0).summarize());
        Assertions.assertEquals("waeqkzfzqxjosho",
            model.properties().tableQuery().queriesDefinitions().get(0).project());
        Assertions.assertEquals("zfjjnnuxxrkk", model.properties().additionalQuery().query());
        Assertions.assertEquals("mnulwe", model.properties().additionalQuery().text());
        Assertions.assertEquals("cifrhjulrsulwzpf", model.properties().defaultTimeRange().beforeRange());
        Assertions.assertEquals("snawmhhgzotfri", model.properties().defaultTimeRange().afterRange());
        Assertions.assertEquals("koekvzwxx", model.properties().referenceTimeRange().beforeRange());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InsightQueryItem model = new InsightQueryItem().withName("m")
            .withType("amicbigwcdgz")
            .withProperties(new InsightQueryItemProperties()
                .withDataTypes(
                    Arrays.asList(new EntityQueryItemPropertiesDataTypesItem().withDataType("ghctxbxmolpcqyde"),
                        new EntityQueryItemPropertiesDataTypesItem().withDataType("vskiczd"),
                        new EntityQueryItemPropertiesDataTypesItem().withDataType("jei")))
                .withInputEntityType(EntityType.SECURITY_GROUP)
                .withRequiredInputFieldsSets(Arrays.asList(Arrays.asList("boohxbms", "ycqsxr", "d"),
                    Arrays.asList("wuyqaeo", "pjhgejkb"), Arrays.asList("hdaurghooxaexb", "hxjxjoezlqxrkdkn")))
                .withEntitiesFilter("databekt")
                .withDisplayName("cpihtd")
                .withDescription("wjekptycaydbj")
                .withBaseQuery("qy")
                .withTableQuery(new InsightQueryItemPropertiesTableQuery()
                    .withColumnsDefinitions(Arrays.asList(
                        new InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem().withHeaderProperty("zhmhsur")
                            .withOutputType(OutputType.DATE)
                            .withSupportDeepLink(false),
                        new InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem().withHeaderProperty("mmzp")
                            .withOutputType(OutputType.STRING)
                            .withSupportDeepLink(true),
                        new InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem().withHeaderProperty("awi")
                            .withOutputType(OutputType.STRING)
                            .withSupportDeepLink(true)))
                    .withQueriesDefinitions(Arrays.asList(
                        new InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem().withFilter("vjhvvlr")
                            .withSummarize("hewjjmajnkdflqio")
                            .withProject("waeqkzfzqxjosho")
                            .withLinkColumnsDefinitions(Arrays.asList(
                                new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem(),
                                new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem())),
                        new InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem().withFilter("ryegp")
                            .withSummarize("xrmexznlw")
                            .withProject("fokxk")
                            .withLinkColumnsDefinitions(Arrays.asList(
                                new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem())),
                        new InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem().withFilter("erufgjblcdrmy")
                            .withSummarize("emftzgyyky")
                            .withProject("ugekdfqn")
                            .withLinkColumnsDefinitions(Arrays.asList(
                                new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem())))))
                .withChartQuery("datado")
                .withAdditionalQuery(
                    new InsightQueryItemPropertiesAdditionalQuery().withQuery("zfjjnnuxxrkk").withText("mnulwe"))
                .withDefaultTimeRange(
                    new InsightQueryItemPropertiesDefaultTimeRange().withBeforeRange("cifrhjulrsulwzpf")
                        .withAfterRange("snawmhhgzotfri"))
                .withReferenceTimeRange(
                    new InsightQueryItemPropertiesReferenceTimeRange().withBeforeRange("koekvzwxx")));
        model = BinaryData.fromObject(model).toObject(InsightQueryItem.class);
        Assertions.assertEquals("m", model.name());
        Assertions.assertEquals("amicbigwcdgz", model.type());
        Assertions.assertEquals("ghctxbxmolpcqyde", model.properties().dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.SECURITY_GROUP, model.properties().inputEntityType());
        Assertions.assertEquals("boohxbms", model.properties().requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("cpihtd", model.properties().displayName());
        Assertions.assertEquals("wjekptycaydbj", model.properties().description());
        Assertions.assertEquals("qy", model.properties().baseQuery());
        Assertions.assertEquals("zhmhsur",
            model.properties().tableQuery().columnsDefinitions().get(0).headerProperty());
        Assertions.assertEquals(OutputType.DATE,
            model.properties().tableQuery().columnsDefinitions().get(0).outputType());
        Assertions.assertEquals(false, model.properties().tableQuery().columnsDefinitions().get(0).supportDeepLink());
        Assertions.assertEquals("vjhvvlr", model.properties().tableQuery().queriesDefinitions().get(0).filter());
        Assertions.assertEquals("hewjjmajnkdflqio",
            model.properties().tableQuery().queriesDefinitions().get(0).summarize());
        Assertions.assertEquals("waeqkzfzqxjosho",
            model.properties().tableQuery().queriesDefinitions().get(0).project());
        Assertions.assertEquals("zfjjnnuxxrkk", model.properties().additionalQuery().query());
        Assertions.assertEquals("mnulwe", model.properties().additionalQuery().text());
        Assertions.assertEquals("cifrhjulrsulwzpf", model.properties().defaultTimeRange().beforeRange());
        Assertions.assertEquals("snawmhhgzotfri", model.properties().defaultTimeRange().afterRange());
        Assertions.assertEquals("koekvzwxx", model.properties().referenceTimeRange().beforeRange());
    }
}
