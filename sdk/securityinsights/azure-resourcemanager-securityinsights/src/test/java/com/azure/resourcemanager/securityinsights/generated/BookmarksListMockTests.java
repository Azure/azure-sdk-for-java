// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.Bookmark;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BookmarksListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"created\":\"2021-11-16T18:34:33Z\",\"createdBy\":{\"email\":\"wjjstliuhqa\",\"name\":\"oaiancznvodrrs\",\"objectId\":\"dc6948c0-897f-4ea2-b171-d197ed89bc8b\"},\"displayName\":\"lxydkxrxv\",\"labels\":[\"iwkgfbqljnq\",\"hychocokuleh\",\"rqlrqffawe\"],\"notes\":\"rkphyjdxr\",\"query\":\"vjuqdbrxmrgchb\",\"queryResult\":\"xk\",\"updated\":\"2021-01-07T08:52:04Z\",\"updatedBy\":{\"email\":\"kbajbu\",\"name\":\"gd\",\"objectId\":\"e0d696a9-4ac3-4e52-a75f-0a4c35f7e486\"},\"eventTime\":\"2021-07-19T21:01:06Z\",\"queryStartTime\":\"2021-03-11T15:48:32Z\",\"queryEndTime\":\"2021-08-21T01:03:20Z\",\"incidentInfo\":{\"incidentId\":\"vpmclujyxkyxlz\",\"severity\":\"High\",\"title\":\"kzzltafhbzf\",\"relationName\":\"vwmbjlzqsczpg\"}},\"etag\":\"wnapfdq\",\"id\":\"wf\",\"name\":\"ptnuwjtkschgc\",\"type\":\"qyhleseyq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Bookmark> response = manager.bookmarks().list("ejdtxptl", "h", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wnapfdq", response.iterator().next().etag());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-16T18:34:33Z"), response.iterator().next().created());
        Assertions.assertEquals(UUID.fromString("dc6948c0-897f-4ea2-b171-d197ed89bc8b"),
            response.iterator().next().createdBy().objectId());
        Assertions.assertEquals("lxydkxrxv", response.iterator().next().displayName());
        Assertions.assertEquals("iwkgfbqljnq", response.iterator().next().labels().get(0));
        Assertions.assertEquals("rkphyjdxr", response.iterator().next().notes());
        Assertions.assertEquals("vjuqdbrxmrgchb", response.iterator().next().query());
        Assertions.assertEquals("xk", response.iterator().next().queryResult());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-07T08:52:04Z"), response.iterator().next().updated());
        Assertions.assertEquals(UUID.fromString("e0d696a9-4ac3-4e52-a75f-0a4c35f7e486"),
            response.iterator().next().updatedBy().objectId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-19T21:01:06Z"), response.iterator().next().eventTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-11T15:48:32Z"),
            response.iterator().next().queryStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T01:03:20Z"),
            response.iterator().next().queryEndTime());
        Assertions.assertEquals("vpmclujyxkyxlz", response.iterator().next().incidentInfo().incidentId());
        Assertions.assertEquals(IncidentSeverity.HIGH, response.iterator().next().incidentInfo().severity());
        Assertions.assertEquals("kzzltafhbzf", response.iterator().next().incidentInfo().title());
        Assertions.assertEquals("vwmbjlzqsczpg", response.iterator().next().incidentInfo().relationName());
    }
}
