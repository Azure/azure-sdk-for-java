// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.Incident;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IncidentsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"additionalData\":{\"alertsCount\":1963541859,\"bookmarksCount\":743054032,\"commentsCount\":1998617228,\"alertProductNames\":[\"dgglmepjpfs\",\"ykgsangpszng\",\"fpgylkve\"],\"tactics\":[\"Collection\",\"Execution\"]},\"classification\":\"BenignPositive\",\"classificationComment\":\"adyedmzrgjfok\",\"classificationReason\":\"SuspiciousButExpected\",\"createdTimeUtc\":\"2021-05-30T12:16:13Z\",\"description\":\"tp\",\"firstActivityTimeUtc\":\"2021-11-22T23:37:09Z\",\"incidentUrl\":\"rgdg\",\"incidentNumber\":1339773074,\"labels\":[{\"labelName\":\"raswugyxpqit\",\"labelType\":\"User\"},{\"labelName\":\"alwvskbu\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"caqt\",\"labelType\":\"User\"},{\"labelName\":\"co\",\"labelType\":\"AutoAssigned\"}],\"lastActivityTimeUtc\":\"2021-03-15T06:39:11Z\",\"lastModifiedTimeUtc\":\"2021-06-10T09:18:11Z\",\"owner\":{\"email\":\"akuejk\",\"assignedTo\":\"bizt\",\"objectId\":\"856fd1dd-2865-403f-94ab-ca27791198b8\",\"userPrincipalName\":\"qcvov\",\"ownerType\":\"Group\"},\"relatedAnalyticRuleIds\":[\"sj\",\"lbemyej\"],\"severity\":\"Informational\",\"status\":\"New\",\"title\":\"uxegthortudawlpj\"},\"etag\":\"lqerpptcbgqnzm\",\"id\":\"iilialwc\",\"name\":\"gckbb\",\"type\":\"ccgzpraoxnyu\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Incident> response = manager.incidents()
            .list("rftb", "ve", "reuquowtljvf", "hreagk", 1184787439, "xv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lqerpptcbgqnzm", response.iterator().next().etag());
        Assertions.assertEquals(IncidentClassification.BENIGN_POSITIVE, response.iterator().next().classification());
        Assertions.assertEquals("adyedmzrgjfok", response.iterator().next().classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.SUSPICIOUS_BUT_EXPECTED,
            response.iterator().next().classificationReason());
        Assertions.assertEquals("tp", response.iterator().next().description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-22T23:37:09Z"),
            response.iterator().next().firstActivityTimeUtc());
        Assertions.assertEquals("raswugyxpqit", response.iterator().next().labels().get(0).labelName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-15T06:39:11Z"),
            response.iterator().next().lastActivityTimeUtc());
        Assertions.assertEquals("akuejk", response.iterator().next().owner().email());
        Assertions.assertEquals("bizt", response.iterator().next().owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("856fd1dd-2865-403f-94ab-ca27791198b8"),
            response.iterator().next().owner().objectId());
        Assertions.assertEquals("qcvov", response.iterator().next().owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.GROUP, response.iterator().next().owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.INFORMATIONAL, response.iterator().next().severity());
        Assertions.assertEquals(IncidentStatus.NEW, response.iterator().next().status());
        Assertions.assertEquals("uxegthortudawlpj", response.iterator().next().title());
    }
}
