// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.Bookmark;
import com.azure.resourcemanager.securityinsights.models.BookmarkEntityMappings;
import com.azure.resourcemanager.securityinsights.models.EntityFieldMapping;
import com.azure.resourcemanager.securityinsights.models.IncidentInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.UserInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BookmarksCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"created\":\"2021-05-25T08:47:30Z\",\"createdBy\":{\"email\":\"ajejirvavrvkgpo\",\"name\":\"lbjuvlnhxnrnjh\",\"objectId\":\"e7a743a8-0a8c-4f3d-9cf5-3a6c3240d814\"},\"displayName\":\"aege\",\"labels\":[\"nepqmjmop\",\"ukfyk\"],\"notes\":\"hsovadkrmj\",\"query\":\"mwqpdkesjqbzkqm\",\"queryResult\":\"poriwbwggijtspzj\",\"updated\":\"2021-07-13T20:29:57Z\",\"updatedBy\":{\"email\":\"kwsbzrhdugquh\",\"name\":\"gzfrunjfhrjhi\",\"objectId\":\"59bc9926-ad35-4161-8956-bd5eed74951c\"},\"eventTime\":\"2021-11-19T19:49:29Z\",\"queryStartTime\":\"2020-12-22T18:00:16Z\",\"queryEndTime\":\"2021-06-11T10:51:56Z\",\"incidentInfo\":{\"incidentId\":\"zkvihvtu\",\"severity\":\"Informational\",\"title\":\"qwzszoszjgzunkfn\",\"relationName\":\"k\"},\"entityMappings\":[{\"entityType\":\"qhcza\",\"fieldMappings\":[{},{}]},{\"entityType\":\"slhip\",\"fieldMappings\":[{},{},{}]}],\"tactics\":[\"Collection\"],\"techniques\":[\"xprrvchy\"]},\"etag\":\"qal\",\"id\":\"ufjjf\",\"name\":\"tiztqds\",\"type\":\"ahhhsaaxxsritr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Bookmark response
            = manager.bookmarks()
                .define("rcxuibsdqbdyblp")
                .withExistingWorkspace("wakkchsfo", "lb")
                .withEtag("nqyxfedq")
                .withCreated(OffsetDateTime.parse("2021-01-02T18:05:15Z"))
                .withCreatedBy(new UserInfo().withObjectId(UUID.fromString("e47e52c1-347b-4f3e-89e1-86156fb32d06")))
                .withDisplayName("bymjjvtpne")
                .withLabels(Arrays.asList("jeazrahelhbimyii", "qamcthtpqgfz"))
                .withNotes("sizkdiuvflg")
                .withQuery("hcw")
                .withQueryResult("wahcrxofgrutv")
                .withUpdated(OffsetDateTime.parse("2021-03-16T13:00:41Z"))
                .withUpdatedBy(new UserInfo().withObjectId(UUID.fromString("3b468247-644f-4e5b-9571-ce56834a2f85")))
                .withEventTime(OffsetDateTime.parse("2021-03-23T07:00:49Z"))
                .withQueryStartTime(OffsetDateTime.parse("2021-11-20T11:13:55Z"))
                .withQueryEndTime(OffsetDateTime.parse("2021-06-27T11:10:57Z"))
                .withIncidentInfo(new IncidentInfo().withIncidentId("q")
                    .withSeverity(IncidentSeverity.INFORMATIONAL)
                    .withTitle("jvpmxnht")
                    .withRelationName("stqlfxolrwv"))
                .withEntityMappings(Arrays.asList(
                    new BookmarkEntityMappings().withEntityType("yfjswequf")
                        .withFieldMappings(Arrays.asList(new EntityFieldMapping(), new EntityFieldMapping(),
                            new EntityFieldMapping())),
                    new BookmarkEntityMappings().withEntityType("op")
                        .withFieldMappings(Arrays.asList(new EntityFieldMapping())),
                    new BookmarkEntityMappings().withEntityType("wwgw")
                        .withFieldMappings(Arrays.asList(new EntityFieldMapping()))))
                .withTactics(Arrays.asList(AttackTactic.RESOURCE_DEVELOPMENT, AttackTactic.EXECUTION,
                    AttackTactic.EXFILTRATION, AttackTactic.EXECUTION))
                .withTechniques(Arrays.asList("wjie", "imdtnpowewjs", "reeedddrftfquul", "clhsiigeeuw"))
                .create();

        Assertions.assertEquals("qal", response.etag());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T08:47:30Z"), response.created());
        Assertions.assertEquals(UUID.fromString("e7a743a8-0a8c-4f3d-9cf5-3a6c3240d814"),
            response.createdBy().objectId());
        Assertions.assertEquals("aege", response.displayName());
        Assertions.assertEquals("nepqmjmop", response.labels().get(0));
        Assertions.assertEquals("hsovadkrmj", response.notes());
        Assertions.assertEquals("mwqpdkesjqbzkqm", response.query());
        Assertions.assertEquals("poriwbwggijtspzj", response.queryResult());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T20:29:57Z"), response.updated());
        Assertions.assertEquals(UUID.fromString("59bc9926-ad35-4161-8956-bd5eed74951c"),
            response.updatedBy().objectId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-19T19:49:29Z"), response.eventTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T18:00:16Z"), response.queryStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-11T10:51:56Z"), response.queryEndTime());
        Assertions.assertEquals("zkvihvtu", response.incidentInfo().incidentId());
        Assertions.assertEquals(IncidentSeverity.INFORMATIONAL, response.incidentInfo().severity());
        Assertions.assertEquals("qwzszoszjgzunkfn", response.incidentInfo().title());
        Assertions.assertEquals("k", response.incidentInfo().relationName());
        Assertions.assertEquals("qhcza", response.entityMappings().get(0).entityType());
        Assertions.assertEquals(AttackTactic.COLLECTION, response.tactics().get(0));
        Assertions.assertEquals("xprrvchy", response.techniques().get(0));
    }
}
