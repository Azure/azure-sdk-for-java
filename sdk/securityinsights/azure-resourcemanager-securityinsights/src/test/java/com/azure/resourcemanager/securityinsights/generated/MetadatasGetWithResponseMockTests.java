// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.Kind;
import com.azure.resourcemanager.securityinsights.models.MetadataModel;
import com.azure.resourcemanager.securityinsights.models.Operator;
import com.azure.resourcemanager.securityinsights.models.SourceKind;
import com.azure.resourcemanager.securityinsights.models.SupportTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MetadatasGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"contentId\":\"jgfmyqyyfr\",\"parentId\":\"idzfpsfy\",\"version\":\"idfhmlxrqkeknum\",\"kind\":\"DataConnector\",\"source\":{\"kind\":\"Solution\",\"name\":\"vptriysjrgtruw\",\"sourceId\":\"qpsrcekd\"},\"author\":{\"name\":\"ydw\",\"email\":\"gg\",\"link\":\"clvbwatza\"},\"support\":{\"tier\":\"Partner\",\"name\":\"jngoarsrdrw\",\"email\":\"mzc\",\"link\":\"iapypimr\"},\"dependencies\":{\"contentId\":\"qwipzesstuin\",\"kind\":\"AnalyticsRuleTemplate\",\"version\":\"lfupjzcxxv\",\"name\":\"oyxjg\",\"operator\":\"AND\",\"criteria\":[{\"contentId\":\"rdaktnytk\",\"kind\":\"PlaybookTemplate\",\"version\":\"fc\",\"name\":\"pvfqjckmpwyv\",\"operator\":\"AND\",\"criteria\":[{},{}]},{\"contentId\":\"ikhlebgjg\",\"kind\":\"InvestigationQuery\",\"version\":\"cagiflrcygot\",\"name\":\"zwtoidhbxi\",\"operator\":\"AND\",\"criteria\":[{},{},{}]}]},\"categories\":{\"domains\":[\"utjsjzelsriem\",\"u\",\"meakosy\"],\"verticals\":[\"vldeehcbsaip\",\"suo\",\"kegbvbbdledf\",\"lzvsluazzxfjveu\"]},\"providers\":[\"zeempupbscbox\",\"a\",\"dczmrjgobekx\",\"heowsecaf\"],\"customVersion\":\"bskiwrj\",\"contentSchemaVersion\":\"db\",\"icon\":\"eesacuicnvqiqsu\",\"threatAnalysisTactics\":[\"r\",\"aptndrmmnlhnk\",\"xrqkekcdavi\"],\"threatAnalysisTechniques\":[\"eqrfzavqymcwts\",\"uceplbrzgkuorwp\",\"b\",\"tweobptscruykkie\"],\"previewImages\":[\"ynoy\"],\"previewImagesDark\":[\"l\",\"msbnlyoifg\",\"fzjqthy\",\"cvoevcwfz\"]},\"etag\":\"kxxlwwo\",\"id\":\"gbsdz\",\"name\":\"gcvypjhu\",\"type\":\"dmgobxehujcqg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MetadataModel response = manager.metadatas()
            .getWithResponse("cyeqd", "bobaqca", "ebckcesrsixwnlpj", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("kxxlwwo", response.etag());
        Assertions.assertEquals("jgfmyqyyfr", response.contentId());
        Assertions.assertEquals("idzfpsfy", response.parentId());
        Assertions.assertEquals("idfhmlxrqkeknum", response.version());
        Assertions.assertEquals(Kind.DATA_CONNECTOR, response.kind());
        Assertions.assertEquals(SourceKind.SOLUTION, response.source().kind());
        Assertions.assertEquals("vptriysjrgtruw", response.source().name());
        Assertions.assertEquals("qpsrcekd", response.source().sourceId());
        Assertions.assertEquals("ydw", response.author().name());
        Assertions.assertEquals("gg", response.author().email());
        Assertions.assertEquals("clvbwatza", response.author().link());
        Assertions.assertEquals(SupportTier.PARTNER, response.support().tier());
        Assertions.assertEquals("jngoarsrdrw", response.support().name());
        Assertions.assertEquals("mzc", response.support().email());
        Assertions.assertEquals("iapypimr", response.support().link());
        Assertions.assertEquals("qwipzesstuin", response.dependencies().contentId());
        Assertions.assertEquals(Kind.ANALYTICS_RULE_TEMPLATE, response.dependencies().kind());
        Assertions.assertEquals("lfupjzcxxv", response.dependencies().version());
        Assertions.assertEquals("oyxjg", response.dependencies().name());
        Assertions.assertEquals(Operator.AND, response.dependencies().operator());
        Assertions.assertEquals("rdaktnytk", response.dependencies().criteria().get(0).contentId());
        Assertions.assertEquals(Kind.PLAYBOOK_TEMPLATE, response.dependencies().criteria().get(0).kind());
        Assertions.assertEquals("fc", response.dependencies().criteria().get(0).version());
        Assertions.assertEquals("pvfqjckmpwyv", response.dependencies().criteria().get(0).name());
        Assertions.assertEquals(Operator.AND, response.dependencies().criteria().get(0).operator());
        Assertions.assertEquals("utjsjzelsriem", response.categories().domains().get(0));
        Assertions.assertEquals("vldeehcbsaip", response.categories().verticals().get(0));
        Assertions.assertEquals("zeempupbscbox", response.providers().get(0));
        Assertions.assertEquals("bskiwrj", response.customVersion());
        Assertions.assertEquals("db", response.contentSchemaVersion());
        Assertions.assertEquals("eesacuicnvqiqsu", response.icon());
        Assertions.assertEquals("r", response.threatAnalysisTactics().get(0));
        Assertions.assertEquals("eqrfzavqymcwts", response.threatAnalysisTechniques().get(0));
        Assertions.assertEquals("ynoy", response.previewImages().get(0));
        Assertions.assertEquals("l", response.previewImagesDark().get(0));
    }
}
