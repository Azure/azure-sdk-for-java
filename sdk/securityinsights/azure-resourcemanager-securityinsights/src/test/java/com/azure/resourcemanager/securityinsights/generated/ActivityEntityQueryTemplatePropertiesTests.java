// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.ActivityEntityQueryTemplateProperties;
import com.azure.resourcemanager.securityinsights.models.ActivityEntityQueryTemplatePropertiesQueryDefinitions;
import com.azure.resourcemanager.securityinsights.models.DataTypeDefinitions;
import com.azure.resourcemanager.securityinsights.models.EntityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ActivityEntityQueryTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityEntityQueryTemplateProperties model = BinaryData.fromString(
            "{\"title\":\"tfxcpupuk\",\"content\":\"mjzpwdlvwtiwsm\",\"description\":\"aonhqnamppul\",\"queryDefinitions\":{\"query\":\"saekewnazeajbka\",\"summarizeBy\":\"cyizy\"},\"dataTypes\":[{\"dataType\":\"xo\"},{\"dataType\":\"rvfsxxbydesq\"},{\"dataType\":\"gecpwgoljtzx\"},{\"dataType\":\"xsdobygoogxqapjx\"}],\"inputEntityType\":\"IoTDevice\",\"requiredInputFieldsSets\":[[\"ucsa\",\"djnosdkvibf\",\"sgm\",\"trnzpducdaaktu\"],[\"tzboim\"],[\"pqdowkppnwyy\",\"fvpctfji\"],[\"ff\",\"g\"]],\"entitiesFilter\":{\"xjqifhujjsbc\":[\"nwhvuldbkkejj\",\"jigawgaz\"],\"wcco\":[\"zaahzbhuroolkoli\",\"hhmo\",\"usuzgfjzcvaaxo\",\"alahf\"],\"c\":[\"xkukm\"]}}")
            .toObject(ActivityEntityQueryTemplateProperties.class);
        Assertions.assertEquals("tfxcpupuk", model.title());
        Assertions.assertEquals("mjzpwdlvwtiwsm", model.content());
        Assertions.assertEquals("aonhqnamppul", model.description());
        Assertions.assertEquals("saekewnazeajbka", model.queryDefinitions().query());
        Assertions.assertEquals("cyizy", model.queryDefinitions().summarizeBy());
        Assertions.assertEquals("xo", model.dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.IO_TDEVICE, model.inputEntityType());
        Assertions.assertEquals("ucsa", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("nwhvuldbkkejj", model.entitiesFilter().get("xjqifhujjsbc").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityEntityQueryTemplateProperties model = new ActivityEntityQueryTemplateProperties().withTitle("tfxcpupuk")
            .withContent("mjzpwdlvwtiwsm")
            .withDescription("aonhqnamppul")
            .withQueryDefinitions(
                new ActivityEntityQueryTemplatePropertiesQueryDefinitions().withQuery("saekewnazeajbka")
                    .withSummarizeBy("cyizy"))
            .withDataTypes(Arrays.asList(new DataTypeDefinitions().withDataType("xo"),
                new DataTypeDefinitions().withDataType("rvfsxxbydesq"),
                new DataTypeDefinitions().withDataType("gecpwgoljtzx"),
                new DataTypeDefinitions().withDataType("xsdobygoogxqapjx")))
            .withInputEntityType(EntityType.IO_TDEVICE)
            .withRequiredInputFieldsSets(Arrays.asList(Arrays.asList("ucsa", "djnosdkvibf", "sgm", "trnzpducdaaktu"),
                Arrays.asList("tzboim"), Arrays.asList("pqdowkppnwyy", "fvpctfji"), Arrays.asList("ff", "g")))
            .withEntitiesFilter(mapOf("xjqifhujjsbc", Arrays.asList("nwhvuldbkkejj", "jigawgaz"), "wcco",
                Arrays.asList("zaahzbhuroolkoli", "hhmo", "usuzgfjzcvaaxo", "alahf"), "c", Arrays.asList("xkukm")));
        model = BinaryData.fromObject(model).toObject(ActivityEntityQueryTemplateProperties.class);
        Assertions.assertEquals("tfxcpupuk", model.title());
        Assertions.assertEquals("mjzpwdlvwtiwsm", model.content());
        Assertions.assertEquals("aonhqnamppul", model.description());
        Assertions.assertEquals("saekewnazeajbka", model.queryDefinitions().query());
        Assertions.assertEquals("cyizy", model.queryDefinitions().summarizeBy());
        Assertions.assertEquals("xo", model.dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.IO_TDEVICE, model.inputEntityType());
        Assertions.assertEquals("ucsa", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("nwhvuldbkkejj", model.entitiesFilter().get("xjqifhujjsbc").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
