// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisContact;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisContacts;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisDetails;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhoisRegistrarDetails;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EnrichmentDomainWhoisDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnrichmentDomainWhoisDetails model = BinaryData.fromString(
            "{\"registrar\":{\"name\":\"fmmdnbbg\",\"abuseContactEmail\":\"pswiydmcwyh\",\"abuseContactPhone\":\"xssadbzmnvdf\",\"ianaId\":\"ud\",\"url\":\"dvxzbncblylpst\",\"whoisServer\":\"hh\"},\"contacts\":{\"admin\":{\"name\":\"dzu\",\"org\":\"rsc\",\"street\":[\"nevf\"],\"city\":\"jmygtdsslswtmwer\",\"state\":\"fzp\",\"postal\":\"semwabnet\",\"country\":\"hszhedplvwiwu\",\"phone\":\"wmbesldnkw\",\"fax\":\"pp\",\"email\":\"lcxog\"},\"billing\":{\"name\":\"onz\",\"org\":\"sikvmkqzeqqkdlt\",\"street\":[\"mhhv\",\"gureodkwobdag\",\"tibqdxbxwakb\"],\"city\":\"qxn\",\"state\":\"kzgxhurip\",\"postal\":\"podxunkb\",\"country\":\"xmubyyntwlrbq\",\"phone\":\"oievseotgqrlltm\",\"fax\":\"lauwzizxbmpgcjef\",\"email\":\"muvp\"},\"registrant\":{\"name\":\"d\",\"org\":\"orppxebmnzbtb\",\"street\":[\"glkfg\",\"hdneuelfph\"],\"city\":\"yhtozfikdowwqu\",\"state\":\"xzxcl\",\"postal\":\"thhqzonosggbh\",\"country\":\"hfwdsjnkaljutiis\",\"phone\":\"cffgdkzzewk\",\"fax\":\"hqcrailvpnpp\",\"email\":\"flrwd\"},\"tech\":{\"name\":\"lxyjr\",\"org\":\"agafcnihgwqap\",\"street\":[\"gfbcvkcv\",\"vpk\",\"qdcvdrhvoo\",\"sotbob\"],\"city\":\"opcjwvnhd\",\"state\":\"wmgxcxrsl\",\"postal\":\"utwu\",\"country\":\"grpkhjwniyqs\",\"phone\":\"i\",\"fax\":\"dggkzzlvmbmpa\",\"email\":\"odfvuefywsbp\"}},\"nameServers\":[\"wyhrfouyftaakc\",\"wiyzvqtmnubexkp\"],\"statuses\":[\"mond\",\"mquxvypo\"]}")
            .toObject(EnrichmentDomainWhoisDetails.class);
        Assertions.assertEquals("fmmdnbbg", model.registrar().name());
        Assertions.assertEquals("pswiydmcwyh", model.registrar().abuseContactEmail());
        Assertions.assertEquals("xssadbzmnvdf", model.registrar().abuseContactPhone());
        Assertions.assertEquals("ud", model.registrar().ianaId());
        Assertions.assertEquals("dvxzbncblylpst", model.registrar().url());
        Assertions.assertEquals("hh", model.registrar().whoisServer());
        Assertions.assertEquals("dzu", model.contacts().admin().name());
        Assertions.assertEquals("rsc", model.contacts().admin().org());
        Assertions.assertEquals("nevf", model.contacts().admin().street().get(0));
        Assertions.assertEquals("jmygtdsslswtmwer", model.contacts().admin().city());
        Assertions.assertEquals("fzp", model.contacts().admin().state());
        Assertions.assertEquals("semwabnet", model.contacts().admin().postal());
        Assertions.assertEquals("hszhedplvwiwu", model.contacts().admin().country());
        Assertions.assertEquals("wmbesldnkw", model.contacts().admin().phone());
        Assertions.assertEquals("pp", model.contacts().admin().fax());
        Assertions.assertEquals("lcxog", model.contacts().admin().email());
        Assertions.assertEquals("onz", model.contacts().billing().name());
        Assertions.assertEquals("sikvmkqzeqqkdlt", model.contacts().billing().org());
        Assertions.assertEquals("mhhv", model.contacts().billing().street().get(0));
        Assertions.assertEquals("qxn", model.contacts().billing().city());
        Assertions.assertEquals("kzgxhurip", model.contacts().billing().state());
        Assertions.assertEquals("podxunkb", model.contacts().billing().postal());
        Assertions.assertEquals("xmubyyntwlrbq", model.contacts().billing().country());
        Assertions.assertEquals("oievseotgqrlltm", model.contacts().billing().phone());
        Assertions.assertEquals("lauwzizxbmpgcjef", model.contacts().billing().fax());
        Assertions.assertEquals("muvp", model.contacts().billing().email());
        Assertions.assertEquals("d", model.contacts().registrant().name());
        Assertions.assertEquals("orppxebmnzbtb", model.contacts().registrant().org());
        Assertions.assertEquals("glkfg", model.contacts().registrant().street().get(0));
        Assertions.assertEquals("yhtozfikdowwqu", model.contacts().registrant().city());
        Assertions.assertEquals("xzxcl", model.contacts().registrant().state());
        Assertions.assertEquals("thhqzonosggbh", model.contacts().registrant().postal());
        Assertions.assertEquals("hfwdsjnkaljutiis", model.contacts().registrant().country());
        Assertions.assertEquals("cffgdkzzewk", model.contacts().registrant().phone());
        Assertions.assertEquals("hqcrailvpnpp", model.contacts().registrant().fax());
        Assertions.assertEquals("flrwd", model.contacts().registrant().email());
        Assertions.assertEquals("lxyjr", model.contacts().tech().name());
        Assertions.assertEquals("agafcnihgwqap", model.contacts().tech().org());
        Assertions.assertEquals("gfbcvkcv", model.contacts().tech().street().get(0));
        Assertions.assertEquals("opcjwvnhd", model.contacts().tech().city());
        Assertions.assertEquals("wmgxcxrsl", model.contacts().tech().state());
        Assertions.assertEquals("utwu", model.contacts().tech().postal());
        Assertions.assertEquals("grpkhjwniyqs", model.contacts().tech().country());
        Assertions.assertEquals("i", model.contacts().tech().phone());
        Assertions.assertEquals("dggkzzlvmbmpa", model.contacts().tech().fax());
        Assertions.assertEquals("odfvuefywsbp", model.contacts().tech().email());
        Assertions.assertEquals("wyhrfouyftaakc", model.nameServers().get(0));
        Assertions.assertEquals("mond", model.statuses().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnrichmentDomainWhoisDetails model = new EnrichmentDomainWhoisDetails()
            .withRegistrar(new EnrichmentDomainWhoisRegistrarDetails().withName("fmmdnbbg")
                .withAbuseContactEmail("pswiydmcwyh")
                .withAbuseContactPhone("xssadbzmnvdf")
                .withIanaId("ud")
                .withUrl("dvxzbncblylpst")
                .withWhoisServer("hh"))
            .withContacts(new EnrichmentDomainWhoisContacts()
                .withAdmin(new EnrichmentDomainWhoisContact().withName("dzu")
                    .withOrg("rsc")
                    .withStreet(Arrays.asList("nevf"))
                    .withCity("jmygtdsslswtmwer")
                    .withState("fzp")
                    .withPostal("semwabnet")
                    .withCountry("hszhedplvwiwu")
                    .withPhone("wmbesldnkw")
                    .withFax("pp")
                    .withEmail("lcxog"))
                .withBilling(new EnrichmentDomainWhoisContact().withName("onz")
                    .withOrg("sikvmkqzeqqkdlt")
                    .withStreet(Arrays.asList("mhhv", "gureodkwobdag", "tibqdxbxwakb"))
                    .withCity("qxn")
                    .withState("kzgxhurip")
                    .withPostal("podxunkb")
                    .withCountry("xmubyyntwlrbq")
                    .withPhone("oievseotgqrlltm")
                    .withFax("lauwzizxbmpgcjef")
                    .withEmail("muvp"))
                .withRegistrant(new EnrichmentDomainWhoisContact().withName("d")
                    .withOrg("orppxebmnzbtb")
                    .withStreet(Arrays.asList("glkfg", "hdneuelfph"))
                    .withCity("yhtozfikdowwqu")
                    .withState("xzxcl")
                    .withPostal("thhqzonosggbh")
                    .withCountry("hfwdsjnkaljutiis")
                    .withPhone("cffgdkzzewk")
                    .withFax("hqcrailvpnpp")
                    .withEmail("flrwd"))
                .withTech(new EnrichmentDomainWhoisContact().withName("lxyjr")
                    .withOrg("agafcnihgwqap")
                    .withStreet(Arrays.asList("gfbcvkcv", "vpk", "qdcvdrhvoo", "sotbob"))
                    .withCity("opcjwvnhd")
                    .withState("wmgxcxrsl")
                    .withPostal("utwu")
                    .withCountry("grpkhjwniyqs")
                    .withPhone("i")
                    .withFax("dggkzzlvmbmpa")
                    .withEmail("odfvuefywsbp")))
            .withNameServers(Arrays.asList("wyhrfouyftaakc", "wiyzvqtmnubexkp"))
            .withStatuses(Arrays.asList("mond", "mquxvypo"));
        model = BinaryData.fromObject(model).toObject(EnrichmentDomainWhoisDetails.class);
        Assertions.assertEquals("fmmdnbbg", model.registrar().name());
        Assertions.assertEquals("pswiydmcwyh", model.registrar().abuseContactEmail());
        Assertions.assertEquals("xssadbzmnvdf", model.registrar().abuseContactPhone());
        Assertions.assertEquals("ud", model.registrar().ianaId());
        Assertions.assertEquals("dvxzbncblylpst", model.registrar().url());
        Assertions.assertEquals("hh", model.registrar().whoisServer());
        Assertions.assertEquals("dzu", model.contacts().admin().name());
        Assertions.assertEquals("rsc", model.contacts().admin().org());
        Assertions.assertEquals("nevf", model.contacts().admin().street().get(0));
        Assertions.assertEquals("jmygtdsslswtmwer", model.contacts().admin().city());
        Assertions.assertEquals("fzp", model.contacts().admin().state());
        Assertions.assertEquals("semwabnet", model.contacts().admin().postal());
        Assertions.assertEquals("hszhedplvwiwu", model.contacts().admin().country());
        Assertions.assertEquals("wmbesldnkw", model.contacts().admin().phone());
        Assertions.assertEquals("pp", model.contacts().admin().fax());
        Assertions.assertEquals("lcxog", model.contacts().admin().email());
        Assertions.assertEquals("onz", model.contacts().billing().name());
        Assertions.assertEquals("sikvmkqzeqqkdlt", model.contacts().billing().org());
        Assertions.assertEquals("mhhv", model.contacts().billing().street().get(0));
        Assertions.assertEquals("qxn", model.contacts().billing().city());
        Assertions.assertEquals("kzgxhurip", model.contacts().billing().state());
        Assertions.assertEquals("podxunkb", model.contacts().billing().postal());
        Assertions.assertEquals("xmubyyntwlrbq", model.contacts().billing().country());
        Assertions.assertEquals("oievseotgqrlltm", model.contacts().billing().phone());
        Assertions.assertEquals("lauwzizxbmpgcjef", model.contacts().billing().fax());
        Assertions.assertEquals("muvp", model.contacts().billing().email());
        Assertions.assertEquals("d", model.contacts().registrant().name());
        Assertions.assertEquals("orppxebmnzbtb", model.contacts().registrant().org());
        Assertions.assertEquals("glkfg", model.contacts().registrant().street().get(0));
        Assertions.assertEquals("yhtozfikdowwqu", model.contacts().registrant().city());
        Assertions.assertEquals("xzxcl", model.contacts().registrant().state());
        Assertions.assertEquals("thhqzonosggbh", model.contacts().registrant().postal());
        Assertions.assertEquals("hfwdsjnkaljutiis", model.contacts().registrant().country());
        Assertions.assertEquals("cffgdkzzewk", model.contacts().registrant().phone());
        Assertions.assertEquals("hqcrailvpnpp", model.contacts().registrant().fax());
        Assertions.assertEquals("flrwd", model.contacts().registrant().email());
        Assertions.assertEquals("lxyjr", model.contacts().tech().name());
        Assertions.assertEquals("agafcnihgwqap", model.contacts().tech().org());
        Assertions.assertEquals("gfbcvkcv", model.contacts().tech().street().get(0));
        Assertions.assertEquals("opcjwvnhd", model.contacts().tech().city());
        Assertions.assertEquals("wmgxcxrsl", model.contacts().tech().state());
        Assertions.assertEquals("utwu", model.contacts().tech().postal());
        Assertions.assertEquals("grpkhjwniyqs", model.contacts().tech().country());
        Assertions.assertEquals("i", model.contacts().tech().phone());
        Assertions.assertEquals("dggkzzlvmbmpa", model.contacts().tech().fax());
        Assertions.assertEquals("odfvuefywsbp", model.contacts().tech().email());
        Assertions.assertEquals("wyhrfouyftaakc", model.nameServers().get(0));
        Assertions.assertEquals("mond", model.statuses().get(0));
    }
}
