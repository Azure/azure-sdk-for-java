// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.NrtAlertRuleProperties;
import com.azure.resourcemanager.securityinsights.models.AlertDetail;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.GroupingConfiguration;
import com.azure.resourcemanager.securityinsights.models.IncidentConfiguration;
import com.azure.resourcemanager.securityinsights.models.MatchingMethod;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NrtAlertRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NrtAlertRuleProperties model = BinaryData.fromString(
            "{\"alertRuleTemplateName\":\"wnvz\",\"templateVersion\":\"n\",\"description\":\"ywsxvjabjqqaxu\",\"query\":\"vym\",\"tactics\":[\"ImpairProcessControl\",\"ResourceDevelopment\",\"ResourceDevelopment\"],\"techniques\":[\"bhjxwxqweuipmpv\",\"smitnsqxtlt\"],\"displayName\":\"lkrdpqgfhy\",\"enabled\":true,\"lastModifiedUtc\":\"2021-11-06T01:04:47Z\",\"suppressionDuration\":\"PT41H13M50S\",\"suppressionEnabled\":true,\"severity\":\"Medium\",\"incidentConfiguration\":{\"createIncident\":true,\"groupingConfiguration\":{\"enabled\":false,\"reopenClosedIncident\":false,\"lookbackDuration\":\"PT47H48M26S\",\"matchingMethod\":\"Selected\",\"groupByEntities\":[\"URL\"],\"groupByAlertDetails\":[\"Severity\",\"DisplayName\",\"Severity\",\"DisplayName\"],\"groupByCustomDetails\":[\"txjtielnzqgx\",\"gfb\"]}},\"customDetails\":{\"iprnzcalincry\":\"lpqagyn\",\"ruqg\":\"xzxaqzibmqimiym\",\"lanfkgxsya\":\"hfupetasvvoqsbpk\"},\"entityMappings\":[{\"entityType\":\"Process\",\"fieldMappings\":[{\"identifier\":\"ohdkcprgukx\",\"columnName\":\"tiochlutixmqr\"},{\"identifier\":\"jizcbfzmcrunfhiu\",\"columnName\":\"mfbcpaqktkrum\"},{\"identifier\":\"ed\",\"columnName\":\"zbfvxovqkxiu\"},{\"identifier\":\"ggvqrnhyhlwcjs\",\"columnName\":\"gjhffbxr\"}]},{\"entityType\":\"Process\",\"fieldMappings\":[{\"identifier\":\"euqlsdxeqztv\",\"columnName\":\"mwwmjswenaww\"},{\"identifier\":\"ecleqioulndhzyo\",\"columnName\":\"jhtollh\"},{\"identifier\":\"idmytzln\",\"columnName\":\"xpno\"},{\"identifier\":\"oanfbcswqagyw\",\"columnName\":\"xigvjrktpgaeuk\"}]},{\"entityType\":\"Mailbox\",\"fieldMappings\":[{\"identifier\":\"mwhqnucsklh\",\"columnName\":\"dsjtdlpbni\"},{\"identifier\":\"gazlsvbz\",\"columnName\":\"puoee\"},{\"identifier\":\"jcciklhsyek\",\"columnName\":\"renxolriyehqbe\"}]},{\"entityType\":\"URL\",\"fieldMappings\":[{\"identifier\":\"d\",\"columnName\":\"dbfgrlp\"},{\"identifier\":\"ytjlkesmmpath\",\"columnName\":\"ta\"},{\"identifier\":\"e\",\"columnName\":\"iiwllbvgwzsf\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"dousnk\",\"alertDescriptionFormat\":\"tgravaqogf\",\"alertTacticsColumnName\":\"ebauzlqbtx\",\"alertSeverityColumnName\":\"pfhnjzudrt\"},\"eventGroupingSettings\":{\"aggregationKind\":\"AlertPerResult\"}}")
            .toObject(NrtAlertRuleProperties.class);
        Assertions.assertEquals("wnvz", model.alertRuleTemplateName());
        Assertions.assertEquals("n", model.templateVersion());
        Assertions.assertEquals("ywsxvjabjqqaxu", model.description());
        Assertions.assertEquals("vym", model.query());
        Assertions.assertEquals(AttackTactic.IMPAIR_PROCESS_CONTROL, model.tactics().get(0));
        Assertions.assertEquals("bhjxwxqweuipmpv", model.techniques().get(0));
        Assertions.assertEquals("lkrdpqgfhy", model.displayName());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(Duration.parse("PT41H13M50S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AlertSeverity.MEDIUM, model.severity());
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT47H48M26S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.SELECTED,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.URL,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.SEVERITY,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("txjtielnzqgx",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("lpqagyn", model.customDetails().get("iprnzcalincry"));
        Assertions.assertEquals(EntityMappingType.PROCESS, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("ohdkcprgukx", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("tiochlutixmqr", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("dousnk", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("tgravaqogf", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("ebauzlqbtx", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("pfhnjzudrt", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NrtAlertRuleProperties model
            = new NrtAlertRuleProperties().withAlertRuleTemplateName("wnvz")
                .withTemplateVersion("n")
                .withDescription("ywsxvjabjqqaxu")
                .withQuery("vym")
                .withTactics(Arrays.asList(AttackTactic.IMPAIR_PROCESS_CONTROL, AttackTactic.RESOURCE_DEVELOPMENT,
                    AttackTactic.RESOURCE_DEVELOPMENT))
                .withTechniques(Arrays.asList("bhjxwxqweuipmpv", "smitnsqxtlt"))
                .withDisplayName("lkrdpqgfhy")
                .withEnabled(true)
                .withSuppressionDuration(Duration.parse("PT41H13M50S"))
                .withSuppressionEnabled(true)
                .withSeverity(AlertSeverity.MEDIUM)
                .withIncidentConfiguration(new IncidentConfiguration().withCreateIncident(true)
                    .withGroupingConfiguration(new GroupingConfiguration().withEnabled(false)
                        .withReopenClosedIncident(false)
                        .withLookbackDuration(Duration.parse("PT47H48M26S"))
                        .withMatchingMethod(MatchingMethod.SELECTED)
                        .withGroupByEntities(Arrays.asList(EntityMappingType.URL))
                        .withGroupByAlertDetails(Arrays.asList(AlertDetail.SEVERITY, AlertDetail.DISPLAY_NAME,
                            AlertDetail.SEVERITY, AlertDetail.DISPLAY_NAME))
                        .withGroupByCustomDetails(Arrays.asList("txjtielnzqgx", "gfb"))))
                .withCustomDetails(
                    mapOf("iprnzcalincry", "lpqagyn", "ruqg", "xzxaqzibmqimiym", "lanfkgxsya", "hfupetasvvoqsbpk"))
                .withEntityMappings(
                    Arrays
                        .asList(
                            new EntityMapping().withEntityType(EntityMappingType.PROCESS)
                                .withFieldMappings(Arrays.asList(
                                    new FieldMapping().withIdentifier("ohdkcprgukx").withColumnName("tiochlutixmqr"),
                                    new FieldMapping().withIdentifier("jizcbfzmcrunfhiu")
                                        .withColumnName("mfbcpaqktkrum"),
                                    new FieldMapping().withIdentifier("ed").withColumnName("zbfvxovqkxiu"),
                                    new FieldMapping().withIdentifier("ggvqrnhyhlwcjs").withColumnName("gjhffbxr"))),
                            new EntityMapping().withEntityType(EntityMappingType.PROCESS)
                                .withFieldMappings(Arrays.asList(
                                    new FieldMapping().withIdentifier("euqlsdxeqztv").withColumnName("mwwmjswenaww"),
                                    new FieldMapping().withIdentifier("ecleqioulndhzyo").withColumnName("jhtollh"),
                                    new FieldMapping().withIdentifier("idmytzln").withColumnName("xpno"),
                                    new FieldMapping().withIdentifier("oanfbcswqagyw")
                                        .withColumnName("xigvjrktpgaeuk"))),
                            new EntityMapping().withEntityType(EntityMappingType.MAILBOX)
                                .withFieldMappings(Arrays.asList(
                                    new FieldMapping().withIdentifier("mwhqnucsklh").withColumnName("dsjtdlpbni"),
                                    new FieldMapping().withIdentifier("gazlsvbz").withColumnName("puoee"),
                                    new FieldMapping().withIdentifier("jcciklhsyek").withColumnName("renxolriyehqbe"))),
                            new EntityMapping().withEntityType(EntityMappingType.URL)
                                .withFieldMappings(
                                    Arrays.asList(new FieldMapping().withIdentifier("d").withColumnName("dbfgrlp"),
                                        new FieldMapping().withIdentifier("ytjlkesmmpath").withColumnName("ta"),
                                        new FieldMapping().withIdentifier("e").withColumnName("iiwllbvgwzsf")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("dousnk")
                    .withAlertDescriptionFormat("tgravaqogf")
                    .withAlertTacticsColumnName("ebauzlqbtx")
                    .withAlertSeverityColumnName("pfhnjzudrt"))
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.ALERT_PER_RESULT));
        model = BinaryData.fromObject(model).toObject(NrtAlertRuleProperties.class);
        Assertions.assertEquals("wnvz", model.alertRuleTemplateName());
        Assertions.assertEquals("n", model.templateVersion());
        Assertions.assertEquals("ywsxvjabjqqaxu", model.description());
        Assertions.assertEquals("vym", model.query());
        Assertions.assertEquals(AttackTactic.IMPAIR_PROCESS_CONTROL, model.tactics().get(0));
        Assertions.assertEquals("bhjxwxqweuipmpv", model.techniques().get(0));
        Assertions.assertEquals("lkrdpqgfhy", model.displayName());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(Duration.parse("PT41H13M50S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AlertSeverity.MEDIUM, model.severity());
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT47H48M26S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.SELECTED,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.URL,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.SEVERITY,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("txjtielnzqgx",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("lpqagyn", model.customDetails().get("iprnzcalincry"));
        Assertions.assertEquals(EntityMappingType.PROCESS, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("ohdkcprgukx", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("tiochlutixmqr", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("dousnk", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("tgravaqogf", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("ebauzlqbtx", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("pfhnjzudrt", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
