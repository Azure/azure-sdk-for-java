// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.PermissionProviderScope;
import com.azure.resourcemanager.securityinsights.models.PermissionsResourceProviderItem;
import com.azure.resourcemanager.securityinsights.models.ProviderName;
import com.azure.resourcemanager.securityinsights.models.RequiredPermissions;
import org.junit.jupiter.api.Assertions;

public final class PermissionsResourceProviderItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PermissionsResourceProviderItem model = BinaryData.fromString(
            "{\"provider\":\"Microsoft.Authorization/policyAssignments\",\"permissionsDisplayText\":\"nagzlg\",\"providerDisplayName\":\"aixihzqjjtsmuyd\",\"scope\":\"ResourceGroup\",\"requiredPermissions\":{\"action\":true,\"write\":false,\"read\":true,\"delete\":false}}")
            .toObject(PermissionsResourceProviderItem.class);
        Assertions.assertEquals(ProviderName.MICROSOFT_AUTHORIZATION_POLICY_ASSIGNMENTS, model.provider());
        Assertions.assertEquals("nagzlg", model.permissionsDisplayText());
        Assertions.assertEquals("aixihzqjjtsmuyd", model.providerDisplayName());
        Assertions.assertEquals(PermissionProviderScope.RESOURCE_GROUP, model.scope());
        Assertions.assertEquals(true, model.requiredPermissions().action());
        Assertions.assertEquals(false, model.requiredPermissions().write());
        Assertions.assertEquals(true, model.requiredPermissions().read());
        Assertions.assertEquals(false, model.requiredPermissions().delete());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PermissionsResourceProviderItem model = new PermissionsResourceProviderItem()
            .withProvider(ProviderName.MICROSOFT_AUTHORIZATION_POLICY_ASSIGNMENTS)
            .withPermissionsDisplayText("nagzlg")
            .withProviderDisplayName("aixihzqjjtsmuyd")
            .withScope(PermissionProviderScope.RESOURCE_GROUP)
            .withRequiredPermissions(
                new RequiredPermissions().withAction(true).withWrite(false).withRead(true).withDelete(false));
        model = BinaryData.fromObject(model).toObject(PermissionsResourceProviderItem.class);
        Assertions.assertEquals(ProviderName.MICROSOFT_AUTHORIZATION_POLICY_ASSIGNMENTS, model.provider());
        Assertions.assertEquals("nagzlg", model.permissionsDisplayText());
        Assertions.assertEquals("aixihzqjjtsmuyd", model.providerDisplayName());
        Assertions.assertEquals(PermissionProviderScope.RESOURCE_GROUP, model.scope());
        Assertions.assertEquals(true, model.requiredPermissions().action());
        Assertions.assertEquals(false, model.requiredPermissions().write());
        Assertions.assertEquals(true, model.requiredPermissions().read());
        Assertions.assertEquals(false, model.requiredPermissions().delete());
    }
}
