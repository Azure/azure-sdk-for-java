// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.ThreatIntelligenceExternalReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ThreatIntelligenceExternalReferenceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ThreatIntelligenceExternalReference model = BinaryData.fromString(
            "{\"description\":\"idbz\",\"externalId\":\"hqtfbovn\",\"sourceName\":\"kbwetnj\",\"url\":\"p\",\"hashes\":{\"accxnafbwqroohtu\":\"kzyaup\",\"mghihp\":\"vmaonurjt\",\"jxl\":\"ecmslclbl\"}}")
            .toObject(ThreatIntelligenceExternalReference.class);
        Assertions.assertEquals("idbz", model.description());
        Assertions.assertEquals("hqtfbovn", model.externalId());
        Assertions.assertEquals("kbwetnj", model.sourceName());
        Assertions.assertEquals("p", model.url());
        Assertions.assertEquals("kzyaup", model.hashes().get("accxnafbwqroohtu"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ThreatIntelligenceExternalReference model = new ThreatIntelligenceExternalReference().withDescription("idbz")
            .withExternalId("hqtfbovn")
            .withSourceName("kbwetnj")
            .withUrl("p")
            .withHashes(mapOf("accxnafbwqroohtu", "kzyaup", "mghihp", "vmaonurjt", "jxl", "ecmslclbl"));
        model = BinaryData.fromObject(model).toObject(ThreatIntelligenceExternalReference.class);
        Assertions.assertEquals("idbz", model.description());
        Assertions.assertEquals("hqtfbovn", model.externalId());
        Assertions.assertEquals("kbwetnj", model.sourceName());
        Assertions.assertEquals("p", model.url());
        Assertions.assertEquals("kzyaup", model.hashes().get("accxnafbwqroohtu"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
