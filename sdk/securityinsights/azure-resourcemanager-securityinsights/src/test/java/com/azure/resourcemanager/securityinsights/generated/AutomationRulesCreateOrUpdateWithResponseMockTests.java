// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.AutomationRule;
import com.azure.resourcemanager.securityinsights.models.AutomationRuleAction;
import com.azure.resourcemanager.securityinsights.models.AutomationRuleCondition;
import com.azure.resourcemanager.securityinsights.models.AutomationRuleTriggeringLogic;
import com.azure.resourcemanager.securityinsights.models.TriggersOn;
import com.azure.resourcemanager.securityinsights.models.TriggersWhen;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AutomationRulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"v\",\"order\":1938856045,\"triggeringLogic\":{\"isEnabled\":true,\"expirationTimeUtc\":\"2021-11-25T05:19:39Z\",\"triggersOn\":\"Incidents\",\"triggersWhen\":\"Updated\",\"conditions\":[{\"conditionType\":\"AutomationRuleCondition\"},{\"conditionType\":\"AutomationRuleCondition\"}]},\"actions\":[{\"actionType\":\"AutomationRuleAction\",\"order\":1192045217}],\"lastModifiedTimeUtc\":\"2021-05-27T17:09:08Z\",\"createdTimeUtc\":\"2021-03-12T14:36:14Z\",\"lastModifiedBy\":{\"email\":\"zutgqztwhghmupg\",\"name\":\"jtcdxabbujftaben\",\"objectId\":\"42efc29e-75ce-45b7-b0d9-52c8c0b6a44c\",\"userPrincipalName\":\"lqpx\"},\"createdBy\":{\"email\":\"afeddwwnlza\",\"name\":\"xud\",\"objectId\":\"75f3e2c4-d29d-41ef-aeb2-f5ffaece5807\",\"userPrincipalName\":\"gookrtalvnb\"}},\"etag\":\"pbeme\",\"id\":\"clvdjjukyrdnqod\",\"name\":\"ahhxhqfaqnvzoqg\",\"type\":\"ipemchgavscz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AutomationRule response = manager.automationRules()
            .define("pt")
            .withExistingWorkspace("abzoghktdpyczhco", "ocnhzqrottjzcfyj")
            .withDisplayName("rl")
            .withOrder(132522705)
            .withTriggeringLogic(new AutomationRuleTriggeringLogic().withIsEnabled(false)
                .withExpirationTimeUtc(OffsetDateTime.parse("2021-03-15T17:03:59Z"))
                .withTriggersOn(TriggersOn.INCIDENTS)
                .withTriggersWhen(TriggersWhen.UPDATED)
                .withConditions(Arrays.asList(new AutomationRuleCondition(), new AutomationRuleCondition(),
                    new AutomationRuleCondition())))
            .withActions(Arrays.asList(new AutomationRuleAction().withOrder(1373677319),
                new AutomationRuleAction().withOrder(1335089450), new AutomationRuleAction().withOrder(1375742572)))
            .withEtag("vcacoyv")
            .create();

        Assertions.assertEquals("pbeme", response.etag());
        Assertions.assertEquals("v", response.displayName());
        Assertions.assertEquals(1938856045, response.order());
        Assertions.assertEquals(true, response.triggeringLogic().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T05:19:39Z"),
            response.triggeringLogic().expirationTimeUtc());
        Assertions.assertEquals(TriggersOn.INCIDENTS, response.triggeringLogic().triggersOn());
        Assertions.assertEquals(TriggersWhen.UPDATED, response.triggeringLogic().triggersWhen());
        Assertions.assertEquals(1192045217, response.actions().get(0).order());
    }
}
