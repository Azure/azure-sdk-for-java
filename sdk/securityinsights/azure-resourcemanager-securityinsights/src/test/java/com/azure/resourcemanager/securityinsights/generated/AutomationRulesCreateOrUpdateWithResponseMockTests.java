// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.AutomationRule;
import com.azure.resourcemanager.securityinsights.models.AutomationRuleAction;
import com.azure.resourcemanager.securityinsights.models.AutomationRuleCondition;
import com.azure.resourcemanager.securityinsights.models.AutomationRuleTriggeringLogic;
import com.azure.resourcemanager.securityinsights.models.TriggersOn;
import com.azure.resourcemanager.securityinsights.models.TriggersWhen;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AutomationRulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"ceecvjwyu\",\"order\":1949694958,\"triggeringLogic\":{\"isEnabled\":true,\"expirationTimeUtc\":\"2021-09-14T21:24:49Z\",\"triggersOn\":\"Alerts\",\"triggersWhen\":\"Created\",\"conditions\":[{\"conditionType\":\"AutomationRuleCondition\"},{\"conditionType\":\"AutomationRuleCondition\"},{\"conditionType\":\"AutomationRuleCondition\"},{\"conditionType\":\"AutomationRuleCondition\"}]},\"actions\":[{\"actionType\":\"AutomationRuleAction\",\"order\":509063673}],\"lastModifiedTimeUtc\":\"2021-03-30T18:23:35Z\",\"createdTimeUtc\":\"2021-06-27T01:07:59Z\",\"lastModifiedBy\":{\"email\":\"ztk\",\"name\":\"ivz\",\"objectId\":\"6650a3de-1dae-444d-bfaa-367df9c885fa\",\"userPrincipalName\":\"mbrygmw\"},\"createdBy\":{\"email\":\"osiqsykqfdqwdrtx\",\"name\":\"daglmrcok\",\"objectId\":\"7046a32e-1058-4b8e-a626-34ad94697070\",\"userPrincipalName\":\"rtkou\"}},\"etag\":\"siywhubymfpopi\",\"id\":\"ebqnnfy\",\"name\":\"tkqowsd\",\"type\":\"khczygpm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AutomationRule response = manager.automationRules()
            .define("aqipmnxclfrsbzrn")
            .withExistingWorkspace("ygnbknhjgclxaxwc", "faspsdzkucszghd")
            .withDisplayName("u")
            .withOrder(1040404447)
            .withTriggeringLogic(new AutomationRuleTriggeringLogic().withIsEnabled(false)
                .withExpirationTimeUtc(OffsetDateTime.parse("2021-06-27T05:35:43Z"))
                .withTriggersOn(TriggersOn.ALERTS)
                .withTriggersWhen(TriggersWhen.UPDATED)
                .withConditions(Arrays.asList(new AutomationRuleCondition(), new AutomationRuleCondition(),
                    new AutomationRuleCondition())))
            .withActions(Arrays.asList(new AutomationRuleAction().withOrder(500362290)))
            .withEtag("mofbnivd")
            .create();

        Assertions.assertEquals("siywhubymfpopi", response.etag());
        Assertions.assertEquals("ceecvjwyu", response.displayName());
        Assertions.assertEquals(1949694958, response.order());
        Assertions.assertEquals(true, response.triggeringLogic().isEnabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-14T21:24:49Z"),
            response.triggeringLogic().expirationTimeUtc());
        Assertions.assertEquals(TriggersOn.ALERTS, response.triggeringLogic().triggersOn());
        Assertions.assertEquals(TriggersWhen.CREATED, response.triggeringLogic().triggersWhen());
        Assertions.assertEquals(509063673, response.actions().get(0).order());
    }
}
