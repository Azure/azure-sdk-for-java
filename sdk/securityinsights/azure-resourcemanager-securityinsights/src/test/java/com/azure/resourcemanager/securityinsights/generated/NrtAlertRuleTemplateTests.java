// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.NrtAlertRuleTemplate;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NrtAlertRuleTemplateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NrtAlertRuleTemplate model = BinaryData.fromString(
            "{\"kind\":\"NRT\",\"properties\":{\"query\":\"tjxophgerhsmv\",\"severity\":\"Low\",\"version\":\"wzm\",\"customDetails\":{\"ysfn\":\"ri\",\"rympmlq\":\"msqywwwmhkruwae\",\"zduewihapfjii\":\"in\"},\"entityMappings\":[{\"entityType\":\"Malware\",\"fieldMappings\":[{\"identifier\":\"iej\",\"columnName\":\"cl\"},{\"identifier\":\"edfsbwc\",\"columnName\":\"vbvzipbwxgo\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"zp\",\"alertDescriptionFormat\":\"dmskxknpdgzigjsu\",\"alertTacticsColumnName\":\"whgsaodkww\",\"alertSeverityColumnName\":\"afoctohz\"},\"eventGroupingSettings\":{\"aggregationKind\":\"AlertPerResult\"},\"tactics\":[\"CredentialAccess\",\"Collection\",\"InitialAccess\",\"CommandAndControl\"],\"techniques\":[\"kerv\",\"choadhrsxqv\",\"vspabdsrgfajgl\",\"rsubklrxhjnl\"],\"alertRulesCreatedByTemplateCount\":1757939853,\"lastUpdatedDateUTC\":\"2021-11-14T20:36:47Z\",\"createdDateUTC\":\"2021-05-11T16:42:27Z\",\"description\":\"ydi\",\"displayName\":\"qkwaruwd\",\"requiredDataConnectors\":[{\"connectorId\":\"xoebwg\",\"dataTypes\":[\"ibanb\",\"upwtz\"]},{\"connectorId\":\"aklozk\",\"dataTypes\":[\"rpejp\",\"ssanbtttkgsuxun\"]},{\"connectorId\":\"wgkpjhboyikebh\",\"dataTypes\":[\"slgwlokhueoij\"]}],\"status\":\"Installed\"},\"id\":\"ypzqzufgsyfej\",\"name\":\"vdwtfxptpqayamk\",\"type\":\"cf\"}")
            .toObject(NrtAlertRuleTemplate.class);
        Assertions.assertEquals("tjxophgerhsmv", model.query());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals("wzm", model.version());
        Assertions.assertEquals("ri", model.customDetails().get("ysfn"));
        Assertions.assertEquals(EntityMappingType.MALWARE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("iej", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("cl", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("zp", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("dmskxknpdgzigjsu", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("whgsaodkww", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("afoctohz", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals(AttackTactic.CREDENTIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("kerv", model.techniques().get(0));
        Assertions.assertEquals(1757939853, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("ydi", model.description());
        Assertions.assertEquals("qkwaruwd", model.displayName());
        Assertions.assertEquals("xoebwg", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("ibanb", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.INSTALLED, model.status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NrtAlertRuleTemplate model = new NrtAlertRuleTemplate().withQuery("tjxophgerhsmv")
            .withSeverity(AlertSeverity.LOW)
            .withVersion("wzm")
            .withCustomDetails(mapOf("ysfn", "ri", "rympmlq", "msqywwwmhkruwae", "zduewihapfjii", "in"))
            .withEntityMappings(Arrays.asList(new EntityMapping().withEntityType(EntityMappingType.MALWARE)
                .withFieldMappings(Arrays.asList(new FieldMapping().withIdentifier("iej").withColumnName("cl"),
                    new FieldMapping().withIdentifier("edfsbwc").withColumnName("vbvzipbwxgo")))))
            .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("zp")
                .withAlertDescriptionFormat("dmskxknpdgzigjsu")
                .withAlertTacticsColumnName("whgsaodkww")
                .withAlertSeverityColumnName("afoctohz"))
            .withEventGroupingSettings(
                new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.ALERT_PER_RESULT))
            .withTactics(Arrays.asList(AttackTactic.CREDENTIAL_ACCESS, AttackTactic.COLLECTION,
                AttackTactic.INITIAL_ACCESS, AttackTactic.COMMAND_AND_CONTROL))
            .withTechniques(Arrays.asList("kerv", "choadhrsxqv", "vspabdsrgfajgl", "rsubklrxhjnl"))
            .withAlertRulesCreatedByTemplateCount(1757939853)
            .withDescription("ydi")
            .withDisplayName("qkwaruwd")
            .withRequiredDataConnectors(Arrays.asList(
                new AlertRuleTemplateDataSource().withConnectorId("xoebwg")
                    .withDataTypes(Arrays.asList("ibanb", "upwtz")),
                new AlertRuleTemplateDataSource().withConnectorId("aklozk")
                    .withDataTypes(Arrays.asList("rpejp", "ssanbtttkgsuxun")),
                new AlertRuleTemplateDataSource().withConnectorId("wgkpjhboyikebh")
                    .withDataTypes(Arrays.asList("slgwlokhueoij"))))
            .withStatus(TemplateStatus.INSTALLED);
        model = BinaryData.fromObject(model).toObject(NrtAlertRuleTemplate.class);
        Assertions.assertEquals("tjxophgerhsmv", model.query());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals("wzm", model.version());
        Assertions.assertEquals("ri", model.customDetails().get("ysfn"));
        Assertions.assertEquals(EntityMappingType.MALWARE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("iej", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("cl", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("zp", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("dmskxknpdgzigjsu", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("whgsaodkww", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("afoctohz", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals(AttackTactic.CREDENTIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("kerv", model.techniques().get(0));
        Assertions.assertEquals(1757939853, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("ydi", model.description());
        Assertions.assertEquals("qkwaruwd", model.displayName());
        Assertions.assertEquals("xoebwg", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("ibanb", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.INSTALLED, model.status());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
