// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.ScheduledAlertRuleTemplate;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleTemplateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleTemplate model = BinaryData.fromString(
            "{\"kind\":\"Scheduled\",\"properties\":{\"alertRulesCreatedByTemplateCount\":457601816,\"createdDateUTC\":\"2021-08-06T12:05:04Z\",\"lastUpdatedDateUTC\":\"2021-03-13T09:32:28Z\",\"description\":\"akxhysowlj\",\"displayName\":\"lkbectvtfjmskd\",\"requiredDataConnectors\":[{\"connectorId\":\"iubavlzwpvgm\",\"dataTypes\":[\"kzaz\",\"gokedgjqafkm\",\"rokzrthqetwpq\"]},{\"connectorId\":\"vaozn\",\"dataTypes\":[\"xiezeagmceit\",\"ugedh\"]},{\"connectorId\":\"jstlzmblsyj\",\"dataTypes\":[\"lctaeb\",\"syrled\"]}],\"status\":\"NotAvailable\",\"query\":\"tb\",\"queryFrequency\":\"PT47H33M23S\",\"queryPeriod\":\"PT214H41M32S\",\"severity\":\"Low\",\"triggerOperator\":\"LessThan\",\"triggerThreshold\":2021179432,\"tactics\":[\"Persistence\",\"Execution\",\"Execution\",\"Persistence\"],\"techniques\":[\"hxlzsxez\",\"p\",\"kwaaesk\"],\"version\":\"jlpzeqtoyrp\",\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"customDetails\":{\"btmkekxpkzwaq\":\"mllpquevhamfowg\",\"idu\":\"ofqovchiqbplv\",\"yihpqadagrh\":\"ztekxbyjgmsfep\",\"jfowxwy\":\"dicxdw\"},\"entityMappings\":[{\"entityType\":\"URL\",\"fieldMappings\":[{\"identifier\":\"ipcukdveks\",\"columnName\":\"hoduchvlscrd\"},{\"identifier\":\"bfdyjduss\",\"columnName\":\"szekbh\"},{\"identifier\":\"kaaggkreh\",\"columnName\":\"rnuybffljfii\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"oags\",\"alertDescriptionFormat\":\"aadusrexxfa\",\"alertTacticsColumnName\":\"qwudoh\",\"alertSeverityColumnName\":\"lfmn\"}},\"id\":\"kpsimsfeypofqp\",\"name\":\"bh\",\"type\":\"qgsdr\"}")
            .toObject(ScheduledAlertRuleTemplate.class);
        Assertions.assertEquals(457601816, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("akxhysowlj", model.description());
        Assertions.assertEquals("lkbectvtfjmskd", model.displayName());
        Assertions.assertEquals("iubavlzwpvgm", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("kzaz", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.NOT_AVAILABLE, model.status());
        Assertions.assertEquals("tb", model.query());
        Assertions.assertEquals(Duration.parse("PT47H33M23S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT214H41M32S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(2021179432, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.PERSISTENCE, model.tactics().get(0));
        Assertions.assertEquals("hxlzsxez", model.techniques().get(0));
        Assertions.assertEquals("jlpzeqtoyrp", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("mllpquevhamfowg", model.customDetails().get("btmkekxpkzwaq"));
        Assertions.assertEquals(EntityMappingType.URL, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("ipcukdveks", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("hoduchvlscrd", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("oags", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("aadusrexxfa", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("qwudoh", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("lfmn", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleTemplate model
            = new ScheduledAlertRuleTemplate().withAlertRulesCreatedByTemplateCount(457601816)
                .withDescription("akxhysowlj")
                .withDisplayName("lkbectvtfjmskd")
                .withRequiredDataConnectors(Arrays.asList(
                    new AlertRuleTemplateDataSource().withConnectorId("iubavlzwpvgm")
                        .withDataTypes(Arrays.asList("kzaz", "gokedgjqafkm", "rokzrthqetwpq")),
                    new AlertRuleTemplateDataSource().withConnectorId("vaozn")
                        .withDataTypes(Arrays.asList("xiezeagmceit", "ugedh")),
                    new AlertRuleTemplateDataSource().withConnectorId("jstlzmblsyj")
                        .withDataTypes(Arrays.asList("lctaeb", "syrled"))))
                .withStatus(TemplateStatus.NOT_AVAILABLE)
                .withQuery("tb")
                .withQueryFrequency(Duration.parse("PT47H33M23S"))
                .withQueryPeriod(Duration.parse("PT214H41M32S"))
                .withSeverity(AlertSeverity.LOW)
                .withTriggerOperator(TriggerOperator.LESS_THAN)
                .withTriggerThreshold(2021179432)
                .withTactics(Arrays.asList(AttackTactic.PERSISTENCE, AttackTactic.EXECUTION, AttackTactic.EXECUTION,
                    AttackTactic.PERSISTENCE))
                .withTechniques(Arrays.asList("hxlzsxez", "p", "kwaaesk"))
                .withVersion("jlpzeqtoyrp")
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT))
                .withCustomDetails(mapOf("btmkekxpkzwaq", "mllpquevhamfowg", "idu", "ofqovchiqbplv", "yihpqadagrh",
                    "ztekxbyjgmsfep", "jfowxwy", "dicxdw"))
                .withEntityMappings(
                    Arrays.asList(new EntityMapping().withEntityType(EntityMappingType.URL)
                        .withFieldMappings(Arrays.asList(
                            new FieldMapping().withIdentifier("ipcukdveks").withColumnName("hoduchvlscrd"),
                            new FieldMapping().withIdentifier("bfdyjduss").withColumnName("szekbh"),
                            new FieldMapping().withIdentifier("kaaggkreh").withColumnName("rnuybffljfii")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("oags")
                    .withAlertDescriptionFormat("aadusrexxfa")
                    .withAlertTacticsColumnName("qwudoh")
                    .withAlertSeverityColumnName("lfmn"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleTemplate.class);
        Assertions.assertEquals(457601816, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("akxhysowlj", model.description());
        Assertions.assertEquals("lkbectvtfjmskd", model.displayName());
        Assertions.assertEquals("iubavlzwpvgm", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("kzaz", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.NOT_AVAILABLE, model.status());
        Assertions.assertEquals("tb", model.query());
        Assertions.assertEquals(Duration.parse("PT47H33M23S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT214H41M32S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(2021179432, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.PERSISTENCE, model.tactics().get(0));
        Assertions.assertEquals("hxlzsxez", model.techniques().get(0));
        Assertions.assertEquals("jlpzeqtoyrp", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("mllpquevhamfowg", model.customDetails().get("btmkekxpkzwaq"));
        Assertions.assertEquals(EntityMappingType.URL, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("ipcukdveks", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("hoduchvlscrd", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("oags", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("aadusrexxfa", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("qwudoh", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("lfmn", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
