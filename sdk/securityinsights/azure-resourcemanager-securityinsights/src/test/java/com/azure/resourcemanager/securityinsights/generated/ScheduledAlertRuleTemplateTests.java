// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.ScheduledAlertRuleTemplate;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleTemplateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleTemplate model = BinaryData.fromString(
            "{\"kind\":\"Scheduled\",\"properties\":{\"alertRulesCreatedByTemplateCount\":1311687390,\"createdDateUTC\":\"2021-05-12T20:14:31Z\",\"lastUpdatedDateUTC\":\"2021-08-20T10:37:04Z\",\"description\":\"r\",\"displayName\":\"eranokqgukkjqnv\",\"requiredDataConnectors\":[{\"connectorId\":\"laxxulc\",\"dataTypes\":[\"dosfjbjsvgjrw\",\"r\",\"vyc\",\"t\"]},{\"connectorId\":\"lxgccknfnwmbtm\",\"dataTypes\":[\"vjdhttzaefedxih\",\"hrphkmcrjdqn\",\"dfzpbgtgkylkdg\"]}],\"status\":\"Installed\",\"query\":\"uutlwxezwzhok\",\"queryFrequency\":\"PT8H14M23S\",\"queryPeriod\":\"PT58H5M9S\",\"severity\":\"Low\",\"triggerOperator\":\"LessThan\",\"triggerThreshold\":1214606185,\"tactics\":[\"ImpairProcessControl\",\"CommandAndControl\"],\"techniques\":[\"ifhpf\",\"oajvgcxtxjcs\",\"eafidltugsresm\",\"ssjhoiftxfkf\"],\"version\":\"gpr\",\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"customDetails\":{\"qtgdqohmcwsl\":\"ucb\",\"tpwb\":\"riz\",\"llibphbqzmizak\":\"a\",\"jpdn\":\"kan\"},\"entityMappings\":[{\"entityType\":\"File\",\"fieldMappings\":[{\"identifier\":\"hjlmu\",\"columnName\":\"xprimrsop\"},{\"identifier\":\"ecj\",\"columnName\":\"islstv\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"lwxdzaum\",\"alertDescriptionFormat\":\"oohgu\",\"alertTacticsColumnName\":\"uzboyjathw\",\"alertSeverityColumnName\":\"olbaemwmdx\"}},\"id\":\"bwjscjpahlxveab\",\"name\":\"qxnmwmqt\",\"type\":\"bxyijddtvq\"}")
            .toObject(ScheduledAlertRuleTemplate.class);
        Assertions.assertEquals(1311687390, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("r", model.description());
        Assertions.assertEquals("eranokqgukkjqnv", model.displayName());
        Assertions.assertEquals("laxxulc", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("dosfjbjsvgjrw", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.INSTALLED, model.status());
        Assertions.assertEquals("uutlwxezwzhok", model.query());
        Assertions.assertEquals(Duration.parse("PT8H14M23S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT58H5M9S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(1214606185, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.IMPAIR_PROCESS_CONTROL, model.tactics().get(0));
        Assertions.assertEquals("ifhpf", model.techniques().get(0));
        Assertions.assertEquals("gpr", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("ucb", model.customDetails().get("qtgdqohmcwsl"));
        Assertions.assertEquals(EntityMappingType.FILE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("hjlmu", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("xprimrsop", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("lwxdzaum", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("oohgu", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("uzboyjathw", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("olbaemwmdx", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleTemplate model = new ScheduledAlertRuleTemplate()
            .withAlertRulesCreatedByTemplateCount(1311687390)
            .withDescription("r")
            .withDisplayName("eranokqgukkjqnv")
            .withRequiredDataConnectors(Arrays.asList(
                new AlertRuleTemplateDataSource().withConnectorId("laxxulc")
                    .withDataTypes(Arrays.asList("dosfjbjsvgjrw", "r", "vyc", "t")),
                new AlertRuleTemplateDataSource().withConnectorId("lxgccknfnwmbtm")
                    .withDataTypes(Arrays.asList("vjdhttzaefedxih", "hrphkmcrjdqn", "dfzpbgtgkylkdg"))))
            .withStatus(TemplateStatus.INSTALLED)
            .withQuery("uutlwxezwzhok")
            .withQueryFrequency(Duration.parse("PT8H14M23S"))
            .withQueryPeriod(Duration.parse("PT58H5M9S"))
            .withSeverity(AlertSeverity.LOW)
            .withTriggerOperator(TriggerOperator.LESS_THAN)
            .withTriggerThreshold(1214606185)
            .withTactics(Arrays.asList(AttackTactic.IMPAIR_PROCESS_CONTROL, AttackTactic.COMMAND_AND_CONTROL))
            .withTechniques(Arrays.asList("ifhpf", "oajvgcxtxjcs", "eafidltugsresm", "ssjhoiftxfkf"))
            .withVersion("gpr")
            .withEventGroupingSettings(
                new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT))
            .withCustomDetails(mapOf("qtgdqohmcwsl", "ucb", "tpwb", "riz", "llibphbqzmizak", "a", "jpdn", "kan"))
            .withEntityMappings(Arrays.asList(new EntityMapping().withEntityType(EntityMappingType.FILE)
                .withFieldMappings(Arrays.asList(new FieldMapping().withIdentifier("hjlmu").withColumnName("xprimrsop"),
                    new FieldMapping().withIdentifier("ecj").withColumnName("islstv")))))
            .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("lwxdzaum")
                .withAlertDescriptionFormat("oohgu")
                .withAlertTacticsColumnName("uzboyjathw")
                .withAlertSeverityColumnName("olbaemwmdx"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleTemplate.class);
        Assertions.assertEquals(1311687390, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("r", model.description());
        Assertions.assertEquals("eranokqgukkjqnv", model.displayName());
        Assertions.assertEquals("laxxulc", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("dosfjbjsvgjrw", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.INSTALLED, model.status());
        Assertions.assertEquals("uutlwxezwzhok", model.query());
        Assertions.assertEquals(Duration.parse("PT8H14M23S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT58H5M9S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(1214606185, model.triggerThreshold());
        Assertions.assertEquals(AttackTactic.IMPAIR_PROCESS_CONTROL, model.tactics().get(0));
        Assertions.assertEquals("ifhpf", model.techniques().get(0));
        Assertions.assertEquals("gpr", model.version());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("ucb", model.customDetails().get("qtgdqohmcwsl"));
        Assertions.assertEquals(EntityMappingType.FILE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("hjlmu", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("xprimrsop", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("lwxdzaum", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("oohgu", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("uzboyjathw", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("olbaemwmdx", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
