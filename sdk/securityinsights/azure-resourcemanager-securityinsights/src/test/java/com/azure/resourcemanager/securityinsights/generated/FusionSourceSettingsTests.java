// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.FusionSourceSettings;
import com.azure.resourcemanager.securityinsights.models.FusionSourceSubTypeSetting;
import com.azure.resourcemanager.securityinsights.models.FusionSubTypeSeverityFilter;
import com.azure.resourcemanager.securityinsights.models.FusionSubTypeSeverityFiltersItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FusionSourceSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FusionSourceSettings model = BinaryData.fromString(
            "{\"enabled\":false,\"sourceName\":\"gqtagd\",\"sourceSubTypes\":[{\"enabled\":false,\"sourceSubTypeName\":\"soljome\",\"sourceSubTypeDisplayName\":\"fycnlb\",\"severityFilters\":{\"isSupported\":true,\"filters\":[{\"severity\":\"Informational\",\"enabled\":false}]}}]}")
            .toObject(FusionSourceSettings.class);
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("gqtagd", model.sourceName());
        Assertions.assertEquals(false, model.sourceSubTypes().get(0).enabled());
        Assertions.assertEquals("soljome", model.sourceSubTypes().get(0).sourceSubTypeName());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL,
            model.sourceSubTypes().get(0).severityFilters().filters().get(0).severity());
        Assertions.assertEquals(false, model.sourceSubTypes().get(0).severityFilters().filters().get(0).enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FusionSourceSettings model = new FusionSourceSettings().withEnabled(false)
            .withSourceName("gqtagd")
            .withSourceSubTypes(Arrays.asList(new FusionSourceSubTypeSetting().withEnabled(false)
                .withSourceSubTypeName("soljome")
                .withSeverityFilters(new FusionSubTypeSeverityFilter().withFilters(
                    Arrays.asList(new FusionSubTypeSeverityFiltersItem().withSeverity(AlertSeverity.INFORMATIONAL)
                        .withEnabled(false))))));
        model = BinaryData.fromObject(model).toObject(FusionSourceSettings.class);
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("gqtagd", model.sourceName());
        Assertions.assertEquals(false, model.sourceSubTypes().get(0).enabled());
        Assertions.assertEquals("soljome", model.sourceSubTypes().get(0).sourceSubTypeName());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL,
            model.sourceSubTypes().get(0).severityFilters().filters().get(0).severity());
        Assertions.assertEquals(false, model.sourceSubTypes().get(0).severityFilters().filters().get(0).enabled());
    }
}
