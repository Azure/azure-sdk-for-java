// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.IncidentInner;
import com.azure.resourcemanager.securityinsights.fluent.models.TeamInformationInner;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentLabel;
import com.azure.resourcemanager.securityinsights.models.IncidentList;
import com.azure.resourcemanager.securityinsights.models.IncidentOwnerInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class IncidentListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IncidentList model = BinaryData.fromString(
            "{\"nextLink\":\"m\",\"value\":[{\"properties\":{\"additionalData\":{\"alertsCount\":256938636,\"bookmarksCount\":1748959674,\"commentsCount\":107951618,\"alertProductNames\":[\"xcpjuisavokqdzf\",\"azivjlfrqttbajl\",\"atnwxyiopi\"],\"providerIncidentUrl\":\"qqfkuv\",\"tactics\":[\"InitialAccess\",\"Discovery\"],\"techniques\":[\"igovi\",\"rxkpmloazuruoc\",\"goorbteo\"]},\"classification\":\"BenignPositive\",\"classificationComment\":\"jxakv\",\"classificationReason\":\"IncorrectAlertLogic\",\"createdTimeUtc\":\"2021-10-14T00:29:48Z\",\"description\":\"r\",\"firstActivityTimeUtc\":\"2021-01-13T10:59:26Z\",\"incidentUrl\":\"yw\",\"incidentNumber\":1226938011,\"labels\":[{\"labelName\":\"xnyed\",\"labelType\":\"AutoAssigned\"}],\"providerName\":\"vudtjuewbcihx\",\"providerIncidentId\":\"whcjyxcc\",\"lastActivityTimeUtc\":\"2021-08-23T00:43:43Z\",\"lastModifiedTimeUtc\":\"2020-12-23T12:08:57Z\",\"owner\":{\"email\":\"kkudzp\",\"assignedTo\":\"wjplma\",\"objectId\":\"5ba8bfc5-b0c1-4078-8e73-58197f46e630\",\"userPrincipalName\":\"cyohpfkyrkdbd\",\"ownerType\":\"User\"},\"relatedAnalyticRuleIds\":[\"jkmnwq\",\"nobaiyhddviacegf\"],\"severity\":\"High\",\"status\":\"Active\",\"teamInformation\":{\"teamId\":\"pmvmemfnczdwvv\",\"primaryChannelUrl\":\"lxlllchpo\",\"teamCreationTimeUtc\":\"2021-05-31T08:55:57Z\",\"name\":\"vwrdnhfukuvsj\",\"description\":\"wsmystuluqypf\"},\"title\":\"vlerchpqbmfpjba\"},\"etag\":\"idfcxsspuunnoxyh\",\"id\":\"g\",\"name\":\"ddrihpf\",\"type\":\"oqcaaewdaomdj\"}]}")
            .toObject(IncidentList.class);
        Assertions.assertEquals("idfcxsspuunnoxyh", model.value().get(0).etag());
        Assertions.assertEquals(IncidentClassification.BENIGN_POSITIVE, model.value().get(0).classification());
        Assertions.assertEquals("jxakv", model.value().get(0).classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.INCORRECT_ALERT_LOGIC,
            model.value().get(0).classificationReason());
        Assertions.assertEquals("r", model.value().get(0).description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T10:59:26Z"),
            model.value().get(0).firstActivityTimeUtc());
        Assertions.assertEquals("xnyed", model.value().get(0).labels().get(0).labelName());
        Assertions.assertEquals("vudtjuewbcihx", model.value().get(0).providerName());
        Assertions.assertEquals("whcjyxcc", model.value().get(0).providerIncidentId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T00:43:43Z"),
            model.value().get(0).lastActivityTimeUtc());
        Assertions.assertEquals("kkudzp", model.value().get(0).owner().email());
        Assertions.assertEquals("wjplma", model.value().get(0).owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("5ba8bfc5-b0c1-4078-8e73-58197f46e630"),
            model.value().get(0).owner().objectId());
        Assertions.assertEquals("cyohpfkyrkdbd", model.value().get(0).owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.USER, model.value().get(0).owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.HIGH, model.value().get(0).severity());
        Assertions.assertEquals(IncidentStatus.ACTIVE, model.value().get(0).status());
        Assertions.assertEquals("vlerchpqbmfpjba", model.value().get(0).title());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IncidentList model = new IncidentList().withValue(Arrays.asList(new IncidentInner().withEtag("idfcxsspuunnoxyh")
            .withClassification(IncidentClassification.BENIGN_POSITIVE)
            .withClassificationComment("jxakv")
            .withClassificationReason(IncidentClassificationReason.INCORRECT_ALERT_LOGIC)
            .withDescription("r")
            .withFirstActivityTimeUtc(OffsetDateTime.parse("2021-01-13T10:59:26Z"))
            .withLabels(Arrays.asList(new IncidentLabel().withLabelName("xnyed")))
            .withProviderName("vudtjuewbcihx")
            .withProviderIncidentId("whcjyxcc")
            .withLastActivityTimeUtc(OffsetDateTime.parse("2021-08-23T00:43:43Z"))
            .withOwner(new IncidentOwnerInfo().withEmail("kkudzp")
                .withAssignedTo("wjplma")
                .withObjectId(UUID.fromString("5ba8bfc5-b0c1-4078-8e73-58197f46e630"))
                .withUserPrincipalName("cyohpfkyrkdbd")
                .withOwnerType(OwnerType.USER))
            .withSeverity(IncidentSeverity.HIGH)
            .withStatus(IncidentStatus.ACTIVE)
            .withTeamInformation(new TeamInformationInner())
            .withTitle("vlerchpqbmfpjba")));
        model = BinaryData.fromObject(model).toObject(IncidentList.class);
        Assertions.assertEquals("idfcxsspuunnoxyh", model.value().get(0).etag());
        Assertions.assertEquals(IncidentClassification.BENIGN_POSITIVE, model.value().get(0).classification());
        Assertions.assertEquals("jxakv", model.value().get(0).classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.INCORRECT_ALERT_LOGIC,
            model.value().get(0).classificationReason());
        Assertions.assertEquals("r", model.value().get(0).description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T10:59:26Z"),
            model.value().get(0).firstActivityTimeUtc());
        Assertions.assertEquals("xnyed", model.value().get(0).labels().get(0).labelName());
        Assertions.assertEquals("vudtjuewbcihx", model.value().get(0).providerName());
        Assertions.assertEquals("whcjyxcc", model.value().get(0).providerIncidentId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T00:43:43Z"),
            model.value().get(0).lastActivityTimeUtc());
        Assertions.assertEquals("kkudzp", model.value().get(0).owner().email());
        Assertions.assertEquals("wjplma", model.value().get(0).owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("5ba8bfc5-b0c1-4078-8e73-58197f46e630"),
            model.value().get(0).owner().objectId());
        Assertions.assertEquals("cyohpfkyrkdbd", model.value().get(0).owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.USER, model.value().get(0).owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.HIGH, model.value().get(0).severity());
        Assertions.assertEquals(IncidentStatus.ACTIVE, model.value().get(0).status());
        Assertions.assertEquals("vlerchpqbmfpjba", model.value().get(0).title());
    }
}
