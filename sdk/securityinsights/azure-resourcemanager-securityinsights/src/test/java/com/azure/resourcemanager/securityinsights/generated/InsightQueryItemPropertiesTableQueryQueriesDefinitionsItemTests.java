// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem model = BinaryData.fromString(
            "{\"filter\":\"diswxspvckojazb\",\"summarize\":\"spftesubzpv\",\"project\":\"dylytcovq\",\"linkColumnsDefinitions\":[{\"projectedName\":\"rf\",\"Query\":\"d\"}]}")
            .toObject(InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem.class);
        Assertions.assertEquals("diswxspvckojazb", model.filter());
        Assertions.assertEquals("spftesubzpv", model.summarize());
        Assertions.assertEquals("dylytcovq", model.project());
        Assertions.assertEquals("rf", model.linkColumnsDefinitions().get(0).projectedName());
        Assertions.assertEquals("d", model.linkColumnsDefinitions().get(0).query());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem model
            = new InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem().withFilter("diswxspvckojazb")
                .withSummarize("spftesubzpv")
                .withProject("dylytcovq")
                .withLinkColumnsDefinitions(
                    Arrays.asList(new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem()
                        .withProjectedName("rf")
                        .withQuery("d")));
        model = BinaryData.fromObject(model).toObject(InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem.class);
        Assertions.assertEquals("diswxspvckojazb", model.filter());
        Assertions.assertEquals("spftesubzpv", model.summarize());
        Assertions.assertEquals("dylytcovq", model.project());
        Assertions.assertEquals("rf", model.linkColumnsDefinitions().get(0).projectedName());
        Assertions.assertEquals("d", model.linkColumnsDefinitions().get(0).query());
    }
}
