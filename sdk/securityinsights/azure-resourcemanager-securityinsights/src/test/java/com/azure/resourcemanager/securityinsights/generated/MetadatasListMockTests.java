// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.Kind;
import com.azure.resourcemanager.securityinsights.models.MetadataModel;
import com.azure.resourcemanager.securityinsights.models.Operator;
import com.azure.resourcemanager.securityinsights.models.SourceKind;
import com.azure.resourcemanager.securityinsights.models.SupportTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MetadatasListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"contentId\":\"msgpywdibu\",\"parentId\":\"vnrgalv\",\"version\":\"hry\",\"kind\":\"AzureFunction\",\"source\":{\"kind\":\"Solution\",\"name\":\"nuubxcwojtupqd\",\"sourceId\":\"py\"},\"author\":{\"name\":\"ffif\",\"email\":\"gtdow\",\"link\":\"mwefcbyb\"},\"support\":{\"tier\":\"Microsoft\",\"name\":\"tczwjcujyznv\",\"email\":\"jqdjlgkuirxxeuwi\",\"link\":\"rcvnfg\"},\"dependencies\":{\"contentId\":\"iwxohktxa\",\"kind\":\"AnalyticsRuleTemplate\",\"version\":\"dbqjnye\",\"name\":\"vxgxqqqa\",\"operator\":\"AND\",\"criteria\":[{\"contentId\":\"ftpvevtarp\",\"kind\":\"Watchlist\",\"version\":\"liiqeanu\",\"name\":\"jno\",\"operator\":\"OR\",\"criteria\":[{}]},{\"contentId\":\"gseb\",\"kind\":\"WorkbookTemplate\",\"version\":\"tevaebzm\",\"name\":\"whrjkejvaedogzo\",\"operator\":\"OR\",\"criteria\":[{},{},{},{}]},{\"contentId\":\"gjogcphivfhrmten\",\"kind\":\"Watchlist\",\"version\":\"oearywusrjz\",\"name\":\"trsyfezfsmyl\",\"operator\":\"OR\",\"criteria\":[{},{},{},{}]}]},\"categories\":{\"domains\":[\"mwtqil\",\"knnkyn\",\"s\"],\"verticals\":[\"fwhjfphfxaq\"]},\"providers\":[\"hjcwwva\",\"sckfavhk\"],\"customVersion\":\"wweifdy\",\"contentSchemaVersion\":\"oexnguwnrdpuzl\",\"icon\":\"hsujtggybsz\",\"threatAnalysisTactics\":[\"jxejpdcliqwzut\"],\"threatAnalysisTechniques\":[\"lrnhhjtvhqsz\"],\"previewImages\":[\"ovqmqcudptoqwr\",\"fckjthlokmx\",\"awfubkngejjxu\",\"owynj\"],\"previewImagesDark\":[\"zmxuktdrsjtmnk\"]},\"etag\":\"o\",\"id\":\"fzcfdtstiax\",\"name\":\"yrnuhcfhepisqb\",\"type\":\"mlroiommemsoqgb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<MetadataModel> response = manager.metadatas()
            .list("usdwmnrtvvbucn", "rovomep", "wsicvwqzoc", "f", 1078549484, 1017435786,
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("o", response.iterator().next().etag());
        Assertions.assertEquals("msgpywdibu", response.iterator().next().contentId());
        Assertions.assertEquals("vnrgalv", response.iterator().next().parentId());
        Assertions.assertEquals("hry", response.iterator().next().version());
        Assertions.assertEquals(Kind.AZURE_FUNCTION, response.iterator().next().kind());
        Assertions.assertEquals(SourceKind.SOLUTION, response.iterator().next().source().kind());
        Assertions.assertEquals("nuubxcwojtupqd", response.iterator().next().source().name());
        Assertions.assertEquals("py", response.iterator().next().source().sourceId());
        Assertions.assertEquals("ffif", response.iterator().next().author().name());
        Assertions.assertEquals("gtdow", response.iterator().next().author().email());
        Assertions.assertEquals("mwefcbyb", response.iterator().next().author().link());
        Assertions.assertEquals(SupportTier.MICROSOFT, response.iterator().next().support().tier());
        Assertions.assertEquals("tczwjcujyznv", response.iterator().next().support().name());
        Assertions.assertEquals("jqdjlgkuirxxeuwi", response.iterator().next().support().email());
        Assertions.assertEquals("rcvnfg", response.iterator().next().support().link());
        Assertions.assertEquals("iwxohktxa", response.iterator().next().dependencies().contentId());
        Assertions.assertEquals(Kind.ANALYTICS_RULE_TEMPLATE, response.iterator().next().dependencies().kind());
        Assertions.assertEquals("dbqjnye", response.iterator().next().dependencies().version());
        Assertions.assertEquals("vxgxqqqa", response.iterator().next().dependencies().name());
        Assertions.assertEquals(Operator.AND, response.iterator().next().dependencies().operator());
        Assertions.assertEquals("ftpvevtarp", response.iterator().next().dependencies().criteria().get(0).contentId());
        Assertions.assertEquals(Kind.WATCHLIST, response.iterator().next().dependencies().criteria().get(0).kind());
        Assertions.assertEquals("liiqeanu", response.iterator().next().dependencies().criteria().get(0).version());
        Assertions.assertEquals("jno", response.iterator().next().dependencies().criteria().get(0).name());
        Assertions.assertEquals(Operator.OR, response.iterator().next().dependencies().criteria().get(0).operator());
        Assertions.assertEquals("mwtqil", response.iterator().next().categories().domains().get(0));
        Assertions.assertEquals("fwhjfphfxaq", response.iterator().next().categories().verticals().get(0));
        Assertions.assertEquals("hjcwwva", response.iterator().next().providers().get(0));
        Assertions.assertEquals("wweifdy", response.iterator().next().customVersion());
        Assertions.assertEquals("oexnguwnrdpuzl", response.iterator().next().contentSchemaVersion());
        Assertions.assertEquals("hsujtggybsz", response.iterator().next().icon());
        Assertions.assertEquals("jxejpdcliqwzut", response.iterator().next().threatAnalysisTactics().get(0));
        Assertions.assertEquals("lrnhhjtvhqsz", response.iterator().next().threatAnalysisTechniques().get(0));
        Assertions.assertEquals("ovqmqcudptoqwr", response.iterator().next().previewImages().get(0));
        Assertions.assertEquals("zmxuktdrsjtmnk", response.iterator().next().previewImagesDark().get(0));
    }
}
