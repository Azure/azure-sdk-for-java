// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.IncidentInner;
import com.azure.resourcemanager.securityinsights.fluent.models.TeamInformationInner;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentLabel;
import com.azure.resourcemanager.securityinsights.models.IncidentOwnerInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class IncidentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IncidentInner model = BinaryData.fromString(
            "{\"properties\":{\"additionalData\":{\"alertsCount\":79492990,\"bookmarksCount\":1119660278,\"commentsCount\":785056478,\"alertProductNames\":[\"sgeivsiy\",\"zkdnc\",\"dxonbzoggculap\"],\"providerIncidentUrl\":\"y\",\"tactics\":[\"PreAttack\",\"LateralMovement\",\"InhibitResponseFunction\",\"Persistence\"],\"techniques\":[\"pnylb\",\"uajlyj\"]},\"classification\":\"BenignPositive\",\"classificationComment\":\"fqzhv\",\"classificationReason\":\"SuspiciousButExpected\",\"createdTimeUtc\":\"2021-08-18T06:30:53Z\",\"description\":\"mowuxrk\",\"firstActivityTimeUtc\":\"2021-08-28T09:36:55Z\",\"incidentUrl\":\"w\",\"incidentNumber\":1115124750,\"labels\":[{\"labelName\":\"ivwzjbhyzs\",\"labelType\":\"User\"},{\"labelName\":\"kambtrnegvmnvuqe\",\"labelType\":\"User\"},{\"labelName\":\"dspastjbkkdmfl\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"tmjlx\",\"labelType\":\"AutoAssigned\"}],\"providerName\":\"ozapeew\",\"providerIncidentId\":\"pxlktwkuziycsl\",\"lastActivityTimeUtc\":\"2021-06-28T05:31:47Z\",\"lastModifiedTimeUtc\":\"2021-08-14T04:43:23Z\",\"owner\":{\"email\":\"cktyh\",\"assignedTo\":\"qedcgzulwm\",\"objectId\":\"fcb6be16-db16-45de-a6c5-64cd3457e237\",\"userPrincipalName\":\"z\",\"ownerType\":\"Group\"},\"relatedAnalyticRuleIds\":[\"pglydz\",\"krvq\"],\"severity\":\"High\",\"status\":\"Closed\",\"teamInformation\":{\"teamId\":\"epr\",\"primaryChannelUrl\":\"t\",\"teamCreationTimeUtc\":\"2021-06-16T07:29:40Z\",\"name\":\"pzdm\",\"description\":\"zvfvaawz\"},\"title\":\"adflgzu\"},\"etag\":\"glae\",\"id\":\"ndtic\",\"name\":\"kpvzmlq\",\"type\":\"mldgxobfirc\"}")
            .toObject(IncidentInner.class);
        Assertions.assertEquals("glae", model.etag());
        Assertions.assertEquals(IncidentClassification.BENIGN_POSITIVE, model.classification());
        Assertions.assertEquals("fqzhv", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.SUSPICIOUS_BUT_EXPECTED, model.classificationReason());
        Assertions.assertEquals("mowuxrk", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T09:36:55Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("ivwzjbhyzs", model.labels().get(0).labelName());
        Assertions.assertEquals("ozapeew", model.providerName());
        Assertions.assertEquals("pxlktwkuziycsl", model.providerIncidentId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T05:31:47Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("cktyh", model.owner().email());
        Assertions.assertEquals("qedcgzulwm", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("fcb6be16-db16-45de-a6c5-64cd3457e237"), model.owner().objectId());
        Assertions.assertEquals("z", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.GROUP, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.HIGH, model.severity());
        Assertions.assertEquals(IncidentStatus.CLOSED, model.status());
        Assertions.assertEquals("adflgzu", model.title());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IncidentInner model = new IncidentInner().withEtag("glae")
            .withClassification(IncidentClassification.BENIGN_POSITIVE)
            .withClassificationComment("fqzhv")
            .withClassificationReason(IncidentClassificationReason.SUSPICIOUS_BUT_EXPECTED)
            .withDescription("mowuxrk")
            .withFirstActivityTimeUtc(OffsetDateTime.parse("2021-08-28T09:36:55Z"))
            .withLabels(Arrays.asList(new IncidentLabel().withLabelName("ivwzjbhyzs"),
                new IncidentLabel().withLabelName("kambtrnegvmnvuqe"),
                new IncidentLabel().withLabelName("dspastjbkkdmfl"), new IncidentLabel().withLabelName("tmjlx")))
            .withProviderName("ozapeew")
            .withProviderIncidentId("pxlktwkuziycsl")
            .withLastActivityTimeUtc(OffsetDateTime.parse("2021-06-28T05:31:47Z"))
            .withOwner(new IncidentOwnerInfo().withEmail("cktyh")
                .withAssignedTo("qedcgzulwm")
                .withObjectId(UUID.fromString("fcb6be16-db16-45de-a6c5-64cd3457e237"))
                .withUserPrincipalName("z")
                .withOwnerType(OwnerType.GROUP))
            .withSeverity(IncidentSeverity.HIGH)
            .withStatus(IncidentStatus.CLOSED)
            .withTeamInformation(new TeamInformationInner())
            .withTitle("adflgzu");
        model = BinaryData.fromObject(model).toObject(IncidentInner.class);
        Assertions.assertEquals("glae", model.etag());
        Assertions.assertEquals(IncidentClassification.BENIGN_POSITIVE, model.classification());
        Assertions.assertEquals("fqzhv", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.SUSPICIOUS_BUT_EXPECTED, model.classificationReason());
        Assertions.assertEquals("mowuxrk", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T09:36:55Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("ivwzjbhyzs", model.labels().get(0).labelName());
        Assertions.assertEquals("ozapeew", model.providerName());
        Assertions.assertEquals("pxlktwkuziycsl", model.providerIncidentId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T05:31:47Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("cktyh", model.owner().email());
        Assertions.assertEquals("qedcgzulwm", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("fcb6be16-db16-45de-a6c5-64cd3457e237"), model.owner().objectId());
        Assertions.assertEquals("z", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.GROUP, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.HIGH, model.severity());
        Assertions.assertEquals(IncidentStatus.CLOSED, model.status());
        Assertions.assertEquals("adflgzu", model.title());
    }
}
