// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.IncidentInner;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentLabel;
import com.azure.resourcemanager.securityinsights.models.IncidentOwnerInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class IncidentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IncidentInner model = BinaryData.fromString(
            "{\"properties\":{\"additionalData\":{\"alertsCount\":1288949880,\"bookmarksCount\":38028181,\"commentsCount\":1859867828,\"alertProductNames\":[\"agalpbuxwgipwhon\",\"wkgshwa\",\"kix\",\"bin\"],\"tactics\":[\"PreAttack\"]},\"classification\":\"TruePositive\",\"classificationComment\":\"rywn\",\"classificationReason\":\"InaccurateData\",\"createdTimeUtc\":\"2021-04-28T10:57:32Z\",\"description\":\"iyqzrnk\",\"firstActivityTimeUtc\":\"2021-04-18T03:15:34Z\",\"incidentUrl\":\"xlwhzlsicoh\",\"incidentNumber\":1969001145,\"labels\":[{\"labelName\":\"vlryavwhheunmmq\",\"labelType\":\"User\"}],\"lastActivityTimeUtc\":\"2021-05-31T23:19:13Z\",\"lastModifiedTimeUtc\":\"2021-09-15T07:07:36Z\",\"owner\":{\"email\":\"cukoklyaxuconu\",\"assignedTo\":\"zf\",\"objectId\":\"7669d900-4798-41a9-8c99-3dc89eac8fa5\",\"userPrincipalName\":\"ypewrmjmwvvjekt\",\"ownerType\":\"User\"},\"relatedAnalyticRuleIds\":[\"hwlrsf\",\"rzpwvlqdqgbiq\",\"lihkaetcktvfc\",\"vf\"],\"severity\":\"Informational\",\"status\":\"Closed\",\"title\":\"ymuctqhjfbebrj\"},\"etag\":\"erfuwuttt\",\"id\":\"vjrbirphxepcyvah\",\"name\":\"nljky\",\"type\":\"xjvuujqgidokg\"}")
            .toObject(IncidentInner.class);
        Assertions.assertEquals("erfuwuttt", model.etag());
        Assertions.assertEquals(IncidentClassification.TRUE_POSITIVE, model.classification());
        Assertions.assertEquals("rywn", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.INACCURATE_DATA, model.classificationReason());
        Assertions.assertEquals("iyqzrnk", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-18T03:15:34Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("vlryavwhheunmmq", model.labels().get(0).labelName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T23:19:13Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("cukoklyaxuconu", model.owner().email());
        Assertions.assertEquals("zf", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("7669d900-4798-41a9-8c99-3dc89eac8fa5"), model.owner().objectId());
        Assertions.assertEquals("ypewrmjmwvvjekt", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.USER, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(IncidentStatus.CLOSED, model.status());
        Assertions.assertEquals("ymuctqhjfbebrj", model.title());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IncidentInner model = new IncidentInner().withEtag("erfuwuttt")
            .withClassification(IncidentClassification.TRUE_POSITIVE)
            .withClassificationComment("rywn")
            .withClassificationReason(IncidentClassificationReason.INACCURATE_DATA)
            .withDescription("iyqzrnk")
            .withFirstActivityTimeUtc(OffsetDateTime.parse("2021-04-18T03:15:34Z"))
            .withLabels(Arrays.asList(new IncidentLabel().withLabelName("vlryavwhheunmmq")))
            .withLastActivityTimeUtc(OffsetDateTime.parse("2021-05-31T23:19:13Z"))
            .withOwner(new IncidentOwnerInfo().withEmail("cukoklyaxuconu")
                .withAssignedTo("zf")
                .withObjectId(UUID.fromString("7669d900-4798-41a9-8c99-3dc89eac8fa5"))
                .withUserPrincipalName("ypewrmjmwvvjekt")
                .withOwnerType(OwnerType.USER))
            .withSeverity(IncidentSeverity.INFORMATIONAL)
            .withStatus(IncidentStatus.CLOSED)
            .withTitle("ymuctqhjfbebrj");
        model = BinaryData.fromObject(model).toObject(IncidentInner.class);
        Assertions.assertEquals("erfuwuttt", model.etag());
        Assertions.assertEquals(IncidentClassification.TRUE_POSITIVE, model.classification());
        Assertions.assertEquals("rywn", model.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.INACCURATE_DATA, model.classificationReason());
        Assertions.assertEquals("iyqzrnk", model.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-18T03:15:34Z"), model.firstActivityTimeUtc());
        Assertions.assertEquals("vlryavwhheunmmq", model.labels().get(0).labelName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T23:19:13Z"), model.lastActivityTimeUtc());
        Assertions.assertEquals("cukoklyaxuconu", model.owner().email());
        Assertions.assertEquals("zf", model.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("7669d900-4798-41a9-8c99-3dc89eac8fa5"), model.owner().objectId());
        Assertions.assertEquals("ypewrmjmwvvjekt", model.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.USER, model.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(IncidentStatus.CLOSED, model.status());
        Assertions.assertEquals("ymuctqhjfbebrj", model.title());
    }
}
