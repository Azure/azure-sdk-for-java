// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.PermissionProviderScope;
import com.azure.resourcemanager.securityinsights.models.Permissions;
import com.azure.resourcemanager.securityinsights.models.PermissionsCustomsItem;
import com.azure.resourcemanager.securityinsights.models.PermissionsResourceProviderItem;
import com.azure.resourcemanager.securityinsights.models.ProviderName;
import com.azure.resourcemanager.securityinsights.models.RequiredPermissions;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PermissionsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Permissions model = BinaryData.fromString(
            "{\"resourceProvider\":[{\"provider\":\"Microsoft.OperationalInsights/workspaces\",\"permissionsDisplayText\":\"tiklsm\",\"providerDisplayName\":\"hql\",\"scope\":\"ResourceGroup\",\"requiredPermissions\":{\"action\":false,\"write\":false,\"read\":true,\"delete\":true}}],\"customs\":[{\"name\":\"bu\",\"description\":\"vqdorbccqcd\"},{\"name\":\"hojvlirkn\",\"description\":\"osa\"}]}")
            .toObject(Permissions.class);
        Assertions.assertEquals(ProviderName.MICROSOFT_OPERATIONAL_INSIGHTS_WORKSPACES,
            model.resourceProvider().get(0).provider());
        Assertions.assertEquals("tiklsm", model.resourceProvider().get(0).permissionsDisplayText());
        Assertions.assertEquals("hql", model.resourceProvider().get(0).providerDisplayName());
        Assertions.assertEquals(PermissionProviderScope.RESOURCE_GROUP, model.resourceProvider().get(0).scope());
        Assertions.assertEquals(false, model.resourceProvider().get(0).requiredPermissions().action());
        Assertions.assertEquals(false, model.resourceProvider().get(0).requiredPermissions().write());
        Assertions.assertEquals(true, model.resourceProvider().get(0).requiredPermissions().read());
        Assertions.assertEquals(true, model.resourceProvider().get(0).requiredPermissions().delete());
        Assertions.assertEquals("bu", model.customs().get(0).name());
        Assertions.assertEquals("vqdorbccqcd", model.customs().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Permissions model = new Permissions()
            .withResourceProvider(Arrays.asList(new PermissionsResourceProviderItem()
                .withProvider(ProviderName.MICROSOFT_OPERATIONAL_INSIGHTS_WORKSPACES)
                .withPermissionsDisplayText("tiklsm")
                .withProviderDisplayName("hql")
                .withScope(PermissionProviderScope.RESOURCE_GROUP)
                .withRequiredPermissions(
                    new RequiredPermissions().withAction(false).withWrite(false).withRead(true).withDelete(true))))
            .withCustoms(Arrays.asList(new PermissionsCustomsItem().withName("bu").withDescription("vqdorbccqcd"),
                new PermissionsCustomsItem().withName("hojvlirkn").withDescription("osa")));
        model = BinaryData.fromObject(model).toObject(Permissions.class);
        Assertions.assertEquals(ProviderName.MICROSOFT_OPERATIONAL_INSIGHTS_WORKSPACES,
            model.resourceProvider().get(0).provider());
        Assertions.assertEquals("tiklsm", model.resourceProvider().get(0).permissionsDisplayText());
        Assertions.assertEquals("hql", model.resourceProvider().get(0).providerDisplayName());
        Assertions.assertEquals(PermissionProviderScope.RESOURCE_GROUP, model.resourceProvider().get(0).scope());
        Assertions.assertEquals(false, model.resourceProvider().get(0).requiredPermissions().action());
        Assertions.assertEquals(false, model.resourceProvider().get(0).requiredPermissions().write());
        Assertions.assertEquals(true, model.resourceProvider().get(0).requiredPermissions().read());
        Assertions.assertEquals(true, model.resourceProvider().get(0).requiredPermissions().delete());
        Assertions.assertEquals("bu", model.customs().get(0).name());
        Assertions.assertEquals("vqdorbccqcd", model.customs().get(0).description());
    }
}
