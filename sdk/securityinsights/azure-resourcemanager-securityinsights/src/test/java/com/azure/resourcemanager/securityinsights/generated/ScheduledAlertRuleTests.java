// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetail;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.GroupingConfiguration;
import com.azure.resourcemanager.securityinsights.models.IncidentConfiguration;
import com.azure.resourcemanager.securityinsights.models.MatchingMethod;
import com.azure.resourcemanager.securityinsights.models.ScheduledAlertRule;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRule model = BinaryData.fromString(
            "{\"kind\":\"Scheduled\",\"properties\":{\"alertRuleTemplateName\":\"zgkrvqe\",\"templateVersion\":\"toepryu\",\"description\":\"wytpzdmovz\",\"displayName\":\"fvaawzqa\",\"enabled\":false,\"lastModifiedUtc\":\"2021-08-12T09:55:05Z\",\"suppressionDuration\":\"PT90H15M52S\",\"suppressionEnabled\":false,\"tactics\":[\"InitialAccess\",\"InhibitResponseFunction\"],\"techniques\":[\"cx\"],\"incidentConfiguration\":{\"createIncident\":false,\"groupingConfiguration\":{\"enabled\":false,\"reopenClosedIncident\":false,\"lookbackDuration\":\"PT157H29M48S\",\"matchingMethod\":\"AllEntities\",\"groupByEntities\":[\"URL\",\"SecurityGroup\",\"FileHash\"],\"groupByAlertDetails\":[\"DisplayName\",\"Severity\",\"Severity\"],\"groupByCustomDetails\":[\"bf\",\"rclnpkc\",\"ayzri\"]}},\"query\":\"hya\",\"queryFrequency\":\"PT53H1M13S\",\"queryPeriod\":\"PT47H45M53S\",\"severity\":\"Informational\",\"triggerOperator\":\"Equal\",\"triggerThreshold\":1339269194,\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"customDetails\":{\"nraauzz\":\"omdynhdwdigum\"},\"entityMappings\":[{\"entityType\":\"MailMessage\",\"fieldMappings\":[{\"identifier\":\"zhezwwvaiq\",\"columnName\":\"vv\"},{\"identifier\":\"nk\",\"columnName\":\"hqyikvy\"}]},{\"entityType\":\"RegistryKey\",\"fieldMappings\":[{\"identifier\":\"luwmncst\",\"columnName\":\"jfybvpoekrsgsgb\"},{\"identifier\":\"uzqgnjdgkynsc\",\"columnName\":\"qhzvhxnkomt\"},{\"identifier\":\"bo\",\"columnName\":\"pnvdxz\"}]},{\"entityType\":\"FileHash\",\"fieldMappings\":[{\"identifier\":\"bbc\",\"columnName\":\"qagt\"},{\"identifier\":\"dhlfkqojpykvgt\",\"columnName\":\"cnifm\"}]},{\"entityType\":\"Process\",\"fieldMappings\":[{\"identifier\":\"brn\",\"columnName\":\"u\"},{\"identifier\":\"prafwgckhoc\",\"columnName\":\"d\"},{\"identifier\":\"fwafqrouda\",\"columnName\":\"avehhrvkbunzo\"},{\"identifier\":\"dhcxgkmoy\",\"columnName\":\"dyuib\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"dnbzydvfvfcjn\",\"alertDescriptionFormat\":\"oisrvhmgorffu\",\"alertTacticsColumnName\":\"scvwmzhwplef\",\"alertSeverityColumnName\":\"vxilcbt\"}},\"etag\":\"hnze\",\"id\":\"xtjjfzqlqhycav\",\"name\":\"dggxdbeesmi\",\"type\":\"knlrariaawiuagy\"}")
            .toObject(ScheduledAlertRule.class);
        Assertions.assertEquals("hnze", model.etag());
        Assertions.assertEquals("zgkrvqe", model.alertRuleTemplateName());
        Assertions.assertEquals("toepryu", model.templateVersion());
        Assertions.assertEquals("wytpzdmovz", model.description());
        Assertions.assertEquals("fvaawzqa", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(Duration.parse("PT90H15M52S"), model.suppressionDuration());
        Assertions.assertEquals(false, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.INITIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("cx", model.techniques().get(0));
        Assertions.assertEquals(false, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT157H29M48S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.ALL_ENTITIES,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.URL,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.DISPLAY_NAME,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("bf",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("hya", model.query());
        Assertions.assertEquals(Duration.parse("PT53H1M13S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT47H45M53S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(TriggerOperator.EQUAL, model.triggerOperator());
        Assertions.assertEquals(1339269194, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("omdynhdwdigum", model.customDetails().get("nraauzz"));
        Assertions.assertEquals(EntityMappingType.MAIL_MESSAGE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("zhezwwvaiq", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("vv", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("dnbzydvfvfcjn", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("oisrvhmgorffu", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("scvwmzhwplef", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("vxilcbt", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRule model = new ScheduledAlertRule().withEtag("hnze")
            .withAlertRuleTemplateName("zgkrvqe")
            .withTemplateVersion("toepryu")
            .withDescription("wytpzdmovz")
            .withDisplayName("fvaawzqa")
            .withEnabled(false)
            .withSuppressionDuration(Duration.parse("PT90H15M52S"))
            .withSuppressionEnabled(false)
            .withTactics(Arrays.asList(AttackTactic.INITIAL_ACCESS, AttackTactic.INHIBIT_RESPONSE_FUNCTION))
            .withTechniques(Arrays.asList("cx"))
            .withIncidentConfiguration(new IncidentConfiguration().withCreateIncident(false)
                .withGroupingConfiguration(new GroupingConfiguration().withEnabled(false)
                    .withReopenClosedIncident(false)
                    .withLookbackDuration(Duration.parse("PT157H29M48S"))
                    .withMatchingMethod(MatchingMethod.ALL_ENTITIES)
                    .withGroupByEntities(Arrays.asList(EntityMappingType.URL, EntityMappingType.SECURITY_GROUP,
                        EntityMappingType.FILE_HASH))
                    .withGroupByAlertDetails(
                        Arrays.asList(AlertDetail.DISPLAY_NAME, AlertDetail.SEVERITY, AlertDetail.SEVERITY))
                    .withGroupByCustomDetails(Arrays.asList("bf", "rclnpkc", "ayzri"))))
            .withQuery("hya")
            .withQueryFrequency(Duration.parse("PT53H1M13S"))
            .withQueryPeriod(Duration.parse("PT47H45M53S"))
            .withSeverity(AlertSeverity.INFORMATIONAL)
            .withTriggerOperator(TriggerOperator.EQUAL)
            .withTriggerThreshold(1339269194)
            .withEventGroupingSettings(
                new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT))
            .withCustomDetails(mapOf("nraauzz", "omdynhdwdigum"))
            .withEntityMappings(Arrays.asList(new EntityMapping().withEntityType(EntityMappingType.MAIL_MESSAGE)
                .withFieldMappings(Arrays.asList(new FieldMapping().withIdentifier("zhezwwvaiq").withColumnName("vv"),
                    new FieldMapping().withIdentifier("nk").withColumnName("hqyikvy"))),
                new EntityMapping().withEntityType(EntityMappingType.REGISTRY_KEY)
                    .withFieldMappings(
                        Arrays.asList(new FieldMapping().withIdentifier("luwmncst").withColumnName("jfybvpoekrsgsgb"),
                            new FieldMapping().withIdentifier("uzqgnjdgkynsc").withColumnName("qhzvhxnkomt"),
                            new FieldMapping().withIdentifier("bo").withColumnName("pnvdxz"))),
                new EntityMapping().withEntityType(EntityMappingType.FILE_HASH)
                    .withFieldMappings(Arrays.asList(new FieldMapping().withIdentifier("bbc").withColumnName("qagt"),
                        new FieldMapping().withIdentifier("dhlfkqojpykvgt").withColumnName("cnifm"))),
                new EntityMapping().withEntityType(EntityMappingType.PROCESS)
                    .withFieldMappings(Arrays.asList(new FieldMapping().withIdentifier("brn").withColumnName("u"),
                        new FieldMapping().withIdentifier("prafwgckhoc").withColumnName("d"),
                        new FieldMapping().withIdentifier("fwafqrouda").withColumnName("avehhrvkbunzo"),
                        new FieldMapping().withIdentifier("dhcxgkmoy").withColumnName("dyuib")))))
            .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("dnbzydvfvfcjn")
                .withAlertDescriptionFormat("oisrvhmgorffu")
                .withAlertTacticsColumnName("scvwmzhwplef")
                .withAlertSeverityColumnName("vxilcbt"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRule.class);
        Assertions.assertEquals("hnze", model.etag());
        Assertions.assertEquals("zgkrvqe", model.alertRuleTemplateName());
        Assertions.assertEquals("toepryu", model.templateVersion());
        Assertions.assertEquals("wytpzdmovz", model.description());
        Assertions.assertEquals("fvaawzqa", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(Duration.parse("PT90H15M52S"), model.suppressionDuration());
        Assertions.assertEquals(false, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.INITIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("cx", model.techniques().get(0));
        Assertions.assertEquals(false, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT157H29M48S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.ALL_ENTITIES,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.URL,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.DISPLAY_NAME,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("bf",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("hya", model.query());
        Assertions.assertEquals(Duration.parse("PT53H1M13S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT47H45M53S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(TriggerOperator.EQUAL, model.triggerOperator());
        Assertions.assertEquals(1339269194, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("omdynhdwdigum", model.customDetails().get("nraauzz"));
        Assertions.assertEquals(EntityMappingType.MAIL_MESSAGE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("zhezwwvaiq", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("vv", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("dnbzydvfvfcjn", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("oisrvhmgorffu", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("scvwmzhwplef", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("vxilcbt", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
