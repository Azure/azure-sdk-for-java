// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetail;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.GroupingConfiguration;
import com.azure.resourcemanager.securityinsights.models.IncidentConfiguration;
import com.azure.resourcemanager.securityinsights.models.MatchingMethod;
import com.azure.resourcemanager.securityinsights.models.ScheduledAlertRule;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRule model = BinaryData.fromString(
            "{\"kind\":\"Scheduled\",\"properties\":{\"alertRuleTemplateName\":\"pvozglqjbknlzc\",\"templateVersion\":\"tzeyowmndcovd\",\"description\":\"qauxzan\",\"displayName\":\"mk\",\"enabled\":false,\"lastModifiedUtc\":\"2021-06-03T23:40:37Z\",\"suppressionDuration\":\"PT8H7M14S\",\"suppressionEnabled\":true,\"tactics\":[\"Impact\",\"Exfiltration\"],\"techniques\":[\"ftxudqy\",\"mebunaucmc\",\"rtneemmja\"],\"incidentConfiguration\":{\"createIncident\":true,\"groupingConfiguration\":{\"enabled\":true,\"reopenClosedIncident\":false,\"lookbackDuration\":\"PT67H8M24S\",\"matchingMethod\":\"AllEntities\",\"groupByEntities\":[\"DNS\",\"Account\",\"CloudApplication\"],\"groupByAlertDetails\":[\"DisplayName\",\"DisplayName\",\"Severity\",\"DisplayName\"],\"groupByCustomDetails\":[\"gudasmxubvfb\",\"gfcoc\",\"fhpri\"]}},\"query\":\"fmpztraudsvh\",\"queryFrequency\":\"PT142H44M46S\",\"queryPeriod\":\"PT34H21M24S\",\"severity\":\"High\",\"triggerOperator\":\"LessThan\",\"triggerThreshold\":1366619755,\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"customDetails\":{\"tnvgyshqrdgrt\":\"vr\",\"fa\":\"mewjzlpyk\"},\"entityMappings\":[{\"entityType\":\"MailCluster\",\"fieldMappings\":[{\"identifier\":\"rzrr\",\"columnName\":\"syb\"},{\"identifier\":\"polwzrghsrlei\",\"columnName\":\"fscjfn\"},{\"identifier\":\"wvuagfqwtl\",\"columnName\":\"gvmreuptrklzmi\"},{\"identifier\":\"jwolxfsvaghmpynw\",\"columnName\":\"lr\"}]},{\"entityType\":\"CloudApplication\",\"fieldMappings\":[{\"identifier\":\"cvbxqlapsnss\",\"columnName\":\"yxpavidnie\"}]},{\"entityType\":\"File\",\"fieldMappings\":[{\"identifier\":\"vyezslpux\",\"columnName\":\"bdsval\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"twt\",\"alertDescriptionFormat\":\"xgpazwugxyqv\",\"alertTacticsColumnName\":\"obfelhldiuhz\",\"alertSeverityColumnName\":\"qlmfaewz\"}},\"etag\":\"udjpxpqht\",\"id\":\"hnmhkrezsdsux\",\"name\":\"eqdgcruxsp\",\"type\":\"nymmqgwokmikpa\"}")
            .toObject(ScheduledAlertRule.class);
        Assertions.assertEquals("udjpxpqht", model.etag());
        Assertions.assertEquals("pvozglqjbknlzc", model.alertRuleTemplateName());
        Assertions.assertEquals("tzeyowmndcovd", model.templateVersion());
        Assertions.assertEquals("qauxzan", model.description());
        Assertions.assertEquals("mk", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(Duration.parse("PT8H7M14S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.IMPACT, model.tactics().get(0));
        Assertions.assertEquals("ftxudqy", model.techniques().get(0));
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT67H8M24S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.ALL_ENTITIES,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.DNS,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.DISPLAY_NAME,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("gudasmxubvfb",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("fmpztraudsvh", model.query());
        Assertions.assertEquals(Duration.parse("PT142H44M46S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT34H21M24S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.HIGH, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(1366619755, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("vr", model.customDetails().get("tnvgyshqrdgrt"));
        Assertions.assertEquals(EntityMappingType.MAIL_CLUSTER, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("rzrr", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("syb", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("twt", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("xgpazwugxyqv", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("obfelhldiuhz", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("qlmfaewz", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRule model
            = new ScheduledAlertRule().withEtag("udjpxpqht")
                .withAlertRuleTemplateName("pvozglqjbknlzc")
                .withTemplateVersion("tzeyowmndcovd")
                .withDescription("qauxzan")
                .withDisplayName("mk")
                .withEnabled(false)
                .withSuppressionDuration(Duration.parse("PT8H7M14S"))
                .withSuppressionEnabled(true)
                .withTactics(Arrays.asList(AttackTactic.IMPACT, AttackTactic.EXFILTRATION))
                .withTechniques(Arrays.asList("ftxudqy", "mebunaucmc", "rtneemmja"))
                .withIncidentConfiguration(new IncidentConfiguration().withCreateIncident(true)
                    .withGroupingConfiguration(new GroupingConfiguration().withEnabled(true)
                        .withReopenClosedIncident(false)
                        .withLookbackDuration(Duration.parse("PT67H8M24S"))
                        .withMatchingMethod(MatchingMethod.ALL_ENTITIES)
                        .withGroupByEntities(Arrays.asList(EntityMappingType.DNS, EntityMappingType.ACCOUNT,
                            EntityMappingType.CLOUD_APPLICATION))
                        .withGroupByAlertDetails(Arrays.asList(AlertDetail.DISPLAY_NAME, AlertDetail.DISPLAY_NAME,
                            AlertDetail.SEVERITY, AlertDetail.DISPLAY_NAME))
                        .withGroupByCustomDetails(Arrays.asList("gudasmxubvfb", "gfcoc", "fhpri"))))
                .withQuery("fmpztraudsvh")
                .withQueryFrequency(Duration.parse("PT142H44M46S"))
                .withQueryPeriod(Duration.parse("PT34H21M24S"))
                .withSeverity(AlertSeverity.HIGH)
                .withTriggerOperator(TriggerOperator.LESS_THAN)
                .withTriggerThreshold(1366619755)
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT))
                .withCustomDetails(mapOf("tnvgyshqrdgrt", "vr", "fa", "mewjzlpyk"))
                .withEntityMappings(
                    Arrays
                        .asList(
                            new EntityMapping().withEntityType(EntityMappingType.MAIL_CLUSTER)
                                .withFieldMappings(
                                    Arrays.asList(new FieldMapping().withIdentifier("rzrr").withColumnName("syb"),
                                        new FieldMapping().withIdentifier("polwzrghsrlei").withColumnName("fscjfn"),
                                        new FieldMapping().withIdentifier("wvuagfqwtl")
                                            .withColumnName("gvmreuptrklzmi"),
                                        new FieldMapping().withIdentifier("jwolxfsvaghmpynw").withColumnName("lr"))),
                            new EntityMapping().withEntityType(EntityMappingType.CLOUD_APPLICATION)
                                .withFieldMappings(Arrays.asList(
                                    new FieldMapping().withIdentifier("cvbxqlapsnss").withColumnName("yxpavidnie"))),
                            new EntityMapping().withEntityType(EntityMappingType.FILE)
                                .withFieldMappings(Arrays
                                    .asList(new FieldMapping().withIdentifier("vyezslpux").withColumnName("bdsval")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("twt")
                    .withAlertDescriptionFormat("xgpazwugxyqv")
                    .withAlertTacticsColumnName("obfelhldiuhz")
                    .withAlertSeverityColumnName("qlmfaewz"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRule.class);
        Assertions.assertEquals("udjpxpqht", model.etag());
        Assertions.assertEquals("pvozglqjbknlzc", model.alertRuleTemplateName());
        Assertions.assertEquals("tzeyowmndcovd", model.templateVersion());
        Assertions.assertEquals("qauxzan", model.description());
        Assertions.assertEquals("mk", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(Duration.parse("PT8H7M14S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.IMPACT, model.tactics().get(0));
        Assertions.assertEquals("ftxudqy", model.techniques().get(0));
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT67H8M24S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.ALL_ENTITIES,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.DNS,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.DISPLAY_NAME,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("gudasmxubvfb",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("fmpztraudsvh", model.query());
        Assertions.assertEquals(Duration.parse("PT142H44M46S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT34H21M24S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.HIGH, model.severity());
        Assertions.assertEquals(TriggerOperator.LESS_THAN, model.triggerOperator());
        Assertions.assertEquals(1366619755, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("vr", model.customDetails().get("tnvgyshqrdgrt"));
        Assertions.assertEquals(EntityMappingType.MAIL_CLUSTER, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("rzrr", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("syb", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("twt", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("xgpazwugxyqv", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("obfelhldiuhz", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("qlmfaewz", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
