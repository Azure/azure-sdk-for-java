// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AutomationRulePropertyConditionSupportedOperator;
import com.azure.resourcemanager.securityinsights.models.AutomationRulePropertyConditionSupportedProperty;
import com.azure.resourcemanager.securityinsights.models.AutomationRulePropertyValuesCondition;
import com.azure.resourcemanager.securityinsights.models.PropertyConditionProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PropertyConditionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PropertyConditionProperties model = BinaryData.fromString(
            "{\"conditionType\":\"Property\",\"conditionProperties\":{\"propertyName\":\"HostAzureID\",\"operator\":\"NotStartsWith\",\"propertyValues\":[\"fovvacqpbtuodxes\",\"abbelawumuaslzk\",\"rrwoycqucwyhahn\"]}}")
            .toObject(PropertyConditionProperties.class);
        Assertions.assertEquals(AutomationRulePropertyConditionSupportedProperty.HOST_AZURE_ID,
            model.conditionProperties().propertyName());
        Assertions.assertEquals(AutomationRulePropertyConditionSupportedOperator.NOT_STARTS_WITH,
            model.conditionProperties().operator());
        Assertions.assertEquals("fovvacqpbtuodxes", model.conditionProperties().propertyValues().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PropertyConditionProperties model
            = new PropertyConditionProperties().withConditionProperties(new AutomationRulePropertyValuesCondition()
                .withPropertyName(AutomationRulePropertyConditionSupportedProperty.HOST_AZURE_ID)
                .withOperator(AutomationRulePropertyConditionSupportedOperator.NOT_STARTS_WITH)
                .withPropertyValues(Arrays.asList("fovvacqpbtuodxes", "abbelawumuaslzk", "rrwoycqucwyhahn")));
        model = BinaryData.fromObject(model).toObject(PropertyConditionProperties.class);
        Assertions.assertEquals(AutomationRulePropertyConditionSupportedProperty.HOST_AZURE_ID,
            model.conditionProperties().propertyName());
        Assertions.assertEquals(AutomationRulePropertyConditionSupportedOperator.NOT_STARTS_WITH,
            model.conditionProperties().operator());
        Assertions.assertEquals("fovvacqpbtuodxes", model.conditionProperties().propertyValues().get(0));
    }
}
