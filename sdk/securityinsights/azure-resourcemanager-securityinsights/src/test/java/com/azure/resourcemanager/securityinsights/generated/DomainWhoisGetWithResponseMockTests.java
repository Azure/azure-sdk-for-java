// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.EnrichmentDomainWhois;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DomainWhoisGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"domain\":\"iywevsfg\",\"server\":\"mnszdosmjsqsvzvm\",\"created\":\"2021-03-11T06:41:03Z\",\"updated\":\"2021-07-22T14:15:12Z\",\"expires\":\"2021-10-20T10:45:49Z\",\"parsedWhois\":{\"registrar\":{\"name\":\"vhgsulwvgseuf\",\"abuseContactEmail\":\"v\",\"abuseContactPhone\":\"juzkilmc\",\"ianaId\":\"uhyzekyp\",\"url\":\"vljlbzdlby\",\"whoisServer\":\"axhpz\"},\"contacts\":{\"admin\":{\"name\":\"snwbhanzgesfhsha\",\"org\":\"ahn\",\"street\":[\"byfyvy\",\"pmggqgagenvqbug\",\"hcdvfoizorb\",\"oejzsaxzgkqwvdep\"],\"city\":\"naphifkfrpmpl\",\"state\":\"p\",\"postal\":\"rmj\",\"country\":\"fpghtbttpkim\",\"phone\":\"hnkkhbykrs\",\"fax\":\"rcmelycpgokut\",\"email\":\"vybnzbnvmshfuzz\"},\"billing\":{\"name\":\"yixlv\",\"org\":\"gulaebxiauqs\",\"street\":[\"essjlwjtatpvb\",\"skxgxqaygas\",\"kvc\"],\"city\":\"pvlcjbvyez\",\"state\":\"jkqonbw\",\"postal\":\"ieyozvrcwfpucwnb\",\"country\":\"qefgzjvbx\",\"phone\":\"bg\",\"fax\":\"rx\",\"email\":\"uc\"},\"registrant\":{\"name\":\"vkdlhuduklbjoafm\",\"org\":\"exulvoepknarseia\",\"street\":[\"qoacbuqdgsap\",\"eqfgkxe\"],\"city\":\"szglvyakesz\",\"state\":\"uvulaqcwggchx\",\"postal\":\"qgfb\",\"country\":\"ecicaovph\",\"phone\":\"lzbipiunnepkw\",\"fax\":\"zkueruwcjomipvw\",\"email\":\"ujttwykoxvbw\"},\"tech\":{\"name\":\"xdplrelf\",\"org\":\"gahcbt\",\"street\":[\"bpxrhrfjenrazwe\",\"iktlhqa\",\"htostjixyzsecig\",\"zdwjtacfvvtdpcbp\"],\"city\":\"omcsaugbrhfiwltk\",\"state\":\"su\",\"postal\":\"ethklxwhcv\",\"country\":\"yyhgqokjbmsr\",\"phone\":\"xyxxhwr\",\"fax\":\"omaqsyilpzzb\",\"email\":\"nrz\"}},\"nameServers\":[\"xagysokli\",\"ksybvrrbnhylsb\",\"ujcy\"],\"statuses\":[\"l\",\"xvpstizsyqagqll\",\"brvaid\"]}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        EnrichmentDomainWhois response = manager.domainWhois()
            .getWithResponse("sqjsrvjnqtaqgxqb", "kceincnrec", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("iywevsfg", response.domain());
        Assertions.assertEquals("mnszdosmjsqsvzvm", response.server());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-11T06:41:03Z"), response.created());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T14:15:12Z"), response.updated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T10:45:49Z"), response.expires());
        Assertions.assertEquals("vhgsulwvgseuf", response.parsedWhois().registrar().name());
        Assertions.assertEquals("v", response.parsedWhois().registrar().abuseContactEmail());
        Assertions.assertEquals("juzkilmc", response.parsedWhois().registrar().abuseContactPhone());
        Assertions.assertEquals("uhyzekyp", response.parsedWhois().registrar().ianaId());
        Assertions.assertEquals("vljlbzdlby", response.parsedWhois().registrar().url());
        Assertions.assertEquals("axhpz", response.parsedWhois().registrar().whoisServer());
        Assertions.assertEquals("snwbhanzgesfhsha", response.parsedWhois().contacts().admin().name());
        Assertions.assertEquals("ahn", response.parsedWhois().contacts().admin().org());
        Assertions.assertEquals("byfyvy", response.parsedWhois().contacts().admin().street().get(0));
        Assertions.assertEquals("naphifkfrpmpl", response.parsedWhois().contacts().admin().city());
        Assertions.assertEquals("p", response.parsedWhois().contacts().admin().state());
        Assertions.assertEquals("rmj", response.parsedWhois().contacts().admin().postal());
        Assertions.assertEquals("fpghtbttpkim", response.parsedWhois().contacts().admin().country());
        Assertions.assertEquals("hnkkhbykrs", response.parsedWhois().contacts().admin().phone());
        Assertions.assertEquals("rcmelycpgokut", response.parsedWhois().contacts().admin().fax());
        Assertions.assertEquals("vybnzbnvmshfuzz", response.parsedWhois().contacts().admin().email());
        Assertions.assertEquals("yixlv", response.parsedWhois().contacts().billing().name());
        Assertions.assertEquals("gulaebxiauqs", response.parsedWhois().contacts().billing().org());
        Assertions.assertEquals("essjlwjtatpvb", response.parsedWhois().contacts().billing().street().get(0));
        Assertions.assertEquals("pvlcjbvyez", response.parsedWhois().contacts().billing().city());
        Assertions.assertEquals("jkqonbw", response.parsedWhois().contacts().billing().state());
        Assertions.assertEquals("ieyozvrcwfpucwnb", response.parsedWhois().contacts().billing().postal());
        Assertions.assertEquals("qefgzjvbx", response.parsedWhois().contacts().billing().country());
        Assertions.assertEquals("bg", response.parsedWhois().contacts().billing().phone());
        Assertions.assertEquals("rx", response.parsedWhois().contacts().billing().fax());
        Assertions.assertEquals("uc", response.parsedWhois().contacts().billing().email());
        Assertions.assertEquals("vkdlhuduklbjoafm", response.parsedWhois().contacts().registrant().name());
        Assertions.assertEquals("exulvoepknarseia", response.parsedWhois().contacts().registrant().org());
        Assertions.assertEquals("qoacbuqdgsap", response.parsedWhois().contacts().registrant().street().get(0));
        Assertions.assertEquals("szglvyakesz", response.parsedWhois().contacts().registrant().city());
        Assertions.assertEquals("uvulaqcwggchx", response.parsedWhois().contacts().registrant().state());
        Assertions.assertEquals("qgfb", response.parsedWhois().contacts().registrant().postal());
        Assertions.assertEquals("ecicaovph", response.parsedWhois().contacts().registrant().country());
        Assertions.assertEquals("lzbipiunnepkw", response.parsedWhois().contacts().registrant().phone());
        Assertions.assertEquals("zkueruwcjomipvw", response.parsedWhois().contacts().registrant().fax());
        Assertions.assertEquals("ujttwykoxvbw", response.parsedWhois().contacts().registrant().email());
        Assertions.assertEquals("xdplrelf", response.parsedWhois().contacts().tech().name());
        Assertions.assertEquals("gahcbt", response.parsedWhois().contacts().tech().org());
        Assertions.assertEquals("bpxrhrfjenrazwe", response.parsedWhois().contacts().tech().street().get(0));
        Assertions.assertEquals("omcsaugbrhfiwltk", response.parsedWhois().contacts().tech().city());
        Assertions.assertEquals("su", response.parsedWhois().contacts().tech().state());
        Assertions.assertEquals("ethklxwhcv", response.parsedWhois().contacts().tech().postal());
        Assertions.assertEquals("yyhgqokjbmsr", response.parsedWhois().contacts().tech().country());
        Assertions.assertEquals("xyxxhwr", response.parsedWhois().contacts().tech().phone());
        Assertions.assertEquals("omaqsyilpzzb", response.parsedWhois().contacts().tech().fax());
        Assertions.assertEquals("nrz", response.parsedWhois().contacts().tech().email());
        Assertions.assertEquals("xagysokli", response.parsedWhois().nameServers().get(0));
        Assertions.assertEquals("l", response.parsedWhois().statuses().get(0));
    }
}
