// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.EntityQueryItemPropertiesDataTypesItem;
import com.azure.resourcemanager.securityinsights.models.EntityType;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemProperties;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesAdditionalQuery;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesDefaultTimeRange;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesReferenceTimeRange;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQuery;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem;
import com.azure.resourcemanager.securityinsights.models.InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem;
import com.azure.resourcemanager.securityinsights.models.OutputType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InsightQueryItemPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InsightQueryItemProperties model = BinaryData.fromString(
            "{\"displayName\":\"znuxkeuairaabmdl\",\"description\":\"bedpfixlhupmomih\",\"baseQuery\":\"dnpxpkcdpr\",\"tableQuery\":{\"columnsDefinitions\":[{\"header\":\"yi\",\"outputType\":\"Entity\",\"supportDeepLink\":true},{\"header\":\"ufssjyghsfxr\",\"outputType\":\"Entity\",\"supportDeepLink\":false}],\"queriesDefinitions\":[{\"filter\":\"qfmefgvqcpdwj\",\"summarize\":\"uxweyslandkd\",\"project\":\"jhunhghcg\",\"linkColumnsDefinitions\":[{\"projectedName\":\"rnquoxso\",\"Query\":\"reimseob\"},{\"projectedName\":\"xstcyilbvzm\",\"Query\":\"cjzlquzexokjxebj\"},{\"projectedName\":\"zinzabwmvogljsvl\",\"Query\":\"idnwceha\"}]},{\"filter\":\"do\",\"summarize\":\"l\",\"project\":\"iomqoqpepiaea\",\"linkColumnsDefinitions\":[{\"projectedName\":\"rgdtpeqnacyheqw\",\"Query\":\"qq\"},{\"projectedName\":\"jubkhjozfymcwmb\",\"Query\":\"yvqyvliqiips\"}]}]},\"chartQuery\":\"databsvs\",\"additionalQuery\":{\"query\":\"eswhd\",\"text\":\"ydisnuepywyjl\"},\"defaultTimeRange\":{\"beforeRange\":\"pxottd\",\"afterRange\":\"aocqibzjih\"},\"referenceTimeRange\":{\"beforeRange\":\"biphryvcjwqwoqs\"},\"dataTypes\":[{\"dataType\":\"hdhzybspijhfr\"},{\"dataType\":\"dkkagvwukhsusmm\"}],\"inputEntityType\":\"Mailbox\",\"requiredInputFieldsSets\":[[\"wilzzhnijmriprlk\",\"neyttl\"],[\"xivcbkutpumlt\"]],\"entitiesFilter\":\"datafluxynbpvz\"}")
            .toObject(InsightQueryItemProperties.class);
        Assertions.assertEquals("hdhzybspijhfr", model.dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.MAILBOX, model.inputEntityType());
        Assertions.assertEquals("wilzzhnijmriprlk", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("znuxkeuairaabmdl", model.displayName());
        Assertions.assertEquals("bedpfixlhupmomih", model.description());
        Assertions.assertEquals("dnpxpkcdpr", model.baseQuery());
        Assertions.assertEquals("yi", model.tableQuery().columnsDefinitions().get(0).headerProperty());
        Assertions.assertEquals(OutputType.ENTITY, model.tableQuery().columnsDefinitions().get(0).outputType());
        Assertions.assertEquals(true, model.tableQuery().columnsDefinitions().get(0).supportDeepLink());
        Assertions.assertEquals("qfmefgvqcpdwj", model.tableQuery().queriesDefinitions().get(0).filter());
        Assertions.assertEquals("uxweyslandkd", model.tableQuery().queriesDefinitions().get(0).summarize());
        Assertions.assertEquals("jhunhghcg", model.tableQuery().queriesDefinitions().get(0).project());
        Assertions.assertEquals("rnquoxso",
            model.tableQuery().queriesDefinitions().get(0).linkColumnsDefinitions().get(0).projectedName());
        Assertions.assertEquals("reimseob",
            model.tableQuery().queriesDefinitions().get(0).linkColumnsDefinitions().get(0).query());
        Assertions.assertEquals("eswhd", model.additionalQuery().query());
        Assertions.assertEquals("ydisnuepywyjl", model.additionalQuery().text());
        Assertions.assertEquals("pxottd", model.defaultTimeRange().beforeRange());
        Assertions.assertEquals("aocqibzjih", model.defaultTimeRange().afterRange());
        Assertions.assertEquals("biphryvcjwqwoqs", model.referenceTimeRange().beforeRange());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InsightQueryItemProperties model = new InsightQueryItemProperties()
            .withDataTypes(Arrays.asList(new EntityQueryItemPropertiesDataTypesItem().withDataType("hdhzybspijhfr"),
                new EntityQueryItemPropertiesDataTypesItem().withDataType("dkkagvwukhsusmm")))
            .withInputEntityType(EntityType.MAILBOX)
            .withRequiredInputFieldsSets(
                Arrays.asList(Arrays.asList("wilzzhnijmriprlk", "neyttl"), Arrays.asList("xivcbkutpumlt")))
            .withEntitiesFilter("datafluxynbpvz")
            .withDisplayName("znuxkeuairaabmdl")
            .withDescription("bedpfixlhupmomih")
            .withBaseQuery("dnpxpkcdpr")
            .withTableQuery(new InsightQueryItemPropertiesTableQuery()
                .withColumnsDefinitions(Arrays.asList(
                    new InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem().withHeaderProperty("yi")
                        .withOutputType(OutputType.ENTITY)
                        .withSupportDeepLink(true),
                    new InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem().withHeaderProperty("ufssjyghsfxr")
                        .withOutputType(OutputType.ENTITY)
                        .withSupportDeepLink(false)))
                .withQueriesDefinitions(Arrays.asList(
                    new InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem().withFilter("qfmefgvqcpdwj")
                        .withSummarize("uxweyslandkd")
                        .withProject("jhunhghcg")
                        .withLinkColumnsDefinitions(Arrays.asList(
                            new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem()
                                .withProjectedName("rnquoxso")
                                .withQuery("reimseob"),
                            new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem()
                                .withProjectedName("xstcyilbvzm")
                                .withQuery("cjzlquzexokjxebj"),
                            new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem()
                                .withProjectedName("zinzabwmvogljsvl")
                                .withQuery("idnwceha"))),
                    new InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem().withFilter("do")
                        .withSummarize("l")
                        .withProject("iomqoqpepiaea")
                        .withLinkColumnsDefinitions(Arrays.asList(
                            new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem()
                                .withProjectedName("rgdtpeqnacyheqw")
                                .withQuery("qq"),
                            new InsightQueryItemPropertiesTableQueryQueriesDefinitionsPropertiesItemsItem()
                                .withProjectedName("jubkhjozfymcwmb")
                                .withQuery("yvqyvliqiips"))))))
            .withChartQuery("databsvs")
            .withAdditionalQuery(
                new InsightQueryItemPropertiesAdditionalQuery().withQuery("eswhd").withText("ydisnuepywyjl"))
            .withDefaultTimeRange(
                new InsightQueryItemPropertiesDefaultTimeRange().withBeforeRange("pxottd").withAfterRange("aocqibzjih"))
            .withReferenceTimeRange(
                new InsightQueryItemPropertiesReferenceTimeRange().withBeforeRange("biphryvcjwqwoqs"));
        model = BinaryData.fromObject(model).toObject(InsightQueryItemProperties.class);
        Assertions.assertEquals("hdhzybspijhfr", model.dataTypes().get(0).dataType());
        Assertions.assertEquals(EntityType.MAILBOX, model.inputEntityType());
        Assertions.assertEquals("wilzzhnijmriprlk", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("znuxkeuairaabmdl", model.displayName());
        Assertions.assertEquals("bedpfixlhupmomih", model.description());
        Assertions.assertEquals("dnpxpkcdpr", model.baseQuery());
        Assertions.assertEquals("yi", model.tableQuery().columnsDefinitions().get(0).headerProperty());
        Assertions.assertEquals(OutputType.ENTITY, model.tableQuery().columnsDefinitions().get(0).outputType());
        Assertions.assertEquals(true, model.tableQuery().columnsDefinitions().get(0).supportDeepLink());
        Assertions.assertEquals("qfmefgvqcpdwj", model.tableQuery().queriesDefinitions().get(0).filter());
        Assertions.assertEquals("uxweyslandkd", model.tableQuery().queriesDefinitions().get(0).summarize());
        Assertions.assertEquals("jhunhghcg", model.tableQuery().queriesDefinitions().get(0).project());
        Assertions.assertEquals("rnquoxso",
            model.tableQuery().queriesDefinitions().get(0).linkColumnsDefinitions().get(0).projectedName());
        Assertions.assertEquals("reimseob",
            model.tableQuery().queriesDefinitions().get(0).linkColumnsDefinitions().get(0).query());
        Assertions.assertEquals("eswhd", model.additionalQuery().query());
        Assertions.assertEquals("ydisnuepywyjl", model.additionalQuery().text());
        Assertions.assertEquals("pxottd", model.defaultTimeRange().beforeRange());
        Assertions.assertEquals("aocqibzjih", model.defaultTimeRange().afterRange());
        Assertions.assertEquals("biphryvcjwqwoqs", model.referenceTimeRange().beforeRange());
    }
}
