// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.Incident;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IncidentsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"additionalData\":{\"alertsCount\":522442521,\"bookmarksCount\":1652198165,\"commentsCount\":2134025478,\"alertProductNames\":[\"i\"],\"tactics\":[\"Persistence\"]},\"classification\":\"Undetermined\",\"classificationComment\":\"gvxvatv\",\"classificationReason\":\"SuspiciousButExpected\",\"createdTimeUtc\":\"2021-01-29T22:04:49Z\",\"description\":\"nbqxvhcsyhzlwxae\",\"firstActivityTimeUtc\":\"2021-09-21T01:21:46Z\",\"incidentUrl\":\"rexdndsbd\",\"incidentNumber\":1772286524,\"labels\":[{\"labelName\":\"rzmwn\",\"labelType\":\"User\"}],\"lastActivityTimeUtc\":\"2021-06-07T19:00:04Z\",\"lastModifiedTimeUtc\":\"2021-07-05T10:58:17Z\",\"owner\":{\"email\":\"mmagoaqylkjzt\",\"assignedTo\":\"uazjcgmxitpfinz\",\"objectId\":\"7fcf1d94-b75e-4e89-8b1f-55ea51c2bba2\",\"userPrincipalName\":\"ltkrl\",\"ownerType\":\"Group\"},\"relatedAnalyticRuleIds\":[\"drvcqguef\"],\"severity\":\"Informational\",\"status\":\"New\",\"title\":\"mpheqdur\"},\"etag\":\"yujlfyoumpckyecl\",\"id\":\"igptajbrzmqxucyc\",\"name\":\"joclxiutgjcyzy\",\"type\":\"jdnrqjbt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Incident response = manager.incidents()
            .getWithResponse("fa", "sgftipwc", "byubhiqdxyurnpn", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("yujlfyoumpckyecl", response.etag());
        Assertions.assertEquals(IncidentClassification.UNDETERMINED, response.classification());
        Assertions.assertEquals("gvxvatv", response.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.SUSPICIOUS_BUT_EXPECTED, response.classificationReason());
        Assertions.assertEquals("nbqxvhcsyhzlwxae", response.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T01:21:46Z"), response.firstActivityTimeUtc());
        Assertions.assertEquals("rzmwn", response.labels().get(0).labelName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-07T19:00:04Z"), response.lastActivityTimeUtc());
        Assertions.assertEquals("mmagoaqylkjzt", response.owner().email());
        Assertions.assertEquals("uazjcgmxitpfinz", response.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("7fcf1d94-b75e-4e89-8b1f-55ea51c2bba2"), response.owner().objectId());
        Assertions.assertEquals("ltkrl", response.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.GROUP, response.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.INFORMATIONAL, response.severity());
        Assertions.assertEquals(IncidentStatus.NEW, response.status());
        Assertions.assertEquals("mpheqdur", response.title());
    }
}
