// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.NrtAlertRuleTemplateProperties;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NrtAlertRuleTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NrtAlertRuleTemplateProperties model = BinaryData.fromString(
            "{\"query\":\"bmxsnxoc\",\"severity\":\"Informational\",\"version\":\"ojkpoyh\",\"customDetails\":{\"rcvuqbsgzlrqhb\":\"djuxdbdljzgd\",\"gdxwbsfpyxx\":\"nq\",\"ecominxojjluxxd\":\"jlf\",\"dzzqjmu\":\"ilz\"},\"entityMappings\":[{\"entityType\":\"CloudApplication\",\"fieldMappings\":[{\"identifier\":\"bqlotokhtvwtazn\",\"columnName\":\"qww\"},{\"identifier\":\"jyofgwhnk\",\"columnName\":\"lwljss\"},{\"identifier\":\"tsnld\",\"columnName\":\"wolgisubxbt\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"fgfiij\",\"alertDescriptionFormat\":\"kw\",\"alertTacticsColumnName\":\"fksxqce\",\"alertSeverityColumnName\":\"fpxgnmqvz\"},\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"tactics\":[\"CredentialAccess\"],\"techniques\":[\"ssscyvai\",\"ppuacvfyeowp\"],\"alertRulesCreatedByTemplateCount\":117233906,\"lastUpdatedDateUTC\":\"2021-01-29T14:16:27Z\",\"createdDateUTC\":\"2021-09-19T04:14:45Z\",\"description\":\"oy\",\"displayName\":\"pvtyqfttehdpbouj\",\"requiredDataConnectors\":[{\"connectorId\":\"vvdshxcdedsue\",\"dataTypes\":[\"nxcgjtfrnquk\",\"rf\",\"s\",\"nlrxsmyltrwntfmt\"]},{\"connectorId\":\"wjdxw\",\"dataTypes\":[\"kurrdreyzjwh\",\"etw\",\"jwzzqseuzu\"]},{\"connectorId\":\"y\",\"dataTypes\":[\"qhyqqzzdcykey\",\"tewfopazdazgbsq\",\"pew\",\"c\"]}],\"status\":\"NotAvailable\"}")
            .toObject(NrtAlertRuleTemplateProperties.class);
        Assertions.assertEquals(117233906, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("oy", model.description());
        Assertions.assertEquals("pvtyqfttehdpbouj", model.displayName());
        Assertions.assertEquals("vvdshxcdedsue", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("nxcgjtfrnquk", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.NOT_AVAILABLE, model.status());
        Assertions.assertEquals(AttackTactic.CREDENTIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("ssscyvai", model.techniques().get(0));
        Assertions.assertEquals("bmxsnxoc", model.query());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals("ojkpoyh", model.version());
        Assertions.assertEquals("djuxdbdljzgd", model.customDetails().get("rcvuqbsgzlrqhb"));
        Assertions.assertEquals(EntityMappingType.CLOUD_APPLICATION, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("bqlotokhtvwtazn", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("qww", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("fgfiij", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("kw", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("fksxqce", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("fpxgnmqvz", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NrtAlertRuleTemplateProperties model
            = new NrtAlertRuleTemplateProperties().withAlertRulesCreatedByTemplateCount(117233906)
                .withDescription("oy")
                .withDisplayName("pvtyqfttehdpbouj")
                .withRequiredDataConnectors(Arrays.asList(
                    new AlertRuleTemplateDataSource().withConnectorId("vvdshxcdedsue")
                        .withDataTypes(Arrays.asList("nxcgjtfrnquk", "rf", "s", "nlrxsmyltrwntfmt")),
                    new AlertRuleTemplateDataSource().withConnectorId("wjdxw")
                        .withDataTypes(Arrays.asList("kurrdreyzjwh", "etw", "jwzzqseuzu")),
                    new AlertRuleTemplateDataSource().withConnectorId("y")
                        .withDataTypes(Arrays.asList("qhyqqzzdcykey", "tewfopazdazgbsq", "pew", "c"))))
                .withStatus(TemplateStatus.NOT_AVAILABLE)
                .withTactics(Arrays.asList(AttackTactic.CREDENTIAL_ACCESS))
                .withTechniques(Arrays.asList("ssscyvai", "ppuacvfyeowp"))
                .withQuery("bmxsnxoc")
                .withSeverity(AlertSeverity.INFORMATIONAL)
                .withVersion("ojkpoyh")
                .withCustomDetails(mapOf("rcvuqbsgzlrqhb", "djuxdbdljzgd", "gdxwbsfpyxx", "nq", "ecominxojjluxxd",
                    "jlf", "dzzqjmu", "ilz"))
                .withEntityMappings(
                    Arrays
                        .asList(new EntityMapping().withEntityType(EntityMappingType.CLOUD_APPLICATION)
                            .withFieldMappings(Arrays.asList(
                                new FieldMapping().withIdentifier("bqlotokhtvwtazn").withColumnName("qww"),
                                new FieldMapping().withIdentifier("jyofgwhnk").withColumnName("lwljss"),
                                new FieldMapping().withIdentifier("tsnld").withColumnName("wolgisubxbt")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("fgfiij")
                    .withAlertDescriptionFormat("kw")
                    .withAlertTacticsColumnName("fksxqce")
                    .withAlertSeverityColumnName("fpxgnmqvz"))
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT));
        model = BinaryData.fromObject(model).toObject(NrtAlertRuleTemplateProperties.class);
        Assertions.assertEquals(117233906, model.alertRulesCreatedByTemplateCount());
        Assertions.assertEquals("oy", model.description());
        Assertions.assertEquals("pvtyqfttehdpbouj", model.displayName());
        Assertions.assertEquals("vvdshxcdedsue", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("nxcgjtfrnquk", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(TemplateStatus.NOT_AVAILABLE, model.status());
        Assertions.assertEquals(AttackTactic.CREDENTIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("ssscyvai", model.techniques().get(0));
        Assertions.assertEquals("bmxsnxoc", model.query());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals("ojkpoyh", model.version());
        Assertions.assertEquals("djuxdbdljzgd", model.customDetails().get("rcvuqbsgzlrqhb"));
        Assertions.assertEquals(EntityMappingType.CLOUD_APPLICATION, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("bqlotokhtvwtazn", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("qww", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("fgfiij", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("kw", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("fksxqce", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("fpxgnmqvz", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
