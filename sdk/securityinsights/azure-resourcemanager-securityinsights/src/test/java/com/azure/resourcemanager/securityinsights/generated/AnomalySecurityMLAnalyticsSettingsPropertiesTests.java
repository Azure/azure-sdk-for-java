// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.AnomalySecurityMLAnalyticsSettingsProperties;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.SecurityMLAnalyticsSettingsDataSource;
import com.azure.resourcemanager.securityinsights.models.SettingsStatus;
import java.time.Duration;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class AnomalySecurityMLAnalyticsSettingsPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AnomalySecurityMLAnalyticsSettingsProperties model = BinaryData.fromString(
            "{\"description\":\"vechndbnwiehole\",\"displayName\":\"jwiuubwefqsfapaq\",\"enabled\":false,\"lastModifiedUtc\":\"2021-10-04T15:26:40Z\",\"requiredDataConnectors\":[{\"connectorId\":\"ex\",\"dataTypes\":[\"fxapjwogqqnobpu\",\"cdabtqwpwya\",\"bzasqbucljgkyexa\",\"guyaip\"]}],\"tactics\":[\"CredentialAccess\",\"PrivilegeEscalation\",\"LateralMovement\"],\"techniques\":[\"xijj\"],\"anomalyVersion\":\"mfqwa\",\"customizableObservations\":\"datanqnm\",\"frequency\":\"PT225H52M14S\",\"settingsStatus\":\"Production\",\"isDefaultSettings\":true,\"anomalySettingsVersion\":878214115,\"settingsDefinitionId\":\"69819be3-f87c-494e-8407-4dae319becce\"}")
            .toObject(AnomalySecurityMLAnalyticsSettingsProperties.class);
        Assertions.assertEquals("vechndbnwiehole", model.description());
        Assertions.assertEquals("jwiuubwefqsfapaq", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("ex", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("fxapjwogqqnobpu", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(AttackTactic.CREDENTIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("xijj", model.techniques().get(0));
        Assertions.assertEquals("mfqwa", model.anomalyVersion());
        Assertions.assertEquals(Duration.parse("PT225H52M14S"), model.frequency());
        Assertions.assertEquals(SettingsStatus.PRODUCTION, model.settingsStatus());
        Assertions.assertEquals(true, model.isDefaultSettings());
        Assertions.assertEquals(878214115, model.anomalySettingsVersion());
        Assertions.assertEquals(UUID.fromString("69819be3-f87c-494e-8407-4dae319becce"), model.settingsDefinitionId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AnomalySecurityMLAnalyticsSettingsProperties model = new AnomalySecurityMLAnalyticsSettingsProperties()
            .withDescription("vechndbnwiehole")
            .withDisplayName("jwiuubwefqsfapaq")
            .withEnabled(false)
            .withRequiredDataConnectors(Arrays.asList(new SecurityMLAnalyticsSettingsDataSource().withConnectorId("ex")
                .withDataTypes(Arrays.asList("fxapjwogqqnobpu", "cdabtqwpwya", "bzasqbucljgkyexa", "guyaip"))))
            .withTactics(Arrays.asList(AttackTactic.CREDENTIAL_ACCESS, AttackTactic.PRIVILEGE_ESCALATION,
                AttackTactic.LATERAL_MOVEMENT))
            .withTechniques(Arrays.asList("xijj"))
            .withAnomalyVersion("mfqwa")
            .withCustomizableObservations("datanqnm")
            .withFrequency(Duration.parse("PT225H52M14S"))
            .withSettingsStatus(SettingsStatus.PRODUCTION)
            .withIsDefaultSettings(true)
            .withAnomalySettingsVersion(878214115)
            .withSettingsDefinitionId(UUID.fromString("69819be3-f87c-494e-8407-4dae319becce"));
        model = BinaryData.fromObject(model).toObject(AnomalySecurityMLAnalyticsSettingsProperties.class);
        Assertions.assertEquals("vechndbnwiehole", model.description());
        Assertions.assertEquals("jwiuubwefqsfapaq", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("ex", model.requiredDataConnectors().get(0).connectorId());
        Assertions.assertEquals("fxapjwogqqnobpu", model.requiredDataConnectors().get(0).dataTypes().get(0));
        Assertions.assertEquals(AttackTactic.CREDENTIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("xijj", model.techniques().get(0));
        Assertions.assertEquals("mfqwa", model.anomalyVersion());
        Assertions.assertEquals(Duration.parse("PT225H52M14S"), model.frequency());
        Assertions.assertEquals(SettingsStatus.PRODUCTION, model.settingsStatus());
        Assertions.assertEquals(true, model.isDefaultSettings());
        Assertions.assertEquals(878214115, model.anomalySettingsVersion());
        Assertions.assertEquals(UUID.fromString("69819be3-f87c-494e-8407-4dae319becce"), model.settingsDefinitionId());
    }
}
