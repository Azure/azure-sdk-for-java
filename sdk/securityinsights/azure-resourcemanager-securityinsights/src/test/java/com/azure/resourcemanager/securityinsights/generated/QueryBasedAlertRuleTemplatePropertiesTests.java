// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.QueryBasedAlertRuleTemplateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class QueryBasedAlertRuleTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QueryBasedAlertRuleTemplateProperties model = BinaryData.fromString(
            "{\"query\":\"miciij\",\"severity\":\"Informational\",\"version\":\"fbojxjmcsmyqwix\",\"customDetails\":{\"alickduoi\":\"wnkwywzwo\",\"kn\":\"tamtyv\",\"cfhzagxnvhycv\":\"rwzawnvs\"},\"entityMappings\":[{\"entityType\":\"SecurityGroup\",\"fieldMappings\":[{\"identifier\":\"gzgy\",\"columnName\":\"utrwpweryekz\"},{\"identifier\":\"hmeott\",\"columnName\":\"jyosxwwh\"},{\"identifier\":\"jtfvpndpmiljpn\",\"columnName\":\"nudqllz\"},{\"identifier\":\"uzpjlxeehux\",\"columnName\":\"hzlraymezxlsk\"}]},{\"entityType\":\"Host\",\"fieldMappings\":[{\"identifier\":\"dsajrednwyysh\",\"columnName\":\"w\"},{\"identifier\":\"evuafpwzyifrk\",\"columnName\":\"ltxeqip\"},{\"identifier\":\"zdyi\",\"columnName\":\"fayorpravkjoges\"}]},{\"entityType\":\"Mailbox\",\"fieldMappings\":[{\"identifier\":\"jkwynqxaekqsykv\",\"columnName\":\"tqpkevmy\"},{\"identifier\":\"jcrspxklurcclfgx\",\"columnName\":\"n\"},{\"identifier\":\"ytzpo\",\"columnName\":\"wxigpxv\"},{\"identifier\":\"maupxvpi\",\"columnName\":\"f\"}]},{\"entityType\":\"Mailbox\",\"fieldMappings\":[{\"identifier\":\"zeyuubeidszl\",\"columnName\":\"toi\"},{\"identifier\":\"gygvfltgvdiho\",\"columnName\":\"krxwet\"},{\"identifier\":\"drcyrucpcun\",\"columnName\":\"zdqumoe\"},{\"identifier\":\"dnaienhqhskndnel\",\"columnName\":\"aadl\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"foanniyopetx\",\"alertDescriptionFormat\":\"cnrly\",\"alertTacticsColumnName\":\"ucae\",\"alertSeverityColumnName\":\"blkwqpatvbqs\"},\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"}}")
            .toObject(QueryBasedAlertRuleTemplateProperties.class);
        Assertions.assertEquals("miciij", model.query());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals("fbojxjmcsmyqwix", model.version());
        Assertions.assertEquals("wnkwywzwo", model.customDetails().get("alickduoi"));
        Assertions.assertEquals(EntityMappingType.SECURITY_GROUP, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("gzgy", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("utrwpweryekz", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("foanniyopetx", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("cnrly", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("ucae", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("blkwqpatvbqs", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QueryBasedAlertRuleTemplateProperties model
            = new QueryBasedAlertRuleTemplateProperties().withQuery("miciij")
                .withSeverity(AlertSeverity.INFORMATIONAL)
                .withVersion("fbojxjmcsmyqwix")
                .withCustomDetails(mapOf("alickduoi", "wnkwywzwo", "kn", "tamtyv", "cfhzagxnvhycv", "rwzawnvs"))
                .withEntityMappings(
                    Arrays
                        .asList(
                            new EntityMapping().withEntityType(EntityMappingType.SECURITY_GROUP)
                                .withFieldMappings(Arrays.asList(
                                    new FieldMapping().withIdentifier("gzgy").withColumnName("utrwpweryekz"),
                                    new FieldMapping().withIdentifier("hmeott").withColumnName("jyosxwwh"),
                                    new FieldMapping().withIdentifier("jtfvpndpmiljpn").withColumnName("nudqllz"),
                                    new FieldMapping().withIdentifier("uzpjlxeehux").withColumnName("hzlraymezxlsk"))),
                            new EntityMapping().withEntityType(EntityMappingType.HOST)
                                .withFieldMappings(Arrays
                                    .asList(new FieldMapping().withIdentifier("dsajrednwyysh").withColumnName("w"),
                                        new FieldMapping().withIdentifier("evuafpwzyifrk").withColumnName("ltxeqip"),
                                        new FieldMapping().withIdentifier("zdyi").withColumnName("fayorpravkjoges"))),
                            new EntityMapping().withEntityType(EntityMappingType.MAILBOX)
                                .withFieldMappings(Arrays.asList(
                                    new FieldMapping().withIdentifier("jkwynqxaekqsykv").withColumnName("tqpkevmy"),
                                    new FieldMapping().withIdentifier("jcrspxklurcclfgx").withColumnName("n"),
                                    new FieldMapping().withIdentifier("ytzpo").withColumnName("wxigpxv"),
                                    new FieldMapping().withIdentifier("maupxvpi").withColumnName("f"))),
                            new EntityMapping().withEntityType(EntityMappingType.MAILBOX)
                                .withFieldMappings(Arrays.asList(
                                    new FieldMapping().withIdentifier("zeyuubeidszl").withColumnName("toi"),
                                    new FieldMapping().withIdentifier("gygvfltgvdiho").withColumnName("krxwet"),
                                    new FieldMapping().withIdentifier("drcyrucpcun").withColumnName("zdqumoe"),
                                    new FieldMapping().withIdentifier("dnaienhqhskndnel").withColumnName("aadl")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("foanniyopetx")
                    .withAlertDescriptionFormat("cnrly")
                    .withAlertTacticsColumnName("ucae")
                    .withAlertSeverityColumnName("blkwqpatvbqs"))
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT));
        model = BinaryData.fromObject(model).toObject(QueryBasedAlertRuleTemplateProperties.class);
        Assertions.assertEquals("miciij", model.query());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals("fbojxjmcsmyqwix", model.version());
        Assertions.assertEquals("wnkwywzwo", model.customDetails().get("alickduoi"));
        Assertions.assertEquals(EntityMappingType.SECURITY_GROUP, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("gzgy", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("utrwpweryekz", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("foanniyopetx", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("cnrly", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("ucae", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("blkwqpatvbqs", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
