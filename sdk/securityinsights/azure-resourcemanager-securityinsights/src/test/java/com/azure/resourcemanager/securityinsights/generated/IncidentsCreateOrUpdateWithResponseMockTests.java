// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.fluent.models.TeamInformationInner;
import com.azure.resourcemanager.securityinsights.models.Incident;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentLabel;
import com.azure.resourcemanager.securityinsights.models.IncidentOwnerInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IncidentsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"additionalData\":{\"alertsCount\":827555367,\"bookmarksCount\":490611687,\"commentsCount\":361910825,\"alertProductNames\":[\"fqvjmghpakbqyhls\",\"rnfbmeqagkn\",\"jm\"],\"providerIncidentUrl\":\"nyevztnjawrhule\",\"tactics\":[\"Reconnaissance\",\"PreAttack\"],\"techniques\":[\"pxirx\",\"kitzm\"]},\"classification\":\"TruePositive\",\"classificationComment\":\"ax\",\"classificationReason\":\"SuspiciousButExpected\",\"createdTimeUtc\":\"2021-04-30T15:05:29Z\",\"description\":\"lxsgcemegdz\",\"firstActivityTimeUtc\":\"2021-07-20T08:23:45Z\",\"incidentUrl\":\"jubvfjyzuf\",\"incidentNumber\":1960264598,\"labels\":[{\"labelName\":\"ivl\",\"labelType\":\"User\"},{\"labelName\":\"g\",\"labelType\":\"User\"},{\"labelName\":\"cxauhvcgzxhklsqx\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"yygktsrjyxxoxwf\",\"labelType\":\"User\"}],\"providerName\":\"ecnxfxp\",\"providerIncidentId\":\"owbebsnbwut\",\"lastActivityTimeUtc\":\"2021-12-04T17:18:17Z\",\"lastModifiedTimeUtc\":\"2021-05-07T05:16:04Z\",\"owner\":{\"email\":\"mustih\",\"assignedTo\":\"rafjajvkyxmm\",\"objectId\":\"f8b5cd9d-042d-4139-a254-4496b685f62a\",\"userPrincipalName\":\"vogt\",\"ownerType\":\"Group\"},\"relatedAnalyticRuleIds\":[\"nnmkvae\",\"wq\",\"wxhhlbmyphfx\"],\"severity\":\"Low\",\"status\":\"Active\",\"teamInformation\":{\"teamId\":\"ewokyqsfkxf\",\"primaryChannelUrl\":\"wbihqbtodjfyxbvk\",\"teamCreationTimeUtc\":\"2021-05-15T12:32:42Z\",\"name\":\"mvddqwcrugyozzz\",\"description\":\"njdvv\"},\"title\":\"rho\"},\"etag\":\"kkvxu\",\"id\":\"qzbvbpsuvqhxt\",\"name\":\"zfgdk\",\"type\":\"bkurklpiig\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Incident response = manager.incidents()
            .define("dlxwmvc")
            .withExistingWorkspace("jbssfcri", "xzix")
            .withEtag("um")
            .withClassification(IncidentClassification.TRUE_POSITIVE)
            .withClassificationComment("vosgjzscu")
            .withClassificationReason(IncidentClassificationReason.INACCURATE_DATA)
            .withDescription("dfwgqjhewcffrx")
            .withFirstActivityTimeUtc(OffsetDateTime.parse("2021-08-08T17:39:26Z"))
            .withLabels(Arrays.asList(new IncidentLabel().withLabelName("enerr"),
                new IncidentLabel().withLabelName("zaivnpsjnpc")))
            .withProviderName("jy")
            .withProviderIncidentId("onb")
            .withLastActivityTimeUtc(OffsetDateTime.parse("2021-04-08T11:29:54Z"))
            .withOwner(new IncidentOwnerInfo().withEmail("lvvmnbkxja")
                .withAssignedTo("bbdddwokqx")
                .withObjectId(UUID.fromString("be6e7fb2-7f16-4fa2-8da3-e517c14f8e76"))
                .withUserPrincipalName("xqkdyqjvzvcgrds")
                .withOwnerType(OwnerType.UNKNOWN))
            .withSeverity(IncidentSeverity.LOW)
            .withStatus(IncidentStatus.ACTIVE)
            .withTeamInformation(new TeamInformationInner())
            .withTitle("qmwmwwp")
            .create();

        Assertions.assertEquals("kkvxu", response.etag());
        Assertions.assertEquals(IncidentClassification.TRUE_POSITIVE, response.classification());
        Assertions.assertEquals("ax", response.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.SUSPICIOUS_BUT_EXPECTED, response.classificationReason());
        Assertions.assertEquals("lxsgcemegdz", response.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T08:23:45Z"), response.firstActivityTimeUtc());
        Assertions.assertEquals("ivl", response.labels().get(0).labelName());
        Assertions.assertEquals("ecnxfxp", response.providerName());
        Assertions.assertEquals("owbebsnbwut", response.providerIncidentId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-04T17:18:17Z"), response.lastActivityTimeUtc());
        Assertions.assertEquals("mustih", response.owner().email());
        Assertions.assertEquals("rafjajvkyxmm", response.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("f8b5cd9d-042d-4139-a254-4496b685f62a"), response.owner().objectId());
        Assertions.assertEquals("vogt", response.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.GROUP, response.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.LOW, response.severity());
        Assertions.assertEquals(IncidentStatus.ACTIVE, response.status());
        Assertions.assertEquals("rho", response.title());
    }
}
