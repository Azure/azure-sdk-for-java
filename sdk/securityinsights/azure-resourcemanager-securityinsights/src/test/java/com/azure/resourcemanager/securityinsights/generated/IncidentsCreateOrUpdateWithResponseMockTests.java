// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.securityinsights.SecurityInsightsManager;
import com.azure.resourcemanager.securityinsights.models.Incident;
import com.azure.resourcemanager.securityinsights.models.IncidentClassification;
import com.azure.resourcemanager.securityinsights.models.IncidentClassificationReason;
import com.azure.resourcemanager.securityinsights.models.IncidentLabel;
import com.azure.resourcemanager.securityinsights.models.IncidentOwnerInfo;
import com.azure.resourcemanager.securityinsights.models.IncidentSeverity;
import com.azure.resourcemanager.securityinsights.models.IncidentStatus;
import com.azure.resourcemanager.securityinsights.models.OwnerType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IncidentsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"additionalData\":{\"alertsCount\":1602665053,\"bookmarksCount\":954240404,\"commentsCount\":962345519,\"alertProductNames\":[\"pgsn\",\"agnchjhgemuowaky\",\"a\"],\"tactics\":[\"PrivilegeEscalation\",\"InitialAccess\"]},\"classification\":\"TruePositive\",\"classificationComment\":\"qt\",\"classificationReason\":\"IncorrectAlertLogic\",\"createdTimeUtc\":\"2021-08-03T01:14:01Z\",\"description\":\"ssoljom\",\"firstActivityTimeUtc\":\"2021-10-11T02:19:13Z\",\"incidentUrl\":\"ycnlbvgjcodk\",\"incidentNumber\":353901873,\"labels\":[{\"labelName\":\"ytssikiz\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"fqb\",\"labelType\":\"AutoAssigned\"},{\"labelName\":\"nrgmqsorhce\",\"labelType\":\"User\"}],\"lastActivityTimeUtc\":\"2020-12-27T06:15:57Z\",\"lastModifiedTimeUtc\":\"2021-07-13T13:05:34Z\",\"owner\":{\"email\":\"cpwzv\",\"assignedTo\":\"oksqdt\",\"objectId\":\"cd02e2a2-fe01-4773-901e-98dad9b5d876\",\"userPrincipalName\":\"wxlboncqbazqicq\",\"ownerType\":\"User\"},\"relatedAnalyticRuleIds\":[\"v\"],\"severity\":\"Medium\",\"status\":\"New\",\"title\":\"janepubdpkx\"},\"etag\":\"vgxiaodetvo\",\"id\":\"xdxuwsaifmc\",\"name\":\"nosbz\",\"type\":\"ehgcvkbcknjo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityInsightsManager manager = SecurityInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Incident response = manager.incidents()
            .define("kzxuiz")
            .withExistingWorkspace("ezax", "f")
            .withEtag("bckyoikxk")
            .withClassification(IncidentClassification.TRUE_POSITIVE)
            .withClassificationComment("kb")
            .withClassificationReason(IncidentClassificationReason.SUSPICIOUS_BUT_EXPECTED)
            .withDescription("bnldpvcbh")
            .withFirstActivityTimeUtc(OffsetDateTime.parse("2021-10-02T02:32:06Z"))
            .withLabels(Arrays.asList(new IncidentLabel().withLabelName("brruyuuatv"),
                new IncidentLabel().withLabelName("jwcolbm")))
            .withLastActivityTimeUtc(OffsetDateTime.parse("2021-01-27T11:36:33Z"))
            .withOwner(new IncidentOwnerInfo().withEmail("ahprzrvxhmtfhocn")
                .withAssignedTo("cmj")
                .withObjectId(UUID.fromString("37c7565c-a8ce-4181-8c0b-483f7314abc3"))
                .withUserPrincipalName("xnoqrxtdisn")
                .withOwnerType(OwnerType.USER))
            .withSeverity(IncidentSeverity.INFORMATIONAL)
            .withStatus(IncidentStatus.NEW)
            .withTitle("tjfdoesxxhmw")
            .create();

        Assertions.assertEquals("vgxiaodetvo", response.etag());
        Assertions.assertEquals(IncidentClassification.TRUE_POSITIVE, response.classification());
        Assertions.assertEquals("qt", response.classificationComment());
        Assertions.assertEquals(IncidentClassificationReason.INCORRECT_ALERT_LOGIC, response.classificationReason());
        Assertions.assertEquals("ssoljom", response.description());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-11T02:19:13Z"), response.firstActivityTimeUtc());
        Assertions.assertEquals("ytssikiz", response.labels().get(0).labelName());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T06:15:57Z"), response.lastActivityTimeUtc());
        Assertions.assertEquals("cpwzv", response.owner().email());
        Assertions.assertEquals("oksqdt", response.owner().assignedTo());
        Assertions.assertEquals(UUID.fromString("cd02e2a2-fe01-4773-901e-98dad9b5d876"), response.owner().objectId());
        Assertions.assertEquals("wxlboncqbazqicq", response.owner().userPrincipalName());
        Assertions.assertEquals(OwnerType.USER, response.owner().ownerType());
        Assertions.assertEquals(IncidentSeverity.MEDIUM, response.severity());
        Assertions.assertEquals(IncidentStatus.NEW, response.status());
        Assertions.assertEquals("janepubdpkx", response.title());
    }
}
