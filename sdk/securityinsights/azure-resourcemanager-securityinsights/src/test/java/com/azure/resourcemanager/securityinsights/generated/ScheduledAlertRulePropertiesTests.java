// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.ScheduledAlertRuleProperties;
import com.azure.resourcemanager.securityinsights.models.AlertDetail;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.GroupingConfiguration;
import com.azure.resourcemanager.securityinsights.models.IncidentConfiguration;
import com.azure.resourcemanager.securityinsights.models.MatchingMethod;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleProperties model = BinaryData.fromString(
            "{\"alertRuleTemplateName\":\"g\",\"templateVersion\":\"quv\",\"description\":\"gglpmcrdcuelj\",\"displayName\":\"iahxmfqryarvs\",\"enabled\":true,\"lastModifiedUtc\":\"2021-11-03T23:15:14Z\",\"suppressionDuration\":\"PT174H26M5S\",\"suppressionEnabled\":true,\"tactics\":[\"DefenseEvasion\",\"Persistence\",\"Impact\"],\"techniques\":[\"thzodubtlmjtgbl\"],\"incidentConfiguration\":{\"createIncident\":false,\"groupingConfiguration\":{\"enabled\":true,\"reopenClosedIncident\":true,\"lookbackDuration\":\"PT72H7M19S\",\"matchingMethod\":\"Selected\",\"groupByEntities\":[\"Process\",\"MailCluster\"],\"groupByAlertDetails\":[\"Severity\",\"Severity\",\"Severity\",\"Severity\"],\"groupByCustomDetails\":[\"vjcteoedlrslsk\",\"zpxvjnzdpvoc\"]}},\"query\":\"hpcnabxzfsn\",\"queryFrequency\":\"PT131H20M30S\",\"queryPeriod\":\"PT150H46M31S\",\"severity\":\"Medium\",\"triggerOperator\":\"NotEqual\",\"triggerThreshold\":598481595,\"eventGroupingSettings\":{\"aggregationKind\":\"AlertPerResult\"},\"customDetails\":{\"dajlskzpt\":\"wwwncknr\",\"mcgcjeinue\":\"xulweucyrthxqle\"},\"entityMappings\":[{\"entityType\":\"IP\",\"fieldMappings\":[{\"identifier\":\"jvqntt\",\"columnName\":\"q\"},{\"identifier\":\"bzfivfok\",\"columnName\":\"sthhzagjfwy\"}]},{\"entityType\":\"URL\",\"fieldMappings\":[{\"identifier\":\"nuzejgvkveb\",\"columnName\":\"szllrzlsmmdqgmi\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"imcqrh\",\"alertDescriptionFormat\":\"t\",\"alertTacticsColumnName\":\"nklogxsvtzarhzv\",\"alertSeverityColumnName\":\"sqktcmbjwz\"}}")
            .toObject(ScheduledAlertRuleProperties.class);
        Assertions.assertEquals("hpcnabxzfsn", model.query());
        Assertions.assertEquals(Duration.parse("PT131H20M30S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT150H46M31S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.MEDIUM, model.severity());
        Assertions.assertEquals(TriggerOperator.NOT_EQUAL, model.triggerOperator());
        Assertions.assertEquals(598481595, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("wwwncknr", model.customDetails().get("dajlskzpt"));
        Assertions.assertEquals(EntityMappingType.IP, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("jvqntt", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("q", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("imcqrh", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("t", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("nklogxsvtzarhzv", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("sqktcmbjwz", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals("g", model.alertRuleTemplateName());
        Assertions.assertEquals("quv", model.templateVersion());
        Assertions.assertEquals("gglpmcrdcuelj", model.description());
        Assertions.assertEquals("iahxmfqryarvs", model.displayName());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(Duration.parse("PT174H26M5S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.DEFENSE_EVASION, model.tactics().get(0));
        Assertions.assertEquals("thzodubtlmjtgbl", model.techniques().get(0));
        Assertions.assertEquals(false, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT72H7M19S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.SELECTED,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.PROCESS,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.SEVERITY,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("vjcteoedlrslsk",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleProperties model = new ScheduledAlertRuleProperties().withQuery("hpcnabxzfsn")
            .withQueryFrequency(Duration.parse("PT131H20M30S"))
            .withQueryPeriod(Duration.parse("PT150H46M31S"))
            .withSeverity(AlertSeverity.MEDIUM)
            .withTriggerOperator(TriggerOperator.NOT_EQUAL)
            .withTriggerThreshold(598481595)
            .withEventGroupingSettings(
                new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.ALERT_PER_RESULT))
            .withCustomDetails(mapOf("dajlskzpt", "wwwncknr", "mcgcjeinue", "xulweucyrthxqle"))
            .withEntityMappings(Arrays.asList(
                new EntityMapping().withEntityType(EntityMappingType.IP)
                    .withFieldMappings(Arrays.asList(new FieldMapping().withIdentifier("jvqntt").withColumnName("q"),
                        new FieldMapping().withIdentifier("bzfivfok").withColumnName("sthhzagjfwy"))),
                new EntityMapping().withEntityType(EntityMappingType.URL)
                    .withFieldMappings(Arrays
                        .asList(new FieldMapping().withIdentifier("nuzejgvkveb").withColumnName("szllrzlsmmdqgmi")))))
            .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("imcqrh")
                .withAlertDescriptionFormat("t")
                .withAlertTacticsColumnName("nklogxsvtzarhzv")
                .withAlertSeverityColumnName("sqktcmbjwz"))
            .withAlertRuleTemplateName("g")
            .withTemplateVersion("quv")
            .withDescription("gglpmcrdcuelj")
            .withDisplayName("iahxmfqryarvs")
            .withEnabled(true)
            .withSuppressionDuration(Duration.parse("PT174H26M5S"))
            .withSuppressionEnabled(true)
            .withTactics(Arrays.asList(AttackTactic.DEFENSE_EVASION, AttackTactic.PERSISTENCE, AttackTactic.IMPACT))
            .withTechniques(Arrays.asList("thzodubtlmjtgbl"))
            .withIncidentConfiguration(new IncidentConfiguration().withCreateIncident(false)
                .withGroupingConfiguration(new GroupingConfiguration().withEnabled(true)
                    .withReopenClosedIncident(true)
                    .withLookbackDuration(Duration.parse("PT72H7M19S"))
                    .withMatchingMethod(MatchingMethod.SELECTED)
                    .withGroupByEntities(Arrays.asList(EntityMappingType.PROCESS, EntityMappingType.MAIL_CLUSTER))
                    .withGroupByAlertDetails(Arrays.asList(AlertDetail.SEVERITY, AlertDetail.SEVERITY,
                        AlertDetail.SEVERITY, AlertDetail.SEVERITY))
                    .withGroupByCustomDetails(Arrays.asList("vjcteoedlrslsk", "zpxvjnzdpvoc"))));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleProperties.class);
        Assertions.assertEquals("hpcnabxzfsn", model.query());
        Assertions.assertEquals(Duration.parse("PT131H20M30S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT150H46M31S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.MEDIUM, model.severity());
        Assertions.assertEquals(TriggerOperator.NOT_EQUAL, model.triggerOperator());
        Assertions.assertEquals(598481595, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("wwwncknr", model.customDetails().get("dajlskzpt"));
        Assertions.assertEquals(EntityMappingType.IP, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("jvqntt", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("q", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("imcqrh", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("t", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("nklogxsvtzarhzv", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("sqktcmbjwz", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals("g", model.alertRuleTemplateName());
        Assertions.assertEquals("quv", model.templateVersion());
        Assertions.assertEquals("gglpmcrdcuelj", model.description());
        Assertions.assertEquals("iahxmfqryarvs", model.displayName());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(Duration.parse("PT174H26M5S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.DEFENSE_EVASION, model.tactics().get(0));
        Assertions.assertEquals("thzodubtlmjtgbl", model.techniques().get(0));
        Assertions.assertEquals(false, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT72H7M19S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.SELECTED,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.PROCESS,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.SEVERITY,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("vjcteoedlrslsk",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
