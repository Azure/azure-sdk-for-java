// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.fluent.models.ScheduledAlertRuleProperties;
import com.azure.resourcemanager.securityinsights.models.AlertDetail;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.GroupingConfiguration;
import com.azure.resourcemanager.securityinsights.models.IncidentConfiguration;
import com.azure.resourcemanager.securityinsights.models.MatchingMethod;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleProperties model = BinaryData.fromString(
            "{\"alertRuleTemplateName\":\"qfby\",\"templateVersion\":\"rfgi\",\"description\":\"tcojocqwo\",\"displayName\":\"fnzjvusfzldm\",\"enabled\":true,\"lastModifiedUtc\":\"2021-08-07T02:58:02Z\",\"suppressionDuration\":\"PT132H40M7S\",\"suppressionEnabled\":true,\"tactics\":[\"InitialAccess\",\"DefenseEvasion\",\"DefenseEvasion\",\"InhibitResponseFunction\"],\"techniques\":[\"ysownbtgkbug\",\"jqctojcmisofie\"],\"incidentConfiguration\":{\"createIncident\":true,\"groupingConfiguration\":{\"enabled\":true,\"reopenClosedIncident\":false,\"lookbackDuration\":\"PT66H50M3S\",\"matchingMethod\":\"Selected\",\"groupByEntities\":[\"Host\",\"IP\"],\"groupByAlertDetails\":[\"DisplayName\",\"DisplayName\"],\"groupByCustomDetails\":[\"wkhihihlhzdsqt\",\"bsrgnowc\"]}},\"query\":\"fgmvecactxmwo\",\"queryFrequency\":\"PT44H36M46S\",\"queryPeriod\":\"PT110H48M2S\",\"severity\":\"Low\",\"triggerOperator\":\"Equal\",\"triggerThreshold\":1896348924,\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"customDetails\":{\"wifzmp\":\"qo\",\"cvhrfsp\":\"wyivqikf\",\"kvyklxubyjaffmm\":\"uagrttikteusqc\"},\"entityMappings\":[{\"entityType\":\"Mailbox\",\"fieldMappings\":[{\"identifier\":\"bgq\",\"columnName\":\"rtalmet\"}]},{\"entityType\":\"Malware\",\"fieldMappings\":[{\"identifier\":\"lqxihhrmooiz\",\"columnName\":\"eypxiutcxapzhyr\"},{\"identifier\":\"togebjoxsl\",\"columnName\":\"nhl\"},{\"identifier\":\"rqnkkzjcjbtr\",\"columnName\":\"ehvvib\"},{\"identifier\":\"jj\",\"columnName\":\"oqbeitpkxzt\"}]},{\"entityType\":\"SecurityGroup\",\"fieldMappings\":[{\"identifier\":\"ft\",\"columnName\":\"gfcwqmpimaqxzhem\"}]},{\"entityType\":\"Account\",\"fieldMappings\":[{\"identifier\":\"jswtwkozzwc\",\"columnName\":\"kb\"},{\"identifier\":\"pfajnjwltlwtjj\",\"columnName\":\"ktalhsnvkcdmxz\"},{\"identifier\":\"oaimlnw\",\"columnName\":\"aomylwea\"},{\"identifier\":\"lcsethwwnpj\",\"columnName\":\"fz\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"ch\",\"alertDescriptionFormat\":\"hfbousnfepgfew\",\"alertTacticsColumnName\":\"wlyxgncxyk\",\"alertSeverityColumnName\":\"djhlimm\"}}")
            .toObject(ScheduledAlertRuleProperties.class);
        Assertions.assertEquals("fgmvecactxmwo", model.query());
        Assertions.assertEquals(Duration.parse("PT44H36M46S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT110H48M2S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.EQUAL, model.triggerOperator());
        Assertions.assertEquals(1896348924, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("qo", model.customDetails().get("wifzmp"));
        Assertions.assertEquals(EntityMappingType.MAILBOX, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("bgq", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("rtalmet", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("ch", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("hfbousnfepgfew", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("wlyxgncxyk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("djhlimm", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals("qfby", model.alertRuleTemplateName());
        Assertions.assertEquals("rfgi", model.templateVersion());
        Assertions.assertEquals("tcojocqwo", model.description());
        Assertions.assertEquals("fnzjvusfzldm", model.displayName());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(Duration.parse("PT132H40M7S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.INITIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("ysownbtgkbug", model.techniques().get(0));
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT66H50M3S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.SELECTED,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.HOST,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.DISPLAY_NAME,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("wkhihihlhzdsqt",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleProperties model = new ScheduledAlertRuleProperties().withQuery("fgmvecactxmwo")
            .withQueryFrequency(Duration.parse("PT44H36M46S"))
            .withQueryPeriod(Duration.parse("PT110H48M2S"))
            .withSeverity(AlertSeverity.LOW)
            .withTriggerOperator(TriggerOperator.EQUAL)
            .withTriggerThreshold(1896348924)
            .withEventGroupingSettings(
                new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT))
            .withCustomDetails(mapOf("wifzmp", "qo", "cvhrfsp", "wyivqikf", "kvyklxubyjaffmm", "uagrttikteusqc"))
            .withEntityMappings(Arrays.asList(new EntityMapping().withEntityType(EntityMappingType.MAILBOX)
                .withFieldMappings(Arrays.asList(new FieldMapping().withIdentifier("bgq").withColumnName("rtalmet"))),
                new EntityMapping().withEntityType(EntityMappingType.MALWARE)
                    .withFieldMappings(Arrays.asList(
                        new FieldMapping().withIdentifier("lqxihhrmooiz").withColumnName("eypxiutcxapzhyr"),
                        new FieldMapping().withIdentifier("togebjoxsl").withColumnName("nhl"),
                        new FieldMapping().withIdentifier("rqnkkzjcjbtr").withColumnName("ehvvib"),
                        new FieldMapping().withIdentifier("jj").withColumnName("oqbeitpkxzt"))),
                new EntityMapping().withEntityType(EntityMappingType.SECURITY_GROUP)
                    .withFieldMappings(
                        Arrays.asList(new FieldMapping().withIdentifier("ft").withColumnName("gfcwqmpimaqxzhem"))),
                new EntityMapping().withEntityType(EntityMappingType.ACCOUNT)
                    .withFieldMappings(
                        Arrays.asList(new FieldMapping().withIdentifier("jswtwkozzwc").withColumnName("kb"),
                            new FieldMapping().withIdentifier("pfajnjwltlwtjj").withColumnName("ktalhsnvkcdmxz"),
                            new FieldMapping().withIdentifier("oaimlnw").withColumnName("aomylwea"),
                            new FieldMapping().withIdentifier("lcsethwwnpj").withColumnName("fz")))))
            .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("ch")
                .withAlertDescriptionFormat("hfbousnfepgfew")
                .withAlertTacticsColumnName("wlyxgncxyk")
                .withAlertSeverityColumnName("djhlimm"))
            .withAlertRuleTemplateName("qfby")
            .withTemplateVersion("rfgi")
            .withDescription("tcojocqwo")
            .withDisplayName("fnzjvusfzldm")
            .withEnabled(true)
            .withSuppressionDuration(Duration.parse("PT132H40M7S"))
            .withSuppressionEnabled(true)
            .withTactics(Arrays.asList(AttackTactic.INITIAL_ACCESS, AttackTactic.DEFENSE_EVASION,
                AttackTactic.DEFENSE_EVASION, AttackTactic.INHIBIT_RESPONSE_FUNCTION))
            .withTechniques(Arrays.asList("ysownbtgkbug", "jqctojcmisofie"))
            .withIncidentConfiguration(new IncidentConfiguration().withCreateIncident(true)
                .withGroupingConfiguration(new GroupingConfiguration().withEnabled(true)
                    .withReopenClosedIncident(false)
                    .withLookbackDuration(Duration.parse("PT66H50M3S"))
                    .withMatchingMethod(MatchingMethod.SELECTED)
                    .withGroupByEntities(Arrays.asList(EntityMappingType.HOST, EntityMappingType.IP))
                    .withGroupByAlertDetails(Arrays.asList(AlertDetail.DISPLAY_NAME, AlertDetail.DISPLAY_NAME))
                    .withGroupByCustomDetails(Arrays.asList("wkhihihlhzdsqt", "bsrgnowc"))));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleProperties.class);
        Assertions.assertEquals("fgmvecactxmwo", model.query());
        Assertions.assertEquals(Duration.parse("PT44H36M46S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT110H48M2S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.EQUAL, model.triggerOperator());
        Assertions.assertEquals(1896348924, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("qo", model.customDetails().get("wifzmp"));
        Assertions.assertEquals(EntityMappingType.MAILBOX, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("bgq", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("rtalmet", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("ch", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("hfbousnfepgfew", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("wlyxgncxyk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("djhlimm", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals("qfby", model.alertRuleTemplateName());
        Assertions.assertEquals("rfgi", model.templateVersion());
        Assertions.assertEquals("tcojocqwo", model.description());
        Assertions.assertEquals("fnzjvusfzldm", model.displayName());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals(Duration.parse("PT132H40M7S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AttackTactic.INITIAL_ACCESS, model.tactics().get(0));
        Assertions.assertEquals("ysownbtgkbug", model.techniques().get(0));
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT66H50M3S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.SELECTED,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.HOST,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.DISPLAY_NAME,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("wkhihihlhzdsqt",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
