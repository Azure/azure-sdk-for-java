// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetail;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.GroupingConfiguration;
import com.azure.resourcemanager.securityinsights.models.IncidentConfiguration;
import com.azure.resourcemanager.securityinsights.models.MatchingMethod;
import com.azure.resourcemanager.securityinsights.models.NrtAlertRule;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NrtAlertRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NrtAlertRule model = BinaryData.fromString(
            "{\"kind\":\"NRT\",\"properties\":{\"alertRuleTemplateName\":\"mjxuvjipfdvhaxd\",\"templateVersion\":\"zaehpphthd\",\"description\":\"mvetatlakfq\",\"query\":\"ixwgiksbbvtooxrp\",\"tactics\":[\"LateralMovement\"],\"techniques\":[\"hgjtnhtukfaci\",\"mbf\",\"tumeezbxvqxb\",\"uvwc\"],\"displayName\":\"asgom\",\"enabled\":false,\"lastModifiedUtc\":\"2021-08-21T11:03:05Z\",\"suppressionDuration\":\"PT151H27M31S\",\"suppressionEnabled\":true,\"severity\":\"Informational\",\"incidentConfiguration\":{\"createIncident\":true,\"groupingConfiguration\":{\"enabled\":false,\"reopenClosedIncident\":true,\"lookbackDuration\":\"PT34H56S\",\"matchingMethod\":\"AllEntities\",\"groupByEntities\":[\"SecurityGroup\",\"RegistryValue\"],\"groupByAlertDetails\":[\"Severity\"],\"groupByCustomDetails\":[\"htgfred\",\"ls\",\"grllcc\",\"aovjow\"]}},\"customDetails\":{\"bacom\":\"p\"},\"entityMappings\":[{\"entityType\":\"SubmissionMail\",\"fieldMappings\":[{\"identifier\":\"xns\",\"columnName\":\"orcgenmvcebxee\"},{\"identifier\":\"ujxcxxqn\",\"columnName\":\"qjkedwqurc\"},{\"identifier\":\"jmrvvxwjongz\",\"columnName\":\"hqqrsilcch\"}]},{\"entityType\":\"Account\",\"fieldMappings\":[{\"identifier\":\"nsbvr\",\"columnName\":\"qgvtojrulfu\"},{\"identifier\":\"ejrthcfjzhxlyub\",\"columnName\":\"rostvrjeqmtzz\"},{\"identifier\":\"qrztrxal\",\"columnName\":\"d\"},{\"identifier\":\"bsrwrsnrhpqat\",\"columnName\":\"kkvyanxk\"}]},{\"entityType\":\"FileHash\",\"fieldMappings\":[{\"identifier\":\"svuv\",\"columnName\":\"kqxetqmmliv\"}]},{\"entityType\":\"Host\",\"fieldMappings\":[{\"identifier\":\"xdchp\",\"columnName\":\"xlehzlxpgfquwzp\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"belwcer\",\"alertDescriptionFormat\":\"w\",\"alertTacticsColumnName\":\"jxljtxbusq\",\"alertSeverityColumnName\":\"xxniuisdzhgbd\"},\"eventGroupingSettings\":{\"aggregationKind\":\"AlertPerResult\"}},\"etag\":\"secnadbuwqrgxf\",\"id\":\"mqiyn\",\"name\":\"zoellnkkiiwvmtum\",\"type\":\"pymdjfuax\"}")
            .toObject(NrtAlertRule.class);
        Assertions.assertEquals("secnadbuwqrgxf", model.etag());
        Assertions.assertEquals("mjxuvjipfdvhaxd", model.alertRuleTemplateName());
        Assertions.assertEquals("zaehpphthd", model.templateVersion());
        Assertions.assertEquals("mvetatlakfq", model.description());
        Assertions.assertEquals("ixwgiksbbvtooxrp", model.query());
        Assertions.assertEquals(AttackTactic.LATERAL_MOVEMENT, model.tactics().get(0));
        Assertions.assertEquals("hgjtnhtukfaci", model.techniques().get(0));
        Assertions.assertEquals("asgom", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(Duration.parse("PT151H27M31S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT34H56S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.ALL_ENTITIES,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.SECURITY_GROUP,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.SEVERITY,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("htgfred",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("p", model.customDetails().get("bacom"));
        Assertions.assertEquals(EntityMappingType.SUBMISSION_MAIL, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("xns", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("orcgenmvcebxee", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("belwcer", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("w", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("jxljtxbusq", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("xxniuisdzhgbd", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NrtAlertRule model = new NrtAlertRule().withEtag("secnadbuwqrgxf")
            .withAlertRuleTemplateName("mjxuvjipfdvhaxd")
            .withTemplateVersion("zaehpphthd")
            .withDescription("mvetatlakfq")
            .withQuery("ixwgiksbbvtooxrp")
            .withTactics(Arrays.asList(AttackTactic.LATERAL_MOVEMENT))
            .withTechniques(Arrays.asList("hgjtnhtukfaci", "mbf", "tumeezbxvqxb", "uvwc"))
            .withDisplayName("asgom")
            .withEnabled(false)
            .withSuppressionDuration(Duration.parse("PT151H27M31S"))
            .withSuppressionEnabled(true)
            .withSeverity(AlertSeverity.INFORMATIONAL)
            .withIncidentConfiguration(new IncidentConfiguration().withCreateIncident(true)
                .withGroupingConfiguration(new GroupingConfiguration().withEnabled(false)
                    .withReopenClosedIncident(true)
                    .withLookbackDuration(Duration.parse("PT34H56S"))
                    .withMatchingMethod(MatchingMethod.ALL_ENTITIES)
                    .withGroupByEntities(
                        Arrays.asList(EntityMappingType.SECURITY_GROUP, EntityMappingType.REGISTRY_VALUE))
                    .withGroupByAlertDetails(Arrays.asList(AlertDetail.SEVERITY))
                    .withGroupByCustomDetails(Arrays.asList("htgfred", "ls", "grllcc", "aovjow"))))
            .withCustomDetails(mapOf("bacom", "p"))
            .withEntityMappings(
                Arrays.asList(
                    new EntityMapping().withEntityType(EntityMappingType.SUBMISSION_MAIL)
                        .withFieldMappings(
                            Arrays.asList(new FieldMapping().withIdentifier("xns").withColumnName("orcgenmvcebxee"),
                                new FieldMapping().withIdentifier("ujxcxxqn").withColumnName("qjkedwqurc"),
                                new FieldMapping().withIdentifier("jmrvvxwjongz").withColumnName("hqqrsilcch"))),
                    new EntityMapping().withEntityType(EntityMappingType.ACCOUNT)
                        .withFieldMappings(
                            Arrays.asList(new FieldMapping().withIdentifier("nsbvr").withColumnName("qgvtojrulfu"),
                                new FieldMapping().withIdentifier("ejrthcfjzhxlyub").withColumnName("rostvrjeqmtzz"),
                                new FieldMapping().withIdentifier("qrztrxal").withColumnName("d"),
                                new FieldMapping().withIdentifier("bsrwrsnrhpqat").withColumnName("kkvyanxk"))),
                    new EntityMapping().withEntityType(EntityMappingType.FILE_HASH)
                        .withFieldMappings(
                            Arrays.asList(new FieldMapping().withIdentifier("svuv").withColumnName("kqxetqmmliv"))),
                    new EntityMapping().withEntityType(EntityMappingType.HOST)
                        .withFieldMappings(Arrays
                            .asList(new FieldMapping().withIdentifier("xdchp").withColumnName("xlehzlxpgfquwzp")))))
            .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("belwcer")
                .withAlertDescriptionFormat("w")
                .withAlertTacticsColumnName("jxljtxbusq")
                .withAlertSeverityColumnName("xxniuisdzhgbd"))
            .withEventGroupingSettings(
                new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.ALERT_PER_RESULT));
        model = BinaryData.fromObject(model).toObject(NrtAlertRule.class);
        Assertions.assertEquals("secnadbuwqrgxf", model.etag());
        Assertions.assertEquals("mjxuvjipfdvhaxd", model.alertRuleTemplateName());
        Assertions.assertEquals("zaehpphthd", model.templateVersion());
        Assertions.assertEquals("mvetatlakfq", model.description());
        Assertions.assertEquals("ixwgiksbbvtooxrp", model.query());
        Assertions.assertEquals(AttackTactic.LATERAL_MOVEMENT, model.tactics().get(0));
        Assertions.assertEquals("hgjtnhtukfaci", model.techniques().get(0));
        Assertions.assertEquals("asgom", model.displayName());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals(Duration.parse("PT151H27M31S"), model.suppressionDuration());
        Assertions.assertEquals(true, model.suppressionEnabled());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(true, model.incidentConfiguration().createIncident());
        Assertions.assertEquals(false, model.incidentConfiguration().groupingConfiguration().enabled());
        Assertions.assertEquals(true, model.incidentConfiguration().groupingConfiguration().reopenClosedIncident());
        Assertions.assertEquals(Duration.parse("PT34H56S"),
            model.incidentConfiguration().groupingConfiguration().lookbackDuration());
        Assertions.assertEquals(MatchingMethod.ALL_ENTITIES,
            model.incidentConfiguration().groupingConfiguration().matchingMethod());
        Assertions.assertEquals(EntityMappingType.SECURITY_GROUP,
            model.incidentConfiguration().groupingConfiguration().groupByEntities().get(0));
        Assertions.assertEquals(AlertDetail.SEVERITY,
            model.incidentConfiguration().groupingConfiguration().groupByAlertDetails().get(0));
        Assertions.assertEquals("htgfred",
            model.incidentConfiguration().groupingConfiguration().groupByCustomDetails().get(0));
        Assertions.assertEquals("p", model.customDetails().get("bacom"));
        Assertions.assertEquals(EntityMappingType.SUBMISSION_MAIL, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("xns", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("orcgenmvcebxee", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("belwcer", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("w", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("jxljtxbusq", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("xxniuisdzhgbd", model.alertDetailsOverride().alertSeverityColumnName());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
