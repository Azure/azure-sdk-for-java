// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.ScheduledAlertRuleCommonProperties;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleCommonPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleCommonProperties model = BinaryData.fromString(
            "{\"query\":\"mhpdu\",\"queryFrequency\":\"PT103H31M29S\",\"queryPeriod\":\"PT117H26M22S\",\"severity\":\"Informational\",\"triggerOperator\":\"NotEqual\",\"triggerThreshold\":796057857,\"eventGroupingSettings\":{\"aggregationKind\":\"AlertPerResult\"},\"customDetails\":{\"pkawnsnlaim\":\"anqimwbzxpdcl\",\"ksqmudmfcoibi\":\"ux\",\"rk\":\"ziuswsw\",\"btqqvyfs\":\"qsj\"},\"entityMappings\":[{\"entityType\":\"SubmissionMail\",\"fieldMappings\":[{\"identifier\":\"qvogfuyz\",\"columnName\":\"bhli\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"qecroodl\",\"alertDescriptionFormat\":\"cdrdaasaxxo\",\"alertTacticsColumnName\":\"mfkwiyjvzuk\",\"alertSeverityColumnName\":\"r\"}}")
            .toObject(ScheduledAlertRuleCommonProperties.class);
        Assertions.assertEquals("mhpdu", model.query());
        Assertions.assertEquals(Duration.parse("PT103H31M29S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT117H26M22S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(TriggerOperator.NOT_EQUAL, model.triggerOperator());
        Assertions.assertEquals(796057857, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("anqimwbzxpdcl", model.customDetails().get("pkawnsnlaim"));
        Assertions.assertEquals(EntityMappingType.SUBMISSION_MAIL, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("qvogfuyz", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("bhli", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("qecroodl", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("cdrdaasaxxo", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("mfkwiyjvzuk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("r", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleCommonProperties model = new ScheduledAlertRuleCommonProperties().withQuery("mhpdu")
            .withQueryFrequency(Duration.parse("PT103H31M29S"))
            .withQueryPeriod(Duration.parse("PT117H26M22S"))
            .withSeverity(AlertSeverity.INFORMATIONAL)
            .withTriggerOperator(TriggerOperator.NOT_EQUAL)
            .withTriggerThreshold(796057857)
            .withEventGroupingSettings(
                new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.ALERT_PER_RESULT))
            .withCustomDetails(
                mapOf("pkawnsnlaim", "anqimwbzxpdcl", "ksqmudmfcoibi", "ux", "rk", "ziuswsw", "btqqvyfs", "qsj"))
            .withEntityMappings(Arrays.asList(new EntityMapping().withEntityType(EntityMappingType.SUBMISSION_MAIL)
                .withFieldMappings(
                    Arrays.asList(new FieldMapping().withIdentifier("qvogfuyz").withColumnName("bhli")))))
            .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("qecroodl")
                .withAlertDescriptionFormat("cdrdaasaxxo")
                .withAlertTacticsColumnName("mfkwiyjvzuk")
                .withAlertSeverityColumnName("r"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleCommonProperties.class);
        Assertions.assertEquals("mhpdu", model.query());
        Assertions.assertEquals(Duration.parse("PT103H31M29S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT117H26M22S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.INFORMATIONAL, model.severity());
        Assertions.assertEquals(TriggerOperator.NOT_EQUAL, model.triggerOperator());
        Assertions.assertEquals(796057857, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.ALERT_PER_RESULT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("anqimwbzxpdcl", model.customDetails().get("pkawnsnlaim"));
        Assertions.assertEquals(EntityMappingType.SUBMISSION_MAIL, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("qvogfuyz", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("bhli", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("qecroodl", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("cdrdaasaxxo", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("mfkwiyjvzuk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("r", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
