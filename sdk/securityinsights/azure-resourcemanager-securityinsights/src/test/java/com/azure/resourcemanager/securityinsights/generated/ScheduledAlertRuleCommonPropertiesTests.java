// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EntityMappingType;
import com.azure.resourcemanager.securityinsights.models.EventGroupingAggregationKind;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.FieldMapping;
import com.azure.resourcemanager.securityinsights.models.ScheduledAlertRuleCommonProperties;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledAlertRuleCommonPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledAlertRuleCommonProperties model = BinaryData.fromString(
            "{\"query\":\"iwrxgkn\",\"queryFrequency\":\"PT12H25M8S\",\"queryPeriod\":\"PT154H27M34S\",\"severity\":\"Low\",\"triggerOperator\":\"GreaterThan\",\"triggerThreshold\":623780438,\"eventGroupingSettings\":{\"aggregationKind\":\"SingleAlert\"},\"customDetails\":{\"zflbqvg\":\"oxgsgbpfgzdjtx\",\"sdtutnwlduyc\":\"qvlgafcqusrdvetn\",\"kuqgsjjxundxgket\":\"uzhyrmewipmvekdx\"},\"entityMappings\":[{\"entityType\":\"Malware\",\"fieldMappings\":[{\"identifier\":\"jmhvvmuvgpmuneq\",\"columnName\":\"vmhfbuz\"},{\"identifier\":\"ihsasb\",\"columnName\":\"dyp\"}]},{\"entityType\":\"DNS\",\"fieldMappings\":[{\"identifier\":\"slynsqyrpfoo\",\"columnName\":\"lttymsjn\"},{\"identifier\":\"qdnfwqzdz\",\"columnName\":\"ilaxhn\"},{\"identifier\":\"qlyvijo\",\"columnName\":\"iv\"}]}],\"alertDetailsOverride\":{\"alertDisplayNameFormat\":\"yzunbixxrtikv\",\"alertDescriptionFormat\":\"wpgclrcivt\",\"alertTacticsColumnName\":\"xfrk\",\"alertSeverityColumnName\":\"xpmyyefrpmpdnq\"}}")
            .toObject(ScheduledAlertRuleCommonProperties.class);
        Assertions.assertEquals("iwrxgkn", model.query());
        Assertions.assertEquals(Duration.parse("PT12H25M8S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT154H27M34S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.GREATER_THAN, model.triggerOperator());
        Assertions.assertEquals(623780438, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("oxgsgbpfgzdjtx", model.customDetails().get("zflbqvg"));
        Assertions.assertEquals(EntityMappingType.MALWARE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("jmhvvmuvgpmuneq", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("vmhfbuz", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("yzunbixxrtikv", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("wpgclrcivt", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("xfrk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("xpmyyefrpmpdnq", model.alertDetailsOverride().alertSeverityColumnName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledAlertRuleCommonProperties model
            = new ScheduledAlertRuleCommonProperties().withQuery("iwrxgkn")
                .withQueryFrequency(Duration.parse("PT12H25M8S"))
                .withQueryPeriod(Duration.parse("PT154H27M34S"))
                .withSeverity(AlertSeverity.LOW)
                .withTriggerOperator(TriggerOperator.GREATER_THAN)
                .withTriggerThreshold(623780438)
                .withEventGroupingSettings(
                    new EventGroupingSettings().withAggregationKind(EventGroupingAggregationKind.SINGLE_ALERT))
                .withCustomDetails(mapOf("zflbqvg", "oxgsgbpfgzdjtx", "sdtutnwlduyc", "qvlgafcqusrdvetn",
                    "kuqgsjjxundxgket", "uzhyrmewipmvekdx"))
                .withEntityMappings(
                    Arrays.asList(
                        new EntityMapping().withEntityType(EntityMappingType.MALWARE)
                            .withFieldMappings(Arrays
                                .asList(new FieldMapping().withIdentifier("jmhvvmuvgpmuneq").withColumnName("vmhfbuz"),
                                    new FieldMapping().withIdentifier("ihsasb").withColumnName("dyp"))),
                        new EntityMapping().withEntityType(EntityMappingType.DNS)
                            .withFieldMappings(Arrays.asList(
                                new FieldMapping().withIdentifier("slynsqyrpfoo").withColumnName("lttymsjn"),
                                new FieldMapping().withIdentifier("qdnfwqzdz").withColumnName("ilaxhn"),
                                new FieldMapping().withIdentifier("qlyvijo").withColumnName("iv")))))
                .withAlertDetailsOverride(new AlertDetailsOverride().withAlertDisplayNameFormat("yzunbixxrtikv")
                    .withAlertDescriptionFormat("wpgclrcivt")
                    .withAlertTacticsColumnName("xfrk")
                    .withAlertSeverityColumnName("xpmyyefrpmpdnq"));
        model = BinaryData.fromObject(model).toObject(ScheduledAlertRuleCommonProperties.class);
        Assertions.assertEquals("iwrxgkn", model.query());
        Assertions.assertEquals(Duration.parse("PT12H25M8S"), model.queryFrequency());
        Assertions.assertEquals(Duration.parse("PT154H27M34S"), model.queryPeriod());
        Assertions.assertEquals(AlertSeverity.LOW, model.severity());
        Assertions.assertEquals(TriggerOperator.GREATER_THAN, model.triggerOperator());
        Assertions.assertEquals(623780438, model.triggerThreshold());
        Assertions.assertEquals(EventGroupingAggregationKind.SINGLE_ALERT,
            model.eventGroupingSettings().aggregationKind());
        Assertions.assertEquals("oxgsgbpfgzdjtx", model.customDetails().get("zflbqvg"));
        Assertions.assertEquals(EntityMappingType.MALWARE, model.entityMappings().get(0).entityType());
        Assertions.assertEquals("jmhvvmuvgpmuneq", model.entityMappings().get(0).fieldMappings().get(0).identifier());
        Assertions.assertEquals("vmhfbuz", model.entityMappings().get(0).fieldMappings().get(0).columnName());
        Assertions.assertEquals("yzunbixxrtikv", model.alertDetailsOverride().alertDisplayNameFormat());
        Assertions.assertEquals("wpgclrcivt", model.alertDetailsOverride().alertDescriptionFormat());
        Assertions.assertEquals("xfrk", model.alertDetailsOverride().alertTacticsColumnName());
        Assertions.assertEquals("xpmyyefrpmpdnq", model.alertDetailsOverride().alertSeverityColumnName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
