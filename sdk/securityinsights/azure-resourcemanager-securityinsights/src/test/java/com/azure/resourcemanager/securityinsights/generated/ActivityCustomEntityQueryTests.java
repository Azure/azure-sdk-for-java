// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.securityinsights.models.ActivityCustomEntityQuery;
import com.azure.resourcemanager.securityinsights.models.ActivityEntityQueriesPropertiesQueryDefinitions;
import com.azure.resourcemanager.securityinsights.models.EntityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ActivityCustomEntityQueryTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActivityCustomEntityQuery model = BinaryData.fromString(
            "{\"kind\":\"Activity\",\"properties\":{\"title\":\"dh\",\"content\":\"tecaa\",\"description\":\"dohzniucbdaombwi\",\"queryDefinitions\":{\"query\":\"d\"},\"inputEntityType\":\"Host\",\"requiredInputFieldsSets\":[[\"e\"],[\"wavvqxuajgcqwuly\",\"kgfcfdruws\",\"kxx\",\"clhuulriqbyokv\"],[\"bzsxebrslttfy\",\"cdjwsu\",\"ardnagttpufpbpgn\"],[\"olhujbfwxiplkyso\",\"syjprxslwhdmcvh\",\"b\"]],\"entitiesFilter\":{\"aderltfokyk\":[\"f\",\"huwzbxpcqzgi\",\"otjecohmxvvl\",\"rskapbxwieexu\"]},\"templateName\":\"imyc\",\"enabled\":false,\"createdTimeUtc\":\"2021-06-30T11:49:51Z\",\"lastModifiedTimeUtc\":\"2021-05-23T15:01:26Z\"},\"etag\":\"znnuifersejegpr\",\"id\":\"guwrjm\",\"name\":\"vvbtuqkxx\",\"type\":\"mwgxqlde\"}")
            .toObject(ActivityCustomEntityQuery.class);
        Assertions.assertEquals("znnuifersejegpr", model.etag());
        Assertions.assertEquals("dh", model.title());
        Assertions.assertEquals("tecaa", model.content());
        Assertions.assertEquals("dohzniucbdaombwi", model.description());
        Assertions.assertEquals("d", model.queryDefinitions().query());
        Assertions.assertEquals(EntityType.HOST, model.inputEntityType());
        Assertions.assertEquals("e", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("f", model.entitiesFilter().get("aderltfokyk").get(0));
        Assertions.assertEquals("imyc", model.templateName());
        Assertions.assertEquals(false, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActivityCustomEntityQuery model = new ActivityCustomEntityQuery().withEtag("znnuifersejegpr")
            .withTitle("dh")
            .withContent("tecaa")
            .withDescription("dohzniucbdaombwi")
            .withQueryDefinitions(new ActivityEntityQueriesPropertiesQueryDefinitions().withQuery("d"))
            .withInputEntityType(EntityType.HOST)
            .withRequiredInputFieldsSets(Arrays.asList(Arrays.asList("e"),
                Arrays.asList("wavvqxuajgcqwuly", "kgfcfdruws", "kxx", "clhuulriqbyokv"),
                Arrays.asList("bzsxebrslttfy", "cdjwsu", "ardnagttpufpbpgn"),
                Arrays.asList("olhujbfwxiplkyso", "syjprxslwhdmcvh", "b")))
            .withEntitiesFilter(
                mapOf("aderltfokyk", Arrays.asList("f", "huwzbxpcqzgi", "otjecohmxvvl", "rskapbxwieexu")))
            .withTemplateName("imyc")
            .withEnabled(false);
        model = BinaryData.fromObject(model).toObject(ActivityCustomEntityQuery.class);
        Assertions.assertEquals("znnuifersejegpr", model.etag());
        Assertions.assertEquals("dh", model.title());
        Assertions.assertEquals("tecaa", model.content());
        Assertions.assertEquals("dohzniucbdaombwi", model.description());
        Assertions.assertEquals("d", model.queryDefinitions().query());
        Assertions.assertEquals(EntityType.HOST, model.inputEntityType());
        Assertions.assertEquals("e", model.requiredInputFieldsSets().get(0).get(0));
        Assertions.assertEquals("f", model.entitiesFilter().get("aderltfokyk").get(0));
        Assertions.assertEquals("imyc", model.templateName());
        Assertions.assertEquals(false, model.enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
