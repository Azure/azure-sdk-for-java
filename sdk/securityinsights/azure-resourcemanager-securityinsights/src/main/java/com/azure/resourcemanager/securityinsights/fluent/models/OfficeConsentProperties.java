// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Consent property bag.
 */
@Fluent
public final class OfficeConsentProperties implements JsonSerializable<OfficeConsentProperties> {
    /*
     * The tenantId of the Office365 with the consent.
     */
    private String tenantId;

    /*
     * Help to easily cascade among the data layers.
     */
    private String consentId;

    /**
     * Creates an instance of OfficeConsentProperties class.
     */
    public OfficeConsentProperties() {
    }

    /**
     * Get the tenantId property: The tenantId of the Office365 with the consent.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The tenantId of the Office365 with the consent.
     * 
     * @param tenantId the tenantId value to set.
     * @return the OfficeConsentProperties object itself.
     */
    public OfficeConsentProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the consentId property: Help to easily cascade among the data layers.
     * 
     * @return the consentId value.
     */
    public String consentId() {
        return this.consentId;
    }

    /**
     * Set the consentId property: Help to easily cascade among the data layers.
     * 
     * @param consentId the consentId value to set.
     * @return the OfficeConsentProperties object itself.
     */
    public OfficeConsentProperties withConsentId(String consentId) {
        this.consentId = consentId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("consentId", this.consentId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfficeConsentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfficeConsentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OfficeConsentProperties.
     */
    public static OfficeConsentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfficeConsentProperties deserializedOfficeConsentProperties = new OfficeConsentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedOfficeConsentProperties.tenantId = reader.getString();
                } else if ("consentId".equals(fieldName)) {
                    deserializedOfficeConsentProperties.consentId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfficeConsentProperties;
        });
    }
}
