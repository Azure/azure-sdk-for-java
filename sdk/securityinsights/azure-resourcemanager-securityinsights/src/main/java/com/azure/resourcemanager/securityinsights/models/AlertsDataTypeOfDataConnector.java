// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Alerts data type for data connectors.
 */
@Fluent
public class AlertsDataTypeOfDataConnector implements JsonSerializable<AlertsDataTypeOfDataConnector> {
    /*
     * Alerts data type connection.
     */
    private DataConnectorDataTypeCommon alerts;

    /**
     * Creates an instance of AlertsDataTypeOfDataConnector class.
     */
    public AlertsDataTypeOfDataConnector() {
    }

    /**
     * Get the alerts property: Alerts data type connection.
     * 
     * @return the alerts value.
     */
    public DataConnectorDataTypeCommon alerts() {
        return this.alerts;
    }

    /**
     * Set the alerts property: Alerts data type connection.
     * 
     * @param alerts the alerts value to set.
     * @return the AlertsDataTypeOfDataConnector object itself.
     */
    public AlertsDataTypeOfDataConnector withAlerts(DataConnectorDataTypeCommon alerts) {
        this.alerts = alerts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alerts() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property alerts in model AlertsDataTypeOfDataConnector"));
        } else {
            alerts().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AlertsDataTypeOfDataConnector.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("alerts", this.alerts);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertsDataTypeOfDataConnector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertsDataTypeOfDataConnector if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AlertsDataTypeOfDataConnector.
     */
    public static AlertsDataTypeOfDataConnector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertsDataTypeOfDataConnector deserializedAlertsDataTypeOfDataConnector
                = new AlertsDataTypeOfDataConnector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alerts".equals(fieldName)) {
                    deserializedAlertsDataTypeOfDataConnector.alerts = DataConnectorDataTypeCommon.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertsDataTypeOfDataConnector;
        });
    }
}
