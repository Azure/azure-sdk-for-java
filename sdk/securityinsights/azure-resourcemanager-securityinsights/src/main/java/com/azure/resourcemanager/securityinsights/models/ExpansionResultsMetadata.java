// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Expansion result metadata.
 */
@Fluent
public final class ExpansionResultsMetadata implements JsonSerializable<ExpansionResultsMetadata> {
    /*
     * Information of the aggregated nodes in the expansion result.
     */
    private List<ExpansionResultAggregation> aggregations;

    /**
     * Creates an instance of ExpansionResultsMetadata class.
     */
    public ExpansionResultsMetadata() {
    }

    /**
     * Get the aggregations property: Information of the aggregated nodes in the expansion result.
     * 
     * @return the aggregations value.
     */
    public List<ExpansionResultAggregation> aggregations() {
        return this.aggregations;
    }

    /**
     * Set the aggregations property: Information of the aggregated nodes in the expansion result.
     * 
     * @param aggregations the aggregations value to set.
     * @return the ExpansionResultsMetadata object itself.
     */
    public ExpansionResultsMetadata withAggregations(List<ExpansionResultAggregation> aggregations) {
        this.aggregations = aggregations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aggregations() != null) {
            aggregations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("aggregations", this.aggregations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExpansionResultsMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExpansionResultsMetadata if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExpansionResultsMetadata.
     */
    public static ExpansionResultsMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExpansionResultsMetadata deserializedExpansionResultsMetadata = new ExpansionResultsMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aggregations".equals(fieldName)) {
                    List<ExpansionResultAggregation> aggregations
                        = reader.readArray(reader1 -> ExpansionResultAggregation.fromJson(reader1));
                    deserializedExpansionResultsMetadata.aggregations = aggregations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExpansionResultsMetadata;
        });
    }
}
