// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Instruction steps to enable the connector.
 */
@Fluent
public class InstructionSteps implements JsonSerializable<InstructionSteps> {
    /*
     * Instruction step title
     */
    private String title;

    /*
     * Instruction step description
     */
    private String description;

    /*
     * Instruction step details
     */
    private List<InstructionStepsInstructionsItem> instructions;

    /**
     * Creates an instance of InstructionSteps class.
     */
    public InstructionSteps() {
    }

    /**
     * Get the title property: Instruction step title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Instruction step title.
     * 
     * @param title the title value to set.
     * @return the InstructionSteps object itself.
     */
    public InstructionSteps withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Instruction step description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Instruction step description.
     * 
     * @param description the description value to set.
     * @return the InstructionSteps object itself.
     */
    public InstructionSteps withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the instructions property: Instruction step details.
     * 
     * @return the instructions value.
     */
    public List<InstructionStepsInstructionsItem> instructions() {
        return this.instructions;
    }

    /**
     * Set the instructions property: Instruction step details.
     * 
     * @param instructions the instructions value to set.
     * @return the InstructionSteps object itself.
     */
    public InstructionSteps withInstructions(List<InstructionStepsInstructionsItem> instructions) {
        this.instructions = instructions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instructions() != null) {
            instructions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("instructions", this.instructions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstructionSteps from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstructionSteps if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstructionSteps.
     */
    public static InstructionSteps fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstructionSteps deserializedInstructionSteps = new InstructionSteps();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedInstructionSteps.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedInstructionSteps.description = reader.getString();
                } else if ("instructions".equals(fieldName)) {
                    List<InstructionStepsInstructionsItem> instructions
                        = reader.readArray(reader1 -> InstructionStepsInstructionsItem.fromJson(reader1));
                    deserializedInstructionSteps.instructions = instructions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstructionSteps;
        });
    }
}
