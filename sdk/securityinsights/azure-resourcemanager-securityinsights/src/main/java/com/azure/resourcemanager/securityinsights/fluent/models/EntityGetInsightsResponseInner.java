// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.models.EntityInsightItem;
import com.azure.resourcemanager.securityinsights.models.GetInsightsResultsMetadata;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The Get Insights result operation response. */
@Fluent
public final class EntityGetInsightsResponseInner {
    /*
     * The metadata from the get insights operation results.
     */
    @JsonProperty(value = "metaData")
    private GetInsightsResultsMetadata metadata;

    /*
     * The insights result values.
     */
    @JsonProperty(value = "value")
    private List<EntityInsightItem> value;

    /**
     * Get the metadata property: The metadata from the get insights operation results.
     *
     * @return the metadata value.
     */
    public GetInsightsResultsMetadata metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata from the get insights operation results.
     *
     * @param metadata the metadata value to set.
     * @return the EntityGetInsightsResponseInner object itself.
     */
    public EntityGetInsightsResponseInner withMetadata(GetInsightsResultsMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the value property: The insights result values.
     *
     * @return the value value.
     */
    public List<EntityInsightItem> value() {
        return this.value;
    }

    /**
     * Set the value property: The insights result values.
     *
     * @param value the value value to set.
     * @return the EntityGetInsightsResponseInner object itself.
     */
    public EntityGetInsightsResponseInner withValue(List<EntityInsightItem> value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }
}
