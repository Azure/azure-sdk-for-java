// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ElevationToken;
import com.azure.resourcemanager.securityinsights.models.EntityCommonProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Process entity property bag.
 */
@Fluent
public final class ProcessEntityProperties extends EntityCommonProperties {
    /*
     * The account entity id running the processes.
     */
    private String accountEntityId;

    /*
     * The command line used to create the process
     */
    private String commandLine;

    /*
     * The time when the process started to run
     */
    private OffsetDateTime creationTimeUtc;

    /*
     * The elevation token associated with the process.
     */
    private ElevationToken elevationToken;

    /*
     * The host entity id on which the process was running
     */
    private String hostEntityId;

    /*
     * The session entity id in which the process was running
     */
    private String hostLogonSessionEntityId;

    /*
     * Image file entity id
     */
    private String imageFileEntityId;

    /*
     * The parent process entity id.
     */
    private String parentProcessEntityId;

    /*
     * The process ID
     */
    private String processId;

    /*
     * The graph item display name which is a short humanly readable description of the graph item instance. This
     * property is optional and might be system generated.
     */
    private String friendlyName;

    /*
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     */
    private Map<String, Object> additionalData;

    /**
     * Creates an instance of ProcessEntityProperties class.
     */
    public ProcessEntityProperties() {
    }

    /**
     * Get the accountEntityId property: The account entity id running the processes.
     * 
     * @return the accountEntityId value.
     */
    public String accountEntityId() {
        return this.accountEntityId;
    }

    /**
     * Get the commandLine property: The command line used to create the process.
     * 
     * @return the commandLine value.
     */
    public String commandLine() {
        return this.commandLine;
    }

    /**
     * Get the creationTimeUtc property: The time when the process started to run.
     * 
     * @return the creationTimeUtc value.
     */
    public OffsetDateTime creationTimeUtc() {
        return this.creationTimeUtc;
    }

    /**
     * Get the elevationToken property: The elevation token associated with the process.
     * 
     * @return the elevationToken value.
     */
    public ElevationToken elevationToken() {
        return this.elevationToken;
    }

    /**
     * Set the elevationToken property: The elevation token associated with the process.
     * 
     * @param elevationToken the elevationToken value to set.
     * @return the ProcessEntityProperties object itself.
     */
    public ProcessEntityProperties withElevationToken(ElevationToken elevationToken) {
        this.elevationToken = elevationToken;
        return this;
    }

    /**
     * Get the hostEntityId property: The host entity id on which the process was running.
     * 
     * @return the hostEntityId value.
     */
    public String hostEntityId() {
        return this.hostEntityId;
    }

    /**
     * Get the hostLogonSessionEntityId property: The session entity id in which the process was running.
     * 
     * @return the hostLogonSessionEntityId value.
     */
    public String hostLogonSessionEntityId() {
        return this.hostLogonSessionEntityId;
    }

    /**
     * Get the imageFileEntityId property: Image file entity id.
     * 
     * @return the imageFileEntityId value.
     */
    public String imageFileEntityId() {
        return this.imageFileEntityId;
    }

    /**
     * Get the parentProcessEntityId property: The parent process entity id.
     * 
     * @return the parentProcessEntityId value.
     */
    public String parentProcessEntityId() {
        return this.parentProcessEntityId;
    }

    /**
     * Get the processId property: The process ID.
     * 
     * @return the processId value.
     */
    public String processId() {
        return this.processId;
    }

    /**
     * Get the friendlyName property: The graph item display name which is a short humanly readable description of the
     * graph item instance. This property is optional and might be system generated.
     * 
     * @return the friendlyName value.
     */
    @Override
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Get the additionalData property: A bag of custom fields that should be part of the entity and will be presented
     * to the user.
     * 
     * @return the additionalData value.
     */
    @Override
    public Map<String, Object> additionalData() {
        return this.additionalData;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("elevationToken",
            this.elevationToken == null ? null : this.elevationToken.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProcessEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProcessEntityProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProcessEntityProperties.
     */
    public static ProcessEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProcessEntityProperties deserializedProcessEntityProperties = new ProcessEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalData".equals(fieldName)) {
                    Map<String, Object> additionalData = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedProcessEntityProperties.additionalData = additionalData;
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedProcessEntityProperties.friendlyName = reader.getString();
                } else if ("accountEntityId".equals(fieldName)) {
                    deserializedProcessEntityProperties.accountEntityId = reader.getString();
                } else if ("commandLine".equals(fieldName)) {
                    deserializedProcessEntityProperties.commandLine = reader.getString();
                } else if ("creationTimeUtc".equals(fieldName)) {
                    deserializedProcessEntityProperties.creationTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("elevationToken".equals(fieldName)) {
                    deserializedProcessEntityProperties.elevationToken = ElevationToken.fromString(reader.getString());
                } else if ("hostEntityId".equals(fieldName)) {
                    deserializedProcessEntityProperties.hostEntityId = reader.getString();
                } else if ("hostLogonSessionEntityId".equals(fieldName)) {
                    deserializedProcessEntityProperties.hostLogonSessionEntityId = reader.getString();
                } else if ("imageFileEntityId".equals(fieldName)) {
                    deserializedProcessEntityProperties.imageFileEntityId = reader.getString();
                } else if ("parentProcessEntityId".equals(fieldName)) {
                    deserializedProcessEntityProperties.parentProcessEntityId = reader.getString();
                } else if ("processId".equals(fieldName)) {
                    deserializedProcessEntityProperties.processId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProcessEntityProperties;
        });
    }
}
