// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Logs data type.
 */
@Fluent
public final class OfficePowerBIConnectorDataTypesLogs extends DataConnectorDataTypeCommon {
    /**
     * Creates an instance of OfficePowerBIConnectorDataTypesLogs class.
     */
    public OfficePowerBIConnectorDataTypesLogs() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OfficePowerBIConnectorDataTypesLogs withState(DataTypeState state) {
        super.withState(state);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property state in model OfficePowerBIConnectorDataTypesLogs"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OfficePowerBIConnectorDataTypesLogs.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", state() == null ? null : state().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfficePowerBIConnectorDataTypesLogs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfficePowerBIConnectorDataTypesLogs if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OfficePowerBIConnectorDataTypesLogs.
     */
    public static OfficePowerBIConnectorDataTypesLogs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfficePowerBIConnectorDataTypesLogs deserializedOfficePowerBIConnectorDataTypesLogs
                = new OfficePowerBIConnectorDataTypesLogs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedOfficePowerBIConnectorDataTypesLogs
                        .withState(DataTypeState.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfficePowerBIConnectorDataTypesLogs;
        });
    }
}
