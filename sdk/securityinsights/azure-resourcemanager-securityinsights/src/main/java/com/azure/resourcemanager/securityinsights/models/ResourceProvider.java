// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource provider permissions required for the connector.
 */
@Fluent
public class ResourceProvider implements JsonSerializable<ResourceProvider> {
    /*
     * Provider name
     */
    private ProviderName provider;

    /*
     * Permission description text
     */
    private String permissionsDisplayText;

    /*
     * Permission provider display name
     */
    private String providerDisplayName;

    /*
     * Permission provider scope
     */
    private PermissionProviderScope scope;

    /*
     * Required permissions for the connector
     */
    private RequiredPermissions requiredPermissions;

    /**
     * Creates an instance of ResourceProvider class.
     */
    public ResourceProvider() {
    }

    /**
     * Get the provider property: Provider name.
     * 
     * @return the provider value.
     */
    public ProviderName provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Provider name.
     * 
     * @param provider the provider value to set.
     * @return the ResourceProvider object itself.
     */
    public ResourceProvider withProvider(ProviderName provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the permissionsDisplayText property: Permission description text.
     * 
     * @return the permissionsDisplayText value.
     */
    public String permissionsDisplayText() {
        return this.permissionsDisplayText;
    }

    /**
     * Set the permissionsDisplayText property: Permission description text.
     * 
     * @param permissionsDisplayText the permissionsDisplayText value to set.
     * @return the ResourceProvider object itself.
     */
    public ResourceProvider withPermissionsDisplayText(String permissionsDisplayText) {
        this.permissionsDisplayText = permissionsDisplayText;
        return this;
    }

    /**
     * Get the providerDisplayName property: Permission provider display name.
     * 
     * @return the providerDisplayName value.
     */
    public String providerDisplayName() {
        return this.providerDisplayName;
    }

    /**
     * Set the providerDisplayName property: Permission provider display name.
     * 
     * @param providerDisplayName the providerDisplayName value to set.
     * @return the ResourceProvider object itself.
     */
    public ResourceProvider withProviderDisplayName(String providerDisplayName) {
        this.providerDisplayName = providerDisplayName;
        return this;
    }

    /**
     * Get the scope property: Permission provider scope.
     * 
     * @return the scope value.
     */
    public PermissionProviderScope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Permission provider scope.
     * 
     * @param scope the scope value to set.
     * @return the ResourceProvider object itself.
     */
    public ResourceProvider withScope(PermissionProviderScope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the requiredPermissions property: Required permissions for the connector.
     * 
     * @return the requiredPermissions value.
     */
    public RequiredPermissions requiredPermissions() {
        return this.requiredPermissions;
    }

    /**
     * Set the requiredPermissions property: Required permissions for the connector.
     * 
     * @param requiredPermissions the requiredPermissions value to set.
     * @return the ResourceProvider object itself.
     */
    public ResourceProvider withRequiredPermissions(RequiredPermissions requiredPermissions) {
        this.requiredPermissions = requiredPermissions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (requiredPermissions() != null) {
            requiredPermissions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provider", this.provider == null ? null : this.provider.toString());
        jsonWriter.writeStringField("permissionsDisplayText", this.permissionsDisplayText);
        jsonWriter.writeStringField("providerDisplayName", this.providerDisplayName);
        jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
        jsonWriter.writeJsonField("requiredPermissions", this.requiredPermissions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProvider from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProvider if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProvider.
     */
    public static ResourceProvider fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProvider deserializedResourceProvider = new ResourceProvider();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedResourceProvider.provider = ProviderName.fromString(reader.getString());
                } else if ("permissionsDisplayText".equals(fieldName)) {
                    deserializedResourceProvider.permissionsDisplayText = reader.getString();
                } else if ("providerDisplayName".equals(fieldName)) {
                    deserializedResourceProvider.providerDisplayName = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedResourceProvider.scope = PermissionProviderScope.fromString(reader.getString());
                } else if ("requiredPermissions".equals(fieldName)) {
                    deserializedResourceProvider.requiredPermissions = RequiredPermissions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProvider;
        });
    }
}
