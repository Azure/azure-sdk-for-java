// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a source subtype under a source signal consumed in Fusion detection.
 */
@Fluent
public final class FusionTemplateSourceSubType implements JsonSerializable<FusionTemplateSourceSubType> {
    /*
     * The name of source subtype under a source signal consumed in Fusion detection.
     */
    private String sourceSubTypeName;

    /*
     * The display name of source subtype under a source signal consumed in Fusion detection.
     */
    private String sourceSubTypeDisplayName;

    /*
     * Severity configuration available for a source subtype consumed in fusion detection.
     */
    private FusionTemplateSubTypeSeverityFilter severityFilter;

    /**
     * Creates an instance of FusionTemplateSourceSubType class.
     */
    public FusionTemplateSourceSubType() {
    }

    /**
     * Get the sourceSubTypeName property: The name of source subtype under a source signal consumed in Fusion
     * detection.
     * 
     * @return the sourceSubTypeName value.
     */
    public String sourceSubTypeName() {
        return this.sourceSubTypeName;
    }

    /**
     * Set the sourceSubTypeName property: The name of source subtype under a source signal consumed in Fusion
     * detection.
     * 
     * @param sourceSubTypeName the sourceSubTypeName value to set.
     * @return the FusionTemplateSourceSubType object itself.
     */
    public FusionTemplateSourceSubType withSourceSubTypeName(String sourceSubTypeName) {
        this.sourceSubTypeName = sourceSubTypeName;
        return this;
    }

    /**
     * Get the sourceSubTypeDisplayName property: The display name of source subtype under a source signal consumed in
     * Fusion detection.
     * 
     * @return the sourceSubTypeDisplayName value.
     */
    public String sourceSubTypeDisplayName() {
        return this.sourceSubTypeDisplayName;
    }

    /**
     * Get the severityFilter property: Severity configuration available for a source subtype consumed in fusion
     * detection.
     * 
     * @return the severityFilter value.
     */
    public FusionTemplateSubTypeSeverityFilter severityFilter() {
        return this.severityFilter;
    }

    /**
     * Set the severityFilter property: Severity configuration available for a source subtype consumed in fusion
     * detection.
     * 
     * @param severityFilter the severityFilter value to set.
     * @return the FusionTemplateSourceSubType object itself.
     */
    public FusionTemplateSourceSubType withSeverityFilter(FusionTemplateSubTypeSeverityFilter severityFilter) {
        this.severityFilter = severityFilter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceSubTypeName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceSubTypeName in model FusionTemplateSourceSubType"));
        }
        if (severityFilter() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property severityFilter in model FusionTemplateSourceSubType"));
        } else {
            severityFilter().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FusionTemplateSourceSubType.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceSubTypeName", this.sourceSubTypeName);
        jsonWriter.writeJsonField("severityFilter", this.severityFilter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FusionTemplateSourceSubType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FusionTemplateSourceSubType if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FusionTemplateSourceSubType.
     */
    public static FusionTemplateSourceSubType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FusionTemplateSourceSubType deserializedFusionTemplateSourceSubType = new FusionTemplateSourceSubType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceSubTypeName".equals(fieldName)) {
                    deserializedFusionTemplateSourceSubType.sourceSubTypeName = reader.getString();
                } else if ("severityFilter".equals(fieldName)) {
                    deserializedFusionTemplateSourceSubType.severityFilter
                        = FusionTemplateSubTypeSeverityFilter.fromJson(reader);
                } else if ("sourceSubTypeDisplayName".equals(fieldName)) {
                    deserializedFusionTemplateSourceSubType.sourceSubTypeDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFusionTemplateSourceSubType;
        });
    }
}
