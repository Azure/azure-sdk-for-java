// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Permissions required for the connector.
 */
@Fluent
public final class Permissions implements JsonSerializable<Permissions> {
    /*
     * Resource provider permissions required for the connector
     */
    private List<PermissionsResourceProviderItem> resourceProvider;

    /*
     * Customs permissions required for the connector
     */
    private List<PermissionsCustomsItem> customs;

    /**
     * Creates an instance of Permissions class.
     */
    public Permissions() {
    }

    /**
     * Get the resourceProvider property: Resource provider permissions required for the connector.
     * 
     * @return the resourceProvider value.
     */
    public List<PermissionsResourceProviderItem> resourceProvider() {
        return this.resourceProvider;
    }

    /**
     * Set the resourceProvider property: Resource provider permissions required for the connector.
     * 
     * @param resourceProvider the resourceProvider value to set.
     * @return the Permissions object itself.
     */
    public Permissions withResourceProvider(List<PermissionsResourceProviderItem> resourceProvider) {
        this.resourceProvider = resourceProvider;
        return this;
    }

    /**
     * Get the customs property: Customs permissions required for the connector.
     * 
     * @return the customs value.
     */
    public List<PermissionsCustomsItem> customs() {
        return this.customs;
    }

    /**
     * Set the customs property: Customs permissions required for the connector.
     * 
     * @param customs the customs value to set.
     * @return the Permissions object itself.
     */
    public Permissions withCustoms(List<PermissionsCustomsItem> customs) {
        this.customs = customs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceProvider() != null) {
            resourceProvider().forEach(e -> e.validate());
        }
        if (customs() != null) {
            customs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceProvider", this.resourceProvider,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("customs", this.customs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Permissions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Permissions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Permissions.
     */
    public static Permissions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Permissions deserializedPermissions = new Permissions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceProvider".equals(fieldName)) {
                    List<PermissionsResourceProviderItem> resourceProvider
                        = reader.readArray(reader1 -> PermissionsResourceProviderItem.fromJson(reader1));
                    deserializedPermissions.resourceProvider = resourceProvider;
                } else if ("customs".equals(fieldName)) {
                    List<PermissionsCustomsItem> customs
                        = reader.readArray(reader1 -> PermissionsCustomsItem.fromJson(reader1));
                    deserializedPermissions.customs = customs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPermissions;
        });
    }
}
