// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
 */
@Fluent
public final class FusionSubTypeSeverityFiltersItem implements JsonSerializable<FusionSubTypeSeverityFiltersItem> {
    /*
     * The Severity for a given source subtype consumed in Fusion detection.
     */
    private AlertSeverity severity;

    /*
     * Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
     */
    private boolean enabled;

    /**
     * Creates an instance of FusionSubTypeSeverityFiltersItem class.
     */
    public FusionSubTypeSeverityFiltersItem() {
    }

    /**
     * Get the severity property: The Severity for a given source subtype consumed in Fusion detection.
     * 
     * @return the severity value.
     */
    public AlertSeverity severity() {
        return this.severity;
    }

    /**
     * Set the severity property: The Severity for a given source subtype consumed in Fusion detection.
     * 
     * @param severity the severity value to set.
     * @return the FusionSubTypeSeverityFiltersItem object itself.
     */
    public FusionSubTypeSeverityFiltersItem withSeverity(AlertSeverity severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the enabled property: Determines whether this severity is enabled or disabled for this source subtype
     * consumed in Fusion detection.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Determines whether this severity is enabled or disabled for this source subtype
     * consumed in Fusion detection.
     * 
     * @param enabled the enabled value to set.
     * @return the FusionSubTypeSeverityFiltersItem object itself.
     */
    public FusionSubTypeSeverityFiltersItem withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (severity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property severity in model FusionSubTypeSeverityFiltersItem"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FusionSubTypeSeverityFiltersItem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FusionSubTypeSeverityFiltersItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FusionSubTypeSeverityFiltersItem if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FusionSubTypeSeverityFiltersItem.
     */
    public static FusionSubTypeSeverityFiltersItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FusionSubTypeSeverityFiltersItem deserializedFusionSubTypeSeverityFiltersItem
                = new FusionSubTypeSeverityFiltersItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("severity".equals(fieldName)) {
                    deserializedFusionSubTypeSeverityFiltersItem.severity
                        = AlertSeverity.fromString(reader.getString());
                } else if ("enabled".equals(fieldName)) {
                    deserializedFusionSubTypeSeverityFiltersItem.enabled = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFusionSubTypeSeverityFiltersItem;
        });
    }
}
