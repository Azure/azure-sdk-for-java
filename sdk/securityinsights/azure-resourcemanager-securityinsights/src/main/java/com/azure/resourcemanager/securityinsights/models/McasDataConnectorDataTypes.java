// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The available data types for MCAS (Microsoft Cloud App Security) data connector.
 */
@Fluent
public final class McasDataConnectorDataTypes extends AlertsDataTypeOfDataConnector {
    /*
     * Discovery log data type connection.
     */
    private DataConnectorDataTypeCommon discoveryLogs;

    /**
     * Creates an instance of McasDataConnectorDataTypes class.
     */
    public McasDataConnectorDataTypes() {
    }

    /**
     * Get the discoveryLogs property: Discovery log data type connection.
     * 
     * @return the discoveryLogs value.
     */
    public DataConnectorDataTypeCommon discoveryLogs() {
        return this.discoveryLogs;
    }

    /**
     * Set the discoveryLogs property: Discovery log data type connection.
     * 
     * @param discoveryLogs the discoveryLogs value to set.
     * @return the McasDataConnectorDataTypes object itself.
     */
    public McasDataConnectorDataTypes withDiscoveryLogs(DataConnectorDataTypeCommon discoveryLogs) {
        this.discoveryLogs = discoveryLogs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public McasDataConnectorDataTypes withAlerts(DataConnectorDataTypeCommon alerts) {
        super.withAlerts(alerts);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (discoveryLogs() != null) {
            discoveryLogs().validate();
        }
        if (alerts() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property alerts in model McasDataConnectorDataTypes"));
        } else {
            alerts().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(McasDataConnectorDataTypes.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("alerts", alerts());
        jsonWriter.writeJsonField("discoveryLogs", this.discoveryLogs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of McasDataConnectorDataTypes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of McasDataConnectorDataTypes if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the McasDataConnectorDataTypes.
     */
    public static McasDataConnectorDataTypes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            McasDataConnectorDataTypes deserializedMcasDataConnectorDataTypes = new McasDataConnectorDataTypes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alerts".equals(fieldName)) {
                    deserializedMcasDataConnectorDataTypes.withAlerts(DataConnectorDataTypeCommon.fromJson(reader));
                } else if ("discoveryLogs".equals(fieldName)) {
                    deserializedMcasDataConnectorDataTypes.discoveryLogs = DataConnectorDataTypeCommon.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMcasDataConnectorDataTypes;
        });
    }
}
