// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.EntityCommonProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Malware entity property bag.
 */
@Immutable
public final class MalwareEntityProperties extends EntityCommonProperties {
    /*
     * The malware category by the vendor, e.g. Trojan
     */
    private String category;

    /*
     * List of linked file entity identifiers on which the malware was found
     */
    private List<String> fileEntityIds;

    /*
     * The malware name by the vendor, e.g. Win32/Toga!rfn
     */
    private String malwareName;

    /*
     * List of linked process entity identifiers on which the malware was found.
     */
    private List<String> processEntityIds;

    /*
     * The graph item display name which is a short humanly readable description of the graph item instance. This
     * property is optional and might be system generated.
     */
    private String friendlyName;

    /*
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     */
    private Map<String, Object> additionalData;

    /**
     * Creates an instance of MalwareEntityProperties class.
     */
    public MalwareEntityProperties() {
    }

    /**
     * Get the category property: The malware category by the vendor, e.g. Trojan.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Get the fileEntityIds property: List of linked file entity identifiers on which the malware was found.
     * 
     * @return the fileEntityIds value.
     */
    public List<String> fileEntityIds() {
        return this.fileEntityIds;
    }

    /**
     * Get the malwareName property: The malware name by the vendor, e.g. Win32/Toga!rfn.
     * 
     * @return the malwareName value.
     */
    public String malwareName() {
        return this.malwareName;
    }

    /**
     * Get the processEntityIds property: List of linked process entity identifiers on which the malware was found.
     * 
     * @return the processEntityIds value.
     */
    public List<String> processEntityIds() {
        return this.processEntityIds;
    }

    /**
     * Get the friendlyName property: The graph item display name which is a short humanly readable description of the
     * graph item instance. This property is optional and might be system generated.
     * 
     * @return the friendlyName value.
     */
    @Override
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Get the additionalData property: A bag of custom fields that should be part of the entity and will be presented
     * to the user.
     * 
     * @return the additionalData value.
     */
    @Override
    public Map<String, Object> additionalData() {
        return this.additionalData;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MalwareEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MalwareEntityProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MalwareEntityProperties.
     */
    public static MalwareEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MalwareEntityProperties deserializedMalwareEntityProperties = new MalwareEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalData".equals(fieldName)) {
                    Map<String, Object> additionalData = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedMalwareEntityProperties.additionalData = additionalData;
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedMalwareEntityProperties.friendlyName = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedMalwareEntityProperties.category = reader.getString();
                } else if ("fileEntityIds".equals(fieldName)) {
                    List<String> fileEntityIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedMalwareEntityProperties.fileEntityIds = fileEntityIds;
                } else if ("malwareName".equals(fieldName)) {
                    deserializedMalwareEntityProperties.malwareName = reader.getString();
                } else if ("processEntityIds".equals(fieldName)) {
                    List<String> processEntityIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedMalwareEntityProperties.processEntityIds = processEntityIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMalwareEntityProperties;
        });
    }
}
