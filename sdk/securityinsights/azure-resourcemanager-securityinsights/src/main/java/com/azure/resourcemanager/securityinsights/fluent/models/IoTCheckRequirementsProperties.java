// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IoT requirements check properties.
 */
@Fluent
public final class IoTCheckRequirementsProperties implements JsonSerializable<IoTCheckRequirementsProperties> {
    /*
     * The subscription id to connect to, and get the data from.
     */
    private String subscriptionId;

    /**
     * Creates an instance of IoTCheckRequirementsProperties class.
     */
    public IoTCheckRequirementsProperties() {
    }

    /**
     * Get the subscriptionId property: The subscription id to connect to, and get the data from.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: The subscription id to connect to, and get the data from.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the IoTCheckRequirementsProperties object itself.
     */
    public IoTCheckRequirementsProperties withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IoTCheckRequirementsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IoTCheckRequirementsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IoTCheckRequirementsProperties.
     */
    public static IoTCheckRequirementsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IoTCheckRequirementsProperties deserializedIoTCheckRequirementsProperties
                = new IoTCheckRequirementsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionId".equals(fieldName)) {
                    deserializedIoTCheckRequirementsProperties.subscriptionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIoTCheckRequirementsProperties;
        });
    }
}
