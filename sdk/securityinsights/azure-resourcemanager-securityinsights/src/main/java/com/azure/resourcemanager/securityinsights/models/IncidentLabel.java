// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents an incident label.
 */
@Fluent
public final class IncidentLabel implements JsonSerializable<IncidentLabel> {
    /*
     * The name of the label
     */
    private String labelName;

    /*
     * The type of the label
     */
    private IncidentLabelType labelType;

    /**
     * Creates an instance of IncidentLabel class.
     */
    public IncidentLabel() {
    }

    /**
     * Get the labelName property: The name of the label.
     * 
     * @return the labelName value.
     */
    public String labelName() {
        return this.labelName;
    }

    /**
     * Set the labelName property: The name of the label.
     * 
     * @param labelName the labelName value to set.
     * @return the IncidentLabel object itself.
     */
    public IncidentLabel withLabelName(String labelName) {
        this.labelName = labelName;
        return this;
    }

    /**
     * Get the labelType property: The type of the label.
     * 
     * @return the labelType value.
     */
    public IncidentLabelType labelType() {
        return this.labelType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (labelName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property labelName in model IncidentLabel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IncidentLabel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("labelName", this.labelName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IncidentLabel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IncidentLabel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IncidentLabel.
     */
    public static IncidentLabel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IncidentLabel deserializedIncidentLabel = new IncidentLabel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("labelName".equals(fieldName)) {
                    deserializedIncidentLabel.labelName = reader.getString();
                } else if ("labelType".equals(fieldName)) {
                    deserializedIncidentLabel.labelType = IncidentLabelType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIncidentLabel;
        });
    }
}
