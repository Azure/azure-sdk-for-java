// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.AlertRuleTemplateDataSource;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.FusionTemplateSourceSetting;
import com.azure.resourcemanager.securityinsights.models.TemplateStatus;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Fusion alert rule template properties.
 */
@Fluent
public final class FusionAlertRuleTemplateProperties implements JsonSerializable<FusionAlertRuleTemplateProperties> {
    /*
     * the number of alert rules that were created by this template
     */
    private Integer alertRulesCreatedByTemplateCount;

    /*
     * The time that this alert rule template has been added.
     */
    private OffsetDateTime createdDateUtc;

    /*
     * The time that this alert rule template was last updated.
     */
    private OffsetDateTime lastUpdatedDateUtc;

    /*
     * The description of the alert rule template.
     */
    private String description;

    /*
     * The display name for alert rule template.
     */
    private String displayName;

    /*
     * The required data connectors for this template
     */
    private List<AlertRuleTemplateDataSource> requiredDataConnectors;

    /*
     * The alert rule template status.
     */
    private TemplateStatus status;

    /*
     * The severity for alerts created by this alert rule.
     */
    private AlertSeverity severity;

    /*
     * The tactics of the alert rule template
     */
    private List<AttackTactic> tactics;

    /*
     * The techniques of the alert rule
     */
    private List<String> techniques;

    /*
     * All supported source signal configurations consumed in fusion detection.
     */
    private List<FusionTemplateSourceSetting> sourceSettings;

    /**
     * Creates an instance of FusionAlertRuleTemplateProperties class.
     */
    public FusionAlertRuleTemplateProperties() {
    }

    /**
     * Get the alertRulesCreatedByTemplateCount property: the number of alert rules that were created by this template.
     * 
     * @return the alertRulesCreatedByTemplateCount value.
     */
    public Integer alertRulesCreatedByTemplateCount() {
        return this.alertRulesCreatedByTemplateCount;
    }

    /**
     * Set the alertRulesCreatedByTemplateCount property: the number of alert rules that were created by this template.
     * 
     * @param alertRulesCreatedByTemplateCount the alertRulesCreatedByTemplateCount value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties
        withAlertRulesCreatedByTemplateCount(Integer alertRulesCreatedByTemplateCount) {
        this.alertRulesCreatedByTemplateCount = alertRulesCreatedByTemplateCount;
        return this;
    }

    /**
     * Get the createdDateUtc property: The time that this alert rule template has been added.
     * 
     * @return the createdDateUtc value.
     */
    public OffsetDateTime createdDateUtc() {
        return this.createdDateUtc;
    }

    /**
     * Get the lastUpdatedDateUtc property: The time that this alert rule template was last updated.
     * 
     * @return the lastUpdatedDateUtc value.
     */
    public OffsetDateTime lastUpdatedDateUtc() {
        return this.lastUpdatedDateUtc;
    }

    /**
     * Get the description property: The description of the alert rule template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the alert rule template.
     * 
     * @param description the description value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: The display name for alert rule template.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for alert rule template.
     * 
     * @param displayName the displayName value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the requiredDataConnectors property: The required data connectors for this template.
     * 
     * @return the requiredDataConnectors value.
     */
    public List<AlertRuleTemplateDataSource> requiredDataConnectors() {
        return this.requiredDataConnectors;
    }

    /**
     * Set the requiredDataConnectors property: The required data connectors for this template.
     * 
     * @param requiredDataConnectors the requiredDataConnectors value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties
        withRequiredDataConnectors(List<AlertRuleTemplateDataSource> requiredDataConnectors) {
        this.requiredDataConnectors = requiredDataConnectors;
        return this;
    }

    /**
     * Get the status property: The alert rule template status.
     * 
     * @return the status value.
     */
    public TemplateStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The alert rule template status.
     * 
     * @param status the status value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties withStatus(TemplateStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the severity property: The severity for alerts created by this alert rule.
     * 
     * @return the severity value.
     */
    public AlertSeverity severity() {
        return this.severity;
    }

    /**
     * Set the severity property: The severity for alerts created by this alert rule.
     * 
     * @param severity the severity value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties withSeverity(AlertSeverity severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the tactics property: The tactics of the alert rule template.
     * 
     * @return the tactics value.
     */
    public List<AttackTactic> tactics() {
        return this.tactics;
    }

    /**
     * Set the tactics property: The tactics of the alert rule template.
     * 
     * @param tactics the tactics value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties withTactics(List<AttackTactic> tactics) {
        this.tactics = tactics;
        return this;
    }

    /**
     * Get the techniques property: The techniques of the alert rule.
     * 
     * @return the techniques value.
     */
    public List<String> techniques() {
        return this.techniques;
    }

    /**
     * Set the techniques property: The techniques of the alert rule.
     * 
     * @param techniques the techniques value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties withTechniques(List<String> techniques) {
        this.techniques = techniques;
        return this;
    }

    /**
     * Get the sourceSettings property: All supported source signal configurations consumed in fusion detection.
     * 
     * @return the sourceSettings value.
     */
    public List<FusionTemplateSourceSetting> sourceSettings() {
        return this.sourceSettings;
    }

    /**
     * Set the sourceSettings property: All supported source signal configurations consumed in fusion detection.
     * 
     * @param sourceSettings the sourceSettings value to set.
     * @return the FusionAlertRuleTemplateProperties object itself.
     */
    public FusionAlertRuleTemplateProperties withSourceSettings(List<FusionTemplateSourceSetting> sourceSettings) {
        this.sourceSettings = sourceSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (requiredDataConnectors() != null) {
            requiredDataConnectors().forEach(e -> e.validate());
        }
        if (sourceSettings() != null) {
            sourceSettings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("alertRulesCreatedByTemplateCount", this.alertRulesCreatedByTemplateCount);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("requiredDataConnectors", this.requiredDataConnectors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeArrayField("tactics", this.tactics,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("techniques", this.techniques, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("sourceSettings", this.sourceSettings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FusionAlertRuleTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FusionAlertRuleTemplateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FusionAlertRuleTemplateProperties.
     */
    public static FusionAlertRuleTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FusionAlertRuleTemplateProperties deserializedFusionAlertRuleTemplateProperties
                = new FusionAlertRuleTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alertRulesCreatedByTemplateCount".equals(fieldName)) {
                    deserializedFusionAlertRuleTemplateProperties.alertRulesCreatedByTemplateCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("createdDateUTC".equals(fieldName)) {
                    deserializedFusionAlertRuleTemplateProperties.createdDateUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedDateUTC".equals(fieldName)) {
                    deserializedFusionAlertRuleTemplateProperties.lastUpdatedDateUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("description".equals(fieldName)) {
                    deserializedFusionAlertRuleTemplateProperties.description = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedFusionAlertRuleTemplateProperties.displayName = reader.getString();
                } else if ("requiredDataConnectors".equals(fieldName)) {
                    List<AlertRuleTemplateDataSource> requiredDataConnectors
                        = reader.readArray(reader1 -> AlertRuleTemplateDataSource.fromJson(reader1));
                    deserializedFusionAlertRuleTemplateProperties.requiredDataConnectors = requiredDataConnectors;
                } else if ("status".equals(fieldName)) {
                    deserializedFusionAlertRuleTemplateProperties.status
                        = TemplateStatus.fromString(reader.getString());
                } else if ("severity".equals(fieldName)) {
                    deserializedFusionAlertRuleTemplateProperties.severity
                        = AlertSeverity.fromString(reader.getString());
                } else if ("tactics".equals(fieldName)) {
                    List<AttackTactic> tactics
                        = reader.readArray(reader1 -> AttackTactic.fromString(reader1.getString()));
                    deserializedFusionAlertRuleTemplateProperties.tactics = tactics;
                } else if ("techniques".equals(fieldName)) {
                    List<String> techniques = reader.readArray(reader1 -> reader1.getString());
                    deserializedFusionAlertRuleTemplateProperties.techniques = techniques;
                } else if ("sourceSettings".equals(fieldName)) {
                    List<FusionTemplateSourceSetting> sourceSettings
                        = reader.readArray(reader1 -> FusionTemplateSourceSetting.fromJson(reader1));
                    deserializedFusionAlertRuleTemplateProperties.sourceSettings = sourceSettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFusionAlertRuleTemplateProperties;
        });
    }
}
