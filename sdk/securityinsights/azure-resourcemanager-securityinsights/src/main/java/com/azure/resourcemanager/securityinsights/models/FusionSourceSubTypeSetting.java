// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a supported source subtype configuration under a source signal in Fusion detection.
 */
@Fluent
public final class FusionSourceSubTypeSetting implements JsonSerializable<FusionSourceSubTypeSetting> {
    /*
     * Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
     */
    private boolean enabled;

    /*
     * The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule
     * template for supported values.
     */
    private String sourceSubTypeName;

    /*
     * The display name of source subtype under a source signal consumed in Fusion detection.
     */
    private String sourceSubTypeDisplayName;

    /*
     * Severity configuration for a source subtype consumed in fusion detection.
     */
    private FusionSubTypeSeverityFilter severityFilters;

    /**
     * Creates an instance of FusionSourceSubTypeSetting class.
     */
    public FusionSourceSubTypeSetting() {
    }

    /**
     * Get the enabled property: Determines whether this source subtype under source signal is enabled or disabled in
     * Fusion detection.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Determines whether this source subtype under source signal is enabled or disabled in
     * Fusion detection.
     * 
     * @param enabled the enabled value to set.
     * @return the FusionSourceSubTypeSetting object itself.
     */
    public FusionSourceSubTypeSetting withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the sourceSubTypeName property: The Name of the source subtype under a given source signal in Fusion
     * detection. Refer to Fusion alert rule template for supported values.
     * 
     * @return the sourceSubTypeName value.
     */
    public String sourceSubTypeName() {
        return this.sourceSubTypeName;
    }

    /**
     * Set the sourceSubTypeName property: The Name of the source subtype under a given source signal in Fusion
     * detection. Refer to Fusion alert rule template for supported values.
     * 
     * @param sourceSubTypeName the sourceSubTypeName value to set.
     * @return the FusionSourceSubTypeSetting object itself.
     */
    public FusionSourceSubTypeSetting withSourceSubTypeName(String sourceSubTypeName) {
        this.sourceSubTypeName = sourceSubTypeName;
        return this;
    }

    /**
     * Get the sourceSubTypeDisplayName property: The display name of source subtype under a source signal consumed in
     * Fusion detection.
     * 
     * @return the sourceSubTypeDisplayName value.
     */
    public String sourceSubTypeDisplayName() {
        return this.sourceSubTypeDisplayName;
    }

    /**
     * Get the severityFilters property: Severity configuration for a source subtype consumed in fusion detection.
     * 
     * @return the severityFilters value.
     */
    public FusionSubTypeSeverityFilter severityFilters() {
        return this.severityFilters;
    }

    /**
     * Set the severityFilters property: Severity configuration for a source subtype consumed in fusion detection.
     * 
     * @param severityFilters the severityFilters value to set.
     * @return the FusionSourceSubTypeSetting object itself.
     */
    public FusionSourceSubTypeSetting withSeverityFilters(FusionSubTypeSeverityFilter severityFilters) {
        this.severityFilters = severityFilters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceSubTypeName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceSubTypeName in model FusionSourceSubTypeSetting"));
        }
        if (severityFilters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property severityFilters in model FusionSourceSubTypeSetting"));
        } else {
            severityFilters().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FusionSourceSubTypeSetting.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("sourceSubTypeName", this.sourceSubTypeName);
        jsonWriter.writeJsonField("severityFilters", this.severityFilters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FusionSourceSubTypeSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FusionSourceSubTypeSetting if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FusionSourceSubTypeSetting.
     */
    public static FusionSourceSubTypeSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FusionSourceSubTypeSetting deserializedFusionSourceSubTypeSetting = new FusionSourceSubTypeSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedFusionSourceSubTypeSetting.enabled = reader.getBoolean();
                } else if ("sourceSubTypeName".equals(fieldName)) {
                    deserializedFusionSourceSubTypeSetting.sourceSubTypeName = reader.getString();
                } else if ("severityFilters".equals(fieldName)) {
                    deserializedFusionSourceSubTypeSetting.severityFilters
                        = FusionSubTypeSeverityFilter.fromJson(reader);
                } else if ("sourceSubTypeDisplayName".equals(fieldName)) {
                    deserializedFusionSourceSubTypeSetting.sourceSubTypeDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFusionSourceSubTypeSetting;
        });
    }
}
