// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.securityinsights.fluent.models.AlertRuleTemplateInner;
import com.azure.resourcemanager.securityinsights.fluent.models.NrtAlertRuleTemplateProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Represents NRT alert rule template. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("NRT")
@Fluent
public final class NrtAlertRuleTemplate extends AlertRuleTemplateInner {
    /*
     * NRT alert rule template properties
     */
    @JsonProperty(value = "properties")
    private NrtAlertRuleTemplateProperties innerProperties;

    /**
     * Get the innerProperties property: NRT alert rule template properties.
     *
     * @return the innerProperties value.
     */
    private NrtAlertRuleTemplateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the query property: The query that creates alerts for this rule.
     *
     * @return the query value.
     */
    public String query() {
        return this.innerProperties() == null ? null : this.innerProperties().query();
    }

    /**
     * Set the query property: The query that creates alerts for this rule.
     *
     * @param query the query value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withQuery(String query) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withQuery(query);
        return this;
    }

    /**
     * Get the severity property: The severity for alerts created by this alert rule.
     *
     * @return the severity value.
     */
    public AlertSeverity severity() {
        return this.innerProperties() == null ? null : this.innerProperties().severity();
    }

    /**
     * Set the severity property: The severity for alerts created by this alert rule.
     *
     * @param severity the severity value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withSeverity(AlertSeverity severity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withSeverity(severity);
        return this;
    }

    /**
     * Get the version property: The version of this template - in format &lt;a.b.c&gt;, where all are numbers. For
     * example &lt;1.0.2&gt;.
     *
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: The version of this template - in format &lt;a.b.c&gt;, where all are numbers. For
     * example &lt;1.0.2&gt;.
     *
     * @param version the version value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the customDetails property: Dictionary of string key-value pairs of columns to be attached to the alert.
     *
     * @return the customDetails value.
     */
    public Map<String, String> customDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().customDetails();
    }

    /**
     * Set the customDetails property: Dictionary of string key-value pairs of columns to be attached to the alert.
     *
     * @param customDetails the customDetails value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withCustomDetails(Map<String, String> customDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withCustomDetails(customDetails);
        return this;
    }

    /**
     * Get the entityMappings property: Array of the entity mappings of the alert rule.
     *
     * @return the entityMappings value.
     */
    public List<EntityMapping> entityMappings() {
        return this.innerProperties() == null ? null : this.innerProperties().entityMappings();
    }

    /**
     * Set the entityMappings property: Array of the entity mappings of the alert rule.
     *
     * @param entityMappings the entityMappings value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withEntityMappings(List<EntityMapping> entityMappings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withEntityMappings(entityMappings);
        return this;
    }

    /**
     * Get the alertDetailsOverride property: The alert details override settings.
     *
     * @return the alertDetailsOverride value.
     */
    public AlertDetailsOverride alertDetailsOverride() {
        return this.innerProperties() == null ? null : this.innerProperties().alertDetailsOverride();
    }

    /**
     * Set the alertDetailsOverride property: The alert details override settings.
     *
     * @param alertDetailsOverride the alertDetailsOverride value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withAlertDetailsOverride(AlertDetailsOverride alertDetailsOverride) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withAlertDetailsOverride(alertDetailsOverride);
        return this;
    }

    /**
     * Get the eventGroupingSettings property: The event grouping settings.
     *
     * @return the eventGroupingSettings value.
     */
    public EventGroupingSettings eventGroupingSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().eventGroupingSettings();
    }

    /**
     * Set the eventGroupingSettings property: The event grouping settings.
     *
     * @param eventGroupingSettings the eventGroupingSettings value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withEventGroupingSettings(EventGroupingSettings eventGroupingSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withEventGroupingSettings(eventGroupingSettings);
        return this;
    }

    /**
     * Get the tactics property: The tactics of the alert rule.
     *
     * @return the tactics value.
     */
    public List<AttackTactic> tactics() {
        return this.innerProperties() == null ? null : this.innerProperties().tactics();
    }

    /**
     * Set the tactics property: The tactics of the alert rule.
     *
     * @param tactics the tactics value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withTactics(List<AttackTactic> tactics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withTactics(tactics);
        return this;
    }

    /**
     * Get the techniques property: The techniques of the alert rule.
     *
     * @return the techniques value.
     */
    public List<String> techniques() {
        return this.innerProperties() == null ? null : this.innerProperties().techniques();
    }

    /**
     * Set the techniques property: The techniques of the alert rule.
     *
     * @param techniques the techniques value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withTechniques(List<String> techniques) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withTechniques(techniques);
        return this;
    }

    /**
     * Get the alertRulesCreatedByTemplateCount property: the number of alert rules that were created by this template.
     *
     * @return the alertRulesCreatedByTemplateCount value.
     */
    public Integer alertRulesCreatedByTemplateCount() {
        return this.innerProperties() == null ? null : this.innerProperties().alertRulesCreatedByTemplateCount();
    }

    /**
     * Set the alertRulesCreatedByTemplateCount property: the number of alert rules that were created by this template.
     *
     * @param alertRulesCreatedByTemplateCount the alertRulesCreatedByTemplateCount value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withAlertRulesCreatedByTemplateCount(Integer alertRulesCreatedByTemplateCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withAlertRulesCreatedByTemplateCount(alertRulesCreatedByTemplateCount);
        return this;
    }

    /**
     * Get the lastUpdatedDateUtc property: The last time that this alert rule template has been updated.
     *
     * @return the lastUpdatedDateUtc value.
     */
    public OffsetDateTime lastUpdatedDateUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastUpdatedDateUtc();
    }

    /**
     * Get the createdDateUtc property: The time that this alert rule template has been added.
     *
     * @return the createdDateUtc value.
     */
    public OffsetDateTime createdDateUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().createdDateUtc();
    }

    /**
     * Get the description property: The description of the alert rule template.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The description of the alert rule template.
     *
     * @param description the description value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the displayName property: The display name for alert rule template.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name for alert rule template.
     *
     * @param displayName the displayName value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the requiredDataConnectors property: The required data sources for this template.
     *
     * @return the requiredDataConnectors value.
     */
    public List<AlertRuleTemplateDataSource> requiredDataConnectors() {
        return this.innerProperties() == null ? null : this.innerProperties().requiredDataConnectors();
    }

    /**
     * Set the requiredDataConnectors property: The required data sources for this template.
     *
     * @param requiredDataConnectors the requiredDataConnectors value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withRequiredDataConnectors(List<AlertRuleTemplateDataSource> requiredDataConnectors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withRequiredDataConnectors(requiredDataConnectors);
        return this;
    }

    /**
     * Get the status property: The alert rule template status.
     *
     * @return the status value.
     */
    public TemplateStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: The alert rule template status.
     *
     * @param status the status value to set.
     * @return the NrtAlertRuleTemplate object itself.
     */
    public NrtAlertRuleTemplate withStatus(TemplateStatus status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NrtAlertRuleTemplateProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
