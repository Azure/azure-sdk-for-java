// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The available data types for office data connector.
 */
@Fluent
public final class OfficeDataConnectorDataTypes implements JsonSerializable<OfficeDataConnectorDataTypes> {
    /*
     * Exchange data type connection.
     */
    private OfficeDataConnectorDataTypesExchange exchange;

    /*
     * SharePoint data type connection.
     */
    private OfficeDataConnectorDataTypesSharePoint sharePoint;

    /*
     * Teams data type connection.
     */
    private OfficeDataConnectorDataTypesTeams teams;

    /**
     * Creates an instance of OfficeDataConnectorDataTypes class.
     */
    public OfficeDataConnectorDataTypes() {
    }

    /**
     * Get the exchange property: Exchange data type connection.
     * 
     * @return the exchange value.
     */
    public OfficeDataConnectorDataTypesExchange exchange() {
        return this.exchange;
    }

    /**
     * Set the exchange property: Exchange data type connection.
     * 
     * @param exchange the exchange value to set.
     * @return the OfficeDataConnectorDataTypes object itself.
     */
    public OfficeDataConnectorDataTypes withExchange(OfficeDataConnectorDataTypesExchange exchange) {
        this.exchange = exchange;
        return this;
    }

    /**
     * Get the sharePoint property: SharePoint data type connection.
     * 
     * @return the sharePoint value.
     */
    public OfficeDataConnectorDataTypesSharePoint sharePoint() {
        return this.sharePoint;
    }

    /**
     * Set the sharePoint property: SharePoint data type connection.
     * 
     * @param sharePoint the sharePoint value to set.
     * @return the OfficeDataConnectorDataTypes object itself.
     */
    public OfficeDataConnectorDataTypes withSharePoint(OfficeDataConnectorDataTypesSharePoint sharePoint) {
        this.sharePoint = sharePoint;
        return this;
    }

    /**
     * Get the teams property: Teams data type connection.
     * 
     * @return the teams value.
     */
    public OfficeDataConnectorDataTypesTeams teams() {
        return this.teams;
    }

    /**
     * Set the teams property: Teams data type connection.
     * 
     * @param teams the teams value to set.
     * @return the OfficeDataConnectorDataTypes object itself.
     */
    public OfficeDataConnectorDataTypes withTeams(OfficeDataConnectorDataTypesTeams teams) {
        this.teams = teams;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (exchange() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property exchange in model OfficeDataConnectorDataTypes"));
        } else {
            exchange().validate();
        }
        if (sharePoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sharePoint in model OfficeDataConnectorDataTypes"));
        } else {
            sharePoint().validate();
        }
        if (teams() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property teams in model OfficeDataConnectorDataTypes"));
        } else {
            teams().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OfficeDataConnectorDataTypes.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("exchange", this.exchange);
        jsonWriter.writeJsonField("sharePoint", this.sharePoint);
        jsonWriter.writeJsonField("teams", this.teams);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfficeDataConnectorDataTypes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfficeDataConnectorDataTypes if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OfficeDataConnectorDataTypes.
     */
    public static OfficeDataConnectorDataTypes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfficeDataConnectorDataTypes deserializedOfficeDataConnectorDataTypes = new OfficeDataConnectorDataTypes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("exchange".equals(fieldName)) {
                    deserializedOfficeDataConnectorDataTypes.exchange
                        = OfficeDataConnectorDataTypesExchange.fromJson(reader);
                } else if ("sharePoint".equals(fieldName)) {
                    deserializedOfficeDataConnectorDataTypes.sharePoint
                        = OfficeDataConnectorDataTypesSharePoint.fromJson(reader);
                } else if ("teams".equals(fieldName)) {
                    deserializedOfficeDataConnectorDataTypes.teams = OfficeDataConnectorDataTypesTeams.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfficeDataConnectorDataTypes;
        });
    }
}
