// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * confidence reason item.
 */
@Immutable
public final class SecurityAlertPropertiesConfidenceReasonsItem
    implements JsonSerializable<SecurityAlertPropertiesConfidenceReasonsItem> {
    /*
     * The reason's description
     */
    private String reason;

    /*
     * The type (category) of the reason
     */
    private String reasonType;

    /**
     * Creates an instance of SecurityAlertPropertiesConfidenceReasonsItem class.
     */
    public SecurityAlertPropertiesConfidenceReasonsItem() {
    }

    /**
     * Get the reason property: The reason's description.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Get the reasonType property: The type (category) of the reason.
     * 
     * @return the reasonType value.
     */
    public String reasonType() {
        return this.reasonType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityAlertPropertiesConfidenceReasonsItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityAlertPropertiesConfidenceReasonsItem if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecurityAlertPropertiesConfidenceReasonsItem.
     */
    public static SecurityAlertPropertiesConfidenceReasonsItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityAlertPropertiesConfidenceReasonsItem deserializedSecurityAlertPropertiesConfidenceReasonsItem
                = new SecurityAlertPropertiesConfidenceReasonsItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reason".equals(fieldName)) {
                    deserializedSecurityAlertPropertiesConfidenceReasonsItem.reason = reader.getString();
                } else if ("reasonType".equals(fieldName)) {
                    deserializedSecurityAlertPropertiesConfidenceReasonsItem.reasonType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityAlertPropertiesConfidenceReasonsItem;
        });
    }
}
