// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.AlertDetailsOverride;
import com.azure.resourcemanager.securityinsights.models.AlertSeverity;
import com.azure.resourcemanager.securityinsights.models.AttackTactic;
import com.azure.resourcemanager.securityinsights.models.EntityMapping;
import com.azure.resourcemanager.securityinsights.models.EventGroupingSettings;
import com.azure.resourcemanager.securityinsights.models.IncidentConfiguration;
import com.azure.resourcemanager.securityinsights.models.ScheduledAlertRuleCommonProperties;
import com.azure.resourcemanager.securityinsights.models.TriggerOperator;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Scheduled alert rule base property bag.
 */
@Fluent
public final class ScheduledAlertRuleProperties extends ScheduledAlertRuleCommonProperties {
    /*
     * The Name of the alert rule template used to create this rule.
     */
    private String alertRuleTemplateName;

    /*
     * The version of the alert rule template used to create this rule - in format <a.b.c>, where all are numbers, for
     * example 0 <1.0.2>
     */
    private String templateVersion;

    /*
     * The description of the alert rule.
     */
    private String description;

    /*
     * The display name for alerts created by this alert rule.
     */
    private String displayName;

    /*
     * Determines whether this alert rule is enabled or disabled.
     */
    private boolean enabled;

    /*
     * The last time that this alert rule has been modified.
     */
    private OffsetDateTime lastModifiedUtc;

    /*
     * The suppression (in ISO 8601 duration format) to wait since last time this alert rule been triggered.
     */
    private Duration suppressionDuration;

    /*
     * Determines whether the suppression for this alert rule is enabled or disabled.
     */
    private boolean suppressionEnabled;

    /*
     * The tactics of the alert rule
     */
    private List<AttackTactic> tactics;

    /*
     * The techniques of the alert rule
     */
    private List<String> techniques;

    /*
     * The settings of the incidents that created from alerts triggered by this analytics rule
     */
    private IncidentConfiguration incidentConfiguration;

    /**
     * Creates an instance of ScheduledAlertRuleProperties class.
     */
    public ScheduledAlertRuleProperties() {
    }

    /**
     * Get the alertRuleTemplateName property: The Name of the alert rule template used to create this rule.
     * 
     * @return the alertRuleTemplateName value.
     */
    public String alertRuleTemplateName() {
        return this.alertRuleTemplateName;
    }

    /**
     * Set the alertRuleTemplateName property: The Name of the alert rule template used to create this rule.
     * 
     * @param alertRuleTemplateName the alertRuleTemplateName value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withAlertRuleTemplateName(String alertRuleTemplateName) {
        this.alertRuleTemplateName = alertRuleTemplateName;
        return this;
    }

    /**
     * Get the templateVersion property: The version of the alert rule template used to create this rule - in format
     * &lt;a.b.c&gt;, where all are numbers, for example 0 &lt;1.0.2&gt;.
     * 
     * @return the templateVersion value.
     */
    public String templateVersion() {
        return this.templateVersion;
    }

    /**
     * Set the templateVersion property: The version of the alert rule template used to create this rule - in format
     * &lt;a.b.c&gt;, where all are numbers, for example 0 &lt;1.0.2&gt;.
     * 
     * @param templateVersion the templateVersion value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withTemplateVersion(String templateVersion) {
        this.templateVersion = templateVersion;
        return this;
    }

    /**
     * Get the description property: The description of the alert rule.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the alert rule.
     * 
     * @param description the description value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: The display name for alerts created by this alert rule.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for alerts created by this alert rule.
     * 
     * @param displayName the displayName value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the enabled property: Determines whether this alert rule is enabled or disabled.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Determines whether this alert rule is enabled or disabled.
     * 
     * @param enabled the enabled value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the lastModifiedUtc property: The last time that this alert rule has been modified.
     * 
     * @return the lastModifiedUtc value.
     */
    public OffsetDateTime lastModifiedUtc() {
        return this.lastModifiedUtc;
    }

    /**
     * Get the suppressionDuration property: The suppression (in ISO 8601 duration format) to wait since last time this
     * alert rule been triggered.
     * 
     * @return the suppressionDuration value.
     */
    public Duration suppressionDuration() {
        return this.suppressionDuration;
    }

    /**
     * Set the suppressionDuration property: The suppression (in ISO 8601 duration format) to wait since last time this
     * alert rule been triggered.
     * 
     * @param suppressionDuration the suppressionDuration value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withSuppressionDuration(Duration suppressionDuration) {
        this.suppressionDuration = suppressionDuration;
        return this;
    }

    /**
     * Get the suppressionEnabled property: Determines whether the suppression for this alert rule is enabled or
     * disabled.
     * 
     * @return the suppressionEnabled value.
     */
    public boolean suppressionEnabled() {
        return this.suppressionEnabled;
    }

    /**
     * Set the suppressionEnabled property: Determines whether the suppression for this alert rule is enabled or
     * disabled.
     * 
     * @param suppressionEnabled the suppressionEnabled value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withSuppressionEnabled(boolean suppressionEnabled) {
        this.suppressionEnabled = suppressionEnabled;
        return this;
    }

    /**
     * Get the tactics property: The tactics of the alert rule.
     * 
     * @return the tactics value.
     */
    public List<AttackTactic> tactics() {
        return this.tactics;
    }

    /**
     * Set the tactics property: The tactics of the alert rule.
     * 
     * @param tactics the tactics value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withTactics(List<AttackTactic> tactics) {
        this.tactics = tactics;
        return this;
    }

    /**
     * Get the techniques property: The techniques of the alert rule.
     * 
     * @return the techniques value.
     */
    public List<String> techniques() {
        return this.techniques;
    }

    /**
     * Set the techniques property: The techniques of the alert rule.
     * 
     * @param techniques the techniques value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withTechniques(List<String> techniques) {
        this.techniques = techniques;
        return this;
    }

    /**
     * Get the incidentConfiguration property: The settings of the incidents that created from alerts triggered by this
     * analytics rule.
     * 
     * @return the incidentConfiguration value.
     */
    public IncidentConfiguration incidentConfiguration() {
        return this.incidentConfiguration;
    }

    /**
     * Set the incidentConfiguration property: The settings of the incidents that created from alerts triggered by this
     * analytics rule.
     * 
     * @param incidentConfiguration the incidentConfiguration value to set.
     * @return the ScheduledAlertRuleProperties object itself.
     */
    public ScheduledAlertRuleProperties withIncidentConfiguration(IncidentConfiguration incidentConfiguration) {
        this.incidentConfiguration = incidentConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withQuery(String query) {
        super.withQuery(query);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withQueryFrequency(Duration queryFrequency) {
        super.withQueryFrequency(queryFrequency);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withQueryPeriod(Duration queryPeriod) {
        super.withQueryPeriod(queryPeriod);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withSeverity(AlertSeverity severity) {
        super.withSeverity(severity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withTriggerOperator(TriggerOperator triggerOperator) {
        super.withTriggerOperator(triggerOperator);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withTriggerThreshold(Integer triggerThreshold) {
        super.withTriggerThreshold(triggerThreshold);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withEventGroupingSettings(EventGroupingSettings eventGroupingSettings) {
        super.withEventGroupingSettings(eventGroupingSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withCustomDetails(Map<String, String> customDetails) {
        super.withCustomDetails(customDetails);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withEntityMappings(List<EntityMapping> entityMappings) {
        super.withEntityMappings(entityMappings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ScheduledAlertRuleProperties withAlertDetailsOverride(AlertDetailsOverride alertDetailsOverride) {
        super.withAlertDetailsOverride(alertDetailsOverride);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model ScheduledAlertRuleProperties"));
        }
        if (suppressionDuration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property suppressionDuration in model ScheduledAlertRuleProperties"));
        }
        if (incidentConfiguration() != null) {
            incidentConfiguration().validate();
        }
        if (eventGroupingSettings() != null) {
            eventGroupingSettings().validate();
        }
        if (entityMappings() != null) {
            entityMappings().forEach(e -> e.validate());
        }
        if (alertDetailsOverride() != null) {
            alertDetailsOverride().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduledAlertRuleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("query", query());
        jsonWriter.writeStringField("queryFrequency", CoreUtils.durationToStringWithDays(queryFrequency()));
        jsonWriter.writeStringField("queryPeriod", CoreUtils.durationToStringWithDays(queryPeriod()));
        jsonWriter.writeStringField("severity", severity() == null ? null : severity().toString());
        jsonWriter.writeStringField("triggerOperator", triggerOperator() == null ? null : triggerOperator().toString());
        jsonWriter.writeNumberField("triggerThreshold", triggerThreshold());
        jsonWriter.writeJsonField("eventGroupingSettings", eventGroupingSettings());
        jsonWriter.writeMapField("customDetails", customDetails(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("entityMappings", entityMappings(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("alertDetailsOverride", alertDetailsOverride());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("suppressionDuration",
            CoreUtils.durationToStringWithDays(this.suppressionDuration));
        jsonWriter.writeBooleanField("suppressionEnabled", this.suppressionEnabled);
        jsonWriter.writeStringField("alertRuleTemplateName", this.alertRuleTemplateName);
        jsonWriter.writeStringField("templateVersion", this.templateVersion);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("tactics", this.tactics,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("techniques", this.techniques, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("incidentConfiguration", this.incidentConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduledAlertRuleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduledAlertRuleProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduledAlertRuleProperties.
     */
    public static ScheduledAlertRuleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduledAlertRuleProperties deserializedScheduledAlertRuleProperties = new ScheduledAlertRuleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("query".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.withQuery(reader.getString());
                } else if ("queryFrequency".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.withQueryFrequency(
                        reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("queryPeriod".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.withQueryPeriod(
                        reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("severity".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.withSeverity(AlertSeverity.fromString(reader.getString()));
                } else if ("triggerOperator".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties
                        .withTriggerOperator(TriggerOperator.fromString(reader.getString()));
                } else if ("triggerThreshold".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties
                        .withTriggerThreshold(reader.getNullable(JsonReader::getInt));
                } else if ("eventGroupingSettings".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties
                        .withEventGroupingSettings(EventGroupingSettings.fromJson(reader));
                } else if ("customDetails".equals(fieldName)) {
                    Map<String, String> customDetails = reader.readMap(reader1 -> reader1.getString());
                    deserializedScheduledAlertRuleProperties.withCustomDetails(customDetails);
                } else if ("entityMappings".equals(fieldName)) {
                    List<EntityMapping> entityMappings = reader.readArray(reader1 -> EntityMapping.fromJson(reader1));
                    deserializedScheduledAlertRuleProperties.withEntityMappings(entityMappings);
                } else if ("alertDetailsOverride".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties
                        .withAlertDetailsOverride(AlertDetailsOverride.fromJson(reader));
                } else if ("displayName".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.displayName = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.enabled = reader.getBoolean();
                } else if ("suppressionDuration".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.suppressionDuration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("suppressionEnabled".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.suppressionEnabled = reader.getBoolean();
                } else if ("alertRuleTemplateName".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.alertRuleTemplateName = reader.getString();
                } else if ("templateVersion".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.templateVersion = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.description = reader.getString();
                } else if ("lastModifiedUtc".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.lastModifiedUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tactics".equals(fieldName)) {
                    List<AttackTactic> tactics
                        = reader.readArray(reader1 -> AttackTactic.fromString(reader1.getString()));
                    deserializedScheduledAlertRuleProperties.tactics = tactics;
                } else if ("techniques".equals(fieldName)) {
                    List<String> techniques = reader.readArray(reader1 -> reader1.getString());
                    deserializedScheduledAlertRuleProperties.techniques = techniques;
                } else if ("incidentConfiguration".equals(fieldName)) {
                    deserializedScheduledAlertRuleProperties.incidentConfiguration
                        = IncidentConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduledAlertRuleProperties;
        });
    }
}
