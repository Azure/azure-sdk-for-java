// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The geo-location context attached to the ip entity. */
@Immutable
public final class GeoLocation {
    /*
     * Autonomous System Number
     */
    @JsonProperty(value = "asn", access = JsonProperty.Access.WRITE_ONLY)
    private Integer asn;

    /*
     * City name
     */
    @JsonProperty(value = "city", access = JsonProperty.Access.WRITE_ONLY)
    private String city;

    /*
     * The country code according to ISO 3166 format
     */
    @JsonProperty(value = "countryCode", access = JsonProperty.Access.WRITE_ONLY)
    private String countryCode;

    /*
     * Country name according to ISO 3166 Alpha 2: the lowercase of the English Short Name
     */
    @JsonProperty(value = "countryName", access = JsonProperty.Access.WRITE_ONLY)
    private String countryName;

    /*
     * The longitude of the identified location, expressed as a floating point number with range of -180 to 180, with
     * positive numbers representing East and negative numbers representing West. Latitude and longitude are derived
     * from the city or postal code.
     */
    @JsonProperty(value = "latitude", access = JsonProperty.Access.WRITE_ONLY)
    private Double latitude;

    /*
     * The latitude of the identified location, expressed as a floating point number with range of - 90 to 90, with
     * positive numbers representing North and negative numbers representing South. Latitude and longitude are derived
     * from the city or postal code.
     */
    @JsonProperty(value = "longitude", access = JsonProperty.Access.WRITE_ONLY)
    private Double longitude;

    /*
     * State name
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private String state;

    /**
     * Get the asn property: Autonomous System Number.
     *
     * @return the asn value.
     */
    public Integer asn() {
        return this.asn;
    }

    /**
     * Get the city property: City name.
     *
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Get the countryCode property: The country code according to ISO 3166 format.
     *
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Get the countryName property: Country name according to ISO 3166 Alpha 2: the lowercase of the English Short
     * Name.
     *
     * @return the countryName value.
     */
    public String countryName() {
        return this.countryName;
    }

    /**
     * Get the latitude property: The longitude of the identified location, expressed as a floating point number with
     * range of -180 to 180, with positive numbers representing East and negative numbers representing West. Latitude
     * and longitude are derived from the city or postal code.
     *
     * @return the latitude value.
     */
    public Double latitude() {
        return this.latitude;
    }

    /**
     * Get the longitude property: The latitude of the identified location, expressed as a floating point number with
     * range of - 90 to 90, with positive numbers representing North and negative numbers representing South. Latitude
     * and longitude are derived from the city or postal code.
     *
     * @return the longitude value.
     */
    public Double longitude() {
        return this.longitude;
    }

    /**
     * Get the state property: State name.
     *
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
