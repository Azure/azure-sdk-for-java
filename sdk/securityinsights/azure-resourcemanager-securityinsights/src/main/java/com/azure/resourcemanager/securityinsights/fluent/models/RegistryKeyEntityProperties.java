// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.EntityCommonProperties;
import com.azure.resourcemanager.securityinsights.models.RegistryHive;
import java.io.IOException;
import java.util.Map;

/**
 * RegistryKey entity property bag.
 */
@Immutable
public final class RegistryKeyEntityProperties extends EntityCommonProperties {
    /*
     * the hive that holds the registry key.
     */
    private RegistryHive hive;

    /*
     * The registry key path.
     */
    private String key;

    /*
     * The graph item display name which is a short humanly readable description of the graph item instance. This
     * property is optional and might be system generated.
     */
    private String friendlyName;

    /*
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     */
    private Map<String, Object> additionalData;

    /**
     * Creates an instance of RegistryKeyEntityProperties class.
     */
    public RegistryKeyEntityProperties() {
    }

    /**
     * Get the hive property: the hive that holds the registry key.
     * 
     * @return the hive value.
     */
    public RegistryHive hive() {
        return this.hive;
    }

    /**
     * Get the key property: The registry key path.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Get the friendlyName property: The graph item display name which is a short humanly readable description of the
     * graph item instance. This property is optional and might be system generated.
     * 
     * @return the friendlyName value.
     */
    @Override
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Get the additionalData property: A bag of custom fields that should be part of the entity and will be presented
     * to the user.
     * 
     * @return the additionalData value.
     */
    @Override
    public Map<String, Object> additionalData() {
        return this.additionalData;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryKeyEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryKeyEntityProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegistryKeyEntityProperties.
     */
    public static RegistryKeyEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryKeyEntityProperties deserializedRegistryKeyEntityProperties = new RegistryKeyEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalData".equals(fieldName)) {
                    Map<String, Object> additionalData = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedRegistryKeyEntityProperties.additionalData = additionalData;
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedRegistryKeyEntityProperties.friendlyName = reader.getString();
                } else if ("hive".equals(fieldName)) {
                    deserializedRegistryKeyEntityProperties.hive = RegistryHive.fromString(reader.getString());
                } else if ("key".equals(fieldName)) {
                    deserializedRegistryKeyEntityProperties.key = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryKeyEntityProperties;
        });
    }
}
