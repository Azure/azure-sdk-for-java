// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ActionPropertiesBase;
import java.io.IOException;

/**
 * Action property bag.
 */
@Fluent
public final class ActionResponseProperties extends ActionPropertiesBase {
    /*
     * The name of the logic app's workflow.
     */
    private String workflowId;

    /**
     * Creates an instance of ActionResponseProperties class.
     */
    public ActionResponseProperties() {
    }

    /**
     * Get the workflowId property: The name of the logic app's workflow.
     * 
     * @return the workflowId value.
     */
    public String workflowId() {
        return this.workflowId;
    }

    /**
     * Set the workflowId property: The name of the logic app's workflow.
     * 
     * @param workflowId the workflowId value to set.
     * @return the ActionResponseProperties object itself.
     */
    public ActionResponseProperties withWorkflowId(String workflowId) {
        this.workflowId = workflowId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActionResponseProperties withLogicAppResourceId(String logicAppResourceId) {
        super.withLogicAppResourceId(logicAppResourceId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (logicAppResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logicAppResourceId in model ActionResponseProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActionResponseProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("logicAppResourceId", logicAppResourceId());
        jsonWriter.writeStringField("workflowId", this.workflowId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionResponseProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActionResponseProperties.
     */
    public static ActionResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActionResponseProperties deserializedActionResponseProperties = new ActionResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logicAppResourceId".equals(fieldName)) {
                    deserializedActionResponseProperties.withLogicAppResourceId(reader.getString());
                } else if ("workflowId".equals(fieldName)) {
                    deserializedActionResponseProperties.workflowId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActionResponseProperties;
        });
    }
}
