// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The Activity query definitions. */
@Fluent
public final class ActivityEntityQueryTemplatePropertiesQueryDefinitions {
    /*
     * The Activity query to run on a given entity
     */
    @JsonProperty(value = "query")
    private String query;

    /*
     * The dimensions we want to summarize the timeline results on, this is comma separated list
     */
    @JsonProperty(value = "summarizeBy")
    private String summarizeBy;

    /**
     * Get the query property: The Activity query to run on a given entity.
     *
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: The Activity query to run on a given entity.
     *
     * @param query the query value to set.
     * @return the ActivityEntityQueryTemplatePropertiesQueryDefinitions object itself.
     */
    public ActivityEntityQueryTemplatePropertiesQueryDefinitions withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the summarizeBy property: The dimensions we want to summarize the timeline results on, this is comma
     * separated list.
     *
     * @return the summarizeBy value.
     */
    public String summarizeBy() {
        return this.summarizeBy;
    }

    /**
     * Set the summarizeBy property: The dimensions we want to summarize the timeline results on, this is comma
     * separated list.
     *
     * @param summarizeBy the summarizeBy value to set.
     * @return the ActivityEntityQueryTemplatePropertiesQueryDefinitions object itself.
     */
    public ActivityEntityQueryTemplatePropertiesQueryDefinitions withSummarizeBy(String summarizeBy) {
        this.summarizeBy = summarizeBy;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
