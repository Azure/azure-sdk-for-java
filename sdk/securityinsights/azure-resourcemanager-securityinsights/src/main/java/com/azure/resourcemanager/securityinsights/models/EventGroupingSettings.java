// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Event grouping settings property bag.
 */
@Fluent
public final class EventGroupingSettings implements JsonSerializable<EventGroupingSettings> {
    /*
     * The event grouping aggregation kinds
     */
    private EventGroupingAggregationKind aggregationKind;

    /**
     * Creates an instance of EventGroupingSettings class.
     */
    public EventGroupingSettings() {
    }

    /**
     * Get the aggregationKind property: The event grouping aggregation kinds.
     * 
     * @return the aggregationKind value.
     */
    public EventGroupingAggregationKind aggregationKind() {
        return this.aggregationKind;
    }

    /**
     * Set the aggregationKind property: The event grouping aggregation kinds.
     * 
     * @param aggregationKind the aggregationKind value to set.
     * @return the EventGroupingSettings object itself.
     */
    public EventGroupingSettings withAggregationKind(EventGroupingAggregationKind aggregationKind) {
        this.aggregationKind = aggregationKind;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aggregationKind",
            this.aggregationKind == null ? null : this.aggregationKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventGroupingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventGroupingSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventGroupingSettings.
     */
    public static EventGroupingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventGroupingSettings deserializedEventGroupingSettings = new EventGroupingSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aggregationKind".equals(fieldName)) {
                    deserializedEventGroupingSettings.aggregationKind
                        = EventGroupingAggregationKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventGroupingSettings;
        });
    }
}
