// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.EntityCommonProperties;
import com.azure.resourcemanager.securityinsights.models.RegistryValueKind;
import java.io.IOException;
import java.util.Map;

/**
 * RegistryValue entity property bag.
 */
@Immutable
public final class RegistryValueEntityProperties extends EntityCommonProperties {
    /*
     * The registry key entity id.
     */
    private String keyEntityId;

    /*
     * String formatted representation of the value data.
     */
    private String valueData;

    /*
     * The registry value name.
     */
    private String valueName;

    /*
     * Specifies the data types to use when storing values in the registry, or identifies the data type of a value in
     * the registry.
     */
    private RegistryValueKind valueType;

    /*
     * The graph item display name which is a short humanly readable description of the graph item instance. This
     * property is optional and might be system generated.
     */
    private String friendlyName;

    /*
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     */
    private Map<String, Object> additionalData;

    /**
     * Creates an instance of RegistryValueEntityProperties class.
     */
    public RegistryValueEntityProperties() {
    }

    /**
     * Get the keyEntityId property: The registry key entity id.
     * 
     * @return the keyEntityId value.
     */
    public String keyEntityId() {
        return this.keyEntityId;
    }

    /**
     * Get the valueData property: String formatted representation of the value data.
     * 
     * @return the valueData value.
     */
    public String valueData() {
        return this.valueData;
    }

    /**
     * Get the valueName property: The registry value name.
     * 
     * @return the valueName value.
     */
    public String valueName() {
        return this.valueName;
    }

    /**
     * Get the valueType property: Specifies the data types to use when storing values in the registry, or identifies
     * the data type of a value in the registry.
     * 
     * @return the valueType value.
     */
    public RegistryValueKind valueType() {
        return this.valueType;
    }

    /**
     * Get the friendlyName property: The graph item display name which is a short humanly readable description of the
     * graph item instance. This property is optional and might be system generated.
     * 
     * @return the friendlyName value.
     */
    @Override
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Get the additionalData property: A bag of custom fields that should be part of the entity and will be presented
     * to the user.
     * 
     * @return the additionalData value.
     */
    @Override
    public Map<String, Object> additionalData() {
        return this.additionalData;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryValueEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryValueEntityProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegistryValueEntityProperties.
     */
    public static RegistryValueEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryValueEntityProperties deserializedRegistryValueEntityProperties
                = new RegistryValueEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalData".equals(fieldName)) {
                    Map<String, Object> additionalData = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedRegistryValueEntityProperties.additionalData = additionalData;
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedRegistryValueEntityProperties.friendlyName = reader.getString();
                } else if ("keyEntityId".equals(fieldName)) {
                    deserializedRegistryValueEntityProperties.keyEntityId = reader.getString();
                } else if ("valueData".equals(fieldName)) {
                    deserializedRegistryValueEntityProperties.valueData = reader.getString();
                } else if ("valueName".equals(fieldName)) {
                    deserializedRegistryValueEntityProperties.valueName = reader.getString();
                } else if ("valueType".equals(fieldName)) {
                    deserializedRegistryValueEntityProperties.valueType
                        = RegistryValueKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryValueEntityProperties;
        });
    }
}
