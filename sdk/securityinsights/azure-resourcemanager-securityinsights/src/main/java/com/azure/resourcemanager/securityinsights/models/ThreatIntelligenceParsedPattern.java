// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes parsed pattern entity.
 */
@Fluent
public final class ThreatIntelligenceParsedPattern implements JsonSerializable<ThreatIntelligenceParsedPattern> {
    /*
     * Pattern type key
     */
    private String patternTypeKey;

    /*
     * Pattern type keys
     */
    private List<ThreatIntelligenceParsedPatternTypeValue> patternTypeValues;

    /**
     * Creates an instance of ThreatIntelligenceParsedPattern class.
     */
    public ThreatIntelligenceParsedPattern() {
    }

    /**
     * Get the patternTypeKey property: Pattern type key.
     * 
     * @return the patternTypeKey value.
     */
    public String patternTypeKey() {
        return this.patternTypeKey;
    }

    /**
     * Set the patternTypeKey property: Pattern type key.
     * 
     * @param patternTypeKey the patternTypeKey value to set.
     * @return the ThreatIntelligenceParsedPattern object itself.
     */
    public ThreatIntelligenceParsedPattern withPatternTypeKey(String patternTypeKey) {
        this.patternTypeKey = patternTypeKey;
        return this;
    }

    /**
     * Get the patternTypeValues property: Pattern type keys.
     * 
     * @return the patternTypeValues value.
     */
    public List<ThreatIntelligenceParsedPatternTypeValue> patternTypeValues() {
        return this.patternTypeValues;
    }

    /**
     * Set the patternTypeValues property: Pattern type keys.
     * 
     * @param patternTypeValues the patternTypeValues value to set.
     * @return the ThreatIntelligenceParsedPattern object itself.
     */
    public ThreatIntelligenceParsedPattern
        withPatternTypeValues(List<ThreatIntelligenceParsedPatternTypeValue> patternTypeValues) {
        this.patternTypeValues = patternTypeValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (patternTypeValues() != null) {
            patternTypeValues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("patternTypeKey", this.patternTypeKey);
        jsonWriter.writeArrayField("patternTypeValues", this.patternTypeValues,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThreatIntelligenceParsedPattern from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThreatIntelligenceParsedPattern if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ThreatIntelligenceParsedPattern.
     */
    public static ThreatIntelligenceParsedPattern fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThreatIntelligenceParsedPattern deserializedThreatIntelligenceParsedPattern
                = new ThreatIntelligenceParsedPattern();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("patternTypeKey".equals(fieldName)) {
                    deserializedThreatIntelligenceParsedPattern.patternTypeKey = reader.getString();
                } else if ("patternTypeValues".equals(fieldName)) {
                    List<ThreatIntelligenceParsedPatternTypeValue> patternTypeValues
                        = reader.readArray(reader1 -> ThreatIntelligenceParsedPatternTypeValue.fromJson(reader1));
                    deserializedThreatIntelligenceParsedPattern.patternTypeValues = patternTypeValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThreatIntelligenceParsedPattern;
        });
    }
}
