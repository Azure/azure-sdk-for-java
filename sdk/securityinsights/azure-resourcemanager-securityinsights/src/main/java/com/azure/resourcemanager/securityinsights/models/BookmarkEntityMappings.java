// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes the entity mappings of a single entity. */
@Fluent
public final class BookmarkEntityMappings {
    /*
     * The entity type
     */
    @JsonProperty(value = "entityType")
    private String entityType;

    /*
     * Array of fields mapping for that entity type
     */
    @JsonProperty(value = "fieldMappings")
    private List<EntityFieldMapping> fieldMappings;

    /**
     * Get the entityType property: The entity type.
     *
     * @return the entityType value.
     */
    public String entityType() {
        return this.entityType;
    }

    /**
     * Set the entityType property: The entity type.
     *
     * @param entityType the entityType value to set.
     * @return the BookmarkEntityMappings object itself.
     */
    public BookmarkEntityMappings withEntityType(String entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the fieldMappings property: Array of fields mapping for that entity type.
     *
     * @return the fieldMappings value.
     */
    public List<EntityFieldMapping> fieldMappings() {
        return this.fieldMappings;
    }

    /**
     * Set the fieldMappings property: Array of fields mapping for that entity type.
     *
     * @param fieldMappings the fieldMappings value to set.
     * @return the BookmarkEntityMappings object itself.
     */
    public BookmarkEntityMappings withFieldMappings(List<EntityFieldMapping> fieldMappings) {
        this.fieldMappings = fieldMappings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fieldMappings() != null) {
            fieldMappings().forEach(e -> e.validate());
        }
    }
}
