// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.EntityCommonProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Mail cluster entity property bag.
 */
@Immutable
public final class MailClusterEntityProperties extends EntityCommonProperties {
    /*
     * The mail message IDs that are part of the mail cluster
     */
    private List<String> networkMessageIds;

    /*
     * Count of mail messages by DeliveryStatus string representation
     */
    private Object countByDeliveryStatus;

    /*
     * Count of mail messages by ThreatType string representation
     */
    private Object countByThreatType;

    /*
     * Count of mail messages by ProtectionStatus string representation
     */
    private Object countByProtectionStatus;

    /*
     * The threats of mail messages that are part of the mail cluster
     */
    private List<String> threats;

    /*
     * The query that was used to identify the messages of the mail cluster
     */
    private String query;

    /*
     * The query time
     */
    private OffsetDateTime queryTime;

    /*
     * The number of mail messages that are part of the mail cluster
     */
    private Integer mailCount;

    /*
     * Is this a volume anomaly mail cluster
     */
    private Boolean isVolumeAnomaly;

    /*
     * The source of the mail cluster (default is 'O365 ATP')
     */
    private String source;

    /*
     * The id of the cluster source
     */
    private String clusterSourceIdentifier;

    /*
     * The type of the cluster source
     */
    private String clusterSourceType;

    /*
     * The cluster query start time
     */
    private OffsetDateTime clusterQueryStartTime;

    /*
     * The cluster query end time
     */
    private OffsetDateTime clusterQueryEndTime;

    /*
     * The cluster group
     */
    private String clusterGroup;

    /*
     * The graph item display name which is a short humanly readable description of the graph item instance. This
     * property is optional and might be system generated.
     */
    private String friendlyName;

    /*
     * A bag of custom fields that should be part of the entity and will be presented to the user.
     */
    private Map<String, Object> additionalData;

    /**
     * Creates an instance of MailClusterEntityProperties class.
     */
    public MailClusterEntityProperties() {
    }

    /**
     * Get the networkMessageIds property: The mail message IDs that are part of the mail cluster.
     * 
     * @return the networkMessageIds value.
     */
    public List<String> networkMessageIds() {
        return this.networkMessageIds;
    }

    /**
     * Get the countByDeliveryStatus property: Count of mail messages by DeliveryStatus string representation.
     * 
     * @return the countByDeliveryStatus value.
     */
    public Object countByDeliveryStatus() {
        return this.countByDeliveryStatus;
    }

    /**
     * Get the countByThreatType property: Count of mail messages by ThreatType string representation.
     * 
     * @return the countByThreatType value.
     */
    public Object countByThreatType() {
        return this.countByThreatType;
    }

    /**
     * Get the countByProtectionStatus property: Count of mail messages by ProtectionStatus string representation.
     * 
     * @return the countByProtectionStatus value.
     */
    public Object countByProtectionStatus() {
        return this.countByProtectionStatus;
    }

    /**
     * Get the threats property: The threats of mail messages that are part of the mail cluster.
     * 
     * @return the threats value.
     */
    public List<String> threats() {
        return this.threats;
    }

    /**
     * Get the query property: The query that was used to identify the messages of the mail cluster.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Get the queryTime property: The query time.
     * 
     * @return the queryTime value.
     */
    public OffsetDateTime queryTime() {
        return this.queryTime;
    }

    /**
     * Get the mailCount property: The number of mail messages that are part of the mail cluster.
     * 
     * @return the mailCount value.
     */
    public Integer mailCount() {
        return this.mailCount;
    }

    /**
     * Get the isVolumeAnomaly property: Is this a volume anomaly mail cluster.
     * 
     * @return the isVolumeAnomaly value.
     */
    public Boolean isVolumeAnomaly() {
        return this.isVolumeAnomaly;
    }

    /**
     * Get the source property: The source of the mail cluster (default is 'O365 ATP').
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Get the clusterSourceIdentifier property: The id of the cluster source.
     * 
     * @return the clusterSourceIdentifier value.
     */
    public String clusterSourceIdentifier() {
        return this.clusterSourceIdentifier;
    }

    /**
     * Get the clusterSourceType property: The type of the cluster source.
     * 
     * @return the clusterSourceType value.
     */
    public String clusterSourceType() {
        return this.clusterSourceType;
    }

    /**
     * Get the clusterQueryStartTime property: The cluster query start time.
     * 
     * @return the clusterQueryStartTime value.
     */
    public OffsetDateTime clusterQueryStartTime() {
        return this.clusterQueryStartTime;
    }

    /**
     * Get the clusterQueryEndTime property: The cluster query end time.
     * 
     * @return the clusterQueryEndTime value.
     */
    public OffsetDateTime clusterQueryEndTime() {
        return this.clusterQueryEndTime;
    }

    /**
     * Get the clusterGroup property: The cluster group.
     * 
     * @return the clusterGroup value.
     */
    public String clusterGroup() {
        return this.clusterGroup;
    }

    /**
     * Get the friendlyName property: The graph item display name which is a short humanly readable description of the
     * graph item instance. This property is optional and might be system generated.
     * 
     * @return the friendlyName value.
     */
    @Override
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Get the additionalData property: A bag of custom fields that should be part of the entity and will be presented
     * to the user.
     * 
     * @return the additionalData value.
     */
    @Override
    public Map<String, Object> additionalData() {
        return this.additionalData;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MailClusterEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MailClusterEntityProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MailClusterEntityProperties.
     */
    public static MailClusterEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MailClusterEntityProperties deserializedMailClusterEntityProperties = new MailClusterEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalData".equals(fieldName)) {
                    Map<String, Object> additionalData = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedMailClusterEntityProperties.additionalData = additionalData;
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.friendlyName = reader.getString();
                } else if ("networkMessageIds".equals(fieldName)) {
                    List<String> networkMessageIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedMailClusterEntityProperties.networkMessageIds = networkMessageIds;
                } else if ("countByDeliveryStatus".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.countByDeliveryStatus = reader.readUntyped();
                } else if ("countByThreatType".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.countByThreatType = reader.readUntyped();
                } else if ("countByProtectionStatus".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.countByProtectionStatus = reader.readUntyped();
                } else if ("threats".equals(fieldName)) {
                    List<String> threats = reader.readArray(reader1 -> reader1.getString());
                    deserializedMailClusterEntityProperties.threats = threats;
                } else if ("query".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.query = reader.getString();
                } else if ("queryTime".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.queryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("mailCount".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.mailCount = reader.getNullable(JsonReader::getInt);
                } else if ("isVolumeAnomaly".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.isVolumeAnomaly
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("source".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.source = reader.getString();
                } else if ("clusterSourceIdentifier".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.clusterSourceIdentifier = reader.getString();
                } else if ("clusterSourceType".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.clusterSourceType = reader.getString();
                } else if ("clusterQueryStartTime".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.clusterQueryStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("clusterQueryEndTime".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.clusterQueryEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("clusterGroup".equals(fieldName)) {
                    deserializedMailClusterEntityProperties.clusterGroup = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMailClusterEntityProperties;
        });
    }
}
