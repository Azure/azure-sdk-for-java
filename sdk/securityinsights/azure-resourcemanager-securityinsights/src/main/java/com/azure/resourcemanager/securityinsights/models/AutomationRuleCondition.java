// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes an automation rule condition.
 */
@Immutable
public class AutomationRuleCondition implements JsonSerializable<AutomationRuleCondition> {
    /*
     * The conditionType property.
     */
    private ConditionType conditionType = ConditionType.fromString("AutomationRuleCondition");

    /**
     * Creates an instance of AutomationRuleCondition class.
     */
    public AutomationRuleCondition() {
    }

    /**
     * Get the conditionType property: The conditionType property.
     * 
     * @return the conditionType value.
     */
    public ConditionType conditionType() {
        return this.conditionType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("conditionType", this.conditionType == null ? null : this.conditionType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutomationRuleCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutomationRuleCondition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutomationRuleCondition.
     */
    public static AutomationRuleCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("conditionType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Boolean".equals(discriminatorValue)) {
                    return BooleanConditionProperties.fromJson(readerToUse.reset());
                } else if ("PropertyArrayChanged".equals(discriminatorValue)) {
                    return PropertyArrayChangedConditionProperties.fromJson(readerToUse.reset());
                } else if ("PropertyArray".equals(discriminatorValue)) {
                    return PropertyArrayConditionProperties.fromJson(readerToUse.reset());
                } else if ("PropertyChanged".equals(discriminatorValue)) {
                    return PropertyChangedConditionProperties.fromJson(readerToUse.reset());
                } else if ("Property".equals(discriminatorValue)) {
                    return PropertyConditionProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AutomationRuleCondition fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutomationRuleCondition deserializedAutomationRuleCondition = new AutomationRuleCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("conditionType".equals(fieldName)) {
                    deserializedAutomationRuleCondition.conditionType = ConditionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutomationRuleCondition;
        });
    }
}
