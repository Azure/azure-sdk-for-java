// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The available data types for Threat Intelligence TAXII data connector.
 */
@Fluent
public final class TiTaxiiDataConnectorDataTypes implements JsonSerializable<TiTaxiiDataConnectorDataTypes> {
    /*
     * Data type for TAXII connector.
     */
    private TiTaxiiDataConnectorDataTypesTaxiiClient taxiiClient;

    /**
     * Creates an instance of TiTaxiiDataConnectorDataTypes class.
     */
    public TiTaxiiDataConnectorDataTypes() {
    }

    /**
     * Get the taxiiClient property: Data type for TAXII connector.
     * 
     * @return the taxiiClient value.
     */
    public TiTaxiiDataConnectorDataTypesTaxiiClient taxiiClient() {
        return this.taxiiClient;
    }

    /**
     * Set the taxiiClient property: Data type for TAXII connector.
     * 
     * @param taxiiClient the taxiiClient value to set.
     * @return the TiTaxiiDataConnectorDataTypes object itself.
     */
    public TiTaxiiDataConnectorDataTypes withTaxiiClient(TiTaxiiDataConnectorDataTypesTaxiiClient taxiiClient) {
        this.taxiiClient = taxiiClient;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (taxiiClient() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property taxiiClient in model TiTaxiiDataConnectorDataTypes"));
        } else {
            taxiiClient().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TiTaxiiDataConnectorDataTypes.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("taxiiClient", this.taxiiClient);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TiTaxiiDataConnectorDataTypes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TiTaxiiDataConnectorDataTypes if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TiTaxiiDataConnectorDataTypes.
     */
    public static TiTaxiiDataConnectorDataTypes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TiTaxiiDataConnectorDataTypes deserializedTiTaxiiDataConnectorDataTypes
                = new TiTaxiiDataConnectorDataTypes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("taxiiClient".equals(fieldName)) {
                    deserializedTiTaxiiDataConnectorDataTypes.taxiiClient
                        = TiTaxiiDataConnectorDataTypesTaxiiClient.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTiTaxiiDataConnectorDataTypes;
        });
    }
}
