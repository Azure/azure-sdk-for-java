// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.ResourceWithEtag;
import com.azure.resourcemanager.securityinsights.models.UserInfo;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Represents a Watchlist item in Azure Security Insights.
 */
@Fluent
public final class WatchlistItemInner extends ResourceWithEtag {
    /*
     * Watchlist Item properties
     */
    private WatchlistItemProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of WatchlistItemInner class.
     */
    public WatchlistItemInner() {
    }

    /**
     * Get the innerProperties property: Watchlist Item properties.
     * 
     * @return the innerProperties value.
     */
    private WatchlistItemProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WatchlistItemInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the watchlistItemType property: The type of the watchlist item.
     * 
     * @return the watchlistItemType value.
     */
    public String watchlistItemType() {
        return this.innerProperties() == null ? null : this.innerProperties().watchlistItemType();
    }

    /**
     * Set the watchlistItemType property: The type of the watchlist item.
     * 
     * @param watchlistItemType the watchlistItemType value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withWatchlistItemType(String watchlistItemType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withWatchlistItemType(watchlistItemType);
        return this;
    }

    /**
     * Get the watchlistItemId property: The id (a Guid) of the watchlist item.
     * 
     * @return the watchlistItemId value.
     */
    public String watchlistItemId() {
        return this.innerProperties() == null ? null : this.innerProperties().watchlistItemId();
    }

    /**
     * Set the watchlistItemId property: The id (a Guid) of the watchlist item.
     * 
     * @param watchlistItemId the watchlistItemId value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withWatchlistItemId(String watchlistItemId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withWatchlistItemId(watchlistItemId);
        return this;
    }

    /**
     * Get the tenantId property: The tenantId to which the watchlist item belongs to.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: The tenantId to which the watchlist item belongs to.
     * 
     * @param tenantId the tenantId value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withTenantId(String tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Get the isDeleted property: A flag that indicates if the watchlist item is deleted or not.
     * 
     * @return the isDeleted value.
     */
    public Boolean isDeleted() {
        return this.innerProperties() == null ? null : this.innerProperties().isDeleted();
    }

    /**
     * Set the isDeleted property: A flag that indicates if the watchlist item is deleted or not.
     * 
     * @param isDeleted the isDeleted value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withIsDeleted(Boolean isDeleted) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withIsDeleted(isDeleted);
        return this;
    }

    /**
     * Get the created property: The time the watchlist item was created.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.innerProperties() == null ? null : this.innerProperties().created();
    }

    /**
     * Set the created property: The time the watchlist item was created.
     * 
     * @param created the created value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withCreated(OffsetDateTime created) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withCreated(created);
        return this;
    }

    /**
     * Get the updated property: The last time the watchlist item was updated.
     * 
     * @return the updated value.
     */
    public OffsetDateTime updated() {
        return this.innerProperties() == null ? null : this.innerProperties().updated();
    }

    /**
     * Set the updated property: The last time the watchlist item was updated.
     * 
     * @param updated the updated value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withUpdated(OffsetDateTime updated) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withUpdated(updated);
        return this;
    }

    /**
     * Get the createdBy property: Describes a user that created the watchlist item.
     * 
     * @return the createdBy value.
     */
    public UserInfo createdBy() {
        return this.innerProperties() == null ? null : this.innerProperties().createdBy();
    }

    /**
     * Set the createdBy property: Describes a user that created the watchlist item.
     * 
     * @param createdBy the createdBy value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withCreatedBy(UserInfo createdBy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withCreatedBy(createdBy);
        return this;
    }

    /**
     * Get the updatedBy property: Describes a user that updated the watchlist item.
     * 
     * @return the updatedBy value.
     */
    public UserInfo updatedBy() {
        return this.innerProperties() == null ? null : this.innerProperties().updatedBy();
    }

    /**
     * Set the updatedBy property: Describes a user that updated the watchlist item.
     * 
     * @param updatedBy the updatedBy value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withUpdatedBy(UserInfo updatedBy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withUpdatedBy(updatedBy);
        return this;
    }

    /**
     * Get the itemsKeyValue property: key-value pairs for a watchlist item.
     * 
     * @return the itemsKeyValue value.
     */
    public Map<String, Object> itemsKeyValue() {
        return this.innerProperties() == null ? null : this.innerProperties().itemsKeyValue();
    }

    /**
     * Set the itemsKeyValue property: key-value pairs for a watchlist item.
     * 
     * @param itemsKeyValue the itemsKeyValue value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withItemsKeyValue(Map<String, Object> itemsKeyValue) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withItemsKeyValue(itemsKeyValue);
        return this;
    }

    /**
     * Get the entityMapping property: key-value pairs for a watchlist item entity mapping.
     * 
     * @return the entityMapping value.
     */
    public Map<String, Object> entityMapping() {
        return this.innerProperties() == null ? null : this.innerProperties().entityMapping();
    }

    /**
     * Set the entityMapping property: key-value pairs for a watchlist item entity mapping.
     * 
     * @param entityMapping the entityMapping value to set.
     * @return the WatchlistItemInner object itself.
     */
    public WatchlistItemInner withEntityMapping(Map<String, Object> entityMapping) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WatchlistItemProperties();
        }
        this.innerProperties().withEntityMapping(entityMapping);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WatchlistItemInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WatchlistItemInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WatchlistItemInner.
     */
    public static WatchlistItemInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WatchlistItemInner deserializedWatchlistItemInner = new WatchlistItemInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedWatchlistItemInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedWatchlistItemInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedWatchlistItemInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedWatchlistItemInner.withEtag(reader.getString());
                } else if ("systemData".equals(fieldName)) {
                    deserializedWatchlistItemInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedWatchlistItemInner.innerProperties = WatchlistItemProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWatchlistItemInner;
        });
    }
}
