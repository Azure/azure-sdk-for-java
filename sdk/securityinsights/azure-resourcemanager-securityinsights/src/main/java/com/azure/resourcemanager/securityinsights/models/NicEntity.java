// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.fluent.models.EntityInner;
import com.azure.resourcemanager.securityinsights.fluent.models.NicEntityProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Represents an network interface entity.
 */
@Immutable
public final class NicEntity extends EntityInner {
    /*
     * The kind of the entity.
     */
    private EntityKind kind = EntityKind.NIC;

    /*
     * Network interface entity properties
     */
    private NicEntityProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of NicEntity class.
     */
    public NicEntity() {
    }

    /**
     * Get the kind property: The kind of the entity.
     * 
     * @return the kind value.
     */
    @Override
    public EntityKind kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: Network interface entity properties.
     * 
     * @return the innerProperties value.
     */
    private NicEntityProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the macAddress property: The MAC address of this network interface.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().macAddress();
    }

    /**
     * Get the ipAddressEntityId property: The IP entity id of this network interface.
     * 
     * @return the ipAddressEntityId value.
     */
    public String ipAddressEntityId() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAddressEntityId();
    }

    /**
     * Get the vlans property: A list of VLANs of the network interface entity.
     * 
     * @return the vlans value.
     */
    public List<String> vlans() {
        return this.innerProperties() == null ? null : this.innerProperties().vlans();
    }

    /**
     * Get the additionalData property: A bag of custom fields that should be part of the entity and will be presented
     * to the user.
     * 
     * @return the additionalData value.
     */
    public Map<String, Object> additionalData() {
        return this.innerProperties() == null ? null : this.innerProperties().additionalData();
    }

    /**
     * Get the friendlyName property: The graph item display name which is a short humanly readable description of the
     * graph item instance. This property is optional and might be system generated.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.innerProperties() == null ? null : this.innerProperties().friendlyName();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NicEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NicEntity if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NicEntity.
     */
    public static NicEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NicEntity deserializedNicEntity = new NicEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNicEntity.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNicEntity.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNicEntity.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedNicEntity.systemData = SystemData.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedNicEntity.kind = EntityKind.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedNicEntity.innerProperties = NicEntityProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNicEntity;
        });
    }
}
