// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * timeline aggregation information per kind.
 */
@Fluent
public final class TimelineAggregation implements JsonSerializable<TimelineAggregation> {
    /*
     * the total items found for a kind
     */
    private int count;

    /*
     * the query kind
     */
    private EntityTimelineKind kind;

    /**
     * Creates an instance of TimelineAggregation class.
     */
    public TimelineAggregation() {
    }

    /**
     * Get the count property: the total items found for a kind.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Set the count property: the total items found for a kind.
     * 
     * @param count the count value to set.
     * @return the TimelineAggregation object itself.
     */
    public TimelineAggregation withCount(int count) {
        this.count = count;
        return this;
    }

    /**
     * Get the kind property: the query kind.
     * 
     * @return the kind value.
     */
    public EntityTimelineKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: the query kind.
     * 
     * @param kind the kind value to set.
     * @return the TimelineAggregation object itself.
     */
    public TimelineAggregation withKind(EntityTimelineKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kind in model TimelineAggregation"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TimelineAggregation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("count", this.count);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimelineAggregation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimelineAggregation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TimelineAggregation.
     */
    public static TimelineAggregation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimelineAggregation deserializedTimelineAggregation = new TimelineAggregation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedTimelineAggregation.count = reader.getInt();
                } else if ("kind".equals(fieldName)) {
                    deserializedTimelineAggregation.kind = EntityTimelineKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimelineAggregation;
        });
    }
}
