// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Expansion result connected entities.
 */
@Fluent
public final class ConnectedEntity implements JsonSerializable<ConnectedEntity> {
    /*
     * Entity Id of the connected entity
     */
    private String targetEntityId;

    /*
     * key-value pairs for a connected entity mapping
     */
    private Object additionalData;

    /**
     * Creates an instance of ConnectedEntity class.
     */
    public ConnectedEntity() {
    }

    /**
     * Get the targetEntityId property: Entity Id of the connected entity.
     * 
     * @return the targetEntityId value.
     */
    public String targetEntityId() {
        return this.targetEntityId;
    }

    /**
     * Set the targetEntityId property: Entity Id of the connected entity.
     * 
     * @param targetEntityId the targetEntityId value to set.
     * @return the ConnectedEntity object itself.
     */
    public ConnectedEntity withTargetEntityId(String targetEntityId) {
        this.targetEntityId = targetEntityId;
        return this;
    }

    /**
     * Get the additionalData property: key-value pairs for a connected entity mapping.
     * 
     * @return the additionalData value.
     */
    public Object additionalData() {
        return this.additionalData;
    }

    /**
     * Set the additionalData property: key-value pairs for a connected entity mapping.
     * 
     * @param additionalData the additionalData value to set.
     * @return the ConnectedEntity object itself.
     */
    public ConnectedEntity withAdditionalData(Object additionalData) {
        this.additionalData = additionalData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetEntityId", this.targetEntityId);
        jsonWriter.writeUntypedField("additionalData", this.additionalData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectedEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectedEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectedEntity.
     */
    public static ConnectedEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectedEntity deserializedConnectedEntity = new ConnectedEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetEntityId".equals(fieldName)) {
                    deserializedConnectedEntity.targetEntityId = reader.getString();
                } else if ("additionalData".equals(fieldName)) {
                    deserializedConnectedEntity.additionalData = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectedEntity;
        });
    }
}
