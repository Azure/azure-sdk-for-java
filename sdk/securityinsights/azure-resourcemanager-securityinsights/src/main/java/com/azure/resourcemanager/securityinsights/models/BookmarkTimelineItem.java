// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Represents bookmark timeline item.
 */
@Fluent
public final class BookmarkTimelineItem extends EntityTimelineItem {
    /*
     * The entity query kind type.
     */
    private EntityTimelineKind kind = EntityTimelineKind.BOOKMARK;

    /*
     * The bookmark azure resource id.
     */
    private String azureResourceId;

    /*
     * The bookmark display name.
     */
    private String displayName;

    /*
     * The notes of the bookmark
     */
    private String notes;

    /*
     * The bookmark end time.
     */
    private OffsetDateTime endTimeUtc;

    /*
     * The bookmark start time.
     */
    private OffsetDateTime startTimeUtc;

    /*
     * The bookmark event time.
     */
    private OffsetDateTime eventTime;

    /*
     * Describes a user that created the bookmark
     */
    private UserInfo createdBy;

    /*
     * List of labels relevant to this bookmark
     */
    private List<String> labels;

    /**
     * Creates an instance of BookmarkTimelineItem class.
     */
    public BookmarkTimelineItem() {
    }

    /**
     * Get the kind property: The entity query kind type.
     * 
     * @return the kind value.
     */
    @Override
    public EntityTimelineKind kind() {
        return this.kind;
    }

    /**
     * Get the azureResourceId property: The bookmark azure resource id.
     * 
     * @return the azureResourceId value.
     */
    public String azureResourceId() {
        return this.azureResourceId;
    }

    /**
     * Set the azureResourceId property: The bookmark azure resource id.
     * 
     * @param azureResourceId the azureResourceId value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withAzureResourceId(String azureResourceId) {
        this.azureResourceId = azureResourceId;
        return this;
    }

    /**
     * Get the displayName property: The bookmark display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The bookmark display name.
     * 
     * @param displayName the displayName value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the notes property: The notes of the bookmark.
     * 
     * @return the notes value.
     */
    public String notes() {
        return this.notes;
    }

    /**
     * Set the notes property: The notes of the bookmark.
     * 
     * @param notes the notes value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withNotes(String notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Get the endTimeUtc property: The bookmark end time.
     * 
     * @return the endTimeUtc value.
     */
    public OffsetDateTime endTimeUtc() {
        return this.endTimeUtc;
    }

    /**
     * Set the endTimeUtc property: The bookmark end time.
     * 
     * @param endTimeUtc the endTimeUtc value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withEndTimeUtc(OffsetDateTime endTimeUtc) {
        this.endTimeUtc = endTimeUtc;
        return this;
    }

    /**
     * Get the startTimeUtc property: The bookmark start time.
     * 
     * @return the startTimeUtc value.
     */
    public OffsetDateTime startTimeUtc() {
        return this.startTimeUtc;
    }

    /**
     * Set the startTimeUtc property: The bookmark start time.
     * 
     * @param startTimeUtc the startTimeUtc value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withStartTimeUtc(OffsetDateTime startTimeUtc) {
        this.startTimeUtc = startTimeUtc;
        return this;
    }

    /**
     * Get the eventTime property: The bookmark event time.
     * 
     * @return the eventTime value.
     */
    public OffsetDateTime eventTime() {
        return this.eventTime;
    }

    /**
     * Set the eventTime property: The bookmark event time.
     * 
     * @param eventTime the eventTime value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withEventTime(OffsetDateTime eventTime) {
        this.eventTime = eventTime;
        return this;
    }

    /**
     * Get the createdBy property: Describes a user that created the bookmark.
     * 
     * @return the createdBy value.
     */
    public UserInfo createdBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: Describes a user that created the bookmark.
     * 
     * @param createdBy the createdBy value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withCreatedBy(UserInfo createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the labels property: List of labels relevant to this bookmark.
     * 
     * @return the labels value.
     */
    public List<String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: List of labels relevant to this bookmark.
     * 
     * @param labels the labels value to set.
     * @return the BookmarkTimelineItem object itself.
     */
    public BookmarkTimelineItem withLabels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (azureResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureResourceId in model BookmarkTimelineItem"));
        }
        if (createdBy() != null) {
            createdBy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BookmarkTimelineItem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureResourceId", this.azureResourceId);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("notes", this.notes);
        jsonWriter.writeStringField("endTimeUtc",
            this.endTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTimeUtc));
        jsonWriter.writeStringField("startTimeUtc",
            this.startTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTimeUtc));
        jsonWriter.writeStringField("eventTime",
            this.eventTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.eventTime));
        jsonWriter.writeJsonField("createdBy", this.createdBy);
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BookmarkTimelineItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BookmarkTimelineItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BookmarkTimelineItem.
     */
    public static BookmarkTimelineItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BookmarkTimelineItem deserializedBookmarkTimelineItem = new BookmarkTimelineItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureResourceId".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.azureResourceId = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.kind = EntityTimelineKind.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.displayName = reader.getString();
                } else if ("notes".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.notes = reader.getString();
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.endTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("startTimeUtc".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.startTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("eventTime".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.eventTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedBookmarkTimelineItem.createdBy = UserInfo.fromJson(reader);
                } else if ("labels".equals(fieldName)) {
                    List<String> labels = reader.readArray(reader1 -> reader1.getString());
                    deserializedBookmarkTimelineItem.labels = labels;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBookmarkTimelineItem;
        });
    }
}
