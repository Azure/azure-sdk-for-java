// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.securityinsights.models.DataConnectorTenantId;
import java.io.IOException;

/**
 * Office365 Project requirements check properties.
 */
@Fluent
public final class Office365ProjectCheckRequirementsProperties extends DataConnectorTenantId {
    /**
     * Creates an instance of Office365ProjectCheckRequirementsProperties class.
     */
    public Office365ProjectCheckRequirementsProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Office365ProjectCheckRequirementsProperties withTenantId(String tenantId) {
        super.withTenantId(tenantId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tenantId in model Office365ProjectCheckRequirementsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Office365ProjectCheckRequirementsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", tenantId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Office365ProjectCheckRequirementsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Office365ProjectCheckRequirementsProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Office365ProjectCheckRequirementsProperties.
     */
    public static Office365ProjectCheckRequirementsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Office365ProjectCheckRequirementsProperties deserializedOffice365ProjectCheckRequirementsProperties
                = new Office365ProjectCheckRequirementsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedOffice365ProjectCheckRequirementsProperties.withTenantId(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOffice365ProjectCheckRequirementsProperties;
        });
    }
}
