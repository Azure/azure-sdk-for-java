// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.securityinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The data type definition.
 */
@Fluent
public final class DataTypeDefinitions implements JsonSerializable<DataTypeDefinitions> {
    /*
     * The data type name
     */
    private String dataType;

    /**
     * Creates an instance of DataTypeDefinitions class.
     */
    public DataTypeDefinitions() {
    }

    /**
     * Get the dataType property: The data type name.
     * 
     * @return the dataType value.
     */
    public String dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: The data type name.
     * 
     * @param dataType the dataType value to set.
     * @return the DataTypeDefinitions object itself.
     */
    public DataTypeDefinitions withDataType(String dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataType", this.dataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataTypeDefinitions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataTypeDefinitions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataTypeDefinitions.
     */
    public static DataTypeDefinitions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataTypeDefinitions deserializedDataTypeDefinitions = new DataTypeDefinitions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataType".equals(fieldName)) {
                    deserializedDataTypeDefinitions.dataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataTypeDefinitions;
        });
    }
}
