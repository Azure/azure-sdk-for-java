// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.ProvisioningState;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import java.io.IOException;
import java.util.List;

/**
 * A StorageClass resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
 */
@Fluent
public final class StorageClassResourceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private StorageClassProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of StorageClassResourceInner class.
     */
    public StorageClassResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private StorageClassProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the allowVolumeExpansion property: Volume can be expanded or not.
     * 
     * @return the allowVolumeExpansion value.
     */
    public VolumeExpansion allowVolumeExpansion() {
        return this.innerProperties() == null ? null : this.innerProperties().allowVolumeExpansion();
    }

    /**
     * Set the allowVolumeExpansion property: Volume can be expanded or not.
     * 
     * @param allowVolumeExpansion the allowVolumeExpansion value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withAllowVolumeExpansion(VolumeExpansion allowVolumeExpansion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withAllowVolumeExpansion(allowVolumeExpansion);
        return this;
    }

    /**
     * Get the mountOptions property: Additional mount options.
     * 
     * @return the mountOptions value.
     */
    public List<String> mountOptions() {
        return this.innerProperties() == null ? null : this.innerProperties().mountOptions();
    }

    /**
     * Set the mountOptions property: Additional mount options.
     * 
     * @param mountOptions the mountOptions value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withMountOptions(List<String> mountOptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withMountOptions(mountOptions);
        return this;
    }

    /**
     * Get the provisioner property: Provisioner name.
     * 
     * @return the provisioner value.
     */
    public String provisioner() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioner();
    }

    /**
     * Set the provisioner property: Provisioner name.
     * 
     * @param provisioner the provisioner value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withProvisioner(String provisioner) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withProvisioner(provisioner);
        return this;
    }

    /**
     * Get the volumeBindingMode property: Binding mode of volumes: Immediate, WaitForFirstConsumer.
     * 
     * @return the volumeBindingMode value.
     */
    public VolumeBindingMode volumeBindingMode() {
        return this.innerProperties() == null ? null : this.innerProperties().volumeBindingMode();
    }

    /**
     * Set the volumeBindingMode property: Binding mode of volumes: Immediate, WaitForFirstConsumer.
     * 
     * @param volumeBindingMode the volumeBindingMode value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withVolumeBindingMode(VolumeBindingMode volumeBindingMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withVolumeBindingMode(volumeBindingMode);
        return this;
    }

    /**
     * Get the accessModes property: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce].
     * 
     * @return the accessModes value.
     */
    public List<AccessMode> accessModes() {
        return this.innerProperties() == null ? null : this.innerProperties().accessModes();
    }

    /**
     * Set the accessModes property: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce].
     * 
     * @param accessModes the accessModes value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withAccessModes(List<AccessMode> accessModes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withAccessModes(accessModes);
        return this;
    }

    /**
     * Get the dataResilience property: Allow single data node failure.
     * 
     * @return the dataResilience value.
     */
    public DataResilienceTier dataResilience() {
        return this.innerProperties() == null ? null : this.innerProperties().dataResilience();
    }

    /**
     * Set the dataResilience property: Allow single data node failure.
     * 
     * @param dataResilience the dataResilience value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withDataResilience(DataResilienceTier dataResilience) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withDataResilience(dataResilience);
        return this;
    }

    /**
     * Get the failoverSpeed property: Failover speed: NA, Slow, Fast.
     * 
     * @return the failoverSpeed value.
     */
    public FailoverTier failoverSpeed() {
        return this.innerProperties() == null ? null : this.innerProperties().failoverSpeed();
    }

    /**
     * Set the failoverSpeed property: Failover speed: NA, Slow, Fast.
     * 
     * @param failoverSpeed the failoverSpeed value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withFailoverSpeed(FailoverTier failoverSpeed) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withFailoverSpeed(failoverSpeed);
        return this;
    }

    /**
     * Get the limitations property: Limitations of the storage class.
     * 
     * @return the limitations value.
     */
    public List<String> limitations() {
        return this.innerProperties() == null ? null : this.innerProperties().limitations();
    }

    /**
     * Set the limitations property: Limitations of the storage class.
     * 
     * @param limitations the limitations value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withLimitations(List<String> limitations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withLimitations(limitations);
        return this;
    }

    /**
     * Get the performance property: Performance tier.
     * 
     * @return the performance value.
     */
    public PerformanceTier performance() {
        return this.innerProperties() == null ? null : this.innerProperties().performance();
    }

    /**
     * Set the performance property: Performance tier.
     * 
     * @param performance the performance value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withPerformance(PerformanceTier performance) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withPerformance(performance);
        return this;
    }

    /**
     * Get the priority property: Selection priority when multiple storage classes meet the criteria. 0: Highest, -1:
     * Never use.
     * 
     * @return the priority value.
     */
    public Long priority() {
        return this.innerProperties() == null ? null : this.innerProperties().priority();
    }

    /**
     * Set the priority property: Selection priority when multiple storage classes meet the criteria. 0: Highest, -1:
     * Never use.
     * 
     * @param priority the priority value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withPriority(Long priority) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withPriority(priority);
        return this;
    }

    /**
     * Get the typeProperties property: Properties of the StorageClass.
     * 
     * @return the typeProperties value.
     */
    public StorageClassTypeProperties typeProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().typeProperties();
    }

    /**
     * Set the typeProperties property: Properties of the StorageClass.
     * 
     * @param typeProperties the typeProperties value to set.
     * @return the StorageClassResourceInner object itself.
     */
    public StorageClassResourceInner withTypeProperties(StorageClassTypeProperties typeProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageClassProperties();
        }
        this.innerProperties().withTypeProperties(typeProperties);
        return this;
    }

    /**
     * Get the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageClassResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageClassResourceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageClassResourceInner.
     */
    public static StorageClassResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageClassResourceInner deserializedStorageClassResourceInner = new StorageClassResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedStorageClassResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedStorageClassResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStorageClassResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedStorageClassResourceInner.innerProperties = StorageClassProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedStorageClassResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageClassResourceInner;
        });
    }
}
