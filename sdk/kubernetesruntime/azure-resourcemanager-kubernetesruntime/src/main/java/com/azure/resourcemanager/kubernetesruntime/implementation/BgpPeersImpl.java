// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesruntime.fluent.BgpPeersClient;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.BgpPeerInner;
import com.azure.resourcemanager.kubernetesruntime.models.BgpPeer;
import com.azure.resourcemanager.kubernetesruntime.models.BgpPeers;

public final class BgpPeersImpl implements BgpPeers {
    private static final ClientLogger LOGGER = new ClientLogger(BgpPeersImpl.class);

    private final BgpPeersClient innerClient;

    private final com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager;

    public BgpPeersImpl(BgpPeersClient innerClient,
        com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BgpPeer> list(String resourceUri) {
        PagedIterable<BgpPeerInner> inner = this.serviceClient().list(resourceUri);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BgpPeerImpl(inner1, this.manager()));
    }

    public PagedIterable<BgpPeer> list(String resourceUri, Context context) {
        PagedIterable<BgpPeerInner> inner = this.serviceClient().list(resourceUri, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BgpPeerImpl(inner1, this.manager()));
    }

    public Response<BgpPeer> getWithResponse(String resourceUri, String bgpPeerName, Context context) {
        Response<BgpPeerInner> inner = this.serviceClient().getWithResponse(resourceUri, bgpPeerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new BgpPeerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BgpPeer get(String resourceUri, String bgpPeerName) {
        BgpPeerInner inner = this.serviceClient().get(resourceUri, bgpPeerName);
        if (inner != null) {
            return new BgpPeerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceUri, String bgpPeerName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, bgpPeerName, context);
    }

    public void deleteByResourceGroup(String resourceUri, String bgpPeerName) {
        this.serviceClient().delete(resourceUri, bgpPeerName);
    }

    public BgpPeer getById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String bgpPeerName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "bgpPeerName");
        if (bgpPeerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'bgpPeers'.", id)));
        }
        return this.getWithResponse(resourceUri, bgpPeerName, Context.NONE).getValue();
    }

    public Response<BgpPeer> getByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String bgpPeerName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "bgpPeerName");
        if (bgpPeerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'bgpPeers'.", id)));
        }
        return this.getWithResponse(resourceUri, bgpPeerName, context);
    }

    public void deleteById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String bgpPeerName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "bgpPeerName");
        if (bgpPeerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'bgpPeers'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceUri, bgpPeerName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String bgpPeerName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}", "bgpPeerName");
        if (bgpPeerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'bgpPeers'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceUri, bgpPeerName, context);
    }

    private BgpPeersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager manager() {
        return this.serviceManager;
    }

    public BgpPeerImpl define(String name) {
        return new BgpPeerImpl(name, this.manager());
    }
}
