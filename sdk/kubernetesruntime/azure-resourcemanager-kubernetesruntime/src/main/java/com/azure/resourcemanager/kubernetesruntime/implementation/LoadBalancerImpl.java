// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.LoadBalancerInner;
import com.azure.resourcemanager.kubernetesruntime.models.AdvertiseMode;
import com.azure.resourcemanager.kubernetesruntime.models.LoadBalancer;
import com.azure.resourcemanager.kubernetesruntime.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class LoadBalancerImpl implements LoadBalancer, LoadBalancer.Definition, LoadBalancer.Update {
    private LoadBalancerInner innerObject;

    private final com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<String> addresses() {
        List<String> inner = this.innerModel().addresses();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Map<String, String> serviceSelector() {
        Map<String, String> inner = this.innerModel().serviceSelector();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public AdvertiseMode advertiseMode() {
        return this.innerModel().advertiseMode();
    }

    public List<String> bgpPeers() {
        List<String> inner = this.innerModel().bgpPeers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public LoadBalancerInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager manager() {
        return this.serviceManager;
    }

    private String resourceUri;

    private String loadBalancerName;

    public LoadBalancerImpl withExistingResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    public LoadBalancer create() {
        this.innerObject = serviceManager.serviceClient()
            .getLoadBalancers()
            .createOrUpdate(resourceUri, loadBalancerName, this.innerModel(), Context.NONE);
        return this;
    }

    public LoadBalancer create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getLoadBalancers()
            .createOrUpdate(resourceUri, loadBalancerName, this.innerModel(), context);
        return this;
    }

    LoadBalancerImpl(String name, com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager) {
        this.innerObject = new LoadBalancerInner();
        this.serviceManager = serviceManager;
        this.loadBalancerName = name;
    }

    public LoadBalancerImpl update() {
        return this;
    }

    public LoadBalancer apply() {
        this.innerObject = serviceManager.serviceClient()
            .getLoadBalancers()
            .createOrUpdate(resourceUri, loadBalancerName, this.innerModel(), Context.NONE);
        return this;
    }

    public LoadBalancer apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getLoadBalancers()
            .createOrUpdate(resourceUri, loadBalancerName, this.innerModel(), context);
        return this;
    }

    LoadBalancerImpl(LoadBalancerInner innerObject,
        com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/loadBalancers/{loadBalancerName}", "resourceUri");
        this.loadBalancerName = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/loadBalancers/{loadBalancerName}",
            "loadBalancerName");
    }

    public LoadBalancer refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getLoadBalancers()
            .getWithResponse(resourceUri, loadBalancerName, Context.NONE)
            .getValue();
        return this;
    }

    public LoadBalancer refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getLoadBalancers()
            .getWithResponse(resourceUri, loadBalancerName, context)
            .getValue();
        return this;
    }

    public LoadBalancerImpl withAddresses(List<String> addresses) {
        this.innerModel().withAddresses(addresses);
        return this;
    }

    public LoadBalancerImpl withServiceSelector(Map<String, String> serviceSelector) {
        this.innerModel().withServiceSelector(serviceSelector);
        return this;
    }

    public LoadBalancerImpl withAdvertiseMode(AdvertiseMode advertiseMode) {
        this.innerModel().withAdvertiseMode(advertiseMode);
        return this;
    }

    public LoadBalancerImpl withBgpPeers(List<String> bgpPeers) {
        this.innerModel().withBgpPeers(bgpPeers);
        return this;
    }
}
