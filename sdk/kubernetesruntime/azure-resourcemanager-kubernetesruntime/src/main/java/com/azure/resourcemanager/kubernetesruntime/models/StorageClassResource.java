// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.StorageClassResourceInner;
import java.util.List;

/**
 * An immutable client-side representation of StorageClassResource.
 */
public interface StorageClassResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the allowVolumeExpansion property: Volume can be expanded or not.
     * 
     * @return the allowVolumeExpansion value.
     */
    VolumeExpansion allowVolumeExpansion();

    /**
     * Gets the mountOptions property: Additional mount options.
     * 
     * @return the mountOptions value.
     */
    List<String> mountOptions();

    /**
     * Gets the provisioner property: Provisioner name.
     * 
     * @return the provisioner value.
     */
    String provisioner();

    /**
     * Gets the volumeBindingMode property: Binding mode of volumes: Immediate, WaitForFirstConsumer.
     * 
     * @return the volumeBindingMode value.
     */
    VolumeBindingMode volumeBindingMode();

    /**
     * Gets the accessModes property: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce].
     * 
     * @return the accessModes value.
     */
    List<AccessMode> accessModes();

    /**
     * Gets the dataResilience property: Allow single data node failure.
     * 
     * @return the dataResilience value.
     */
    DataResilienceTier dataResilience();

    /**
     * Gets the failoverSpeed property: Failover speed: NA, Slow, Fast.
     * 
     * @return the failoverSpeed value.
     */
    FailoverTier failoverSpeed();

    /**
     * Gets the limitations property: Limitations of the storage class.
     * 
     * @return the limitations value.
     */
    List<String> limitations();

    /**
     * Gets the performance property: Performance tier.
     * 
     * @return the performance value.
     */
    PerformanceTier performance();

    /**
     * Gets the priority property: Selection priority when multiple storage classes meet the criteria. 0: Highest, -1:
     * Never use.
     * 
     * @return the priority value.
     */
    Long priority();

    /**
     * Gets the typeProperties property: Properties of the StorageClass.
     * 
     * @return the typeProperties value.
     */
    StorageClassTypeProperties typeProperties();

    /**
     * Gets the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the inner com.azure.resourcemanager.kubernetesruntime.fluent.models.StorageClassResourceInner object.
     * 
     * @return the inner object.
     */
    StorageClassResourceInner innerModel();

    /**
     * The entirety of the StorageClassResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }

    /**
     * The StorageClassResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the StorageClassResource definition.
         */
        interface Blank extends WithScope {
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify parent resource.
         */
        interface WithScope {
            /**
             * Specifies resourceUri.
             * 
             * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceUri(String resourceUri);
        }

        /**
         * The stage of the StorageClassResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithAllowVolumeExpansion, DefinitionStages.WithMountOptions,
            DefinitionStages.WithProvisioner, DefinitionStages.WithVolumeBindingMode, DefinitionStages.WithAccessModes,
            DefinitionStages.WithDataResilience, DefinitionStages.WithFailoverSpeed, DefinitionStages.WithLimitations,
            DefinitionStages.WithPerformance, DefinitionStages.WithPriority, DefinitionStages.WithTypeProperties {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            StorageClassResource create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            StorageClassResource create(Context context);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify allowVolumeExpansion.
         */
        interface WithAllowVolumeExpansion {
            /**
             * Specifies the allowVolumeExpansion property: Volume can be expanded or not.
             * 
             * @param allowVolumeExpansion Volume can be expanded or not.
             * @return the next definition stage.
             */
            WithCreate withAllowVolumeExpansion(VolumeExpansion allowVolumeExpansion);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify mountOptions.
         */
        interface WithMountOptions {
            /**
             * Specifies the mountOptions property: Additional mount options.
             * 
             * @param mountOptions Additional mount options.
             * @return the next definition stage.
             */
            WithCreate withMountOptions(List<String> mountOptions);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify provisioner.
         */
        interface WithProvisioner {
            /**
             * Specifies the provisioner property: Provisioner name.
             * 
             * @param provisioner Provisioner name.
             * @return the next definition stage.
             */
            WithCreate withProvisioner(String provisioner);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify volumeBindingMode.
         */
        interface WithVolumeBindingMode {
            /**
             * Specifies the volumeBindingMode property: Binding mode of volumes: Immediate, WaitForFirstConsumer.
             * 
             * @param volumeBindingMode Binding mode of volumes: Immediate, WaitForFirstConsumer.
             * @return the next definition stage.
             */
            WithCreate withVolumeBindingMode(VolumeBindingMode volumeBindingMode);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify accessModes.
         */
        interface WithAccessModes {
            /**
             * Specifies the accessModes property: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce].
             * 
             * @param accessModes The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce].
             * @return the next definition stage.
             */
            WithCreate withAccessModes(List<AccessMode> accessModes);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify dataResilience.
         */
        interface WithDataResilience {
            /**
             * Specifies the dataResilience property: Allow single data node failure.
             * 
             * @param dataResilience Allow single data node failure.
             * @return the next definition stage.
             */
            WithCreate withDataResilience(DataResilienceTier dataResilience);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify failoverSpeed.
         */
        interface WithFailoverSpeed {
            /**
             * Specifies the failoverSpeed property: Failover speed: NA, Slow, Fast.
             * 
             * @param failoverSpeed Failover speed: NA, Slow, Fast.
             * @return the next definition stage.
             */
            WithCreate withFailoverSpeed(FailoverTier failoverSpeed);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify limitations.
         */
        interface WithLimitations {
            /**
             * Specifies the limitations property: Limitations of the storage class.
             * 
             * @param limitations Limitations of the storage class.
             * @return the next definition stage.
             */
            WithCreate withLimitations(List<String> limitations);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify performance.
         */
        interface WithPerformance {
            /**
             * Specifies the performance property: Performance tier.
             * 
             * @param performance Performance tier.
             * @return the next definition stage.
             */
            WithCreate withPerformance(PerformanceTier performance);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify priority.
         */
        interface WithPriority {
            /**
             * Specifies the priority property: Selection priority when multiple storage classes meet the criteria. 0:
             * Highest, -1: Never use.
             * 
             * @param priority Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never
             * use.
             * @return the next definition stage.
             */
            WithCreate withPriority(Long priority);
        }

        /**
         * The stage of the StorageClassResource definition allowing to specify typeProperties.
         */
        interface WithTypeProperties {
            /**
             * Specifies the typeProperties property: Properties of the StorageClass.
             * 
             * @param typeProperties Properties of the StorageClass.
             * @return the next definition stage.
             */
            WithCreate withTypeProperties(StorageClassTypeProperties typeProperties);
        }
    }

    /**
     * Begins update for the StorageClassResource resource.
     * 
     * @return the stage of resource update.
     */
    StorageClassResource.Update update();

    /**
     * The template for StorageClassResource update.
     */
    interface Update extends UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        StorageClassResource apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        StorageClassResource apply(Context context);
    }

    /**
     * The StorageClassResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the StorageClassResource update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: The properties of StorageClass.
             * 
             * @param properties The properties of StorageClass.
             * @return the next definition stage.
             */
            Update withProperties(StorageClassPropertiesUpdate properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    StorageClassResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    StorageClassResource refresh(Context context);
}
