// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.StorageClassResourceInner;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.ProvisioningState;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassPropertiesUpdate;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassResource;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassResourceUpdate;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import java.util.Collections;
import java.util.List;

public final class StorageClassResourceImpl
    implements StorageClassResource, StorageClassResource.Definition, StorageClassResource.Update {
    private StorageClassResourceInner innerObject;

    private final com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public VolumeExpansion allowVolumeExpansion() {
        return this.innerModel().allowVolumeExpansion();
    }

    public List<String> mountOptions() {
        List<String> inner = this.innerModel().mountOptions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String provisioner() {
        return this.innerModel().provisioner();
    }

    public VolumeBindingMode volumeBindingMode() {
        return this.innerModel().volumeBindingMode();
    }

    public List<AccessMode> accessModes() {
        List<AccessMode> inner = this.innerModel().accessModes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DataResilienceTier dataResilience() {
        return this.innerModel().dataResilience();
    }

    public FailoverTier failoverSpeed() {
        return this.innerModel().failoverSpeed();
    }

    public List<String> limitations() {
        List<String> inner = this.innerModel().limitations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public PerformanceTier performance() {
        return this.innerModel().performance();
    }

    public Long priority() {
        return this.innerModel().priority();
    }

    public StorageClassTypeProperties typeProperties() {
        return this.innerModel().typeProperties();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public StorageClassResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager manager() {
        return this.serviceManager;
    }

    private String resourceUri;

    private String storageClassName;

    private StorageClassResourceUpdate updateProperties;

    public StorageClassResourceImpl withExistingResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    public StorageClassResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getStorageClass()
            .createOrUpdate(resourceUri, storageClassName, this.innerModel(), Context.NONE);
        return this;
    }

    public StorageClassResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getStorageClass()
            .createOrUpdate(resourceUri, storageClassName, this.innerModel(), context);
        return this;
    }

    StorageClassResourceImpl(String name,
        com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager) {
        this.innerObject = new StorageClassResourceInner();
        this.serviceManager = serviceManager;
        this.storageClassName = name;
    }

    public StorageClassResourceImpl update() {
        this.updateProperties = new StorageClassResourceUpdate();
        return this;
    }

    public StorageClassResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getStorageClass()
            .update(resourceUri, storageClassName, updateProperties, Context.NONE);
        return this;
    }

    public StorageClassResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getStorageClass()
            .update(resourceUri, storageClassName, updateProperties, context);
        return this;
    }

    StorageClassResourceImpl(StorageClassResourceInner innerObject,
        com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}", "resourceUri");
        this.storageClassName = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}",
            "storageClassName");
    }

    public StorageClassResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getStorageClass()
            .getWithResponse(resourceUri, storageClassName, Context.NONE)
            .getValue();
        return this;
    }

    public StorageClassResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getStorageClass()
            .getWithResponse(resourceUri, storageClassName, context)
            .getValue();
        return this;
    }

    public StorageClassResourceImpl withAllowVolumeExpansion(VolumeExpansion allowVolumeExpansion) {
        this.innerModel().withAllowVolumeExpansion(allowVolumeExpansion);
        return this;
    }

    public StorageClassResourceImpl withMountOptions(List<String> mountOptions) {
        this.innerModel().withMountOptions(mountOptions);
        return this;
    }

    public StorageClassResourceImpl withProvisioner(String provisioner) {
        this.innerModel().withProvisioner(provisioner);
        return this;
    }

    public StorageClassResourceImpl withVolumeBindingMode(VolumeBindingMode volumeBindingMode) {
        this.innerModel().withVolumeBindingMode(volumeBindingMode);
        return this;
    }

    public StorageClassResourceImpl withAccessModes(List<AccessMode> accessModes) {
        this.innerModel().withAccessModes(accessModes);
        return this;
    }

    public StorageClassResourceImpl withDataResilience(DataResilienceTier dataResilience) {
        this.innerModel().withDataResilience(dataResilience);
        return this;
    }

    public StorageClassResourceImpl withFailoverSpeed(FailoverTier failoverSpeed) {
        this.innerModel().withFailoverSpeed(failoverSpeed);
        return this;
    }

    public StorageClassResourceImpl withLimitations(List<String> limitations) {
        this.innerModel().withLimitations(limitations);
        return this;
    }

    public StorageClassResourceImpl withPerformance(PerformanceTier performance) {
        this.innerModel().withPerformance(performance);
        return this;
    }

    public StorageClassResourceImpl withPriority(Long priority) {
        this.innerModel().withPriority(priority);
        return this;
    }

    public StorageClassResourceImpl withTypeProperties(StorageClassTypeProperties typeProperties) {
        this.innerModel().withTypeProperties(typeProperties);
        return this;
    }

    public StorageClassResourceImpl withProperties(StorageClassPropertiesUpdate properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }
}
