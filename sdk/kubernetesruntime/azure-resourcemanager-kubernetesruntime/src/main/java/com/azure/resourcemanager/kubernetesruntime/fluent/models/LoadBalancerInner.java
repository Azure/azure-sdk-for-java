// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kubernetesruntime.models.AdvertiseMode;
import com.azure.resourcemanager.kubernetesruntime.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * A LoadBalancer resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
 */
@Fluent
public final class LoadBalancerInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private LoadBalancerProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of LoadBalancerInner class.
     */
    public LoadBalancerInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private LoadBalancerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the addresses property: IP Range.
     * 
     * @return the addresses value.
     */
    public List<String> addresses() {
        return this.innerProperties() == null ? null : this.innerProperties().addresses();
    }

    /**
     * Set the addresses property: IP Range.
     * 
     * @param addresses the addresses value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withAddresses(List<String> addresses) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withAddresses(addresses);
        return this;
    }

    /**
     * Get the serviceSelector property: A dynamic label mapping to select related services. For instance, if you want
     * to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     * 
     * @return the serviceSelector value.
     */
    public Map<String, String> serviceSelector() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceSelector();
    }

    /**
     * Set the serviceSelector property: A dynamic label mapping to select related services. For instance, if you want
     * to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     * 
     * @param serviceSelector the serviceSelector value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withServiceSelector(Map<String, String> serviceSelector) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withServiceSelector(serviceSelector);
        return this;
    }

    /**
     * Get the advertiseMode property: Advertise Mode.
     * 
     * @return the advertiseMode value.
     */
    public AdvertiseMode advertiseMode() {
        return this.innerProperties() == null ? null : this.innerProperties().advertiseMode();
    }

    /**
     * Set the advertiseMode property: Advertise Mode.
     * 
     * @param advertiseMode the advertiseMode value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withAdvertiseMode(AdvertiseMode advertiseMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withAdvertiseMode(advertiseMode);
        return this;
    }

    /**
     * Get the bgpPeers property: The list of BGP peers it should advertise to. Null or empty means to advertise to all
     * peers.
     * 
     * @return the bgpPeers value.
     */
    public List<String> bgpPeers() {
        return this.innerProperties() == null ? null : this.innerProperties().bgpPeers();
    }

    /**
     * Set the bgpPeers property: The list of BGP peers it should advertise to. Null or empty means to advertise to all
     * peers.
     * 
     * @param bgpPeers the bgpPeers value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withBgpPeers(List<String> bgpPeers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withBgpPeers(bgpPeers);
        return this;
    }

    /**
     * Get the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoadBalancerInner.
     */
    public static LoadBalancerInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerInner deserializedLoadBalancerInner = new LoadBalancerInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLoadBalancerInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLoadBalancerInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLoadBalancerInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedLoadBalancerInner.innerProperties = LoadBalancerProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedLoadBalancerInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerInner;
        });
    }
}
