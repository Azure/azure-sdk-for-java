// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.LoadBalancerInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of LoadBalancer.
 */
public interface LoadBalancer {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the addresses property: IP Range.
     * 
     * @return the addresses value.
     */
    List<String> addresses();

    /**
     * Gets the serviceSelector property: A dynamic label mapping to select related services. For instance, if you want
     * to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     * 
     * @return the serviceSelector value.
     */
    Map<String, String> serviceSelector();

    /**
     * Gets the advertiseMode property: Advertise Mode.
     * 
     * @return the advertiseMode value.
     */
    AdvertiseMode advertiseMode();

    /**
     * Gets the bgpPeers property: The list of BGP peers it should advertise to. Null or empty means to advertise to all
     * peers.
     * 
     * @return the bgpPeers value.
     */
    List<String> bgpPeers();

    /**
     * Gets the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the inner com.azure.resourcemanager.kubernetesruntime.fluent.models.LoadBalancerInner object.
     * 
     * @return the inner object.
     */
    LoadBalancerInner innerModel();

    /**
     * The entirety of the LoadBalancer definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }

    /**
     * The LoadBalancer definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the LoadBalancer definition.
         */
        interface Blank extends WithScope {
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify parent resource.
         */
        interface WithScope {
            /**
             * Specifies resourceUri.
             * 
             * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceUri(String resourceUri);
        }

        /**
         * The stage of the LoadBalancer definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithAddresses, DefinitionStages.WithServiceSelector,
            DefinitionStages.WithAdvertiseMode, DefinitionStages.WithBgpPeers {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            LoadBalancer create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            LoadBalancer create(Context context);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify addresses.
         */
        interface WithAddresses {
            /**
             * Specifies the addresses property: IP Range.
             * 
             * @param addresses IP Range.
             * @return the next definition stage.
             */
            WithCreate withAddresses(List<String> addresses);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify serviceSelector.
         */
        interface WithServiceSelector {
            /**
             * Specifies the serviceSelector property: A dynamic label mapping to select related services. For instance,
             * if you want to create a load balancer only for services with label "a=b", then please specify {"a": "b"}
             * in the field..
             * 
             * @param serviceSelector A dynamic label mapping to select related services. For instance, if you want to
             * create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
             * @return the next definition stage.
             */
            WithCreate withServiceSelector(Map<String, String> serviceSelector);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify advertiseMode.
         */
        interface WithAdvertiseMode {
            /**
             * Specifies the advertiseMode property: Advertise Mode.
             * 
             * @param advertiseMode Advertise Mode.
             * @return the next definition stage.
             */
            WithCreate withAdvertiseMode(AdvertiseMode advertiseMode);
        }

        /**
         * The stage of the LoadBalancer definition allowing to specify bgpPeers.
         */
        interface WithBgpPeers {
            /**
             * Specifies the bgpPeers property: The list of BGP peers it should advertise to. Null or empty means to
             * advertise to all peers..
             * 
             * @param bgpPeers The list of BGP peers it should advertise to. Null or empty means to advertise to all
             * peers.
             * @return the next definition stage.
             */
            WithCreate withBgpPeers(List<String> bgpPeers);
        }
    }

    /**
     * Begins update for the LoadBalancer resource.
     * 
     * @return the stage of resource update.
     */
    LoadBalancer.Update update();

    /**
     * The template for LoadBalancer update.
     */
    interface Update extends UpdateStages.WithAddresses, UpdateStages.WithServiceSelector,
        UpdateStages.WithAdvertiseMode, UpdateStages.WithBgpPeers {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        LoadBalancer apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        LoadBalancer apply(Context context);
    }

    /**
     * The LoadBalancer update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the LoadBalancer update allowing to specify addresses.
         */
        interface WithAddresses {
            /**
             * Specifies the addresses property: IP Range.
             * 
             * @param addresses IP Range.
             * @return the next definition stage.
             */
            Update withAddresses(List<String> addresses);
        }

        /**
         * The stage of the LoadBalancer update allowing to specify serviceSelector.
         */
        interface WithServiceSelector {
            /**
             * Specifies the serviceSelector property: A dynamic label mapping to select related services. For instance,
             * if you want to create a load balancer only for services with label "a=b", then please specify {"a": "b"}
             * in the field..
             * 
             * @param serviceSelector A dynamic label mapping to select related services. For instance, if you want to
             * create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
             * @return the next definition stage.
             */
            Update withServiceSelector(Map<String, String> serviceSelector);
        }

        /**
         * The stage of the LoadBalancer update allowing to specify advertiseMode.
         */
        interface WithAdvertiseMode {
            /**
             * Specifies the advertiseMode property: Advertise Mode.
             * 
             * @param advertiseMode Advertise Mode.
             * @return the next definition stage.
             */
            Update withAdvertiseMode(AdvertiseMode advertiseMode);
        }

        /**
         * The stage of the LoadBalancer update allowing to specify bgpPeers.
         */
        interface WithBgpPeers {
            /**
             * Specifies the bgpPeers property: The list of BGP peers it should advertise to. Null or empty means to
             * advertise to all peers..
             * 
             * @param bgpPeers The list of BGP peers it should advertise to. Null or empty means to advertise to all
             * peers.
             * @return the next definition stage.
             */
            Update withBgpPeers(List<String> bgpPeers);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    LoadBalancer refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    LoadBalancer refresh(Context context);
}
