// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassResource;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StorageClassGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"allowVolumeExpansion\":\"Allow\",\"mountOptions\":[\"hbttkphyw\"],\"provisioner\":\"vjtoqnermclfp\",\"volumeBindingMode\":\"Immediate\",\"accessModes\":[\"ReadWriteMany\"],\"dataResilience\":\"NotDataResilient\",\"failoverSpeed\":\"Slow\",\"limitations\":[\"gyepsbjt\",\"zq\"],\"performance\":\"Premium\",\"priority\":8623440575477757964,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Succeeded\"},\"id\":\"ef\",\"name\":\"zwfqkqujidsuyon\",\"type\":\"bglaocqxtccm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KubernetesruntimeManager manager = KubernetesruntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        StorageClassResource response
            = manager.storageClass().getWithResponse("eil", "vnotyfjfcnj", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(VolumeExpansion.ALLOW, response.allowVolumeExpansion());
        Assertions.assertEquals("hbttkphyw", response.mountOptions().get(0));
        Assertions.assertEquals("vjtoqnermclfp", response.provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, response.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_MANY, response.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, response.dataResilience());
        Assertions.assertEquals(FailoverTier.SLOW, response.failoverSpeed());
        Assertions.assertEquals("gyepsbjt", response.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.PREMIUM, response.performance());
        Assertions.assertEquals(8623440575477757964L, response.priority());
    }
}
