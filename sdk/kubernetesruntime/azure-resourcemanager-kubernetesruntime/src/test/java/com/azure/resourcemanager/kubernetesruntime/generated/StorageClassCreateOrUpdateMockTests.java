// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassResource;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StorageClassCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"allowVolumeExpansion\":\"Allow\",\"mountOptions\":[\"gkvtmelmqkrhah\"],\"provisioner\":\"juahaquhcdhmdual\",\"volumeBindingMode\":\"WaitForFirstConsumer\",\"accessModes\":[\"ReadWriteOnce\",\"ReadWriteOnce\",\"ReadWriteOnce\"],\"dataResilience\":\"DataResilient\",\"failoverSpeed\":\"NotAvailable\",\"limitations\":[\"r\",\"vxpvgomz\",\"fmisg\"],\"performance\":\"Ultra\",\"priority\":8548280684988543550,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Succeeded\"},\"id\":\"wkz\",\"name\":\"ali\",\"type\":\"urqhaka\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KubernetesruntimeManager manager = KubernetesruntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        StorageClassResource response = manager.storageClass()
            .define("xv")
            .withExistingResourceUri("yudxytlmoy")
            .withAllowVolumeExpansion(VolumeExpansion.ALLOW)
            .withMountOptions(Arrays.asList("zntxhdz"))
            .withProvisioner("rqjbhckfrl")
            .withVolumeBindingMode(VolumeBindingMode.WAIT_FOR_FIRST_CONSUMER)
            .withAccessModes(Arrays.asList(AccessMode.READ_WRITE_ONCE, AccessMode.READ_WRITE_MANY))
            .withDataResilience(DataResilienceTier.DATA_RESILIENT)
            .withFailoverSpeed(FailoverTier.NOT_AVAILABLE)
            .withLimitations(Arrays.asList("uzbpzkafku"))
            .withPerformance(PerformanceTier.STANDARD)
            .withPriority(6504833090063292182L)
            .withTypeProperties(new StorageClassTypeProperties())
            .create();

        Assertions.assertEquals(VolumeExpansion.ALLOW, response.allowVolumeExpansion());
        Assertions.assertEquals("gkvtmelmqkrhah", response.mountOptions().get(0));
        Assertions.assertEquals("juahaquhcdhmdual", response.provisioner());
        Assertions.assertEquals(VolumeBindingMode.WAIT_FOR_FIRST_CONSUMER, response.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, response.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.DATA_RESILIENT, response.dataResilience());
        Assertions.assertEquals(FailoverTier.NOT_AVAILABLE, response.failoverSpeed());
        Assertions.assertEquals("r", response.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.ULTRA, response.performance());
        Assertions.assertEquals(8548280684988543550L, response.priority());
    }
}
