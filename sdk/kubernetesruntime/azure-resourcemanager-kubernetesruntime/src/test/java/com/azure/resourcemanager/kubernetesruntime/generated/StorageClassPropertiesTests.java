// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.StorageClassProperties;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageClassPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageClassProperties model = BinaryData.fromString(
            "{\"allowVolumeExpansion\":\"Disallow\",\"mountOptions\":[\"hhbcsglummajtjao\",\"xobnbdxkqpxok\"],\"provisioner\":\"ionpimexg\",\"volumeBindingMode\":\"Immediate\",\"accessModes\":[\"ReadWriteOnce\"],\"dataResilience\":\"NotDataResilient\",\"failoverSpeed\":\"Super\",\"limitations\":[\"jrmvdjwzrlo\",\"mcl\",\"hijco\",\"jctbza\"],\"performance\":\"Undefined\",\"priority\":729151913745579744,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Deleting\"}")
            .toObject(StorageClassProperties.class);
        Assertions.assertEquals(VolumeExpansion.DISALLOW, model.allowVolumeExpansion());
        Assertions.assertEquals("hhbcsglummajtjao", model.mountOptions().get(0));
        Assertions.assertEquals("ionpimexg", model.provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, model.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, model.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.dataResilience());
        Assertions.assertEquals(FailoverTier.SUPER, model.failoverSpeed());
        Assertions.assertEquals("jrmvdjwzrlo", model.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.UNDEFINED, model.performance());
        Assertions.assertEquals(729151913745579744L, model.priority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageClassProperties model = new StorageClassProperties().withAllowVolumeExpansion(VolumeExpansion.DISALLOW)
            .withMountOptions(Arrays.asList("hhbcsglummajtjao", "xobnbdxkqpxok"))
            .withProvisioner("ionpimexg")
            .withVolumeBindingMode(VolumeBindingMode.IMMEDIATE)
            .withAccessModes(Arrays.asList(AccessMode.READ_WRITE_ONCE))
            .withDataResilience(DataResilienceTier.NOT_DATA_RESILIENT)
            .withFailoverSpeed(FailoverTier.SUPER)
            .withLimitations(Arrays.asList("jrmvdjwzrlo", "mcl", "hijco", "jctbza"))
            .withPerformance(PerformanceTier.UNDEFINED)
            .withPriority(729151913745579744L)
            .withTypeProperties(new StorageClassTypeProperties());
        model = BinaryData.fromObject(model).toObject(StorageClassProperties.class);
        Assertions.assertEquals(VolumeExpansion.DISALLOW, model.allowVolumeExpansion());
        Assertions.assertEquals("hhbcsglummajtjao", model.mountOptions().get(0));
        Assertions.assertEquals("ionpimexg", model.provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, model.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_ONCE, model.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.dataResilience());
        Assertions.assertEquals(FailoverTier.SUPER, model.failoverSpeed());
        Assertions.assertEquals("jrmvdjwzrlo", model.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.UNDEFINED, model.performance());
        Assertions.assertEquals(729151913745579744L, model.priority());
    }
}
