// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager;
import com.azure.resourcemanager.kubernetesruntime.models.BgpPeer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BgpPeersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"myAsn\":666664165,\"peerAsn\":1193107670,\"peerAddress\":\"i\",\"provisioningState\":\"Succeeded\"},\"id\":\"qyud\",\"name\":\"o\",\"type\":\"rq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KubernetesruntimeManager manager = KubernetesruntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BgpPeer response = manager.bgpPeers()
            .define("odsfcpkvxodpuozm")
            .withExistingResourceUri("pjmcmatuokthfuiu")
            .withMyAsn(466984415)
            .withPeerAsn(1714527436)
            .withPeerAddress("agfuaxbezyiu")
            .create();

        Assertions.assertEquals(666664165, response.myAsn());
        Assertions.assertEquals(1193107670, response.peerAsn());
        Assertions.assertEquals("i", response.peerAddress());
    }
}
