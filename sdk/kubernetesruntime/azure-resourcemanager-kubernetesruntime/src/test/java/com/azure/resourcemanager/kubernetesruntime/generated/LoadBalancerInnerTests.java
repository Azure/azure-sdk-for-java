// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.LoadBalancerInner;
import com.azure.resourcemanager.kubernetesruntime.models.AdvertiseMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancerInner model = BinaryData.fromString(
            "{\"properties\":{\"addresses\":[\"uwfzitonpe\",\"fpjkjlxofp\",\"vhpfxxypininmay\",\"uybbkpodep\"],\"serviceSelector\":{\"rxzxtheo\":\"inuvamiheogn\",\"cciqihnhungbwjz\":\"usivye\",\"kufubljo\":\"nfygxgispemvtz\"},\"advertiseMode\":\"ARP\",\"bgpPeers\":[\"ofjaeqjhqjb\",\"s\",\"msmjqulngsntn\"],\"provisioningState\":\"Updating\"},\"id\":\"zgcwrw\",\"name\":\"lxxwrljdouskc\",\"type\":\"vkocrcjdkwtn\"}")
            .toObject(LoadBalancerInner.class);
        Assertions.assertEquals("uwfzitonpe", model.addresses().get(0));
        Assertions.assertEquals("inuvamiheogn", model.serviceSelector().get("rxzxtheo"));
        Assertions.assertEquals(AdvertiseMode.ARP, model.advertiseMode());
        Assertions.assertEquals("ofjaeqjhqjb", model.bgpPeers().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancerInner model = new LoadBalancerInner()
            .withAddresses(Arrays.asList("uwfzitonpe", "fpjkjlxofp", "vhpfxxypininmay", "uybbkpodep"))
            .withServiceSelector(
                mapOf("rxzxtheo", "inuvamiheogn", "cciqihnhungbwjz", "usivye", "kufubljo", "nfygxgispemvtz"))
            .withAdvertiseMode(AdvertiseMode.ARP)
            .withBgpPeers(Arrays.asList("ofjaeqjhqjb", "s", "msmjqulngsntn"));
        model = BinaryData.fromObject(model).toObject(LoadBalancerInner.class);
        Assertions.assertEquals("uwfzitonpe", model.addresses().get(0));
        Assertions.assertEquals("inuvamiheogn", model.serviceSelector().get("rxzxtheo"));
        Assertions.assertEquals(AdvertiseMode.ARP, model.advertiseMode());
        Assertions.assertEquals("ofjaeqjhqjb", model.bgpPeers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
