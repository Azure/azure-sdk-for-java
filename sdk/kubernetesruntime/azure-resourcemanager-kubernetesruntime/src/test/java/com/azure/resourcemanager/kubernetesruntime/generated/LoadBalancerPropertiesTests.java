// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.LoadBalancerProperties;
import com.azure.resourcemanager.kubernetesruntime.models.AdvertiseMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancerProperties model = BinaryData.fromString(
            "{\"addresses\":[\"bnjbiksqrglssain\",\"p\",\"wnzlljfmppeeb\"],\"serviceSelector\":{\"jitcjczdzevn\":\"xsabkyqdu\",\"pdappds\":\"hkr\"},\"advertiseMode\":\"ARP\",\"bgpPeers\":[\"wrwjfeu\",\"nhutjeltmrldhugj\"],\"provisioningState\":\"Canceled\"}")
            .toObject(LoadBalancerProperties.class);
        Assertions.assertEquals("bnjbiksqrglssain", model.addresses().get(0));
        Assertions.assertEquals("xsabkyqdu", model.serviceSelector().get("jitcjczdzevn"));
        Assertions.assertEquals(AdvertiseMode.ARP, model.advertiseMode());
        Assertions.assertEquals("wrwjfeu", model.bgpPeers().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancerProperties model
            = new LoadBalancerProperties().withAddresses(Arrays.asList("bnjbiksqrglssain", "p", "wnzlljfmppeeb"))
                .withServiceSelector(mapOf("jitcjczdzevn", "xsabkyqdu", "pdappds", "hkr"))
                .withAdvertiseMode(AdvertiseMode.ARP)
                .withBgpPeers(Arrays.asList("wrwjfeu", "nhutjeltmrldhugj"));
        model = BinaryData.fromObject(model).toObject(LoadBalancerProperties.class);
        Assertions.assertEquals("bnjbiksqrglssain", model.addresses().get(0));
        Assertions.assertEquals("xsabkyqdu", model.serviceSelector().get("jitcjczdzevn"));
        Assertions.assertEquals(AdvertiseMode.ARP, model.advertiseMode());
        Assertions.assertEquals("wrwjfeu", model.bgpPeers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
