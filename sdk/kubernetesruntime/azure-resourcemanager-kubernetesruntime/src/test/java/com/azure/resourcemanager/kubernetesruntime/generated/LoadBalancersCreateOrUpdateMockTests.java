// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager;
import com.azure.resourcemanager.kubernetesruntime.models.AdvertiseMode;
import com.azure.resourcemanager.kubernetesruntime.models.LoadBalancer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LoadBalancersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"addresses\":[\"rfuwutt\",\"xfvjrbirp\",\"xepcyvahfn\"],\"serviceSelector\":{\"j\":\"yq\",\"gvcl\":\"uujqgidokgjljyo\",\"jhtxfvgxbfsmxne\":\"bgsncghkjeszzhb\",\"rbmpukgri\":\"mpvecxgodebfqk\"},\"advertiseMode\":\"Both\",\"bgpPeers\":[\"lfbxzpuzycisp\",\"qzahmgkbrp\",\"y\",\"hibnuqqkpika\"],\"provisioningState\":\"Succeeded\"},\"id\":\"tqagnbuynh\",\"name\":\"jggmebfsiarbu\",\"type\":\"rcvpnazzmhjrunmp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KubernetesruntimeManager manager = KubernetesruntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LoadBalancer response = manager.loadBalancers()
            .define("kix")
            .withExistingResourceUri("wkgshwa")
            .withAddresses(Arrays.asList("njeputtmrywn", "zoqftiyqzrnkcqvy"))
            .withServiceSelector(mapOf("cohoq", "hzls", "hgyxzkonoc", "nwvlryavwhheunmm", "uconuqszfkbey", "koklya"))
            .withAdvertiseMode(AdvertiseMode.ARP)
            .withBgpPeers(Arrays.asList("mjmwvvjektcx", "enhwlrs", "frzpwvlqdqgb"))
            .create();

        Assertions.assertEquals("rfuwutt", response.addresses().get(0));
        Assertions.assertEquals("yq", response.serviceSelector().get("j"));
        Assertions.assertEquals(AdvertiseMode.BOTH, response.advertiseMode());
        Assertions.assertEquals("lfbxzpuzycisp", response.bgpPeers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
