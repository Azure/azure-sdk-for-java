// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.StorageClassResourceInner;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageClassResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageClassResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"allowVolumeExpansion\":\"Disallow\",\"mountOptions\":[\"cjxvsnbyxqab\",\"mocpc\",\"shurzafbljjgpbto\",\"c\"],\"provisioner\":\"klj\",\"volumeBindingMode\":\"Immediate\",\"accessModes\":[\"ReadWriteMany\",\"ReadWriteMany\",\"ReadWriteMany\"],\"dataResilience\":\"NotDataResilient\",\"failoverSpeed\":\"Fast\",\"limitations\":[\"pku\"],\"performance\":\"Ultra\",\"priority\":5090033425355731207,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Deleting\"},\"id\":\"hfepgzgqex\",\"name\":\"locx\",\"type\":\"c\"}")
            .toObject(StorageClassResourceInner.class);
        Assertions.assertEquals(VolumeExpansion.DISALLOW, model.allowVolumeExpansion());
        Assertions.assertEquals("cjxvsnbyxqab", model.mountOptions().get(0));
        Assertions.assertEquals("klj", model.provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, model.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_MANY, model.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.dataResilience());
        Assertions.assertEquals(FailoverTier.FAST, model.failoverSpeed());
        Assertions.assertEquals("pku", model.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.ULTRA, model.performance());
        Assertions.assertEquals(5090033425355731207L, model.priority());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageClassResourceInner model
            = new StorageClassResourceInner().withAllowVolumeExpansion(VolumeExpansion.DISALLOW)
                .withMountOptions(Arrays.asList("cjxvsnbyxqab", "mocpc", "shurzafbljjgpbto", "c"))
                .withProvisioner("klj")
                .withVolumeBindingMode(VolumeBindingMode.IMMEDIATE)
                .withAccessModes(
                    Arrays.asList(AccessMode.READ_WRITE_MANY, AccessMode.READ_WRITE_MANY, AccessMode.READ_WRITE_MANY))
                .withDataResilience(DataResilienceTier.NOT_DATA_RESILIENT)
                .withFailoverSpeed(FailoverTier.FAST)
                .withLimitations(Arrays.asList("pku"))
                .withPerformance(PerformanceTier.ULTRA)
                .withPriority(5090033425355731207L)
                .withTypeProperties(new StorageClassTypeProperties());
        model = BinaryData.fromObject(model).toObject(StorageClassResourceInner.class);
        Assertions.assertEquals(VolumeExpansion.DISALLOW, model.allowVolumeExpansion());
        Assertions.assertEquals("cjxvsnbyxqab", model.mountOptions().get(0));
        Assertions.assertEquals("klj", model.provisioner());
        Assertions.assertEquals(VolumeBindingMode.IMMEDIATE, model.volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_MANY, model.accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, model.dataResilience());
        Assertions.assertEquals(FailoverTier.FAST, model.failoverSpeed());
        Assertions.assertEquals("pku", model.limitations().get(0));
        Assertions.assertEquals(PerformanceTier.ULTRA, model.performance());
        Assertions.assertEquals(5090033425355731207L, model.priority());
    }
}
