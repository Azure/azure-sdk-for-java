// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kubernetesruntime.KubernetesruntimeManager;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassResource;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StorageClassListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"allowVolumeExpansion\":\"Disallow\",\"mountOptions\":[\"ss\",\"qukkfp\",\"gmgsxnkjzkde\"],\"provisioner\":\"pvlopwiyighxpkd\",\"volumeBindingMode\":\"WaitForFirstConsumer\",\"accessModes\":[\"ReadWriteMany\",\"ReadWriteOnce\",\"ReadWriteMany\"],\"dataResilience\":\"NotDataResilient\",\"failoverSpeed\":\"NotAvailable\",\"limitations\":[\"qupedeojnab\",\"khsmtxpsiebt\",\"hvpesapskrdqm\",\"jjdhtld\"],\"performance\":\"Basic\",\"priority\":5303445195272830471,\"typeProperties\":{\"type\":\"StorageClassTypeProperties\"},\"provisioningState\":\"Accepted\"},\"id\":\"ncwscwsvlxoto\",\"name\":\"twrupqsxvnm\",\"type\":\"cykvceo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KubernetesruntimeManager manager = KubernetesruntimeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<StorageClassResource> response
            = manager.storageClass().list("gu", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(VolumeExpansion.DISALLOW, response.iterator().next().allowVolumeExpansion());
        Assertions.assertEquals("ss", response.iterator().next().mountOptions().get(0));
        Assertions.assertEquals("pvlopwiyighxpkd", response.iterator().next().provisioner());
        Assertions.assertEquals(VolumeBindingMode.WAIT_FOR_FIRST_CONSUMER,
            response.iterator().next().volumeBindingMode());
        Assertions.assertEquals(AccessMode.READ_WRITE_MANY, response.iterator().next().accessModes().get(0));
        Assertions.assertEquals(DataResilienceTier.NOT_DATA_RESILIENT, response.iterator().next().dataResilience());
        Assertions.assertEquals(FailoverTier.NOT_AVAILABLE, response.iterator().next().failoverSpeed());
        Assertions.assertEquals("qupedeojnab", response.iterator().next().limitations().get(0));
        Assertions.assertEquals(PerformanceTier.BASIC, response.iterator().next().performance());
        Assertions.assertEquals(5303445195272830471L, response.iterator().next().priority());
    }
}
