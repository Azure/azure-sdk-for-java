// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kubernetesruntime.fluent.models.LoadBalancerInner;
import com.azure.resourcemanager.kubernetesruntime.models.AdvertiseMode;
import com.azure.resourcemanager.kubernetesruntime.models.LoadBalancerListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancerListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancerListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"addresses\":[\"fdkfogk\"],\"serviceSelector\":{\"eqsrdeupewnwreit\":\"jofjd\",\"usarhmofc\":\"zyf\"},\"advertiseMode\":\"BGP\",\"bgpPeers\":[\"yurkdtmlxhekuksj\"],\"provisioningState\":\"Succeeded\"},\"id\":\"cdm\",\"name\":\"arcryuanzwuxzdxt\",\"type\":\"yrlhmwhfpmrqobm\"},{\"properties\":{\"addresses\":[\"knryrtihfxtij\",\"pzvgnwzsymglzufc\",\"zk\"],\"serviceSelector\":{\"fcbjysagithxqha\":\"bihanuf\",\"cnpqxuhivyqniwby\":\"ifpikxwczby\",\"grtfwvu\":\"rkxvdum\",\"h\":\"xgaudccs\"},\"advertiseMode\":\"Both\",\"bgpPeers\":[\"yejhk\",\"yhtnapczwlokjye\",\"kkvnipjox\",\"jnchgej\"],\"provisioningState\":\"Accepted\"},\"id\":\"mailzydehojw\",\"name\":\"ahuxinpm\",\"type\":\"njaqwixjspro\"},{\"properties\":{\"addresses\":[\"putegjvwmfd\",\"t\",\"cmdv\",\"jhulsuuvmkjo\"],\"serviceSelector\":{\"ej\":\"wfndiodjpsl\",\"azakl\":\"pvwryoqpsoacc\"},\"advertiseMode\":\"ARP\",\"bgpPeers\":[\"bcryffdfd\",\"sy\",\"expa\",\"jakhmsbzjh\"],\"provisioningState\":\"Canceled\"},\"id\":\"vdphlxaolthqtr\",\"name\":\"qjbpfzfsin\",\"type\":\"gvfcj\"}],\"nextLink\":\"zoxxjtf\"}")
            .toObject(LoadBalancerListResult.class);
        Assertions.assertEquals("fdkfogk", model.value().get(0).addresses().get(0));
        Assertions.assertEquals("jofjd", model.value().get(0).serviceSelector().get("eqsrdeupewnwreit"));
        Assertions.assertEquals(AdvertiseMode.BGP, model.value().get(0).advertiseMode());
        Assertions.assertEquals("yurkdtmlxhekuksj", model.value().get(0).bgpPeers().get(0));
        Assertions.assertEquals("zoxxjtf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancerListResult model = new LoadBalancerListResult().withValue(Arrays.asList(
            new LoadBalancerInner().withAddresses(Arrays.asList("fdkfogk"))
                .withServiceSelector(mapOf("eqsrdeupewnwreit", "jofjd", "usarhmofc", "zyf"))
                .withAdvertiseMode(AdvertiseMode.BGP)
                .withBgpPeers(Arrays.asList("yurkdtmlxhekuksj")),
            new LoadBalancerInner().withAddresses(Arrays.asList("knryrtihfxtij", "pzvgnwzsymglzufc", "zk"))
                .withServiceSelector(mapOf("fcbjysagithxqha", "bihanuf", "cnpqxuhivyqniwby", "ifpikxwczby", "grtfwvu",
                    "rkxvdum", "h", "xgaudccs"))
                .withAdvertiseMode(AdvertiseMode.BOTH)
                .withBgpPeers(Arrays.asList("yejhk", "yhtnapczwlokjye", "kkvnipjox", "jnchgej")),
            new LoadBalancerInner().withAddresses(Arrays.asList("putegjvwmfd", "t", "cmdv", "jhulsuuvmkjo"))
                .withServiceSelector(mapOf("ej", "wfndiodjpsl", "azakl", "pvwryoqpsoacc"))
                .withAdvertiseMode(AdvertiseMode.ARP)
                .withBgpPeers(Arrays.asList("bcryffdfd", "sy", "expa", "jakhmsbzjh"))))
            .withNextLink("zoxxjtf");
        model = BinaryData.fromObject(model).toObject(LoadBalancerListResult.class);
        Assertions.assertEquals("fdkfogk", model.value().get(0).addresses().get(0));
        Assertions.assertEquals("jofjd", model.value().get(0).serviceSelector().get("eqsrdeupewnwreit"));
        Assertions.assertEquals(AdvertiseMode.BGP, model.value().get(0).advertiseMode());
        Assertions.assertEquals("yurkdtmlxhekuksj", model.value().get(0).bgpPeers().get(0));
        Assertions.assertEquals("zoxxjtf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
