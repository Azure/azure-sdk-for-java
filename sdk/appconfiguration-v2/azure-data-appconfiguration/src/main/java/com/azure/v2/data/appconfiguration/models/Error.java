// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Azure App Configuration error object.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class Error implements JsonSerializable<Error> {
    /*
     * The type of the error.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String type;

    /*
     * A brief summary of the error.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String title;

    /*
     * The name of the parameter that resulted in the error.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String name;

    /*
     * A detailed description of the error.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String detail;

    /*
     * The HTTP status code that the error maps to.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Integer status;

    /**
     * Creates an instance of Error class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Error() {
    }

    /**
     * Get the type property: The type of the error.
     * 
     * @return the type value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getType() {
        return this.type;
    }

    /**
     * Get the title property: A brief summary of the error.
     * 
     * @return the title value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getTitle() {
        return this.title;
    }

    /**
     * Get the name property: The name of the parameter that resulted in the error.
     * 
     * @return the name value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getName() {
        return this.name;
    }

    /**
     * Get the detail property: A detailed description of the error.
     * 
     * @return the detail value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getDetail() {
        return this.detail;
    }

    /**
     * Get the status property: The HTTP status code that the error maps to.
     * 
     * @return the status value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Integer getStatus() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("detail", this.detail);
        jsonWriter.writeNumberField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Error from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Error if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Error.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static Error fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Error deserializedError = new Error();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedError.type = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedError.title = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedError.name = reader.getString();
                } else if ("detail".equals(fieldName)) {
                    deserializedError.detail = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedError.status = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedError;
        });
    }
}
