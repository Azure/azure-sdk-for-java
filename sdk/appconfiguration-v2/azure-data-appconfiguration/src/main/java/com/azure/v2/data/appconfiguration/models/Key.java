// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Keys serve as identifiers for key-values and are used to store and retrieve corresponding values.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
class Key implements JsonSerializable<Key> {
    /*
     * The name of the key.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String name;

    /**
     * Creates an instance of Key class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Key() {
    }

    /**
     * Get the name property: The name of the key.
     *
     * @return the name value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Key from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Key if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Key.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static Key fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Key deserializedKey = new Key();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedKey.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKey;
        });
    }
}
