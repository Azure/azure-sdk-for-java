// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.implementation;

import com.azure.v2.data.appconfiguration.ConfigurationServiceVersion;
import com.azure.v2.data.appconfiguration.implementation.models.KeyListResult;
import com.azure.v2.data.appconfiguration.implementation.models.KeyValueListResult;
import com.azure.v2.data.appconfiguration.implementation.models.LabelListResult;
import com.azure.v2.data.appconfiguration.implementation.models.SnapshotListResult;
import com.azure.v2.data.appconfiguration.implementation.models.SnapshotUpdateParameters;
import com.azure.v2.data.appconfiguration.models.ConfigurationSnapshot;
import com.azure.v2.data.appconfiguration.models.ConfigurationSnapshotStatus;
import com.azure.v2.data.appconfiguration.models.Error;
import com.azure.v2.data.appconfiguration.implementation.models.Key;
import com.azure.v2.data.appconfiguration.implementation.models.KeyValue;
import com.azure.v2.data.appconfiguration.models.OperationDetails;
import com.azure.v2.data.appconfiguration.models.SettingFields;
import com.azure.v2.data.appconfiguration.models.SettingLabel;
import com.azure.v2.data.appconfiguration.models.SettingLabelFields;
import com.azure.v2.data.appconfiguration.models.SnapshotFields;
import com.azure.v2.data.appconfiguration.models.UpdateSnapshotRequestContentType;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.HttpResponseException;
import io.clientcore.core.http.models.RequestContext;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.paging.PagedIterable;
import io.clientcore.core.http.paging.PagedResponse;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.CoreException;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the AzureAppConfigurationClient type.
 */
public final class AzureAppConfigurationClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureAppConfigurationClientService service;

    /**
     */
    private final String endpoint;

    /**
     * Gets.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final ConfigurationServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public ConfigurationServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of AzureAppConfigurationClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public AzureAppConfigurationClientImpl(HttpPipeline httpPipeline, String endpoint,
        ConfigurationServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = AzureAppConfigurationClientService.getNewInstance(this.httpPipeline);
    }

    /**
     * The interface defining all the services for AzureAppConfigurationClient to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "AzureAppConfiguratio", host = "{endpoint}")
    public interface AzureAppConfigurationClientService {
        static AzureAppConfigurationClientService getNewInstance(HttpPipeline pipeline) {
            try {
                Class<?> clazz = Class.forName(
                    "com.azure.v2.data.appconfiguration.implementation.AzureAppConfigurationClientServiceImpl");
                return (AzureAppConfigurationClientService) clazz.getMethod("getNewInstance", HttpPipeline.class)
                    .invoke(null, pipeline);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyListResult> getKeys(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("name") String name,
            @QueryParam("After") String after, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("Accept") String accept,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkKeys(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @QueryParam("name") String name, @QueryParam("After") String after,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getKeyValues(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select, @QueryParam("snapshot") String snapshot,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkKeyValues(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select, @QueryParam("snapshot") String snapshot,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> getKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @QueryParam("label") String label, @QueryParam("$Select") String select,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> putKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") KeyValue entity,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/kv/{key}", expectedStatusCodes = { 200, 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> deleteKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("Accept") String accept,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @QueryParam("$Select") String select,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<SnapshotListResult> getSnapshots(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("name") String name,
            @QueryParam("After") String after, @QueryParam("$Select") String select,
            @QueryParam("status") String status, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkSnapshots(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("After") String after, @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<ConfigurationSnapshot> getSnapshot(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @QueryParam("$Select") String select, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<ConfigurationSnapshot> updateSnapshot(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") UpdateSnapshotRequestContentType contentType, @PathParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SnapshotUpdateParameters entity, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkSnapshot(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<LabelListResult> getLabels(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @QueryParam("$Select") String select,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkLabels(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @QueryParam("name") String name, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select, @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> putLock(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> deleteLock(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getRevisions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkRevisions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("key") String key,
            @QueryParam("label") String label, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/operations", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<OperationDetails> getOperationDetails(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("snapshot") String snapshot,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyListResult> getKeysNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("Accept") String accept,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getKeyValuesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @HeaderParam("Accept") String accept,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<SnapshotListResult> getSnapshotsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<LabelListResult> getLabelsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("Accept") String accept,
            RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getRevisionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Sync-Token") String syncToken,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("Accept") String accept,
            RequestContext requestContext);
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<Key> getKeysSinglePage(String accept, String name, String after, String syncToken,
        String acceptDatetime) {
        Response<KeyListResult> res = service.getKeys(this.getEndpoint(), this.getServiceVersion().getVersion(), name,
            after, syncToken, acceptDatetime, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<Key> getKeysSinglePage(String accept, String name, String after, String syncToken,
        String acceptDatetime, RequestContext requestContext) {
        Response<KeyListResult> res = service.getKeys(this.getEndpoint(), this.getServiceVersion().getVersion(), name,
            after, syncToken, acceptDatetime, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String accept, String name, String after, String syncToken,
        String acceptDatetime) {
        return new PagedIterable<>((pagingOptions) -> getKeysSinglePage(accept, name, after, syncToken, acceptDatetime),
            (pagingOptions, nextLink) -> getKeysNextSinglePage(nextLink, accept, syncToken, acceptDatetime));
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String accept) {
        final String name = null;
        final String after = null;
        final String syncToken = null;
        final String acceptDatetime = null;
        return new PagedIterable<>((pagingOptions) -> getKeysSinglePage(accept, name, after, syncToken, acceptDatetime),
            (pagingOptions, nextLink) -> getKeysNextSinglePage(nextLink, accept, syncToken, acceptDatetime));
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String accept, String name, String after, String syncToken, String acceptDatetime,
        RequestContext requestContext) {

        return new PagedIterable<>(
            (pagingOptions) -> getKeysSinglePage(accept, name, after, syncToken, acceptDatetime, requestContext),
            (pagingOptions, nextLink) -> getKeysNextSinglePage(nextLink, accept, syncToken, acceptDatetime,
                requestContext));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkKeysWithResponse(String name, String after, String syncToken, String acceptDatetime,
        RequestContext requestContext) {
        final String accept = "application/json";
        return service.checkKeys(this.getEndpoint(), this.getServiceVersion().getVersion(), name, after, syncToken,
            acceptDatetime, accept, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeys(String name, String after, String syncToken, String acceptDatetime) {
        checkKeysWithResponse(name, after, syncToken, acceptDatetime, RequestContext.none());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeys() {
        final String name = null;
        final String after = null;
        final String syncToken = null;
        final String acceptDatetime = null;
        checkKeysWithResponse(name, after, syncToken, acceptDatetime, RequestContext.none());
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getKeyValuesSinglePage(String accept, String key, String label, String syncToken,
        String after, String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch,
        String ifNoneMatch, List<String> tags) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res = service.getKeyValues(this.getEndpoint(),
            this.getServiceVersion().getVersion(), key, label, syncToken, after, acceptDatetime, selectConverted,
            snapshot, ifMatch, ifNoneMatch, tagsConverted, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getKeyValuesSinglePage(String accept, String key, String label, String syncToken,
        String after, String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch,
        String ifNoneMatch, List<String> tags, RequestContext requestContext) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res = service.getKeyValues(this.getEndpoint(),
            this.getServiceVersion().getVersion(), key, label, syncToken, after, acceptDatetime, selectConverted,
            snapshot, ifMatch, ifNoneMatch, tagsConverted, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch,
        List<String> tags) {
        return new PagedIterable<>(
            (pagingOptions) -> getKeyValuesSinglePage(accept, key, label, syncToken, after, acceptDatetime, select,
                snapshot, ifMatch, ifNoneMatch, tags),
            (pagingOptions, nextLink) -> getKeyValuesNextSinglePage(nextLink, accept, syncToken, acceptDatetime,
                ifMatch, ifNoneMatch));
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String accept) {
        final String key = null;
        final String label = null;
        final String syncToken = null;
        final String after = null;
        final String acceptDatetime = null;
        final List<SettingFields> select = null;
        final String snapshot = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final List<String> tags = null;
        return new PagedIterable<>(
            (pagingOptions) -> getKeyValuesSinglePage(accept, key, label, syncToken, after, acceptDatetime, select,
                snapshot, ifMatch, ifNoneMatch, tags),
            (pagingOptions, nextLink) -> getKeyValuesNextSinglePage(nextLink, accept, syncToken, acceptDatetime,
                ifMatch, ifNoneMatch));
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch,
        List<String> tags, RequestContext requestContext) {

        return new PagedIterable<>(
            (pagingOptions) -> getKeyValuesSinglePage(accept, key, label, syncToken, after, acceptDatetime, select,
                snapshot, ifMatch, ifNoneMatch, tags, requestContext),
            (pagingOptions, nextLink) -> getKeyValuesNextSinglePage(nextLink, accept, syncToken, acceptDatetime,
                ifMatch, ifNoneMatch, requestContext));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkKeyValuesWithResponse(String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch,
        List<String> tags, RequestContext requestContext) {
        final String accept = "application/json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.checkKeyValues(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
            after, acceptDatetime, selectConverted, snapshot, ifMatch, ifNoneMatch, tagsConverted, accept,
            requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValues(String key, String label, String syncToken, String after, String acceptDatetime,
        List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags) {
        checkKeyValuesWithResponse(key, label, syncToken, after, acceptDatetime, select, snapshot, ifMatch, ifNoneMatch,
            tags, RequestContext.none());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValues() {
        final String key = null;
        final String label = null;
        final String syncToken = null;
        final String after = null;
        final String acceptDatetime = null;
        final List<SettingFields> select = null;
        final String snapshot = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final List<String> tags = null;
        checkKeyValuesWithResponse(key, label, syncToken, after, acceptDatetime, select, snapshot, ifMatch, ifNoneMatch,
            tags, RequestContext.none());
    }

    /**
     * Gets a single key-value.
     *
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @param label The label of the key-value to retrieve.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> getKeyValueWithResponse(String key, String accept, String label,
        List<SettingFields> select, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch,
        RequestContext requestContext) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.getKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label,
            selectConverted, syncToken, acceptDatetime, ifMatch, ifNoneMatch, accept, requestContext);
    }

    /**
     * Gets a single key-value.
     *
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @param label The label of the key-value to retrieve.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue getKeyValue(String key, String accept, String label, List<SettingFields> select, String syncToken,
        String acceptDatetime, String ifMatch, String ifNoneMatch) {
        return getKeyValueWithResponse(key, accept, label, select, syncToken, acceptDatetime, ifMatch, ifNoneMatch,
            RequestContext.none()).getValue();
    }

    /**
     * Gets a single key-value.
     *
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue getKeyValue(String key, String accept) {
        final String label = null;
        final List<SettingFields> select = null;
        final String syncToken = null;
        final String acceptDatetime = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return getKeyValueWithResponse(key, accept, label, select, syncToken, acceptDatetime, ifMatch, ifNoneMatch,
            RequestContext.none()).getValue();
    }

    /**
     * Creates a key-value.
     *
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @param label The label of the key-value to create.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param entity The key-value to create.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> putKeyValueWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, String ifNoneMatch, KeyValue entity, RequestContext requestContext) {
        return service.putKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
            ifMatch, ifNoneMatch, accept, entity, requestContext);
    }

    /**
     * Creates a key-value.
     *
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @param label The label of the key-value to create.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param entity The key-value to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putKeyValue(String key, String accept, String label, String syncToken, String ifMatch,
        String ifNoneMatch, KeyValue entity) {
        return putKeyValueWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch, entity,
            RequestContext.none()).getValue();
    }

    /**
     * Creates a key-value.
     *
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putKeyValue(String key, String accept) {
        final String label = null;
        final String syncToken = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final KeyValue entity = null;
        return putKeyValueWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch, entity,
            RequestContext.none()).getValue();
    }

    /**
     * Deletes a key-value.
     *
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @param label The label of the key-value to delete.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> deleteKeyValueWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, RequestContext requestContext) {
        return service.deleteKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
            ifMatch, accept, requestContext);
    }

    /**
     * Deletes a key-value.
     *
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @param label The label of the key-value to delete.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteKeyValue(String key, String accept, String label, String syncToken, String ifMatch) {
        return deleteKeyValueWithResponse(key, accept, label, syncToken, ifMatch, RequestContext.none()).getValue();
    }

    /**
     * Deletes a key-value.
     *
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteKeyValue(String key, String accept) {
        final String label = null;
        final String syncToken = null;
        final String ifMatch = null;
        return deleteKeyValueWithResponse(key, accept, label, syncToken, ifMatch, RequestContext.none()).getValue();
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkKeyValueWithResponse(String key, String label, String syncToken, String acceptDatetime,
        String ifMatch, String ifNoneMatch, List<SettingFields> select, RequestContext requestContext) {
        final String accept = "application/json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.checkKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
            acceptDatetime, ifMatch, ifNoneMatch, selectConverted, accept, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValue(String key, String label, String syncToken, String acceptDatetime, String ifMatch,
        String ifNoneMatch, List<SettingFields> select) {
        checkKeyValueWithResponse(key, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, select,
            RequestContext.none());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key The key of the key-value to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValue(String key) {
        final String label = null;
        final String syncToken = null;
        final String acceptDatetime = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        final List<SettingFields> select = null;
        checkKeyValueWithResponse(key, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, select,
            RequestContext.none());
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ConfigurationSnapshot> getSnapshotsSinglePage(String accept, String name, String after,
        List<SnapshotFields> select, List<ConfigurationSnapshotStatus> status, String syncToken) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        String statusConverted = (status == null)
            ? null
            : status.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<SnapshotListResult> res
            = service.getSnapshots(this.getEndpoint(), this.getServiceVersion().getVersion(), name, after,
                selectConverted, statusConverted, syncToken, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ConfigurationSnapshot> getSnapshotsSinglePage(String accept, String name, String after,
        List<SnapshotFields> select, List<ConfigurationSnapshotStatus> status, String syncToken,
        RequestContext requestContext) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        String statusConverted = (status == null)
            ? null
            : status.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<SnapshotListResult> res
            = service.getSnapshots(this.getEndpoint(), this.getServiceVersion().getVersion(), name, after,
                selectConverted, statusConverted, syncToken, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationSnapshot> getSnapshots(String accept, String name, String after,
        List<SnapshotFields> select, List<ConfigurationSnapshotStatus> status, String syncToken) {
        return new PagedIterable<>(
            (pagingOptions) -> getSnapshotsSinglePage(accept, name, after, select, status, syncToken),
            (pagingOptions, nextLink) -> getSnapshotsNextSinglePage(nextLink, accept, syncToken));
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationSnapshot> getSnapshots(String accept) {
        final String name = null;
        final String after = null;
        final List<SnapshotFields> select = null;
        final List<ConfigurationSnapshotStatus> status = null;
        final String syncToken = null;
        return new PagedIterable<>(
            (pagingOptions) -> getSnapshotsSinglePage(accept, name, after, select, status, syncToken),
            (pagingOptions, nextLink) -> getSnapshotsNextSinglePage(nextLink, accept, syncToken));
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationSnapshot> getSnapshots(String accept, String name, String after,
        List<SnapshotFields> select, List<ConfigurationSnapshotStatus> status, String syncToken,
        RequestContext requestContext) {

        return new PagedIterable<>(
            (pagingOptions) -> getSnapshotsSinglePage(accept, name, after, select, status, syncToken, requestContext),
            (pagingOptions, nextLink) -> getSnapshotsNextSinglePage(nextLink, accept, syncToken, requestContext));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkSnapshotsWithResponse(String syncToken, String after, RequestContext requestContext) {
        final String accept = "application/json";
        return service.checkSnapshots(this.getEndpoint(), this.getServiceVersion().getVersion(), syncToken, after,
            accept, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshots(String syncToken, String after) {
        checkSnapshotsWithResponse(syncToken, after, RequestContext.none());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshots() {
        final String syncToken = null;
        final String after = null;
        checkSnapshotsWithResponse(syncToken, after, RequestContext.none());
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSnapshot> getSnapshotWithResponse(String name, String accept,
        List<SnapshotFields> select, String syncToken, String ifMatch, String ifNoneMatch,
        RequestContext requestContext) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.getSnapshot(this.getEndpoint(), this.getServiceVersion().getVersion(), name, selectConverted,
            syncToken, ifMatch, ifNoneMatch, accept, requestContext);
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot getSnapshot(String name, String accept, List<SnapshotFields> select, String syncToken,
        String ifMatch, String ifNoneMatch) {
        return getSnapshotWithResponse(name, accept, select, syncToken, ifMatch, ifNoneMatch, RequestContext.none())
            .getValue();
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot getSnapshot(String name, String accept) {
        final List<SnapshotFields> select = null;
        final String syncToken = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return getSnapshotWithResponse(name, accept, select, syncToken, ifMatch, ifNoneMatch, RequestContext.none())
            .getValue();
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param contentType Content-Type header.
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSnapshot> updateSnapshotWithResponse(UpdateSnapshotRequestContentType contentType,
        String name, String accept, SnapshotUpdateParameters entity, String syncToken, String ifMatch,
        String ifNoneMatch, RequestContext requestContext) {
        return service.updateSnapshot(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType, name,
            syncToken, ifMatch, ifNoneMatch, accept, entity, requestContext);
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param contentType Content-Type header.
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot updateSnapshot(UpdateSnapshotRequestContentType contentType, String name,
        String accept, SnapshotUpdateParameters entity, String syncToken, String ifMatch, String ifNoneMatch) {
        return updateSnapshotWithResponse(contentType, name, accept, entity, syncToken, ifMatch, ifNoneMatch,
            RequestContext.none()).getValue();
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param contentType Content-Type header.
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot updateSnapshot(UpdateSnapshotRequestContentType contentType, String name,
        String accept, SnapshotUpdateParameters entity) {
        final String syncToken = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return updateSnapshotWithResponse(contentType, name, accept, entity, syncToken, ifMatch, ifNoneMatch,
            RequestContext.none()).getValue();
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name The name of the key-value snapshot to check.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkSnapshotWithResponse(String name, String syncToken, String ifMatch, String ifNoneMatch,
        RequestContext requestContext) {
        final String accept = "application/json";
        return service.checkSnapshot(this.getEndpoint(), this.getServiceVersion().getVersion(), name, syncToken,
            ifMatch, ifNoneMatch, accept, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name The name of the key-value snapshot to check.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshot(String name, String syncToken, String ifMatch, String ifNoneMatch) {
        checkSnapshotWithResponse(name, syncToken, ifMatch, ifNoneMatch, RequestContext.none());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name The name of the key-value snapshot to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshot(String name) {
        final String syncToken = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        checkSnapshotWithResponse(name, syncToken, ifMatch, ifNoneMatch, RequestContext.none());
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<SettingLabel> getLabelsSinglePage(String accept, String name, String syncToken, String after,
        String acceptDatetime, List<SettingLabelFields> select) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<LabelListResult> res = service.getLabels(this.getEndpoint(), this.getServiceVersion().getVersion(),
            name, syncToken, after, acceptDatetime, selectConverted, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<SettingLabel> getLabelsSinglePage(String accept, String name, String syncToken, String after,
        String acceptDatetime, List<SettingLabelFields> select, RequestContext requestContext) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<LabelListResult> res = service.getLabels(this.getEndpoint(), this.getServiceVersion().getVersion(),
            name, syncToken, after, acceptDatetime, selectConverted, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SettingLabel> getLabels(String accept, String name, String syncToken, String after,
        String acceptDatetime, List<SettingLabelFields> select) {
        return new PagedIterable<>(
            (pagingOptions) -> getLabelsSinglePage(accept, name, syncToken, after, acceptDatetime, select),
            (pagingOptions, nextLink) -> getLabelsNextSinglePage(nextLink, accept, syncToken, acceptDatetime));
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SettingLabel> getLabels(String accept) {
        final String name = null;
        final String syncToken = null;
        final String after = null;
        final String acceptDatetime = null;
        final List<SettingLabelFields> select = null;
        return new PagedIterable<>(
            (pagingOptions) -> getLabelsSinglePage(accept, name, syncToken, after, acceptDatetime, select),
            (pagingOptions, nextLink) -> getLabelsNextSinglePage(nextLink, accept, syncToken, acceptDatetime));
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SettingLabel> getLabels(String accept, String name, String syncToken, String after,
        String acceptDatetime, List<SettingLabelFields> select, RequestContext requestContext) {
        return new PagedIterable<>(
            (pagingOptions) -> getLabelsSinglePage(accept, name, syncToken, after, acceptDatetime, select,
                requestContext),
            (pagingOptions, nextLink) -> getLabelsNextSinglePage(nextLink, accept, syncToken, acceptDatetime,
                requestContext));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkLabelsWithResponse(String name, String syncToken, String after, String acceptDatetime,
        List<SettingLabelFields> select, RequestContext requestContext) {
        final String accept = "application/json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.checkLabels(this.getEndpoint(), this.getServiceVersion().getVersion(), name, syncToken, after,
            acceptDatetime, selectConverted, accept, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkLabels(String name, String syncToken, String after, String acceptDatetime,
        List<SettingLabelFields> select) {
        checkLabelsWithResponse(name, syncToken, after, acceptDatetime, select, RequestContext.none());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkLabels() {
        final String name = null;
        final String syncToken = null;
        final String after = null;
        final String acceptDatetime = null;
        final List<SettingLabelFields> select = null;
        checkLabelsWithResponse(name, syncToken, after, acceptDatetime, select, RequestContext.none());
    }

    /**
     * Locks a key-value.
     *
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to lock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> putLockWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, String ifNoneMatch, RequestContext requestContext) {
        return service.putLock(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
            ifMatch, ifNoneMatch, accept, requestContext);
    }

    /**
     * Locks a key-value.
     *
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to lock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putLock(String key, String accept, String label, String syncToken, String ifMatch,
        String ifNoneMatch) {
        return putLockWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch, RequestContext.none())
            .getValue();
    }

    /**
     * Locks a key-value.
     *
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putLock(String key, String accept) {
        final String label = null;
        final String syncToken = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return putLockWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch, RequestContext.none())
            .getValue();
    }

    /**
     * Unlocks a key-value.
     *
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to unlock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> deleteLockWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, String ifNoneMatch, RequestContext requestContext) {
        return service.deleteLock(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
            ifMatch, ifNoneMatch, accept, requestContext);
    }

    /**
     * Unlocks a key-value.
     *
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to unlock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteLock(String key, String accept, String label, String syncToken, String ifMatch,
        String ifNoneMatch) {
        return deleteLockWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch, RequestContext.none())
            .getValue();
    }

    /**
     * Unlocks a key-value.
     *
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteLock(String key, String accept) {
        final String label = null;
        final String syncToken = null;
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return deleteLockWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch, RequestContext.none())
            .getValue();
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getRevisionsSinglePage(String accept, String key, String label, String syncToken,
        String after, String acceptDatetime, List<SettingFields> select, List<String> tags) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res
            = service.getRevisions(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
                after, acceptDatetime, selectConverted, tagsConverted, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getRevisionsSinglePage(String accept, String key, String label, String syncToken,
        String after, String acceptDatetime, List<SettingFields> select, List<String> tags,
        RequestContext requestContext) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res
            = service.getRevisions(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
                after, acceptDatetime, selectConverted, tagsConverted, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, List<String> tags) {
        return new PagedIterable<>(
            (pagingOptions) -> getRevisionsSinglePage(accept, key, label, syncToken, after, acceptDatetime, select,
                tags),
            (pagingOptions, nextLink) -> getRevisionsNextSinglePage(nextLink, accept, syncToken, acceptDatetime));
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String accept) {
        final String key = null;
        final String label = null;
        final String syncToken = null;
        final String after = null;
        final String acceptDatetime = null;
        final List<SettingFields> select = null;
        final List<String> tags = null;
        return new PagedIterable<>(
            (pagingOptions) -> getRevisionsSinglePage(accept, key, label, syncToken, after, acceptDatetime, select,
                tags),
            (pagingOptions, nextLink) -> getRevisionsNextSinglePage(nextLink, accept, syncToken, acceptDatetime));
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, List<String> tags, RequestContext requestContext) {

        return new PagedIterable<>(
            (pagingOptions) -> getRevisionsSinglePage(accept, key, label, syncToken, after, acceptDatetime, select,
                tags, requestContext),
            (pagingOptions, nextLink) -> getRevisionsNextSinglePage(nextLink, accept, syncToken, acceptDatetime,
                requestContext));
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkRevisionsWithResponse(String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, List<String> tags, RequestContext requestContext) {
        final String accept = "application/json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.checkRevisions(this.getEndpoint(), this.getServiceVersion().getVersion(), key, label, syncToken,
            after, acceptDatetime, selectConverted, tagsConverted, accept, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkRevisions(String key, String label, String syncToken, String after, String acceptDatetime,
        List<SettingFields> select, List<String> tags) {
        checkRevisionsWithResponse(key, label, syncToken, after, acceptDatetime, select, tags, RequestContext.none());
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkRevisions() {
        final String key = null;
        final String label = null;
        final String syncToken = null;
        final String after = null;
        final String acceptDatetime = null;
        final List<SettingFields> select = null;
        final List<String> tags = null;
        checkRevisionsWithResponse(key, label, syncToken, after, acceptDatetime, select, tags, RequestContext.none());
    }

    /**
     * Gets the state of a long running operation.
     *
     * @param snapshot Snapshot identifier for the long running operation.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationDetails> getOperationDetailsWithResponse(String snapshot, RequestContext requestContext) {
        final String accept = "application/json";
        return service.getOperationDetails(this.getEndpoint(), this.getServiceVersion().getVersion(), snapshot, accept,
            requestContext);
    }

    /**
     * Gets the state of a long running operation.
     *
     * @param snapshot Snapshot identifier for the long running operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationDetails getOperationDetails(String snapshot) {
        return getOperationDetailsWithResponse(snapshot, RequestContext.none()).getValue();
    }

    /**
     * Gets a list of keys.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<Key> getKeysNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime) {
        Response<KeyListResult> res = service.getKeysNext(nextLink, this.getEndpoint(), syncToken, acceptDatetime,
            accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of keys.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<Key> getKeysNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime, RequestContext requestContext) {
        Response<KeyListResult> res
            = service.getKeysNext(nextLink, this.getEndpoint(), syncToken, acceptDatetime, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getKeyValuesNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime, String ifMatch, String ifNoneMatch) {
        Response<KeyValueListResult> res = service.getKeyValuesNext(nextLink, this.getEndpoint(), syncToken,
            acceptDatetime, ifMatch, ifNoneMatch, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getKeyValuesNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime, String ifMatch, String ifNoneMatch, RequestContext requestContext) {
        Response<KeyValueListResult> res = service.getKeyValuesNext(nextLink, this.getEndpoint(), syncToken,
            acceptDatetime, ifMatch, ifNoneMatch, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a snapshot list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ConfigurationSnapshot> getSnapshotsNextSinglePage(String nextLink, String accept,
        String syncToken) {
        Response<SnapshotListResult> res
            = service.getSnapshotsNext(nextLink, this.getEndpoint(), syncToken, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a snapshot list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ConfigurationSnapshot> getSnapshotsNextSinglePage(String nextLink, String accept,
        String syncToken, RequestContext requestContext) {
        Response<SnapshotListResult> res
            = service.getSnapshotsNext(nextLink, this.getEndpoint(), syncToken, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<SettingLabel> getLabelsNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime) {
        Response<LabelListResult> res = service.getLabelsNext(nextLink, this.getEndpoint(), syncToken, acceptDatetime,
            accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<SettingLabel> getLabelsNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime, RequestContext requestContext) {
        Response<LabelListResult> res
            = service.getLabelsNext(nextLink, this.getEndpoint(), syncToken, acceptDatetime, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getRevisionsNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime) {
        Response<KeyValueListResult> res = service.getRevisionsNext(nextLink, this.getEndpoint(), syncToken,
            acceptDatetime, accept, RequestContext.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<KeyValue> getRevisionsNextSinglePage(String nextLink, String accept, String syncToken,
        String acceptDatetime, RequestContext requestContext) {
        Response<KeyValueListResult> res
            = service.getRevisionsNext(nextLink, this.getEndpoint(), syncToken, acceptDatetime, accept, requestContext);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().getItems(),
            null, res.getValue().getNextLink(), null, null, null);
    }
}
