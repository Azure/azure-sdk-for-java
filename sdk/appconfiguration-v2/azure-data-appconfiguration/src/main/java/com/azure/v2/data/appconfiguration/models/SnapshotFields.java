// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.utils.ExpandableEnum;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * Snapshot fields.
 */
public final class SnapshotFields implements ExpandableEnum<String>, JsonSerializable<SnapshotFields> {
    private static final Map<String, SnapshotFields> VALUES = new ConcurrentHashMap<>();

    private static final Function<String, SnapshotFields> NEW_INSTANCE = SnapshotFields::new;

    /**
     * Name field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields NAME = fromValue("name");

    /**
     * Status field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields STATUS = fromValue("status");

    /**
     * Filters field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields FILTERS = fromValue("filters");

    /**
     * Composition type field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields SNAPSHOT_COMPOSITION = fromValue("composition_type");

    /**
     * Created field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields CREATED_AT = fromValue("created");

    /**
     * Expires field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields EXPIRES_AT = fromValue("expires");

    /**
     * Retention period field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields RETENTION_PERIOD = fromValue("retention_period");

    /**
     * Size field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields SIZE_IN_BYTES = fromValue("size");

    /**
     * Items count field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields ITEM_COUNT = fromValue("items_count");

    /**
     * Tags field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields TAGS = fromValue("tags");

    /**
     * Etag field.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static final SnapshotFields ETAG = fromValue("etag");

    private final String value;

    private SnapshotFields(String value) {
        this.value = value;
    }

    /**
     * Creates or finds a SnapshotFields.
     * 
     * @param value a value to look for.
     * @return the corresponding SnapshotFields.
     * @throws IllegalArgumentException if value is null.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static SnapshotFields fromValue(String value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known SnapshotFields values.
     * 
     * @return Known SnapshotFields values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static Collection<SnapshotFields> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the SnapshotFields instance.
     * 
     * @return the value of the SnapshotFields instance.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public String getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(getValue());
    }

    /**
     * Reads an instance of SnapshotFields from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnapshotFields if the JsonReader was pointing to an instance of it, or null if the
     * JsonReader was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SnapshotFields.
     * @throws IllegalStateException If unexpected JSON token is found.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static SnapshotFields fromJson(JsonReader jsonReader) throws IOException {
        JsonToken nextToken = jsonReader.nextToken();
        if (nextToken == JsonToken.NULL) {
            return null;
        }
        if (nextToken != JsonToken.STRING) {
            throw new IllegalStateException(
                String.format("Unexpected JSON token for %s deserialization: %s", JsonToken.STRING, nextToken));
        }
        return SnapshotFields.fromValue(jsonReader.getString());
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
