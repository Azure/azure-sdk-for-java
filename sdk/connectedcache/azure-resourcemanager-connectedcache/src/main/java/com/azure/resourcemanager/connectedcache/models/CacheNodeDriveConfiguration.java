// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Drive configuration for cache node.
 */
@Fluent
public final class CacheNodeDriveConfiguration implements JsonSerializable<CacheNodeDriveConfiguration> {
    /*
     * physical path location of the folder used for caching content
     */
    private String physicalPath;

    /*
     * physical size of the drive used for caching content
     */
    private Integer sizeInGb;

    /*
     * corresponding nginx cache number. Valid cache numbers are 1 - 20
     */
    private Integer cacheNumber;

    /*
     * full binding for corresponding nginx cache drive
     */
    private String nginxMapping;

    /**
     * Creates an instance of CacheNodeDriveConfiguration class.
     */
    public CacheNodeDriveConfiguration() {
    }

    /**
     * Get the physicalPath property: physical path location of the folder used for caching content.
     * 
     * @return the physicalPath value.
     */
    public String physicalPath() {
        return this.physicalPath;
    }

    /**
     * Set the physicalPath property: physical path location of the folder used for caching content.
     * 
     * @param physicalPath the physicalPath value to set.
     * @return the CacheNodeDriveConfiguration object itself.
     */
    public CacheNodeDriveConfiguration withPhysicalPath(String physicalPath) {
        this.physicalPath = physicalPath;
        return this;
    }

    /**
     * Get the sizeInGb property: physical size of the drive used for caching content.
     * 
     * @return the sizeInGb value.
     */
    public Integer sizeInGb() {
        return this.sizeInGb;
    }

    /**
     * Set the sizeInGb property: physical size of the drive used for caching content.
     * 
     * @param sizeInGb the sizeInGb value to set.
     * @return the CacheNodeDriveConfiguration object itself.
     */
    public CacheNodeDriveConfiguration withSizeInGb(Integer sizeInGb) {
        this.sizeInGb = sizeInGb;
        return this;
    }

    /**
     * Get the cacheNumber property: corresponding nginx cache number. Valid cache numbers are 1 - 20.
     * 
     * @return the cacheNumber value.
     */
    public Integer cacheNumber() {
        return this.cacheNumber;
    }

    /**
     * Set the cacheNumber property: corresponding nginx cache number. Valid cache numbers are 1 - 20.
     * 
     * @param cacheNumber the cacheNumber value to set.
     * @return the CacheNodeDriveConfiguration object itself.
     */
    public CacheNodeDriveConfiguration withCacheNumber(Integer cacheNumber) {
        this.cacheNumber = cacheNumber;
        return this;
    }

    /**
     * Get the nginxMapping property: full binding for corresponding nginx cache drive.
     * 
     * @return the nginxMapping value.
     */
    public String nginxMapping() {
        return this.nginxMapping;
    }

    /**
     * Set the nginxMapping property: full binding for corresponding nginx cache drive.
     * 
     * @param nginxMapping the nginxMapping value to set.
     * @return the CacheNodeDriveConfiguration object itself.
     */
    public CacheNodeDriveConfiguration withNginxMapping(String nginxMapping) {
        this.nginxMapping = nginxMapping;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("physicalPath", this.physicalPath);
        jsonWriter.writeNumberField("sizeInGb", this.sizeInGb);
        jsonWriter.writeNumberField("cacheNumber", this.cacheNumber);
        jsonWriter.writeStringField("nginxMapping", this.nginxMapping);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheNodeDriveConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheNodeDriveConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CacheNodeDriveConfiguration.
     */
    public static CacheNodeDriveConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheNodeDriveConfiguration deserializedCacheNodeDriveConfiguration = new CacheNodeDriveConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("physicalPath".equals(fieldName)) {
                    deserializedCacheNodeDriveConfiguration.physicalPath = reader.getString();
                } else if ("sizeInGb".equals(fieldName)) {
                    deserializedCacheNodeDriveConfiguration.sizeInGb = reader.getNullable(JsonReader::getInt);
                } else if ("cacheNumber".equals(fieldName)) {
                    deserializedCacheNodeDriveConfiguration.cacheNumber = reader.getNullable(JsonReader::getInt);
                } else if ("nginxMapping".equals(fieldName)) {
                    deserializedCacheNodeDriveConfiguration.nginxMapping = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheNodeDriveConfiguration;
        });
    }
}
