// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Bgp configuration of cache node.
 */
@Fluent
public final class BgpConfiguration implements JsonSerializable<BgpConfiguration> {
    /*
     * Asn to ip address mapping
     */
    private String asnToIpAddressMapping;

    /**
     * Creates an instance of BgpConfiguration class.
     */
    public BgpConfiguration() {
    }

    /**
     * Get the asnToIpAddressMapping property: Asn to ip address mapping.
     * 
     * @return the asnToIpAddressMapping value.
     */
    public String asnToIpAddressMapping() {
        return this.asnToIpAddressMapping;
    }

    /**
     * Set the asnToIpAddressMapping property: Asn to ip address mapping.
     * 
     * @param asnToIpAddressMapping the asnToIpAddressMapping value to set.
     * @return the BgpConfiguration object itself.
     */
    public BgpConfiguration withAsnToIpAddressMapping(String asnToIpAddressMapping) {
        this.asnToIpAddressMapping = asnToIpAddressMapping;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("asnToIpAddressMapping", this.asnToIpAddressMapping);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BgpConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BgpConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BgpConfiguration.
     */
    public static BgpConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BgpConfiguration deserializedBgpConfiguration = new BgpConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("asnToIpAddressMapping".equals(fieldName)) {
                    deserializedBgpConfiguration.asnToIpAddressMapping = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBgpConfiguration;
        });
    }
}
