// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Mcc cache node resource auto update properties.
 */
@Immutable
public final class MccCacheNodeAutoUpdateInfo implements JsonSerializable<MccCacheNodeAutoUpdateInfo> {
    /*
     * Auto update image uri before update.
     */
    private String imageUriBeforeUpdate;

    /*
     * Auto update image uri targetted to update.
     */
    private String imageUriTargeted;

    /*
     * Auto update image uri at Terminal.
     */
    private String imageUriTerminal;

    /*
     * Auto update Ring Type.
     */
    private Integer autoUpdateRingType;

    /*
     * Auto update image uri after update.
     */
    private OffsetDateTime movedToTerminalStateDateTime;

    /*
     * Auto update image uri before update.
     */
    private Integer ruleRequestedWeek;

    /*
     * Auto update image uri after update.
     */
    private Integer ruleRequestedDay;

    /*
     * Auto update entity created datetime.
     */
    private OffsetDateTime createdDateTimeUtc;

    /*
     * Auto update entity last updated datetime.
     */
    private OffsetDateTime updatedRegistryDateTimeUtc;

    /*
     * This text describing the purpose of the plan of auto update.
     */
    private String planChangeLogText;

    /*
     * Auto update last applied status.
     */
    private Integer autoUpdateLastAppliedStatus;

    /*
     * Auto update last applied status text.
     */
    private String autoUpdateLastAppliedStatusText;

    /*
     * Auto update last applied detailed status text.
     */
    private String autoUpdateLastAppliedStatusDetailedText;

    /*
     * Auto update planId.
     */
    private Long planId;

    /*
     * Auto update time to go live date time.
     */
    private String timeToGoLiveDateTime;

    /*
     * Auto update rule requested minute.
     */
    private String ruleRequestedMinute;

    /*
     * Auto update rule requested hour.
     */
    private String ruleRequestedHour;

    /**
     * Creates an instance of MccCacheNodeAutoUpdateInfo class.
     */
    private MccCacheNodeAutoUpdateInfo() {
    }

    /**
     * Get the imageUriBeforeUpdate property: Auto update image uri before update.
     * 
     * @return the imageUriBeforeUpdate value.
     */
    public String imageUriBeforeUpdate() {
        return this.imageUriBeforeUpdate;
    }

    /**
     * Get the imageUriTargeted property: Auto update image uri targetted to update.
     * 
     * @return the imageUriTargeted value.
     */
    public String imageUriTargeted() {
        return this.imageUriTargeted;
    }

    /**
     * Get the imageUriTerminal property: Auto update image uri at Terminal.
     * 
     * @return the imageUriTerminal value.
     */
    public String imageUriTerminal() {
        return this.imageUriTerminal;
    }

    /**
     * Get the autoUpdateRingType property: Auto update Ring Type.
     * 
     * @return the autoUpdateRingType value.
     */
    public Integer autoUpdateRingType() {
        return this.autoUpdateRingType;
    }

    /**
     * Get the movedToTerminalStateDateTime property: Auto update image uri after update.
     * 
     * @return the movedToTerminalStateDateTime value.
     */
    public OffsetDateTime movedToTerminalStateDateTime() {
        return this.movedToTerminalStateDateTime;
    }

    /**
     * Get the ruleRequestedWeek property: Auto update image uri before update.
     * 
     * @return the ruleRequestedWeek value.
     */
    public Integer ruleRequestedWeek() {
        return this.ruleRequestedWeek;
    }

    /**
     * Get the ruleRequestedDay property: Auto update image uri after update.
     * 
     * @return the ruleRequestedDay value.
     */
    public Integer ruleRequestedDay() {
        return this.ruleRequestedDay;
    }

    /**
     * Get the createdDateTimeUtc property: Auto update entity created datetime.
     * 
     * @return the createdDateTimeUtc value.
     */
    public OffsetDateTime createdDateTimeUtc() {
        return this.createdDateTimeUtc;
    }

    /**
     * Get the updatedRegistryDateTimeUtc property: Auto update entity last updated datetime.
     * 
     * @return the updatedRegistryDateTimeUtc value.
     */
    public OffsetDateTime updatedRegistryDateTimeUtc() {
        return this.updatedRegistryDateTimeUtc;
    }

    /**
     * Get the planChangeLogText property: This text describing the purpose of the plan of auto update.
     * 
     * @return the planChangeLogText value.
     */
    public String planChangeLogText() {
        return this.planChangeLogText;
    }

    /**
     * Get the autoUpdateLastAppliedStatus property: Auto update last applied status.
     * 
     * @return the autoUpdateLastAppliedStatus value.
     */
    public Integer autoUpdateLastAppliedStatus() {
        return this.autoUpdateLastAppliedStatus;
    }

    /**
     * Get the autoUpdateLastAppliedStatusText property: Auto update last applied status text.
     * 
     * @return the autoUpdateLastAppliedStatusText value.
     */
    public String autoUpdateLastAppliedStatusText() {
        return this.autoUpdateLastAppliedStatusText;
    }

    /**
     * Get the autoUpdateLastAppliedStatusDetailedText property: Auto update last applied detailed status text.
     * 
     * @return the autoUpdateLastAppliedStatusDetailedText value.
     */
    public String autoUpdateLastAppliedStatusDetailedText() {
        return this.autoUpdateLastAppliedStatusDetailedText;
    }

    /**
     * Get the planId property: Auto update planId.
     * 
     * @return the planId value.
     */
    public Long planId() {
        return this.planId;
    }

    /**
     * Get the timeToGoLiveDateTime property: Auto update time to go live date time.
     * 
     * @return the timeToGoLiveDateTime value.
     */
    public String timeToGoLiveDateTime() {
        return this.timeToGoLiveDateTime;
    }

    /**
     * Get the ruleRequestedMinute property: Auto update rule requested minute.
     * 
     * @return the ruleRequestedMinute value.
     */
    public String ruleRequestedMinute() {
        return this.ruleRequestedMinute;
    }

    /**
     * Get the ruleRequestedHour property: Auto update rule requested hour.
     * 
     * @return the ruleRequestedHour value.
     */
    public String ruleRequestedHour() {
        return this.ruleRequestedHour;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MccCacheNodeAutoUpdateInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MccCacheNodeAutoUpdateInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MccCacheNodeAutoUpdateInfo.
     */
    public static MccCacheNodeAutoUpdateInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MccCacheNodeAutoUpdateInfo deserializedMccCacheNodeAutoUpdateInfo = new MccCacheNodeAutoUpdateInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageUriBeforeUpdate".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.imageUriBeforeUpdate = reader.getString();
                } else if ("imageUriTargeted".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.imageUriTargeted = reader.getString();
                } else if ("imageUriTerminal".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.imageUriTerminal = reader.getString();
                } else if ("autoUpdateRingType".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.autoUpdateRingType = reader.getNullable(JsonReader::getInt);
                } else if ("movedToTerminalStateDateTime".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.movedToTerminalStateDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("ruleRequestedWeek".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.ruleRequestedWeek = reader.getNullable(JsonReader::getInt);
                } else if ("ruleRequestedDay".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.ruleRequestedDay = reader.getNullable(JsonReader::getInt);
                } else if ("createdDateTimeUtc".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.createdDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedRegistryDateTimeUtc".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.updatedRegistryDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("planChangeLogText".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.planChangeLogText = reader.getString();
                } else if ("autoUpdateLastAppliedStatus".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.autoUpdateLastAppliedStatus
                        = reader.getNullable(JsonReader::getInt);
                } else if ("autoUpdateLastAppliedStatusText".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.autoUpdateLastAppliedStatusText = reader.getString();
                } else if ("autoUpdateLastAppliedStatusDetailedText".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.autoUpdateLastAppliedStatusDetailedText = reader.getString();
                } else if ("planId".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.planId = reader.getNullable(JsonReader::getLong);
                } else if ("timeToGoLiveDateTime".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.timeToGoLiveDateTime = reader.getString();
                } else if ("ruleRequestedMinute".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.ruleRequestedMinute = reader.getString();
                } else if ("ruleRequestedHour".equals(fieldName)) {
                    deserializedMccCacheNodeAutoUpdateInfo.ruleRequestedHour = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMccCacheNodeAutoUpdateInfo;
        });
    }
}
