// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.connectedcache.fluent.ConnectedCacheManagementClient;
import com.azure.resourcemanager.connectedcache.implementation.CacheNodesOperationsImpl;
import com.azure.resourcemanager.connectedcache.implementation.ConnectedCacheManagementClientBuilder;
import com.azure.resourcemanager.connectedcache.implementation.EnterpriseCustomerOperationsImpl;
import com.azure.resourcemanager.connectedcache.implementation.EnterpriseMccCacheNodesOperationsImpl;
import com.azure.resourcemanager.connectedcache.implementation.EnterpriseMccCustomersImpl;
import com.azure.resourcemanager.connectedcache.implementation.IspCacheNodesOperationsImpl;
import com.azure.resourcemanager.connectedcache.implementation.IspCustomersImpl;
import com.azure.resourcemanager.connectedcache.implementation.OperationsImpl;
import com.azure.resourcemanager.connectedcache.models.CacheNodesOperations;
import com.azure.resourcemanager.connectedcache.models.EnterpriseCustomerOperations;
import com.azure.resourcemanager.connectedcache.models.EnterpriseMccCacheNodesOperations;
import com.azure.resourcemanager.connectedcache.models.EnterpriseMccCustomers;
import com.azure.resourcemanager.connectedcache.models.IspCacheNodesOperations;
import com.azure.resourcemanager.connectedcache.models.IspCustomers;
import com.azure.resourcemanager.connectedcache.models.Operations;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to ConnectedCacheManager.
 * Microsoft Connected Cache Rest Api version 2023-05-01-preview.
 */
public final class ConnectedCacheManager {
    private Operations operations;

    private EnterpriseCustomerOperations enterpriseCustomerOperations;

    private CacheNodesOperations cacheNodesOperations;

    private IspCustomers ispCustomers;

    private IspCacheNodesOperations ispCacheNodesOperations;

    private EnterpriseMccCustomers enterpriseMccCustomers;

    private EnterpriseMccCacheNodesOperations enterpriseMccCacheNodesOperations;

    private final ConnectedCacheManagementClient clientObject;

    private ConnectedCacheManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new ConnectedCacheManagementClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Connected Cache service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Connected Cache service API instance.
     */
    public static ConnectedCacheManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Connected Cache service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Connected Cache service API instance.
     */
    public static ConnectedCacheManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new ConnectedCacheManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create ConnectedCacheManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new ConnectedCacheManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Connected Cache service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Connected Cache service API instance.
         */
        public ConnectedCacheManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.connectedcache")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new ConnectedCacheManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of EnterpriseCustomerOperations. It manages EnterprisePreviewResource.
     * 
     * @return Resource collection API of EnterpriseCustomerOperations.
     */
    public EnterpriseCustomerOperations enterpriseCustomerOperations() {
        if (this.enterpriseCustomerOperations == null) {
            this.enterpriseCustomerOperations
                = new EnterpriseCustomerOperationsImpl(clientObject.getEnterpriseCustomerOperations(), this);
        }
        return enterpriseCustomerOperations;
    }

    /**
     * Gets the resource collection API of CacheNodesOperations. It manages CacheNodePreviewResource.
     * 
     * @return Resource collection API of CacheNodesOperations.
     */
    public CacheNodesOperations cacheNodesOperations() {
        if (this.cacheNodesOperations == null) {
            this.cacheNodesOperations = new CacheNodesOperationsImpl(clientObject.getCacheNodesOperations(), this);
        }
        return cacheNodesOperations;
    }

    /**
     * Gets the resource collection API of IspCustomers. It manages IspCustomerResource.
     * 
     * @return Resource collection API of IspCustomers.
     */
    public IspCustomers ispCustomers() {
        if (this.ispCustomers == null) {
            this.ispCustomers = new IspCustomersImpl(clientObject.getIspCustomers(), this);
        }
        return ispCustomers;
    }

    /**
     * Gets the resource collection API of IspCacheNodesOperations. It manages IspCacheNodeResource.
     * 
     * @return Resource collection API of IspCacheNodesOperations.
     */
    public IspCacheNodesOperations ispCacheNodesOperations() {
        if (this.ispCacheNodesOperations == null) {
            this.ispCacheNodesOperations
                = new IspCacheNodesOperationsImpl(clientObject.getIspCacheNodesOperations(), this);
        }
        return ispCacheNodesOperations;
    }

    /**
     * Gets the resource collection API of EnterpriseMccCustomers. It manages EnterpriseMccCustomerResource.
     * 
     * @return Resource collection API of EnterpriseMccCustomers.
     */
    public EnterpriseMccCustomers enterpriseMccCustomers() {
        if (this.enterpriseMccCustomers == null) {
            this.enterpriseMccCustomers
                = new EnterpriseMccCustomersImpl(clientObject.getEnterpriseMccCustomers(), this);
        }
        return enterpriseMccCustomers;
    }

    /**
     * Gets the resource collection API of EnterpriseMccCacheNodesOperations. It manages EnterpriseMccCacheNodeResource.
     * 
     * @return Resource collection API of EnterpriseMccCacheNodesOperations.
     */
    public EnterpriseMccCacheNodesOperations enterpriseMccCacheNodesOperations() {
        if (this.enterpriseMccCacheNodesOperations == null) {
            this.enterpriseMccCacheNodesOperations
                = new EnterpriseMccCacheNodesOperationsImpl(clientObject.getEnterpriseMccCacheNodesOperations(), this);
        }
        return enterpriseMccCacheNodesOperations;
    }

    /**
     * Gets wrapped service client ConnectedCacheManagementClient providing direct access to the underlying
     * auto-generated API implementation, based on Azure REST API.
     * 
     * @return Wrapped service client ConnectedCacheManagementClient.
     */
    public ConnectedCacheManagementClient serviceClient() {
        return this.clientObject;
    }
}
