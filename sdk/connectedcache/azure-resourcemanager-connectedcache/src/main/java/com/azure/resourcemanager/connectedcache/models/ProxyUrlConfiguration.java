// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ProxyUrl configuration of cache node.
 */
@Fluent
public final class ProxyUrlConfiguration implements JsonSerializable<ProxyUrlConfiguration> {
    /*
     * Host Proxy Address configuration along with port number. This can be a proxy or ip address. ex: xx.xx.xx.xxxx:80
     * or host name http://exampleproxy.com:80
     */
    private String proxyUrl;

    /**
     * Creates an instance of ProxyUrlConfiguration class.
     */
    public ProxyUrlConfiguration() {
    }

    /**
     * Get the proxyUrl property: Host Proxy Address configuration along with port number. This can be a proxy or ip
     * address. ex: xx.xx.xx.xxxx:80 or host name http://exampleproxy.com:80.
     * 
     * @return the proxyUrl value.
     */
    public String proxyUrl() {
        return this.proxyUrl;
    }

    /**
     * Set the proxyUrl property: Host Proxy Address configuration along with port number. This can be a proxy or ip
     * address. ex: xx.xx.xx.xxxx:80 or host name http://exampleproxy.com:80.
     * 
     * @param proxyUrl the proxyUrl value to set.
     * @return the ProxyUrlConfiguration object itself.
     */
    public ProxyUrlConfiguration withProxyUrl(String proxyUrl) {
        this.proxyUrl = proxyUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("proxyUrl", this.proxyUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProxyUrlConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProxyUrlConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProxyUrlConfiguration.
     */
    public static ProxyUrlConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProxyUrlConfiguration deserializedProxyUrlConfiguration = new ProxyUrlConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("proxyUrl".equals(fieldName)) {
                    deserializedProxyUrlConfiguration.proxyUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProxyUrlConfiguration;
        });
    }
}
