// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Mcc cache node resource issue properties.
 */
@Immutable
public final class MccIssue implements JsonSerializable<MccIssue> {
    /*
     * Mcc cache node issue type.
     */
    private String mccIssueType;

    /*
     * Mcc cache node issues toastString.
     */
    private String toastString;

    /*
     * Mcc cache node issue detail string.
     */
    private String detailString;

    /*
     * Mcc cache node issue related help link.
     */
    private String helpLink;

    /*
     * Mcc cache node issue start date.
     */
    private OffsetDateTime issueStartDate;

    /*
     * Mcc cache node issue end date.
     */
    private OffsetDateTime issueEndDate;

    /**
     * Creates an instance of MccIssue class.
     */
    private MccIssue() {
    }

    /**
     * Get the mccIssueType property: Mcc cache node issue type.
     * 
     * @return the mccIssueType value.
     */
    public String mccIssueType() {
        return this.mccIssueType;
    }

    /**
     * Get the toastString property: Mcc cache node issues toastString.
     * 
     * @return the toastString value.
     */
    public String toastString() {
        return this.toastString;
    }

    /**
     * Get the detailString property: Mcc cache node issue detail string.
     * 
     * @return the detailString value.
     */
    public String detailString() {
        return this.detailString;
    }

    /**
     * Get the helpLink property: Mcc cache node issue related help link.
     * 
     * @return the helpLink value.
     */
    public String helpLink() {
        return this.helpLink;
    }

    /**
     * Get the issueStartDate property: Mcc cache node issue start date.
     * 
     * @return the issueStartDate value.
     */
    public OffsetDateTime issueStartDate() {
        return this.issueStartDate;
    }

    /**
     * Get the issueEndDate property: Mcc cache node issue end date.
     * 
     * @return the issueEndDate value.
     */
    public OffsetDateTime issueEndDate() {
        return this.issueEndDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MccIssue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MccIssue if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the MccIssue.
     */
    public static MccIssue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MccIssue deserializedMccIssue = new MccIssue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mccIssueType".equals(fieldName)) {
                    deserializedMccIssue.mccIssueType = reader.getString();
                } else if ("toastString".equals(fieldName)) {
                    deserializedMccIssue.toastString = reader.getString();
                } else if ("detailString".equals(fieldName)) {
                    deserializedMccIssue.detailString = reader.getString();
                } else if ("helpLink".equals(fieldName)) {
                    deserializedMccIssue.helpLink = reader.getString();
                } else if ("issueStartDate".equals(fieldName)) {
                    deserializedMccIssue.issueStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("issueEndDate".equals(fieldName)) {
                    deserializedMccIssue.issueEndDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMccIssue;
        });
    }
}
