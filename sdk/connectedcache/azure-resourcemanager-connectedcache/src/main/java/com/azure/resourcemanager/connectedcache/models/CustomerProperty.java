// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model representing customer for connectedCache resource.
 */
@Fluent
public final class CustomerProperty implements JsonSerializable<CustomerProperty> {
    /*
     * The provisioned state of the resource
     */
    private ProvisioningState provisioningState;

    /*
     * Mcc customer resource (customer entity).
     */
    private CustomerEntity customer;

    /*
     * Mcc customer resource additional properties.
     */
    private AdditionalCustomerProperties additionalCustomerProperties;

    /*
     * Mcc response status code.
     */
    private String statusCode;

    /*
     * Mcc response status text as string for retrieving status details.
     */
    private String statusText;

    /*
     * Mcc response status details for retrieving response inner details.
     */
    private String statusDetails;

    /*
     * HTTP error status code.
     */
    private String status;

    /*
     * Mcc response error details.
     */
    private ManagementError error;

    /**
     * Creates an instance of CustomerProperty class.
     */
    public CustomerProperty() {
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the customer property: Mcc customer resource (customer entity).
     * 
     * @return the customer value.
     */
    public CustomerEntity customer() {
        return this.customer;
    }

    /**
     * Set the customer property: Mcc customer resource (customer entity).
     * 
     * @param customer the customer value to set.
     * @return the CustomerProperty object itself.
     */
    public CustomerProperty withCustomer(CustomerEntity customer) {
        this.customer = customer;
        return this;
    }

    /**
     * Get the additionalCustomerProperties property: Mcc customer resource additional properties.
     * 
     * @return the additionalCustomerProperties value.
     */
    public AdditionalCustomerProperties additionalCustomerProperties() {
        return this.additionalCustomerProperties;
    }

    /**
     * Set the additionalCustomerProperties property: Mcc customer resource additional properties.
     * 
     * @param additionalCustomerProperties the additionalCustomerProperties value to set.
     * @return the CustomerProperty object itself.
     */
    public CustomerProperty
        withAdditionalCustomerProperties(AdditionalCustomerProperties additionalCustomerProperties) {
        this.additionalCustomerProperties = additionalCustomerProperties;
        return this;
    }

    /**
     * Get the statusCode property: Mcc response status code.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.statusCode;
    }

    /**
     * Get the statusText property: Mcc response status text as string for retrieving status details.
     * 
     * @return the statusText value.
     */
    public String statusText() {
        return this.statusText;
    }

    /**
     * Get the statusDetails property: Mcc response status details for retrieving response inner details.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the status property: HTTP error status code.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the error property: Mcc response error details.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customer() != null) {
            customer().validate();
        }
        if (additionalCustomerProperties() != null) {
            additionalCustomerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("customer", this.customer);
        jsonWriter.writeJsonField("additionalCustomerProperties", this.additionalCustomerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomerProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomerProperty if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomerProperty.
     */
    public static CustomerProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomerProperty deserializedCustomerProperty = new CustomerProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCustomerProperty.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("customer".equals(fieldName)) {
                    deserializedCustomerProperty.customer = CustomerEntity.fromJson(reader);
                } else if ("additionalCustomerProperties".equals(fieldName)) {
                    deserializedCustomerProperty.additionalCustomerProperties
                        = AdditionalCustomerProperties.fromJson(reader);
                } else if ("statusCode".equals(fieldName)) {
                    deserializedCustomerProperty.statusCode = reader.getString();
                } else if ("statusText".equals(fieldName)) {
                    deserializedCustomerProperty.statusText = reader.getString();
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedCustomerProperty.statusDetails = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedCustomerProperty.status = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedCustomerProperty.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomerProperty;
        });
    }
}
