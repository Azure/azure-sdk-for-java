// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Model representing Cache Node for ConnectedCache resource.
 */
@Fluent
public final class CacheNodeEntity implements JsonSerializable<CacheNodeEntity> {
    /*
     * Cache node resource Azure fully qualified resource Id.
     */
    private String fullyQualifiedResourceId;

    /*
     * Cache node resource customer resource GUID Id.
     */
    private String customerId;

    /*
     * Cache node resource customer resource name.
     */
    private String customerName;

    /*
     * Cache node resource Ip address.
     */
    private String ipAddress;

    /*
     * Cache node resource customer index as string.
     */
    private String customerIndex;

    /*
     * Cache node resource identifier of the cache node
     */
    private String cacheNodeId;

    /*
     * Cache node resource name.
     */
    private String cacheNodeName;

    /*
     * Cache node resource customer resource Asn (autonomous system number)
     */
    private Integer customerAsn;

    /*
     * Cache node resource flag for indicating if cache node is enabled.
     */
    private Boolean isEnabled;

    /*
     * Cache node resource maximum allowed egress in Mbps.
     */
    private Integer maxAllowableEgressInMbps;

    /*
     * Cache node resource maximum allowed probability of egress.
     */
    private Double maxAllowableProbability;

    /*
     * Cache node resource Azure XCid.
     */
    private String xCid;

    /*
     * Cache node resource flag for determining if managed by enterprise as boolean.
     */
    private Boolean isEnterpriseManaged;

    /*
     * Cache node resource create async operation Id.
     */
    private String createAsyncOperationId;

    /*
     * Cache node resource deletion async operation Id.
     */
    private String deleteAsyncOperationId;

    /*
     * Cache node resource customer resource client tenant Id of subscription.
     */
    private String clientTenantId;

    /*
     * Cache node resource category.
     */
    private String category;

    /*
     * Cache node resource release version.
     */
    private Integer releaseVersion;

    /*
     * Cache node resource last sync timestamp.
     */
    private OffsetDateTime lastSyncWithAzureTimestamp;

    /*
     * Cache node resource last backend updated timestamp.
     */
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Cache node resource attempts to sync with Azure.
     */
    private Integer synchWithAzureAttemptsCount;

    /*
     * Cache node resource container configuration details.
     */
    private String containerConfigurations;

    /*
     * Cache node resource comma separated values of Cidrs.
     */
    private List<String> cidrCsv;

    /*
     * Cache node resource last Cidr Csv update timestamp
     */
    private OffsetDateTime cidrCsvLastUpdateTime;

    /*
     * Cache node resource last Bgp Cidr Csv update timestamp
     */
    private OffsetDateTime bgpCidrCsvLastUpdateTime;

    /*
     * Cache node resource last Bgp report timestamp.
     */
    private OffsetDateTime bgpLastReportedTime;

    /*
     * Cache node resource Bgp review state string text in detail.
     */
    private String bgpReviewStateText;

    /*
     * Cache node resource Bgp review state string text.
     */
    private BgpReviewStateEnum bgpReviewState;

    /*
     * Cache node resource Bgp review feedback text.
     */
    private String bgpReviewFeedback;

    /*
     * Cache node resource Bgp update count.
     */
    private Integer bgpNumberOfTimesUpdated;

    /*
     * Cache node resource Bgp record count.
     */
    private Integer bgpNumberOfRecords;

    /*
     * Cache node resource Bgp block count.
     */
    private Integer bgpCidrBlocksCount;

    /*
     * Cache node resource total addressable space defined by Bgp and Cidr Csv blocks.
     */
    private Integer bgpAddressSpace;

    /*
     * Cache node resource flag for determining if customer will be migrated.
     */
    private Boolean shouldMigrate;

    /*
     * Cache node resource bytes truncated from Bgp output file.
     */
    private Integer bgpFileBytesTruncated;

    /*
     * Cache node resource current Cidr range precedence selection type.
     */
    private Integer cidrSelectionType;

    /*
     * Cache node resource flag for indicating the cache node resource is frozen (not selectable, not editable in UI).
     */
    private Boolean isFrozen;

    /*
     * Cache node resource review process state as integer
     */
    private Integer reviewState;

    /*
     * Cache node resource review state text.
     */
    private String reviewStateText;

    /*
     * Cache node resource review feedback text.
     */
    private String reviewFeedback;

    /*
     * Cache node resource configuration state.
     */
    private ConfigurationState configurationState;

    /*
     * Cache node resource configuration state text.
     */
    private String configurationStateText;

    /*
     * Cache node resource total addressable space defined by the Cidr Csv block.
     */
    private Integer addressSpace;

    /*
     * Cache node resource Mcc container deployment worker connection count.
     */
    private Integer workerConnections;

    /*
     * Cache node resource last updated Mcc container deployment worker connection count timestamp.
     */
    private OffsetDateTime workerConnectionsLastUpdatedDateTime;

    /*
     * Cache node resource Mcc container configuration details re-sync trigger.
     */
    private Integer containerResyncTrigger;

    /*
     * Cache node resource Mcc Container Id Uri.
     */
    private String imageUri;

    /*
     * FQDN(fully qualified domain name) value of the mcc cache node
     */
    private String fullyQualifiedDomainName;

    /*
     * Auto Update Ring Type which is slow or fast etc.
     */
    private AutoUpdateRingType autoUpdateRingType;

    /*
     * Customer requested week of month for mcc install of auto update cycle
     */
    private Integer autoUpdateRequestedWeek;

    /*
     * Customer requested day of week for mcc install of auto update cycle
     */
    private Integer autoUpdateRequestedDay;

    /*
     * Customer requested time of the day for mcc install of auto update cycle, should be hh:mm
     */
    private String autoUpdateRequestedTime;

    /**
     * Creates an instance of CacheNodeEntity class.
     */
    public CacheNodeEntity() {
    }

    /**
     * Get the fullyQualifiedResourceId property: Cache node resource Azure fully qualified resource Id.
     * 
     * @return the fullyQualifiedResourceId value.
     */
    public String fullyQualifiedResourceId() {
        return this.fullyQualifiedResourceId;
    }

    /**
     * Set the fullyQualifiedResourceId property: Cache node resource Azure fully qualified resource Id.
     * 
     * @param fullyQualifiedResourceId the fullyQualifiedResourceId value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withFullyQualifiedResourceId(String fullyQualifiedResourceId) {
        this.fullyQualifiedResourceId = fullyQualifiedResourceId;
        return this;
    }

    /**
     * Get the customerId property: Cache node resource customer resource GUID Id.
     * 
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get the customerName property: Cache node resource customer resource name.
     * 
     * @return the customerName value.
     */
    public String customerName() {
        return this.customerName;
    }

    /**
     * Set the customerName property: Cache node resource customer resource name.
     * 
     * @param customerName the customerName value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withCustomerName(String customerName) {
        this.customerName = customerName;
        return this;
    }

    /**
     * Get the ipAddress property: Cache node resource Ip address.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: Cache node resource Ip address.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the customerIndex property: Cache node resource customer index as string.
     * 
     * @return the customerIndex value.
     */
    public String customerIndex() {
        return this.customerIndex;
    }

    /**
     * Set the customerIndex property: Cache node resource customer index as string.
     * 
     * @param customerIndex the customerIndex value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withCustomerIndex(String customerIndex) {
        this.customerIndex = customerIndex;
        return this;
    }

    /**
     * Get the cacheNodeId property: Cache node resource identifier of the cache node.
     * 
     * @return the cacheNodeId value.
     */
    public String cacheNodeId() {
        return this.cacheNodeId;
    }

    /**
     * Set the cacheNodeId property: Cache node resource identifier of the cache node.
     * 
     * @param cacheNodeId the cacheNodeId value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withCacheNodeId(String cacheNodeId) {
        this.cacheNodeId = cacheNodeId;
        return this;
    }

    /**
     * Get the cacheNodeName property: Cache node resource name.
     * 
     * @return the cacheNodeName value.
     */
    public String cacheNodeName() {
        return this.cacheNodeName;
    }

    /**
     * Set the cacheNodeName property: Cache node resource name.
     * 
     * @param cacheNodeName the cacheNodeName value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withCacheNodeName(String cacheNodeName) {
        this.cacheNodeName = cacheNodeName;
        return this;
    }

    /**
     * Get the customerAsn property: Cache node resource customer resource Asn (autonomous system number).
     * 
     * @return the customerAsn value.
     */
    public Integer customerAsn() {
        return this.customerAsn;
    }

    /**
     * Set the customerAsn property: Cache node resource customer resource Asn (autonomous system number).
     * 
     * @param customerAsn the customerAsn value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withCustomerAsn(Integer customerAsn) {
        this.customerAsn = customerAsn;
        return this;
    }

    /**
     * Get the isEnabled property: Cache node resource flag for indicating if cache node is enabled.
     * 
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Cache node resource flag for indicating if cache node is enabled.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the maxAllowableEgressInMbps property: Cache node resource maximum allowed egress in Mbps.
     * 
     * @return the maxAllowableEgressInMbps value.
     */
    public Integer maxAllowableEgressInMbps() {
        return this.maxAllowableEgressInMbps;
    }

    /**
     * Set the maxAllowableEgressInMbps property: Cache node resource maximum allowed egress in Mbps.
     * 
     * @param maxAllowableEgressInMbps the maxAllowableEgressInMbps value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withMaxAllowableEgressInMbps(Integer maxAllowableEgressInMbps) {
        this.maxAllowableEgressInMbps = maxAllowableEgressInMbps;
        return this;
    }

    /**
     * Get the maxAllowableProbability property: Cache node resource maximum allowed probability of egress.
     * 
     * @return the maxAllowableProbability value.
     */
    public Double maxAllowableProbability() {
        return this.maxAllowableProbability;
    }

    /**
     * Get the xCid property: Cache node resource Azure XCid.
     * 
     * @return the xCid value.
     */
    public String xCid() {
        return this.xCid;
    }

    /**
     * Get the isEnterpriseManaged property: Cache node resource flag for determining if managed by enterprise as
     * boolean.
     * 
     * @return the isEnterpriseManaged value.
     */
    public Boolean isEnterpriseManaged() {
        return this.isEnterpriseManaged;
    }

    /**
     * Set the isEnterpriseManaged property: Cache node resource flag for determining if managed by enterprise as
     * boolean.
     * 
     * @param isEnterpriseManaged the isEnterpriseManaged value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withIsEnterpriseManaged(Boolean isEnterpriseManaged) {
        this.isEnterpriseManaged = isEnterpriseManaged;
        return this;
    }

    /**
     * Get the createAsyncOperationId property: Cache node resource create async operation Id.
     * 
     * @return the createAsyncOperationId value.
     */
    public String createAsyncOperationId() {
        return this.createAsyncOperationId;
    }

    /**
     * Get the deleteAsyncOperationId property: Cache node resource deletion async operation Id.
     * 
     * @return the deleteAsyncOperationId value.
     */
    public String deleteAsyncOperationId() {
        return this.deleteAsyncOperationId;
    }

    /**
     * Get the clientTenantId property: Cache node resource customer resource client tenant Id of subscription.
     * 
     * @return the clientTenantId value.
     */
    public String clientTenantId() {
        return this.clientTenantId;
    }

    /**
     * Get the category property: Cache node resource category.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Get the releaseVersion property: Cache node resource release version.
     * 
     * @return the releaseVersion value.
     */
    public Integer releaseVersion() {
        return this.releaseVersion;
    }

    /**
     * Get the lastSyncWithAzureTimestamp property: Cache node resource last sync timestamp.
     * 
     * @return the lastSyncWithAzureTimestamp value.
     */
    public OffsetDateTime lastSyncWithAzureTimestamp() {
        return this.lastSyncWithAzureTimestamp;
    }

    /**
     * Get the lastUpdatedTimestamp property: Cache node resource last backend updated timestamp.
     * 
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the synchWithAzureAttemptsCount property: Cache node resource attempts to sync with Azure.
     * 
     * @return the synchWithAzureAttemptsCount value.
     */
    public Integer synchWithAzureAttemptsCount() {
        return this.synchWithAzureAttemptsCount;
    }

    /**
     * Get the containerConfigurations property: Cache node resource container configuration details.
     * 
     * @return the containerConfigurations value.
     */
    public String containerConfigurations() {
        return this.containerConfigurations;
    }

    /**
     * Get the cidrCsv property: Cache node resource comma separated values of Cidrs.
     * 
     * @return the cidrCsv value.
     */
    public List<String> cidrCsv() {
        return this.cidrCsv;
    }

    /**
     * Set the cidrCsv property: Cache node resource comma separated values of Cidrs.
     * 
     * @param cidrCsv the cidrCsv value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withCidrCsv(List<String> cidrCsv) {
        this.cidrCsv = cidrCsv;
        return this;
    }

    /**
     * Get the cidrCsvLastUpdateTime property: Cache node resource last Cidr Csv update timestamp.
     * 
     * @return the cidrCsvLastUpdateTime value.
     */
    public OffsetDateTime cidrCsvLastUpdateTime() {
        return this.cidrCsvLastUpdateTime;
    }

    /**
     * Get the bgpCidrCsvLastUpdateTime property: Cache node resource last Bgp Cidr Csv update timestamp.
     * 
     * @return the bgpCidrCsvLastUpdateTime value.
     */
    public OffsetDateTime bgpCidrCsvLastUpdateTime() {
        return this.bgpCidrCsvLastUpdateTime;
    }

    /**
     * Get the bgpLastReportedTime property: Cache node resource last Bgp report timestamp.
     * 
     * @return the bgpLastReportedTime value.
     */
    public OffsetDateTime bgpLastReportedTime() {
        return this.bgpLastReportedTime;
    }

    /**
     * Get the bgpReviewStateText property: Cache node resource Bgp review state string text in detail.
     * 
     * @return the bgpReviewStateText value.
     */
    public String bgpReviewStateText() {
        return this.bgpReviewStateText;
    }

    /**
     * Get the bgpReviewState property: Cache node resource Bgp review state string text.
     * 
     * @return the bgpReviewState value.
     */
    public BgpReviewStateEnum bgpReviewState() {
        return this.bgpReviewState;
    }

    /**
     * Get the bgpReviewFeedback property: Cache node resource Bgp review feedback text.
     * 
     * @return the bgpReviewFeedback value.
     */
    public String bgpReviewFeedback() {
        return this.bgpReviewFeedback;
    }

    /**
     * Get the bgpNumberOfTimesUpdated property: Cache node resource Bgp update count.
     * 
     * @return the bgpNumberOfTimesUpdated value.
     */
    public Integer bgpNumberOfTimesUpdated() {
        return this.bgpNumberOfTimesUpdated;
    }

    /**
     * Get the bgpNumberOfRecords property: Cache node resource Bgp record count.
     * 
     * @return the bgpNumberOfRecords value.
     */
    public Integer bgpNumberOfRecords() {
        return this.bgpNumberOfRecords;
    }

    /**
     * Get the bgpCidrBlocksCount property: Cache node resource Bgp block count.
     * 
     * @return the bgpCidrBlocksCount value.
     */
    public Integer bgpCidrBlocksCount() {
        return this.bgpCidrBlocksCount;
    }

    /**
     * Get the bgpAddressSpace property: Cache node resource total addressable space defined by Bgp and Cidr Csv blocks.
     * 
     * @return the bgpAddressSpace value.
     */
    public Integer bgpAddressSpace() {
        return this.bgpAddressSpace;
    }

    /**
     * Get the shouldMigrate property: Cache node resource flag for determining if customer will be migrated.
     * 
     * @return the shouldMigrate value.
     */
    public Boolean shouldMigrate() {
        return this.shouldMigrate;
    }

    /**
     * Set the shouldMigrate property: Cache node resource flag for determining if customer will be migrated.
     * 
     * @param shouldMigrate the shouldMigrate value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withShouldMigrate(Boolean shouldMigrate) {
        this.shouldMigrate = shouldMigrate;
        return this;
    }

    /**
     * Get the bgpFileBytesTruncated property: Cache node resource bytes truncated from Bgp output file.
     * 
     * @return the bgpFileBytesTruncated value.
     */
    public Integer bgpFileBytesTruncated() {
        return this.bgpFileBytesTruncated;
    }

    /**
     * Get the cidrSelectionType property: Cache node resource current Cidr range precedence selection type.
     * 
     * @return the cidrSelectionType value.
     */
    public Integer cidrSelectionType() {
        return this.cidrSelectionType;
    }

    /**
     * Set the cidrSelectionType property: Cache node resource current Cidr range precedence selection type.
     * 
     * @param cidrSelectionType the cidrSelectionType value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withCidrSelectionType(Integer cidrSelectionType) {
        this.cidrSelectionType = cidrSelectionType;
        return this;
    }

    /**
     * Get the isFrozen property: Cache node resource flag for indicating the cache node resource is frozen (not
     * selectable, not editable in UI).
     * 
     * @return the isFrozen value.
     */
    public Boolean isFrozen() {
        return this.isFrozen;
    }

    /**
     * Get the reviewState property: Cache node resource review process state as integer.
     * 
     * @return the reviewState value.
     */
    public Integer reviewState() {
        return this.reviewState;
    }

    /**
     * Get the reviewStateText property: Cache node resource review state text.
     * 
     * @return the reviewStateText value.
     */
    public String reviewStateText() {
        return this.reviewStateText;
    }

    /**
     * Get the reviewFeedback property: Cache node resource review feedback text.
     * 
     * @return the reviewFeedback value.
     */
    public String reviewFeedback() {
        return this.reviewFeedback;
    }

    /**
     * Get the configurationState property: Cache node resource configuration state.
     * 
     * @return the configurationState value.
     */
    public ConfigurationState configurationState() {
        return this.configurationState;
    }

    /**
     * Get the configurationStateText property: Cache node resource configuration state text.
     * 
     * @return the configurationStateText value.
     */
    public String configurationStateText() {
        return this.configurationStateText;
    }

    /**
     * Get the addressSpace property: Cache node resource total addressable space defined by the Cidr Csv block.
     * 
     * @return the addressSpace value.
     */
    public Integer addressSpace() {
        return this.addressSpace;
    }

    /**
     * Get the workerConnections property: Cache node resource Mcc container deployment worker connection count.
     * 
     * @return the workerConnections value.
     */
    public Integer workerConnections() {
        return this.workerConnections;
    }

    /**
     * Get the workerConnectionsLastUpdatedDateTime property: Cache node resource last updated Mcc container deployment
     * worker connection count timestamp.
     * 
     * @return the workerConnectionsLastUpdatedDateTime value.
     */
    public OffsetDateTime workerConnectionsLastUpdatedDateTime() {
        return this.workerConnectionsLastUpdatedDateTime;
    }

    /**
     * Get the containerResyncTrigger property: Cache node resource Mcc container configuration details re-sync trigger.
     * 
     * @return the containerResyncTrigger value.
     */
    public Integer containerResyncTrigger() {
        return this.containerResyncTrigger;
    }

    /**
     * Get the imageUri property: Cache node resource Mcc Container Id Uri.
     * 
     * @return the imageUri value.
     */
    public String imageUri() {
        return this.imageUri;
    }

    /**
     * Get the fullyQualifiedDomainName property: FQDN(fully qualified domain name) value of the mcc cache node.
     * 
     * @return the fullyQualifiedDomainName value.
     */
    public String fullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName;
    }

    /**
     * Set the fullyQualifiedDomainName property: FQDN(fully qualified domain name) value of the mcc cache node.
     * 
     * @param fullyQualifiedDomainName the fullyQualifiedDomainName value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withFullyQualifiedDomainName(String fullyQualifiedDomainName) {
        this.fullyQualifiedDomainName = fullyQualifiedDomainName;
        return this;
    }

    /**
     * Get the autoUpdateRingType property: Auto Update Ring Type which is slow or fast etc.
     * 
     * @return the autoUpdateRingType value.
     */
    public AutoUpdateRingType autoUpdateRingType() {
        return this.autoUpdateRingType;
    }

    /**
     * Set the autoUpdateRingType property: Auto Update Ring Type which is slow or fast etc.
     * 
     * @param autoUpdateRingType the autoUpdateRingType value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withAutoUpdateRingType(AutoUpdateRingType autoUpdateRingType) {
        this.autoUpdateRingType = autoUpdateRingType;
        return this;
    }

    /**
     * Get the autoUpdateRequestedWeek property: Customer requested week of month for mcc install of auto update cycle.
     * 
     * @return the autoUpdateRequestedWeek value.
     */
    public Integer autoUpdateRequestedWeek() {
        return this.autoUpdateRequestedWeek;
    }

    /**
     * Set the autoUpdateRequestedWeek property: Customer requested week of month for mcc install of auto update cycle.
     * 
     * @param autoUpdateRequestedWeek the autoUpdateRequestedWeek value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withAutoUpdateRequestedWeek(Integer autoUpdateRequestedWeek) {
        this.autoUpdateRequestedWeek = autoUpdateRequestedWeek;
        return this;
    }

    /**
     * Get the autoUpdateRequestedDay property: Customer requested day of week for mcc install of auto update cycle.
     * 
     * @return the autoUpdateRequestedDay value.
     */
    public Integer autoUpdateRequestedDay() {
        return this.autoUpdateRequestedDay;
    }

    /**
     * Set the autoUpdateRequestedDay property: Customer requested day of week for mcc install of auto update cycle.
     * 
     * @param autoUpdateRequestedDay the autoUpdateRequestedDay value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withAutoUpdateRequestedDay(Integer autoUpdateRequestedDay) {
        this.autoUpdateRequestedDay = autoUpdateRequestedDay;
        return this;
    }

    /**
     * Get the autoUpdateRequestedTime property: Customer requested time of the day for mcc install of auto update
     * cycle, should be hh:mm.
     * 
     * @return the autoUpdateRequestedTime value.
     */
    public String autoUpdateRequestedTime() {
        return this.autoUpdateRequestedTime;
    }

    /**
     * Set the autoUpdateRequestedTime property: Customer requested time of the day for mcc install of auto update
     * cycle, should be hh:mm.
     * 
     * @param autoUpdateRequestedTime the autoUpdateRequestedTime value to set.
     * @return the CacheNodeEntity object itself.
     */
    public CacheNodeEntity withAutoUpdateRequestedTime(String autoUpdateRequestedTime) {
        this.autoUpdateRequestedTime = autoUpdateRequestedTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fullyQualifiedResourceId", this.fullyQualifiedResourceId);
        jsonWriter.writeStringField("customerName", this.customerName);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("customerIndex", this.customerIndex);
        jsonWriter.writeStringField("cacheNodeId", this.cacheNodeId);
        jsonWriter.writeStringField("cacheNodeName", this.cacheNodeName);
        jsonWriter.writeNumberField("customerAsn", this.customerAsn);
        jsonWriter.writeBooleanField("isEnabled", this.isEnabled);
        jsonWriter.writeNumberField("maxAllowableEgressInMbps", this.maxAllowableEgressInMbps);
        jsonWriter.writeBooleanField("isEnterpriseManaged", this.isEnterpriseManaged);
        jsonWriter.writeArrayField("cidrCsv", this.cidrCsv, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("shouldMigrate", this.shouldMigrate);
        jsonWriter.writeNumberField("cidrSelectionType", this.cidrSelectionType);
        jsonWriter.writeStringField("fullyQualifiedDomainName", this.fullyQualifiedDomainName);
        jsonWriter.writeStringField("autoUpdateRingType",
            this.autoUpdateRingType == null ? null : this.autoUpdateRingType.toString());
        jsonWriter.writeNumberField("autoUpdateRequestedWeek", this.autoUpdateRequestedWeek);
        jsonWriter.writeNumberField("autoUpdateRequestedDay", this.autoUpdateRequestedDay);
        jsonWriter.writeStringField("autoUpdateRequestedTime", this.autoUpdateRequestedTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheNodeEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheNodeEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CacheNodeEntity.
     */
    public static CacheNodeEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheNodeEntity deserializedCacheNodeEntity = new CacheNodeEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fullyQualifiedResourceId".equals(fieldName)) {
                    deserializedCacheNodeEntity.fullyQualifiedResourceId = reader.getString();
                } else if ("customerId".equals(fieldName)) {
                    deserializedCacheNodeEntity.customerId = reader.getString();
                } else if ("customerName".equals(fieldName)) {
                    deserializedCacheNodeEntity.customerName = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedCacheNodeEntity.ipAddress = reader.getString();
                } else if ("customerIndex".equals(fieldName)) {
                    deserializedCacheNodeEntity.customerIndex = reader.getString();
                } else if ("cacheNodeId".equals(fieldName)) {
                    deserializedCacheNodeEntity.cacheNodeId = reader.getString();
                } else if ("cacheNodeName".equals(fieldName)) {
                    deserializedCacheNodeEntity.cacheNodeName = reader.getString();
                } else if ("customerAsn".equals(fieldName)) {
                    deserializedCacheNodeEntity.customerAsn = reader.getNullable(JsonReader::getInt);
                } else if ("isEnabled".equals(fieldName)) {
                    deserializedCacheNodeEntity.isEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("maxAllowableEgressInMbps".equals(fieldName)) {
                    deserializedCacheNodeEntity.maxAllowableEgressInMbps = reader.getNullable(JsonReader::getInt);
                } else if ("maxAllowableProbability".equals(fieldName)) {
                    deserializedCacheNodeEntity.maxAllowableProbability = reader.getNullable(JsonReader::getDouble);
                } else if ("xCid".equals(fieldName)) {
                    deserializedCacheNodeEntity.xCid = reader.getString();
                } else if ("isEnterpriseManaged".equals(fieldName)) {
                    deserializedCacheNodeEntity.isEnterpriseManaged = reader.getNullable(JsonReader::getBoolean);
                } else if ("createAsyncOperationId".equals(fieldName)) {
                    deserializedCacheNodeEntity.createAsyncOperationId = reader.getString();
                } else if ("deleteAsyncOperationId".equals(fieldName)) {
                    deserializedCacheNodeEntity.deleteAsyncOperationId = reader.getString();
                } else if ("clientTenantId".equals(fieldName)) {
                    deserializedCacheNodeEntity.clientTenantId = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedCacheNodeEntity.category = reader.getString();
                } else if ("releaseVersion".equals(fieldName)) {
                    deserializedCacheNodeEntity.releaseVersion = reader.getNullable(JsonReader::getInt);
                } else if ("lastSyncWithAzureTimestamp".equals(fieldName)) {
                    deserializedCacheNodeEntity.lastSyncWithAzureTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedTimestamp".equals(fieldName)) {
                    deserializedCacheNodeEntity.lastUpdatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("synchWithAzureAttemptsCount".equals(fieldName)) {
                    deserializedCacheNodeEntity.synchWithAzureAttemptsCount = reader.getNullable(JsonReader::getInt);
                } else if ("containerConfigurations".equals(fieldName)) {
                    deserializedCacheNodeEntity.containerConfigurations = reader.getString();
                } else if ("cidrCsv".equals(fieldName)) {
                    List<String> cidrCsv = reader.readArray(reader1 -> reader1.getString());
                    deserializedCacheNodeEntity.cidrCsv = cidrCsv;
                } else if ("cidrCsvLastUpdateTime".equals(fieldName)) {
                    deserializedCacheNodeEntity.cidrCsvLastUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("bgpCidrCsvLastUpdateTime".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpCidrCsvLastUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("bgpLastReportedTime".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpLastReportedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("bgpReviewStateText".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpReviewStateText = reader.getString();
                } else if ("bgpReviewState".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpReviewState = BgpReviewStateEnum.fromString(reader.getString());
                } else if ("bgpReviewFeedback".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpReviewFeedback = reader.getString();
                } else if ("bgpNumberOfTimesUpdated".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpNumberOfTimesUpdated = reader.getNullable(JsonReader::getInt);
                } else if ("bgpNumberOfRecords".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpNumberOfRecords = reader.getNullable(JsonReader::getInt);
                } else if ("bgpCidrBlocksCount".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpCidrBlocksCount = reader.getNullable(JsonReader::getInt);
                } else if ("bgpAddressSpace".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpAddressSpace = reader.getNullable(JsonReader::getInt);
                } else if ("shouldMigrate".equals(fieldName)) {
                    deserializedCacheNodeEntity.shouldMigrate = reader.getNullable(JsonReader::getBoolean);
                } else if ("bgpFileBytesTruncated".equals(fieldName)) {
                    deserializedCacheNodeEntity.bgpFileBytesTruncated = reader.getNullable(JsonReader::getInt);
                } else if ("cidrSelectionType".equals(fieldName)) {
                    deserializedCacheNodeEntity.cidrSelectionType = reader.getNullable(JsonReader::getInt);
                } else if ("isFrozen".equals(fieldName)) {
                    deserializedCacheNodeEntity.isFrozen = reader.getNullable(JsonReader::getBoolean);
                } else if ("reviewState".equals(fieldName)) {
                    deserializedCacheNodeEntity.reviewState = reader.getNullable(JsonReader::getInt);
                } else if ("reviewStateText".equals(fieldName)) {
                    deserializedCacheNodeEntity.reviewStateText = reader.getString();
                } else if ("reviewFeedback".equals(fieldName)) {
                    deserializedCacheNodeEntity.reviewFeedback = reader.getString();
                } else if ("configurationState".equals(fieldName)) {
                    deserializedCacheNodeEntity.configurationState = ConfigurationState.fromString(reader.getString());
                } else if ("configurationStateText".equals(fieldName)) {
                    deserializedCacheNodeEntity.configurationStateText = reader.getString();
                } else if ("addressSpace".equals(fieldName)) {
                    deserializedCacheNodeEntity.addressSpace = reader.getNullable(JsonReader::getInt);
                } else if ("workerConnections".equals(fieldName)) {
                    deserializedCacheNodeEntity.workerConnections = reader.getNullable(JsonReader::getInt);
                } else if ("workerConnectionsLastUpdatedDateTime".equals(fieldName)) {
                    deserializedCacheNodeEntity.workerConnectionsLastUpdatedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("containerResyncTrigger".equals(fieldName)) {
                    deserializedCacheNodeEntity.containerResyncTrigger = reader.getNullable(JsonReader::getInt);
                } else if ("imageUri".equals(fieldName)) {
                    deserializedCacheNodeEntity.imageUri = reader.getString();
                } else if ("fullyQualifiedDomainName".equals(fieldName)) {
                    deserializedCacheNodeEntity.fullyQualifiedDomainName = reader.getString();
                } else if ("autoUpdateRingType".equals(fieldName)) {
                    deserializedCacheNodeEntity.autoUpdateRingType = AutoUpdateRingType.fromString(reader.getString());
                } else if ("autoUpdateRequestedWeek".equals(fieldName)) {
                    deserializedCacheNodeEntity.autoUpdateRequestedWeek = reader.getNullable(JsonReader::getInt);
                } else if ("autoUpdateRequestedDay".equals(fieldName)) {
                    deserializedCacheNodeEntity.autoUpdateRequestedDay = reader.getNullable(JsonReader::getInt);
                } else if ("autoUpdateRequestedTime".equals(fieldName)) {
                    deserializedCacheNodeEntity.autoUpdateRequestedTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheNodeEntity;
        });
    }
}
