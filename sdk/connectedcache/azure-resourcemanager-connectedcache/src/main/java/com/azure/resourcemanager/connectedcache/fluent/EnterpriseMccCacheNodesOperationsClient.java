// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.connectedcache.fluent.models.EnterpriseMccCacheNodeResourceInner;
import com.azure.resourcemanager.connectedcache.fluent.models.MccCacheNodeInstallDetailsInner;
import com.azure.resourcemanager.connectedcache.models.ConnectedCachePatchResource;

/**
 * An instance of this class provides access to all the operations defined in EnterpriseMccCacheNodesOperationsClient.
 */
public interface EnterpriseMccCacheNodesOperationsClient {
    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EnterpriseMccCacheNodeResourceInner> getWithResponse(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, Context context);

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnterpriseMccCacheNodeResourceInner get(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName);

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents the high level Nodes needed to provision cache node
     * resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EnterpriseMccCacheNodeResourceInner>, EnterpriseMccCacheNodeResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
            EnterpriseMccCacheNodeResourceInner resource);

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents the high level Nodes needed to provision cache node
     * resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EnterpriseMccCacheNodeResourceInner>, EnterpriseMccCacheNodeResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
            EnterpriseMccCacheNodeResourceInner resource, Context context);

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnterpriseMccCacheNodeResourceInner createOrUpdate(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, EnterpriseMccCacheNodeResourceInner resource);

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnterpriseMccCacheNodeResourceInner createOrUpdate(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, EnterpriseMccCacheNodeResourceInner resource, Context context);

    /**
     * This api updates an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EnterpriseMccCacheNodeResourceInner> updateWithResponse(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, ConnectedCachePatchResource properties,
        Context context);

    /**
     * This api updates an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnterpriseMccCacheNodeResourceInner update(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, ConnectedCachePatchResource properties);

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName);

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, Context context);

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String customerResourceName, String cacheNodeResourceName);

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String customerResourceName, String cacheNodeResourceName, Context context);

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnterpriseMccCacheNodeResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EnterpriseMccCacheNodeResourceInner> listByEnterpriseMccCustomerResource(String resourceGroupName,
        String customerResourceName);

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnterpriseMccCacheNodeResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EnterpriseMccCacheNodeResourceInner> listByEnterpriseMccCustomerResource(String resourceGroupName,
        String customerResourceName, Context context);

    /**
     * This api gets secrets of the ispCacheNode resource install details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mcc cache node resource all install details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MccCacheNodeInstallDetailsInner> getCacheNodeInstallDetailsWithResponse(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context);

    /**
     * This api gets secrets of the ispCacheNode resource install details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mcc cache node resource all install details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MccCacheNodeInstallDetailsInner getCacheNodeInstallDetails(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName);
}
