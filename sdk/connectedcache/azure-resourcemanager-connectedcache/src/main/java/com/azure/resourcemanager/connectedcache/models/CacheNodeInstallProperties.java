// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Mcc cache node resource install script properties.
 */
@Immutable
public final class CacheNodeInstallProperties implements JsonSerializable<CacheNodeInstallProperties> {
    /*
     * Mcc customer resource Id.
     */
    private String customerId;

    /*
     * Mcc cache node resource Id.
     */
    private String cacheNodeId;

    /*
     * Mcc primary account key. Internal to Mcc.
     */
    private String primaryAccountKey;

    /*
     * Mcc secondary account key. Internal to Mcc.
     */
    private String secondaryAccountKey;

    /*
     * Mcc Iot Central temporary device registration key, used once.
     */
    private String registrationKey;

    /**
     * Creates an instance of CacheNodeInstallProperties class.
     */
    private CacheNodeInstallProperties() {
    }

    /**
     * Get the customerId property: Mcc customer resource Id.
     * 
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get the cacheNodeId property: Mcc cache node resource Id.
     * 
     * @return the cacheNodeId value.
     */
    public String cacheNodeId() {
        return this.cacheNodeId;
    }

    /**
     * Get the primaryAccountKey property: Mcc primary account key. Internal to Mcc.
     * 
     * @return the primaryAccountKey value.
     */
    public String primaryAccountKey() {
        return this.primaryAccountKey;
    }

    /**
     * Get the secondaryAccountKey property: Mcc secondary account key. Internal to Mcc.
     * 
     * @return the secondaryAccountKey value.
     */
    public String secondaryAccountKey() {
        return this.secondaryAccountKey;
    }

    /**
     * Get the registrationKey property: Mcc Iot Central temporary device registration key, used once.
     * 
     * @return the registrationKey value.
     */
    public String registrationKey() {
        return this.registrationKey;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("customerId", this.customerId);
        jsonWriter.writeStringField("cacheNodeId", this.cacheNodeId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheNodeInstallProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheNodeInstallProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CacheNodeInstallProperties.
     */
    public static CacheNodeInstallProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheNodeInstallProperties deserializedCacheNodeInstallProperties = new CacheNodeInstallProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customerId".equals(fieldName)) {
                    deserializedCacheNodeInstallProperties.customerId = reader.getString();
                } else if ("cacheNodeId".equals(fieldName)) {
                    deserializedCacheNodeInstallProperties.cacheNodeId = reader.getString();
                } else if ("primaryAccountKey".equals(fieldName)) {
                    deserializedCacheNodeInstallProperties.primaryAccountKey = reader.getString();
                } else if ("secondaryAccountKey".equals(fieldName)) {
                    deserializedCacheNodeInstallProperties.secondaryAccountKey = reader.getString();
                } else if ("registrationKey".equals(fieldName)) {
                    deserializedCacheNodeInstallProperties.registrationKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheNodeInstallProperties;
        });
    }
}
