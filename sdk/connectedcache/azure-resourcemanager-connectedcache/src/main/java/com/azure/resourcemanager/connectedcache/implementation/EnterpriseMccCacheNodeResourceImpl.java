// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.connectedcache.fluent.models.EnterpriseMccCacheNodeResourceInner;
import com.azure.resourcemanager.connectedcache.models.CacheNodeProperty;
import com.azure.resourcemanager.connectedcache.models.ConnectedCachePatchResource;
import com.azure.resourcemanager.connectedcache.models.EnterpriseMccCacheNodeResource;
import com.azure.resourcemanager.connectedcache.models.MccCacheNodeInstallDetails;
import java.util.Collections;
import java.util.Map;

public final class EnterpriseMccCacheNodeResourceImpl implements EnterpriseMccCacheNodeResource,
    EnterpriseMccCacheNodeResource.Definition, EnterpriseMccCacheNodeResource.Update {
    private EnterpriseMccCacheNodeResourceInner innerObject;

    private final com.azure.resourcemanager.connectedcache.ConnectedCacheManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public CacheNodeProperty properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public EnterpriseMccCacheNodeResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.connectedcache.ConnectedCacheManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String customerResourceName;

    private String cacheNodeResourceName;

    private ConnectedCachePatchResource updateProperties;

    public EnterpriseMccCacheNodeResourceImpl withExistingEnterpriseMccCustomer(String resourceGroupName,
        String customerResourceName) {
        this.resourceGroupName = resourceGroupName;
        this.customerResourceName = customerResourceName;
        return this;
    }

    public EnterpriseMccCacheNodeResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getEnterpriseMccCacheNodesOperations()
            .createOrUpdate(resourceGroupName, customerResourceName, cacheNodeResourceName, this.innerModel(),
                Context.NONE);
        return this;
    }

    public EnterpriseMccCacheNodeResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnterpriseMccCacheNodesOperations()
            .createOrUpdate(resourceGroupName, customerResourceName, cacheNodeResourceName, this.innerModel(), context);
        return this;
    }

    EnterpriseMccCacheNodeResourceImpl(String name,
        com.azure.resourcemanager.connectedcache.ConnectedCacheManager serviceManager) {
        this.innerObject = new EnterpriseMccCacheNodeResourceInner();
        this.serviceManager = serviceManager;
        this.cacheNodeResourceName = name;
    }

    public EnterpriseMccCacheNodeResourceImpl update() {
        this.updateProperties = new ConnectedCachePatchResource();
        return this;
    }

    public EnterpriseMccCacheNodeResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getEnterpriseMccCacheNodesOperations()
            .updateWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, updateProperties,
                Context.NONE)
            .getValue();
        return this;
    }

    public EnterpriseMccCacheNodeResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnterpriseMccCacheNodesOperations()
            .updateWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, updateProperties,
                context)
            .getValue();
        return this;
    }

    EnterpriseMccCacheNodeResourceImpl(EnterpriseMccCacheNodeResourceInner innerObject,
        com.azure.resourcemanager.connectedcache.ConnectedCacheManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.customerResourceName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "enterpriseMccCustomers");
        this.cacheNodeResourceName
            = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "enterpriseMccCacheNodes");
    }

    public EnterpriseMccCacheNodeResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getEnterpriseMccCacheNodesOperations()
            .getWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, Context.NONE)
            .getValue();
        return this;
    }

    public EnterpriseMccCacheNodeResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnterpriseMccCacheNodesOperations()
            .getWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, context)
            .getValue();
        return this;
    }

    public Response<MccCacheNodeInstallDetails> getCacheNodeInstallDetailsWithResponse(Context context) {
        return serviceManager.enterpriseMccCacheNodesOperations()
            .getCacheNodeInstallDetailsWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName,
                context);
    }

    public MccCacheNodeInstallDetails getCacheNodeInstallDetails() {
        return serviceManager.enterpriseMccCacheNodesOperations()
            .getCacheNodeInstallDetails(resourceGroupName, customerResourceName, cacheNodeResourceName);
    }

    public EnterpriseMccCacheNodeResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EnterpriseMccCacheNodeResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EnterpriseMccCacheNodeResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public EnterpriseMccCacheNodeResourceImpl withProperties(CacheNodeProperty properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
