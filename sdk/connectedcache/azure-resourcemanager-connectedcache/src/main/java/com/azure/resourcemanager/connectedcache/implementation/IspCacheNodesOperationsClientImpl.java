// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.connectedcache.fluent.IspCacheNodesOperationsClient;
import com.azure.resourcemanager.connectedcache.fluent.models.IspCacheNodeResourceInner;
import com.azure.resourcemanager.connectedcache.fluent.models.MccCacheNodeBgpCidrDetailsInner;
import com.azure.resourcemanager.connectedcache.fluent.models.MccCacheNodeInstallDetailsInner;
import com.azure.resourcemanager.connectedcache.implementation.models.IspCacheNodeResourceListResult;
import com.azure.resourcemanager.connectedcache.models.ConnectedCachePatchResource;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in IspCacheNodesOperationsClient.
 */
public final class IspCacheNodesOperationsClientImpl implements IspCacheNodesOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final IspCacheNodesOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final ConnectedCacheManagementClientImpl client;

    /**
     * Initializes an instance of IspCacheNodesOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    IspCacheNodesOperationsClientImpl(ConnectedCacheManagementClientImpl client) {
        this.service = RestProxy.create(IspCacheNodesOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ConnectedCacheManagementClientIspCacheNodesOperations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ConnectedCacheManage")
    public interface IspCacheNodesOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}/ispCacheNodes/{cacheNodeResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IspCacheNodeResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("customerResourceName") String customerResourceName,
            @PathParam("cacheNodeResourceName") String cacheNodeResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}/ispCacheNodes/{cacheNodeResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("customerResourceName") String customerResourceName,
            @PathParam("cacheNodeResourceName") String cacheNodeResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") IspCacheNodeResourceInner resource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}/ispCacheNodes/{cacheNodeResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IspCacheNodeResourceInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("customerResourceName") String customerResourceName,
            @PathParam("cacheNodeResourceName") String cacheNodeResourceName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ConnectedCachePatchResource properties, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}/ispCacheNodes/{cacheNodeResourceName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("customerResourceName") String customerResourceName,
            @PathParam("cacheNodeResourceName") String cacheNodeResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}/ispCacheNodes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IspCacheNodeResourceListResult>> listByIspCustomerResource(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("customerResourceName") String customerResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}/ispCacheNodes/{cacheNodeResourceName}/getBgpCidrs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MccCacheNodeBgpCidrDetailsInner>> getBgpCidrs(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("customerResourceName") String customerResourceName,
            @PathParam("cacheNodeResourceName") String cacheNodeResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}/ispCacheNodes/{cacheNodeResourceName}/getCacheNodeInstallDetails")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<MccCacheNodeInstallDetailsInner>> getCacheNodeInstallDetails(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("customerResourceName") String customerResourceName,
            @PathParam("cacheNodeResourceName") String cacheNodeResourceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IspCacheNodeResourceListResult>> listByIspCustomerResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IspCacheNodeResourceInner>> getWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IspCacheNodeResourceInner>> getWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, customerResourceName, cacheNodeResourceName, accept, context);
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IspCacheNodeResourceInner> getAsync(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        return getWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IspCacheNodeResourceInner> getWithResponse(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, Context context) {
        return getWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, context).block();
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IspCacheNodeResourceInner get(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        return getWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, Context.NONE).getValue();
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, IspCacheNodeResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName,
                contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, IspCacheNodeResourceInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName,
            contentType, accept, resource, context);
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of represents the high level Nodes needed to provision cache node
     * resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<IspCacheNodeResourceInner>, IspCacheNodeResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
        IspCacheNodeResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, resource);
        return this.client.<IspCacheNodeResourceInner, IspCacheNodeResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), IspCacheNodeResourceInner.class, IspCacheNodeResourceInner.class,
            this.client.getContext());
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of represents the high level Nodes needed to provision cache node
     * resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<IspCacheNodeResourceInner>, IspCacheNodeResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
        IspCacheNodeResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, customerResourceName,
            cacheNodeResourceName, resource, context);
        return this.client.<IspCacheNodeResourceInner, IspCacheNodeResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), IspCacheNodeResourceInner.class, IspCacheNodeResourceInner.class, context);
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents the high level Nodes needed to provision cache node
     * resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<IspCacheNodeResourceInner>, IspCacheNodeResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
        IspCacheNodeResourceInner resource) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, resource)
            .getSyncPoller();
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of represents the high level Nodes needed to provision cache node
     * resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<IspCacheNodeResourceInner>, IspCacheNodeResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
        IspCacheNodeResourceInner resource, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, resource, context)
            .getSyncPoller();
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IspCacheNodeResourceInner> createOrUpdateAsync(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, IspCacheNodeResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IspCacheNodeResourceInner> createOrUpdateAsync(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, IspCacheNodeResourceInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, resource,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IspCacheNodeResourceInner createOrUpdate(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, IspCacheNodeResourceInner resource) {
        return createOrUpdateAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, resource).block();
    }

    /**
     * This api creates an ispCacheNode with the specified create parameters.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IspCacheNodeResourceInner createOrUpdate(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, IspCacheNodeResourceInner resource, Context context) {
        return createOrUpdateAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, resource, context)
            .block();
    }

    /**
     * This api updates an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IspCacheNodeResourceInner>> updateWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, ConnectedCachePatchResource properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName,
                contentType, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This api updates an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IspCacheNodeResourceInner>> updateWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, ConnectedCachePatchResource properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, customerResourceName, cacheNodeResourceName, contentType, accept, properties, context);
    }

    /**
     * This api updates an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IspCacheNodeResourceInner> updateAsync(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, ConnectedCachePatchResource properties) {
        return updateWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This api updates an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IspCacheNodeResourceInner> updateWithResponse(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, ConnectedCachePatchResource properties, Context context) {
        return updateWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, properties,
            context).block();
    }

    /**
     * This api updates an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the high level Nodes needed to provision cache node resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IspCacheNodeResourceInner update(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, ConnectedCachePatchResource properties) {
        return updateWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, properties,
            Context.NONE).getValue();
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, customerResourceName, cacheNodeResourceName, accept, context);
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        return this.beginDeleteAsync(resourceGroupName, customerResourceName, cacheNodeResourceName).getSyncPoller();
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, context)
            .getSyncPoller();
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        return beginDeleteAsync(resourceGroupName, customerResourceName, cacheNodeResourceName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String customerResourceName, String cacheNodeResourceName) {
        deleteAsync(resourceGroupName, customerResourceName, cacheNodeResourceName).block();
    }

    /**
     * This api deletes an existing ispCacheNode resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
        Context context) {
        deleteAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, context).block();
    }

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IspCacheNodeResourceInner>>
        listByIspCustomerResourceSinglePageAsync(String resourceGroupName, String customerResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByIspCustomerResource(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, customerResourceName, accept, context))
            .<PagedResponse<IspCacheNodeResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IspCacheNodeResourceInner>> listByIspCustomerResourceSinglePageAsync(
        String resourceGroupName, String customerResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByIspCustomerResource(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, customerResourceName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<IspCacheNodeResourceInner> listByIspCustomerResourceAsync(String resourceGroupName,
        String customerResourceName) {
        return new PagedFlux<>(() -> listByIspCustomerResourceSinglePageAsync(resourceGroupName, customerResourceName),
            nextLink -> listByIspCustomerResourceNextSinglePageAsync(nextLink));
    }

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<IspCacheNodeResourceInner> listByIspCustomerResourceAsync(String resourceGroupName,
        String customerResourceName, Context context) {
        return new PagedFlux<>(
            () -> listByIspCustomerResourceSinglePageAsync(resourceGroupName, customerResourceName, context),
            nextLink -> listByIspCustomerResourceNextSinglePageAsync(nextLink, context));
    }

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IspCacheNodeResourceInner> listByIspCustomerResource(String resourceGroupName,
        String customerResourceName) {
        return new PagedIterable<>(listByIspCustomerResourceAsync(resourceGroupName, customerResourceName));
    }

    /**
     * This api retrieves information about all ispCacheNode resources under the given subscription and resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IspCacheNodeResourceInner> listByIspCustomerResource(String resourceGroupName,
        String customerResourceName, Context context) {
        return new PagedIterable<>(listByIspCustomerResourceAsync(resourceGroupName, customerResourceName, context));
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents all Cidr details of the Bgp request for a specific cache node resource along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MccCacheNodeBgpCidrDetailsInner>> getBgpCidrsWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getBgpCidrs(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents all Cidr details of the Bgp request for a specific cache node resource along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MccCacheNodeBgpCidrDetailsInner>> getBgpCidrsWithResponseAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getBgpCidrs(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName, accept,
            context);
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents all Cidr details of the Bgp request for a specific cache node resource on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MccCacheNodeBgpCidrDetailsInner> getBgpCidrsAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName) {
        return getBgpCidrsWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents all Cidr details of the Bgp request for a specific cache node resource along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MccCacheNodeBgpCidrDetailsInner> getBgpCidrsWithResponse(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context) {
        return getBgpCidrsWithResponseAsync(resourceGroupName, customerResourceName, cacheNodeResourceName, context)
            .block();
    }

    /**
     * This api gets ispCacheNode resource information.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents all Cidr details of the Bgp request for a specific cache node resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MccCacheNodeBgpCidrDetailsInner getBgpCidrs(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        return getBgpCidrsWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, Context.NONE)
            .getValue();
    }

    /**
     * This api gets secrets of the ispCacheNode resource install details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mcc cache node resource all install details along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MccCacheNodeInstallDetailsInner>> getCacheNodeInstallDetailsWithResponseAsync(
        String resourceGroupName, String customerResourceName, String cacheNodeResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getCacheNodeInstallDetails(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, customerResourceName,
                cacheNodeResourceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * This api gets secrets of the ispCacheNode resource install details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mcc cache node resource all install details along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<MccCacheNodeInstallDetailsInner>> getCacheNodeInstallDetailsWithResponseAsync(
        String resourceGroupName, String customerResourceName, String cacheNodeResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (customerResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter customerResourceName is required and cannot be null."));
        }
        if (cacheNodeResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cacheNodeResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getCacheNodeInstallDetails(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, customerResourceName, cacheNodeResourceName, accept,
            context);
    }

    /**
     * This api gets secrets of the ispCacheNode resource install details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mcc cache node resource all install details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<MccCacheNodeInstallDetailsInner> getCacheNodeInstallDetailsAsync(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName) {
        return getCacheNodeInstallDetailsWithResponseAsync(resourceGroupName, customerResourceName,
            cacheNodeResourceName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * This api gets secrets of the ispCacheNode resource install details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mcc cache node resource all install details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MccCacheNodeInstallDetailsInner> getCacheNodeInstallDetailsWithResponse(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context) {
        return getCacheNodeInstallDetailsWithResponseAsync(resourceGroupName, customerResourceName,
            cacheNodeResourceName, context).block();
    }

    /**
     * This api gets secrets of the ispCacheNode resource install details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param customerResourceName Name of the Customer resource.
     * @param cacheNodeResourceName Name of the ConnectedCache resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return mcc cache node resource all install details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MccCacheNodeInstallDetailsInner getCacheNodeInstallDetails(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName) {
        return getCacheNodeInstallDetailsWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName,
            Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IspCacheNodeResourceInner>>
        listByIspCustomerResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByIspCustomerResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<IspCacheNodeResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a IspCacheNodeResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IspCacheNodeResourceInner>> listByIspCustomerResourceNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByIspCustomerResourceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
