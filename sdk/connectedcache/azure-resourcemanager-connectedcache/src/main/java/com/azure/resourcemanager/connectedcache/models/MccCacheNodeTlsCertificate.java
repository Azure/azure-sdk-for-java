// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Mcc cache node resource Tls certificate details.
 */
@Immutable
public final class MccCacheNodeTlsCertificate implements JsonSerializable<MccCacheNodeTlsCertificate> {
    /*
     * Mcc cache node Tls certificate status.
     */
    private String actionRequired;

    /*
     * Mcc cache node Tls certificate file name.
     */
    private String certificateFileName;

    /*
     * Mcc cache node Tls certificate thumbprint.
     */
    private String thumbprint;

    /*
     * Mcc cache node Tls certificate expiry date.
     */
    private OffsetDateTime expiryDate;

    /*
     * Mcc cache node Tls certificate not before date.
     */
    private OffsetDateTime notBeforeDate;

    /*
     * Mcc cache node Tls certificate subject name.
     */
    private String subject;

    /*
     * Mcc cache node Tls certificate subject alternate name.
     */
    private String subjectAltName;

    /**
     * Creates an instance of MccCacheNodeTlsCertificate class.
     */
    private MccCacheNodeTlsCertificate() {
    }

    /**
     * Get the actionRequired property: Mcc cache node Tls certificate status.
     * 
     * @return the actionRequired value.
     */
    public String actionRequired() {
        return this.actionRequired;
    }

    /**
     * Get the certificateFileName property: Mcc cache node Tls certificate file name.
     * 
     * @return the certificateFileName value.
     */
    public String certificateFileName() {
        return this.certificateFileName;
    }

    /**
     * Get the thumbprint property: Mcc cache node Tls certificate thumbprint.
     * 
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Get the expiryDate property: Mcc cache node Tls certificate expiry date.
     * 
     * @return the expiryDate value.
     */
    public OffsetDateTime expiryDate() {
        return this.expiryDate;
    }

    /**
     * Get the notBeforeDate property: Mcc cache node Tls certificate not before date.
     * 
     * @return the notBeforeDate value.
     */
    public OffsetDateTime notBeforeDate() {
        return this.notBeforeDate;
    }

    /**
     * Get the subject property: Mcc cache node Tls certificate subject name.
     * 
     * @return the subject value.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * Get the subjectAltName property: Mcc cache node Tls certificate subject alternate name.
     * 
     * @return the subjectAltName value.
     */
    public String subjectAltName() {
        return this.subjectAltName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MccCacheNodeTlsCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MccCacheNodeTlsCertificate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MccCacheNodeTlsCertificate.
     */
    public static MccCacheNodeTlsCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MccCacheNodeTlsCertificate deserializedMccCacheNodeTlsCertificate = new MccCacheNodeTlsCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionRequired".equals(fieldName)) {
                    deserializedMccCacheNodeTlsCertificate.actionRequired = reader.getString();
                } else if ("certificateFileName".equals(fieldName)) {
                    deserializedMccCacheNodeTlsCertificate.certificateFileName = reader.getString();
                } else if ("thumbprint".equals(fieldName)) {
                    deserializedMccCacheNodeTlsCertificate.thumbprint = reader.getString();
                } else if ("expiryDate".equals(fieldName)) {
                    deserializedMccCacheNodeTlsCertificate.expiryDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("notBeforeDate".equals(fieldName)) {
                    deserializedMccCacheNodeTlsCertificate.notBeforeDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("subject".equals(fieldName)) {
                    deserializedMccCacheNodeTlsCertificate.subject = reader.getString();
                } else if ("subjectAltName".equals(fieldName)) {
                    deserializedMccCacheNodeTlsCertificate.subjectAltName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMccCacheNodeTlsCertificate;
        });
    }
}
