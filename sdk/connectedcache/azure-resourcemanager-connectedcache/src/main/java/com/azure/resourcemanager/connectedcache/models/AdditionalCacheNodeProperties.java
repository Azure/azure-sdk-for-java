// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Model representing cache node for connected cache resource.
 */
@Fluent
public final class AdditionalCacheNodeProperties implements JsonSerializable<AdditionalCacheNodeProperties> {
    /*
     * issues list to return the issues as part of the additional cache node properties
     */
    private List<String> cacheNodePropertiesDetailsIssuesList;

    /*
     * Cache node resource aggregated status details.
     */
    private String aggregatedStatusDetails;

    /*
     * Cache node resource aggregated status text.
     */
    private String aggregatedStatusText;

    /*
     * Cache node resource aggregated status code.
     */
    private Integer aggregatedStatusCode;

    /*
     * Cache node resource Mcc product version.
     */
    private String productVersion;

    /*
     * Cache node resource flag indicating if cache node has been physically installed or provisioned on their physical
     * lab.
     */
    private Boolean isProvisioned;

    /*
     * Cache node resource detailed state text.
     */
    private String cacheNodeStateDetailedText;

    /*
     * Cache node resource short state text.
     */
    private String cacheNodeStateShortText;

    /*
     * Cache node resource state as integer.
     */
    private Integer cacheNodeState;

    /*
     * Cache node resource drive configurations.
     */
    private List<CacheNodeDriveConfiguration> driveConfiguration;

    /*
     * Cache node resource Bgp configuration.
     */
    private BgpConfiguration bgpConfiguration;

    /*
     * proxyUrl configuration of the cache node
     */
    private ProxyUrlConfiguration proxyUrlConfiguration;

    /*
     * Cache node resource Mcc proxy Url
     */
    private String proxyUrl;

    /*
     * Cache node resource requires a proxy
     */
    private ProxyRequired isProxyRequired;

    /*
     * Operating system of the cache node
     */
    private OsType osType;

    /*
     * Update Cycle Type
     */
    private CycleType updateCycleType;

    /*
     * Auto update or fast update version
     */
    private String autoUpdateVersion;

    /*
     * Update related information details
     */
    private String updateInfoDetails;

    /*
     * customer requested date time for mcc install of update cycle
     */
    private OffsetDateTime updateRequestedDateTime;

    /*
     * Auto update version that is the Next available version to update on mcc cache node
     */
    private String autoUpdateNextAvailableVersion;

    /*
     * Auto update last applied date time of mcc install
     */
    private OffsetDateTime autoUpdateNextAvailableDateTime;

    /*
     * Auto update version that is the applied to update on mcc cache node
     */
    private String autoUpdateAppliedVersion;

    /*
     * Auto Update status details from the backend after applying the new version details
     */
    private String autoUpdateLastAppliedDetails;

    /*
     * Last applied auto update state for mcc install of auto update cycle
     */
    private String autoUpdateLastAppliedState;

    /*
     * Auto update last applied date time of mcc install
     */
    private OffsetDateTime autoUpdateLastAppliedDateTime;

    /*
     * Auto update last triggered date time of mcc install
     */
    private OffsetDateTime autoUpdateLastTriggeredDateTime;

    /*
     * Optional property #1 of Mcc response object
     */
    private String optionalProperty1;

    /*
     * Optional property #2 of Mcc response object
     */
    private String optionalProperty2;

    /*
     * Optional property #3 of Mcc response object
     */
    private String optionalProperty3;

    /*
     * Optional property #4 of Mcc response object
     */
    private String optionalProperty4;

    /*
     * Optional property #5 of Mcc response object
     */
    private String optionalProperty5;

    /**
     * Creates an instance of AdditionalCacheNodeProperties class.
     */
    public AdditionalCacheNodeProperties() {
    }

    /**
     * Get the cacheNodePropertiesDetailsIssuesList property: issues list to return the issues as part of the additional
     * cache node properties.
     * 
     * @return the cacheNodePropertiesDetailsIssuesList value.
     */
    public List<String> cacheNodePropertiesDetailsIssuesList() {
        return this.cacheNodePropertiesDetailsIssuesList;
    }

    /**
     * Set the cacheNodePropertiesDetailsIssuesList property: issues list to return the issues as part of the additional
     * cache node properties.
     * 
     * @param cacheNodePropertiesDetailsIssuesList the cacheNodePropertiesDetailsIssuesList value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties
        withCacheNodePropertiesDetailsIssuesList(List<String> cacheNodePropertiesDetailsIssuesList) {
        this.cacheNodePropertiesDetailsIssuesList = cacheNodePropertiesDetailsIssuesList;
        return this;
    }

    /**
     * Get the aggregatedStatusDetails property: Cache node resource aggregated status details.
     * 
     * @return the aggregatedStatusDetails value.
     */
    public String aggregatedStatusDetails() {
        return this.aggregatedStatusDetails;
    }

    /**
     * Get the aggregatedStatusText property: Cache node resource aggregated status text.
     * 
     * @return the aggregatedStatusText value.
     */
    public String aggregatedStatusText() {
        return this.aggregatedStatusText;
    }

    /**
     * Get the aggregatedStatusCode property: Cache node resource aggregated status code.
     * 
     * @return the aggregatedStatusCode value.
     */
    public Integer aggregatedStatusCode() {
        return this.aggregatedStatusCode;
    }

    /**
     * Get the productVersion property: Cache node resource Mcc product version.
     * 
     * @return the productVersion value.
     */
    public String productVersion() {
        return this.productVersion;
    }

    /**
     * Get the isProvisioned property: Cache node resource flag indicating if cache node has been physically installed
     * or provisioned on their physical lab.
     * 
     * @return the isProvisioned value.
     */
    public Boolean isProvisioned() {
        return this.isProvisioned;
    }

    /**
     * Get the cacheNodeStateDetailedText property: Cache node resource detailed state text.
     * 
     * @return the cacheNodeStateDetailedText value.
     */
    public String cacheNodeStateDetailedText() {
        return this.cacheNodeStateDetailedText;
    }

    /**
     * Get the cacheNodeStateShortText property: Cache node resource short state text.
     * 
     * @return the cacheNodeStateShortText value.
     */
    public String cacheNodeStateShortText() {
        return this.cacheNodeStateShortText;
    }

    /**
     * Get the cacheNodeState property: Cache node resource state as integer.
     * 
     * @return the cacheNodeState value.
     */
    public Integer cacheNodeState() {
        return this.cacheNodeState;
    }

    /**
     * Get the driveConfiguration property: Cache node resource drive configurations.
     * 
     * @return the driveConfiguration value.
     */
    public List<CacheNodeDriveConfiguration> driveConfiguration() {
        return this.driveConfiguration;
    }

    /**
     * Set the driveConfiguration property: Cache node resource drive configurations.
     * 
     * @param driveConfiguration the driveConfiguration value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withDriveConfiguration(List<CacheNodeDriveConfiguration> driveConfiguration) {
        this.driveConfiguration = driveConfiguration;
        return this;
    }

    /**
     * Get the bgpConfiguration property: Cache node resource Bgp configuration.
     * 
     * @return the bgpConfiguration value.
     */
    public BgpConfiguration bgpConfiguration() {
        return this.bgpConfiguration;
    }

    /**
     * Set the bgpConfiguration property: Cache node resource Bgp configuration.
     * 
     * @param bgpConfiguration the bgpConfiguration value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withBgpConfiguration(BgpConfiguration bgpConfiguration) {
        this.bgpConfiguration = bgpConfiguration;
        return this;
    }

    /**
     * Get the proxyUrlConfiguration property: proxyUrl configuration of the cache node.
     * 
     * @return the proxyUrlConfiguration value.
     */
    public ProxyUrlConfiguration proxyUrlConfiguration() {
        return this.proxyUrlConfiguration;
    }

    /**
     * Set the proxyUrlConfiguration property: proxyUrl configuration of the cache node.
     * 
     * @param proxyUrlConfiguration the proxyUrlConfiguration value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withProxyUrlConfiguration(ProxyUrlConfiguration proxyUrlConfiguration) {
        this.proxyUrlConfiguration = proxyUrlConfiguration;
        return this;
    }

    /**
     * Get the proxyUrl property: Cache node resource Mcc proxy Url.
     * 
     * @return the proxyUrl value.
     */
    public String proxyUrl() {
        return this.proxyUrl;
    }

    /**
     * Set the proxyUrl property: Cache node resource Mcc proxy Url.
     * 
     * @param proxyUrl the proxyUrl value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withProxyUrl(String proxyUrl) {
        this.proxyUrl = proxyUrl;
        return this;
    }

    /**
     * Get the isProxyRequired property: Cache node resource requires a proxy.
     * 
     * @return the isProxyRequired value.
     */
    public ProxyRequired isProxyRequired() {
        return this.isProxyRequired;
    }

    /**
     * Set the isProxyRequired property: Cache node resource requires a proxy.
     * 
     * @param isProxyRequired the isProxyRequired value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withIsProxyRequired(ProxyRequired isProxyRequired) {
        this.isProxyRequired = isProxyRequired;
        return this;
    }

    /**
     * Get the osType property: Operating system of the cache node.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Operating system of the cache node.
     * 
     * @param osType the osType value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the updateCycleType property: Update Cycle Type.
     * 
     * @return the updateCycleType value.
     */
    public CycleType updateCycleType() {
        return this.updateCycleType;
    }

    /**
     * Set the updateCycleType property: Update Cycle Type.
     * 
     * @param updateCycleType the updateCycleType value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withUpdateCycleType(CycleType updateCycleType) {
        this.updateCycleType = updateCycleType;
        return this;
    }

    /**
     * Get the autoUpdateVersion property: Auto update or fast update version.
     * 
     * @return the autoUpdateVersion value.
     */
    public String autoUpdateVersion() {
        return this.autoUpdateVersion;
    }

    /**
     * Set the autoUpdateVersion property: Auto update or fast update version.
     * 
     * @param autoUpdateVersion the autoUpdateVersion value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withAutoUpdateVersion(String autoUpdateVersion) {
        this.autoUpdateVersion = autoUpdateVersion;
        return this;
    }

    /**
     * Get the updateInfoDetails property: Update related information details.
     * 
     * @return the updateInfoDetails value.
     */
    public String updateInfoDetails() {
        return this.updateInfoDetails;
    }

    /**
     * Set the updateInfoDetails property: Update related information details.
     * 
     * @param updateInfoDetails the updateInfoDetails value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withUpdateInfoDetails(String updateInfoDetails) {
        this.updateInfoDetails = updateInfoDetails;
        return this;
    }

    /**
     * Get the updateRequestedDateTime property: customer requested date time for mcc install of update cycle.
     * 
     * @return the updateRequestedDateTime value.
     */
    public OffsetDateTime updateRequestedDateTime() {
        return this.updateRequestedDateTime;
    }

    /**
     * Set the updateRequestedDateTime property: customer requested date time for mcc install of update cycle.
     * 
     * @param updateRequestedDateTime the updateRequestedDateTime value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withUpdateRequestedDateTime(OffsetDateTime updateRequestedDateTime) {
        this.updateRequestedDateTime = updateRequestedDateTime;
        return this;
    }

    /**
     * Get the autoUpdateNextAvailableVersion property: Auto update version that is the Next available version to update
     * on mcc cache node.
     * 
     * @return the autoUpdateNextAvailableVersion value.
     */
    public String autoUpdateNextAvailableVersion() {
        return this.autoUpdateNextAvailableVersion;
    }

    /**
     * Get the autoUpdateNextAvailableDateTime property: Auto update last applied date time of mcc install.
     * 
     * @return the autoUpdateNextAvailableDateTime value.
     */
    public OffsetDateTime autoUpdateNextAvailableDateTime() {
        return this.autoUpdateNextAvailableDateTime;
    }

    /**
     * Get the autoUpdateAppliedVersion property: Auto update version that is the applied to update on mcc cache node.
     * 
     * @return the autoUpdateAppliedVersion value.
     */
    public String autoUpdateAppliedVersion() {
        return this.autoUpdateAppliedVersion;
    }

    /**
     * Get the autoUpdateLastAppliedDetails property: Auto Update status details from the backend after applying the new
     * version details.
     * 
     * @return the autoUpdateLastAppliedDetails value.
     */
    public String autoUpdateLastAppliedDetails() {
        return this.autoUpdateLastAppliedDetails;
    }

    /**
     * Get the autoUpdateLastAppliedState property: Last applied auto update state for mcc install of auto update cycle.
     * 
     * @return the autoUpdateLastAppliedState value.
     */
    public String autoUpdateLastAppliedState() {
        return this.autoUpdateLastAppliedState;
    }

    /**
     * Get the autoUpdateLastAppliedDateTime property: Auto update last applied date time of mcc install.
     * 
     * @return the autoUpdateLastAppliedDateTime value.
     */
    public OffsetDateTime autoUpdateLastAppliedDateTime() {
        return this.autoUpdateLastAppliedDateTime;
    }

    /**
     * Get the autoUpdateLastTriggeredDateTime property: Auto update last triggered date time of mcc install.
     * 
     * @return the autoUpdateLastTriggeredDateTime value.
     */
    public OffsetDateTime autoUpdateLastTriggeredDateTime() {
        return this.autoUpdateLastTriggeredDateTime;
    }

    /**
     * Get the optionalProperty1 property: Optional property #1 of Mcc response object.
     * 
     * @return the optionalProperty1 value.
     */
    public String optionalProperty1() {
        return this.optionalProperty1;
    }

    /**
     * Set the optionalProperty1 property: Optional property #1 of Mcc response object.
     * 
     * @param optionalProperty1 the optionalProperty1 value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withOptionalProperty1(String optionalProperty1) {
        this.optionalProperty1 = optionalProperty1;
        return this;
    }

    /**
     * Get the optionalProperty2 property: Optional property #2 of Mcc response object.
     * 
     * @return the optionalProperty2 value.
     */
    public String optionalProperty2() {
        return this.optionalProperty2;
    }

    /**
     * Set the optionalProperty2 property: Optional property #2 of Mcc response object.
     * 
     * @param optionalProperty2 the optionalProperty2 value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withOptionalProperty2(String optionalProperty2) {
        this.optionalProperty2 = optionalProperty2;
        return this;
    }

    /**
     * Get the optionalProperty3 property: Optional property #3 of Mcc response object.
     * 
     * @return the optionalProperty3 value.
     */
    public String optionalProperty3() {
        return this.optionalProperty3;
    }

    /**
     * Set the optionalProperty3 property: Optional property #3 of Mcc response object.
     * 
     * @param optionalProperty3 the optionalProperty3 value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withOptionalProperty3(String optionalProperty3) {
        this.optionalProperty3 = optionalProperty3;
        return this;
    }

    /**
     * Get the optionalProperty4 property: Optional property #4 of Mcc response object.
     * 
     * @return the optionalProperty4 value.
     */
    public String optionalProperty4() {
        return this.optionalProperty4;
    }

    /**
     * Set the optionalProperty4 property: Optional property #4 of Mcc response object.
     * 
     * @param optionalProperty4 the optionalProperty4 value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withOptionalProperty4(String optionalProperty4) {
        this.optionalProperty4 = optionalProperty4;
        return this;
    }

    /**
     * Get the optionalProperty5 property: Optional property #5 of Mcc response object.
     * 
     * @return the optionalProperty5 value.
     */
    public String optionalProperty5() {
        return this.optionalProperty5;
    }

    /**
     * Set the optionalProperty5 property: Optional property #5 of Mcc response object.
     * 
     * @param optionalProperty5 the optionalProperty5 value to set.
     * @return the AdditionalCacheNodeProperties object itself.
     */
    public AdditionalCacheNodeProperties withOptionalProperty5(String optionalProperty5) {
        this.optionalProperty5 = optionalProperty5;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (driveConfiguration() != null) {
            driveConfiguration().forEach(e -> e.validate());
        }
        if (bgpConfiguration() != null) {
            bgpConfiguration().validate();
        }
        if (proxyUrlConfiguration() != null) {
            proxyUrlConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("cacheNodePropertiesDetailsIssuesList", this.cacheNodePropertiesDetailsIssuesList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("driveConfiguration", this.driveConfiguration,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("bgpConfiguration", this.bgpConfiguration);
        jsonWriter.writeJsonField("proxyUrlConfiguration", this.proxyUrlConfiguration);
        jsonWriter.writeStringField("proxyUrl", this.proxyUrl);
        jsonWriter.writeStringField("isProxyRequired",
            this.isProxyRequired == null ? null : this.isProxyRequired.toString());
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeStringField("updateCycleType",
            this.updateCycleType == null ? null : this.updateCycleType.toString());
        jsonWriter.writeStringField("autoUpdateVersion", this.autoUpdateVersion);
        jsonWriter.writeStringField("updateInfoDetails", this.updateInfoDetails);
        jsonWriter.writeStringField("updateRequestedDateTime",
            this.updateRequestedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updateRequestedDateTime));
        jsonWriter.writeStringField("optionalProperty1", this.optionalProperty1);
        jsonWriter.writeStringField("optionalProperty2", this.optionalProperty2);
        jsonWriter.writeStringField("optionalProperty3", this.optionalProperty3);
        jsonWriter.writeStringField("optionalProperty4", this.optionalProperty4);
        jsonWriter.writeStringField("optionalProperty5", this.optionalProperty5);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdditionalCacheNodeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdditionalCacheNodeProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdditionalCacheNodeProperties.
     */
    public static AdditionalCacheNodeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdditionalCacheNodeProperties deserializedAdditionalCacheNodeProperties
                = new AdditionalCacheNodeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cacheNodePropertiesDetailsIssuesList".equals(fieldName)) {
                    List<String> cacheNodePropertiesDetailsIssuesList
                        = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdditionalCacheNodeProperties.cacheNodePropertiesDetailsIssuesList
                        = cacheNodePropertiesDetailsIssuesList;
                } else if ("aggregatedStatusDetails".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.aggregatedStatusDetails = reader.getString();
                } else if ("aggregatedStatusText".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.aggregatedStatusText = reader.getString();
                } else if ("aggregatedStatusCode".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.aggregatedStatusCode
                        = reader.getNullable(JsonReader::getInt);
                } else if ("productVersion".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.productVersion = reader.getString();
                } else if ("isProvisioned".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.isProvisioned
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("cacheNodeStateDetailedText".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.cacheNodeStateDetailedText = reader.getString();
                } else if ("cacheNodeStateShortText".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.cacheNodeStateShortText = reader.getString();
                } else if ("cacheNodeState".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.cacheNodeState = reader.getNullable(JsonReader::getInt);
                } else if ("driveConfiguration".equals(fieldName)) {
                    List<CacheNodeDriveConfiguration> driveConfiguration
                        = reader.readArray(reader1 -> CacheNodeDriveConfiguration.fromJson(reader1));
                    deserializedAdditionalCacheNodeProperties.driveConfiguration = driveConfiguration;
                } else if ("bgpConfiguration".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.bgpConfiguration = BgpConfiguration.fromJson(reader);
                } else if ("proxyUrlConfiguration".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.proxyUrlConfiguration
                        = ProxyUrlConfiguration.fromJson(reader);
                } else if ("proxyUrl".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.proxyUrl = reader.getString();
                } else if ("isProxyRequired".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.isProxyRequired
                        = ProxyRequired.fromString(reader.getString());
                } else if ("osType".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.osType = OsType.fromString(reader.getString());
                } else if ("updateCycleType".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.updateCycleType
                        = CycleType.fromString(reader.getString());
                } else if ("autoUpdateVersion".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateVersion = reader.getString();
                } else if ("updateInfoDetails".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.updateInfoDetails = reader.getString();
                } else if ("updateRequestedDateTime".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.updateRequestedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("autoUpdateNextAvailableVersion".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateNextAvailableVersion = reader.getString();
                } else if ("autoUpdateNextAvailableDateTime".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateNextAvailableDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("autoUpdateAppliedVersion".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateAppliedVersion = reader.getString();
                } else if ("autoUpdateLastAppliedDetails".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateLastAppliedDetails = reader.getString();
                } else if ("autoUpdateLastAppliedState".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateLastAppliedState = reader.getString();
                } else if ("autoUpdateLastAppliedDateTime".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateLastAppliedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("autoUpdateLastTriggeredDateTime".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.autoUpdateLastTriggeredDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("optionalProperty1".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.optionalProperty1 = reader.getString();
                } else if ("optionalProperty2".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.optionalProperty2 = reader.getString();
                } else if ("optionalProperty3".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.optionalProperty3 = reader.getString();
                } else if ("optionalProperty4".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.optionalProperty4 = reader.getString();
                } else if ("optionalProperty5".equals(fieldName)) {
                    deserializedAdditionalCacheNodeProperties.optionalProperty5 = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdditionalCacheNodeProperties;
        });
    }
}
