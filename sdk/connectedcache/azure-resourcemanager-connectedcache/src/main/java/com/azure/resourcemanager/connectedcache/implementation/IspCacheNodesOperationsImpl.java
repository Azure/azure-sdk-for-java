// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.connectedcache.fluent.IspCacheNodesOperationsClient;
import com.azure.resourcemanager.connectedcache.fluent.models.IspCacheNodeResourceInner;
import com.azure.resourcemanager.connectedcache.fluent.models.MccCacheNodeBgpCidrDetailsInner;
import com.azure.resourcemanager.connectedcache.fluent.models.MccCacheNodeInstallDetailsInner;
import com.azure.resourcemanager.connectedcache.models.IspCacheNodeResource;
import com.azure.resourcemanager.connectedcache.models.IspCacheNodesOperations;
import com.azure.resourcemanager.connectedcache.models.MccCacheNodeBgpCidrDetails;
import com.azure.resourcemanager.connectedcache.models.MccCacheNodeInstallDetails;

public final class IspCacheNodesOperationsImpl implements IspCacheNodesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(IspCacheNodesOperationsImpl.class);

    private final IspCacheNodesOperationsClient innerClient;

    private final com.azure.resourcemanager.connectedcache.ConnectedCacheManager serviceManager;

    public IspCacheNodesOperationsImpl(IspCacheNodesOperationsClient innerClient,
        com.azure.resourcemanager.connectedcache.ConnectedCacheManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<IspCacheNodeResource> getWithResponse(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName, Context context) {
        Response<IspCacheNodeResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IspCacheNodeResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IspCacheNodeResource get(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        IspCacheNodeResourceInner inner
            = this.serviceClient().get(resourceGroupName, customerResourceName, cacheNodeResourceName);
        if (inner != null) {
            return new IspCacheNodeResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String customerResourceName, String cacheNodeResourceName) {
        this.serviceClient().delete(resourceGroupName, customerResourceName, cacheNodeResourceName);
    }

    public void delete(String resourceGroupName, String customerResourceName, String cacheNodeResourceName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, customerResourceName, cacheNodeResourceName, context);
    }

    public PagedIterable<IspCacheNodeResource> listByIspCustomerResource(String resourceGroupName,
        String customerResourceName) {
        PagedIterable<IspCacheNodeResourceInner> inner
            = this.serviceClient().listByIspCustomerResource(resourceGroupName, customerResourceName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IspCacheNodeResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<IspCacheNodeResource> listByIspCustomerResource(String resourceGroupName,
        String customerResourceName, Context context) {
        PagedIterable<IspCacheNodeResourceInner> inner
            = this.serviceClient().listByIspCustomerResource(resourceGroupName, customerResourceName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IspCacheNodeResourceImpl(inner1, this.manager()));
    }

    public Response<MccCacheNodeBgpCidrDetails> getBgpCidrsWithResponse(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context) {
        Response<MccCacheNodeBgpCidrDetailsInner> inner = this.serviceClient()
            .getBgpCidrsWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MccCacheNodeBgpCidrDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MccCacheNodeBgpCidrDetails getBgpCidrs(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        MccCacheNodeBgpCidrDetailsInner inner
            = this.serviceClient().getBgpCidrs(resourceGroupName, customerResourceName, cacheNodeResourceName);
        if (inner != null) {
            return new MccCacheNodeBgpCidrDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MccCacheNodeInstallDetails> getCacheNodeInstallDetailsWithResponse(String resourceGroupName,
        String customerResourceName, String cacheNodeResourceName, Context context) {
        Response<MccCacheNodeInstallDetailsInner> inner = this.serviceClient()
            .getCacheNodeInstallDetailsWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MccCacheNodeInstallDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MccCacheNodeInstallDetails getCacheNodeInstallDetails(String resourceGroupName, String customerResourceName,
        String cacheNodeResourceName) {
        MccCacheNodeInstallDetailsInner inner = this.serviceClient()
            .getCacheNodeInstallDetails(resourceGroupName, customerResourceName, cacheNodeResourceName);
        if (inner != null) {
            return new MccCacheNodeInstallDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public IspCacheNodeResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String customerResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCustomers");
        if (customerResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCustomers'.", id)));
        }
        String cacheNodeResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCacheNodes");
        if (cacheNodeResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCacheNodes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, Context.NONE)
            .getValue();
    }

    public Response<IspCacheNodeResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String customerResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCustomers");
        if (customerResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCustomers'.", id)));
        }
        String cacheNodeResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCacheNodes");
        if (cacheNodeResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCacheNodes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, customerResourceName, cacheNodeResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String customerResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCustomers");
        if (customerResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCustomers'.", id)));
        }
        String cacheNodeResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCacheNodes");
        if (cacheNodeResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCacheNodes'.", id)));
        }
        this.delete(resourceGroupName, customerResourceName, cacheNodeResourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String customerResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCustomers");
        if (customerResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCustomers'.", id)));
        }
        String cacheNodeResourceName = ResourceManagerUtils.getValueFromIdByName(id, "ispCacheNodes");
        if (cacheNodeResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ispCacheNodes'.", id)));
        }
        this.delete(resourceGroupName, customerResourceName, cacheNodeResourceName, context);
    }

    private IspCacheNodesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.connectedcache.ConnectedCacheManager manager() {
        return this.serviceManager;
    }

    public IspCacheNodeResourceImpl define(String name) {
        return new IspCacheNodeResourceImpl(name, this.manager());
    }
}
