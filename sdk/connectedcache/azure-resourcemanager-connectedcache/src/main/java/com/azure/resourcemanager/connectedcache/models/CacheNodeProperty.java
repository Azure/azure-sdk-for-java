// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model representing an Mcc cache node connectedCache resource.
 */
@Fluent
public final class CacheNodeProperty implements JsonSerializable<CacheNodeProperty> {
    /*
     * The provisioned state of the resource
     */
    private ProvisioningState provisioningState;

    /*
     * Mcc cache node resource (cache node entity).
     */
    private CacheNodeEntity cacheNode;

    /*
     * Mcc cache node resource additional properties.
     */
    private AdditionalCacheNodeProperties additionalCacheNodeProperties;

    /*
     * Mcc response status code.
     */
    private String statusCode;

    /*
     * Mcc response status text as string for retrieving status details.
     */
    private String statusText;

    /*
     * Mcc response status details for retrieving response inner details.
     */
    private String statusDetails;

    /*
     * HTTP error status code.
     */
    private String status;

    /*
     * Mcc response error details.
     */
    private ManagementError error;

    /**
     * Creates an instance of CacheNodeProperty class.
     */
    public CacheNodeProperty() {
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the cacheNode property: Mcc cache node resource (cache node entity).
     * 
     * @return the cacheNode value.
     */
    public CacheNodeEntity cacheNode() {
        return this.cacheNode;
    }

    /**
     * Set the cacheNode property: Mcc cache node resource (cache node entity).
     * 
     * @param cacheNode the cacheNode value to set.
     * @return the CacheNodeProperty object itself.
     */
    public CacheNodeProperty withCacheNode(CacheNodeEntity cacheNode) {
        this.cacheNode = cacheNode;
        return this;
    }

    /**
     * Get the additionalCacheNodeProperties property: Mcc cache node resource additional properties.
     * 
     * @return the additionalCacheNodeProperties value.
     */
    public AdditionalCacheNodeProperties additionalCacheNodeProperties() {
        return this.additionalCacheNodeProperties;
    }

    /**
     * Set the additionalCacheNodeProperties property: Mcc cache node resource additional properties.
     * 
     * @param additionalCacheNodeProperties the additionalCacheNodeProperties value to set.
     * @return the CacheNodeProperty object itself.
     */
    public CacheNodeProperty
        withAdditionalCacheNodeProperties(AdditionalCacheNodeProperties additionalCacheNodeProperties) {
        this.additionalCacheNodeProperties = additionalCacheNodeProperties;
        return this;
    }

    /**
     * Get the statusCode property: Mcc response status code.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.statusCode;
    }

    /**
     * Set the statusCode property: Mcc response status code.
     * 
     * @param statusCode the statusCode value to set.
     * @return the CacheNodeProperty object itself.
     */
    public CacheNodeProperty withStatusCode(String statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Get the statusText property: Mcc response status text as string for retrieving status details.
     * 
     * @return the statusText value.
     */
    public String statusText() {
        return this.statusText;
    }

    /**
     * Set the statusText property: Mcc response status text as string for retrieving status details.
     * 
     * @param statusText the statusText value to set.
     * @return the CacheNodeProperty object itself.
     */
    public CacheNodeProperty withStatusText(String statusText) {
        this.statusText = statusText;
        return this;
    }

    /**
     * Get the statusDetails property: Mcc response status details for retrieving response inner details.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Set the statusDetails property: Mcc response status details for retrieving response inner details.
     * 
     * @param statusDetails the statusDetails value to set.
     * @return the CacheNodeProperty object itself.
     */
    public CacheNodeProperty withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }

    /**
     * Get the status property: HTTP error status code.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the error property: Mcc response error details.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: Mcc response error details.
     * 
     * @param error the error value to set.
     * @return the CacheNodeProperty object itself.
     */
    public CacheNodeProperty withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cacheNode() != null) {
            cacheNode().validate();
        }
        if (additionalCacheNodeProperties() != null) {
            additionalCacheNodeProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("cacheNode", this.cacheNode);
        jsonWriter.writeJsonField("additionalCacheNodeProperties", this.additionalCacheNodeProperties);
        jsonWriter.writeStringField("statusCode", this.statusCode);
        jsonWriter.writeStringField("statusText", this.statusText);
        jsonWriter.writeStringField("statusDetails", this.statusDetails);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheNodeProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheNodeProperty if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CacheNodeProperty.
     */
    public static CacheNodeProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheNodeProperty deserializedCacheNodeProperty = new CacheNodeProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCacheNodeProperty.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("cacheNode".equals(fieldName)) {
                    deserializedCacheNodeProperty.cacheNode = CacheNodeEntity.fromJson(reader);
                } else if ("additionalCacheNodeProperties".equals(fieldName)) {
                    deserializedCacheNodeProperty.additionalCacheNodeProperties
                        = AdditionalCacheNodeProperties.fromJson(reader);
                } else if ("statusCode".equals(fieldName)) {
                    deserializedCacheNodeProperty.statusCode = reader.getString();
                } else if ("statusText".equals(fieldName)) {
                    deserializedCacheNodeProperty.statusText = reader.getString();
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedCacheNodeProperty.statusDetails = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedCacheNodeProperty.status = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedCacheNodeProperty.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheNodeProperty;
        });
    }
}
