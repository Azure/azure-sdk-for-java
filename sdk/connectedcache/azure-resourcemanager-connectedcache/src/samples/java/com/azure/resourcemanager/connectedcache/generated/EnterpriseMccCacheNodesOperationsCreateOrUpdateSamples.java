// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.generated;

import com.azure.core.management.exception.ManagementError;
import com.azure.resourcemanager.connectedcache.models.AdditionalCacheNodeProperties;
import com.azure.resourcemanager.connectedcache.models.BgpConfiguration;
import com.azure.resourcemanager.connectedcache.models.CacheNodeDriveConfiguration;
import com.azure.resourcemanager.connectedcache.models.CacheNodeEntity;
import com.azure.resourcemanager.connectedcache.models.CacheNodeProperty;
import com.azure.resourcemanager.connectedcache.models.ProxyUrlConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EnterpriseMccCacheNodesOperations CreateOrUpdate.
 */
public final class EnterpriseMccCacheNodesOperationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2023-05-01-preview/EnterpriseMccCacheNodesOperations_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Creates an enterpriseMccCacheNode resource - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ConnectedCacheManager.
     */
    public static void createsAnEnterpriseMccCacheNodeResourceGeneratedByMaximumSetRule(
        com.azure.resourcemanager.connectedcache.ConnectedCacheManager manager) {
        manager.enterpriseMccCacheNodesOperations()
            .define("fgduqdovidpemlnmhelomffuafdrbgaasqznvrdkbvspfzsnrhncdtqquhijhdpwyzwleukqldpceyxqhqlftqrr")
            .withRegion("westus")
            .withExistingEnterpriseMccCustomer("rgConnectedCache", "nhdkvstdrrtsxxuz")
            .withTags(mapOf("key259", "fakeTokenPlaceholder"))
            .withProperties(new CacheNodeProperty()
                .withCacheNode(new CacheNodeEntity().withFullyQualifiedResourceId("yeinlleavzbehelhsucb")
                    .withCustomerName("zsklcocjfjhkcpmzyefzkwamdzc")
                    .withIpAddress("gbfkdhloyphnpnhemwrcrxlk")
                    .withCustomerIndex("vafvezmelfgmjsrccjukrhppljvipg")
                    .withCacheNodeId("fmrjefyddfn")
                    .withCacheNodeName("qppvqxliajjfoalzjbgmxggr")
                    .withCustomerAsn(25)
                    .withIsEnabled(true)
                    .withMaxAllowableEgressInMbps(27)
                    .withIsEnterpriseManaged(true)
                    .withCidrCsv(Arrays.asList("nlqlvrthafvvljuupcbcw"))
                    .withShouldMigrate(true)
                    .withCidrSelectionType(11))
                .withAdditionalCacheNodeProperties(new AdditionalCacheNodeProperties()
                    .withCacheNodePropertiesDetailsIssuesList(Arrays.asList("ennbzfpuszgalzpawmwicaofqcwcj"))
                    .withDriveConfiguration(
                        Arrays.asList(new CacheNodeDriveConfiguration().withPhysicalPath("pcbkezoofhamkycot")
                            .withSizeInGb(14)
                            .withCacheNumber(11)
                            .withNginxMapping("cirlpkpuxg")))
                    .withBgpConfiguration(new BgpConfiguration().withAsnToIpAddressMapping("fjbggfvumrn"))
                    .withProxyUrlConfiguration(new ProxyUrlConfiguration().withProxyUrl("hplstyg"))
                    .withProxyUrl("ihkzxlzvpcywtzrogupqozkdud")
                    .withOptionalProperty1("ph")
                    .withOptionalProperty2("soqqgpgcbhb")
                    .withOptionalProperty3("fpnycrbagptsujiotnjfuhlm")
                    .withOptionalProperty4("gesqugrxvhxlxxyvatgrautxwlmxsf")
                    .withOptionalProperty5("zknjgzpaqtvdqjydd"))
                .withStatusCode("fakeTokenPlaceholder")
                .withStatusText("Success")
                .withStatusDetails("lgljxmyyoakw")
                .withError(new ManagementError()))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
