// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.generated;

import com.azure.core.management.exception.ManagementError;
import com.azure.resourcemanager.connectedcache.models.AdditionalCacheNodeProperties;
import com.azure.resourcemanager.connectedcache.models.BgpConfiguration;
import com.azure.resourcemanager.connectedcache.models.CacheNodeDriveConfiguration;
import com.azure.resourcemanager.connectedcache.models.CacheNodeEntity;
import com.azure.resourcemanager.connectedcache.models.CacheNodeProperty;
import com.azure.resourcemanager.connectedcache.models.ProxyUrlConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for IspCacheNodesOperations CreateOrUpdate.
 */
public final class IspCacheNodesOperationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2023-05-01-preview/IspCacheNodesOperations_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: IspCacheNodesOperations_CreateOrUpdate.
     * 
     * @param manager Entry point to ConnectedCacheManager.
     */
    public static void
        ispCacheNodesOperationsCreateOrUpdate(com.azure.resourcemanager.connectedcache.ConnectedCacheManager manager) {
        manager.ispCacheNodesOperations()
            .define("cabakm")
            .withRegion("westus")
            .withExistingIspCustomer("rgConnectedCache", "zpqzbmanlljgmkrthtydrtneavhlnlqkdmviq")
            .withTags(mapOf("key4171", "fakeTokenPlaceholder"))
            .withProperties(new CacheNodeProperty()
                .withCacheNode(new CacheNodeEntity().withFullyQualifiedResourceId("hskxkpbiqbrbjiwdzrxndru")
                    .withCustomerName("xwyqk")
                    .withIpAddress("voctagljcwqgcpnionqdcbjk")
                    .withCustomerIndex("qtoiglqaswivmkjhzogburcxtszmek")
                    .withCacheNodeId("xjzffjftwcgsehanoxsl")
                    .withCacheNodeName("mfjxb")
                    .withCustomerAsn(4)
                    .withIsEnabled(true)
                    .withMaxAllowableEgressInMbps(29)
                    .withIsEnterpriseManaged(true)
                    .withCidrCsv(Arrays.asList("nlqlvrthafvvljuupcbcw"))
                    .withShouldMigrate(true)
                    .withCidrSelectionType(4))
                .withAdditionalCacheNodeProperties(
                    new AdditionalCacheNodeProperties().withCacheNodePropertiesDetailsIssuesList(Arrays.asList("ex"))
                        .withDriveConfiguration(Arrays.asList(new CacheNodeDriveConfiguration().withPhysicalPath("/mcc")
                            .withSizeInGb(500)
                            .withCacheNumber(1)
                            .withNginxMapping("lijygenjq")))
                        .withBgpConfiguration(new BgpConfiguration().withAsnToIpAddressMapping("pafcimhoog"))
                        .withProxyUrlConfiguration(new ProxyUrlConfiguration().withProxyUrl("hplstyg"))
                        .withProxyUrl("qhux")
                        .withOptionalProperty1("hvpmt")
                        .withOptionalProperty2("talanelmsgxvksrzoeeontqkjzbpv")
                        .withOptionalProperty3("bxkoxq")
                        .withOptionalProperty4("pqlkcekupusoc")
                        .withOptionalProperty5("nyvvmrjigqdufzjdvazdca"))
                .withStatusCode("fakeTokenPlaceholder")
                .withStatusText("Success")
                .withStatusDetails("djruqvptzxak")
                .withError(new ManagementError()))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
