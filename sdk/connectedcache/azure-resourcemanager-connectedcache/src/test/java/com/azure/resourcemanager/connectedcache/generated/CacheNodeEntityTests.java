// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.connectedcache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.connectedcache.models.AutoUpdateRingType;
import com.azure.resourcemanager.connectedcache.models.CacheNodeEntity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CacheNodeEntityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CacheNodeEntity model = BinaryData.fromString(
            "{\"fullyQualifiedResourceId\":\"xaxcfjpgddtocjjx\",\"customerId\":\"pmouexhdz\",\"customerName\":\"bqe\",\"ipAddress\":\"nxqbzvddn\",\"customerIndex\":\"ndei\",\"cacheNodeId\":\"twnpzaoqvuhrhcf\",\"cacheNodeName\":\"yd\",\"customerAsn\":1726993489,\"isEnabled\":true,\"maxAllowableEgressInMbps\":553941063,\"maxAllowableProbability\":74.24029426474767,\"xCid\":\"pyeicxm\",\"isEnterpriseManaged\":false,\"createAsyncOperationId\":\"q\",\"deleteAsyncOperationId\":\"khixuigdtopbo\",\"clientTenantId\":\"og\",\"category\":\"e\",\"releaseVersion\":35431541,\"lastSyncWithAzureTimestamp\":\"2021-01-02T08:53:50Z\",\"lastUpdatedTimestamp\":\"2021-01-27T21:23:24Z\",\"synchWithAzureAttemptsCount\":247953507,\"containerConfigurations\":\"yvvtpgvdfgio\",\"cidrCsv\":[\"tutqxlngxlefgug\",\"xkrxdqmi\",\"tthzrvqd\",\"abhjybi\"],\"cidrCsvLastUpdateTime\":\"2021-05-29T13:44:30Z\",\"bgpCidrCsvLastUpdateTime\":\"2021-09-28T08:30:32Z\",\"bgpLastReportedTime\":\"2021-05-21T18:09:19Z\",\"bgpReviewStateText\":\"wska\",\"bgpReviewState\":\"Approved\",\"bgpReviewFeedback\":\"zlcuiywgqywgndrv\",\"bgpNumberOfTimesUpdated\":2138839355,\"bgpNumberOfRecords\":19075135,\"bgpCidrBlocksCount\":523315995,\"bgpAddressSpace\":1097246502,\"shouldMigrate\":true,\"bgpFileBytesTruncated\":485990541,\"cidrSelectionType\":776269865,\"isFrozen\":false,\"reviewState\":1827981696,\"reviewStateText\":\"vmmcoofs\",\"reviewFeedback\":\"zevgb\",\"configurationState\":\"NotConfigured_Ip\",\"configurationStateText\":\"abcypmivk\",\"addressSpace\":1951754582,\"workerConnections\":1120920412,\"workerConnectionsLastUpdatedDateTime\":\"2021-05-22T10:28:24Z\",\"containerResyncTrigger\":1916526415,\"imageUri\":\"fnba\",\"fullyQualifiedDomainName\":\"ionle\",\"autoUpdateRingType\":\"Fast\",\"autoUpdateRequestedWeek\":1013324715,\"autoUpdateRequestedDay\":853562932,\"autoUpdateRequestedTime\":\"xdpnqbqq\"}")
            .toObject(CacheNodeEntity.class);
        Assertions.assertEquals("xaxcfjpgddtocjjx", model.fullyQualifiedResourceId());
        Assertions.assertEquals("bqe", model.customerName());
        Assertions.assertEquals("nxqbzvddn", model.ipAddress());
        Assertions.assertEquals("ndei", model.customerIndex());
        Assertions.assertEquals("twnpzaoqvuhrhcf", model.cacheNodeId());
        Assertions.assertEquals("yd", model.cacheNodeName());
        Assertions.assertEquals(1726993489, model.customerAsn());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals(553941063, model.maxAllowableEgressInMbps());
        Assertions.assertEquals(false, model.isEnterpriseManaged());
        Assertions.assertEquals("tutqxlngxlefgug", model.cidrCsv().get(0));
        Assertions.assertEquals(true, model.shouldMigrate());
        Assertions.assertEquals(776269865, model.cidrSelectionType());
        Assertions.assertEquals("ionle", model.fullyQualifiedDomainName());
        Assertions.assertEquals(AutoUpdateRingType.FAST, model.autoUpdateRingType());
        Assertions.assertEquals(1013324715, model.autoUpdateRequestedWeek());
        Assertions.assertEquals(853562932, model.autoUpdateRequestedDay());
        Assertions.assertEquals("xdpnqbqq", model.autoUpdateRequestedTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CacheNodeEntity model = new CacheNodeEntity().withFullyQualifiedResourceId("xaxcfjpgddtocjjx")
            .withCustomerName("bqe")
            .withIpAddress("nxqbzvddn")
            .withCustomerIndex("ndei")
            .withCacheNodeId("twnpzaoqvuhrhcf")
            .withCacheNodeName("yd")
            .withCustomerAsn(1726993489)
            .withIsEnabled(true)
            .withMaxAllowableEgressInMbps(553941063)
            .withIsEnterpriseManaged(false)
            .withCidrCsv(Arrays.asList("tutqxlngxlefgug", "xkrxdqmi", "tthzrvqd", "abhjybi"))
            .withShouldMigrate(true)
            .withCidrSelectionType(776269865)
            .withFullyQualifiedDomainName("ionle")
            .withAutoUpdateRingType(AutoUpdateRingType.FAST)
            .withAutoUpdateRequestedWeek(1013324715)
            .withAutoUpdateRequestedDay(853562932)
            .withAutoUpdateRequestedTime("xdpnqbqq");
        model = BinaryData.fromObject(model).toObject(CacheNodeEntity.class);
        Assertions.assertEquals("xaxcfjpgddtocjjx", model.fullyQualifiedResourceId());
        Assertions.assertEquals("bqe", model.customerName());
        Assertions.assertEquals("nxqbzvddn", model.ipAddress());
        Assertions.assertEquals("ndei", model.customerIndex());
        Assertions.assertEquals("twnpzaoqvuhrhcf", model.cacheNodeId());
        Assertions.assertEquals("yd", model.cacheNodeName());
        Assertions.assertEquals(1726993489, model.customerAsn());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals(553941063, model.maxAllowableEgressInMbps());
        Assertions.assertEquals(false, model.isEnterpriseManaged());
        Assertions.assertEquals("tutqxlngxlefgug", model.cidrCsv().get(0));
        Assertions.assertEquals(true, model.shouldMigrate());
        Assertions.assertEquals(776269865, model.cidrSelectionType());
        Assertions.assertEquals("ionle", model.fullyQualifiedDomainName());
        Assertions.assertEquals(AutoUpdateRingType.FAST, model.autoUpdateRingType());
        Assertions.assertEquals(1013324715, model.autoUpdateRequestedWeek());
        Assertions.assertEquals(853562932, model.autoUpdateRequestedDay());
        Assertions.assertEquals("xdpnqbqq", model.autoUpdateRequestedTime());
    }
}
