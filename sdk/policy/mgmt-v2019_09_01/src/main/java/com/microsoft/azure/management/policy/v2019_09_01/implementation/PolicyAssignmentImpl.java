/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.policy.v2019_09_01.implementation;

import com.microsoft.azure.management.policy.v2019_09_01.PolicyAssignment;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import java.util.Map;
import com.microsoft.azure.management.policy.v2019_09_01.ParameterValuesValue;
import com.microsoft.azure.management.policy.v2019_09_01.EnforcementMode;
import com.microsoft.azure.management.policy.v2019_09_01.PolicySku;
import com.microsoft.azure.management.policy.v2019_09_01.Identity;

class PolicyAssignmentImpl extends CreatableUpdatableImpl<PolicyAssignment, PolicyAssignmentInner, PolicyAssignmentImpl> implements PolicyAssignment, PolicyAssignment.Definition, PolicyAssignment.Update {
    private String scope;
    private String policyAssignmentName;
    private final PolicyManager manager;

    PolicyAssignmentImpl(String name, PolicyManager manager) {
        super(name, new PolicyAssignmentInner());
        this.manager = manager;
        // Set resource name
        this.policyAssignmentName = name;
        //
    }

    PolicyAssignmentImpl(PolicyAssignmentInner inner, PolicyManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.policyAssignmentName = inner.name();
        // set resource ancestor and positional variables
        this.policyAssignmentName = IdParsingUtils.getValueFromIdByName(inner.id(), "policyAssignments");
        this.scope = IdParsingUtils.getValueFromIdByPosition(inner.id(), 0);
        // set other parameters for create and update
    }

    @Override
    public PolicyManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PolicyAssignment> createResourceAsync() {
        PolicyAssignmentsInner client = this.manager().inner().policyAssignments();
        return client.createAsync(this.scope, this.policyAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PolicyAssignment> updateResourceAsync() {
        PolicyAssignmentsInner client = this.manager().inner().policyAssignments();
        return client.createAsync(this.scope, this.policyAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PolicyAssignmentInner> getInnerAsync() {
        PolicyAssignmentsInner client = this.manager().inner().policyAssignments();
        return client.getAsync(this.scope, this.policyAssignmentName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public EnforcementMode enforcementMode() {
        return this.inner().enforcementMode();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public Object metadata() {
        return this.inner().metadata();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<String> notScopes() {
        return this.inner().notScopes();
    }

    @Override
    public Map<String, ParameterValuesValue> parameters() {
        return this.inner().parameters();
    }

    @Override
    public String policyDefinitionId() {
        return this.inner().policyDefinitionId();
    }

    @Override
    public String scopeProperty() {
        return this.inner().scopeProperty();
    }

    @Override
    public PolicySku sku() {
        return this.inner().sku();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PolicyAssignmentImpl withScope(String scope) {
        this.scope = scope;
        return this;
    }

    @Override
    public PolicyAssignmentImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withEnforcementMode(EnforcementMode enforcementMode) {
        this.inner().withEnforcementMode(enforcementMode);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withIdentity(Identity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withMetadata(Object metadata) {
        this.inner().withMetadata(metadata);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withNotScopes(List<String> notScopes) {
        this.inner().withNotScopes(notScopes);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withParameters(Map<String, ParameterValuesValue> parameters) {
        this.inner().withParameters(parameters);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withPolicyDefinitionId(String policyDefinitionId) {
        this.inner().withPolicyDefinitionId(policyDefinitionId);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withScopeProperty(String scopeProperty) {
        this.inner().withScopeProperty(scopeProperty);
        return this;
    }

    @Override
    public PolicyAssignmentImpl withSku(PolicySku sku) {
        this.inner().withSku(sku);
        return this;
    }

}
