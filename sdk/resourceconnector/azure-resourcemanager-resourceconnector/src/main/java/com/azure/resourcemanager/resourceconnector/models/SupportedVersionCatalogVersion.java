// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourceconnector.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SupportedVersionCatalogVersion object for appliance.
 */
@Immutable
public final class SupportedVersionCatalogVersion implements JsonSerializable<SupportedVersionCatalogVersion> {
    /*
     * The newer supported version catalog version data.
     */
    private SupportedVersionCatalogVersionData data;

    /*
     * The catalog version name for the version available for upgrade.
     */
    private String name;

    /*
     * The catalog version namespace for the version available for upgrade.
     */
    private String namespace;

    /**
     * Creates an instance of SupportedVersionCatalogVersion class.
     */
    public SupportedVersionCatalogVersion() {
    }

    /**
     * Get the data property: The newer supported version catalog version data.
     * 
     * @return the data value.
     */
    public SupportedVersionCatalogVersionData data() {
        return this.data;
    }

    /**
     * Get the name property: The catalog version name for the version available for upgrade.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the namespace property: The catalog version namespace for the version available for upgrade.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (data() != null) {
            data().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SupportedVersionCatalogVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SupportedVersionCatalogVersion if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SupportedVersionCatalogVersion.
     */
    public static SupportedVersionCatalogVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SupportedVersionCatalogVersion deserializedSupportedVersionCatalogVersion
                = new SupportedVersionCatalogVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    deserializedSupportedVersionCatalogVersion.data
                        = SupportedVersionCatalogVersionData.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedSupportedVersionCatalogVersion.name = reader.getString();
                } else if ("namespace".equals(fieldName)) {
                    deserializedSupportedVersionCatalogVersion.namespace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSupportedVersionCatalogVersion;
        });
    }
}
