// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourceconnector.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourceconnector.models.AppliancePropertiesInfrastructureConfig;
import com.azure.resourcemanager.resourceconnector.models.Distro;
import com.azure.resourcemanager.resourceconnector.models.Status;
import java.io.IOException;

/**
 * Properties for an appliance.
 */
@Fluent
public final class ApplianceProperties implements JsonSerializable<ApplianceProperties> {
    /*
     * Represents a supported Fabric/Infra. (AKSEdge etc...).
     */
    private Distro distro;

    /*
     * Contains infrastructure information about the Appliance
     */
    private AppliancePropertiesInfrastructureConfig infrastructureConfig;

    /*
     * The current deployment or provisioning state, which only appears in the response.
     */
    private String provisioningState;

    /*
     * Certificates pair used to download MSI certificate from HIS. Can only be set once.
     */
    private String publicKey;

    /*
     * Appliance’s health and state of connection to on-prem
     */
    private Status status;

    /*
     * Version of the Appliance
     */
    private String version;

    /**
     * Creates an instance of ApplianceProperties class.
     */
    public ApplianceProperties() {
    }

    /**
     * Get the distro property: Represents a supported Fabric/Infra. (AKSEdge etc...).
     * 
     * @return the distro value.
     */
    public Distro distro() {
        return this.distro;
    }

    /**
     * Set the distro property: Represents a supported Fabric/Infra. (AKSEdge etc...).
     * 
     * @param distro the distro value to set.
     * @return the ApplianceProperties object itself.
     */
    public ApplianceProperties withDistro(Distro distro) {
        this.distro = distro;
        return this;
    }

    /**
     * Get the infrastructureConfig property: Contains infrastructure information about the Appliance.
     * 
     * @return the infrastructureConfig value.
     */
    public AppliancePropertiesInfrastructureConfig infrastructureConfig() {
        return this.infrastructureConfig;
    }

    /**
     * Set the infrastructureConfig property: Contains infrastructure information about the Appliance.
     * 
     * @param infrastructureConfig the infrastructureConfig value to set.
     * @return the ApplianceProperties object itself.
     */
    public ApplianceProperties withInfrastructureConfig(AppliancePropertiesInfrastructureConfig infrastructureConfig) {
        this.infrastructureConfig = infrastructureConfig;
        return this;
    }

    /**
     * Get the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publicKey property: Certificates pair used to download MSI certificate from HIS. Can only be set once.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Set the publicKey property: Certificates pair used to download MSI certificate from HIS. Can only be set once.
     * 
     * @param publicKey the publicKey value to set.
     * @return the ApplianceProperties object itself.
     */
    public ApplianceProperties withPublicKey(String publicKey) {
        this.publicKey = publicKey;
        return this;
    }

    /**
     * Get the status property: Appliance’s health and state of connection to on-prem.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the version property: Version of the Appliance.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of the Appliance.
     * 
     * @param version the version value to set.
     * @return the ApplianceProperties object itself.
     */
    public ApplianceProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (infrastructureConfig() != null) {
            infrastructureConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("distro", this.distro == null ? null : this.distro.toString());
        jsonWriter.writeJsonField("infrastructureConfig", this.infrastructureConfig);
        jsonWriter.writeStringField("publicKey", this.publicKey);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplianceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplianceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplianceProperties.
     */
    public static ApplianceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplianceProperties deserializedApplianceProperties = new ApplianceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("distro".equals(fieldName)) {
                    deserializedApplianceProperties.distro = Distro.fromString(reader.getString());
                } else if ("infrastructureConfig".equals(fieldName)) {
                    deserializedApplianceProperties.infrastructureConfig
                        = AppliancePropertiesInfrastructureConfig.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedApplianceProperties.provisioningState = reader.getString();
                } else if ("publicKey".equals(fieldName)) {
                    deserializedApplianceProperties.publicKey = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedApplianceProperties.status = Status.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedApplianceProperties.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplianceProperties;
        });
    }
}
