// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourceconnector.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.resourceconnector.models.ApplianceCredentialKubeconfig;
import com.azure.resourcemanager.resourceconnector.models.HybridConnectionConfig;
import java.io.IOException;
import java.util.List;

/**
 * The List Cluster User Credential appliance.
 */
@Immutable
public final class ApplianceListCredentialResultsInner
    implements JsonSerializable<ApplianceListCredentialResultsInner> {
    /*
     * Contains the REP (rendezvous endpoint) and “Listener” access token from notification service (NS).
     */
    private HybridConnectionConfig hybridConnectionConfig;

    /*
     * The list of appliance kubeconfigs.
     */
    private List<ApplianceCredentialKubeconfig> kubeconfigs;

    /**
     * Creates an instance of ApplianceListCredentialResultsInner class.
     */
    public ApplianceListCredentialResultsInner() {
    }

    /**
     * Get the hybridConnectionConfig property: Contains the REP (rendezvous endpoint) and “Listener” access token from
     * notification service (NS).
     * 
     * @return the hybridConnectionConfig value.
     */
    public HybridConnectionConfig hybridConnectionConfig() {
        return this.hybridConnectionConfig;
    }

    /**
     * Get the kubeconfigs property: The list of appliance kubeconfigs.
     * 
     * @return the kubeconfigs value.
     */
    public List<ApplianceCredentialKubeconfig> kubeconfigs() {
        return this.kubeconfigs;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hybridConnectionConfig() != null) {
            hybridConnectionConfig().validate();
        }
        if (kubeconfigs() != null) {
            kubeconfigs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplianceListCredentialResultsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplianceListCredentialResultsInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplianceListCredentialResultsInner.
     */
    public static ApplianceListCredentialResultsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplianceListCredentialResultsInner deserializedApplianceListCredentialResultsInner
                = new ApplianceListCredentialResultsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hybridConnectionConfig".equals(fieldName)) {
                    deserializedApplianceListCredentialResultsInner.hybridConnectionConfig
                        = HybridConnectionConfig.fromJson(reader);
                } else if ("kubeconfigs".equals(fieldName)) {
                    List<ApplianceCredentialKubeconfig> kubeconfigs
                        = reader.readArray(reader1 -> ApplianceCredentialKubeconfig.fromJson(reader1));
                    deserializedApplianceListCredentialResultsInner.kubeconfigs = kubeconfigs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplianceListCredentialResultsInner;
        });
    }
}
