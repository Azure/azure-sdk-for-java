// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resourceconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contains infrastructure information about the Appliance.
 */
@Fluent
public final class AppliancePropertiesInfrastructureConfig
    implements JsonSerializable<AppliancePropertiesInfrastructureConfig> {
    /*
     * Information about the connected appliance.
     */
    private Provider provider;

    /**
     * Creates an instance of AppliancePropertiesInfrastructureConfig class.
     */
    public AppliancePropertiesInfrastructureConfig() {
    }

    /**
     * Get the provider property: Information about the connected appliance.
     * 
     * @return the provider value.
     */
    public Provider provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Information about the connected appliance.
     * 
     * @param provider the provider value to set.
     * @return the AppliancePropertiesInfrastructureConfig object itself.
     */
    public AppliancePropertiesInfrastructureConfig withProvider(Provider provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provider", this.provider == null ? null : this.provider.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppliancePropertiesInfrastructureConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppliancePropertiesInfrastructureConfig if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AppliancePropertiesInfrastructureConfig.
     */
    public static AppliancePropertiesInfrastructureConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppliancePropertiesInfrastructureConfig deserializedAppliancePropertiesInfrastructureConfig
                = new AppliancePropertiesInfrastructureConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedAppliancePropertiesInfrastructureConfig.provider
                        = Provider.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppliancePropertiesInfrastructureConfig;
        });
    }
}
