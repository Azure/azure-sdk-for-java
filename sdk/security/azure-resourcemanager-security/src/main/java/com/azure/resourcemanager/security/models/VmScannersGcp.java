// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A VM scanning configuration for a security offering of a GCP environment.
 */
@Fluent
public class VmScannersGcp extends VmScannersBase {
    /**
     * Creates an instance of VmScannersGcp class.
     */
    public VmScannersGcp() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmScannersGcp withEnabled(Boolean enabled) {
        super.withEnabled(enabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VmScannersGcp withConfiguration(VmScannersBaseConfiguration configuration) {
        super.withConfiguration(configuration);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (configuration() != null) {
            configuration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", enabled());
        jsonWriter.writeJsonField("configuration", configuration());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmScannersGcp from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmScannersGcp if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VmScannersGcp.
     */
    public static VmScannersGcp fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmScannersGcp deserializedVmScannersGcp = new VmScannersGcp();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedVmScannersGcp.withEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("configuration".equals(fieldName)) {
                    deserializedVmScannersGcp.withConfiguration(VmScannersBaseConfiguration.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmScannersGcp;
        });
    }
}
