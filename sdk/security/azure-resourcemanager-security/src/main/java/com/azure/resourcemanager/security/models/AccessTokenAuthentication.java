// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The environment authentication details.
 */
@Fluent
public final class AccessTokenAuthentication extends Authentication {
    /*
     * The authentication type
     */
    private AuthenticationType authenticationType = AuthenticationType.fromString("AccessToken");

    /*
     * The user name that will be used while authenticating with the onboarded environment
     */
    private String username;

    /*
     * The access token that will be used while authenticating with the onboarded environment
     */
    private String accessToken;

    /**
     * Creates an instance of AccessTokenAuthentication class.
     */
    public AccessTokenAuthentication() {
    }

    /**
     * Get the authenticationType property: The authentication type.
     * 
     * @return the authenticationType value.
     */
    @Override
    public AuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Get the username property: The user name that will be used while authenticating with the onboarded environment.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: The user name that will be used while authenticating with the onboarded environment.
     * 
     * @param username the username value to set.
     * @return the AccessTokenAuthentication object itself.
     */
    public AccessTokenAuthentication withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the accessToken property: The access token that will be used while authenticating with the onboarded
     * environment.
     * 
     * @return the accessToken value.
     */
    public String accessToken() {
        return this.accessToken;
    }

    /**
     * Set the accessToken property: The access token that will be used while authenticating with the onboarded
     * environment.
     * 
     * @param accessToken the accessToken value to set.
     * @return the AccessTokenAuthentication object itself.
     */
    public AccessTokenAuthentication withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("accessToken", this.accessToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessTokenAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessTokenAuthentication if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessTokenAuthentication.
     */
    public static AccessTokenAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessTokenAuthentication deserializedAccessTokenAuthentication = new AccessTokenAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationType".equals(fieldName)) {
                    deserializedAccessTokenAuthentication.authenticationType
                        = AuthenticationType.fromString(reader.getString());
                } else if ("username".equals(fieldName)) {
                    deserializedAccessTokenAuthentication.username = reader.getString();
                } else if ("accessToken".equals(fieldName)) {
                    deserializedAccessTokenAuthentication.accessToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessTokenAuthentication;
        });
    }
}
