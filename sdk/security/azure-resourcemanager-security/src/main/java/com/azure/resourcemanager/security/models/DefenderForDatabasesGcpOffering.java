// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Defender for Databases GCP offering configurations.
 */
@Fluent
public final class DefenderForDatabasesGcpOffering extends CloudOffering {
    /*
     * The type of the security offering.
     */
    private OfferingType offeringType = OfferingType.DEFENDER_FOR_DATABASES_GCP;

    /*
     * The ARC autoprovisioning configuration
     */
    private DefenderForDatabasesGcpOfferingArcAutoProvisioning arcAutoProvisioning;

    /*
     * The native cloud connection configuration
     */
    private DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning defenderForDatabasesArcAutoProvisioning;

    /**
     * Creates an instance of DefenderForDatabasesGcpOffering class.
     */
    public DefenderForDatabasesGcpOffering() {
    }

    /**
     * Get the offeringType property: The type of the security offering.
     * 
     * @return the offeringType value.
     */
    @Override
    public OfferingType offeringType() {
        return this.offeringType;
    }

    /**
     * Get the arcAutoProvisioning property: The ARC autoprovisioning configuration.
     * 
     * @return the arcAutoProvisioning value.
     */
    public DefenderForDatabasesGcpOfferingArcAutoProvisioning arcAutoProvisioning() {
        return this.arcAutoProvisioning;
    }

    /**
     * Set the arcAutoProvisioning property: The ARC autoprovisioning configuration.
     * 
     * @param arcAutoProvisioning the arcAutoProvisioning value to set.
     * @return the DefenderForDatabasesGcpOffering object itself.
     */
    public DefenderForDatabasesGcpOffering
        withArcAutoProvisioning(DefenderForDatabasesGcpOfferingArcAutoProvisioning arcAutoProvisioning) {
        this.arcAutoProvisioning = arcAutoProvisioning;
        return this;
    }

    /**
     * Get the defenderForDatabasesArcAutoProvisioning property: The native cloud connection configuration.
     * 
     * @return the defenderForDatabasesArcAutoProvisioning value.
     */
    public DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning
        defenderForDatabasesArcAutoProvisioning() {
        return this.defenderForDatabasesArcAutoProvisioning;
    }

    /**
     * Set the defenderForDatabasesArcAutoProvisioning property: The native cloud connection configuration.
     * 
     * @param defenderForDatabasesArcAutoProvisioning the defenderForDatabasesArcAutoProvisioning value to set.
     * @return the DefenderForDatabasesGcpOffering object itself.
     */
    public DefenderForDatabasesGcpOffering withDefenderForDatabasesArcAutoProvisioning(
        DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning defenderForDatabasesArcAutoProvisioning) {
        this.defenderForDatabasesArcAutoProvisioning = defenderForDatabasesArcAutoProvisioning;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (arcAutoProvisioning() != null) {
            arcAutoProvisioning().validate();
        }
        if (defenderForDatabasesArcAutoProvisioning() != null) {
            defenderForDatabasesArcAutoProvisioning().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("offeringType", this.offeringType == null ? null : this.offeringType.toString());
        jsonWriter.writeJsonField("arcAutoProvisioning", this.arcAutoProvisioning);
        jsonWriter.writeJsonField("defenderForDatabasesArcAutoProvisioning",
            this.defenderForDatabasesArcAutoProvisioning);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefenderForDatabasesGcpOffering from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefenderForDatabasesGcpOffering if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DefenderForDatabasesGcpOffering.
     */
    public static DefenderForDatabasesGcpOffering fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefenderForDatabasesGcpOffering deserializedDefenderForDatabasesGcpOffering
                = new DefenderForDatabasesGcpOffering();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedDefenderForDatabasesGcpOffering.withDescription(reader.getString());
                } else if ("offeringType".equals(fieldName)) {
                    deserializedDefenderForDatabasesGcpOffering.offeringType
                        = OfferingType.fromString(reader.getString());
                } else if ("arcAutoProvisioning".equals(fieldName)) {
                    deserializedDefenderForDatabasesGcpOffering.arcAutoProvisioning
                        = DefenderForDatabasesGcpOfferingArcAutoProvisioning.fromJson(reader);
                } else if ("defenderForDatabasesArcAutoProvisioning".equals(fieldName)) {
                    deserializedDefenderForDatabasesGcpOffering.defenderForDatabasesArcAutoProvisioning
                        = DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefenderForDatabasesGcpOffering;
        });
    }
}
