// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.IotSensorsClient;
import com.azure.resourcemanager.security.fluent.models.IotSensorsListInner;
import com.azure.resourcemanager.security.fluent.models.IotSensorsModelInner;
import com.azure.resourcemanager.security.models.IotSensors;
import com.azure.resourcemanager.security.models.IotSensorsList;
import com.azure.resourcemanager.security.models.IotSensorsModel;
import com.azure.resourcemanager.security.models.ResetPasswordInput;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.InputStream;

public final class IotSensorsImpl implements IotSensors {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(IotSensorsImpl.class);

    private final IotSensorsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public IotSensorsImpl(
        IotSensorsClient innerClient, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public IotSensorsList list(String scope) {
        IotSensorsListInner inner = this.serviceClient().list(scope);
        if (inner != null) {
            return new IotSensorsListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<IotSensorsList> listWithResponse(String scope, Context context) {
        Response<IotSensorsListInner> inner = this.serviceClient().listWithResponse(scope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IotSensorsListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IotSensorsModel get(String scope, String iotSensorName) {
        IotSensorsModelInner inner = this.serviceClient().get(scope, iotSensorName);
        if (inner != null) {
            return new IotSensorsModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<IotSensorsModel> getWithResponse(String scope, String iotSensorName, Context context) {
        Response<IotSensorsModelInner> inner = this.serviceClient().getWithResponse(scope, iotSensorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IotSensorsModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String scope, String iotSensorName) {
        this.serviceClient().delete(scope, iotSensorName);
    }

    public Response<Void> deleteWithResponse(String scope, String iotSensorName, Context context) {
        return this.serviceClient().deleteWithResponse(scope, iotSensorName, context);
    }

    public InputStream downloadActivation(String scope, String iotSensorName) {
        return this.serviceClient().downloadActivation(scope, iotSensorName);
    }

    public StreamResponse downloadActivationWithResponse(String scope, String iotSensorName, Context context) {
        return this.serviceClient().downloadActivationWithResponse(scope, iotSensorName, context);
    }

    public InputStream downloadResetPassword(String scope, String iotSensorName, ResetPasswordInput body) {
        return this.serviceClient().downloadResetPassword(scope, iotSensorName, body);
    }

    public StreamResponse downloadResetPasswordWithResponse(
        String scope, String iotSensorName, ResetPasswordInput body, Context context) {
        return this.serviceClient().downloadResetPasswordWithResponse(scope, iotSensorName, body, context);
    }

    public void triggerTiPackageUpdate(String scope, String iotSensorName) {
        this.serviceClient().triggerTiPackageUpdate(scope, iotSensorName);
    }

    public Response<Void> triggerTiPackageUpdateWithResponse(String scope, String iotSensorName, Context context) {
        return this.serviceClient().triggerTiPackageUpdateWithResponse(scope, iotSensorName, context);
    }

    public IotSensorsModel getById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String iotSensorName =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "iotSensorName");
        if (iotSensorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'iotSensors'.", id)));
        }
        return this.getWithResponse(scope, iotSensorName, Context.NONE).getValue();
    }

    public Response<IotSensorsModel> getByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String iotSensorName =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "iotSensorName");
        if (iotSensorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'iotSensors'.", id)));
        }
        return this.getWithResponse(scope, iotSensorName, context);
    }

    public void deleteById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String iotSensorName =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "iotSensorName");
        if (iotSensorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'iotSensors'.", id)));
        }
        this.deleteWithResponse(scope, iotSensorName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String iotSensorName =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "iotSensorName");
        if (iotSensorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'iotSensors'.", id)));
        }
        return this.deleteWithResponse(scope, iotSensorName, context);
    }

    private IotSensorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public IotSensorsModelImpl define(String name) {
        return new IotSensorsModelImpl(name, this.manager());
    }
}
