// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.GovernanceAssignmentsClient;
import com.azure.resourcemanager.security.fluent.models.GovernanceAssignmentInner;
import com.azure.resourcemanager.security.models.GovernanceAssignment;
import com.azure.resourcemanager.security.models.GovernanceAssignments;

public final class GovernanceAssignmentsImpl implements GovernanceAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(GovernanceAssignmentsImpl.class);

    private final GovernanceAssignmentsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public GovernanceAssignmentsImpl(
        GovernanceAssignmentsClient innerClient, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<GovernanceAssignment> list(String scope, String assessmentName) {
        PagedIterable<GovernanceAssignmentInner> inner = this.serviceClient().list(scope, assessmentName);
        return Utils.mapPage(inner, inner1 -> new GovernanceAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<GovernanceAssignment> list(String scope, String assessmentName, Context context) {
        PagedIterable<GovernanceAssignmentInner> inner = this.serviceClient().list(scope, assessmentName, context);
        return Utils.mapPage(inner, inner1 -> new GovernanceAssignmentImpl(inner1, this.manager()));
    }

    public Response<GovernanceAssignment> getWithResponse(
        String scope, String assessmentName, String assignmentKey, Context context) {
        Response<GovernanceAssignmentInner> inner =
            this.serviceClient().getWithResponse(scope, assessmentName, assignmentKey, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GovernanceAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GovernanceAssignment get(String scope, String assessmentName, String assignmentKey) {
        GovernanceAssignmentInner inner = this.serviceClient().get(scope, assessmentName, assignmentKey);
        if (inner != null) {
            return new GovernanceAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String scope, String assessmentName, String assignmentKey, Context context) {
        return this.serviceClient().deleteWithResponse(scope, assessmentName, assignmentKey, context);
    }

    public void delete(String scope, String assessmentName, String assignmentKey) {
        this.serviceClient().delete(scope, assessmentName, assignmentKey);
    }

    public GovernanceAssignment getById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String assessmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assessmentName");
        if (assessmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        String assignmentKey =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assignmentKey");
        if (assignmentKey == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'governanceAssignments'.",
                                id)));
        }
        return this.getWithResponse(scope, assessmentName, assignmentKey, Context.NONE).getValue();
    }

    public Response<GovernanceAssignment> getByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String assessmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assessmentName");
        if (assessmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        String assignmentKey =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assignmentKey");
        if (assignmentKey == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'governanceAssignments'.",
                                id)));
        }
        return this.getWithResponse(scope, assessmentName, assignmentKey, context);
    }

    public void deleteById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String assessmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assessmentName");
        if (assessmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        String assignmentKey =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assignmentKey");
        if (assignmentKey == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'governanceAssignments'.",
                                id)));
        }
        this.deleteWithResponse(scope, assessmentName, assignmentKey, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String assessmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assessmentName");
        if (assessmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        String assignmentKey =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
                    "assignmentKey");
        if (assignmentKey == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'governanceAssignments'.",
                                id)));
        }
        return this.deleteWithResponse(scope, assessmentName, assignmentKey, context);
    }

    private GovernanceAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public GovernanceAssignmentImpl define(String name) {
        return new GovernanceAssignmentImpl(name, this.manager());
    }
}
