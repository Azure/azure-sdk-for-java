// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of GovernanceAssignments. */
public interface GovernanceAssignments {
    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<GovernanceAssignment> list(String scope, String assessmentName);

    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<GovernanceAssignment> list(String scope, String assessmentName, Context context);

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey along with {@link Response}.
     */
    Response<GovernanceAssignment> getWithResponse(
        String scope, String assessmentName, String assignmentKey, Context context);

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey.
     */
    GovernanceAssignment get(String scope, String assessmentName, String assignmentKey);

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String scope, String assessmentName, String assignmentKey, Context context);

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String scope, String assessmentName, String assignmentKey);

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey along with {@link Response}.
     */
    GovernanceAssignment getById(String id);

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey along with {@link Response}.
     */
    Response<GovernanceAssignment> getByIdWithResponse(String id, Context context);

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new GovernanceAssignment resource.
     *
     * @param name resource name.
     * @return the first stage of the new GovernanceAssignment definition.
     */
    GovernanceAssignment.DefinitionStages.Blank define(String name);
}
