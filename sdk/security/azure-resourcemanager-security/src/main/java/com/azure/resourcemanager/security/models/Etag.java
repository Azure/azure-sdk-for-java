// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Entity tag is used for comparing two or more entities from the same requested resource.
 */
@Fluent
public class Etag implements JsonSerializable<Etag> {
    /*
     * Entity tag is used for comparing two or more entities from the same requested resource.
     */
    private String etag;

    /**
     * Creates an instance of Etag class.
     */
    public Etag() {
    }

    /**
     * Get the etag property: Entity tag is used for comparing two or more entities from the same requested resource.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: Entity tag is used for comparing two or more entities from the same requested resource.
     * 
     * @param etag the etag value to set.
     * @return the Etag object itself.
     */
    public Etag withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", this.etag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Etag from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Etag if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Etag.
     */
    public static Etag fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Etag deserializedEtag = new Etag();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("etag".equals(fieldName)) {
                    deserializedEtag.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEtag;
        });
    }
}
