// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessmentsAzureSettingSelectedProvider;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes the vulnerability assessments setting properties on Azure servers in the defined scope.
 */
@Fluent
public final class ServerVulnerabilityAssessmentsAzureSettingProperties {
    /*
     * The selected vulnerability assessments provider on Azure servers in the defined scope.
     */
    @JsonProperty(value = "selectedProvider", required = true)
    private ServerVulnerabilityAssessmentsAzureSettingSelectedProvider selectedProvider;

    /**
     * Creates an instance of ServerVulnerabilityAssessmentsAzureSettingProperties class.
     */
    public ServerVulnerabilityAssessmentsAzureSettingProperties() {
    }

    /**
     * Get the selectedProvider property: The selected vulnerability assessments provider on Azure servers in the
     * defined scope.
     * 
     * @return the selectedProvider value.
     */
    public ServerVulnerabilityAssessmentsAzureSettingSelectedProvider selectedProvider() {
        return this.selectedProvider;
    }

    /**
     * Set the selectedProvider property: The selected vulnerability assessments provider on Azure servers in the
     * defined scope.
     * 
     * @param selectedProvider the selectedProvider value to set.
     * @return the ServerVulnerabilityAssessmentsAzureSettingProperties object itself.
     */
    public ServerVulnerabilityAssessmentsAzureSettingProperties
        withSelectedProvider(ServerVulnerabilityAssessmentsAzureSettingSelectedProvider selectedProvider) {
        this.selectedProvider = selectedProvider;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (selectedProvider() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectedProvider in model ServerVulnerabilityAssessmentsAzureSettingProperties"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(ServerVulnerabilityAssessmentsAzureSettingProperties.class);
}
