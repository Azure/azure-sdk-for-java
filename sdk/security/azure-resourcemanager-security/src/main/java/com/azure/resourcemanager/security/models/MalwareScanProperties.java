// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MalwareScanProperties model.
 */
@Fluent
public final class MalwareScanProperties implements JsonSerializable<MalwareScanProperties> {
    /*
     * The identifier of the scan.
     */
    private String scanId;

    /*
     * A status code of the scan operation.
     */
    private String scanStatus;

    /*
     * A description of the status of the scan.
     */
    private String scanStatusMessage;

    /*
     * The time at which the scan had been initiated.
     */
    private String scanStartTime;

    /*
     * The time at which the scan has ended. Only available for a scan which has terminated.
     */
    private String scanEndTime;

    /*
     * A summary of the scan results.
     */
    private ScanSummary scanSummary;

    /**
     * Creates an instance of MalwareScanProperties class.
     */
    public MalwareScanProperties() {
    }

    /**
     * Get the scanId property: The identifier of the scan.
     * 
     * @return the scanId value.
     */
    public String scanId() {
        return this.scanId;
    }

    /**
     * Set the scanId property: The identifier of the scan.
     * 
     * @param scanId the scanId value to set.
     * @return the MalwareScanProperties object itself.
     */
    public MalwareScanProperties withScanId(String scanId) {
        this.scanId = scanId;
        return this;
    }

    /**
     * Get the scanStatus property: A status code of the scan operation.
     * 
     * @return the scanStatus value.
     */
    public String scanStatus() {
        return this.scanStatus;
    }

    /**
     * Set the scanStatus property: A status code of the scan operation.
     * 
     * @param scanStatus the scanStatus value to set.
     * @return the MalwareScanProperties object itself.
     */
    public MalwareScanProperties withScanStatus(String scanStatus) {
        this.scanStatus = scanStatus;
        return this;
    }

    /**
     * Get the scanStatusMessage property: A description of the status of the scan.
     * 
     * @return the scanStatusMessage value.
     */
    public String scanStatusMessage() {
        return this.scanStatusMessage;
    }

    /**
     * Set the scanStatusMessage property: A description of the status of the scan.
     * 
     * @param scanStatusMessage the scanStatusMessage value to set.
     * @return the MalwareScanProperties object itself.
     */
    public MalwareScanProperties withScanStatusMessage(String scanStatusMessage) {
        this.scanStatusMessage = scanStatusMessage;
        return this;
    }

    /**
     * Get the scanStartTime property: The time at which the scan had been initiated.
     * 
     * @return the scanStartTime value.
     */
    public String scanStartTime() {
        return this.scanStartTime;
    }

    /**
     * Set the scanStartTime property: The time at which the scan had been initiated.
     * 
     * @param scanStartTime the scanStartTime value to set.
     * @return the MalwareScanProperties object itself.
     */
    public MalwareScanProperties withScanStartTime(String scanStartTime) {
        this.scanStartTime = scanStartTime;
        return this;
    }

    /**
     * Get the scanEndTime property: The time at which the scan has ended. Only available for a scan which has
     * terminated.
     * 
     * @return the scanEndTime value.
     */
    public String scanEndTime() {
        return this.scanEndTime;
    }

    /**
     * Set the scanEndTime property: The time at which the scan has ended. Only available for a scan which has
     * terminated.
     * 
     * @param scanEndTime the scanEndTime value to set.
     * @return the MalwareScanProperties object itself.
     */
    public MalwareScanProperties withScanEndTime(String scanEndTime) {
        this.scanEndTime = scanEndTime;
        return this;
    }

    /**
     * Get the scanSummary property: A summary of the scan results.
     * 
     * @return the scanSummary value.
     */
    public ScanSummary scanSummary() {
        return this.scanSummary;
    }

    /**
     * Set the scanSummary property: A summary of the scan results.
     * 
     * @param scanSummary the scanSummary value to set.
     * @return the MalwareScanProperties object itself.
     */
    public MalwareScanProperties withScanSummary(ScanSummary scanSummary) {
        this.scanSummary = scanSummary;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scanSummary() != null) {
            scanSummary().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scanId", this.scanId);
        jsonWriter.writeStringField("scanStatus", this.scanStatus);
        jsonWriter.writeStringField("scanStatusMessage", this.scanStatusMessage);
        jsonWriter.writeStringField("scanStartTime", this.scanStartTime);
        jsonWriter.writeStringField("scanEndTime", this.scanEndTime);
        jsonWriter.writeJsonField("scanSummary", this.scanSummary);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MalwareScanProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MalwareScanProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MalwareScanProperties.
     */
    public static MalwareScanProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MalwareScanProperties deserializedMalwareScanProperties = new MalwareScanProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scanId".equals(fieldName)) {
                    deserializedMalwareScanProperties.scanId = reader.getString();
                } else if ("scanStatus".equals(fieldName)) {
                    deserializedMalwareScanProperties.scanStatus = reader.getString();
                } else if ("scanStatusMessage".equals(fieldName)) {
                    deserializedMalwareScanProperties.scanStatusMessage = reader.getString();
                } else if ("scanStartTime".equals(fieldName)) {
                    deserializedMalwareScanProperties.scanStartTime = reader.getString();
                } else if ("scanEndTime".equals(fieldName)) {
                    deserializedMalwareScanProperties.scanEndTime = reader.getString();
                } else if ("scanSummary".equals(fieldName)) {
                    deserializedMalwareScanProperties.scanSummary = ScanSummary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMalwareScanProperties;
        });
    }
}
