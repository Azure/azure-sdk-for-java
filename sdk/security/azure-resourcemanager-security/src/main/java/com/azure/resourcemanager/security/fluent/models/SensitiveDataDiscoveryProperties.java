// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.security.models.OperationStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties of Sensitive Data Discovery.
 */
@Fluent
public final class SensitiveDataDiscoveryProperties {
    /*
     * Indicates whether Sensitive Data Discovery should be enabled.
     */
    @JsonProperty(value = "isEnabled")
    private Boolean isEnabled;

    /*
     * Upon failure or partial success. Additional data describing Sensitive Data Discovery enable/disable operation.
     */
    @JsonProperty(value = "operationStatus", access = JsonProperty.Access.WRITE_ONLY)
    private OperationStatus operationStatus;

    /**
     * Creates an instance of SensitiveDataDiscoveryProperties class.
     */
    public SensitiveDataDiscoveryProperties() {
    }

    /**
     * Get the isEnabled property: Indicates whether Sensitive Data Discovery should be enabled.
     * 
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Indicates whether Sensitive Data Discovery should be enabled.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the SensitiveDataDiscoveryProperties object itself.
     */
    public SensitiveDataDiscoveryProperties withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the operationStatus property: Upon failure or partial success. Additional data describing Sensitive Data
     * Discovery enable/disable operation.
     * 
     * @return the operationStatus value.
     */
    public OperationStatus operationStatus() {
        return this.operationStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationStatus() != null) {
            operationStatus().validate();
        }
    }
}
