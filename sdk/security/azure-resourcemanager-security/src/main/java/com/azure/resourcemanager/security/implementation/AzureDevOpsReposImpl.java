// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.AzureDevOpsReposClient;
import com.azure.resourcemanager.security.fluent.models.AzureDevOpsRepositoryInner;
import com.azure.resourcemanager.security.models.AzureDevOpsRepos;
import com.azure.resourcemanager.security.models.AzureDevOpsRepository;

public final class AzureDevOpsReposImpl implements AzureDevOpsRepos {
    private static final ClientLogger LOGGER = new ClientLogger(AzureDevOpsReposImpl.class);

    private final AzureDevOpsReposClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public AzureDevOpsReposImpl(AzureDevOpsReposClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AzureDevOpsRepository> list(String resourceGroupName, String securityConnectorName,
        String orgName, String projectName) {
        PagedIterable<AzureDevOpsRepositoryInner> inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, orgName, projectName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AzureDevOpsRepositoryImpl(inner1, this.manager()));
    }

    public PagedIterable<AzureDevOpsRepository> list(String resourceGroupName, String securityConnectorName,
        String orgName, String projectName, Context context) {
        PagedIterable<AzureDevOpsRepositoryInner> inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, orgName, projectName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AzureDevOpsRepositoryImpl(inner1, this.manager()));
    }

    public Response<AzureDevOpsRepository> getWithResponse(String resourceGroupName, String securityConnectorName,
        String orgName, String projectName, String repoName, Context context) {
        Response<AzureDevOpsRepositoryInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, securityConnectorName, orgName, projectName, repoName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AzureDevOpsRepositoryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureDevOpsRepository get(String resourceGroupName, String securityConnectorName, String orgName,
        String projectName, String repoName) {
        AzureDevOpsRepositoryInner inner
            = this.serviceClient().get(resourceGroupName, securityConnectorName, orgName, projectName, repoName);
        if (inner != null) {
            return new AzureDevOpsRepositoryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AzureDevOpsRepository getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String securityConnectorName = ResourceManagerUtils.getValueFromIdByName(id, "securityConnectors");
        if (securityConnectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityConnectors'.", id)));
        }
        String orgName = ResourceManagerUtils.getValueFromIdByName(id, "azureDevOpsOrgs");
        if (orgName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'azureDevOpsOrgs'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "projects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projects'.", id)));
        }
        String repoName = ResourceManagerUtils.getValueFromIdByName(id, "repos");
        if (repoName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'repos'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, securityConnectorName, orgName, projectName, repoName, Context.NONE)
            .getValue();
    }

    public Response<AzureDevOpsRepository> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String securityConnectorName = ResourceManagerUtils.getValueFromIdByName(id, "securityConnectors");
        if (securityConnectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityConnectors'.", id)));
        }
        String orgName = ResourceManagerUtils.getValueFromIdByName(id, "azureDevOpsOrgs");
        if (orgName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'azureDevOpsOrgs'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "projects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'projects'.", id)));
        }
        String repoName = ResourceManagerUtils.getValueFromIdByName(id, "repos");
        if (repoName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'repos'.", id)));
        }
        return this.getWithResponse(resourceGroupName, securityConnectorName, orgName, projectName, repoName, context);
    }

    private AzureDevOpsReposClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public AzureDevOpsRepositoryImpl define(String name) {
        return new AzureDevOpsRepositoryImpl(name, this.manager());
    }
}
