// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.InformationProtectionPoliciesClient;
import com.azure.resourcemanager.security.fluent.models.InformationProtectionPolicyInner;
import com.azure.resourcemanager.security.models.InformationProtectionPolicies;
import com.azure.resourcemanager.security.models.InformationProtectionPoliciesInformationProtectionPolicyName;
import com.azure.resourcemanager.security.models.InformationProtectionPolicy;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class InformationProtectionPoliciesImpl implements InformationProtectionPolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InformationProtectionPoliciesImpl.class);

    private final InformationProtectionPoliciesClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public InformationProtectionPoliciesImpl(
        InformationProtectionPoliciesClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public InformationProtectionPolicy get(
        String scope, InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName) {
        InformationProtectionPolicyInner inner = this.serviceClient().get(scope, informationProtectionPolicyName);
        if (inner != null) {
            return new InformationProtectionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<InformationProtectionPolicy> getWithResponse(
        String scope,
        InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName,
        Context context) {
        Response<InformationProtectionPolicyInner> inner =
            this.serviceClient().getWithResponse(scope, informationProtectionPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InformationProtectionPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<InformationProtectionPolicy> list(String scope) {
        PagedIterable<InformationProtectionPolicyInner> inner = this.serviceClient().list(scope);
        return Utils.mapPage(inner, inner1 -> new InformationProtectionPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<InformationProtectionPolicy> list(String scope, Context context) {
        PagedIterable<InformationProtectionPolicyInner> inner = this.serviceClient().list(scope, context);
        return Utils.mapPage(inner, inner1 -> new InformationProtectionPolicyImpl(inner1, this.manager()));
    }

    public InformationProtectionPolicy getById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/informationProtectionPolicies"
                        + "/{informationProtectionPolicyName}",
                    "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName =
            InformationProtectionPoliciesInformationProtectionPolicyName
                .fromString(
                    Utils
                        .getValueFromIdByParameterName(
                            id,
                            "/{scope}/providers/Microsoft.Security/informationProtectionPolicies"
                                + "/{informationProtectionPolicyName}",
                            "informationProtectionPolicyName"));
        if (informationProtectionPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'informationProtectionPolicies'.",
                                id)));
        }
        return this.getWithResponse(scope, informationProtectionPolicyName, Context.NONE).getValue();
    }

    public Response<InformationProtectionPolicy> getByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.Security/informationProtectionPolicies"
                        + "/{informationProtectionPolicyName}",
                    "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName =
            InformationProtectionPoliciesInformationProtectionPolicyName
                .fromString(
                    Utils
                        .getValueFromIdByParameterName(
                            id,
                            "/{scope}/providers/Microsoft.Security/informationProtectionPolicies"
                                + "/{informationProtectionPolicyName}",
                            "informationProtectionPolicyName"));
        if (informationProtectionPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'informationProtectionPolicies'.",
                                id)));
        }
        return this.getWithResponse(scope, informationProtectionPolicyName, context);
    }

    private InformationProtectionPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public InformationProtectionPolicyImpl define(InformationProtectionPoliciesInformationProtectionPolicyName name) {
        return new InformationProtectionPolicyImpl(name, this.manager());
    }
}
