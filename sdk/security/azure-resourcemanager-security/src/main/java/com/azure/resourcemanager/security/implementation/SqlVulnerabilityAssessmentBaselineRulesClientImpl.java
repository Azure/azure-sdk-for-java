// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.SqlVulnerabilityAssessmentBaselineRulesClient;
import com.azure.resourcemanager.security.fluent.models.RuleResultsInner;
import com.azure.resourcemanager.security.fluent.models.RulesResultsInner;
import com.azure.resourcemanager.security.models.RuleResultsInput;
import com.azure.resourcemanager.security.models.RulesResultsInput;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * SqlVulnerabilityAssessmentBaselineRulesClient.
 */
public final class SqlVulnerabilityAssessmentBaselineRulesClientImpl
    implements SqlVulnerabilityAssessmentBaselineRulesClient {
    private final ClientLogger logger = new ClientLogger(SqlVulnerabilityAssessmentBaselineRulesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SqlVulnerabilityAssessmentBaselineRulesService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of SqlVulnerabilityAssessmentBaselineRulesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlVulnerabilityAssessmentBaselineRulesClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy
                .create(
                    SqlVulnerabilityAssessmentBaselineRulesService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterSqlVulnerabilityAssessmentBaselineRules to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterSqlVul")
    private interface SqlVulnerabilityAssessmentBaselineRulesService {
        @Headers({"Content-Type: application/json"})
        @Put("/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RuleResultsInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("ruleId") String ruleId,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @BodyParam("application/json") RuleResultsInput body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RuleResultsInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("ruleId") String ruleId,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("ruleId") String ruleId,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RulesResultsInner>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RulesResultsInner>> add(
            @HostParam("$host") String endpoint,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @BodyParam("application/json") RulesResultsInput body,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline results for this rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleResultsInner>> createOrUpdateWithResponseAsync(
        String ruleId, String workspaceId, String resourceId, RuleResultsInput body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            ruleId,
                            workspaceId,
                            apiVersion,
                            resourceId,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline results for this rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleResultsInner>> createOrUpdateWithResponseAsync(
        String ruleId, String workspaceId, String resourceId, RuleResultsInput body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(), ruleId, workspaceId, apiVersion, resourceId, body, accept, context);
    }

    /**
     * Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline results for this rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RuleResultsInner> createOrUpdateAsync(
        String ruleId, String workspaceId, String resourceId, RuleResultsInput body) {
        return createOrUpdateWithResponseAsync(ruleId, workspaceId, resourceId, body)
            .flatMap(
                (Response<RuleResultsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RuleResultsInner> createOrUpdateAsync(String ruleId, String workspaceId, String resourceId) {
        final RuleResultsInput body = null;
        return createOrUpdateWithResponseAsync(ruleId, workspaceId, resourceId, body)
            .flatMap(
                (Response<RuleResultsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RuleResultsInner createOrUpdate(String ruleId, String workspaceId, String resourceId) {
        final RuleResultsInput body = null;
        return createOrUpdateAsync(ruleId, workspaceId, resourceId, body).block();
    }

    /**
     * Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline results for this rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rule results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RuleResultsInner> createOrUpdateWithResponse(
        String ruleId, String workspaceId, String resourceId, RuleResultsInput body, Context context) {
        return createOrUpdateWithResponseAsync(ruleId, workspaceId, resourceId, body, context).block();
    }

    /**
     * Gets the results for a given rule in the Baseline.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for a given rule in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleResultsInner>> getWithResponseAsync(
        String ruleId, String workspaceId, String resourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(this.client.getEndpoint(), ruleId, workspaceId, apiVersion, resourceId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the results for a given rule in the Baseline.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for a given rule in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RuleResultsInner>> getWithResponseAsync(
        String ruleId, String workspaceId, String resourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), ruleId, workspaceId, apiVersion, resourceId, accept, context);
    }

    /**
     * Gets the results for a given rule in the Baseline.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for a given rule in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RuleResultsInner> getAsync(String ruleId, String workspaceId, String resourceId) {
        return getWithResponseAsync(ruleId, workspaceId, resourceId)
            .flatMap(
                (Response<RuleResultsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the results for a given rule in the Baseline.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for a given rule in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RuleResultsInner get(String ruleId, String workspaceId, String resourceId) {
        return getAsync(ruleId, workspaceId, resourceId).block();
    }

    /**
     * Gets the results for a given rule in the Baseline.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for a given rule in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RuleResultsInner> getWithResponse(
        String ruleId, String workspaceId, String resourceId, Context context) {
        return getWithResponseAsync(ruleId, workspaceId, resourceId, context).block();
    }

    /**
     * Deletes a rule from the Baseline of a given database.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String ruleId, String workspaceId, String resourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(), ruleId, workspaceId, apiVersion, resourceId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a rule from the Baseline of a given database.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String ruleId, String workspaceId, String resourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), ruleId, workspaceId, apiVersion, resourceId, accept, context);
    }

    /**
     * Deletes a rule from the Baseline of a given database.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String ruleId, String workspaceId, String resourceId) {
        return deleteWithResponseAsync(ruleId, workspaceId, resourceId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a rule from the Baseline of a given database.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String ruleId, String workspaceId, String resourceId) {
        deleteAsync(ruleId, workspaceId, resourceId).block();
    }

    /**
     * Deletes a rule from the Baseline of a given database.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String ruleId, String workspaceId, String resourceId, Context context) {
        return deleteWithResponseAsync(ruleId, workspaceId, resourceId, context).block();
    }

    /**
     * Gets the results for all rules in the Baseline.
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for all rules in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RulesResultsInner>> listWithResponseAsync(String workspaceId, String resourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.list(this.client.getEndpoint(), workspaceId, apiVersion, resourceId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the results for all rules in the Baseline.
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for all rules in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RulesResultsInner>> listWithResponseAsync(
        String workspaceId, String resourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), workspaceId, apiVersion, resourceId, accept, context);
    }

    /**
     * Gets the results for all rules in the Baseline.
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for all rules in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RulesResultsInner> listAsync(String workspaceId, String resourceId) {
        return listWithResponseAsync(workspaceId, resourceId)
            .flatMap(
                (Response<RulesResultsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the results for all rules in the Baseline.
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for all rules in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RulesResultsInner list(String workspaceId, String resourceId) {
        return listAsync(workspaceId, resourceId).block();
    }

    /**
     * Gets the results for all rules in the Baseline.
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for all rules in the Baseline.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RulesResultsInner> listWithResponse(String workspaceId, String resourceId, Context context) {
        return listWithResponseAsync(workspaceId, resourceId, context).block();
    }

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline rules.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RulesResultsInner>> addWithResponseAsync(
        String workspaceId, String resourceId, RulesResultsInput body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.add(this.client.getEndpoint(), workspaceId, apiVersion, resourceId, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline rules.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RulesResultsInner>> addWithResponseAsync(
        String workspaceId, String resourceId, RulesResultsInput body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.add(this.client.getEndpoint(), workspaceId, apiVersion, resourceId, body, accept, context);
    }

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline rules.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RulesResultsInner> addAsync(String workspaceId, String resourceId, RulesResultsInput body) {
        return addWithResponseAsync(workspaceId, resourceId, body)
            .flatMap(
                (Response<RulesResultsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RulesResultsInner> addAsync(String workspaceId, String resourceId) {
        final RulesResultsInput body = null;
        return addWithResponseAsync(workspaceId, resourceId, body)
            .flatMap(
                (Response<RulesResultsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RulesResultsInner add(String workspaceId, String resourceId) {
        final RulesResultsInput body = null;
        return addAsync(workspaceId, resourceId, body).block();
    }

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline rules.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RulesResultsInner> addWithResponse(
        String workspaceId, String resourceId, RulesResultsInput body, Context context) {
        return addWithResponseAsync(workspaceId, resourceId, body, context).block();
    }
}
