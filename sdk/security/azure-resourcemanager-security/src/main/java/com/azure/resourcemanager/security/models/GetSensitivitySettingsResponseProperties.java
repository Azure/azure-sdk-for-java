// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * The sensitivity settings properties.
 */
@Fluent
public final class GetSensitivitySettingsResponseProperties
    implements JsonSerializable<GetSensitivitySettingsResponseProperties> {
    /*
     * List of selected sensitive info types' IDs.
     */
    private List<UUID> sensitiveInfoTypesIds;

    /*
     * The order of the sensitivity threshold label. Any label at or above this order will be considered sensitive. If
     * set to -1, sensitivity by labels is turned off
     */
    private Float sensitivityThresholdLabelOrder;

    /*
     * The id of the sensitivity threshold label. Any label at or above this rank will be considered sensitive.
     */
    private UUID sensitivityThresholdLabelId;

    /*
     * Microsoft information protection built-in and custom information types, labels, and integration status.
     */
    private GetSensitivitySettingsResponsePropertiesMipInformation mipInformation;

    /**
     * Creates an instance of GetSensitivitySettingsResponseProperties class.
     */
    public GetSensitivitySettingsResponseProperties() {
    }

    /**
     * Get the sensitiveInfoTypesIds property: List of selected sensitive info types' IDs.
     * 
     * @return the sensitiveInfoTypesIds value.
     */
    public List<UUID> sensitiveInfoTypesIds() {
        return this.sensitiveInfoTypesIds;
    }

    /**
     * Set the sensitiveInfoTypesIds property: List of selected sensitive info types' IDs.
     * 
     * @param sensitiveInfoTypesIds the sensitiveInfoTypesIds value to set.
     * @return the GetSensitivitySettingsResponseProperties object itself.
     */
    public GetSensitivitySettingsResponseProperties withSensitiveInfoTypesIds(List<UUID> sensitiveInfoTypesIds) {
        this.sensitiveInfoTypesIds = sensitiveInfoTypesIds;
        return this;
    }

    /**
     * Get the sensitivityThresholdLabelOrder property: The order of the sensitivity threshold label. Any label at or
     * above this order will be considered sensitive. If set to -1, sensitivity by labels is turned off.
     * 
     * @return the sensitivityThresholdLabelOrder value.
     */
    public Float sensitivityThresholdLabelOrder() {
        return this.sensitivityThresholdLabelOrder;
    }

    /**
     * Set the sensitivityThresholdLabelOrder property: The order of the sensitivity threshold label. Any label at or
     * above this order will be considered sensitive. If set to -1, sensitivity by labels is turned off.
     * 
     * @param sensitivityThresholdLabelOrder the sensitivityThresholdLabelOrder value to set.
     * @return the GetSensitivitySettingsResponseProperties object itself.
     */
    public GetSensitivitySettingsResponseProperties
        withSensitivityThresholdLabelOrder(Float sensitivityThresholdLabelOrder) {
        this.sensitivityThresholdLabelOrder = sensitivityThresholdLabelOrder;
        return this;
    }

    /**
     * Get the sensitivityThresholdLabelId property: The id of the sensitivity threshold label. Any label at or above
     * this rank will be considered sensitive.
     * 
     * @return the sensitivityThresholdLabelId value.
     */
    public UUID sensitivityThresholdLabelId() {
        return this.sensitivityThresholdLabelId;
    }

    /**
     * Set the sensitivityThresholdLabelId property: The id of the sensitivity threshold label. Any label at or above
     * this rank will be considered sensitive.
     * 
     * @param sensitivityThresholdLabelId the sensitivityThresholdLabelId value to set.
     * @return the GetSensitivitySettingsResponseProperties object itself.
     */
    public GetSensitivitySettingsResponseProperties withSensitivityThresholdLabelId(UUID sensitivityThresholdLabelId) {
        this.sensitivityThresholdLabelId = sensitivityThresholdLabelId;
        return this;
    }

    /**
     * Get the mipInformation property: Microsoft information protection built-in and custom information types, labels,
     * and integration status.
     * 
     * @return the mipInformation value.
     */
    public GetSensitivitySettingsResponsePropertiesMipInformation mipInformation() {
        return this.mipInformation;
    }

    /**
     * Set the mipInformation property: Microsoft information protection built-in and custom information types, labels,
     * and integration status.
     * 
     * @param mipInformation the mipInformation value to set.
     * @return the GetSensitivitySettingsResponseProperties object itself.
     */
    public GetSensitivitySettingsResponseProperties
        withMipInformation(GetSensitivitySettingsResponsePropertiesMipInformation mipInformation) {
        this.mipInformation = mipInformation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (mipInformation() != null) {
            mipInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("sensitiveInfoTypesIds", this.sensitiveInfoTypesIds,
            (writer, element) -> writer.writeString(Objects.toString(element, null)));
        jsonWriter.writeNumberField("sensitivityThresholdLabelOrder", this.sensitivityThresholdLabelOrder);
        jsonWriter.writeStringField("sensitivityThresholdLabelId",
            Objects.toString(this.sensitivityThresholdLabelId, null));
        jsonWriter.writeJsonField("mipInformation", this.mipInformation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetSensitivitySettingsResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetSensitivitySettingsResponseProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetSensitivitySettingsResponseProperties.
     */
    public static GetSensitivitySettingsResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetSensitivitySettingsResponseProperties deserializedGetSensitivitySettingsResponseProperties
                = new GetSensitivitySettingsResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sensitiveInfoTypesIds".equals(fieldName)) {
                    List<UUID> sensitiveInfoTypesIds = reader.readArray(
                        reader1 -> reader1.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString())));
                    deserializedGetSensitivitySettingsResponseProperties.sensitiveInfoTypesIds = sensitiveInfoTypesIds;
                } else if ("sensitivityThresholdLabelOrder".equals(fieldName)) {
                    deserializedGetSensitivitySettingsResponseProperties.sensitivityThresholdLabelOrder
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("sensitivityThresholdLabelId".equals(fieldName)) {
                    deserializedGetSensitivitySettingsResponseProperties.sensitivityThresholdLabelId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("mipInformation".equals(fieldName)) {
                    deserializedGetSensitivitySettingsResponseProperties.mipInformation
                        = GetSensitivitySettingsResponsePropertiesMipInformation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetSensitivitySettingsResponseProperties;
        });
    }
}
