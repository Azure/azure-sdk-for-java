// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.models.ConnectableResource;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** The resource whose properties describes the allowed traffic between Azure resources. */
@JsonFlatten
@Immutable
public class AllowedConnectionsResourceInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AllowedConnectionsResourceInner.class);

    /*
     * The UTC time on which the allowed connections resource was calculated
     */
    @JsonProperty(value = "properties.calculatedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime calculatedDateTime;

    /*
     * List of connectable resources
     */
    @JsonProperty(value = "properties.connectableResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<ConnectableResource> connectableResources;

    /*
     * Location where the resource is stored
     */
    @JsonProperty(value = "location", access = JsonProperty.Access.WRITE_ONLY)
    private String location;

    /**
     * Get the calculatedDateTime property: The UTC time on which the allowed connections resource was calculated.
     *
     * @return the calculatedDateTime value.
     */
    public OffsetDateTime calculatedDateTime() {
        return this.calculatedDateTime;
    }

    /**
     * Get the connectableResources property: List of connectable resources.
     *
     * @return the connectableResources value.
     */
    public List<ConnectableResource> connectableResources() {
        return this.connectableResources;
    }

    /**
     * Get the location property: Location where the resource is stored.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectableResources() != null) {
            connectableResources().forEach(e -> e.validate());
        }
    }
}
