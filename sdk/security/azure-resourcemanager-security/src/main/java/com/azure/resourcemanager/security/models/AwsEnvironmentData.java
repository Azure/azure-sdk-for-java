// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * The AWS connector environment data.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    property = "environmentType",
    defaultImpl = AwsEnvironmentData.class,
    visible = true)
@JsonTypeName("AwsAccount")
@Fluent
public final class AwsEnvironmentData extends EnvironmentData {
    /*
     * The type of the environment data.
     */
    @JsonTypeId
    @JsonProperty(value = "environmentType", required = true)
    private EnvironmentType environmentType = EnvironmentType.AWS_ACCOUNT;

    /*
     * The AWS account's organizational data
     */
    @JsonProperty(value = "organizationalData")
    private AwsOrganizationalData organizationalData;

    /*
     * list of regions to scan
     */
    @JsonProperty(value = "regions")
    private List<String> regions;

    /*
     * The AWS account name
     */
    @JsonProperty(value = "accountName", access = JsonProperty.Access.WRITE_ONLY)
    private String accountName;

    /*
     * Scan interval in hours (value should be between 1-hour to 24-hours)
     */
    @JsonProperty(value = "scanInterval")
    private Long scanInterval;

    /**
     * Creates an instance of AwsEnvironmentData class.
     */
    public AwsEnvironmentData() {
    }

    /**
     * Get the environmentType property: The type of the environment data.
     * 
     * @return the environmentType value.
     */
    @Override
    public EnvironmentType environmentType() {
        return this.environmentType;
    }

    /**
     * Get the organizationalData property: The AWS account's organizational data.
     * 
     * @return the organizationalData value.
     */
    public AwsOrganizationalData organizationalData() {
        return this.organizationalData;
    }

    /**
     * Set the organizationalData property: The AWS account's organizational data.
     * 
     * @param organizationalData the organizationalData value to set.
     * @return the AwsEnvironmentData object itself.
     */
    public AwsEnvironmentData withOrganizationalData(AwsOrganizationalData organizationalData) {
        this.organizationalData = organizationalData;
        return this;
    }

    /**
     * Get the regions property: list of regions to scan.
     * 
     * @return the regions value.
     */
    public List<String> regions() {
        return this.regions;
    }

    /**
     * Set the regions property: list of regions to scan.
     * 
     * @param regions the regions value to set.
     * @return the AwsEnvironmentData object itself.
     */
    public AwsEnvironmentData withRegions(List<String> regions) {
        this.regions = regions;
        return this;
    }

    /**
     * Get the accountName property: The AWS account name.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Get the scanInterval property: Scan interval in hours (value should be between 1-hour to 24-hours).
     * 
     * @return the scanInterval value.
     */
    public Long scanInterval() {
        return this.scanInterval;
    }

    /**
     * Set the scanInterval property: Scan interval in hours (value should be between 1-hour to 24-hours).
     * 
     * @param scanInterval the scanInterval value to set.
     * @return the AwsEnvironmentData object itself.
     */
    public AwsEnvironmentData withScanInterval(Long scanInterval) {
        this.scanInterval = scanInterval;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (organizationalData() != null) {
            organizationalData().validate();
        }
    }
}
