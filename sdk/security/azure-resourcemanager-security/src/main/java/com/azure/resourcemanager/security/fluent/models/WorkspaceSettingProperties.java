// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Workspace setting data.
 */
@Fluent
public final class WorkspaceSettingProperties implements JsonSerializable<WorkspaceSettingProperties> {
    /*
     * The full Azure ID of the workspace to save the data in
     */
    private String workspaceId;

    /*
     * All the VMs in this scope will send their security data to the mentioned workspace unless overridden by a setting
     * with more specific scope
     */
    private String scope;

    /**
     * Creates an instance of WorkspaceSettingProperties class.
     */
    public WorkspaceSettingProperties() {
    }

    /**
     * Get the workspaceId property: The full Azure ID of the workspace to save the data in.
     * 
     * @return the workspaceId value.
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Set the workspaceId property: The full Azure ID of the workspace to save the data in.
     * 
     * @param workspaceId the workspaceId value to set.
     * @return the WorkspaceSettingProperties object itself.
     */
    public WorkspaceSettingProperties withWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * Get the scope property: All the VMs in this scope will send their security data to the mentioned workspace unless
     * overridden by a setting with more specific scope.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: All the VMs in this scope will send their security data to the mentioned workspace unless
     * overridden by a setting with more specific scope.
     * 
     * @param scope the scope value to set.
     * @return the WorkspaceSettingProperties object itself.
     */
    public WorkspaceSettingProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (workspaceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property workspaceId in model WorkspaceSettingProperties"));
        }
        if (scope() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scope in model WorkspaceSettingProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkspaceSettingProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("workspaceId", this.workspaceId);
        jsonWriter.writeStringField("scope", this.scope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceSettingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceSettingProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkspaceSettingProperties.
     */
    public static WorkspaceSettingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceSettingProperties deserializedWorkspaceSettingProperties = new WorkspaceSettingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workspaceId".equals(fieldName)) {
                    deserializedWorkspaceSettingProperties.workspaceId = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedWorkspaceSettingProperties.scope = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceSettingProperties;
        });
    }
}
