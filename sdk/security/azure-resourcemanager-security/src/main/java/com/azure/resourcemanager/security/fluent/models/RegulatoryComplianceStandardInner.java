// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.security.models.State;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Regulatory compliance standard details and state. */
@Fluent
public final class RegulatoryComplianceStandardInner extends ProxyResource {
    /*
     * Regulatory compliance standard data
     */
    @JsonProperty(value = "properties")
    private RegulatoryComplianceStandardProperties innerProperties;

    /** Creates an instance of RegulatoryComplianceStandardInner class. */
    public RegulatoryComplianceStandardInner() {
    }

    /**
     * Get the innerProperties property: Regulatory compliance standard data.
     *
     * @return the innerProperties value.
     */
    private RegulatoryComplianceStandardProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the state property: Aggregative state based on the standard's supported controls states.
     *
     * @return the state value.
     */
    public State state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: Aggregative state based on the standard's supported controls states.
     *
     * @param state the state value to set.
     * @return the RegulatoryComplianceStandardInner object itself.
     */
    public RegulatoryComplianceStandardInner withState(State state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegulatoryComplianceStandardProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the passedControls property: The number of supported regulatory compliance controls of the given standard
     * with a passed state.
     *
     * @return the passedControls value.
     */
    public Integer passedControls() {
        return this.innerProperties() == null ? null : this.innerProperties().passedControls();
    }

    /**
     * Get the failedControls property: The number of supported regulatory compliance controls of the given standard
     * with a failed state.
     *
     * @return the failedControls value.
     */
    public Integer failedControls() {
        return this.innerProperties() == null ? null : this.innerProperties().failedControls();
    }

    /**
     * Get the skippedControls property: The number of supported regulatory compliance controls of the given standard
     * with a skipped state.
     *
     * @return the skippedControls value.
     */
    public Integer skippedControls() {
        return this.innerProperties() == null ? null : this.innerProperties().skippedControls();
    }

    /**
     * Get the unsupportedControls property: The number of regulatory compliance controls of the given standard which
     * are unsupported by automated assessments.
     *
     * @return the unsupportedControls value.
     */
    public Integer unsupportedControls() {
        return this.innerProperties() == null ? null : this.innerProperties().unsupportedControls();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
