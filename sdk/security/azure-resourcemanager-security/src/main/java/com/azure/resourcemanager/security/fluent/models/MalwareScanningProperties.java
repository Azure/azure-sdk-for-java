// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.security.models.OperationStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties of Malware Scanning.
 */
@Fluent
public final class MalwareScanningProperties {
    /*
     * Properties of On Upload malware scanning.
     */
    @JsonProperty(value = "onUpload")
    private OnUploadProperties innerOnUpload;

    /*
     * Optional. Resource id of an Event Grid Topic to send scan results to.
     */
    @JsonProperty(value = "scanResultsEventGridTopicResourceId")
    private String scanResultsEventGridTopicResourceId;

    /*
     * Upon failure or partial success. Additional data describing Malware Scanning enable/disable operation.
     */
    @JsonProperty(value = "operationStatus", access = JsonProperty.Access.WRITE_ONLY)
    private OperationStatus operationStatus;

    /**
     * Creates an instance of MalwareScanningProperties class.
     */
    public MalwareScanningProperties() {
    }

    /**
     * Get the innerOnUpload property: Properties of On Upload malware scanning.
     * 
     * @return the innerOnUpload value.
     */
    private OnUploadProperties innerOnUpload() {
        return this.innerOnUpload;
    }

    /**
     * Get the scanResultsEventGridTopicResourceId property: Optional. Resource id of an Event Grid Topic to send scan
     * results to.
     * 
     * @return the scanResultsEventGridTopicResourceId value.
     */
    public String scanResultsEventGridTopicResourceId() {
        return this.scanResultsEventGridTopicResourceId;
    }

    /**
     * Set the scanResultsEventGridTopicResourceId property: Optional. Resource id of an Event Grid Topic to send scan
     * results to.
     * 
     * @param scanResultsEventGridTopicResourceId the scanResultsEventGridTopicResourceId value to set.
     * @return the MalwareScanningProperties object itself.
     */
    public MalwareScanningProperties
        withScanResultsEventGridTopicResourceId(String scanResultsEventGridTopicResourceId) {
        this.scanResultsEventGridTopicResourceId = scanResultsEventGridTopicResourceId;
        return this;
    }

    /**
     * Get the operationStatus property: Upon failure or partial success. Additional data describing Malware Scanning
     * enable/disable operation.
     * 
     * @return the operationStatus value.
     */
    public OperationStatus operationStatus() {
        return this.operationStatus;
    }

    /**
     * Get the isEnabled property: Indicates whether On Upload malware scanning should be enabled.
     * 
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.innerOnUpload() == null ? null : this.innerOnUpload().isEnabled();
    }

    /**
     * Set the isEnabled property: Indicates whether On Upload malware scanning should be enabled.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the MalwareScanningProperties object itself.
     */
    public MalwareScanningProperties withIsEnabled(Boolean isEnabled) {
        if (this.innerOnUpload() == null) {
            this.innerOnUpload = new OnUploadProperties();
        }
        this.innerOnUpload().withIsEnabled(isEnabled);
        return this;
    }

    /**
     * Get the capGBPerMonth property: Defines the max GB to be scanned per Month. Set to -1 if no capping is needed.
     * 
     * @return the capGBPerMonth value.
     */
    public Integer capGBPerMonth() {
        return this.innerOnUpload() == null ? null : this.innerOnUpload().capGBPerMonth();
    }

    /**
     * Set the capGBPerMonth property: Defines the max GB to be scanned per Month. Set to -1 if no capping is needed.
     * 
     * @param capGBPerMonth the capGBPerMonth value to set.
     * @return the MalwareScanningProperties object itself.
     */
    public MalwareScanningProperties withCapGBPerMonth(Integer capGBPerMonth) {
        if (this.innerOnUpload() == null) {
            this.innerOnUpload = new OnUploadProperties();
        }
        this.innerOnUpload().withCapGBPerMonth(capGBPerMonth);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerOnUpload() != null) {
            innerOnUpload().validate();
        }
        if (operationStatus() != null) {
            operationStatus().validate();
        }
    }
}
