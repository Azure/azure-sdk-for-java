// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.IotDefenderSettingsModelInner;
import java.io.InputStream;

/** Resource collection API of IotDefenderSettings. */
public interface IotDefenderSettings {
    /**
     * List IoT Defender Settings.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT Defender settings.
     */
    IotDefenderSettingsList list();

    /**
     * List IoT Defender Settings.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT Defender settings.
     */
    Response<IotDefenderSettingsList> listWithResponse(Context context);

    /**
     * Get IoT Defender Settings.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT Defender Settings.
     */
    IotDefenderSettingsModel get();

    /**
     * Get IoT Defender Settings.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT Defender Settings.
     */
    Response<IotDefenderSettingsModel> getWithResponse(Context context);

    /**
     * Create or update IoT Defender settings.
     *
     * @param iotDefenderSettingsModel The IoT defender settings model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT Defender settings.
     */
    IotDefenderSettingsModel createOrUpdate(IotDefenderSettingsModelInner iotDefenderSettingsModel);

    /**
     * Create or update IoT Defender settings.
     *
     * @param iotDefenderSettingsModel The IoT defender settings model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT Defender settings.
     */
    Response<IotDefenderSettingsModel> createOrUpdateWithResponse(
        IotDefenderSettingsModelInner iotDefenderSettingsModel, Context context);

    /**
     * Delete IoT Defender settings.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete();

    /**
     * Delete IoT Defender settings.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteWithResponse(Context context);

    /**
     * Information about downloadable packages.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about package downloads.
     */
    PackageDownloads packageDownloads();

    /**
     * Information about downloadable packages.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about package downloads.
     */
    Response<PackageDownloads> packageDownloadsWithResponse(Context context);

    /**
     * Download manager activation data defined for this subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    InputStream downloadManagerActivation();

    /**
     * Download manager activation data defined for this subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    StreamResponse downloadManagerActivationWithResponse(Context context);
}
