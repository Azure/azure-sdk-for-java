// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.GitLabProjectsClient;
import com.azure.resourcemanager.security.fluent.models.GitLabProjectInner;
import com.azure.resourcemanager.security.models.GitLabProject;
import com.azure.resourcemanager.security.models.GitLabProjects;

public final class GitLabProjectsImpl implements GitLabProjects {
    private static final ClientLogger LOGGER = new ClientLogger(GitLabProjectsImpl.class);

    private final GitLabProjectsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public GitLabProjectsImpl(GitLabProjectsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<GitLabProject> list(String resourceGroupName, String securityConnectorName,
        String groupFQName) {
        PagedIterable<GitLabProjectInner> inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, groupFQName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GitLabProjectImpl(inner1, this.manager()));
    }

    public PagedIterable<GitLabProject> list(String resourceGroupName, String securityConnectorName, String groupFQName,
        Context context) {
        PagedIterable<GitLabProjectInner> inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, groupFQName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GitLabProjectImpl(inner1, this.manager()));
    }

    public Response<GitLabProject> getWithResponse(String resourceGroupName, String securityConnectorName,
        String groupFQName, String projectName, Context context) {
        Response<GitLabProjectInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, securityConnectorName, groupFQName, projectName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GitLabProjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GitLabProject get(String resourceGroupName, String securityConnectorName, String groupFQName,
        String projectName) {
        GitLabProjectInner inner
            = this.serviceClient().get(resourceGroupName, securityConnectorName, groupFQName, projectName);
        if (inner != null) {
            return new GitLabProjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private GitLabProjectsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
