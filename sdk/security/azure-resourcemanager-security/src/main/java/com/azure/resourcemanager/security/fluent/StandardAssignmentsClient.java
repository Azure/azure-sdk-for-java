// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.StandardAssignmentInner;

/**
 * An instance of this class provides access to all the operations defined in StandardAssignmentsClient.
 */
public interface StandardAssignmentsClient {
    /**
     * Retrieves a standard assignment.
     * 
     * This operation retrieves a single standard assignment, given its name and the scope it was created at.
     * 
     * @param resourceId The identifier of the resource.
     * @param standardAssignmentName The standard assignments assignment key - unique key for the standard assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security Assignment on a resource group over a given scope along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StandardAssignmentInner> getWithResponse(String resourceId, String standardAssignmentName,
        Context context);

    /**
     * Retrieves a standard assignment.
     * 
     * This operation retrieves a single standard assignment, given its name and the scope it was created at.
     * 
     * @param resourceId The identifier of the resource.
     * @param standardAssignmentName The standard assignments assignment key - unique key for the standard assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security Assignment on a resource group over a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StandardAssignmentInner get(String resourceId, String standardAssignmentName);

    /**
     * Creates or updates a standard assignment.
     * 
     * This operation creates or updates a standard assignment with the given scope and name. standard assignments apply
     * to all resources contained within their scope. For example, when you assign a policy at resource group scope,
     * that policy applies to all resources in the group.
     * 
     * @param resourceId The identifier of the resource.
     * @param standardAssignmentName The standard assignments assignment key - unique key for the standard assignment.
     * @param standardAssignment Custom standard assignment over a pre-defined scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security Assignment on a resource group over a given scope along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StandardAssignmentInner> createWithResponse(String resourceId, String standardAssignmentName,
        StandardAssignmentInner standardAssignment, Context context);

    /**
     * Creates or updates a standard assignment.
     * 
     * This operation creates or updates a standard assignment with the given scope and name. standard assignments apply
     * to all resources contained within their scope. For example, when you assign a policy at resource group scope,
     * that policy applies to all resources in the group.
     * 
     * @param resourceId The identifier of the resource.
     * @param standardAssignmentName The standard assignments assignment key - unique key for the standard assignment.
     * @param standardAssignment Custom standard assignment over a pre-defined scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security Assignment on a resource group over a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StandardAssignmentInner create(String resourceId, String standardAssignmentName,
        StandardAssignmentInner standardAssignment);

    /**
     * Deletes a standard assignment.
     * 
     * This operation deletes a standard assignment, given its name and the scope it was created in. The scope of a
     * standard assignment is the part of its ID preceding
     * '/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}'.
     * 
     * @param resourceId The identifier of the resource.
     * @param standardAssignmentName The standard assignments assignment key - unique key for the standard assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceId, String standardAssignmentName, Context context);

    /**
     * Deletes a standard assignment.
     * 
     * This operation deletes a standard assignment, given its name and the scope it was created in. The scope of a
     * standard assignment is the part of its ID preceding
     * '/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}'.
     * 
     * @param resourceId The identifier of the resource.
     * @param standardAssignmentName The standard assignments assignment key - unique key for the standard assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceId, String standardAssignmentName);

    /**
     * Get a list of all relevant standard assignments over a scope.
     * 
     * @param scope The scope of the standard assignment. Valid scopes are: management group (format:
     * 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * 'subscriptions/{subscriptionId}'), or security connector (format:
     * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all relevant standard assignments over a scope as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StandardAssignmentInner> list(String scope);

    /**
     * Get a list of all relevant standard assignments over a scope.
     * 
     * @param scope The scope of the standard assignment. Valid scopes are: management group (format:
     * 'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
     * 'subscriptions/{subscriptionId}'), or security connector (format:
     * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all relevant standard assignments over a scope as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StandardAssignmentInner> list(String scope, Context context);
}
