// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.GitHubOwnersClient;
import com.azure.resourcemanager.security.fluent.models.GitHubOwnerInner;
import com.azure.resourcemanager.security.fluent.models.GitHubOwnerListResponseInner;
import com.azure.resourcemanager.security.models.GitHubOwner;
import com.azure.resourcemanager.security.models.GitHubOwnerListResponse;
import com.azure.resourcemanager.security.models.GitHubOwners;

public final class GitHubOwnersImpl implements GitHubOwners {
    private static final ClientLogger LOGGER = new ClientLogger(GitHubOwnersImpl.class);

    private final GitHubOwnersClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public GitHubOwnersImpl(GitHubOwnersClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GitHubOwnerListResponse> listAvailableWithResponse(String resourceGroupName,
        String securityConnectorName, Context context) {
        Response<GitHubOwnerListResponseInner> inner
            = this.serviceClient().listAvailableWithResponse(resourceGroupName, securityConnectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GitHubOwnerListResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GitHubOwnerListResponse listAvailable(String resourceGroupName, String securityConnectorName) {
        GitHubOwnerListResponseInner inner
            = this.serviceClient().listAvailable(resourceGroupName, securityConnectorName);
        if (inner != null) {
            return new GitHubOwnerListResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<GitHubOwner> list(String resourceGroupName, String securityConnectorName) {
        PagedIterable<GitHubOwnerInner> inner = this.serviceClient().list(resourceGroupName, securityConnectorName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GitHubOwnerImpl(inner1, this.manager()));
    }

    public PagedIterable<GitHubOwner> list(String resourceGroupName, String securityConnectorName, Context context) {
        PagedIterable<GitHubOwnerInner> inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GitHubOwnerImpl(inner1, this.manager()));
    }

    public Response<GitHubOwner> getWithResponse(String resourceGroupName, String securityConnectorName,
        String ownerName, Context context) {
        Response<GitHubOwnerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, securityConnectorName, ownerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GitHubOwnerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GitHubOwner get(String resourceGroupName, String securityConnectorName, String ownerName) {
        GitHubOwnerInner inner = this.serviceClient().get(resourceGroupName, securityConnectorName, ownerName);
        if (inner != null) {
            return new GitHubOwnerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private GitHubOwnersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
