// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A summary of the scan results of the blobs that were scanned.
 */
@Fluent
public final class BlobsScanSummary implements JsonSerializable<BlobsScanSummary> {
    /*
     * The total number of blobs that were scanned.
     */
    private Long totalBlobsScanned;

    /*
     * The number of malicious blobs that were detected during the scan.
     */
    private Long maliciousBlobsCount;

    /*
     * The number of blobs that were skipped.
     */
    private Long skippedBlobsCount;

    /*
     * The number of gigabytes of data that were scanned.
     */
    private Double scannedBlobsInGB;

    /**
     * Creates an instance of BlobsScanSummary class.
     */
    public BlobsScanSummary() {
    }

    /**
     * Get the totalBlobsScanned property: The total number of blobs that were scanned.
     * 
     * @return the totalBlobsScanned value.
     */
    public Long totalBlobsScanned() {
        return this.totalBlobsScanned;
    }

    /**
     * Set the totalBlobsScanned property: The total number of blobs that were scanned.
     * 
     * @param totalBlobsScanned the totalBlobsScanned value to set.
     * @return the BlobsScanSummary object itself.
     */
    public BlobsScanSummary withTotalBlobsScanned(Long totalBlobsScanned) {
        this.totalBlobsScanned = totalBlobsScanned;
        return this;
    }

    /**
     * Get the maliciousBlobsCount property: The number of malicious blobs that were detected during the scan.
     * 
     * @return the maliciousBlobsCount value.
     */
    public Long maliciousBlobsCount() {
        return this.maliciousBlobsCount;
    }

    /**
     * Set the maliciousBlobsCount property: The number of malicious blobs that were detected during the scan.
     * 
     * @param maliciousBlobsCount the maliciousBlobsCount value to set.
     * @return the BlobsScanSummary object itself.
     */
    public BlobsScanSummary withMaliciousBlobsCount(Long maliciousBlobsCount) {
        this.maliciousBlobsCount = maliciousBlobsCount;
        return this;
    }

    /**
     * Get the skippedBlobsCount property: The number of blobs that were skipped.
     * 
     * @return the skippedBlobsCount value.
     */
    public Long skippedBlobsCount() {
        return this.skippedBlobsCount;
    }

    /**
     * Set the skippedBlobsCount property: The number of blobs that were skipped.
     * 
     * @param skippedBlobsCount the skippedBlobsCount value to set.
     * @return the BlobsScanSummary object itself.
     */
    public BlobsScanSummary withSkippedBlobsCount(Long skippedBlobsCount) {
        this.skippedBlobsCount = skippedBlobsCount;
        return this;
    }

    /**
     * Get the scannedBlobsInGB property: The number of gigabytes of data that were scanned.
     * 
     * @return the scannedBlobsInGB value.
     */
    public Double scannedBlobsInGB() {
        return this.scannedBlobsInGB;
    }

    /**
     * Set the scannedBlobsInGB property: The number of gigabytes of data that were scanned.
     * 
     * @param scannedBlobsInGB the scannedBlobsInGB value to set.
     * @return the BlobsScanSummary object itself.
     */
    public BlobsScanSummary withScannedBlobsInGB(Double scannedBlobsInGB) {
        this.scannedBlobsInGB = scannedBlobsInGB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("totalBlobsScanned", this.totalBlobsScanned);
        jsonWriter.writeNumberField("maliciousBlobsCount", this.maliciousBlobsCount);
        jsonWriter.writeNumberField("skippedBlobsCount", this.skippedBlobsCount);
        jsonWriter.writeNumberField("scannedBlobsInGB", this.scannedBlobsInGB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobsScanSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobsScanSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlobsScanSummary.
     */
    public static BlobsScanSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobsScanSummary deserializedBlobsScanSummary = new BlobsScanSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalBlobsScanned".equals(fieldName)) {
                    deserializedBlobsScanSummary.totalBlobsScanned = reader.getNullable(JsonReader::getLong);
                } else if ("maliciousBlobsCount".equals(fieldName)) {
                    deserializedBlobsScanSummary.maliciousBlobsCount = reader.getNullable(JsonReader::getLong);
                } else if ("skippedBlobsCount".equals(fieldName)) {
                    deserializedBlobsScanSummary.skippedBlobsCount = reader.getNullable(JsonReader::getLong);
                } else if ("scannedBlobsInGB".equals(fieldName)) {
                    deserializedBlobsScanSummary.scannedBlobsInGB = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlobsScanSummary;
        });
    }
}
