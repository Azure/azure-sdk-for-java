// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of GovernanceRulesOperations. */
public interface GovernanceRulesOperations {
    /**
     * Get a specific governanceRule for the requested scope by ruleId.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule for the requested scope by ruleId.
     */
    GovernanceRule get(String ruleId);

    /**
     * Get a specific governanceRule for the requested scope by ruleId.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule for the requested scope by ruleId along with {@link Response}.
     */
    Response<GovernanceRule> getWithResponse(String ruleId, Context context);

    /**
     * Delete a GovernanceRule over a given scope.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String ruleId);

    /**
     * Delete a GovernanceRule over a given scope.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String ruleId, Context context);

    /**
     * Execute a security GovernanceRule on the given subscription.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param executeGovernanceRuleParams GovernanceRule over a subscription scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void ruleIdExecuteSingleSubscription(String ruleId, ExecuteGovernanceRuleParams executeGovernanceRuleParams);

    /**
     * Execute a security GovernanceRule on the given subscription.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void ruleIdExecuteSingleSubscription(String ruleId);

    /**
     * Execute a security GovernanceRule on the given subscription.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param executeGovernanceRuleParams GovernanceRule over a subscription scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void ruleIdExecuteSingleSubscription(
        String ruleId, ExecuteGovernanceRuleParams executeGovernanceRuleParams, Context context);

    /**
     * Execute a security GovernanceRule on the given security connector.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param securityConnectorName The security connector name.
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param executeGovernanceRuleParams GovernanceRule over a subscription scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void ruleIdExecuteSingleSecurityConnector(
        String resourceGroupName,
        String securityConnectorName,
        String ruleId,
        ExecuteGovernanceRuleParams executeGovernanceRuleParams);

    /**
     * Execute a security GovernanceRule on the given security connector.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param securityConnectorName The security connector name.
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void ruleIdExecuteSingleSecurityConnector(String resourceGroupName, String securityConnectorName, String ruleId);

    /**
     * Execute a security GovernanceRule on the given security connector.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param securityConnectorName The security connector name.
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param executeGovernanceRuleParams GovernanceRule over a subscription scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void ruleIdExecuteSingleSecurityConnector(
        String resourceGroupName,
        String securityConnectorName,
        String ruleId,
        ExecuteGovernanceRuleParams executeGovernanceRuleParams,
        Context context);

    /**
     * Get a specific governanceRule for the requested scope by ruleId.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule for the requested scope by ruleId along with {@link Response}.
     */
    GovernanceRule getById(String id);

    /**
     * Get a specific governanceRule for the requested scope by ruleId.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule for the requested scope by ruleId along with {@link Response}.
     */
    Response<GovernanceRule> getByIdWithResponse(String id, Context context);

    /**
     * Delete a GovernanceRule over a given scope.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a GovernanceRule over a given scope.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new GovernanceRule resource.
     *
     * @param name resource name.
     * @return the first stage of the new GovernanceRule definition.
     */
    GovernanceRule.DefinitionStages.Blank define(String name);
}
