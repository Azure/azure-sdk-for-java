// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of Sensitive Data Discovery.
 */
@Fluent
public final class SensitiveDataDiscoveryProperties implements JsonSerializable<SensitiveDataDiscoveryProperties> {
    /*
     * Indicates whether Sensitive Data Discovery should be enabled.
     */
    private Boolean isEnabled;

    /*
     * Upon failure or partial success. Additional data describing Sensitive Data Discovery enable/disable operation.
     */
    private OperationStatus operationStatus;

    /**
     * Creates an instance of SensitiveDataDiscoveryProperties class.
     */
    public SensitiveDataDiscoveryProperties() {
    }

    /**
     * Get the isEnabled property: Indicates whether Sensitive Data Discovery should be enabled.
     * 
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Indicates whether Sensitive Data Discovery should be enabled.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the SensitiveDataDiscoveryProperties object itself.
     */
    public SensitiveDataDiscoveryProperties withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the operationStatus property: Upon failure or partial success. Additional data describing Sensitive Data
     * Discovery enable/disable operation.
     * 
     * @return the operationStatus value.
     */
    public OperationStatus operationStatus() {
        return this.operationStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationStatus() != null) {
            operationStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isEnabled", this.isEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SensitiveDataDiscoveryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SensitiveDataDiscoveryProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SensitiveDataDiscoveryProperties.
     */
    public static SensitiveDataDiscoveryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SensitiveDataDiscoveryProperties deserializedSensitiveDataDiscoveryProperties
                = new SensitiveDataDiscoveryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isEnabled".equals(fieldName)) {
                    deserializedSensitiveDataDiscoveryProperties.isEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("operationStatus".equals(fieldName)) {
                    deserializedSensitiveDataDiscoveryProperties.operationStatus = OperationStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSensitiveDataDiscoveryProperties;
        });
    }
}
