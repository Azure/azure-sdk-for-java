// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration for servers Arc auto provisioning for a given environment.
 */
@Fluent
public final class ArcAutoProvisioningConfiguration implements JsonSerializable<ArcAutoProvisioningConfiguration> {
    /*
     * Optional HTTP proxy endpoint to use for the Arc agent
     */
    private String proxy;

    /*
     * Optional Arc private link scope resource id to link the Arc agent
     */
    private String privateLinkScope;

    /**
     * Creates an instance of ArcAutoProvisioningConfiguration class.
     */
    public ArcAutoProvisioningConfiguration() {
    }

    /**
     * Get the proxy property: Optional HTTP proxy endpoint to use for the Arc agent.
     * 
     * @return the proxy value.
     */
    public String proxy() {
        return this.proxy;
    }

    /**
     * Set the proxy property: Optional HTTP proxy endpoint to use for the Arc agent.
     * 
     * @param proxy the proxy value to set.
     * @return the ArcAutoProvisioningConfiguration object itself.
     */
    public ArcAutoProvisioningConfiguration withProxy(String proxy) {
        this.proxy = proxy;
        return this;
    }

    /**
     * Get the privateLinkScope property: Optional Arc private link scope resource id to link the Arc agent.
     * 
     * @return the privateLinkScope value.
     */
    public String privateLinkScope() {
        return this.privateLinkScope;
    }

    /**
     * Set the privateLinkScope property: Optional Arc private link scope resource id to link the Arc agent.
     * 
     * @param privateLinkScope the privateLinkScope value to set.
     * @return the ArcAutoProvisioningConfiguration object itself.
     */
    public ArcAutoProvisioningConfiguration withPrivateLinkScope(String privateLinkScope) {
        this.privateLinkScope = privateLinkScope;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("proxy", this.proxy);
        jsonWriter.writeStringField("privateLinkScope", this.privateLinkScope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArcAutoProvisioningConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArcAutoProvisioningConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArcAutoProvisioningConfiguration.
     */
    public static ArcAutoProvisioningConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArcAutoProvisioningConfiguration deserializedArcAutoProvisioningConfiguration
                = new ArcAutoProvisioningConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("proxy".equals(fieldName)) {
                    deserializedArcAutoProvisioningConfiguration.proxy = reader.getString();
                } else if ("privateLinkScope".equals(fieldName)) {
                    deserializedArcAutoProvisioningConfiguration.privateLinkScope = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArcAutoProvisioningConfiguration;
        });
    }
}
