// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource of the configuration or data needed to onboard the machine to MDE.
 */
@Fluent
public final class MdeOnboardingDataInner extends ProxyResource {
    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];

    /*
     * Properties of the MDE configuration or data parameter needed to onboard the machine to MDE
     */
    private MdeOnboardingDataProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of MdeOnboardingDataInner class.
     */
    public MdeOnboardingDataInner() {
    }

    /**
     * Get the innerProperties property: Properties of the MDE configuration or data parameter needed to onboard the
     * machine to MDE.
     * 
     * @return the innerProperties value.
     */
    private MdeOnboardingDataProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the onboardingPackageWindows property: The onboarding package used to onboard Windows machines to MDE, coded
     * in base64. This can also be used for onboarding using the dedicated VM Extension.
     * 
     * @return the onboardingPackageWindows value.
     */
    public byte[] onboardingPackageWindows() {
        return this.innerProperties() == null ? EMPTY_BYTE_ARRAY : this.innerProperties().onboardingPackageWindows();
    }

    /**
     * Set the onboardingPackageWindows property: The onboarding package used to onboard Windows machines to MDE, coded
     * in base64. This can also be used for onboarding using the dedicated VM Extension.
     * 
     * @param onboardingPackageWindows the onboardingPackageWindows value to set.
     * @return the MdeOnboardingDataInner object itself.
     */
    public MdeOnboardingDataInner withOnboardingPackageWindows(byte[] onboardingPackageWindows) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MdeOnboardingDataProperties();
        }
        this.innerProperties().withOnboardingPackageWindows(onboardingPackageWindows);
        return this;
    }

    /**
     * Get the onboardingPackageLinux property: The onboarding package used to onboard Linux machines to MDE, coded in
     * base64. This can also be used for onboarding using the dedicated VM Extension.
     * 
     * @return the onboardingPackageLinux value.
     */
    public byte[] onboardingPackageLinux() {
        return this.innerProperties() == null ? EMPTY_BYTE_ARRAY : this.innerProperties().onboardingPackageLinux();
    }

    /**
     * Set the onboardingPackageLinux property: The onboarding package used to onboard Linux machines to MDE, coded in
     * base64. This can also be used for onboarding using the dedicated VM Extension.
     * 
     * @param onboardingPackageLinux the onboardingPackageLinux value to set.
     * @return the MdeOnboardingDataInner object itself.
     */
    public MdeOnboardingDataInner withOnboardingPackageLinux(byte[] onboardingPackageLinux) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MdeOnboardingDataProperties();
        }
        this.innerProperties().withOnboardingPackageLinux(onboardingPackageLinux);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MdeOnboardingDataInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MdeOnboardingDataInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MdeOnboardingDataInner.
     */
    public static MdeOnboardingDataInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MdeOnboardingDataInner deserializedMdeOnboardingDataInner = new MdeOnboardingDataInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMdeOnboardingDataInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMdeOnboardingDataInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMdeOnboardingDataInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedMdeOnboardingDataInner.innerProperties = MdeOnboardingDataProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMdeOnboardingDataInner;
        });
    }
}
