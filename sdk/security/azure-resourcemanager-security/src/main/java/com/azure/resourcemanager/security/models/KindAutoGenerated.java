// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes an Azure resource with kind.
 */
@Fluent
public class KindAutoGenerated implements JsonSerializable<KindAutoGenerated> {
    /*
     * Kind of the resource
     */
    private String kind;

    /**
     * Creates an instance of KindAutoGenerated class.
     */
    public KindAutoGenerated() {
    }

    /**
     * Get the kind property: Kind of the resource.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of the resource.
     * 
     * @param kind the kind value to set.
     * @return the KindAutoGenerated object itself.
     */
    public KindAutoGenerated withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KindAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KindAutoGenerated if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the KindAutoGenerated.
     */
    public static KindAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KindAutoGenerated deserializedKindAutoGenerated = new KindAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedKindAutoGenerated.kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKindAutoGenerated;
        });
    }
}
