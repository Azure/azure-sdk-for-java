// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.DevicesForHubsClient;
import com.azure.resourcemanager.security.fluent.models.DeviceInner;
import com.azure.resourcemanager.security.models.Device;
import com.azure.resourcemanager.security.models.DevicesForHubs;
import com.azure.resourcemanager.security.models.ManagementState;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DevicesForHubsImpl implements DevicesForHubs {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DevicesForHubsImpl.class);

    private final DevicesForHubsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public DevicesForHubsImpl(
        DevicesForHubsClient innerClient, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Device> list(String resourceId) {
        PagedIterable<DeviceInner> inner = this.serviceClient().list(resourceId);
        return Utils.mapPage(inner, inner1 -> new DeviceImpl(inner1, this.manager()));
    }

    public PagedIterable<Device> list(
        String resourceId, Integer limit, String skipToken, ManagementState deviceManagementType, Context context) {
        PagedIterable<DeviceInner> inner =
            this.serviceClient().list(resourceId, limit, skipToken, deviceManagementType, context);
        return Utils.mapPage(inner, inner1 -> new DeviceImpl(inner1, this.manager()));
    }

    private DevicesForHubsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
