// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.security.fluent.HealthReportOperationsClient;
import com.azure.resourcemanager.security.fluent.models.HealthReportInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in HealthReportOperationsClient. */
public final class HealthReportOperationsClientImpl implements HealthReportOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final HealthReportOperationsService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of HealthReportOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    HealthReportOperationsClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy
                .create(HealthReportOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterHealthReportOperations to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterHealth")
    public interface HealthReportOperationsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{resourceId}/providers/Microsoft.Security/healthReports/{healthReportName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthReportInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @PathParam("healthReportName") String healthReportName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get health report of resource.
     *
     * @param resourceId The identifier of the resource.
     * @param healthReportName The health report Key - Unique key for the health report type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return health report of resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthReportInner>> getWithResponseAsync(String resourceId, String healthReportName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (healthReportName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthReportName is required and cannot be null."));
        }
        final String apiVersion = "2023-02-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.get(this.client.getEndpoint(), apiVersion, resourceId, healthReportName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get health report of resource.
     *
     * @param resourceId The identifier of the resource.
     * @param healthReportName The health report Key - Unique key for the health report type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return health report of resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthReportInner>> getWithResponseAsync(
        String resourceId, String healthReportName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (healthReportName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter healthReportName is required and cannot be null."));
        }
        final String apiVersion = "2023-02-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), apiVersion, resourceId, healthReportName, accept, context);
    }

    /**
     * Get health report of resource.
     *
     * @param resourceId The identifier of the resource.
     * @param healthReportName The health report Key - Unique key for the health report type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return health report of resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthReportInner> getAsync(String resourceId, String healthReportName) {
        return getWithResponseAsync(resourceId, healthReportName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get health report of resource.
     *
     * @param resourceId The identifier of the resource.
     * @param healthReportName The health report Key - Unique key for the health report type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return health report of resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HealthReportInner> getWithResponse(String resourceId, String healthReportName, Context context) {
        return getWithResponseAsync(resourceId, healthReportName, context).block();
    }

    /**
     * Get health report of resource.
     *
     * @param resourceId The identifier of the resource.
     * @param healthReportName The health report Key - Unique key for the health report type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return health report of resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HealthReportInner get(String resourceId, String healthReportName) {
        return getWithResponse(resourceId, healthReportName, Context.NONE).getValue();
    }
}
