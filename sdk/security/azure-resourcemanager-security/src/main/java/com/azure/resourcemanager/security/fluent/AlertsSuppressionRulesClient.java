// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.AlertsSuppressionRuleInner;

/** An instance of this class provides access to all the operations defined in AlertsSuppressionRulesClient. */
public interface AlertsSuppressionRulesClient {
    /**
     * List of all the dismiss rules for the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return suppression rules list for subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AlertsSuppressionRuleInner> list();

    /**
     * List of all the dismiss rules for the given subscription.
     *
     * @param alertType Type of the alert to get rules for.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return suppression rules list for subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AlertsSuppressionRuleInner> list(String alertType, Context context);

    /**
     * Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription.
     *
     * @param alertsSuppressionRuleName The unique name of the suppression alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AlertsSuppressionRuleInner get(String alertsSuppressionRuleName);

    /**
     * Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription.
     *
     * @param alertsSuppressionRuleName The unique name of the suppression alert rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AlertsSuppressionRuleInner> getWithResponse(String alertsSuppressionRuleName, Context context);

    /**
     * Update existing rule or create new rule if it doesn't exist.
     *
     * @param alertsSuppressionRuleName The unique name of the suppression alert rule.
     * @param alertsSuppressionRule Suppression rule object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the suppression rule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AlertsSuppressionRuleInner update(
        String alertsSuppressionRuleName, AlertsSuppressionRuleInner alertsSuppressionRule);

    /**
     * Update existing rule or create new rule if it doesn't exist.
     *
     * @param alertsSuppressionRuleName The unique name of the suppression alert rule.
     * @param alertsSuppressionRule Suppression rule object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the suppression rule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AlertsSuppressionRuleInner> updateWithResponse(
        String alertsSuppressionRuleName, AlertsSuppressionRuleInner alertsSuppressionRule, Context context);

    /**
     * Delete dismiss alert rule for this subscription.
     *
     * @param alertsSuppressionRuleName The unique name of the suppression alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String alertsSuppressionRuleName);

    /**
     * Delete dismiss alert rule for this subscription.
     *
     * @param alertsSuppressionRuleName The unique name of the suppression alert rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String alertsSuppressionRuleName, Context context);
}
