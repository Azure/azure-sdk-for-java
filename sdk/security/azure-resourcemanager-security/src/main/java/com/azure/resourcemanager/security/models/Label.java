// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * Microsoft information protection sensitivity label.
 */
@Fluent
public final class Label implements JsonSerializable<Label> {
    /*
     * The display name of the label
     */
    private String name;

    /*
     * The ID of the label
     */
    private UUID id;

    /*
     * Labels are ordered by sensitivity level. The higher the order of the label, the more sensitive it is.
     */
    private Float order;

    /**
     * Creates an instance of Label class.
     */
    public Label() {
    }

    /**
     * Get the name property: The display name of the label.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The display name of the label.
     * 
     * @param name the name value to set.
     * @return the Label object itself.
     */
    public Label withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the id property: The ID of the label.
     * 
     * @return the id value.
     */
    public UUID id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the label.
     * 
     * @param id the id value to set.
     * @return the Label object itself.
     */
    public Label withId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get the order property: Labels are ordered by sensitivity level. The higher the order of the label, the more
     * sensitive it is.
     * 
     * @return the order value.
     */
    public Float order() {
        return this.order;
    }

    /**
     * Set the order property: Labels are ordered by sensitivity level. The higher the order of the label, the more
     * sensitive it is.
     * 
     * @param order the order value to set.
     * @return the Label object itself.
     */
    public Label withOrder(Float order) {
        this.order = order;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("id", Objects.toString(this.id, null));
        jsonWriter.writeNumberField("order", this.order);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Label from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Label if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Label.
     */
    public static Label fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Label deserializedLabel = new Label();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedLabel.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedLabel.id
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("order".equals(fieldName)) {
                    deserializedLabel.order = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabel;
        });
    }
}
