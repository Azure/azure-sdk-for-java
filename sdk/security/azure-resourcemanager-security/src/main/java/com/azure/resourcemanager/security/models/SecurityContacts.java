// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of SecurityContacts. */
public interface SecurityContacts {
    /**
     * List all security contact configurations for the subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of security contacts response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SecurityContact> list();

    /**
     * List all security contact configurations for the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of security contacts response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SecurityContact> list(Context context);

    /**
     * Get Default Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return default Security contact configurations for the subscription along with {@link Response}.
     */
    Response<SecurityContact> getWithResponse(String securityContactName, Context context);

    /**
     * Get Default Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return default Security contact configurations for the subscription.
     */
    SecurityContact get(String securityContactName);

    /**
     * Delete security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String securityContactName, Context context);

    /**
     * Delete security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String securityContactName);

    /**
     * Get Default Security contact configurations for the subscription.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return default Security contact configurations for the subscription along with {@link Response}.
     */
    SecurityContact getById(String id);

    /**
     * Get Default Security contact configurations for the subscription.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return default Security contact configurations for the subscription along with {@link Response}.
     */
    Response<SecurityContact> getByIdWithResponse(String id, Context context);

    /**
     * Delete security contact configurations for the subscription.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete security contact configurations for the subscription.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SecurityContact resource.
     *
     * @param name resource name.
     * @return the first stage of the new SecurityContact definition.
     */
    SecurityContact.DefinitionStages.Blank define(String name);
}
