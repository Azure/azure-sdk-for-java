// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.models.State;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Regulatory compliance assessment details and state. */
@JsonFlatten
@Fluent
public class RegulatoryComplianceAssessmentInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RegulatoryComplianceAssessmentInner.class);

    /*
     * The description of the regulatory compliance assessment
     */
    @JsonProperty(value = "properties.description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * The expected type of assessment contained in the AssessmentDetailsLink
     */
    @JsonProperty(value = "properties.assessmentType", access = JsonProperty.Access.WRITE_ONLY)
    private String assessmentType;

    /*
     * Link to more detailed assessment results data. The response type will be
     * according to the assessmentType field
     */
    @JsonProperty(value = "properties.assessmentDetailsLink", access = JsonProperty.Access.WRITE_ONLY)
    private String assessmentDetailsLink;

    /*
     * Aggregative state based on the assessment's scanned resources states
     */
    @JsonProperty(value = "properties.state")
    private State state;

    /*
     * The given assessment's related resources count with passed state.
     */
    @JsonProperty(value = "properties.passedResources", access = JsonProperty.Access.WRITE_ONLY)
    private Integer passedResources;

    /*
     * The given assessment's related resources count with failed state.
     */
    @JsonProperty(value = "properties.failedResources", access = JsonProperty.Access.WRITE_ONLY)
    private Integer failedResources;

    /*
     * The given assessment's related resources count with skipped state.
     */
    @JsonProperty(value = "properties.skippedResources", access = JsonProperty.Access.WRITE_ONLY)
    private Integer skippedResources;

    /*
     * The given assessment's related resources count with unsupported state.
     */
    @JsonProperty(value = "properties.unsupportedResources", access = JsonProperty.Access.WRITE_ONLY)
    private Integer unsupportedResources;

    /**
     * Get the description property: The description of the regulatory compliance assessment.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the assessmentType property: The expected type of assessment contained in the AssessmentDetailsLink.
     *
     * @return the assessmentType value.
     */
    public String assessmentType() {
        return this.assessmentType;
    }

    /**
     * Get the assessmentDetailsLink property: Link to more detailed assessment results data. The response type will be
     * according to the assessmentType field.
     *
     * @return the assessmentDetailsLink value.
     */
    public String assessmentDetailsLink() {
        return this.assessmentDetailsLink;
    }

    /**
     * Get the state property: Aggregative state based on the assessment's scanned resources states.
     *
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: Aggregative state based on the assessment's scanned resources states.
     *
     * @param state the state value to set.
     * @return the RegulatoryComplianceAssessmentInner object itself.
     */
    public RegulatoryComplianceAssessmentInner withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the passedResources property: The given assessment's related resources count with passed state.
     *
     * @return the passedResources value.
     */
    public Integer passedResources() {
        return this.passedResources;
    }

    /**
     * Get the failedResources property: The given assessment's related resources count with failed state.
     *
     * @return the failedResources value.
     */
    public Integer failedResources() {
        return this.failedResources;
    }

    /**
     * Get the skippedResources property: The given assessment's related resources count with skipped state.
     *
     * @return the skippedResources value.
     */
    public Integer skippedResources() {
        return this.skippedResources;
    }

    /**
     * Get the unsupportedResources property: The given assessment's related resources count with unsupported state.
     *
     * @return the unsupportedResources value.
     */
    public Integer unsupportedResources() {
        return this.unsupportedResources;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
