// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Defender for Servers AWS offering.
 */
@Fluent
public final class DefenderForServersAwsOffering extends CloudOffering {
    /*
     * The type of the security offering.
     */
    private OfferingType offeringType = OfferingType.DEFENDER_FOR_SERVERS_AWS;

    /*
     * The Defender for servers connection configuration
     */
    private DefenderForServersAwsOfferingDefenderForServers defenderForServers;

    /*
     * The ARC autoprovisioning configuration
     */
    private DefenderForServersAwsOfferingArcAutoProvisioning arcAutoProvisioning;

    /*
     * The Vulnerability Assessment autoprovisioning configuration
     */
    private DefenderForServersAwsOfferingVaAutoProvisioning vaAutoProvisioning;

    /*
     * The Microsoft Defender for Endpoint autoprovisioning configuration
     */
    private DefenderForServersAwsOfferingMdeAutoProvisioning mdeAutoProvisioning;

    /*
     * configuration for the servers offering subPlan
     */
    private DefenderForServersAwsOfferingSubPlan subPlan;

    /*
     * The Microsoft Defender for Server VM scanning configuration
     */
    private DefenderForServersAwsOfferingVmScanners vmScanners;

    /**
     * Creates an instance of DefenderForServersAwsOffering class.
     */
    public DefenderForServersAwsOffering() {
    }

    /**
     * Get the offeringType property: The type of the security offering.
     * 
     * @return the offeringType value.
     */
    @Override
    public OfferingType offeringType() {
        return this.offeringType;
    }

    /**
     * Get the defenderForServers property: The Defender for servers connection configuration.
     * 
     * @return the defenderForServers value.
     */
    public DefenderForServersAwsOfferingDefenderForServers defenderForServers() {
        return this.defenderForServers;
    }

    /**
     * Set the defenderForServers property: The Defender for servers connection configuration.
     * 
     * @param defenderForServers the defenderForServers value to set.
     * @return the DefenderForServersAwsOffering object itself.
     */
    public DefenderForServersAwsOffering
        withDefenderForServers(DefenderForServersAwsOfferingDefenderForServers defenderForServers) {
        this.defenderForServers = defenderForServers;
        return this;
    }

    /**
     * Get the arcAutoProvisioning property: The ARC autoprovisioning configuration.
     * 
     * @return the arcAutoProvisioning value.
     */
    public DefenderForServersAwsOfferingArcAutoProvisioning arcAutoProvisioning() {
        return this.arcAutoProvisioning;
    }

    /**
     * Set the arcAutoProvisioning property: The ARC autoprovisioning configuration.
     * 
     * @param arcAutoProvisioning the arcAutoProvisioning value to set.
     * @return the DefenderForServersAwsOffering object itself.
     */
    public DefenderForServersAwsOffering
        withArcAutoProvisioning(DefenderForServersAwsOfferingArcAutoProvisioning arcAutoProvisioning) {
        this.arcAutoProvisioning = arcAutoProvisioning;
        return this;
    }

    /**
     * Get the vaAutoProvisioning property: The Vulnerability Assessment autoprovisioning configuration.
     * 
     * @return the vaAutoProvisioning value.
     */
    public DefenderForServersAwsOfferingVaAutoProvisioning vaAutoProvisioning() {
        return this.vaAutoProvisioning;
    }

    /**
     * Set the vaAutoProvisioning property: The Vulnerability Assessment autoprovisioning configuration.
     * 
     * @param vaAutoProvisioning the vaAutoProvisioning value to set.
     * @return the DefenderForServersAwsOffering object itself.
     */
    public DefenderForServersAwsOffering
        withVaAutoProvisioning(DefenderForServersAwsOfferingVaAutoProvisioning vaAutoProvisioning) {
        this.vaAutoProvisioning = vaAutoProvisioning;
        return this;
    }

    /**
     * Get the mdeAutoProvisioning property: The Microsoft Defender for Endpoint autoprovisioning configuration.
     * 
     * @return the mdeAutoProvisioning value.
     */
    public DefenderForServersAwsOfferingMdeAutoProvisioning mdeAutoProvisioning() {
        return this.mdeAutoProvisioning;
    }

    /**
     * Set the mdeAutoProvisioning property: The Microsoft Defender for Endpoint autoprovisioning configuration.
     * 
     * @param mdeAutoProvisioning the mdeAutoProvisioning value to set.
     * @return the DefenderForServersAwsOffering object itself.
     */
    public DefenderForServersAwsOffering
        withMdeAutoProvisioning(DefenderForServersAwsOfferingMdeAutoProvisioning mdeAutoProvisioning) {
        this.mdeAutoProvisioning = mdeAutoProvisioning;
        return this;
    }

    /**
     * Get the subPlan property: configuration for the servers offering subPlan.
     * 
     * @return the subPlan value.
     */
    public DefenderForServersAwsOfferingSubPlan subPlan() {
        return this.subPlan;
    }

    /**
     * Set the subPlan property: configuration for the servers offering subPlan.
     * 
     * @param subPlan the subPlan value to set.
     * @return the DefenderForServersAwsOffering object itself.
     */
    public DefenderForServersAwsOffering withSubPlan(DefenderForServersAwsOfferingSubPlan subPlan) {
        this.subPlan = subPlan;
        return this;
    }

    /**
     * Get the vmScanners property: The Microsoft Defender for Server VM scanning configuration.
     * 
     * @return the vmScanners value.
     */
    public DefenderForServersAwsOfferingVmScanners vmScanners() {
        return this.vmScanners;
    }

    /**
     * Set the vmScanners property: The Microsoft Defender for Server VM scanning configuration.
     * 
     * @param vmScanners the vmScanners value to set.
     * @return the DefenderForServersAwsOffering object itself.
     */
    public DefenderForServersAwsOffering withVmScanners(DefenderForServersAwsOfferingVmScanners vmScanners) {
        this.vmScanners = vmScanners;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (defenderForServers() != null) {
            defenderForServers().validate();
        }
        if (arcAutoProvisioning() != null) {
            arcAutoProvisioning().validate();
        }
        if (vaAutoProvisioning() != null) {
            vaAutoProvisioning().validate();
        }
        if (mdeAutoProvisioning() != null) {
            mdeAutoProvisioning().validate();
        }
        if (subPlan() != null) {
            subPlan().validate();
        }
        if (vmScanners() != null) {
            vmScanners().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("offeringType", this.offeringType == null ? null : this.offeringType.toString());
        jsonWriter.writeJsonField("defenderForServers", this.defenderForServers);
        jsonWriter.writeJsonField("arcAutoProvisioning", this.arcAutoProvisioning);
        jsonWriter.writeJsonField("vaAutoProvisioning", this.vaAutoProvisioning);
        jsonWriter.writeJsonField("mdeAutoProvisioning", this.mdeAutoProvisioning);
        jsonWriter.writeJsonField("subPlan", this.subPlan);
        jsonWriter.writeJsonField("vmScanners", this.vmScanners);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefenderForServersAwsOffering from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefenderForServersAwsOffering if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DefenderForServersAwsOffering.
     */
    public static DefenderForServersAwsOffering fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefenderForServersAwsOffering deserializedDefenderForServersAwsOffering
                = new DefenderForServersAwsOffering();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.withDescription(reader.getString());
                } else if ("offeringType".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.offeringType
                        = OfferingType.fromString(reader.getString());
                } else if ("defenderForServers".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.defenderForServers
                        = DefenderForServersAwsOfferingDefenderForServers.fromJson(reader);
                } else if ("arcAutoProvisioning".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.arcAutoProvisioning
                        = DefenderForServersAwsOfferingArcAutoProvisioning.fromJson(reader);
                } else if ("vaAutoProvisioning".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.vaAutoProvisioning
                        = DefenderForServersAwsOfferingVaAutoProvisioning.fromJson(reader);
                } else if ("mdeAutoProvisioning".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.mdeAutoProvisioning
                        = DefenderForServersAwsOfferingMdeAutoProvisioning.fromJson(reader);
                } else if ("subPlan".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.subPlan
                        = DefenderForServersAwsOfferingSubPlan.fromJson(reader);
                } else if ("vmScanners".equals(fieldName)) {
                    deserializedDefenderForServersAwsOffering.vmScanners
                        = DefenderForServersAwsOfferingVmScanners.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefenderForServersAwsOffering;
        });
    }
}
