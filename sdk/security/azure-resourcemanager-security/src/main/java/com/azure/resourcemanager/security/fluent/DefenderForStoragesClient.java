// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.DefenderForStorageSettingInner;
import com.azure.resourcemanager.security.models.SettingName;

/**
 * An instance of this class provides access to all the operations defined in DefenderForStoragesClient.
 */
public interface DefenderForStoragesClient {
    /**
     * Gets the Defender for Storage settings for the specified storage account.
     * 
     * @param resourceId The identifier of the resource.
     * @param settingName Defender for Storage setting name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Defender for Storage settings for the specified storage account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DefenderForStorageSettingInner> getWithResponse(String resourceId, SettingName settingName,
        Context context);

    /**
     * Gets the Defender for Storage settings for the specified storage account.
     * 
     * @param resourceId The identifier of the resource.
     * @param settingName Defender for Storage setting name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Defender for Storage settings for the specified storage account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DefenderForStorageSettingInner get(String resourceId, SettingName settingName);

    /**
     * Creates or updates the Defender for Storage settings on a specified storage account.
     * 
     * @param resourceId The identifier of the resource.
     * @param settingName Defender for Storage setting name.
     * @param defenderForStorageSetting Defender for Storage Settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Defender for Storage resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DefenderForStorageSettingInner> createWithResponse(String resourceId, SettingName settingName,
        DefenderForStorageSettingInner defenderForStorageSetting, Context context);

    /**
     * Creates or updates the Defender for Storage settings on a specified storage account.
     * 
     * @param resourceId The identifier of the resource.
     * @param settingName Defender for Storage setting name.
     * @param defenderForStorageSetting Defender for Storage Settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Defender for Storage resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DefenderForStorageSettingInner create(String resourceId, SettingName settingName,
        DefenderForStorageSettingInner defenderForStorageSetting);
}
