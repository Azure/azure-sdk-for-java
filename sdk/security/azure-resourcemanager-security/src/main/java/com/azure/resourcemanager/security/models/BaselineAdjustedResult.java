// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The rule result adjusted with baseline.
 */
@Fluent
public final class BaselineAdjustedResult implements JsonSerializable<BaselineAdjustedResult> {
    /*
     * Baseline details.
     */
    private Baseline baseline;

    /*
     * The rule result status.
     */
    private RuleStatus status;

    /*
     * Results the are not in baseline.
     */
    private List<List<String>> resultsNotInBaseline;

    /*
     * Results the are in baseline.
     */
    private List<List<String>> resultsOnlyInBaseline;

    /**
     * Creates an instance of BaselineAdjustedResult class.
     */
    public BaselineAdjustedResult() {
    }

    /**
     * Get the baseline property: Baseline details.
     * 
     * @return the baseline value.
     */
    public Baseline baseline() {
        return this.baseline;
    }

    /**
     * Set the baseline property: Baseline details.
     * 
     * @param baseline the baseline value to set.
     * @return the BaselineAdjustedResult object itself.
     */
    public BaselineAdjustedResult withBaseline(Baseline baseline) {
        this.baseline = baseline;
        return this;
    }

    /**
     * Get the status property: The rule result status.
     * 
     * @return the status value.
     */
    public RuleStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The rule result status.
     * 
     * @param status the status value to set.
     * @return the BaselineAdjustedResult object itself.
     */
    public BaselineAdjustedResult withStatus(RuleStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the resultsNotInBaseline property: Results the are not in baseline.
     * 
     * @return the resultsNotInBaseline value.
     */
    public List<List<String>> resultsNotInBaseline() {
        return this.resultsNotInBaseline;
    }

    /**
     * Set the resultsNotInBaseline property: Results the are not in baseline.
     * 
     * @param resultsNotInBaseline the resultsNotInBaseline value to set.
     * @return the BaselineAdjustedResult object itself.
     */
    public BaselineAdjustedResult withResultsNotInBaseline(List<List<String>> resultsNotInBaseline) {
        this.resultsNotInBaseline = resultsNotInBaseline;
        return this;
    }

    /**
     * Get the resultsOnlyInBaseline property: Results the are in baseline.
     * 
     * @return the resultsOnlyInBaseline value.
     */
    public List<List<String>> resultsOnlyInBaseline() {
        return this.resultsOnlyInBaseline;
    }

    /**
     * Set the resultsOnlyInBaseline property: Results the are in baseline.
     * 
     * @param resultsOnlyInBaseline the resultsOnlyInBaseline value to set.
     * @return the BaselineAdjustedResult object itself.
     */
    public BaselineAdjustedResult withResultsOnlyInBaseline(List<List<String>> resultsOnlyInBaseline) {
        this.resultsOnlyInBaseline = resultsOnlyInBaseline;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (baseline() != null) {
            baseline().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("baseline", this.baseline);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("resultsNotInBaseline", this.resultsNotInBaseline,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        jsonWriter.writeArrayField("resultsOnlyInBaseline", this.resultsOnlyInBaseline,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeString(element1)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BaselineAdjustedResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BaselineAdjustedResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BaselineAdjustedResult.
     */
    public static BaselineAdjustedResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BaselineAdjustedResult deserializedBaselineAdjustedResult = new BaselineAdjustedResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("baseline".equals(fieldName)) {
                    deserializedBaselineAdjustedResult.baseline = Baseline.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedBaselineAdjustedResult.status = RuleStatus.fromString(reader.getString());
                } else if ("resultsNotInBaseline".equals(fieldName)) {
                    List<List<String>> resultsNotInBaseline
                        = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                    deserializedBaselineAdjustedResult.resultsNotInBaseline = resultsNotInBaseline;
                } else if ("resultsOnlyInBaseline".equals(fieldName)) {
                    List<List<String>> resultsOnlyInBaseline
                        = reader.readArray(reader1 -> reader1.readArray(reader2 -> reader2.getString()));
                    deserializedBaselineAdjustedResult.resultsOnlyInBaseline = resultsOnlyInBaseline;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaselineAdjustedResult;
        });
    }
}
