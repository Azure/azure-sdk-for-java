// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.SqlVulnerabilityAssessmentScanResultsClient;
import com.azure.resourcemanager.security.fluent.models.ScanResultInner;
import com.azure.resourcemanager.security.fluent.models.ScanResultsInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * SqlVulnerabilityAssessmentScanResultsClient.
 */
public final class SqlVulnerabilityAssessmentScanResultsClientImpl
    implements SqlVulnerabilityAssessmentScanResultsClient {
    private final ClientLogger logger = new ClientLogger(SqlVulnerabilityAssessmentScanResultsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SqlVulnerabilityAssessmentScanResultsService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of SqlVulnerabilityAssessmentScanResultsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlVulnerabilityAssessmentScanResultsClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy
                .create(
                    SqlVulnerabilityAssessmentScanResultsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterSqlVulnerabilityAssessmentScanResults to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterSqlVul")
    private interface SqlVulnerabilityAssessmentScanResultsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults"
                + "/{scanResultId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScanResultInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("scanId") String scanId,
            @PathParam("scanResultId") String scanResultId,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScanResultsInner>> list(
            @HostParam("$host") String endpoint,
            @PathParam("scanId") String scanId,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the scan results of a single rule in a scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param scanResultId The rule Id of the results.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan results of a single rule in a scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScanResultInner>> getWithResponseAsync(
        String scanId, String scanResultId, String workspaceId, String resourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scanId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanId is required and cannot be null."));
        }
        if (scanResultId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanResultId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            scanId,
                            scanResultId,
                            workspaceId,
                            apiVersion,
                            resourceId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the scan results of a single rule in a scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param scanResultId The rule Id of the results.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan results of a single rule in a scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScanResultInner>> getWithResponseAsync(
        String scanId, String scanResultId, String workspaceId, String resourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scanId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanId is required and cannot be null."));
        }
        if (scanResultId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanResultId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getEndpoint(), scanId, scanResultId, workspaceId, apiVersion, resourceId, accept, context);
    }

    /**
     * Gets the scan results of a single rule in a scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param scanResultId The rule Id of the results.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan results of a single rule in a scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ScanResultInner> getAsync(String scanId, String scanResultId, String workspaceId, String resourceId) {
        return getWithResponseAsync(scanId, scanResultId, workspaceId, resourceId)
            .flatMap(
                (Response<ScanResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the scan results of a single rule in a scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param scanResultId The rule Id of the results.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan results of a single rule in a scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ScanResultInner get(String scanId, String scanResultId, String workspaceId, String resourceId) {
        return getAsync(scanId, scanResultId, workspaceId, resourceId).block();
    }

    /**
     * Gets the scan results of a single rule in a scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param scanResultId The rule Id of the results.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan results of a single rule in a scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ScanResultInner> getWithResponse(
        String scanId, String scanResultId, String workspaceId, String resourceId, Context context) {
        return getWithResponseAsync(scanId, scanResultId, workspaceId, resourceId, context).block();
    }

    /**
     * Gets a list of scan results for a single scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan results for a single scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScanResultsInner>> listWithResponseAsync(
        String scanId, String workspaceId, String resourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scanId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(this.client.getEndpoint(), scanId, workspaceId, apiVersion, resourceId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of scan results for a single scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan results for a single scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScanResultsInner>> listWithResponseAsync(
        String scanId, String workspaceId, String resourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scanId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String apiVersion = "2020-07-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), scanId, workspaceId, apiVersion, resourceId, accept, context);
    }

    /**
     * Gets a list of scan results for a single scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan results for a single scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ScanResultsInner> listAsync(String scanId, String workspaceId, String resourceId) {
        return listWithResponseAsync(scanId, workspaceId, resourceId)
            .flatMap(
                (Response<ScanResultsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a list of scan results for a single scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan results for a single scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ScanResultsInner list(String scanId, String workspaceId, String resourceId) {
        return listAsync(scanId, workspaceId, resourceId).block();
    }

    /**
     * Gets a list of scan results for a single scan record.
     *
     * @param scanId The scan Id. Type 'latest' to get the scan results for the latest scan.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan results for a single scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ScanResultsInner> listWithResponse(
        String scanId, String workspaceId, String resourceId, Context context) {
        return listWithResponseAsync(scanId, workspaceId, resourceId, context).block();
    }
}
