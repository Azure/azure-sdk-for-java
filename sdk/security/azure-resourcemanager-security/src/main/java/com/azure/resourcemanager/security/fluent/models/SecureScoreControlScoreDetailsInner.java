// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Calculation result data in control level.
 */
@Fluent
public final class SecureScoreControlScoreDetailsInner
    implements JsonSerializable<SecureScoreControlScoreDetailsInner> {
    /*
     * User friendly display name of the control
     */
    private String displayName;

    /*
     * Actual score object for the control
     */
    private ScoreDetails innerScore;

    /*
     * Number of healthy resources in the control
     */
    private Integer healthyResourceCount;

    /*
     * Number of unhealthy resources in the control
     */
    private Integer unhealthyResourceCount;

    /*
     * Number of not applicable resources in the control
     */
    private Integer notApplicableResourceCount;

    /*
     * The relative weight for this specific control in each of your subscriptions. Used when calculating an aggregated
     * score for this control across all of your subscriptions.
     */
    private Long weight;

    /*
     * Information about the security control.
     */
    private SecureScoreControlDefinitionItemInner definition;

    /**
     * Creates an instance of SecureScoreControlScoreDetailsInner class.
     */
    public SecureScoreControlScoreDetailsInner() {
    }

    /**
     * Get the displayName property: User friendly display name of the control.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the innerScore property: Actual score object for the control.
     * 
     * @return the innerScore value.
     */
    private ScoreDetails innerScore() {
        return this.innerScore;
    }

    /**
     * Get the healthyResourceCount property: Number of healthy resources in the control.
     * 
     * @return the healthyResourceCount value.
     */
    public Integer healthyResourceCount() {
        return this.healthyResourceCount;
    }

    /**
     * Get the unhealthyResourceCount property: Number of unhealthy resources in the control.
     * 
     * @return the unhealthyResourceCount value.
     */
    public Integer unhealthyResourceCount() {
        return this.unhealthyResourceCount;
    }

    /**
     * Get the notApplicableResourceCount property: Number of not applicable resources in the control.
     * 
     * @return the notApplicableResourceCount value.
     */
    public Integer notApplicableResourceCount() {
        return this.notApplicableResourceCount;
    }

    /**
     * Get the weight property: The relative weight for this specific control in each of your subscriptions. Used when
     * calculating an aggregated score for this control across all of your subscriptions.
     * 
     * @return the weight value.
     */
    public Long weight() {
        return this.weight;
    }

    /**
     * Get the definition property: Information about the security control.
     * 
     * @return the definition value.
     */
    public SecureScoreControlDefinitionItemInner definition() {
        return this.definition;
    }

    /**
     * Set the definition property: Information about the security control.
     * 
     * @param definition the definition value to set.
     * @return the SecureScoreControlScoreDetailsInner object itself.
     */
    public SecureScoreControlScoreDetailsInner withDefinition(SecureScoreControlDefinitionItemInner definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Get the max property: Maximum score available.
     * 
     * @return the max value.
     */
    public Integer max() {
        return this.innerScore() == null ? null : this.innerScore().max();
    }

    /**
     * Get the current property: Current score.
     * 
     * @return the current value.
     */
    public Double current() {
        return this.innerScore() == null ? null : this.innerScore().current();
    }

    /**
     * Get the percentage property: Ratio of the current score divided by the maximum. Rounded to 4 digits after the
     * decimal point.
     * 
     * @return the percentage value.
     */
    public Double percentage() {
        return this.innerScore() == null ? null : this.innerScore().percentage();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerScore() != null) {
            innerScore().validate();
        }
        if (definition() != null) {
            definition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("definition", this.definition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecureScoreControlScoreDetailsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecureScoreControlScoreDetailsInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecureScoreControlScoreDetailsInner.
     */
    public static SecureScoreControlScoreDetailsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecureScoreControlScoreDetailsInner deserializedSecureScoreControlScoreDetailsInner
                = new SecureScoreControlScoreDetailsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedSecureScoreControlScoreDetailsInner.displayName = reader.getString();
                } else if ("score".equals(fieldName)) {
                    deserializedSecureScoreControlScoreDetailsInner.innerScore = ScoreDetails.fromJson(reader);
                } else if ("healthyResourceCount".equals(fieldName)) {
                    deserializedSecureScoreControlScoreDetailsInner.healthyResourceCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("unhealthyResourceCount".equals(fieldName)) {
                    deserializedSecureScoreControlScoreDetailsInner.unhealthyResourceCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("notApplicableResourceCount".equals(fieldName)) {
                    deserializedSecureScoreControlScoreDetailsInner.notApplicableResourceCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("weight".equals(fieldName)) {
                    deserializedSecureScoreControlScoreDetailsInner.weight = reader.getNullable(JsonReader::getLong);
                } else if ("definition".equals(fieldName)) {
                    deserializedSecureScoreControlScoreDetailsInner.definition
                        = SecureScoreControlDefinitionItemInner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecureScoreControlScoreDetailsInner;
        });
    }
}
