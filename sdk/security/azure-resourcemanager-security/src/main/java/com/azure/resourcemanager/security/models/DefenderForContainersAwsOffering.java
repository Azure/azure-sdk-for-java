// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** The Defender for Containers AWS offering configurations. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "offeringType")
@JsonTypeName("DefenderForContainersAws")
@Fluent
public final class DefenderForContainersAwsOffering extends CloudOffering {
    /*
     * The kubernetes service connection configuration
     */
    @JsonProperty(value = "kubernetesService")
    private DefenderForContainersAwsOfferingKubernetesService kubernetesService;

    /*
     * The kubernetes to scuba connection configuration
     */
    @JsonProperty(value = "kubernetesScubaReader")
    private DefenderForContainersAwsOfferingKubernetesScubaReader kubernetesScubaReader;

    /*
     * The cloudwatch to kinesis connection configuration
     */
    @JsonProperty(value = "cloudWatchToKinesis")
    private DefenderForContainersAwsOfferingCloudWatchToKinesis cloudWatchToKinesis;

    /*
     * The kinesis to s3 connection configuration
     */
    @JsonProperty(value = "kinesisToS3")
    private DefenderForContainersAwsOfferingKinesisToS3 kinesisToS3;

    /**
     * Get the kubernetesService property: The kubernetes service connection configuration.
     *
     * @return the kubernetesService value.
     */
    public DefenderForContainersAwsOfferingKubernetesService kubernetesService() {
        return this.kubernetesService;
    }

    /**
     * Set the kubernetesService property: The kubernetes service connection configuration.
     *
     * @param kubernetesService the kubernetesService value to set.
     * @return the DefenderForContainersAwsOffering object itself.
     */
    public DefenderForContainersAwsOffering withKubernetesService(
        DefenderForContainersAwsOfferingKubernetesService kubernetesService) {
        this.kubernetesService = kubernetesService;
        return this;
    }

    /**
     * Get the kubernetesScubaReader property: The kubernetes to scuba connection configuration.
     *
     * @return the kubernetesScubaReader value.
     */
    public DefenderForContainersAwsOfferingKubernetesScubaReader kubernetesScubaReader() {
        return this.kubernetesScubaReader;
    }

    /**
     * Set the kubernetesScubaReader property: The kubernetes to scuba connection configuration.
     *
     * @param kubernetesScubaReader the kubernetesScubaReader value to set.
     * @return the DefenderForContainersAwsOffering object itself.
     */
    public DefenderForContainersAwsOffering withKubernetesScubaReader(
        DefenderForContainersAwsOfferingKubernetesScubaReader kubernetesScubaReader) {
        this.kubernetesScubaReader = kubernetesScubaReader;
        return this;
    }

    /**
     * Get the cloudWatchToKinesis property: The cloudwatch to kinesis connection configuration.
     *
     * @return the cloudWatchToKinesis value.
     */
    public DefenderForContainersAwsOfferingCloudWatchToKinesis cloudWatchToKinesis() {
        return this.cloudWatchToKinesis;
    }

    /**
     * Set the cloudWatchToKinesis property: The cloudwatch to kinesis connection configuration.
     *
     * @param cloudWatchToKinesis the cloudWatchToKinesis value to set.
     * @return the DefenderForContainersAwsOffering object itself.
     */
    public DefenderForContainersAwsOffering withCloudWatchToKinesis(
        DefenderForContainersAwsOfferingCloudWatchToKinesis cloudWatchToKinesis) {
        this.cloudWatchToKinesis = cloudWatchToKinesis;
        return this;
    }

    /**
     * Get the kinesisToS3 property: The kinesis to s3 connection configuration.
     *
     * @return the kinesisToS3 value.
     */
    public DefenderForContainersAwsOfferingKinesisToS3 kinesisToS3() {
        return this.kinesisToS3;
    }

    /**
     * Set the kinesisToS3 property: The kinesis to s3 connection configuration.
     *
     * @param kinesisToS3 the kinesisToS3 value to set.
     * @return the DefenderForContainersAwsOffering object itself.
     */
    public DefenderForContainersAwsOffering withKinesisToS3(DefenderForContainersAwsOfferingKinesisToS3 kinesisToS3) {
        this.kinesisToS3 = kinesisToS3;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (kubernetesService() != null) {
            kubernetesService().validate();
        }
        if (kubernetesScubaReader() != null) {
            kubernetesScubaReader().validate();
        }
        if (cloudWatchToKinesis() != null) {
            cloudWatchToKinesis().validate();
        }
        if (kinesisToS3() != null) {
            kinesisToS3().validate();
        }
    }
}
