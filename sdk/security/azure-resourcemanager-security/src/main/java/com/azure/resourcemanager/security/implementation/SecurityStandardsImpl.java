// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.SecurityStandardsClient;
import com.azure.resourcemanager.security.fluent.models.SecurityStandardInner;
import com.azure.resourcemanager.security.models.SecurityStandard;
import com.azure.resourcemanager.security.models.SecurityStandards;

public final class SecurityStandardsImpl implements SecurityStandards {
    private static final ClientLogger LOGGER = new ClientLogger(SecurityStandardsImpl.class);

    private final SecurityStandardsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public SecurityStandardsImpl(SecurityStandardsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SecurityStandard> list(String scope) {
        PagedIterable<SecurityStandardInner> inner = this.serviceClient().list(scope);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecurityStandardImpl(inner1, this.manager()));
    }

    public PagedIterable<SecurityStandard> list(String scope, Context context) {
        PagedIterable<SecurityStandardInner> inner = this.serviceClient().list(scope, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecurityStandardImpl(inner1, this.manager()));
    }

    public Response<SecurityStandard> getWithResponse(String scope, String standardId, Context context) {
        Response<SecurityStandardInner> inner = this.serviceClient().getWithResponse(scope, standardId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SecurityStandardImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SecurityStandard get(String scope, String standardId) {
        SecurityStandardInner inner = this.serviceClient().get(scope, standardId);
        if (inner != null) {
            return new SecurityStandardImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String scope, String standardId, Context context) {
        return this.serviceClient().deleteWithResponse(scope, standardId, context);
    }

    public void deleteByResourceGroup(String scope, String standardId) {
        this.serviceClient().delete(scope, standardId);
    }

    public SecurityStandard getById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String standardId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "standardId");
        if (standardId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityStandards'.", id)));
        }
        return this.getWithResponse(scope, standardId, Context.NONE).getValue();
    }

    public Response<SecurityStandard> getByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String standardId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "standardId");
        if (standardId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityStandards'.", id)));
        }
        return this.getWithResponse(scope, standardId, context);
    }

    public void deleteById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String standardId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "standardId");
        if (standardId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityStandards'.", id)));
        }
        this.deleteByResourceGroupWithResponse(scope, standardId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String standardId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/securityStandards/{standardId}", "standardId");
        if (standardId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securityStandards'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(scope, standardId, context);
    }

    private SecurityStandardsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public SecurityStandardImpl define(String name) {
        return new SecurityStandardImpl(name, this.manager());
    }
}
