// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.util.Context;

/** Resource collection API of SubscriptionGovernanceRulesExecuteStatus. */
public interface SubscriptionGovernanceRulesExecuteStatus {
    /**
     * Get a specific governanceRule execution status for the requested scope by ruleId and operationId.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param operationId The security GovernanceRule execution key - unique key for the execution of GovernanceRule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule execution status for the requested scope by ruleId and operationId.
     */
    ExecuteRuleStatus get(String ruleId, String operationId);

    /**
     * Get a specific governanceRule execution status for the requested scope by ruleId and operationId.
     *
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param operationId The security GovernanceRule execution key - unique key for the execution of GovernanceRule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule execution status for the requested scope by ruleId and operationId.
     */
    ExecuteRuleStatus get(String ruleId, String operationId, Context context);
}
