// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.security.models.CloudName;
import com.azure.resourcemanager.security.models.CloudOffering;
import com.azure.resourcemanager.security.models.SecurityConnectorPropertiesOrganizationalData;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A set of properties that defines the security connector configuration. */
@Fluent
public final class SecurityConnectorProperties {
    /*
     * The multi cloud resource identifier (account id in case of AWS
     * connector).
     */
    @JsonProperty(value = "hierarchyIdentifier")
    private String hierarchyIdentifier;

    /*
     * The multi cloud resource's cloud name.
     */
    @JsonProperty(value = "cloudName")
    private CloudName cloudName;

    /*
     * A collection of offerings for the security connector.
     */
    @JsonProperty(value = "offerings")
    private List<CloudOffering> offerings;

    /*
     * The multi cloud account's organizational data
     */
    @JsonProperty(value = "organizationalData")
    private SecurityConnectorPropertiesOrganizationalData organizationalData;

    /**
     * Get the hierarchyIdentifier property: The multi cloud resource identifier (account id in case of AWS connector).
     *
     * @return the hierarchyIdentifier value.
     */
    public String hierarchyIdentifier() {
        return this.hierarchyIdentifier;
    }

    /**
     * Set the hierarchyIdentifier property: The multi cloud resource identifier (account id in case of AWS connector).
     *
     * @param hierarchyIdentifier the hierarchyIdentifier value to set.
     * @return the SecurityConnectorProperties object itself.
     */
    public SecurityConnectorProperties withHierarchyIdentifier(String hierarchyIdentifier) {
        this.hierarchyIdentifier = hierarchyIdentifier;
        return this;
    }

    /**
     * Get the cloudName property: The multi cloud resource's cloud name.
     *
     * @return the cloudName value.
     */
    public CloudName cloudName() {
        return this.cloudName;
    }

    /**
     * Set the cloudName property: The multi cloud resource's cloud name.
     *
     * @param cloudName the cloudName value to set.
     * @return the SecurityConnectorProperties object itself.
     */
    public SecurityConnectorProperties withCloudName(CloudName cloudName) {
        this.cloudName = cloudName;
        return this;
    }

    /**
     * Get the offerings property: A collection of offerings for the security connector.
     *
     * @return the offerings value.
     */
    public List<CloudOffering> offerings() {
        return this.offerings;
    }

    /**
     * Set the offerings property: A collection of offerings for the security connector.
     *
     * @param offerings the offerings value to set.
     * @return the SecurityConnectorProperties object itself.
     */
    public SecurityConnectorProperties withOfferings(List<CloudOffering> offerings) {
        this.offerings = offerings;
        return this;
    }

    /**
     * Get the organizationalData property: The multi cloud account's organizational data.
     *
     * @return the organizationalData value.
     */
    public SecurityConnectorPropertiesOrganizationalData organizationalData() {
        return this.organizationalData;
    }

    /**
     * Set the organizationalData property: The multi cloud account's organizational data.
     *
     * @param organizationalData the organizationalData value to set.
     * @return the SecurityConnectorProperties object itself.
     */
    public SecurityConnectorProperties withOrganizationalData(
        SecurityConnectorPropertiesOrganizationalData organizationalData) {
        this.organizationalData = organizationalData;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offerings() != null) {
            offerings().forEach(e -> e.validate());
        }
        if (organizationalData() != null) {
            organizationalData().validate();
        }
    }
}
