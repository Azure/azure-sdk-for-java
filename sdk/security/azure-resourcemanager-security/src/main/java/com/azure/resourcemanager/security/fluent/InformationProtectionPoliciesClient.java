// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.InformationProtectionPolicyInner;
import com.azure.resourcemanager.security.models.InformationProtectionPoliciesInformationProtectionPolicyName;

/** An instance of this class provides access to all the operations defined in InformationProtectionPoliciesClient. */
public interface InformationProtectionPoliciesClient {
    /**
     * Details of the information protection policy.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param informationProtectionPolicyName Name of the information protection policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information protection policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    InformationProtectionPolicyInner get(
        String scope, InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName);

    /**
     * Details of the information protection policy.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param informationProtectionPolicyName Name of the information protection policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information protection policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<InformationProtectionPolicyInner> getWithResponse(
        String scope,
        InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName,
        Context context);

    /**
     * Details of the information protection policy.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param informationProtectionPolicyName Name of the information protection policy.
     * @param informationProtectionPolicy Information protection policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information protection policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    InformationProtectionPolicyInner createOrUpdate(
        String scope,
        InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName,
        InformationProtectionPolicyInner informationProtectionPolicy);

    /**
     * Details of the information protection policy.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param informationProtectionPolicyName Name of the information protection policy.
     * @param informationProtectionPolicy Information protection policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information protection policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<InformationProtectionPolicyInner> createOrUpdateWithResponse(
        String scope,
        InformationProtectionPoliciesInformationProtectionPolicyName informationProtectionPolicyName,
        InformationProtectionPolicyInner informationProtectionPolicy,
        Context context);

    /**
     * Information protection policies of a specific management group.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information protection policies response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<InformationProtectionPolicyInner> list(String scope);

    /**
     * Information protection policies of a specific management group.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information protection policies response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<InformationProtectionPolicyInner> list(String scope, Context context);
}
