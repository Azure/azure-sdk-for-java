// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.security.fluent.DevOpsPolicyAssignmentsClient;
import com.azure.resourcemanager.security.fluent.models.DevOpsPolicyAssignmentInner;
import com.azure.resourcemanager.security.models.DevOpsPolicyAssignmentListResponse;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DevOpsPolicyAssignmentsClient.
 */
public final class DevOpsPolicyAssignmentsClientImpl implements DevOpsPolicyAssignmentsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DevOpsPolicyAssignmentsService service;

    /**
     * The service client containing this operation class.
     */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of DevOpsPolicyAssignmentsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DevOpsPolicyAssignmentsClientImpl(SecurityCenterImpl client) {
        this.service = RestProxy.create(DevOpsPolicyAssignmentsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterDevOpsPolicyAssignments to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterDevOps")
    public interface DevOpsPolicyAssignmentsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DevOpsPolicyAssignmentListResponse>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("securityConnectorName") String securityConnectorName,
            @QueryParam("devOpsPolicyType") String devOpsPolicyType, @QueryParam("resourceId") String resourceId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DevOpsPolicyAssignmentInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("securityConnectorName") String securityConnectorName,
            @PathParam("policyAssignmentId") String policyAssignmentId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("securityConnectorName") String securityConnectorName,
            @PathParam("policyAssignmentId") String policyAssignmentId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DevOpsPolicyAssignmentInner devOpsPolicyAssignment,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("securityConnectorName") String securityConnectorName,
            @PathParam("policyAssignmentId") String policyAssignmentId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DevOpsPolicyAssignmentInner devOpsPolicyAssignment,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/policyAssignments/{policyAssignmentId}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("securityConnectorName") String securityConnectorName,
            @PathParam("policyAssignmentId") String policyAssignmentId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DevOpsPolicyAssignmentListResponse>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param devOpsPolicyType Optional filter for listing the policies.
     * @param resourceId Optional filter for listing the assignments of a specific resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DevOpsPolicyAssignmentInner>> listSinglePageAsync(String resourceGroupName,
        String securityConnectorName, String devOpsPolicyType, String resourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, securityConnectorName, devOpsPolicyType, resourceId, apiVersion, accept, context))
            .<PagedResponse<DevOpsPolicyAssignmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param devOpsPolicyType Optional filter for listing the policies.
     * @param resourceId Optional filter for listing the assignments of a specific resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DevOpsPolicyAssignmentInner>> listSinglePageAsync(String resourceGroupName,
        String securityConnectorName, String devOpsPolicyType, String resourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, securityConnectorName,
                devOpsPolicyType, resourceId, apiVersion, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param devOpsPolicyType Optional filter for listing the policies.
     * @param resourceId Optional filter for listing the assignments of a specific resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DevOpsPolicyAssignmentInner> listAsync(String resourceGroupName, String securityConnectorName,
        String devOpsPolicyType, String resourceId) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, securityConnectorName, devOpsPolicyType, resourceId),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DevOpsPolicyAssignmentInner> listAsync(String resourceGroupName, String securityConnectorName) {
        final String devOpsPolicyType = null;
        final String resourceId = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, securityConnectorName, devOpsPolicyType, resourceId),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param devOpsPolicyType Optional filter for listing the policies.
     * @param resourceId Optional filter for listing the assignments of a specific resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DevOpsPolicyAssignmentInner> listAsync(String resourceGroupName, String securityConnectorName,
        String devOpsPolicyType, String resourceId, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, securityConnectorName, devOpsPolicyType, resourceId, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevOpsPolicyAssignmentInner> list(String resourceGroupName, String securityConnectorName) {
        final String devOpsPolicyType = null;
        final String resourceId = null;
        return new PagedIterable<>(listAsync(resourceGroupName, securityConnectorName, devOpsPolicyType, resourceId));
    }

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param devOpsPolicyType Optional filter for listing the policies.
     * @param resourceId Optional filter for listing the assignments of a specific resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DevOpsPolicyAssignmentInner> list(String resourceGroupName, String securityConnectorName,
        String devOpsPolicyType, String resourceId, Context context) {
        return new PagedIterable<>(
            listAsync(resourceGroupName, securityConnectorName, devOpsPolicyType, resourceId, context));
    }

    /**
     * Returns a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DevOpsPolicyAssignmentInner>> getWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, securityConnectorName, policyAssignmentId, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DevOpsPolicyAssignmentInner>> getWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            securityConnectorName, policyAssignmentId, apiVersion, accept, context);
    }

    /**
     * Returns a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DevOpsPolicyAssignmentInner> getAsync(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId) {
        return getWithResponseAsync(resourceGroupName, securityConnectorName, policyAssignmentId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DevOpsPolicyAssignmentInner> getWithResponse(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, Context context) {
        return getWithResponseAsync(resourceGroupName, securityConnectorName, policyAssignmentId, context).block();
    }

    /**
     * Returns a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevOpsPolicyAssignmentInner get(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId) {
        return getWithResponse(resourceGroupName, securityConnectorName, policyAssignmentId, Context.NONE).getValue();
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        if (devOpsPolicyAssignment == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter devOpsPolicyAssignment is required and cannot be null."));
        } else {
            devOpsPolicyAssignment.validate();
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, securityConnectorName, policyAssignmentId, apiVersion, devOpsPolicyAssignment,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        if (devOpsPolicyAssignment == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter devOpsPolicyAssignment is required and cannot be null."));
        } else {
            devOpsPolicyAssignment.validate();
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            securityConnectorName, policyAssignmentId, apiVersion, devOpsPolicyAssignment, accept, context);
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            securityConnectorName, policyAssignmentId, devOpsPolicyAssignment);
        return this.client.<DevOpsPolicyAssignmentInner, DevOpsPolicyAssignmentInner>getLroResult(mono,
            this.client.getHttpPipeline(), DevOpsPolicyAssignmentInner.class, DevOpsPolicyAssignmentInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            securityConnectorName, policyAssignmentId, devOpsPolicyAssignment, context);
        return this.client.<DevOpsPolicyAssignmentInner, DevOpsPolicyAssignmentInner>getLroResult(mono,
            this.client.getHttpPipeline(), DevOpsPolicyAssignmentInner.class, DevOpsPolicyAssignmentInner.class,
            context);
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginCreateOrUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId,
                devOpsPolicyAssignment)
            .getSyncPoller();
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginCreateOrUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId,
                devOpsPolicyAssignment, context)
            .getSyncPoller();
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DevOpsPolicyAssignmentInner> createOrUpdateAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        return beginCreateOrUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId,
            devOpsPolicyAssignment).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DevOpsPolicyAssignmentInner> createOrUpdateAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId,
            devOpsPolicyAssignment, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevOpsPolicyAssignmentInner createOrUpdate(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        return createOrUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment)
            .block();
    }

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevOpsPolicyAssignmentInner createOrUpdate(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context) {
        return createOrUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment,
            context).block();
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        if (devOpsPolicyAssignment == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter devOpsPolicyAssignment is required and cannot be null."));
        } else {
            devOpsPolicyAssignment.validate();
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                    securityConnectorName, policyAssignmentId, apiVersion, devOpsPolicyAssignment, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        if (devOpsPolicyAssignment == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter devOpsPolicyAssignment is required and cannot be null."));
        } else {
            devOpsPolicyAssignment.validate();
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            securityConnectorName, policyAssignmentId, apiVersion, devOpsPolicyAssignment, accept, context);
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginUpdateAsync(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, securityConnectorName,
            policyAssignmentId, devOpsPolicyAssignment);
        return this.client.<DevOpsPolicyAssignmentInner, DevOpsPolicyAssignmentInner>getLroResult(mono,
            this.client.getHttpPipeline(), DevOpsPolicyAssignmentInner.class, DevOpsPolicyAssignmentInner.class,
            this.client.getContext());
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginUpdateAsync(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, securityConnectorName,
            policyAssignmentId, devOpsPolicyAssignment, context);
        return this.client.<DevOpsPolicyAssignmentInner, DevOpsPolicyAssignmentInner>getLroResult(mono,
            this.client.getHttpPipeline(), DevOpsPolicyAssignmentInner.class, DevOpsPolicyAssignmentInner.class,
            context);
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        return this
            .beginUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment)
            .getSyncPoller();
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment,
                context)
            .getSyncPoller();
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DevOpsPolicyAssignmentInner> updateAsync(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        return beginUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DevOpsPolicyAssignmentInner> updateAsync(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context) {
        return beginUpdateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevOpsPolicyAssignmentInner update(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment) {
        return updateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment)
            .block();
    }

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DevOpsPolicyAssignmentInner update(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context) {
        return updateAsync(resourceGroupName, securityConnectorName, policyAssignmentId, devOpsPolicyAssignment,
            context).block();
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, securityConnectorName, policyAssignmentId, apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String securityConnectorName, String policyAssignmentId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (securityConnectorName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityConnectorName is required and cannot be null."));
        }
        if (policyAssignmentId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter policyAssignmentId is required and cannot be null."));
        }
        final String apiVersion = "2024-05-15-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            securityConnectorName, policyAssignmentId, apiVersion, accept, context);
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, securityConnectorName, policyAssignmentId);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, securityConnectorName, policyAssignmentId, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId) {
        return this.beginDeleteAsync(resourceGroupName, securityConnectorName, policyAssignmentId).getSyncPoller();
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, Context context) {
        return this.beginDeleteAsync(resourceGroupName, securityConnectorName, policyAssignmentId, context)
            .getSyncPoller();
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String securityConnectorName, String policyAssignmentId) {
        return beginDeleteAsync(resourceGroupName, securityConnectorName, policyAssignmentId).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        Context context) {
        return beginDeleteAsync(resourceGroupName, securityConnectorName, policyAssignmentId, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String securityConnectorName, String policyAssignmentId) {
        deleteAsync(resourceGroupName, securityConnectorName, policyAssignmentId).block();
    }

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        Context context) {
        deleteAsync(resourceGroupName, securityConnectorName, policyAssignmentId, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DevOpsPolicyAssignmentInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DevOpsPolicyAssignmentInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DevOpsPolicyAssignmentInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
