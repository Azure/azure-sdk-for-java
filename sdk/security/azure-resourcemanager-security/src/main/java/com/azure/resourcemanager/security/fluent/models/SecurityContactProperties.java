// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.models.AlertNotifications;
import com.azure.resourcemanager.security.models.AlertsToAdmins;
import com.fasterxml.jackson.annotation.JsonProperty;

/** describes security contact properties. */
@Fluent
public final class SecurityContactProperties {
    /*
     * The email of this security contact
     */
    @JsonProperty(value = "email", required = true)
    private String email;

    /*
     * The phone number of this security contact
     */
    @JsonProperty(value = "phone")
    private String phone;

    /*
     * Whether to send security alerts notifications to the security contact
     */
    @JsonProperty(value = "alertNotifications", required = true)
    private AlertNotifications alertNotifications;

    /*
     * Whether to send security alerts notifications to subscription admins
     */
    @JsonProperty(value = "alertsToAdmins", required = true)
    private AlertsToAdmins alertsToAdmins;

    /**
     * Get the email property: The email of this security contact.
     *
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: The email of this security contact.
     *
     * @param email the email value to set.
     * @return the SecurityContactProperties object itself.
     */
    public SecurityContactProperties withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the phone property: The phone number of this security contact.
     *
     * @return the phone value.
     */
    public String phone() {
        return this.phone;
    }

    /**
     * Set the phone property: The phone number of this security contact.
     *
     * @param phone the phone value to set.
     * @return the SecurityContactProperties object itself.
     */
    public SecurityContactProperties withPhone(String phone) {
        this.phone = phone;
        return this;
    }

    /**
     * Get the alertNotifications property: Whether to send security alerts notifications to the security contact.
     *
     * @return the alertNotifications value.
     */
    public AlertNotifications alertNotifications() {
        return this.alertNotifications;
    }

    /**
     * Set the alertNotifications property: Whether to send security alerts notifications to the security contact.
     *
     * @param alertNotifications the alertNotifications value to set.
     * @return the SecurityContactProperties object itself.
     */
    public SecurityContactProperties withAlertNotifications(AlertNotifications alertNotifications) {
        this.alertNotifications = alertNotifications;
        return this;
    }

    /**
     * Get the alertsToAdmins property: Whether to send security alerts notifications to subscription admins.
     *
     * @return the alertsToAdmins value.
     */
    public AlertsToAdmins alertsToAdmins() {
        return this.alertsToAdmins;
    }

    /**
     * Set the alertsToAdmins property: Whether to send security alerts notifications to subscription admins.
     *
     * @param alertsToAdmins the alertsToAdmins value to set.
     * @return the SecurityContactProperties object itself.
     */
    public SecurityContactProperties withAlertsToAdmins(AlertsToAdmins alertsToAdmins) {
        this.alertsToAdmins = alertsToAdmins;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (email() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property email in model SecurityContactProperties"));
        }
        if (alertNotifications() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property alertNotifications in model SecurityContactProperties"));
        }
        if (alertsToAdmins() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property alertsToAdmins in model SecurityContactProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecurityContactProperties.class);
}
