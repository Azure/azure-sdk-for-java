// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The information type keyword.
 */
@Fluent
public final class InformationProtectionKeyword implements JsonSerializable<InformationProtectionKeyword> {
    /*
     * The keyword pattern.
     */
    private String pattern;

    /*
     * Indicates whether the keyword is custom or not.
     */
    private Boolean custom;

    /*
     * Indicates whether the keyword can be applied on numeric types or not.
     */
    private Boolean canBeNumeric;

    /*
     * Indicates whether the keyword is excluded or not.
     */
    private Boolean excluded;

    /**
     * Creates an instance of InformationProtectionKeyword class.
     */
    public InformationProtectionKeyword() {
    }

    /**
     * Get the pattern property: The keyword pattern.
     * 
     * @return the pattern value.
     */
    public String pattern() {
        return this.pattern;
    }

    /**
     * Set the pattern property: The keyword pattern.
     * 
     * @param pattern the pattern value to set.
     * @return the InformationProtectionKeyword object itself.
     */
    public InformationProtectionKeyword withPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Get the custom property: Indicates whether the keyword is custom or not.
     * 
     * @return the custom value.
     */
    public Boolean custom() {
        return this.custom;
    }

    /**
     * Set the custom property: Indicates whether the keyword is custom or not.
     * 
     * @param custom the custom value to set.
     * @return the InformationProtectionKeyword object itself.
     */
    public InformationProtectionKeyword withCustom(Boolean custom) {
        this.custom = custom;
        return this;
    }

    /**
     * Get the canBeNumeric property: Indicates whether the keyword can be applied on numeric types or not.
     * 
     * @return the canBeNumeric value.
     */
    public Boolean canBeNumeric() {
        return this.canBeNumeric;
    }

    /**
     * Set the canBeNumeric property: Indicates whether the keyword can be applied on numeric types or not.
     * 
     * @param canBeNumeric the canBeNumeric value to set.
     * @return the InformationProtectionKeyword object itself.
     */
    public InformationProtectionKeyword withCanBeNumeric(Boolean canBeNumeric) {
        this.canBeNumeric = canBeNumeric;
        return this;
    }

    /**
     * Get the excluded property: Indicates whether the keyword is excluded or not.
     * 
     * @return the excluded value.
     */
    public Boolean excluded() {
        return this.excluded;
    }

    /**
     * Set the excluded property: Indicates whether the keyword is excluded or not.
     * 
     * @param excluded the excluded value to set.
     * @return the InformationProtectionKeyword object itself.
     */
    public InformationProtectionKeyword withExcluded(Boolean excluded) {
        this.excluded = excluded;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("pattern", this.pattern);
        jsonWriter.writeBooleanField("custom", this.custom);
        jsonWriter.writeBooleanField("canBeNumeric", this.canBeNumeric);
        jsonWriter.writeBooleanField("excluded", this.excluded);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InformationProtectionKeyword from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InformationProtectionKeyword if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InformationProtectionKeyword.
     */
    public static InformationProtectionKeyword fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InformationProtectionKeyword deserializedInformationProtectionKeyword = new InformationProtectionKeyword();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pattern".equals(fieldName)) {
                    deserializedInformationProtectionKeyword.pattern = reader.getString();
                } else if ("custom".equals(fieldName)) {
                    deserializedInformationProtectionKeyword.custom = reader.getNullable(JsonReader::getBoolean);
                } else if ("canBeNumeric".equals(fieldName)) {
                    deserializedInformationProtectionKeyword.canBeNumeric = reader.getNullable(JsonReader::getBoolean);
                } else if ("excluded".equals(fieldName)) {
                    deserializedInformationProtectionKeyword.excluded = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInformationProtectionKeyword;
        });
    }
}
