// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The source event types which evaluate the security automation set of rules. For example - security alerts and
 * security assessments. To learn more about the supported security events data models schemas - please visit
 * https://aka.ms/ASCAutomationSchemas.
 */
@Fluent
public final class AutomationSource implements JsonSerializable<AutomationSource> {
    /*
     * A valid event source type.
     */
    private EventSource eventSource;

    /*
     * A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets
     * (logical 'or').
     */
    private List<AutomationRuleSet> ruleSets;

    /**
     * Creates an instance of AutomationSource class.
     */
    public AutomationSource() {
    }

    /**
     * Get the eventSource property: A valid event source type.
     * 
     * @return the eventSource value.
     */
    public EventSource eventSource() {
        return this.eventSource;
    }

    /**
     * Set the eventSource property: A valid event source type.
     * 
     * @param eventSource the eventSource value to set.
     * @return the AutomationSource object itself.
     */
    public AutomationSource withEventSource(EventSource eventSource) {
        this.eventSource = eventSource;
        return this;
    }

    /**
     * Get the ruleSets property: A set of rules which evaluate upon event interception. A logical disjunction is
     * applied between defined rule sets (logical 'or').
     * 
     * @return the ruleSets value.
     */
    public List<AutomationRuleSet> ruleSets() {
        return this.ruleSets;
    }

    /**
     * Set the ruleSets property: A set of rules which evaluate upon event interception. A logical disjunction is
     * applied between defined rule sets (logical 'or').
     * 
     * @param ruleSets the ruleSets value to set.
     * @return the AutomationSource object itself.
     */
    public AutomationSource withRuleSets(List<AutomationRuleSet> ruleSets) {
        this.ruleSets = ruleSets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ruleSets() != null) {
            ruleSets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventSource", this.eventSource == null ? null : this.eventSource.toString());
        jsonWriter.writeArrayField("ruleSets", this.ruleSets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutomationSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutomationSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutomationSource.
     */
    public static AutomationSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutomationSource deserializedAutomationSource = new AutomationSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventSource".equals(fieldName)) {
                    deserializedAutomationSource.eventSource = EventSource.fromString(reader.getString());
                } else if ("ruleSets".equals(fieldName)) {
                    List<AutomationRuleSet> ruleSets = reader.readArray(reader1 -> AutomationRuleSet.fromJson(reader1));
                    deserializedAutomationSource.ruleSets = ruleSets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutomationSource;
        });
    }
}
