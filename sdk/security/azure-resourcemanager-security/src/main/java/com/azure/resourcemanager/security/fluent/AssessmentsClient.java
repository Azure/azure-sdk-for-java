// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.SecurityAssessmentInner;
import com.azure.resourcemanager.security.models.ExpandEnum;

/** An instance of this class provides access to all the operations defined in AssessmentsClient. */
public interface AssessmentsClient {
    /**
     * Get security assessments on all your scanned resources inside a scope.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security assessments on all your scanned resources inside a scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityAssessmentInner> list(String scope);

    /**
     * Get security assessments on all your scanned resources inside a scope.
     *
     * @param scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or
     *     management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security assessments on all your scanned resources inside a scope.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityAssessmentInner> list(String scope, Context context);

    /**
     * Get a security assessment on your scanned resource.
     *
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a security assessment on your scanned resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityAssessmentInner get(String resourceId, String assessmentName);

    /**
     * Get a security assessment on your scanned resource.
     *
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type.
     * @param expand OData expand. Optional.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a security assessment on your scanned resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityAssessmentInner> getWithResponse(
        String resourceId, String assessmentName, ExpandEnum expand, Context context);

    /**
     * Create a security assessment on your resource. An assessment metadata that describes this assessment must be
     * predefined with the same name before inserting the assessment result.
     *
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type.
     * @param assessment Calculated assessment on a pre-defined assessment metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security assessment on a resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityAssessmentInner createOrUpdate(
        String resourceId, String assessmentName, SecurityAssessmentInner assessment);

    /**
     * Create a security assessment on your resource. An assessment metadata that describes this assessment must be
     * predefined with the same name before inserting the assessment result.
     *
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type.
     * @param assessment Calculated assessment on a pre-defined assessment metadata.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security assessment on a resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityAssessmentInner> createOrUpdateWithResponse(
        String resourceId, String assessmentName, SecurityAssessmentInner assessment, Context context);

    /**
     * Delete a security assessment on your resource. An assessment metadata that describes this assessment must be
     * predefined with the same name before inserting the assessment result.
     *
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceId, String assessmentName);

    /**
     * Delete a security assessment on your resource. An assessment metadata that describes this assessment must be
     * predefined with the same name before inserting the assessment result.
     *
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceId, String assessmentName, Context context);
}
