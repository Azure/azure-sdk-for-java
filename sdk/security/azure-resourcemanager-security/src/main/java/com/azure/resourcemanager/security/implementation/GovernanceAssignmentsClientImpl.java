// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.security.fluent.GovernanceAssignmentsClient;
import com.azure.resourcemanager.security.fluent.models.GovernanceAssignmentInner;
import com.azure.resourcemanager.security.models.GovernanceAssignmentsList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in GovernanceAssignmentsClient. */
public final class GovernanceAssignmentsClientImpl implements GovernanceAssignmentsClient {
    /** The proxy service used to perform REST calls. */
    private final GovernanceAssignmentsService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of GovernanceAssignmentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    GovernanceAssignmentsClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy
                .create(GovernanceAssignmentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterGovernanceAssignments to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterGovern")
    public interface GovernanceAssignmentsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GovernanceAssignmentsList>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("scope") String scope,
            @PathParam("assessmentName") String assessmentName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GovernanceAssignmentInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("scope") String scope,
            @PathParam("assessmentName") String assessmentName,
            @PathParam("assignmentKey") String assignmentKey,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GovernanceAssignmentInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("scope") String scope,
            @PathParam("assessmentName") String assessmentName,
            @PathParam("assignmentKey") String assignmentKey,
            @BodyParam("application/json") GovernanceAssignmentInner governanceAssignment,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("scope") String scope,
            @PathParam("assessmentName") String assessmentName,
            @PathParam("assignmentKey") String assignmentKey,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GovernanceAssignmentsList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GovernanceAssignmentInner>> listSinglePageAsync(String scope, String assessmentName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), apiVersion, scope, assessmentName, accept, context))
            .<PagedResponse<GovernanceAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GovernanceAssignmentInner>> listSinglePageAsync(
        String scope, String assessmentName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), apiVersion, scope, assessmentName, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GovernanceAssignmentInner> listAsync(String scope, String assessmentName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, assessmentName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GovernanceAssignmentInner> listAsync(String scope, String assessmentName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, assessmentName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GovernanceAssignmentInner> list(String scope, String assessmentName) {
        return new PagedIterable<>(listAsync(scope, assessmentName));
    }

    /**
     * Get governance assignments on all of your resources inside a scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignments on all of your resources inside a scope as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GovernanceAssignmentInner> list(String scope, String assessmentName, Context context) {
        return new PagedIterable<>(listAsync(scope, assessmentName, context));
    }

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceAssignmentInner>> getWithResponseAsync(
        String scope, String assessmentName, String assignmentKey) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (assignmentKey == null) {
            return Mono.error(new IllegalArgumentException("Parameter assignmentKey is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            scope,
                            assessmentName,
                            assignmentKey,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceAssignmentInner>> getWithResponseAsync(
        String scope, String assessmentName, String assignmentKey, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (assignmentKey == null) {
            return Mono.error(new IllegalArgumentException("Parameter assignmentKey is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getEndpoint(), apiVersion, scope, assessmentName, assignmentKey, accept, context);
    }

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GovernanceAssignmentInner> getAsync(String scope, String assessmentName, String assignmentKey) {
        return getWithResponseAsync(scope, assessmentName, assignmentKey)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GovernanceAssignmentInner> getWithResponse(
        String scope, String assessmentName, String assignmentKey, Context context) {
        return getWithResponseAsync(scope, assessmentName, assignmentKey, context).block();
    }

    /**
     * Get a specific governanceAssignment for the requested scope by AssignmentKey.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceAssignment for the requested scope by AssignmentKey.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GovernanceAssignmentInner get(String scope, String assessmentName, String assignmentKey) {
        return getWithResponse(scope, assessmentName, assignmentKey, Context.NONE).getValue();
    }

    /**
     * Creates or updates a governance assignment on the given subscription.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param governanceAssignment Governance assignment over a subscription scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignment over a given scope along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceAssignmentInner>> createOrUpdateWithResponseAsync(
        String scope, String assessmentName, String assignmentKey, GovernanceAssignmentInner governanceAssignment) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (assignmentKey == null) {
            return Mono.error(new IllegalArgumentException("Parameter assignmentKey is required and cannot be null."));
        }
        if (governanceAssignment == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter governanceAssignment is required and cannot be null."));
        } else {
            governanceAssignment.validate();
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            apiVersion,
                            scope,
                            assessmentName,
                            assignmentKey,
                            governanceAssignment,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a governance assignment on the given subscription.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param governanceAssignment Governance assignment over a subscription scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignment over a given scope along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceAssignmentInner>> createOrUpdateWithResponseAsync(
        String scope,
        String assessmentName,
        String assignmentKey,
        GovernanceAssignmentInner governanceAssignment,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (assignmentKey == null) {
            return Mono.error(new IllegalArgumentException("Parameter assignmentKey is required and cannot be null."));
        }
        if (governanceAssignment == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter governanceAssignment is required and cannot be null."));
        } else {
            governanceAssignment.validate();
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                apiVersion,
                scope,
                assessmentName,
                assignmentKey,
                governanceAssignment,
                accept,
                context);
    }

    /**
     * Creates or updates a governance assignment on the given subscription.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param governanceAssignment Governance assignment over a subscription scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignment over a given scope on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GovernanceAssignmentInner> createOrUpdateAsync(
        String scope, String assessmentName, String assignmentKey, GovernanceAssignmentInner governanceAssignment) {
        return createOrUpdateWithResponseAsync(scope, assessmentName, assignmentKey, governanceAssignment)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates a governance assignment on the given subscription.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param governanceAssignment Governance assignment over a subscription scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignment over a given scope along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GovernanceAssignmentInner> createOrUpdateWithResponse(
        String scope,
        String assessmentName,
        String assignmentKey,
        GovernanceAssignmentInner governanceAssignment,
        Context context) {
        return createOrUpdateWithResponseAsync(scope, assessmentName, assignmentKey, governanceAssignment, context)
            .block();
    }

    /**
     * Creates or updates a governance assignment on the given subscription.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param governanceAssignment Governance assignment over a subscription scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance assignment over a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GovernanceAssignmentInner createOrUpdate(
        String scope, String assessmentName, String assignmentKey, GovernanceAssignmentInner governanceAssignment) {
        return createOrUpdateWithResponse(scope, assessmentName, assignmentKey, governanceAssignment, Context.NONE)
            .getValue();
    }

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String scope, String assessmentName, String assignmentKey) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (assignmentKey == null) {
            return Mono.error(new IllegalArgumentException("Parameter assignmentKey is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(this.client.getEndpoint(), apiVersion, scope, assessmentName, assignmentKey, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String scope, String assessmentName, String assignmentKey, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (assignmentKey == null) {
            return Mono.error(new IllegalArgumentException("Parameter assignmentKey is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), apiVersion, scope, assessmentName, assignmentKey, context);
    }

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope, String assessmentName, String assignmentKey) {
        return deleteWithResponseAsync(scope, assessmentName, assignmentKey).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String scope, String assessmentName, String assignmentKey, Context context) {
        return deleteWithResponseAsync(scope, assessmentName, assignmentKey, context).block();
    }

    /**
     * Delete a GovernanceAssignment over a given scope.
     *
     * @param scope The scope of the Governance assignments. Valid scopes are: subscription (format:
     *     'subscriptions/{subscriptionId}'), or security connector (format:
     *     'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'.
     * @param assessmentName The Assessment Key - A unique key for the assessment type.
     * @param assignmentKey The governance assignment key - the assessment key of the required governance assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope, String assessmentName, String assignmentKey) {
        deleteWithResponse(scope, assessmentName, assignmentKey, Context.NONE);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return page of a governance assignments list along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GovernanceAssignmentInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GovernanceAssignmentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return page of a governance assignments list along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GovernanceAssignmentInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
