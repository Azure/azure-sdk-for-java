// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.security.fluent.models.DevOpsPolicyAssignmentInner;

/**
 * An instance of this class provides access to all the operations defined in DevOpsPolicyAssignmentsClient.
 */
public interface DevOpsPolicyAssignmentsClient {
    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DevOpsPolicyAssignmentInner> list(String resourceGroupName, String securityConnectorName);

    /**
     * Returns a list of DevOps Policy Assignments.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param devOpsPolicyType Optional filter for listing the policies.
     * @param resourceId Optional filter for listing the assignments of a specific resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of RP resources which supports pagination as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DevOpsPolicyAssignmentInner> list(String resourceGroupName, String securityConnectorName,
        String devOpsPolicyType, String resourceId, Context context);

    /**
     * Returns a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DevOpsPolicyAssignmentInner> getWithResponse(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, Context context);

    /**
     * Returns a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevOpsPolicyAssignmentInner get(String resourceGroupName, String securityConnectorName, String policyAssignmentId);

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginCreateOrUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment);

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginCreateOrUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context);

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevOpsPolicyAssignmentInner createOrUpdate(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment);

    /**
     * Creates or updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevOpsPolicyAssignmentInner createOrUpdate(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context);

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment);

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DevOpsPolicyAssignmentInner>, DevOpsPolicyAssignmentInner> beginUpdate(
        String resourceGroupName, String securityConnectorName, String policyAssignmentId,
        DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context);

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevOpsPolicyAssignmentInner update(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment);

    /**
     * Updates a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param devOpsPolicyAssignment The DevOps Policy Assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return devOps Policy assignment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DevOpsPolicyAssignmentInner update(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, DevOpsPolicyAssignmentInner devOpsPolicyAssignment, Context context);

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId);

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String securityConnectorName,
        String policyAssignmentId, Context context);

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String securityConnectorName, String policyAssignmentId);

    /**
     * Deletes a DevOps Policy Assignment Resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param securityConnectorName The security connector name.
     * @param policyAssignmentId The policy assignment Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String securityConnectorName, String policyAssignmentId, Context context);
}
