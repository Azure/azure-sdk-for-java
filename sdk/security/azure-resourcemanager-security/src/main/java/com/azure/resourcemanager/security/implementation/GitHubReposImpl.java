// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.GitHubReposClient;
import com.azure.resourcemanager.security.fluent.models.GitHubRepositoryInner;
import com.azure.resourcemanager.security.models.GitHubRepos;
import com.azure.resourcemanager.security.models.GitHubRepository;

public final class GitHubReposImpl implements GitHubRepos {
    private static final ClientLogger LOGGER = new ClientLogger(GitHubReposImpl.class);

    private final GitHubReposClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public GitHubReposImpl(GitHubReposClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<GitHubRepository> list(String resourceGroupName, String securityConnectorName,
        String ownerName) {
        PagedIterable<GitHubRepositoryInner> inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, ownerName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GitHubRepositoryImpl(inner1, this.manager()));
    }

    public PagedIterable<GitHubRepository> list(String resourceGroupName, String securityConnectorName,
        String ownerName, Context context) {
        PagedIterable<GitHubRepositoryInner> inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, ownerName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GitHubRepositoryImpl(inner1, this.manager()));
    }

    public Response<GitHubRepository> getWithResponse(String resourceGroupName, String securityConnectorName,
        String ownerName, String repoName, Context context) {
        Response<GitHubRepositoryInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, securityConnectorName, ownerName, repoName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GitHubRepositoryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GitHubRepository get(String resourceGroupName, String securityConnectorName, String ownerName,
        String repoName) {
        GitHubRepositoryInner inner
            = this.serviceClient().get(resourceGroupName, securityConnectorName, ownerName, repoName);
        if (inner != null) {
            return new GitHubRepositoryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private GitHubReposClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
