// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.IotSensorsClient;
import com.azure.resourcemanager.security.fluent.models.IotSensorsListInner;
import com.azure.resourcemanager.security.fluent.models.IotSensorsModelInner;
import com.azure.resourcemanager.security.models.ResetPasswordInput;
import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Iterator;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in IotSensorsClient. */
public final class IotSensorsClientImpl implements IotSensorsClient {
    private final ClientLogger logger = new ClientLogger(IotSensorsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final IotSensorsService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of IotSensorsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    IotSensorsClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy.create(IotSensorsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterIotSensors to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterIotSen")
    private interface IotSensorsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/iotSensors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotSensorsListInner>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotSensorsModelInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("iotSensorName") String iotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotSensorsModelInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("iotSensorName") String iotSensorName,
            @BodyParam("application/json") IotSensorsModelInner iotSensorsModel,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("iotSensorName") String iotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}/downloadActivation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> downloadActivation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("iotSensorName") String iotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}/downloadResetPassword")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> downloadResetPassword(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("iotSensorName") String iotSensorName,
            @BodyParam("application/json") ResetPasswordInput body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post("/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}/triggerTiPackageUpdate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> triggerTiPackageUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("iotSensorName") String iotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List IoT sensors.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSensorsListInner>> listWithResponseAsync(String scope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), apiVersion, scope, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List IoT sensors.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSensorsListInner>> listWithResponseAsync(String scope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), apiVersion, scope, accept, context);
    }

    /**
     * List IoT sensors.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IotSensorsListInner> listAsync(String scope) {
        return listWithResponseAsync(scope)
            .flatMap(
                (Response<IotSensorsListInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * List IoT sensors.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IotSensorsListInner list(String scope) {
        return listAsync(scope).block();
    }

    /**
     * List IoT sensors.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IotSensorsListInner> listWithResponse(String scope, Context context) {
        return listWithResponseAsync(scope, context).block();
    }

    /**
     * Get IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSensorsModelInner>> getWithResponseAsync(String scope, String iotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSensorsModelInner>> getWithResponseAsync(
        String scope, String iotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context);
    }

    /**
     * Get IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IotSensorsModelInner> getAsync(String scope, String iotSensorName) {
        return getWithResponseAsync(scope, iotSensorName)
            .flatMap(
                (Response<IotSensorsModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IotSensorsModelInner get(String scope, String iotSensorName) {
        return getAsync(scope, iotSensorName).block();
    }

    /**
     * Get IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IotSensorsModelInner> getWithResponse(String scope, String iotSensorName, Context context) {
        return getWithResponseAsync(scope, iotSensorName, context).block();
    }

    /**
     * Create or update IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param iotSensorsModel The IoT sensor model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSensorsModelInner>> createOrUpdateWithResponseAsync(
        String scope, String iotSensorName, IotSensorsModelInner iotSensorsModel) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        if (iotSensorsModel == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter iotSensorsModel is required and cannot be null."));
        } else {
            iotSensorsModel.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            apiVersion,
                            scope,
                            iotSensorName,
                            iotSensorsModel,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param iotSensorsModel The IoT sensor model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSensorsModelInner>> createOrUpdateWithResponseAsync(
        String scope, String iotSensorName, IotSensorsModelInner iotSensorsModel, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        if (iotSensorsModel == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter iotSensorsModel is required and cannot be null."));
        } else {
            iotSensorsModel.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(), apiVersion, scope, iotSensorName, iotSensorsModel, accept, context);
    }

    /**
     * Create or update IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param iotSensorsModel The IoT sensor model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IotSensorsModelInner> createOrUpdateAsync(
        String scope, String iotSensorName, IotSensorsModelInner iotSensorsModel) {
        return createOrUpdateWithResponseAsync(scope, iotSensorName, iotSensorsModel)
            .flatMap(
                (Response<IotSensorsModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create or update IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param iotSensorsModel The IoT sensor model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IotSensorsModelInner createOrUpdate(
        String scope, String iotSensorName, IotSensorsModelInner iotSensorsModel) {
        return createOrUpdateAsync(scope, iotSensorName, iotSensorsModel).block();
    }

    /**
     * Create or update IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param iotSensorsModel The IoT sensor model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT sensor model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IotSensorsModelInner> createOrUpdateWithResponse(
        String scope, String iotSensorName, IotSensorsModelInner iotSensorsModel, Context context) {
        return createOrUpdateWithResponseAsync(scope, iotSensorName, iotSensorsModel, context).block();
    }

    /**
     * Delete IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String scope, String iotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String scope, String iotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context);
    }

    /**
     * Delete IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope, String iotSensorName) {
        return deleteWithResponseAsync(scope, iotSensorName).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope, String iotSensorName) {
        deleteAsync(scope, iotSensorName).block();
    }

    /**
     * Delete IoT sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String scope, String iotSensorName, Context context) {
        return deleteWithResponseAsync(scope, iotSensorName, context).block();
    }

    /**
     * Download sensor activation file.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadActivationWithResponseAsync(String scope, String iotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .downloadActivation(
                            this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Download sensor activation file.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadActivationWithResponseAsync(
        String scope, String iotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        context = this.client.mergeContext(context);
        return service.downloadActivation(this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context);
    }

    /**
     * Download sensor activation file.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> downloadActivationAsync(String scope, String iotSensorName) {
        return downloadActivationWithResponseAsync(scope, iotSensorName).flatMapMany(StreamResponse::getValue);
    }

    /**
     * Download sensor activation file.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream downloadActivation(String scope, String iotSensorName) {
        Iterator<ByteBufferBackedInputStream> iterator =
            downloadActivationAsync(scope, iotSensorName).map(ByteBufferBackedInputStream::new).toStream().iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * Download sensor activation file.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse downloadActivationWithResponse(String scope, String iotSensorName, Context context) {
        return downloadActivationWithResponseAsync(scope, iotSensorName, context).block();
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param body The reset password input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadResetPasswordWithResponseAsync(
        String scope, String iotSensorName, ResetPasswordInput body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .downloadResetPassword(
                            this.client.getEndpoint(), apiVersion, scope, iotSensorName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param body The reset password input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadResetPasswordWithResponseAsync(
        String scope, String iotSensorName, ResetPasswordInput body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        context = this.client.mergeContext(context);
        return service
            .downloadResetPassword(this.client.getEndpoint(), apiVersion, scope, iotSensorName, body, accept, context);
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param body The reset password input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> downloadResetPasswordAsync(String scope, String iotSensorName, ResetPasswordInput body) {
        return downloadResetPasswordWithResponseAsync(scope, iotSensorName, body).flatMapMany(StreamResponse::getValue);
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param body The reset password input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream downloadResetPassword(String scope, String iotSensorName, ResetPasswordInput body) {
        Iterator<ByteBufferBackedInputStream> iterator =
            downloadResetPasswordAsync(scope, iotSensorName, body)
                .map(ByteBufferBackedInputStream::new)
                .toStream()
                .iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param body The reset password input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse downloadResetPasswordWithResponse(
        String scope, String iotSensorName, ResetPasswordInput body, Context context) {
        return downloadResetPasswordWithResponseAsync(scope, iotSensorName, body, context).block();
    }

    /**
     * Trigger threat intelligence package update.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> triggerTiPackageUpdateWithResponseAsync(String scope, String iotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .triggerTiPackageUpdate(
                            this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Trigger threat intelligence package update.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> triggerTiPackageUpdateWithResponseAsync(
        String scope, String iotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSensorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .triggerTiPackageUpdate(this.client.getEndpoint(), apiVersion, scope, iotSensorName, accept, context);
    }

    /**
     * Trigger threat intelligence package update.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> triggerTiPackageUpdateAsync(String scope, String iotSensorName) {
        return triggerTiPackageUpdateWithResponseAsync(scope, iotSensorName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Trigger threat intelligence package update.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void triggerTiPackageUpdate(String scope, String iotSensorName) {
        triggerTiPackageUpdateAsync(scope, iotSensorName).block();
    }

    /**
     * Trigger threat intelligence package update.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSensorName Name of the IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> triggerTiPackageUpdateWithResponse(String scope, String iotSensorName, Context context) {
        return triggerTiPackageUpdateWithResponseAsync(scope, iotSensorName, context).block();
    }
}
