// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.CustomEntityStoreAssignmentsClient;
import com.azure.resourcemanager.security.fluent.models.CustomEntityStoreAssignmentInner;
import com.azure.resourcemanager.security.models.CustomEntityStoreAssignment;
import com.azure.resourcemanager.security.models.CustomEntityStoreAssignments;

public final class CustomEntityStoreAssignmentsImpl implements CustomEntityStoreAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(CustomEntityStoreAssignmentsImpl.class);

    private final CustomEntityStoreAssignmentsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public CustomEntityStoreAssignmentsImpl(
        CustomEntityStoreAssignmentsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CustomEntityStoreAssignment> getByResourceGroupWithResponse(
        String resourceGroupName, String customEntityStoreAssignmentName, Context context) {
        Response<CustomEntityStoreAssignmentInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(resourceGroupName, customEntityStoreAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomEntityStoreAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomEntityStoreAssignment getByResourceGroup(
        String resourceGroupName, String customEntityStoreAssignmentName) {
        CustomEntityStoreAssignmentInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, customEntityStoreAssignmentName);
        if (inner != null) {
            return new CustomEntityStoreAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String customEntityStoreAssignmentName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, customEntityStoreAssignmentName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String customEntityStoreAssignmentName) {
        this.serviceClient().delete(resourceGroupName, customEntityStoreAssignmentName);
    }

    public PagedIterable<CustomEntityStoreAssignment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CustomEntityStoreAssignmentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new CustomEntityStoreAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomEntityStoreAssignment> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CustomEntityStoreAssignmentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new CustomEntityStoreAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomEntityStoreAssignment> list() {
        PagedIterable<CustomEntityStoreAssignmentInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new CustomEntityStoreAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomEntityStoreAssignment> list(Context context) {
        PagedIterable<CustomEntityStoreAssignmentInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new CustomEntityStoreAssignmentImpl(inner1, this.manager()));
    }

    public CustomEntityStoreAssignment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String customEntityStoreAssignmentName = Utils.getValueFromIdByName(id, "customEntityStoreAssignments");
        if (customEntityStoreAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'customEntityStoreAssignments'.",
                                id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, customEntityStoreAssignmentName, Context.NONE)
            .getValue();
    }

    public Response<CustomEntityStoreAssignment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String customEntityStoreAssignmentName = Utils.getValueFromIdByName(id, "customEntityStoreAssignments");
        if (customEntityStoreAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'customEntityStoreAssignments'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, customEntityStoreAssignmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String customEntityStoreAssignmentName = Utils.getValueFromIdByName(id, "customEntityStoreAssignments");
        if (customEntityStoreAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'customEntityStoreAssignments'.",
                                id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, customEntityStoreAssignmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String customEntityStoreAssignmentName = Utils.getValueFromIdByName(id, "customEntityStoreAssignments");
        if (customEntityStoreAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'customEntityStoreAssignments'.",
                                id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, customEntityStoreAssignmentName, context);
    }

    private CustomEntityStoreAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public CustomEntityStoreAssignmentImpl define(String name) {
        return new CustomEntityStoreAssignmentImpl(name, this.manager());
    }
}
