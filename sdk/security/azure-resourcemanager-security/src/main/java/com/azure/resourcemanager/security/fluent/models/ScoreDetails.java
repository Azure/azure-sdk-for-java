// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Calculation result data.
 */
@Immutable
public final class ScoreDetails implements JsonSerializable<ScoreDetails> {
    /*
     * Maximum score available
     */
    private Integer max;

    /*
     * Current score
     */
    private Double current;

    /*
     * Ratio of the current score divided by the maximum. Rounded to 4 digits after the decimal point
     */
    private Double percentage;

    /**
     * Creates an instance of ScoreDetails class.
     */
    public ScoreDetails() {
    }

    /**
     * Get the max property: Maximum score available.
     * 
     * @return the max value.
     */
    public Integer max() {
        return this.max;
    }

    /**
     * Get the current property: Current score.
     * 
     * @return the current value.
     */
    public Double current() {
        return this.current;
    }

    /**
     * Get the percentage property: Ratio of the current score divided by the maximum. Rounded to 4 digits after the
     * decimal point.
     * 
     * @return the percentage value.
     */
    public Double percentage() {
        return this.percentage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScoreDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScoreDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScoreDetails.
     */
    public static ScoreDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScoreDetails deserializedScoreDetails = new ScoreDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("max".equals(fieldName)) {
                    deserializedScoreDetails.max = reader.getNullable(JsonReader::getInt);
                } else if ("current".equals(fieldName)) {
                    deserializedScoreDetails.current = reader.getNullable(JsonReader::getDouble);
                } else if ("percentage".equals(fieldName)) {
                    deserializedScoreDetails.percentage = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScoreDetails;
        });
    }
}
