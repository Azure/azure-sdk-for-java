// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.models.RuleState;
import com.azure.resourcemanager.security.models.SuppressionAlertsScope;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Describes the suppression rule. */
@JsonFlatten
@Fluent
public class AlertsSuppressionRuleInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AlertsSuppressionRuleInner.class);

    /*
     * Type of the alert to automatically suppress. For all alert types, use
     * '*'
     */
    @JsonProperty(value = "properties.alertType")
    private String alertType;

    /*
     * The last time this rule was modified
     */
    @JsonProperty(value = "properties.lastModifiedUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedUtc;

    /*
     * Expiration date of the rule, if value is not provided or provided as
     * null this field will default to the maximum allowed expiration date.
     */
    @JsonProperty(value = "properties.expirationDateUtc")
    private OffsetDateTime expirationDateUtc;

    /*
     * The reason for dismissing the alert
     */
    @JsonProperty(value = "properties.reason")
    private String reason;

    /*
     * Possible states of the rule
     */
    @JsonProperty(value = "properties.state")
    private RuleState state;

    /*
     * Any comment regarding the rule
     */
    @JsonProperty(value = "properties.comment")
    private String comment;

    /*
     * The suppression conditions
     */
    @JsonProperty(value = "properties.suppressionAlertsScope")
    private SuppressionAlertsScope suppressionAlertsScope;

    /**
     * Get the alertType property: Type of the alert to automatically suppress. For all alert types, use '*'.
     *
     * @return the alertType value.
     */
    public String alertType() {
        return this.alertType;
    }

    /**
     * Set the alertType property: Type of the alert to automatically suppress. For all alert types, use '*'.
     *
     * @param alertType the alertType value to set.
     * @return the AlertsSuppressionRuleInner object itself.
     */
    public AlertsSuppressionRuleInner withAlertType(String alertType) {
        this.alertType = alertType;
        return this;
    }

    /**
     * Get the lastModifiedUtc property: The last time this rule was modified.
     *
     * @return the lastModifiedUtc value.
     */
    public OffsetDateTime lastModifiedUtc() {
        return this.lastModifiedUtc;
    }

    /**
     * Get the expirationDateUtc property: Expiration date of the rule, if value is not provided or provided as null
     * this field will default to the maximum allowed expiration date.
     *
     * @return the expirationDateUtc value.
     */
    public OffsetDateTime expirationDateUtc() {
        return this.expirationDateUtc;
    }

    /**
     * Set the expirationDateUtc property: Expiration date of the rule, if value is not provided or provided as null
     * this field will default to the maximum allowed expiration date.
     *
     * @param expirationDateUtc the expirationDateUtc value to set.
     * @return the AlertsSuppressionRuleInner object itself.
     */
    public AlertsSuppressionRuleInner withExpirationDateUtc(OffsetDateTime expirationDateUtc) {
        this.expirationDateUtc = expirationDateUtc;
        return this;
    }

    /**
     * Get the reason property: The reason for dismissing the alert.
     *
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: The reason for dismissing the alert.
     *
     * @param reason the reason value to set.
     * @return the AlertsSuppressionRuleInner object itself.
     */
    public AlertsSuppressionRuleInner withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the state property: Possible states of the rule.
     *
     * @return the state value.
     */
    public RuleState state() {
        return this.state;
    }

    /**
     * Set the state property: Possible states of the rule.
     *
     * @param state the state value to set.
     * @return the AlertsSuppressionRuleInner object itself.
     */
    public AlertsSuppressionRuleInner withState(RuleState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the comment property: Any comment regarding the rule.
     *
     * @return the comment value.
     */
    public String comment() {
        return this.comment;
    }

    /**
     * Set the comment property: Any comment regarding the rule.
     *
     * @param comment the comment value to set.
     * @return the AlertsSuppressionRuleInner object itself.
     */
    public AlertsSuppressionRuleInner withComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Get the suppressionAlertsScope property: The suppression conditions.
     *
     * @return the suppressionAlertsScope value.
     */
    public SuppressionAlertsScope suppressionAlertsScope() {
        return this.suppressionAlertsScope;
    }

    /**
     * Set the suppressionAlertsScope property: The suppression conditions.
     *
     * @param suppressionAlertsScope the suppressionAlertsScope value to set.
     * @return the AlertsSuppressionRuleInner object itself.
     */
    public AlertsSuppressionRuleInner withSuppressionAlertsScope(SuppressionAlertsScope suppressionAlertsScope) {
        this.suppressionAlertsScope = suppressionAlertsScope;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (suppressionAlertsScope() != null) {
            suppressionAlertsScope().validate();
        }
    }
}
