// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings for hybrid compute management.
 */
@Fluent
public final class HybridComputeSettingsProperties implements JsonSerializable<HybridComputeSettingsProperties> {
    /*
     * State of the service principal and its secret
     */
    private HybridComputeProvisioningState hybridComputeProvisioningState;

    /*
     * Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
     */
    private AutoProvision autoProvision;

    /*
     * The name of the resource group where Arc (Hybrid Compute) connectors are connected.
     */
    private String resourceGroupName;

    /*
     * The location where the metadata of machines will be stored
     */
    private String region;

    /*
     * For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure
     * machine can use.
     */
    private ProxyServerProperties proxyServer;

    /*
     * An object to access resources that are secured by an Azure AD tenant.
     */
    private ServicePrincipalProperties servicePrincipal;

    /**
     * Creates an instance of HybridComputeSettingsProperties class.
     */
    public HybridComputeSettingsProperties() {
    }

    /**
     * Get the hybridComputeProvisioningState property: State of the service principal and its secret.
     * 
     * @return the hybridComputeProvisioningState value.
     */
    public HybridComputeProvisioningState hybridComputeProvisioningState() {
        return this.hybridComputeProvisioningState;
    }

    /**
     * Get the autoProvision property: Whether or not to automatically install Azure Arc (hybrid compute) agents on
     * machines.
     * 
     * @return the autoProvision value.
     */
    public AutoProvision autoProvision() {
        return this.autoProvision;
    }

    /**
     * Set the autoProvision property: Whether or not to automatically install Azure Arc (hybrid compute) agents on
     * machines.
     * 
     * @param autoProvision the autoProvision value to set.
     * @return the HybridComputeSettingsProperties object itself.
     */
    public HybridComputeSettingsProperties withAutoProvision(AutoProvision autoProvision) {
        this.autoProvision = autoProvision;
        return this;
    }

    /**
     * Get the resourceGroupName property: The name of the resource group where Arc (Hybrid Compute) connectors are
     * connected.
     * 
     * @return the resourceGroupName value.
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Set the resourceGroupName property: The name of the resource group where Arc (Hybrid Compute) connectors are
     * connected.
     * 
     * @param resourceGroupName the resourceGroupName value to set.
     * @return the HybridComputeSettingsProperties object itself.
     */
    public HybridComputeSettingsProperties withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    /**
     * Get the region property: The location where the metadata of machines will be stored.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: The location where the metadata of machines will be stored.
     * 
     * @param region the region value to set.
     * @return the HybridComputeSettingsProperties object itself.
     */
    public HybridComputeSettingsProperties withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the proxyServer property: For a non-Azure machine that is not connected directly to the internet, specify a
     * proxy server that the non-Azure machine can use.
     * 
     * @return the proxyServer value.
     */
    public ProxyServerProperties proxyServer() {
        return this.proxyServer;
    }

    /**
     * Set the proxyServer property: For a non-Azure machine that is not connected directly to the internet, specify a
     * proxy server that the non-Azure machine can use.
     * 
     * @param proxyServer the proxyServer value to set.
     * @return the HybridComputeSettingsProperties object itself.
     */
    public HybridComputeSettingsProperties withProxyServer(ProxyServerProperties proxyServer) {
        this.proxyServer = proxyServer;
        return this;
    }

    /**
     * Get the servicePrincipal property: An object to access resources that are secured by an Azure AD tenant.
     * 
     * @return the servicePrincipal value.
     */
    public ServicePrincipalProperties servicePrincipal() {
        return this.servicePrincipal;
    }

    /**
     * Set the servicePrincipal property: An object to access resources that are secured by an Azure AD tenant.
     * 
     * @param servicePrincipal the servicePrincipal value to set.
     * @return the HybridComputeSettingsProperties object itself.
     */
    public HybridComputeSettingsProperties withServicePrincipal(ServicePrincipalProperties servicePrincipal) {
        this.servicePrincipal = servicePrincipal;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (autoProvision() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property autoProvision in model HybridComputeSettingsProperties"));
        }
        if (proxyServer() != null) {
            proxyServer().validate();
        }
        if (servicePrincipal() != null) {
            servicePrincipal().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HybridComputeSettingsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("autoProvision", this.autoProvision == null ? null : this.autoProvision.toString());
        jsonWriter.writeStringField("resourceGroupName", this.resourceGroupName);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeJsonField("proxyServer", this.proxyServer);
        jsonWriter.writeJsonField("servicePrincipal", this.servicePrincipal);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HybridComputeSettingsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HybridComputeSettingsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HybridComputeSettingsProperties.
     */
    public static HybridComputeSettingsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HybridComputeSettingsProperties deserializedHybridComputeSettingsProperties
                = new HybridComputeSettingsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoProvision".equals(fieldName)) {
                    deserializedHybridComputeSettingsProperties.autoProvision
                        = AutoProvision.fromString(reader.getString());
                } else if ("hybridComputeProvisioningState".equals(fieldName)) {
                    deserializedHybridComputeSettingsProperties.hybridComputeProvisioningState
                        = HybridComputeProvisioningState.fromString(reader.getString());
                } else if ("resourceGroupName".equals(fieldName)) {
                    deserializedHybridComputeSettingsProperties.resourceGroupName = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedHybridComputeSettingsProperties.region = reader.getString();
                } else if ("proxyServer".equals(fieldName)) {
                    deserializedHybridComputeSettingsProperties.proxyServer = ProxyServerProperties.fromJson(reader);
                } else if ("servicePrincipal".equals(fieldName)) {
                    deserializedHybridComputeSettingsProperties.servicePrincipal
                        = ServicePrincipalProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHybridComputeSettingsProperties;
        });
    }
}
