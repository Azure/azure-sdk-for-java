// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.security.fluent.ServerVulnerabilityAssessmentsSettingsClient;
import com.azure.resourcemanager.security.fluent.models.ServerVulnerabilityAssessmentsSettingInner;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessmentsSettingKindName;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessmentsSettingsList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ServerVulnerabilityAssessmentsSettingsClient.
 */
public final class ServerVulnerabilityAssessmentsSettingsClientImpl
    implements ServerVulnerabilityAssessmentsSettingsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ServerVulnerabilityAssessmentsSettingsService service;

    /**
     * The service client containing this operation class.
     */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of ServerVulnerabilityAssessmentsSettingsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ServerVulnerabilityAssessmentsSettingsClientImpl(SecurityCenterImpl client) {
        this.service = RestProxy.create(ServerVulnerabilityAssessmentsSettingsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterServerVulnerabilityAssessmentsSettings to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterServer")
    public interface ServerVulnerabilityAssessmentsSettingsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerVulnerabilityAssessmentsSettingsList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings/{settingKind}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerVulnerabilityAssessmentsSettingInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("settingKind") ServerVulnerabilityAssessmentsSettingKindName settingKind,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings/{settingKind}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerVulnerabilityAssessmentsSettingInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("settingKind") ServerVulnerabilityAssessmentsSettingKindName settingKind,
            @BodyParam("application/json") ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings/{settingKind}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("settingKind") ServerVulnerabilityAssessmentsSettingKindName settingKind,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ServerVulnerabilityAssessmentsSettingsList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a list of all the server vulnerability assessments settings over a subscription level scope.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the server vulnerability assessments settings over a subscription level scope along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerVulnerabilityAssessmentsSettingInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(),
                accept, context))
            .<PagedResponse<ServerVulnerabilityAssessmentsSettingInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a list of all the server vulnerability assessments settings over a subscription level scope.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the server vulnerability assessments settings over a subscription level scope along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerVulnerabilityAssessmentsSettingInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get a list of all the server vulnerability assessments settings over a subscription level scope.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the server vulnerability assessments settings over a subscription level scope as paginated
     * response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerVulnerabilityAssessmentsSettingInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all the server vulnerability assessments settings over a subscription level scope.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the server vulnerability assessments settings over a subscription level scope as paginated
     * response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerVulnerabilityAssessmentsSettingInner> listAsync(Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all the server vulnerability assessments settings over a subscription level scope.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the server vulnerability assessments settings over a subscription level scope as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerVulnerabilityAssessmentsSettingInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Get a list of all the server vulnerability assessments settings over a subscription level scope.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the server vulnerability assessments settings over a subscription level scope as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerVulnerabilityAssessmentsSettingInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Get a server vulnerability assessments setting of the requested kind, that is set on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a server vulnerability assessments setting of the requested kind, that is set on the subscription along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ServerVulnerabilityAssessmentsSettingInner>>
        getWithResponseAsync(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (settingKind == null) {
            return Mono.error(new IllegalArgumentException("Parameter settingKind is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(),
                settingKind, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a server vulnerability assessments setting of the requested kind, that is set on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a server vulnerability assessments setting of the requested kind, that is set on the subscription along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ServerVulnerabilityAssessmentsSettingInner>>
        getWithResponseAsync(ServerVulnerabilityAssessmentsSettingKindName settingKind, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (settingKind == null) {
            return Mono.error(new IllegalArgumentException("Parameter settingKind is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(), settingKind, accept,
            context);
    }

    /**
     * Get a server vulnerability assessments setting of the requested kind, that is set on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a server vulnerability assessments setting of the requested kind, that is set on the subscription on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerVulnerabilityAssessmentsSettingInner>
        getAsync(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        return getWithResponseAsync(settingKind).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a server vulnerability assessments setting of the requested kind, that is set on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a server vulnerability assessments setting of the requested kind, that is set on the subscription along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ServerVulnerabilityAssessmentsSettingInner>
        getWithResponse(ServerVulnerabilityAssessmentsSettingKindName settingKind, Context context) {
        return getWithResponseAsync(settingKind, context).block();
    }

    /**
     * Get a server vulnerability assessments setting of the requested kind, that is set on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a server vulnerability assessments setting of the requested kind, that is set on the subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerVulnerabilityAssessmentsSettingInner get(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        return getWithResponse(settingKind, Context.NONE).getValue();
    }

    /**
     * Create or update a server vulnerability assessments setting of the requested kind on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param serverVulnerabilityAssessmentsSetting A server vulnerability assessments setting over a predefined scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a base vulnerability assessments setting on servers in the defined scope along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ServerVulnerabilityAssessmentsSettingInner>> createOrUpdateWithResponseAsync(
        ServerVulnerabilityAssessmentsSettingKindName settingKind,
        ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (settingKind == null) {
            return Mono.error(new IllegalArgumentException("Parameter settingKind is required and cannot be null."));
        }
        if (serverVulnerabilityAssessmentsSetting == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter serverVulnerabilityAssessmentsSetting is required and cannot be null."));
        } else {
            serverVulnerabilityAssessmentsSetting.validate();
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), apiVersion,
                this.client.getSubscriptionId(), settingKind, serverVulnerabilityAssessmentsSetting, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a server vulnerability assessments setting of the requested kind on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param serverVulnerabilityAssessmentsSetting A server vulnerability assessments setting over a predefined scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a base vulnerability assessments setting on servers in the defined scope along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ServerVulnerabilityAssessmentsSettingInner>> createOrUpdateWithResponseAsync(
        ServerVulnerabilityAssessmentsSettingKindName settingKind,
        ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (settingKind == null) {
            return Mono.error(new IllegalArgumentException("Parameter settingKind is required and cannot be null."));
        }
        if (serverVulnerabilityAssessmentsSetting == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter serverVulnerabilityAssessmentsSetting is required and cannot be null."));
        } else {
            serverVulnerabilityAssessmentsSetting.validate();
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(),
            settingKind, serverVulnerabilityAssessmentsSetting, accept, context);
    }

    /**
     * Create or update a server vulnerability assessments setting of the requested kind on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param serverVulnerabilityAssessmentsSetting A server vulnerability assessments setting over a predefined scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a base vulnerability assessments setting on servers in the defined scope on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerVulnerabilityAssessmentsSettingInner> createOrUpdateAsync(
        ServerVulnerabilityAssessmentsSettingKindName settingKind,
        ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting) {
        return createOrUpdateWithResponseAsync(settingKind, serverVulnerabilityAssessmentsSetting)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create or update a server vulnerability assessments setting of the requested kind on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param serverVulnerabilityAssessmentsSetting A server vulnerability assessments setting over a predefined scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a base vulnerability assessments setting on servers in the defined scope along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ServerVulnerabilityAssessmentsSettingInner> createOrUpdateWithResponse(
        ServerVulnerabilityAssessmentsSettingKindName settingKind,
        ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting, Context context) {
        return createOrUpdateWithResponseAsync(settingKind, serverVulnerabilityAssessmentsSetting, context).block();
    }

    /**
     * Create or update a server vulnerability assessments setting of the requested kind on the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param serverVulnerabilityAssessmentsSetting A server vulnerability assessments setting over a predefined scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a base vulnerability assessments setting on servers in the defined scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerVulnerabilityAssessmentsSettingInner createOrUpdate(
        ServerVulnerabilityAssessmentsSettingKindName settingKind,
        ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting) {
        return createOrUpdateWithResponse(settingKind, serverVulnerabilityAssessmentsSetting, Context.NONE).getValue();
    }

    /**
     * Delete the server vulnerability assessments setting of the requested kind from the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (settingKind == null) {
            return Mono.error(new IllegalArgumentException("Parameter settingKind is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), apiVersion,
                this.client.getSubscriptionId(), settingKind, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the server vulnerability assessments setting of the requested kind from the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(ServerVulnerabilityAssessmentsSettingKindName settingKind,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (settingKind == null) {
            return Mono.error(new IllegalArgumentException("Parameter settingKind is required and cannot be null."));
        }
        final String apiVersion = "2023-05-01";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(), settingKind,
            accept, context);
    }

    /**
     * Delete the server vulnerability assessments setting of the requested kind from the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        return deleteWithResponseAsync(settingKind).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete the server vulnerability assessments setting of the requested kind from the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(ServerVulnerabilityAssessmentsSettingKindName settingKind,
        Context context) {
        return deleteWithResponseAsync(settingKind, context).block();
    }

    /**
     * Delete the server vulnerability assessments setting of the requested kind from the subscription.
     * 
     * @param settingKind The kind of the server vulnerability assessments setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        deleteWithResponse(settingKind, Context.NONE);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a page of a server vulnerability assessments settings list along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerVulnerabilityAssessmentsSettingInner>>
        listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ServerVulnerabilityAssessmentsSettingInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a page of a server vulnerability assessments settings list along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerVulnerabilityAssessmentsSettingInner>>
        listBySubscriptionNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
