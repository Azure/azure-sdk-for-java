// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.security.fluent.models.ExecuteRuleStatusInner;

/**
 * An instance of this class provides access to all the operations defined in
 * SecurityConnectorGovernanceRulesExecuteStatusClient.
 */
public interface SecurityConnectorGovernanceRulesExecuteStatusClient {
    /**
     * Get a specific governanceRule execution status for the requested scope by ruleId and operationId.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param securityConnectorName The security connector name.
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param operationId The security GovernanceRule execution key - unique key for the execution of GovernanceRule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a specific governanceRule execution status for the requested scope
     *     by ruleId and operationId.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExecuteRuleStatusInner>, ExecuteRuleStatusInner> beginGet(
        String resourceGroupName, String securityConnectorName, String ruleId, String operationId);

    /**
     * Get a specific governanceRule execution status for the requested scope by ruleId and operationId.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param securityConnectorName The security connector name.
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param operationId The security GovernanceRule execution key - unique key for the execution of GovernanceRule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a specific governanceRule execution status for the requested scope
     *     by ruleId and operationId.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExecuteRuleStatusInner>, ExecuteRuleStatusInner> beginGet(
        String resourceGroupName, String securityConnectorName, String ruleId, String operationId, Context context);

    /**
     * Get a specific governanceRule execution status for the requested scope by ruleId and operationId.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param securityConnectorName The security connector name.
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param operationId The security GovernanceRule execution key - unique key for the execution of GovernanceRule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule execution status for the requested scope by ruleId and operationId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExecuteRuleStatusInner get(
        String resourceGroupName, String securityConnectorName, String ruleId, String operationId);

    /**
     * Get a specific governanceRule execution status for the requested scope by ruleId and operationId.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param securityConnectorName The security connector name.
     * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule.
     * @param operationId The security GovernanceRule execution key - unique key for the execution of GovernanceRule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governanceRule execution status for the requested scope by ruleId and operationId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExecuteRuleStatusInner get(
        String resourceGroupName, String securityConnectorName, String ruleId, String operationId, Context context);
}
