// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.GitLabSubgroupsClient;
import com.azure.resourcemanager.security.fluent.models.GitLabGroupListResponseInner;
import com.azure.resourcemanager.security.models.GitLabGroupListResponse;
import com.azure.resourcemanager.security.models.GitLabSubgroups;

public final class GitLabSubgroupsImpl implements GitLabSubgroups {
    private static final ClientLogger LOGGER = new ClientLogger(GitLabSubgroupsImpl.class);

    private final GitLabSubgroupsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public GitLabSubgroupsImpl(GitLabSubgroupsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GitLabGroupListResponse> listWithResponse(String resourceGroupName, String securityConnectorName,
        String groupFQName, Context context) {
        Response<GitLabGroupListResponseInner> inner
            = this.serviceClient().listWithResponse(resourceGroupName, securityConnectorName, groupFQName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GitLabGroupListResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GitLabGroupListResponse list(String resourceGroupName, String securityConnectorName, String groupFQName) {
        GitLabGroupListResponseInner inner
            = this.serviceClient().list(resourceGroupName, securityConnectorName, groupFQName);
        if (inner != null) {
            return new GitLabGroupListResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private GitLabSubgroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
