// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The JitNetworkAccessPolicyInitiateRequest model.
 */
@Fluent
public final class JitNetworkAccessPolicyInitiateRequest
    implements JsonSerializable<JitNetworkAccessPolicyInitiateRequest> {
    /*
     * A list of virtual machines & ports to open access for
     */
    private List<JitNetworkAccessPolicyInitiateVirtualMachine> virtualMachines;

    /*
     * The justification for making the initiate request
     */
    private String justification;

    /**
     * Creates an instance of JitNetworkAccessPolicyInitiateRequest class.
     */
    public JitNetworkAccessPolicyInitiateRequest() {
    }

    /**
     * Get the virtualMachines property: A list of virtual machines &amp; ports to open access for.
     * 
     * @return the virtualMachines value.
     */
    public List<JitNetworkAccessPolicyInitiateVirtualMachine> virtualMachines() {
        return this.virtualMachines;
    }

    /**
     * Set the virtualMachines property: A list of virtual machines &amp; ports to open access for.
     * 
     * @param virtualMachines the virtualMachines value to set.
     * @return the JitNetworkAccessPolicyInitiateRequest object itself.
     */
    public JitNetworkAccessPolicyInitiateRequest
        withVirtualMachines(List<JitNetworkAccessPolicyInitiateVirtualMachine> virtualMachines) {
        this.virtualMachines = virtualMachines;
        return this;
    }

    /**
     * Get the justification property: The justification for making the initiate request.
     * 
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Set the justification property: The justification for making the initiate request.
     * 
     * @param justification the justification value to set.
     * @return the JitNetworkAccessPolicyInitiateRequest object itself.
     */
    public JitNetworkAccessPolicyInitiateRequest withJustification(String justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualMachines() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property virtualMachines in model JitNetworkAccessPolicyInitiateRequest"));
        } else {
            virtualMachines().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JitNetworkAccessPolicyInitiateRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("virtualMachines", this.virtualMachines,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("justification", this.justification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JitNetworkAccessPolicyInitiateRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JitNetworkAccessPolicyInitiateRequest if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JitNetworkAccessPolicyInitiateRequest.
     */
    public static JitNetworkAccessPolicyInitiateRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JitNetworkAccessPolicyInitiateRequest deserializedJitNetworkAccessPolicyInitiateRequest
                = new JitNetworkAccessPolicyInitiateRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualMachines".equals(fieldName)) {
                    List<JitNetworkAccessPolicyInitiateVirtualMachine> virtualMachines
                        = reader.readArray(reader1 -> JitNetworkAccessPolicyInitiateVirtualMachine.fromJson(reader1));
                    deserializedJitNetworkAccessPolicyInitiateRequest.virtualMachines = virtualMachines;
                } else if ("justification".equals(fieldName)) {
                    deserializedJitNetworkAccessPolicyInitiateRequest.justification = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJitNetworkAccessPolicyInitiateRequest;
        });
    }
}
