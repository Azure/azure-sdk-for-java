// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration payload for PR Annotations.
 */
@Fluent
public final class ActionableRemediation implements JsonSerializable<ActionableRemediation> {
    /*
     * ActionableRemediation Setting.
     * None - the setting was never set.
     * Enabled - ActionableRemediation is enabled.
     * Disabled - ActionableRemediation is disabled.
     */
    private ActionableRemediationState state;

    /*
     * Gets or sets list of categories and severity levels.
     */
    private List<CategoryConfiguration> categoryConfigurations;

    /*
     * Repository branch configuration for PR Annotations.
     */
    private TargetBranchConfiguration branchConfiguration;

    /*
     * Update Settings.
     * 
     * Enabled - Resource should inherit configurations from parent.
     * Disabled - Resource should not inherit configurations from parent.
     */
    private InheritFromParentState inheritFromParentState;

    /**
     * Creates an instance of ActionableRemediation class.
     */
    public ActionableRemediation() {
    }

    /**
     * Get the state property: ActionableRemediation Setting.
     * None - the setting was never set.
     * Enabled - ActionableRemediation is enabled.
     * Disabled - ActionableRemediation is disabled.
     * 
     * @return the state value.
     */
    public ActionableRemediationState state() {
        return this.state;
    }

    /**
     * Set the state property: ActionableRemediation Setting.
     * None - the setting was never set.
     * Enabled - ActionableRemediation is enabled.
     * Disabled - ActionableRemediation is disabled.
     * 
     * @param state the state value to set.
     * @return the ActionableRemediation object itself.
     */
    public ActionableRemediation withState(ActionableRemediationState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the categoryConfigurations property: Gets or sets list of categories and severity levels.
     * 
     * @return the categoryConfigurations value.
     */
    public List<CategoryConfiguration> categoryConfigurations() {
        return this.categoryConfigurations;
    }

    /**
     * Set the categoryConfigurations property: Gets or sets list of categories and severity levels.
     * 
     * @param categoryConfigurations the categoryConfigurations value to set.
     * @return the ActionableRemediation object itself.
     */
    public ActionableRemediation withCategoryConfigurations(List<CategoryConfiguration> categoryConfigurations) {
        this.categoryConfigurations = categoryConfigurations;
        return this;
    }

    /**
     * Get the branchConfiguration property: Repository branch configuration for PR Annotations.
     * 
     * @return the branchConfiguration value.
     */
    public TargetBranchConfiguration branchConfiguration() {
        return this.branchConfiguration;
    }

    /**
     * Set the branchConfiguration property: Repository branch configuration for PR Annotations.
     * 
     * @param branchConfiguration the branchConfiguration value to set.
     * @return the ActionableRemediation object itself.
     */
    public ActionableRemediation withBranchConfiguration(TargetBranchConfiguration branchConfiguration) {
        this.branchConfiguration = branchConfiguration;
        return this;
    }

    /**
     * Get the inheritFromParentState property: Update Settings.
     * 
     * Enabled - Resource should inherit configurations from parent.
     * Disabled - Resource should not inherit configurations from parent.
     * 
     * @return the inheritFromParentState value.
     */
    public InheritFromParentState inheritFromParentState() {
        return this.inheritFromParentState;
    }

    /**
     * Set the inheritFromParentState property: Update Settings.
     * 
     * Enabled - Resource should inherit configurations from parent.
     * Disabled - Resource should not inherit configurations from parent.
     * 
     * @param inheritFromParentState the inheritFromParentState value to set.
     * @return the ActionableRemediation object itself.
     */
    public ActionableRemediation withInheritFromParentState(InheritFromParentState inheritFromParentState) {
        this.inheritFromParentState = inheritFromParentState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (categoryConfigurations() != null) {
            categoryConfigurations().forEach(e -> e.validate());
        }
        if (branchConfiguration() != null) {
            branchConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeArrayField("categoryConfigurations", this.categoryConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("branchConfiguration", this.branchConfiguration);
        jsonWriter.writeStringField("inheritFromParentState",
            this.inheritFromParentState == null ? null : this.inheritFromParentState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionableRemediation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionableRemediation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActionableRemediation.
     */
    public static ActionableRemediation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActionableRemediation deserializedActionableRemediation = new ActionableRemediation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedActionableRemediation.state = ActionableRemediationState.fromString(reader.getString());
                } else if ("categoryConfigurations".equals(fieldName)) {
                    List<CategoryConfiguration> categoryConfigurations
                        = reader.readArray(reader1 -> CategoryConfiguration.fromJson(reader1));
                    deserializedActionableRemediation.categoryConfigurations = categoryConfigurations;
                } else if ("branchConfiguration".equals(fieldName)) {
                    deserializedActionableRemediation.branchConfiguration = TargetBranchConfiguration.fromJson(reader);
                } else if ("inheritFromParentState".equals(fieldName)) {
                    deserializedActionableRemediation.inheritFromParentState
                        = InheritFromParentState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActionableRemediation;
        });
    }
}
