// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.OnPremiseIotSensorsClient;
import com.azure.resourcemanager.security.fluent.models.OnPremiseIotSensorInner;
import com.azure.resourcemanager.security.fluent.models.OnPremiseIotSensorsListInner;
import com.azure.resourcemanager.security.models.OnPremiseIotSensor;
import com.azure.resourcemanager.security.models.OnPremiseIotSensors;
import com.azure.resourcemanager.security.models.OnPremiseIotSensorsList;
import com.azure.resourcemanager.security.models.ResetPasswordInput;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.InputStream;

public final class OnPremiseIotSensorsImpl implements OnPremiseIotSensors {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OnPremiseIotSensorsImpl.class);

    private final OnPremiseIotSensorsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public OnPremiseIotSensorsImpl(
        OnPremiseIotSensorsClient innerClient, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public OnPremiseIotSensorsList list() {
        OnPremiseIotSensorsListInner inner = this.serviceClient().list();
        if (inner != null) {
            return new OnPremiseIotSensorsListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OnPremiseIotSensorsList> listWithResponse(Context context) {
        Response<OnPremiseIotSensorsListInner> inner = this.serviceClient().listWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OnPremiseIotSensorsListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OnPremiseIotSensor get(String onPremiseIotSensorName) {
        OnPremiseIotSensorInner inner = this.serviceClient().get(onPremiseIotSensorName);
        if (inner != null) {
            return new OnPremiseIotSensorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OnPremiseIotSensor> getWithResponse(String onPremiseIotSensorName, Context context) {
        Response<OnPremiseIotSensorInner> inner = this.serviceClient().getWithResponse(onPremiseIotSensorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OnPremiseIotSensorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OnPremiseIotSensor createOrUpdate(String onPremiseIotSensorName) {
        OnPremiseIotSensorInner inner = this.serviceClient().createOrUpdate(onPremiseIotSensorName);
        if (inner != null) {
            return new OnPremiseIotSensorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OnPremiseIotSensor> createOrUpdateWithResponse(String onPremiseIotSensorName, Context context) {
        Response<OnPremiseIotSensorInner> inner =
            this.serviceClient().createOrUpdateWithResponse(onPremiseIotSensorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OnPremiseIotSensorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String onPremiseIotSensorName) {
        this.serviceClient().delete(onPremiseIotSensorName);
    }

    public Response<Void> deleteWithResponse(String onPremiseIotSensorName, Context context) {
        return this.serviceClient().deleteWithResponse(onPremiseIotSensorName, context);
    }

    public InputStream downloadActivation(String onPremiseIotSensorName) {
        return this.serviceClient().downloadActivation(onPremiseIotSensorName);
    }

    public StreamResponse downloadActivationWithResponse(String onPremiseIotSensorName, Context context) {
        return this.serviceClient().downloadActivationWithResponse(onPremiseIotSensorName, context);
    }

    public InputStream downloadResetPassword(String onPremiseIotSensorName, ResetPasswordInput body) {
        return this.serviceClient().downloadResetPassword(onPremiseIotSensorName, body);
    }

    public StreamResponse downloadResetPasswordWithResponse(
        String onPremiseIotSensorName, ResetPasswordInput body, Context context) {
        return this.serviceClient().downloadResetPasswordWithResponse(onPremiseIotSensorName, body, context);
    }

    private OnPremiseIotSensorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
