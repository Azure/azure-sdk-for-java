// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of SqlVulnerabilityAssessmentBaselineRules. */
public interface SqlVulnerabilityAssessmentBaselineRules {
    /**
     * Gets the results for a given rule in the Baseline.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for a given rule in the Baseline.
     */
    RuleResults get(String ruleId, String workspaceId, String resourceId);

    /**
     * Gets the results for a given rule in the Baseline.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for a given rule in the Baseline.
     */
    Response<RuleResults> getWithResponse(String ruleId, String workspaceId, String resourceId, Context context);

    /**
     * Deletes a rule from the Baseline of a given database.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String ruleId, String workspaceId, String resourceId);

    /**
     * Deletes a rule from the Baseline of a given database.
     *
     * @param ruleId The rule Id.
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteWithResponse(String ruleId, String workspaceId, String resourceId, Context context);

    /**
     * Gets the results for all rules in the Baseline.
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for all rules in the Baseline.
     */
    RulesResults list(String workspaceId, String resourceId);

    /**
     * Gets the results for all rules in the Baseline.
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results for all rules in the Baseline.
     */
    Response<RulesResults> listWithResponse(String workspaceId, String resourceId, Context context);

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    RulesResults add(String workspaceId, String resourceId);

    /**
     * Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
     *
     * @param workspaceId The workspace Id.
     * @param resourceId The identifier of the resource.
     * @param body The baseline rules.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of rules results.
     */
    Response<RulesResults> addWithResponse(
        String workspaceId, String resourceId, RulesResultsInput body, Context context);

    /**
     * Begins definition for a new RuleResults resource.
     *
     * @param name resource name.
     * @return the first stage of the new RuleResults definition.
     */
    RuleResults.DefinitionStages.Blank define(String name);
}
