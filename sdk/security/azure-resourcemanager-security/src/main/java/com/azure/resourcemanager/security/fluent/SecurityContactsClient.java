// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.SecurityContactInner;

/** An instance of this class provides access to all the operations defined in SecurityContactsClient. */
public interface SecurityContactsClient {
    /**
     * Security contact configurations for the subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of security contacts response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityContactInner> list();

    /**
     * Security contact configurations for the subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of security contacts response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityContactInner> list(Context context);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contact details for security issues.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityContactInner get(String securityContactName);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contact details for security issues.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityContactInner> getWithResponse(String securityContactName, Context context);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param securityContact Security contact object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contact details for security issues.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityContactInner create(String securityContactName, SecurityContactInner securityContact);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param securityContact Security contact object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contact details for security issues.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityContactInner> createWithResponse(
        String securityContactName, SecurityContactInner securityContact, Context context);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String securityContactName);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String securityContactName, Context context);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param securityContact Security contact object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contact details for security issues.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityContactInner update(String securityContactName, SecurityContactInner securityContact);

    /**
     * Security contact configurations for the subscription.
     *
     * @param securityContactName Name of the security contact object.
     * @param securityContact Security contact object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contact details for security issues.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityContactInner> updateWithResponse(
        String securityContactName, SecurityContactInner securityContact, Context context);
}
