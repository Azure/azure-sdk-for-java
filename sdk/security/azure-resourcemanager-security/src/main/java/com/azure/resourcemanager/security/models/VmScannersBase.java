// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A VM scanning configuration for a security offering of a given environment.
 */
@Fluent
public class VmScannersBase implements JsonSerializable<VmScannersBase> {
    /*
     * Is VM scanning enabled
     */
    private Boolean enabled;

    /*
     * Configuration for VM scanning
     */
    private VmScannersBaseConfiguration configuration;

    /**
     * Creates an instance of VmScannersBase class.
     */
    public VmScannersBase() {
    }

    /**
     * Get the enabled property: Is VM scanning enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Is VM scanning enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the VmScannersBase object itself.
     */
    public VmScannersBase withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the configuration property: Configuration for VM scanning.
     * 
     * @return the configuration value.
     */
    public VmScannersBaseConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Configuration for VM scanning.
     * 
     * @param configuration the configuration value to set.
     * @return the VmScannersBase object itself.
     */
    public VmScannersBase withConfiguration(VmScannersBaseConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configuration() != null) {
            configuration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeJsonField("configuration", this.configuration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmScannersBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmScannersBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VmScannersBase.
     */
    public static VmScannersBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmScannersBase deserializedVmScannersBase = new VmScannersBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedVmScannersBase.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("configuration".equals(fieldName)) {
                    deserializedVmScannersBase.configuration = VmScannersBaseConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmScannersBase;
        });
    }
}
