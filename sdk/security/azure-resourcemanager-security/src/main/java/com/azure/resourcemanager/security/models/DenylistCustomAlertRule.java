// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A custom alert rule that checks if a value (depends on the custom alert type) is denied.
 */
@Fluent
public final class DenylistCustomAlertRule extends ListCustomAlertRule {
    /*
     * The type of the custom alert rule.
     */
    private String ruleType = "DenylistCustomAlertRule";

    /*
     * The values to deny. The format of the values depends on the rule type.
     */
    private List<String> denylistValues;

    /**
     * Creates an instance of DenylistCustomAlertRule class.
     */
    public DenylistCustomAlertRule() {
    }

    /**
     * Get the ruleType property: The type of the custom alert rule.
     * 
     * @return the ruleType value.
     */
    @Override
    public String ruleType() {
        return this.ruleType;
    }

    /**
     * Get the denylistValues property: The values to deny. The format of the values depends on the rule type.
     * 
     * @return the denylistValues value.
     */
    public List<String> denylistValues() {
        return this.denylistValues;
    }

    /**
     * Set the denylistValues property: The values to deny. The format of the values depends on the rule type.
     * 
     * @param denylistValues the denylistValues value to set.
     * @return the DenylistCustomAlertRule object itself.
     */
    public DenylistCustomAlertRule withDenylistValues(List<String> denylistValues) {
        this.denylistValues = denylistValues;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DenylistCustomAlertRule withIsEnabled(boolean isEnabled) {
        super.withIsEnabled(isEnabled);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (denylistValues() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property denylistValues in model DenylistCustomAlertRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DenylistCustomAlertRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isEnabled", isEnabled());
        jsonWriter.writeArrayField("denylistValues", this.denylistValues,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("ruleType", this.ruleType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DenylistCustomAlertRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DenylistCustomAlertRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DenylistCustomAlertRule.
     */
    public static DenylistCustomAlertRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DenylistCustomAlertRule deserializedDenylistCustomAlertRule = new DenylistCustomAlertRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isEnabled".equals(fieldName)) {
                    deserializedDenylistCustomAlertRule.withIsEnabled(reader.getBoolean());
                } else if ("displayName".equals(fieldName)) {
                    deserializedDenylistCustomAlertRule.withDisplayName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedDenylistCustomAlertRule.withDescription(reader.getString());
                } else if ("valueType".equals(fieldName)) {
                    deserializedDenylistCustomAlertRule.withValueType(ValueType.fromString(reader.getString()));
                } else if ("denylistValues".equals(fieldName)) {
                    List<String> denylistValues = reader.readArray(reader1 -> reader1.getString());
                    deserializedDenylistCustomAlertRule.denylistValues = denylistValues;
                } else if ("ruleType".equals(fieldName)) {
                    deserializedDenylistCustomAlertRule.ruleType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDenylistCustomAlertRule;
        });
    }
}
