// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Contains all Sensor binary downloads. */
@Fluent
public final class PackageDownloadsSensor {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PackageDownloadsSensor.class);

    /*
     * Contains full package downloads
     */
    @JsonProperty(value = "full", access = JsonProperty.Access.WRITE_ONLY)
    private PackageDownloadsSensorFull full;

    /*
     * Sensor upgrade package downloads (on existing installations)
     */
    @JsonProperty(value = "upgrade")
    private List<UpgradePackageDownloadInfo> upgrade;

    /**
     * Get the full property: Contains full package downloads.
     *
     * @return the full value.
     */
    public PackageDownloadsSensorFull full() {
        return this.full;
    }

    /**
     * Get the upgrade property: Sensor upgrade package downloads (on existing installations).
     *
     * @return the upgrade value.
     */
    public List<UpgradePackageDownloadInfo> upgrade() {
        return this.upgrade;
    }

    /**
     * Set the upgrade property: Sensor upgrade package downloads (on existing installations).
     *
     * @param upgrade the upgrade value to set.
     * @return the PackageDownloadsSensor object itself.
     */
    public PackageDownloadsSensor withUpgrade(List<UpgradePackageDownloadInfo> upgrade) {
        this.upgrade = upgrade;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (full() != null) {
            full().validate();
        }
        if (upgrade() != null) {
            upgrade().forEach(e -> e.validate());
        }
    }
}
