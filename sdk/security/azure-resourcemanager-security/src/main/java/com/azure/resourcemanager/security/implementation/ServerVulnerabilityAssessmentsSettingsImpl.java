// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.ServerVulnerabilityAssessmentsSettingsClient;
import com.azure.resourcemanager.security.fluent.models.ServerVulnerabilityAssessmentsSettingInner;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessmentsSetting;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessmentsSettingKindName;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessmentsSettings;

public final class ServerVulnerabilityAssessmentsSettingsImpl implements ServerVulnerabilityAssessmentsSettings {
    private static final ClientLogger LOGGER = new ClientLogger(ServerVulnerabilityAssessmentsSettingsImpl.class);

    private final ServerVulnerabilityAssessmentsSettingsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public ServerVulnerabilityAssessmentsSettingsImpl(ServerVulnerabilityAssessmentsSettingsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ServerVulnerabilityAssessmentsSetting> list() {
        PagedIterable<ServerVulnerabilityAssessmentsSettingInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ServerVulnerabilityAssessmentsSettingImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerVulnerabilityAssessmentsSetting> list(Context context) {
        PagedIterable<ServerVulnerabilityAssessmentsSettingInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ServerVulnerabilityAssessmentsSettingImpl(inner1, this.manager()));
    }

    public Response<ServerVulnerabilityAssessmentsSetting>
        getWithResponse(ServerVulnerabilityAssessmentsSettingKindName settingKind, Context context) {
        Response<ServerVulnerabilityAssessmentsSettingInner> inner
            = this.serviceClient().getWithResponse(settingKind, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ServerVulnerabilityAssessmentsSettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerVulnerabilityAssessmentsSetting get(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        ServerVulnerabilityAssessmentsSettingInner inner = this.serviceClient().get(settingKind);
        if (inner != null) {
            return new ServerVulnerabilityAssessmentsSettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerVulnerabilityAssessmentsSetting> createOrUpdateWithResponse(
        ServerVulnerabilityAssessmentsSettingKindName settingKind,
        ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting, Context context) {
        Response<ServerVulnerabilityAssessmentsSettingInner> inner = this.serviceClient()
            .createOrUpdateWithResponse(settingKind, serverVulnerabilityAssessmentsSetting, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ServerVulnerabilityAssessmentsSettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerVulnerabilityAssessmentsSetting createOrUpdate(
        ServerVulnerabilityAssessmentsSettingKindName settingKind,
        ServerVulnerabilityAssessmentsSettingInner serverVulnerabilityAssessmentsSetting) {
        ServerVulnerabilityAssessmentsSettingInner inner
            = this.serviceClient().createOrUpdate(settingKind, serverVulnerabilityAssessmentsSetting);
        if (inner != null) {
            return new ServerVulnerabilityAssessmentsSettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(ServerVulnerabilityAssessmentsSettingKindName settingKind,
        Context context) {
        return this.serviceClient().deleteWithResponse(settingKind, context);
    }

    public void delete(ServerVulnerabilityAssessmentsSettingKindName settingKind) {
        this.serviceClient().delete(settingKind);
    }

    private ServerVulnerabilityAssessmentsSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
