// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * CVE details.
 */
@Immutable
public final class Cve implements JsonSerializable<Cve> {
    /*
     * CVE title
     */
    private String title;

    /*
     * Link url
     */
    private String link;

    /**
     * Creates an instance of Cve class.
     */
    public Cve() {
    }

    /**
     * Get the title property: CVE title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the link property: Link url.
     * 
     * @return the link value.
     */
    public String link() {
        return this.link;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cve from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cve if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Cve.
     */
    public static Cve fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cve deserializedCve = new Cve();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedCve.title = reader.getString();
                } else if ("link".equals(fieldName)) {
                    deserializedCve.link = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCve;
        });
    }
}
