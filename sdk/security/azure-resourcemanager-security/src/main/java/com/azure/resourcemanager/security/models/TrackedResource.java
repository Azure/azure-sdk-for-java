// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Describes an Azure tracked resource.
 */
@Fluent
public final class TrackedResource extends ProxyResource {
    /*
     * Location where the resource is stored
     */
    private String location;

    /*
     * Kind of the resource
     */
    private String kind;

    /*
     * Entity tag is used for comparing two or more entities from the same requested resource.
     */
    private String etag;

    /*
     * A list of key value pairs that describe the resource.
     */
    private Map<String, String> tags;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of TrackedResource class.
     */
    public TrackedResource() {
    }

    /**
     * Get the location property: Location where the resource is stored.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Location where the resource is stored.
     * 
     * @param location the location value to set.
     * @return the TrackedResource object itself.
     */
    public TrackedResource withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the kind property: Kind of the resource.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of the resource.
     * 
     * @param kind the kind value to set.
     * @return the TrackedResource object itself.
     */
    public TrackedResource withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the etag property: Entity tag is used for comparing two or more entities from the same requested resource.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: Entity tag is used for comparing two or more entities from the same requested resource.
     * 
     * @param etag the etag value to set.
     * @return the TrackedResource object itself.
     */
    public TrackedResource withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the tags property: A list of key value pairs that describe the resource.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: A list of key value pairs that describe the resource.
     * 
     * @param tags the tags value to set.
     * @return the TrackedResource object itself.
     */
    public TrackedResource withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("etag", this.etag);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrackedResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrackedResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrackedResource.
     */
    public static TrackedResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrackedResource deserializedTrackedResource = new TrackedResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTrackedResource.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedTrackedResource.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTrackedResource.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedTrackedResource.location = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedTrackedResource.kind = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedTrackedResource.etag = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedTrackedResource.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTrackedResource;
        });
    }
}
