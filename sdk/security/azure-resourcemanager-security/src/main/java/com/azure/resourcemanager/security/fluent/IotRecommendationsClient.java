// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.IotRecommendationModelInner;

/** An instance of this class provides access to all the operations defined in IotRecommendationsClient. */
public interface IotRecommendationsClient {
    /**
     * List IoT recommendations.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT recommendations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IotRecommendationModelInner> list(String scope);

    /**
     * List IoT recommendations.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param recommendationType Filter by recommendation type.
     * @param deviceId Filter by device id.
     * @param limit Limit the number of items returned in a single page.
     * @param skipToken Skip token used for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT recommendations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<IotRecommendationModelInner> list(
        String scope, String recommendationType, String deviceId, Integer limit, String skipToken, Context context);

    /**
     * Get IoT recommendation.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param iotRecommendationId Id of the recommendation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT recommendation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IotRecommendationModelInner get(String scope, String iotRecommendationId);

    /**
     * Get IoT recommendation.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param iotRecommendationId Id of the recommendation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT recommendation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IotRecommendationModelInner> getWithResponse(String scope, String iotRecommendationId, Context context);
}
