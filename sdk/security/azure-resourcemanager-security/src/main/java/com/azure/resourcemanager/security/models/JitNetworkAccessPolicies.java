// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.JitNetworkAccessPolicyInner;

/** Resource collection API of JitNetworkAccessPolicies. */
public interface JitNetworkAccessPolicies {
    /**
     * Policies for protecting resources using Just-in-Time access control.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> list();

    /**
     * Policies for protecting resources using Just-in-Time access control.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> list(Context context);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> listByRegion(String ascLocation);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> listByRegion(String ascLocation, Context context);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> listByResourceGroup(String resourceGroupName);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> listByResourceGroupAndRegion(String resourceGroupName, String ascLocation);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    PagedIterable<JitNetworkAccessPolicy> listByResourceGroupAndRegion(
        String resourceGroupName, String ascLocation, Context context);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    JitNetworkAccessPolicy get(String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName);

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<JitNetworkAccessPolicy> getWithResponse(
        String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, Context context);

    /**
     * Create a policy for protecting resources using Just-in-Time access control.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    JitNetworkAccessPolicy createOrUpdate(
        String resourceGroupName,
        String ascLocation,
        String jitNetworkAccessPolicyName,
        JitNetworkAccessPolicyInner body);

    /**
     * Create a policy for protecting resources using Just-in-Time access control.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<JitNetworkAccessPolicy> createOrUpdateWithResponse(
        String resourceGroupName,
        String ascLocation,
        String jitNetworkAccessPolicyName,
        JitNetworkAccessPolicyInner body,
        Context context);

    /**
     * Delete a Just-in-Time access control policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName);

    /**
     * Delete a Just-in-Time access control policy.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteWithResponse(
        String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, Context context);

    /**
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    JitNetworkAccessRequest initiate(
        String resourceGroupName,
        String ascLocation,
        String jitNetworkAccessPolicyName,
        JitNetworkAccessPolicyInitiateRequest body);

    /**
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is case
     *     insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get
     *     locations.
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<JitNetworkAccessRequest> initiateWithResponse(
        String resourceGroupName,
        String ascLocation,
        String jitNetworkAccessPolicyName,
        JitNetworkAccessPolicyInitiateRequest body,
        Context context);
}
