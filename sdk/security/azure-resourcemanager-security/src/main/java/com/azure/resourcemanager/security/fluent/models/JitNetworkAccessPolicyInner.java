// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.Kind;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The JitNetworkAccessPolicy model. */
@JsonFlatten
@Fluent
public class JitNetworkAccessPolicyInner extends Kind {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JitNetworkAccessPolicyInner.class);

    /*
     * Configurations for Microsoft.Compute/virtualMachines resource type.
     */
    @JsonProperty(value = "properties.virtualMachines", required = true)
    private List<JitNetworkAccessPolicyVirtualMachine> virtualMachines;

    /*
     * The requests property.
     */
    @JsonProperty(value = "properties.requests")
    private List<JitNetworkAccessRequestInner> requests;

    /*
     * Gets the provisioning state of the Just-in-Time policy.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * Location where the resource is stored
     */
    @JsonProperty(value = "location", access = JsonProperty.Access.WRITE_ONLY)
    private String location;

    /**
     * Get the virtualMachines property: Configurations for Microsoft.Compute/virtualMachines resource type.
     *
     * @return the virtualMachines value.
     */
    public List<JitNetworkAccessPolicyVirtualMachine> virtualMachines() {
        return this.virtualMachines;
    }

    /**
     * Set the virtualMachines property: Configurations for Microsoft.Compute/virtualMachines resource type.
     *
     * @param virtualMachines the virtualMachines value to set.
     * @return the JitNetworkAccessPolicyInner object itself.
     */
    public JitNetworkAccessPolicyInner withVirtualMachines(List<JitNetworkAccessPolicyVirtualMachine> virtualMachines) {
        this.virtualMachines = virtualMachines;
        return this;
    }

    /**
     * Get the requests property: The requests property.
     *
     * @return the requests value.
     */
    public List<JitNetworkAccessRequestInner> requests() {
        return this.requests;
    }

    /**
     * Set the requests property: The requests property.
     *
     * @param requests the requests value to set.
     * @return the JitNetworkAccessPolicyInner object itself.
     */
    public JitNetworkAccessPolicyInner withRequests(List<JitNetworkAccessRequestInner> requests) {
        this.requests = requests;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state of the Just-in-Time policy.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the location property: Location where the resource is stored.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /** {@inheritDoc} */
    @Override
    public JitNetworkAccessPolicyInner withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (virtualMachines() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property virtualMachines in model JitNetworkAccessPolicyInner"));
        } else {
            virtualMachines().forEach(e -> e.validate());
        }
        if (requests() != null) {
            requests().forEach(e -> e.validate());
        }
    }
}
