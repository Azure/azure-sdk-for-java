// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.IotSitesClient;
import com.azure.resourcemanager.security.fluent.models.IotSitesListInner;
import com.azure.resourcemanager.security.fluent.models.IotSitesModelInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in IotSitesClient. */
public final class IotSitesClientImpl implements IotSitesClient {
    private final ClientLogger logger = new ClientLogger(IotSitesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final IotSitesService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of IotSitesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    IotSitesClientImpl(SecurityCenterImpl client) {
        this.service = RestProxy.create(IotSitesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterIotSites to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterIotSit")
    private interface IotSitesService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/iotSites")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotSitesListInner>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/iotSites/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotSitesModelInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.Security/iotSites/default")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotSitesModelInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @BodyParam("application/json") IotSitesModelInner iotSitesModel,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.Security/iotSites/default")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List IoT sites.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSitesListInner>> listWithResponseAsync(String scope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), apiVersion, scope, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List IoT sites.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSitesListInner>> listWithResponseAsync(String scope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), apiVersion, scope, accept, context);
    }

    /**
     * List IoT sites.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IotSitesListInner> listAsync(String scope) {
        return listWithResponseAsync(scope)
            .flatMap(
                (Response<IotSitesListInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * List IoT sites.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IotSitesListInner list(String scope) {
        return listAsync(scope).block();
    }

    /**
     * List IoT sites.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT sites.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IotSitesListInner> listWithResponse(String scope, Context context) {
        return listWithResponseAsync(scope, context).block();
    }

    /**
     * Get IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSitesModelInner>> getWithResponseAsync(String scope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), apiVersion, scope, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSitesModelInner>> getWithResponseAsync(String scope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), apiVersion, scope, accept, context);
    }

    /**
     * Get IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IotSitesModelInner> getAsync(String scope) {
        return getWithResponseAsync(scope)
            .flatMap(
                (Response<IotSitesModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IotSitesModelInner get(String scope) {
        return getAsync(scope).block();
    }

    /**
     * Get IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IotSitesModelInner> getWithResponse(String scope, Context context) {
        return getWithResponseAsync(scope, context).block();
    }

    /**
     * Create or update IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSitesModel The IoT sites model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSitesModelInner>> createOrUpdateWithResponseAsync(
        String scope, IotSitesModelInner iotSitesModel) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSitesModel == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSitesModel is required and cannot be null."));
        } else {
            iotSitesModel.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(this.client.getEndpoint(), apiVersion, scope, iotSitesModel, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSitesModel The IoT sites model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotSitesModelInner>> createOrUpdateWithResponseAsync(
        String scope, IotSitesModelInner iotSitesModel, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotSitesModel == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotSitesModel is required and cannot be null."));
        } else {
            iotSitesModel.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), apiVersion, scope, iotSitesModel, accept, context);
    }

    /**
     * Create or update IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSitesModel The IoT sites model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IotSitesModelInner> createOrUpdateAsync(String scope, IotSitesModelInner iotSitesModel) {
        return createOrUpdateWithResponseAsync(scope, iotSitesModel)
            .flatMap(
                (Response<IotSitesModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create or update IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSitesModel The IoT sites model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IotSitesModelInner createOrUpdate(String scope, IotSitesModelInner iotSitesModel) {
        return createOrUpdateAsync(scope, iotSitesModel).block();
    }

    /**
     * Create or update IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param iotSitesModel The IoT sites model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT site model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IotSitesModelInner> createOrUpdateWithResponse(
        String scope, IotSitesModelInner iotSitesModel, Context context) {
        return createOrUpdateWithResponseAsync(scope, iotSitesModel, context).block();
    }

    /**
     * Delete IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String scope) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), apiVersion, scope, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String scope, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), apiVersion, scope, accept, context);
    }

    /**
     * Delete IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope) {
        return deleteWithResponseAsync(scope).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope) {
        deleteAsync(scope).block();
    }

    /**
     * Delete IoT site.
     *
     * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String scope, Context context) {
        return deleteWithResponseAsync(scope, context).block();
    }
}
