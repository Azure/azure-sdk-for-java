// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.IotSensorsModelInner;
import com.azure.resourcemanager.security.models.IotSensorsModel;
import com.azure.resourcemanager.security.models.ResetPasswordInput;
import com.azure.resourcemanager.security.models.SensorStatus;
import com.azure.resourcemanager.security.models.SensorType;
import com.azure.resourcemanager.security.models.TiStatus;
import java.io.InputStream;

public final class IotSensorsModelImpl implements IotSensorsModel, IotSensorsModel.Definition, IotSensorsModel.Update {
    private IotSensorsModelInner innerObject;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String connectivityTime() {
        return this.innerModel().connectivityTime();
    }

    public String creationTime() {
        return this.innerModel().creationTime();
    }

    public Boolean dynamicLearning() {
        return this.innerModel().dynamicLearning();
    }

    public Boolean learningMode() {
        return this.innerModel().learningMode();
    }

    public SensorStatus sensorStatus() {
        return this.innerModel().sensorStatus();
    }

    public String sensorVersion() {
        return this.innerModel().sensorVersion();
    }

    public Boolean tiAutomaticUpdates() {
        return this.innerModel().tiAutomaticUpdates();
    }

    public TiStatus tiStatus() {
        return this.innerModel().tiStatus();
    }

    public String tiVersion() {
        return this.innerModel().tiVersion();
    }

    public String zone() {
        return this.innerModel().zone();
    }

    public SensorType sensorType() {
        return this.innerModel().sensorType();
    }

    public IotSensorsModelInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    private String scope;

    private String iotSensorName;

    public IotSensorsModelImpl withExistingScope(String scope) {
        this.scope = scope;
        return this;
    }

    public IotSensorsModel create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIotSensors()
                .createOrUpdateWithResponse(scope, iotSensorName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IotSensorsModel create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIotSensors()
                .createOrUpdateWithResponse(scope, iotSensorName, this.innerModel(), context)
                .getValue();
        return this;
    }

    IotSensorsModelImpl(String name, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerObject = new IotSensorsModelInner();
        this.serviceManager = serviceManager;
        this.iotSensorName = name;
    }

    public IotSensorsModelImpl update() {
        return this;
    }

    public IotSensorsModel apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIotSensors()
                .createOrUpdateWithResponse(scope, iotSensorName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public IotSensorsModel apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIotSensors()
                .createOrUpdateWithResponse(scope, iotSensorName, this.innerModel(), context)
                .getValue();
        return this;
    }

    IotSensorsModelImpl(
        IotSensorsModelInner innerObject, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.scope =
            Utils
                .getValueFromIdByParameterName(
                    innerObject.id(), "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}", "scope");
        this.iotSensorName =
            Utils
                .getValueFromIdByParameterName(
                    innerObject.id(),
                    "/{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}",
                    "iotSensorName");
    }

    public IotSensorsModel refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIotSensors()
                .getWithResponse(scope, iotSensorName, Context.NONE)
                .getValue();
        return this;
    }

    public IotSensorsModel refresh(Context context) {
        this.innerObject =
            serviceManager.serviceClient().getIotSensors().getWithResponse(scope, iotSensorName, context).getValue();
        return this;
    }

    public InputStream downloadActivation() {
        return serviceManager.iotSensors().downloadActivation(scope, iotSensorName);
    }

    public StreamResponse downloadActivationWithResponse(Context context) {
        return serviceManager.iotSensors().downloadActivationWithResponse(scope, iotSensorName, context);
    }

    public InputStream downloadResetPassword(ResetPasswordInput body) {
        return serviceManager.iotSensors().downloadResetPassword(scope, iotSensorName, body);
    }

    public StreamResponse downloadResetPasswordWithResponse(ResetPasswordInput body, Context context) {
        return serviceManager.iotSensors().downloadResetPasswordWithResponse(scope, iotSensorName, body, context);
    }

    public void triggerTiPackageUpdate() {
        serviceManager.iotSensors().triggerTiPackageUpdate(scope, iotSensorName);
    }

    public Response<Void> triggerTiPackageUpdateWithResponse(Context context) {
        return serviceManager.iotSensors().triggerTiPackageUpdateWithResponse(scope, iotSensorName, context);
    }

    public IotSensorsModelImpl withTiAutomaticUpdates(Boolean tiAutomaticUpdates) {
        this.innerModel().withTiAutomaticUpdates(tiAutomaticUpdates);
        return this;
    }

    public IotSensorsModelImpl withZone(String zone) {
        this.innerModel().withZone(zone);
        return this;
    }

    public IotSensorsModelImpl withSensorType(SensorType sensorType) {
        this.innerModel().withSensorType(sensorType);
        return this;
    }
}
