// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.OnPremiseIotSensorsClient;
import com.azure.resourcemanager.security.fluent.models.OnPremiseIotSensorInner;
import com.azure.resourcemanager.security.fluent.models.OnPremiseIotSensorsListInner;
import com.azure.resourcemanager.security.models.ResetPasswordInput;
import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Iterator;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in OnPremiseIotSensorsClient. */
public final class OnPremiseIotSensorsClientImpl implements OnPremiseIotSensorsClient {
    private final ClientLogger logger = new ClientLogger(OnPremiseIotSensorsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final OnPremiseIotSensorsService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of OnPremiseIotSensorsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    OnPremiseIotSensorsClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy.create(OnPremiseIotSensorsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterOnPremiseIotSensors to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterOnPrem")
    private interface OnPremiseIotSensorsService {
        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Security/onPremiseIotSensors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OnPremiseIotSensorsListInner>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/providers/Microsoft.Security/onPremiseIotSensors/{onPremiseIotSensorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OnPremiseIotSensorInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("onPremiseIotSensorName") String onPremiseIotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/providers/Microsoft.Security/onPremiseIotSensors/{onPremiseIotSensorName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OnPremiseIotSensorInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("onPremiseIotSensorName") String onPremiseIotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/providers/Microsoft.Security/onPremiseIotSensors/{onPremiseIotSensorName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("onPremiseIotSensorName") String onPremiseIotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/Microsoft.Security/onPremiseIotSensors/{onPremiseIotSensorName}"
                + "/downloadActivation")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> downloadActivation(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("onPremiseIotSensorName") String onPremiseIotSensorName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/Microsoft.Security/onPremiseIotSensors/{onPremiseIotSensorName}"
                + "/downloadResetPassword")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<StreamResponse> downloadResetPassword(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("onPremiseIotSensorName") String onPremiseIotSensorName,
            @BodyParam("application/json") ResetPasswordInput body,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List on-premise IoT sensors.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of on-premise IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OnPremiseIotSensorsListInner>> listWithResponseAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List on-premise IoT sensors.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of on-premise IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OnPremiseIotSensorsListInner>> listWithResponseAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), apiVersion, this.client.getSubscriptionId(), accept, context);
    }

    /**
     * List on-premise IoT sensors.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of on-premise IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OnPremiseIotSensorsListInner> listAsync() {
        return listWithResponseAsync()
            .flatMap(
                (Response<OnPremiseIotSensorsListInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * List on-premise IoT sensors.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of on-premise IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OnPremiseIotSensorsListInner list() {
        return listAsync().block();
    }

    /**
     * List on-premise IoT sensors.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of on-premise IoT sensors.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OnPremiseIotSensorsListInner> listWithResponse(Context context) {
        return listWithResponseAsync(context).block();
    }

    /**
     * Get on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OnPremiseIotSensorInner>> getWithResponseAsync(String onPremiseIotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            onPremiseIotSensorName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OnPremiseIotSensorInner>> getWithResponseAsync(
        String onPremiseIotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                onPremiseIotSensorName,
                accept,
                context);
    }

    /**
     * Get on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OnPremiseIotSensorInner> getAsync(String onPremiseIotSensorName) {
        return getWithResponseAsync(onPremiseIotSensorName)
            .flatMap(
                (Response<OnPremiseIotSensorInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OnPremiseIotSensorInner get(String onPremiseIotSensorName) {
        return getAsync(onPremiseIotSensorName).block();
    }

    /**
     * Get on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OnPremiseIotSensorInner> getWithResponse(String onPremiseIotSensorName, Context context) {
        return getWithResponseAsync(onPremiseIotSensorName, context).block();
    }

    /**
     * Create or update on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OnPremiseIotSensorInner>> createOrUpdateWithResponseAsync(String onPremiseIotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            onPremiseIotSensorName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OnPremiseIotSensorInner>> createOrUpdateWithResponseAsync(
        String onPremiseIotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                onPremiseIotSensorName,
                accept,
                context);
    }

    /**
     * Create or update on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OnPremiseIotSensorInner> createOrUpdateAsync(String onPremiseIotSensorName) {
        return createOrUpdateWithResponseAsync(onPremiseIotSensorName)
            .flatMap(
                (Response<OnPremiseIotSensorInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create or update on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OnPremiseIotSensorInner createOrUpdate(String onPremiseIotSensorName) {
        return createOrUpdateAsync(onPremiseIotSensorName).block();
    }

    /**
     * Create or update on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return on-premise IoT sensor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OnPremiseIotSensorInner> createOrUpdateWithResponse(
        String onPremiseIotSensorName, Context context) {
        return createOrUpdateWithResponseAsync(onPremiseIotSensorName, context).block();
    }

    /**
     * Delete on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String onPremiseIotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            onPremiseIotSensorName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String onPremiseIotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                onPremiseIotSensorName,
                accept,
                context);
    }

    /**
     * Delete on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String onPremiseIotSensorName) {
        return deleteWithResponseAsync(onPremiseIotSensorName).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String onPremiseIotSensorName) {
        deleteAsync(onPremiseIotSensorName).block();
    }

    /**
     * Delete on-premise IoT sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String onPremiseIotSensorName, Context context) {
        return deleteWithResponseAsync(onPremiseIotSensorName, context).block();
    }

    /**
     * Download sensor activation file.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadActivationWithResponseAsync(String onPremiseIotSensorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .downloadActivation(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            onPremiseIotSensorName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Download sensor activation file.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadActivationWithResponseAsync(String onPremiseIotSensorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        context = this.client.mergeContext(context);
        return service
            .downloadActivation(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                onPremiseIotSensorName,
                accept,
                context);
    }

    /**
     * Download sensor activation file.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> downloadActivationAsync(String onPremiseIotSensorName) {
        return downloadActivationWithResponseAsync(onPremiseIotSensorName).flatMapMany(StreamResponse::getValue);
    }

    /**
     * Download sensor activation file.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream downloadActivation(String onPremiseIotSensorName) {
        Iterator<ByteBufferBackedInputStream> iterator =
            downloadActivationAsync(onPremiseIotSensorName).map(ByteBufferBackedInputStream::new).toStream().iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * Download sensor activation file.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse downloadActivationWithResponse(String onPremiseIotSensorName, Context context) {
        return downloadActivationWithResponseAsync(onPremiseIotSensorName, context).block();
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param body Input for reset password.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadResetPasswordWithResponseAsync(
        String onPremiseIotSensorName, ResetPasswordInput body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .downloadResetPassword(
                            this.client.getEndpoint(),
                            apiVersion,
                            this.client.getSubscriptionId(),
                            onPremiseIotSensorName,
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param body Input for reset password.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StreamResponse> downloadResetPasswordWithResponseAsync(
        String onPremiseIotSensorName, ResetPasswordInput body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (onPremiseIotSensorName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter onPremiseIotSensorName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/zip";
        context = this.client.mergeContext(context);
        return service
            .downloadResetPassword(
                this.client.getEndpoint(),
                apiVersion,
                this.client.getSubscriptionId(),
                onPremiseIotSensorName,
                body,
                accept,
                context);
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param body Input for reset password.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Flux<ByteBuffer> downloadResetPasswordAsync(String onPremiseIotSensorName, ResetPasswordInput body) {
        return downloadResetPasswordWithResponseAsync(onPremiseIotSensorName, body)
            .flatMapMany(StreamResponse::getValue);
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param body Input for reset password.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream downloadResetPassword(String onPremiseIotSensorName, ResetPasswordInput body) {
        Iterator<ByteBufferBackedInputStream> iterator =
            downloadResetPasswordAsync(onPremiseIotSensorName, body)
                .map(ByteBufferBackedInputStream::new)
                .toStream()
                .iterator();
        Enumeration<InputStream> enumeration =
            new Enumeration<InputStream>() {
                @Override
                public boolean hasMoreElements() {
                    return iterator.hasNext();
                }

                @Override
                public InputStream nextElement() {
                    return iterator.next();
                }
            };
        return new SequenceInputStream(enumeration);
    }

    /**
     * Download file for reset password of the sensor.
     *
     * @param onPremiseIotSensorName Name of the on-premise IoT sensor.
     * @param body Input for reset password.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse downloadResetPasswordWithResponse(
        String onPremiseIotSensorName, ResetPasswordInput body, Context context) {
        return downloadResetPasswordWithResponseAsync(onPremiseIotSensorName, body, context).block();
    }
}
