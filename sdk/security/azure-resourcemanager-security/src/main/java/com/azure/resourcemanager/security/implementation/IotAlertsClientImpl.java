// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.IotAlertsClient;
import com.azure.resourcemanager.security.fluent.models.IotAlertModelInner;
import com.azure.resourcemanager.security.models.IotAlertListModel;
import com.azure.resourcemanager.security.models.ManagementState;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in IotAlertsClient. */
public final class IotAlertsClientImpl implements IotAlertsClient {
    private final ClientLogger logger = new ClientLogger(IotAlertsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final IotAlertsService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of IotAlertsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    IotAlertsClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy.create(IotAlertsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterIotAlerts to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterIotAle")
    private interface IotAlertsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/iotAlerts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotAlertListModel>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @QueryParam("startTimeUtc>") String minStartTimeUtc,
            @QueryParam("startTimeUtc<") String maxStartTimeUtc,
            @QueryParam("alertType") String alertType,
            @QueryParam("deviceManagementType") ManagementState deviceManagementType,
            @QueryParam("compromisedEntity") String compromisedEntity,
            @QueryParam("$limit") Integer limit,
            @QueryParam("$skipToken") String skipToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.Security/iotAlerts/{iotAlertId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotAlertModelInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("iotAlertId") String iotAlertId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<IotAlertListModel>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * List IoT alerts.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param minStartTimeUtc Filter by minimum startTimeUtc (ISO 8601 format).
     * @param maxStartTimeUtc Filter by maximum startTimeUtc (ISO 8601 format).
     * @param alertType Filter by alert type.
     * @param deviceManagementType Get devices only from specific type, Managed or Unmanaged.
     * @param compromisedEntity Filter by compromised device.
     * @param limit Limit the number of items returned in a single page.
     * @param skipToken Skip token used for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IotAlertModelInner>> listSinglePageAsync(
        String scope,
        String minStartTimeUtc,
        String maxStartTimeUtc,
        String alertType,
        ManagementState deviceManagementType,
        String compromisedEntity,
        Integer limit,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            apiVersion,
                            scope,
                            minStartTimeUtc,
                            maxStartTimeUtc,
                            alertType,
                            deviceManagementType,
                            compromisedEntity,
                            limit,
                            skipToken,
                            accept,
                            context))
            .<PagedResponse<IotAlertModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List IoT alerts.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param minStartTimeUtc Filter by minimum startTimeUtc (ISO 8601 format).
     * @param maxStartTimeUtc Filter by maximum startTimeUtc (ISO 8601 format).
     * @param alertType Filter by alert type.
     * @param deviceManagementType Get devices only from specific type, Managed or Unmanaged.
     * @param compromisedEntity Filter by compromised device.
     * @param limit Limit the number of items returned in a single page.
     * @param skipToken Skip token used for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IotAlertModelInner>> listSinglePageAsync(
        String scope,
        String minStartTimeUtc,
        String maxStartTimeUtc,
        String alertType,
        ManagementState deviceManagementType,
        String compromisedEntity,
        Integer limit,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                apiVersion,
                scope,
                minStartTimeUtc,
                maxStartTimeUtc,
                alertType,
                deviceManagementType,
                compromisedEntity,
                limit,
                skipToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List IoT alerts.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param minStartTimeUtc Filter by minimum startTimeUtc (ISO 8601 format).
     * @param maxStartTimeUtc Filter by maximum startTimeUtc (ISO 8601 format).
     * @param alertType Filter by alert type.
     * @param deviceManagementType Get devices only from specific type, Managed or Unmanaged.
     * @param compromisedEntity Filter by compromised device.
     * @param limit Limit the number of items returned in a single page.
     * @param skipToken Skip token used for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<IotAlertModelInner> listAsync(
        String scope,
        String minStartTimeUtc,
        String maxStartTimeUtc,
        String alertType,
        ManagementState deviceManagementType,
        String compromisedEntity,
        Integer limit,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    scope,
                    minStartTimeUtc,
                    maxStartTimeUtc,
                    alertType,
                    deviceManagementType,
                    compromisedEntity,
                    limit,
                    skipToken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List IoT alerts.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<IotAlertModelInner> listAsync(String scope) {
        final String minStartTimeUtc = null;
        final String maxStartTimeUtc = null;
        final String alertType = null;
        final ManagementState deviceManagementType = null;
        final String compromisedEntity = null;
        final Integer limit = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    scope,
                    minStartTimeUtc,
                    maxStartTimeUtc,
                    alertType,
                    deviceManagementType,
                    compromisedEntity,
                    limit,
                    skipToken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List IoT alerts.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param minStartTimeUtc Filter by minimum startTimeUtc (ISO 8601 format).
     * @param maxStartTimeUtc Filter by maximum startTimeUtc (ISO 8601 format).
     * @param alertType Filter by alert type.
     * @param deviceManagementType Get devices only from specific type, Managed or Unmanaged.
     * @param compromisedEntity Filter by compromised device.
     * @param limit Limit the number of items returned in a single page.
     * @param skipToken Skip token used for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<IotAlertModelInner> listAsync(
        String scope,
        String minStartTimeUtc,
        String maxStartTimeUtc,
        String alertType,
        ManagementState deviceManagementType,
        String compromisedEntity,
        Integer limit,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    scope,
                    minStartTimeUtc,
                    maxStartTimeUtc,
                    alertType,
                    deviceManagementType,
                    compromisedEntity,
                    limit,
                    skipToken,
                    context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List IoT alerts.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IotAlertModelInner> list(String scope) {
        final String minStartTimeUtc = null;
        final String maxStartTimeUtc = null;
        final String alertType = null;
        final ManagementState deviceManagementType = null;
        final String compromisedEntity = null;
        final Integer limit = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listAsync(
                scope,
                minStartTimeUtc,
                maxStartTimeUtc,
                alertType,
                deviceManagementType,
                compromisedEntity,
                limit,
                skipToken));
    }

    /**
     * List IoT alerts.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param minStartTimeUtc Filter by minimum startTimeUtc (ISO 8601 format).
     * @param maxStartTimeUtc Filter by maximum startTimeUtc (ISO 8601 format).
     * @param alertType Filter by alert type.
     * @param deviceManagementType Get devices only from specific type, Managed or Unmanaged.
     * @param compromisedEntity Filter by compromised device.
     * @param limit Limit the number of items returned in a single page.
     * @param skipToken Skip token used for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IotAlertModelInner> list(
        String scope,
        String minStartTimeUtc,
        String maxStartTimeUtc,
        String alertType,
        ManagementState deviceManagementType,
        String compromisedEntity,
        Integer limit,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listAsync(
                scope,
                minStartTimeUtc,
                maxStartTimeUtc,
                alertType,
                deviceManagementType,
                compromisedEntity,
                limit,
                skipToken,
                context));
    }

    /**
     * Get IoT alert.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param iotAlertId Id of the alert.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT alert.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotAlertModelInner>> getWithResponseAsync(String scope, String iotAlertId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotAlertId == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotAlertId is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), apiVersion, scope, iotAlertId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get IoT alert.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param iotAlertId Id of the alert.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT alert.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<IotAlertModelInner>> getWithResponseAsync(String scope, String iotAlertId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (iotAlertId == null) {
            return Mono.error(new IllegalArgumentException("Parameter iotAlertId is required and cannot be null."));
        }
        final String apiVersion = "2020-08-06-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), apiVersion, scope, iotAlertId, accept, context);
    }

    /**
     * Get IoT alert.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param iotAlertId Id of the alert.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT alert.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<IotAlertModelInner> getAsync(String scope, String iotAlertId) {
        return getWithResponseAsync(scope, iotAlertId)
            .flatMap(
                (Response<IotAlertModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get IoT alert.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param iotAlertId Id of the alert.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT alert.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IotAlertModelInner get(String scope, String iotAlertId) {
        return getAsync(scope, iotAlertId).block();
    }

    /**
     * Get IoT alert.
     *
     * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub (i.e.
     *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName}).
     * @param iotAlertId Id of the alert.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return ioT alert.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<IotAlertModelInner> getWithResponse(String scope, String iotAlertId, Context context) {
        return getWithResponseAsync(scope, iotAlertId, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IotAlertModelInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<IotAlertModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of IoT alerts.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<IotAlertModelInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
