// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.StandardAssignmentsClient;
import com.azure.resourcemanager.security.fluent.models.StandardAssignmentInner;
import com.azure.resourcemanager.security.models.StandardAssignment;
import com.azure.resourcemanager.security.models.StandardAssignments;

public final class StandardAssignmentsImpl implements StandardAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(StandardAssignmentsImpl.class);

    private final StandardAssignmentsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public StandardAssignmentsImpl(StandardAssignmentsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<StandardAssignment> getWithResponse(String resourceId, String standardAssignmentName,
        Context context) {
        Response<StandardAssignmentInner> inner
            = this.serviceClient().getWithResponse(resourceId, standardAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StandardAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StandardAssignment get(String resourceId, String standardAssignmentName) {
        StandardAssignmentInner inner = this.serviceClient().get(resourceId, standardAssignmentName);
        if (inner != null) {
            return new StandardAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceId, String standardAssignmentName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceId, standardAssignmentName, context);
    }

    public void deleteByResourceGroup(String resourceId, String standardAssignmentName) {
        this.serviceClient().delete(resourceId, standardAssignmentName);
    }

    public PagedIterable<StandardAssignment> list(String scope) {
        PagedIterable<StandardAssignmentInner> inner = this.serviceClient().list(scope);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StandardAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<StandardAssignment> list(String scope, Context context) {
        PagedIterable<StandardAssignmentInner> inner = this.serviceClient().list(scope, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StandardAssignmentImpl(inner1, this.manager()));
    }

    public StandardAssignment getById(String id) {
        String resourceId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}", "resourceId");
        if (resourceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceId'.", id)));
        }
        String standardAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}",
            "standardAssignmentName");
        if (standardAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'standardAssignments'.", id)));
        }
        return this.getWithResponse(resourceId, standardAssignmentName, Context.NONE).getValue();
    }

    public Response<StandardAssignment> getByIdWithResponse(String id, Context context) {
        String resourceId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}", "resourceId");
        if (resourceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceId'.", id)));
        }
        String standardAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}",
            "standardAssignmentName");
        if (standardAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'standardAssignments'.", id)));
        }
        return this.getWithResponse(resourceId, standardAssignmentName, context);
    }

    public void deleteById(String id) {
        String resourceId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}", "resourceId");
        if (resourceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceId'.", id)));
        }
        String standardAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}",
            "standardAssignmentName");
        if (standardAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'standardAssignments'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceId, standardAssignmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}", "resourceId");
        if (resourceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceId'.", id)));
        }
        String standardAssignmentName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceId}/providers/Microsoft.Security/standardAssignments/{standardAssignmentName}",
            "standardAssignmentName");
        if (standardAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'standardAssignments'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceId, standardAssignmentName, context);
    }

    private StandardAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public StandardAssignmentImpl define(String name) {
        return new StandardAssignmentImpl(name, this.manager());
    }
}
