// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.SecurityCenter;
import com.azure.resourcemanager.security.implementation.AdaptiveApplicationControlsImpl;
import com.azure.resourcemanager.security.implementation.AdaptiveNetworkHardeningsImpl;
import com.azure.resourcemanager.security.implementation.AdvancedThreatProtectionsImpl;
import com.azure.resourcemanager.security.implementation.AlertsImpl;
import com.azure.resourcemanager.security.implementation.AlertsSuppressionRulesImpl;
import com.azure.resourcemanager.security.implementation.AllowedConnectionsImpl;
import com.azure.resourcemanager.security.implementation.AssessmentsImpl;
import com.azure.resourcemanager.security.implementation.AssessmentsMetadatasImpl;
import com.azure.resourcemanager.security.implementation.AutoProvisioningSettingsImpl;
import com.azure.resourcemanager.security.implementation.AutomationsImpl;
import com.azure.resourcemanager.security.implementation.ComplianceResultsImpl;
import com.azure.resourcemanager.security.implementation.CompliancesImpl;
import com.azure.resourcemanager.security.implementation.ConnectorsImpl;
import com.azure.resourcemanager.security.implementation.DeviceSecurityGroupsImpl;
import com.azure.resourcemanager.security.implementation.DevicesForHubsImpl;
import com.azure.resourcemanager.security.implementation.DevicesForSubscriptionsImpl;
import com.azure.resourcemanager.security.implementation.DevicesImpl;
import com.azure.resourcemanager.security.implementation.DiscoveredSecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.ExternalSecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.InformationProtectionPoliciesImpl;
import com.azure.resourcemanager.security.implementation.IngestionSettingsImpl;
import com.azure.resourcemanager.security.implementation.IotAlertTypesImpl;
import com.azure.resourcemanager.security.implementation.IotAlertsImpl;
import com.azure.resourcemanager.security.implementation.IotDefenderSettingsImpl;
import com.azure.resourcemanager.security.implementation.IotRecommendationTypesImpl;
import com.azure.resourcemanager.security.implementation.IotRecommendationsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionAnalyticsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionsAnalyticsAggregatedAlertsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionsAnalyticsRecommendationsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.IotSensorsImpl;
import com.azure.resourcemanager.security.implementation.IotSitesImpl;
import com.azure.resourcemanager.security.implementation.JitNetworkAccessPoliciesImpl;
import com.azure.resourcemanager.security.implementation.LocationsImpl;
import com.azure.resourcemanager.security.implementation.OnPremiseIotSensorsImpl;
import com.azure.resourcemanager.security.implementation.OperationsImpl;
import com.azure.resourcemanager.security.implementation.PricingsImpl;
import com.azure.resourcemanager.security.implementation.RegulatoryComplianceAssessmentsImpl;
import com.azure.resourcemanager.security.implementation.RegulatoryComplianceControlsImpl;
import com.azure.resourcemanager.security.implementation.RegulatoryComplianceStandardsImpl;
import com.azure.resourcemanager.security.implementation.SecureScoreControlDefinitionsImpl;
import com.azure.resourcemanager.security.implementation.SecureScoreControlsImpl;
import com.azure.resourcemanager.security.implementation.SecureScoresImpl;
import com.azure.resourcemanager.security.implementation.SecurityCenterBuilder;
import com.azure.resourcemanager.security.implementation.SecurityContactsImpl;
import com.azure.resourcemanager.security.implementation.SecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.SecuritySolutionsReferenceDatasImpl;
import com.azure.resourcemanager.security.implementation.ServerVulnerabilityAssessmentsImpl;
import com.azure.resourcemanager.security.implementation.SettingsImpl;
import com.azure.resourcemanager.security.implementation.SoftwareInventoriesImpl;
import com.azure.resourcemanager.security.implementation.SqlVulnerabilityAssessmentBaselineRulesImpl;
import com.azure.resourcemanager.security.implementation.SqlVulnerabilityAssessmentScanResultsImpl;
import com.azure.resourcemanager.security.implementation.SqlVulnerabilityAssessmentScansImpl;
import com.azure.resourcemanager.security.implementation.SubAssessmentsImpl;
import com.azure.resourcemanager.security.implementation.TasksImpl;
import com.azure.resourcemanager.security.implementation.TopologiesImpl;
import com.azure.resourcemanager.security.implementation.WorkspaceSettingsImpl;
import com.azure.resourcemanager.security.models.AdaptiveApplicationControls;
import com.azure.resourcemanager.security.models.AdaptiveNetworkHardenings;
import com.azure.resourcemanager.security.models.AdvancedThreatProtections;
import com.azure.resourcemanager.security.models.Alerts;
import com.azure.resourcemanager.security.models.AlertsSuppressionRules;
import com.azure.resourcemanager.security.models.AllowedConnections;
import com.azure.resourcemanager.security.models.Assessments;
import com.azure.resourcemanager.security.models.AssessmentsMetadatas;
import com.azure.resourcemanager.security.models.AutoProvisioningSettings;
import com.azure.resourcemanager.security.models.Automations;
import com.azure.resourcemanager.security.models.ComplianceResults;
import com.azure.resourcemanager.security.models.Compliances;
import com.azure.resourcemanager.security.models.Connectors;
import com.azure.resourcemanager.security.models.DeviceSecurityGroups;
import com.azure.resourcemanager.security.models.Devices;
import com.azure.resourcemanager.security.models.DevicesForHubs;
import com.azure.resourcemanager.security.models.DevicesForSubscriptions;
import com.azure.resourcemanager.security.models.DiscoveredSecuritySolutions;
import com.azure.resourcemanager.security.models.ExternalSecuritySolutions;
import com.azure.resourcemanager.security.models.InformationProtectionPolicies;
import com.azure.resourcemanager.security.models.IngestionSettings;
import com.azure.resourcemanager.security.models.IotAlertTypes;
import com.azure.resourcemanager.security.models.IotAlerts;
import com.azure.resourcemanager.security.models.IotDefenderSettings;
import com.azure.resourcemanager.security.models.IotRecommendationTypes;
import com.azure.resourcemanager.security.models.IotRecommendations;
import com.azure.resourcemanager.security.models.IotSecuritySolutionAnalytics;
import com.azure.resourcemanager.security.models.IotSecuritySolutions;
import com.azure.resourcemanager.security.models.IotSecuritySolutionsAnalyticsAggregatedAlerts;
import com.azure.resourcemanager.security.models.IotSecuritySolutionsAnalyticsRecommendations;
import com.azure.resourcemanager.security.models.IotSensors;
import com.azure.resourcemanager.security.models.IotSites;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicies;
import com.azure.resourcemanager.security.models.Locations;
import com.azure.resourcemanager.security.models.OnPremiseIotSensors;
import com.azure.resourcemanager.security.models.Operations;
import com.azure.resourcemanager.security.models.Pricings;
import com.azure.resourcemanager.security.models.RegulatoryComplianceAssessments;
import com.azure.resourcemanager.security.models.RegulatoryComplianceControls;
import com.azure.resourcemanager.security.models.RegulatoryComplianceStandards;
import com.azure.resourcemanager.security.models.SecureScoreControlDefinitions;
import com.azure.resourcemanager.security.models.SecureScoreControls;
import com.azure.resourcemanager.security.models.SecureScores;
import com.azure.resourcemanager.security.models.SecurityContacts;
import com.azure.resourcemanager.security.models.SecuritySolutions;
import com.azure.resourcemanager.security.models.SecuritySolutionsReferenceDatas;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessments;
import com.azure.resourcemanager.security.models.Settings;
import com.azure.resourcemanager.security.models.SoftwareInventories;
import com.azure.resourcemanager.security.models.SqlVulnerabilityAssessmentBaselineRules;
import com.azure.resourcemanager.security.models.SqlVulnerabilityAssessmentScanResults;
import com.azure.resourcemanager.security.models.SqlVulnerabilityAssessmentScans;
import com.azure.resourcemanager.security.models.SubAssessments;
import com.azure.resourcemanager.security.models.Tasks;
import com.azure.resourcemanager.security.models.Topologies;
import com.azure.resourcemanager.security.models.WorkspaceSettings;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Entry point to SecurityManager. API spec for Microsoft.Security (Azure Security Center) resource provider. */
public final class SecurityManager {
    private ComplianceResults complianceResults;

    private Pricings pricings;

    private AdvancedThreatProtections advancedThreatProtections;

    private DeviceSecurityGroups deviceSecurityGroups;

    private IotSecuritySolutions iotSecuritySolutions;

    private IotSecuritySolutionAnalytics iotSecuritySolutionAnalytics;

    private IotSecuritySolutionsAnalyticsAggregatedAlerts iotSecuritySolutionsAnalyticsAggregatedAlerts;

    private IotSecuritySolutionsAnalyticsRecommendations iotSecuritySolutionsAnalyticsRecommendations;

    private Locations locations;

    private Operations operations;

    private Tasks tasks;

    private AutoProvisioningSettings autoProvisioningSettings;

    private Compliances compliances;

    private InformationProtectionPolicies informationProtectionPolicies;

    private SecurityContacts securityContacts;

    private WorkspaceSettings workspaceSettings;

    private RegulatoryComplianceStandards regulatoryComplianceStandards;

    private RegulatoryComplianceControls regulatoryComplianceControls;

    private RegulatoryComplianceAssessments regulatoryComplianceAssessments;

    private SubAssessments subAssessments;

    private Automations automations;

    private AlertsSuppressionRules alertsSuppressionRules;

    private ServerVulnerabilityAssessments serverVulnerabilityAssessments;

    private AssessmentsMetadatas assessmentsMetadatas;

    private Assessments assessments;

    private AdaptiveApplicationControls adaptiveApplicationControls;

    private AdaptiveNetworkHardenings adaptiveNetworkHardenings;

    private AllowedConnections allowedConnections;

    private Topologies topologies;

    private JitNetworkAccessPolicies jitNetworkAccessPolicies;

    private DiscoveredSecuritySolutions discoveredSecuritySolutions;

    private SecuritySolutionsReferenceDatas securitySolutionsReferenceDatas;

    private ExternalSecuritySolutions externalSecuritySolutions;

    private SecureScores secureScores;

    private SecureScoreControls secureScoreControls;

    private SecureScoreControlDefinitions secureScoreControlDefinitions;

    private SecuritySolutions securitySolutions;

    private Connectors connectors;

    private SqlVulnerabilityAssessmentScans sqlVulnerabilityAssessmentScans;

    private SqlVulnerabilityAssessmentScanResults sqlVulnerabilityAssessmentScanResults;

    private SqlVulnerabilityAssessmentBaselineRules sqlVulnerabilityAssessmentBaselineRules;

    private IotDefenderSettings iotDefenderSettings;

    private IotSensors iotSensors;

    private DevicesForSubscriptions devicesForSubscriptions;

    private DevicesForHubs devicesForHubs;

    private Devices devices;

    private OnPremiseIotSensors onPremiseIotSensors;

    private IotSites iotSites;

    private IotAlerts iotAlerts;

    private IotAlertTypes iotAlertTypes;

    private IotRecommendations iotRecommendations;

    private IotRecommendationTypes iotRecommendationTypes;

    private Alerts alerts;

    private Settings settings;

    private IngestionSettings ingestionSettings;

    private SoftwareInventories softwareInventories;

    private final SecurityCenter clientObject;

    private SecurityManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new SecurityCenterBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Security service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Security service API instance.
     */
    public static SecurityManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create SecurityManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new SecurityManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Security service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Security service API instance.
         */
        public SecurityManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.security")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies);
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new SecurityManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of ComplianceResults. */
    public ComplianceResults complianceResults() {
        if (this.complianceResults == null) {
            this.complianceResults = new ComplianceResultsImpl(clientObject.getComplianceResults(), this);
        }
        return complianceResults;
    }

    /** @return Resource collection API of Pricings. */
    public Pricings pricings() {
        if (this.pricings == null) {
            this.pricings = new PricingsImpl(clientObject.getPricings(), this);
        }
        return pricings;
    }

    /** @return Resource collection API of AdvancedThreatProtections. */
    public AdvancedThreatProtections advancedThreatProtections() {
        if (this.advancedThreatProtections == null) {
            this.advancedThreatProtections =
                new AdvancedThreatProtectionsImpl(clientObject.getAdvancedThreatProtections(), this);
        }
        return advancedThreatProtections;
    }

    /** @return Resource collection API of DeviceSecurityGroups. */
    public DeviceSecurityGroups deviceSecurityGroups() {
        if (this.deviceSecurityGroups == null) {
            this.deviceSecurityGroups = new DeviceSecurityGroupsImpl(clientObject.getDeviceSecurityGroups(), this);
        }
        return deviceSecurityGroups;
    }

    /** @return Resource collection API of IotSecuritySolutions. */
    public IotSecuritySolutions iotSecuritySolutions() {
        if (this.iotSecuritySolutions == null) {
            this.iotSecuritySolutions = new IotSecuritySolutionsImpl(clientObject.getIotSecuritySolutions(), this);
        }
        return iotSecuritySolutions;
    }

    /** @return Resource collection API of IotSecuritySolutionAnalytics. */
    public IotSecuritySolutionAnalytics iotSecuritySolutionAnalytics() {
        if (this.iotSecuritySolutionAnalytics == null) {
            this.iotSecuritySolutionAnalytics =
                new IotSecuritySolutionAnalyticsImpl(clientObject.getIotSecuritySolutionAnalytics(), this);
        }
        return iotSecuritySolutionAnalytics;
    }

    /** @return Resource collection API of IotSecuritySolutionsAnalyticsAggregatedAlerts. */
    public IotSecuritySolutionsAnalyticsAggregatedAlerts iotSecuritySolutionsAnalyticsAggregatedAlerts() {
        if (this.iotSecuritySolutionsAnalyticsAggregatedAlerts == null) {
            this.iotSecuritySolutionsAnalyticsAggregatedAlerts =
                new IotSecuritySolutionsAnalyticsAggregatedAlertsImpl(
                    clientObject.getIotSecuritySolutionsAnalyticsAggregatedAlerts(), this);
        }
        return iotSecuritySolutionsAnalyticsAggregatedAlerts;
    }

    /** @return Resource collection API of IotSecuritySolutionsAnalyticsRecommendations. */
    public IotSecuritySolutionsAnalyticsRecommendations iotSecuritySolutionsAnalyticsRecommendations() {
        if (this.iotSecuritySolutionsAnalyticsRecommendations == null) {
            this.iotSecuritySolutionsAnalyticsRecommendations =
                new IotSecuritySolutionsAnalyticsRecommendationsImpl(
                    clientObject.getIotSecuritySolutionsAnalyticsRecommendations(), this);
        }
        return iotSecuritySolutionsAnalyticsRecommendations;
    }

    /** @return Resource collection API of Locations. */
    public Locations locations() {
        if (this.locations == null) {
            this.locations = new LocationsImpl(clientObject.getLocations(), this);
        }
        return locations;
    }

    /** @return Resource collection API of Operations. */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /** @return Resource collection API of Tasks. */
    public Tasks tasks() {
        if (this.tasks == null) {
            this.tasks = new TasksImpl(clientObject.getTasks(), this);
        }
        return tasks;
    }

    /** @return Resource collection API of AutoProvisioningSettings. */
    public AutoProvisioningSettings autoProvisioningSettings() {
        if (this.autoProvisioningSettings == null) {
            this.autoProvisioningSettings =
                new AutoProvisioningSettingsImpl(clientObject.getAutoProvisioningSettings(), this);
        }
        return autoProvisioningSettings;
    }

    /** @return Resource collection API of Compliances. */
    public Compliances compliances() {
        if (this.compliances == null) {
            this.compliances = new CompliancesImpl(clientObject.getCompliances(), this);
        }
        return compliances;
    }

    /** @return Resource collection API of InformationProtectionPolicies. */
    public InformationProtectionPolicies informationProtectionPolicies() {
        if (this.informationProtectionPolicies == null) {
            this.informationProtectionPolicies =
                new InformationProtectionPoliciesImpl(clientObject.getInformationProtectionPolicies(), this);
        }
        return informationProtectionPolicies;
    }

    /** @return Resource collection API of SecurityContacts. */
    public SecurityContacts securityContacts() {
        if (this.securityContacts == null) {
            this.securityContacts = new SecurityContactsImpl(clientObject.getSecurityContacts(), this);
        }
        return securityContacts;
    }

    /** @return Resource collection API of WorkspaceSettings. */
    public WorkspaceSettings workspaceSettings() {
        if (this.workspaceSettings == null) {
            this.workspaceSettings = new WorkspaceSettingsImpl(clientObject.getWorkspaceSettings(), this);
        }
        return workspaceSettings;
    }

    /** @return Resource collection API of RegulatoryComplianceStandards. */
    public RegulatoryComplianceStandards regulatoryComplianceStandards() {
        if (this.regulatoryComplianceStandards == null) {
            this.regulatoryComplianceStandards =
                new RegulatoryComplianceStandardsImpl(clientObject.getRegulatoryComplianceStandards(), this);
        }
        return regulatoryComplianceStandards;
    }

    /** @return Resource collection API of RegulatoryComplianceControls. */
    public RegulatoryComplianceControls regulatoryComplianceControls() {
        if (this.regulatoryComplianceControls == null) {
            this.regulatoryComplianceControls =
                new RegulatoryComplianceControlsImpl(clientObject.getRegulatoryComplianceControls(), this);
        }
        return regulatoryComplianceControls;
    }

    /** @return Resource collection API of RegulatoryComplianceAssessments. */
    public RegulatoryComplianceAssessments regulatoryComplianceAssessments() {
        if (this.regulatoryComplianceAssessments == null) {
            this.regulatoryComplianceAssessments =
                new RegulatoryComplianceAssessmentsImpl(clientObject.getRegulatoryComplianceAssessments(), this);
        }
        return regulatoryComplianceAssessments;
    }

    /** @return Resource collection API of SubAssessments. */
    public SubAssessments subAssessments() {
        if (this.subAssessments == null) {
            this.subAssessments = new SubAssessmentsImpl(clientObject.getSubAssessments(), this);
        }
        return subAssessments;
    }

    /** @return Resource collection API of Automations. */
    public Automations automations() {
        if (this.automations == null) {
            this.automations = new AutomationsImpl(clientObject.getAutomations(), this);
        }
        return automations;
    }

    /** @return Resource collection API of AlertsSuppressionRules. */
    public AlertsSuppressionRules alertsSuppressionRules() {
        if (this.alertsSuppressionRules == null) {
            this.alertsSuppressionRules =
                new AlertsSuppressionRulesImpl(clientObject.getAlertsSuppressionRules(), this);
        }
        return alertsSuppressionRules;
    }

    /** @return Resource collection API of ServerVulnerabilityAssessments. */
    public ServerVulnerabilityAssessments serverVulnerabilityAssessments() {
        if (this.serverVulnerabilityAssessments == null) {
            this.serverVulnerabilityAssessments =
                new ServerVulnerabilityAssessmentsImpl(clientObject.getServerVulnerabilityAssessments(), this);
        }
        return serverVulnerabilityAssessments;
    }

    /** @return Resource collection API of AssessmentsMetadatas. */
    public AssessmentsMetadatas assessmentsMetadatas() {
        if (this.assessmentsMetadatas == null) {
            this.assessmentsMetadatas = new AssessmentsMetadatasImpl(clientObject.getAssessmentsMetadatas(), this);
        }
        return assessmentsMetadatas;
    }

    /** @return Resource collection API of Assessments. */
    public Assessments assessments() {
        if (this.assessments == null) {
            this.assessments = new AssessmentsImpl(clientObject.getAssessments(), this);
        }
        return assessments;
    }

    /** @return Resource collection API of AdaptiveApplicationControls. */
    public AdaptiveApplicationControls adaptiveApplicationControls() {
        if (this.adaptiveApplicationControls == null) {
            this.adaptiveApplicationControls =
                new AdaptiveApplicationControlsImpl(clientObject.getAdaptiveApplicationControls(), this);
        }
        return adaptiveApplicationControls;
    }

    /** @return Resource collection API of AdaptiveNetworkHardenings. */
    public AdaptiveNetworkHardenings adaptiveNetworkHardenings() {
        if (this.adaptiveNetworkHardenings == null) {
            this.adaptiveNetworkHardenings =
                new AdaptiveNetworkHardeningsImpl(clientObject.getAdaptiveNetworkHardenings(), this);
        }
        return adaptiveNetworkHardenings;
    }

    /** @return Resource collection API of AllowedConnections. */
    public AllowedConnections allowedConnections() {
        if (this.allowedConnections == null) {
            this.allowedConnections = new AllowedConnectionsImpl(clientObject.getAllowedConnections(), this);
        }
        return allowedConnections;
    }

    /** @return Resource collection API of Topologies. */
    public Topologies topologies() {
        if (this.topologies == null) {
            this.topologies = new TopologiesImpl(clientObject.getTopologies(), this);
        }
        return topologies;
    }

    /** @return Resource collection API of JitNetworkAccessPolicies. */
    public JitNetworkAccessPolicies jitNetworkAccessPolicies() {
        if (this.jitNetworkAccessPolicies == null) {
            this.jitNetworkAccessPolicies =
                new JitNetworkAccessPoliciesImpl(clientObject.getJitNetworkAccessPolicies(), this);
        }
        return jitNetworkAccessPolicies;
    }

    /** @return Resource collection API of DiscoveredSecuritySolutions. */
    public DiscoveredSecuritySolutions discoveredSecuritySolutions() {
        if (this.discoveredSecuritySolutions == null) {
            this.discoveredSecuritySolutions =
                new DiscoveredSecuritySolutionsImpl(clientObject.getDiscoveredSecuritySolutions(), this);
        }
        return discoveredSecuritySolutions;
    }

    /** @return Resource collection API of SecuritySolutionsReferenceDatas. */
    public SecuritySolutionsReferenceDatas securitySolutionsReferenceDatas() {
        if (this.securitySolutionsReferenceDatas == null) {
            this.securitySolutionsReferenceDatas =
                new SecuritySolutionsReferenceDatasImpl(clientObject.getSecuritySolutionsReferenceDatas(), this);
        }
        return securitySolutionsReferenceDatas;
    }

    /** @return Resource collection API of ExternalSecuritySolutions. */
    public ExternalSecuritySolutions externalSecuritySolutions() {
        if (this.externalSecuritySolutions == null) {
            this.externalSecuritySolutions =
                new ExternalSecuritySolutionsImpl(clientObject.getExternalSecuritySolutions(), this);
        }
        return externalSecuritySolutions;
    }

    /** @return Resource collection API of SecureScores. */
    public SecureScores secureScores() {
        if (this.secureScores == null) {
            this.secureScores = new SecureScoresImpl(clientObject.getSecureScores(), this);
        }
        return secureScores;
    }

    /** @return Resource collection API of SecureScoreControls. */
    public SecureScoreControls secureScoreControls() {
        if (this.secureScoreControls == null) {
            this.secureScoreControls = new SecureScoreControlsImpl(clientObject.getSecureScoreControls(), this);
        }
        return secureScoreControls;
    }

    /** @return Resource collection API of SecureScoreControlDefinitions. */
    public SecureScoreControlDefinitions secureScoreControlDefinitions() {
        if (this.secureScoreControlDefinitions == null) {
            this.secureScoreControlDefinitions =
                new SecureScoreControlDefinitionsImpl(clientObject.getSecureScoreControlDefinitions(), this);
        }
        return secureScoreControlDefinitions;
    }

    /** @return Resource collection API of SecuritySolutions. */
    public SecuritySolutions securitySolutions() {
        if (this.securitySolutions == null) {
            this.securitySolutions = new SecuritySolutionsImpl(clientObject.getSecuritySolutions(), this);
        }
        return securitySolutions;
    }

    /** @return Resource collection API of Connectors. */
    public Connectors connectors() {
        if (this.connectors == null) {
            this.connectors = new ConnectorsImpl(clientObject.getConnectors(), this);
        }
        return connectors;
    }

    /** @return Resource collection API of SqlVulnerabilityAssessmentScans. */
    public SqlVulnerabilityAssessmentScans sqlVulnerabilityAssessmentScans() {
        if (this.sqlVulnerabilityAssessmentScans == null) {
            this.sqlVulnerabilityAssessmentScans =
                new SqlVulnerabilityAssessmentScansImpl(clientObject.getSqlVulnerabilityAssessmentScans(), this);
        }
        return sqlVulnerabilityAssessmentScans;
    }

    /** @return Resource collection API of SqlVulnerabilityAssessmentScanResults. */
    public SqlVulnerabilityAssessmentScanResults sqlVulnerabilityAssessmentScanResults() {
        if (this.sqlVulnerabilityAssessmentScanResults == null) {
            this.sqlVulnerabilityAssessmentScanResults =
                new SqlVulnerabilityAssessmentScanResultsImpl(
                    clientObject.getSqlVulnerabilityAssessmentScanResults(), this);
        }
        return sqlVulnerabilityAssessmentScanResults;
    }

    /** @return Resource collection API of SqlVulnerabilityAssessmentBaselineRules. */
    public SqlVulnerabilityAssessmentBaselineRules sqlVulnerabilityAssessmentBaselineRules() {
        if (this.sqlVulnerabilityAssessmentBaselineRules == null) {
            this.sqlVulnerabilityAssessmentBaselineRules =
                new SqlVulnerabilityAssessmentBaselineRulesImpl(
                    clientObject.getSqlVulnerabilityAssessmentBaselineRules(), this);
        }
        return sqlVulnerabilityAssessmentBaselineRules;
    }

    /** @return Resource collection API of IotDefenderSettings. */
    public IotDefenderSettings iotDefenderSettings() {
        if (this.iotDefenderSettings == null) {
            this.iotDefenderSettings = new IotDefenderSettingsImpl(clientObject.getIotDefenderSettings(), this);
        }
        return iotDefenderSettings;
    }

    /** @return Resource collection API of IotSensors. */
    public IotSensors iotSensors() {
        if (this.iotSensors == null) {
            this.iotSensors = new IotSensorsImpl(clientObject.getIotSensors(), this);
        }
        return iotSensors;
    }

    /** @return Resource collection API of DevicesForSubscriptions. */
    public DevicesForSubscriptions devicesForSubscriptions() {
        if (this.devicesForSubscriptions == null) {
            this.devicesForSubscriptions =
                new DevicesForSubscriptionsImpl(clientObject.getDevicesForSubscriptions(), this);
        }
        return devicesForSubscriptions;
    }

    /** @return Resource collection API of DevicesForHubs. */
    public DevicesForHubs devicesForHubs() {
        if (this.devicesForHubs == null) {
            this.devicesForHubs = new DevicesForHubsImpl(clientObject.getDevicesForHubs(), this);
        }
        return devicesForHubs;
    }

    /** @return Resource collection API of Devices. */
    public Devices devices() {
        if (this.devices == null) {
            this.devices = new DevicesImpl(clientObject.getDevices(), this);
        }
        return devices;
    }

    /** @return Resource collection API of OnPremiseIotSensors. */
    public OnPremiseIotSensors onPremiseIotSensors() {
        if (this.onPremiseIotSensors == null) {
            this.onPremiseIotSensors = new OnPremiseIotSensorsImpl(clientObject.getOnPremiseIotSensors(), this);
        }
        return onPremiseIotSensors;
    }

    /** @return Resource collection API of IotSites. */
    public IotSites iotSites() {
        if (this.iotSites == null) {
            this.iotSites = new IotSitesImpl(clientObject.getIotSites(), this);
        }
        return iotSites;
    }

    /** @return Resource collection API of IotAlerts. */
    public IotAlerts iotAlerts() {
        if (this.iotAlerts == null) {
            this.iotAlerts = new IotAlertsImpl(clientObject.getIotAlerts(), this);
        }
        return iotAlerts;
    }

    /** @return Resource collection API of IotAlertTypes. */
    public IotAlertTypes iotAlertTypes() {
        if (this.iotAlertTypes == null) {
            this.iotAlertTypes = new IotAlertTypesImpl(clientObject.getIotAlertTypes(), this);
        }
        return iotAlertTypes;
    }

    /** @return Resource collection API of IotRecommendations. */
    public IotRecommendations iotRecommendations() {
        if (this.iotRecommendations == null) {
            this.iotRecommendations = new IotRecommendationsImpl(clientObject.getIotRecommendations(), this);
        }
        return iotRecommendations;
    }

    /** @return Resource collection API of IotRecommendationTypes. */
    public IotRecommendationTypes iotRecommendationTypes() {
        if (this.iotRecommendationTypes == null) {
            this.iotRecommendationTypes =
                new IotRecommendationTypesImpl(clientObject.getIotRecommendationTypes(), this);
        }
        return iotRecommendationTypes;
    }

    /** @return Resource collection API of Alerts. */
    public Alerts alerts() {
        if (this.alerts == null) {
            this.alerts = new AlertsImpl(clientObject.getAlerts(), this);
        }
        return alerts;
    }

    /** @return Resource collection API of Settings. */
    public Settings settings() {
        if (this.settings == null) {
            this.settings = new SettingsImpl(clientObject.getSettings(), this);
        }
        return settings;
    }

    /** @return Resource collection API of IngestionSettings. */
    public IngestionSettings ingestionSettings() {
        if (this.ingestionSettings == null) {
            this.ingestionSettings = new IngestionSettingsImpl(clientObject.getIngestionSettings(), this);
        }
        return ingestionSettings;
    }

    /** @return Resource collection API of SoftwareInventories. */
    public SoftwareInventories softwareInventories() {
        if (this.softwareInventories == null) {
            this.softwareInventories = new SoftwareInventoriesImpl(clientObject.getSoftwareInventories(), this);
        }
        return softwareInventories;
    }

    /**
     * @return Wrapped service client SecurityCenter providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public SecurityCenter serviceClient() {
        return this.clientObject;
    }
}
