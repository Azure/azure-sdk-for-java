// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.SecurityCenter;
import com.azure.resourcemanager.security.implementation.AdvancedThreatProtectionsImpl;
import com.azure.resourcemanager.security.implementation.AlertsImpl;
import com.azure.resourcemanager.security.implementation.AllowedConnectionsImpl;
import com.azure.resourcemanager.security.implementation.ApiCollectionsImpl;
import com.azure.resourcemanager.security.implementation.AssessmentsImpl;
import com.azure.resourcemanager.security.implementation.AssessmentsMetadatasImpl;
import com.azure.resourcemanager.security.implementation.ComplianceResultsImpl;
import com.azure.resourcemanager.security.implementation.CustomRecommendationsImpl;
import com.azure.resourcemanager.security.implementation.DeviceSecurityGroupsImpl;
import com.azure.resourcemanager.security.implementation.DiscoveredSecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.ExternalSecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionAnalyticsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionsAnalyticsAggregatedAlertsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionsAnalyticsRecommendationsImpl;
import com.azure.resourcemanager.security.implementation.IotSecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.JitNetworkAccessPoliciesImpl;
import com.azure.resourcemanager.security.implementation.PricingsImpl;
import com.azure.resourcemanager.security.implementation.SecureScoreControlDefinitionsImpl;
import com.azure.resourcemanager.security.implementation.SecureScoreControlsImpl;
import com.azure.resourcemanager.security.implementation.SecureScoresImpl;
import com.azure.resourcemanager.security.implementation.SecurityCenterBuilder;
import com.azure.resourcemanager.security.implementation.SecuritySolutionsImpl;
import com.azure.resourcemanager.security.implementation.SecuritySolutionsReferenceDatasImpl;
import com.azure.resourcemanager.security.implementation.SecurityStandardsImpl;
import com.azure.resourcemanager.security.implementation.ServerVulnerabilityAssessmentsImpl;
import com.azure.resourcemanager.security.implementation.ServerVulnerabilityAssessmentsSettingsImpl;
import com.azure.resourcemanager.security.implementation.SettingsImpl;
import com.azure.resourcemanager.security.implementation.StandardAssignmentsImpl;
import com.azure.resourcemanager.security.implementation.TopologiesImpl;
import com.azure.resourcemanager.security.models.AdvancedThreatProtections;
import com.azure.resourcemanager.security.models.Alerts;
import com.azure.resourcemanager.security.models.AllowedConnections;
import com.azure.resourcemanager.security.models.ApiCollections;
import com.azure.resourcemanager.security.models.Assessments;
import com.azure.resourcemanager.security.models.AssessmentsMetadatas;
import com.azure.resourcemanager.security.models.ComplianceResults;
import com.azure.resourcemanager.security.models.CustomRecommendations;
import com.azure.resourcemanager.security.models.DeviceSecurityGroups;
import com.azure.resourcemanager.security.models.DiscoveredSecuritySolutions;
import com.azure.resourcemanager.security.models.ExternalSecuritySolutions;
import com.azure.resourcemanager.security.models.IotSecuritySolutionAnalytics;
import com.azure.resourcemanager.security.models.IotSecuritySolutions;
import com.azure.resourcemanager.security.models.IotSecuritySolutionsAnalyticsAggregatedAlerts;
import com.azure.resourcemanager.security.models.IotSecuritySolutionsAnalyticsRecommendations;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicies;
import com.azure.resourcemanager.security.models.Pricings;
import com.azure.resourcemanager.security.models.SecureScoreControlDefinitions;
import com.azure.resourcemanager.security.models.SecureScoreControls;
import com.azure.resourcemanager.security.models.SecureScores;
import com.azure.resourcemanager.security.models.SecuritySolutions;
import com.azure.resourcemanager.security.models.SecuritySolutionsReferenceDatas;
import com.azure.resourcemanager.security.models.SecurityStandards;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessments;
import com.azure.resourcemanager.security.models.ServerVulnerabilityAssessmentsSettings;
import com.azure.resourcemanager.security.models.Settings;
import com.azure.resourcemanager.security.models.StandardAssignments;
import com.azure.resourcemanager.security.models.Topologies;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to SecurityManager.
 * API spec for Microsoft.Security (Azure Security Center) resource provider.
 */
public final class SecurityManager {
    private ComplianceResults complianceResults;

    private AdvancedThreatProtections advancedThreatProtections;

    private DeviceSecurityGroups deviceSecurityGroups;

    private IotSecuritySolutionAnalytics iotSecuritySolutionAnalytics;

    private IotSecuritySolutionsAnalyticsAggregatedAlerts iotSecuritySolutionsAnalyticsAggregatedAlerts;

    private IotSecuritySolutionsAnalyticsRecommendations iotSecuritySolutionsAnalyticsRecommendations;

    private IotSecuritySolutions iotSecuritySolutions;

    private AllowedConnections allowedConnections;

    private DiscoveredSecuritySolutions discoveredSecuritySolutions;

    private ExternalSecuritySolutions externalSecuritySolutions;

    private JitNetworkAccessPolicies jitNetworkAccessPolicies;

    private SecureScores secureScores;

    private SecureScoreControls secureScoreControls;

    private SecureScoreControlDefinitions secureScoreControlDefinitions;

    private SecuritySolutions securitySolutions;

    private SecuritySolutionsReferenceDatas securitySolutionsReferenceDatas;

    private ServerVulnerabilityAssessments serverVulnerabilityAssessments;

    private Topologies topologies;

    private AssessmentsMetadatas assessmentsMetadatas;

    private Assessments assessments;

    private Alerts alerts;

    private Settings settings;

    private ServerVulnerabilityAssessmentsSettings serverVulnerabilityAssessmentsSettings;

    private ApiCollections apiCollections;

    private Pricings pricings;

    private SecurityStandards securityStandards;

    private StandardAssignments standardAssignments;

    private CustomRecommendations customRecommendations;

    private final SecurityCenter clientObject;

    private SecurityManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new SecurityCenterBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Security service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Security service API instance.
     */
    public static SecurityManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Security service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Security service API instance.
     */
    public static SecurityManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new SecurityManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create SecurityManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new SecurityManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Security service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Security service API instance.
         */
        public SecurityManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.security")
                .append("/")
                .append("1.0.0");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new SecurityManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of ComplianceResults.
     * 
     * @return Resource collection API of ComplianceResults.
     */
    public ComplianceResults complianceResults() {
        if (this.complianceResults == null) {
            this.complianceResults = new ComplianceResultsImpl(clientObject.getComplianceResults(), this);
        }
        return complianceResults;
    }

    /**
     * Gets the resource collection API of AdvancedThreatProtections. It manages AdvancedThreatProtectionSetting.
     * 
     * @return Resource collection API of AdvancedThreatProtections.
     */
    public AdvancedThreatProtections advancedThreatProtections() {
        if (this.advancedThreatProtections == null) {
            this.advancedThreatProtections
                = new AdvancedThreatProtectionsImpl(clientObject.getAdvancedThreatProtections(), this);
        }
        return advancedThreatProtections;
    }

    /**
     * Gets the resource collection API of DeviceSecurityGroups. It manages DeviceSecurityGroup.
     * 
     * @return Resource collection API of DeviceSecurityGroups.
     */
    public DeviceSecurityGroups deviceSecurityGroups() {
        if (this.deviceSecurityGroups == null) {
            this.deviceSecurityGroups = new DeviceSecurityGroupsImpl(clientObject.getDeviceSecurityGroups(), this);
        }
        return deviceSecurityGroups;
    }

    /**
     * Gets the resource collection API of IotSecuritySolutionAnalytics.
     * 
     * @return Resource collection API of IotSecuritySolutionAnalytics.
     */
    public IotSecuritySolutionAnalytics iotSecuritySolutionAnalytics() {
        if (this.iotSecuritySolutionAnalytics == null) {
            this.iotSecuritySolutionAnalytics
                = new IotSecuritySolutionAnalyticsImpl(clientObject.getIotSecuritySolutionAnalytics(), this);
        }
        return iotSecuritySolutionAnalytics;
    }

    /**
     * Gets the resource collection API of IotSecuritySolutionsAnalyticsAggregatedAlerts.
     * 
     * @return Resource collection API of IotSecuritySolutionsAnalyticsAggregatedAlerts.
     */
    public IotSecuritySolutionsAnalyticsAggregatedAlerts iotSecuritySolutionsAnalyticsAggregatedAlerts() {
        if (this.iotSecuritySolutionsAnalyticsAggregatedAlerts == null) {
            this.iotSecuritySolutionsAnalyticsAggregatedAlerts = new IotSecuritySolutionsAnalyticsAggregatedAlertsImpl(
                clientObject.getIotSecuritySolutionsAnalyticsAggregatedAlerts(), this);
        }
        return iotSecuritySolutionsAnalyticsAggregatedAlerts;
    }

    /**
     * Gets the resource collection API of IotSecuritySolutionsAnalyticsRecommendations.
     * 
     * @return Resource collection API of IotSecuritySolutionsAnalyticsRecommendations.
     */
    public IotSecuritySolutionsAnalyticsRecommendations iotSecuritySolutionsAnalyticsRecommendations() {
        if (this.iotSecuritySolutionsAnalyticsRecommendations == null) {
            this.iotSecuritySolutionsAnalyticsRecommendations = new IotSecuritySolutionsAnalyticsRecommendationsImpl(
                clientObject.getIotSecuritySolutionsAnalyticsRecommendations(), this);
        }
        return iotSecuritySolutionsAnalyticsRecommendations;
    }

    /**
     * Gets the resource collection API of IotSecuritySolutions. It manages IoTSecuritySolutionModel.
     * 
     * @return Resource collection API of IotSecuritySolutions.
     */
    public IotSecuritySolutions iotSecuritySolutions() {
        if (this.iotSecuritySolutions == null) {
            this.iotSecuritySolutions = new IotSecuritySolutionsImpl(clientObject.getIotSecuritySolutions(), this);
        }
        return iotSecuritySolutions;
    }

    /**
     * Gets the resource collection API of AllowedConnections.
     * 
     * @return Resource collection API of AllowedConnections.
     */
    public AllowedConnections allowedConnections() {
        if (this.allowedConnections == null) {
            this.allowedConnections = new AllowedConnectionsImpl(clientObject.getAllowedConnections(), this);
        }
        return allowedConnections;
    }

    /**
     * Gets the resource collection API of DiscoveredSecuritySolutions.
     * 
     * @return Resource collection API of DiscoveredSecuritySolutions.
     */
    public DiscoveredSecuritySolutions discoveredSecuritySolutions() {
        if (this.discoveredSecuritySolutions == null) {
            this.discoveredSecuritySolutions
                = new DiscoveredSecuritySolutionsImpl(clientObject.getDiscoveredSecuritySolutions(), this);
        }
        return discoveredSecuritySolutions;
    }

    /**
     * Gets the resource collection API of ExternalSecuritySolutions.
     * 
     * @return Resource collection API of ExternalSecuritySolutions.
     */
    public ExternalSecuritySolutions externalSecuritySolutions() {
        if (this.externalSecuritySolutions == null) {
            this.externalSecuritySolutions
                = new ExternalSecuritySolutionsImpl(clientObject.getExternalSecuritySolutions(), this);
        }
        return externalSecuritySolutions;
    }

    /**
     * Gets the resource collection API of JitNetworkAccessPolicies. It manages JitNetworkAccessPolicy.
     * 
     * @return Resource collection API of JitNetworkAccessPolicies.
     */
    public JitNetworkAccessPolicies jitNetworkAccessPolicies() {
        if (this.jitNetworkAccessPolicies == null) {
            this.jitNetworkAccessPolicies
                = new JitNetworkAccessPoliciesImpl(clientObject.getJitNetworkAccessPolicies(), this);
        }
        return jitNetworkAccessPolicies;
    }

    /**
     * Gets the resource collection API of SecureScores.
     * 
     * @return Resource collection API of SecureScores.
     */
    public SecureScores secureScores() {
        if (this.secureScores == null) {
            this.secureScores = new SecureScoresImpl(clientObject.getSecureScores(), this);
        }
        return secureScores;
    }

    /**
     * Gets the resource collection API of SecureScoreControls.
     * 
     * @return Resource collection API of SecureScoreControls.
     */
    public SecureScoreControls secureScoreControls() {
        if (this.secureScoreControls == null) {
            this.secureScoreControls = new SecureScoreControlsImpl(clientObject.getSecureScoreControls(), this);
        }
        return secureScoreControls;
    }

    /**
     * Gets the resource collection API of SecureScoreControlDefinitions.
     * 
     * @return Resource collection API of SecureScoreControlDefinitions.
     */
    public SecureScoreControlDefinitions secureScoreControlDefinitions() {
        if (this.secureScoreControlDefinitions == null) {
            this.secureScoreControlDefinitions
                = new SecureScoreControlDefinitionsImpl(clientObject.getSecureScoreControlDefinitions(), this);
        }
        return secureScoreControlDefinitions;
    }

    /**
     * Gets the resource collection API of SecuritySolutions.
     * 
     * @return Resource collection API of SecuritySolutions.
     */
    public SecuritySolutions securitySolutions() {
        if (this.securitySolutions == null) {
            this.securitySolutions = new SecuritySolutionsImpl(clientObject.getSecuritySolutions(), this);
        }
        return securitySolutions;
    }

    /**
     * Gets the resource collection API of SecuritySolutionsReferenceDatas.
     * 
     * @return Resource collection API of SecuritySolutionsReferenceDatas.
     */
    public SecuritySolutionsReferenceDatas securitySolutionsReferenceDatas() {
        if (this.securitySolutionsReferenceDatas == null) {
            this.securitySolutionsReferenceDatas
                = new SecuritySolutionsReferenceDatasImpl(clientObject.getSecuritySolutionsReferenceDatas(), this);
        }
        return securitySolutionsReferenceDatas;
    }

    /**
     * Gets the resource collection API of ServerVulnerabilityAssessments.
     * 
     * @return Resource collection API of ServerVulnerabilityAssessments.
     */
    public ServerVulnerabilityAssessments serverVulnerabilityAssessments() {
        if (this.serverVulnerabilityAssessments == null) {
            this.serverVulnerabilityAssessments
                = new ServerVulnerabilityAssessmentsImpl(clientObject.getServerVulnerabilityAssessments(), this);
        }
        return serverVulnerabilityAssessments;
    }

    /**
     * Gets the resource collection API of Topologies.
     * 
     * @return Resource collection API of Topologies.
     */
    public Topologies topologies() {
        if (this.topologies == null) {
            this.topologies = new TopologiesImpl(clientObject.getTopologies(), this);
        }
        return topologies;
    }

    /**
     * Gets the resource collection API of AssessmentsMetadatas. It manages SecurityAssessmentMetadataResponse.
     * 
     * @return Resource collection API of AssessmentsMetadatas.
     */
    public AssessmentsMetadatas assessmentsMetadatas() {
        if (this.assessmentsMetadatas == null) {
            this.assessmentsMetadatas = new AssessmentsMetadatasImpl(clientObject.getAssessmentsMetadatas(), this);
        }
        return assessmentsMetadatas;
    }

    /**
     * Gets the resource collection API of Assessments. It manages SecurityAssessmentResponse.
     * 
     * @return Resource collection API of Assessments.
     */
    public Assessments assessments() {
        if (this.assessments == null) {
            this.assessments = new AssessmentsImpl(clientObject.getAssessments(), this);
        }
        return assessments;
    }

    /**
     * Gets the resource collection API of Alerts.
     * 
     * @return Resource collection API of Alerts.
     */
    public Alerts alerts() {
        if (this.alerts == null) {
            this.alerts = new AlertsImpl(clientObject.getAlerts(), this);
        }
        return alerts;
    }

    /**
     * Gets the resource collection API of Settings.
     * 
     * @return Resource collection API of Settings.
     */
    public Settings settings() {
        if (this.settings == null) {
            this.settings = new SettingsImpl(clientObject.getSettings(), this);
        }
        return settings;
    }

    /**
     * Gets the resource collection API of ServerVulnerabilityAssessmentsSettings.
     * 
     * @return Resource collection API of ServerVulnerabilityAssessmentsSettings.
     */
    public ServerVulnerabilityAssessmentsSettings serverVulnerabilityAssessmentsSettings() {
        if (this.serverVulnerabilityAssessmentsSettings == null) {
            this.serverVulnerabilityAssessmentsSettings = new ServerVulnerabilityAssessmentsSettingsImpl(
                clientObject.getServerVulnerabilityAssessmentsSettings(), this);
        }
        return serverVulnerabilityAssessmentsSettings;
    }

    /**
     * Gets the resource collection API of ApiCollections.
     * 
     * @return Resource collection API of ApiCollections.
     */
    public ApiCollections apiCollections() {
        if (this.apiCollections == null) {
            this.apiCollections = new ApiCollectionsImpl(clientObject.getApiCollections(), this);
        }
        return apiCollections;
    }

    /**
     * Gets the resource collection API of Pricings.
     * 
     * @return Resource collection API of Pricings.
     */
    public Pricings pricings() {
        if (this.pricings == null) {
            this.pricings = new PricingsImpl(clientObject.getPricings(), this);
        }
        return pricings;
    }

    /**
     * Gets the resource collection API of SecurityStandards. It manages SecurityStandard.
     * 
     * @return Resource collection API of SecurityStandards.
     */
    public SecurityStandards securityStandards() {
        if (this.securityStandards == null) {
            this.securityStandards = new SecurityStandardsImpl(clientObject.getSecurityStandards(), this);
        }
        return securityStandards;
    }

    /**
     * Gets the resource collection API of StandardAssignments. It manages StandardAssignment.
     * 
     * @return Resource collection API of StandardAssignments.
     */
    public StandardAssignments standardAssignments() {
        if (this.standardAssignments == null) {
            this.standardAssignments = new StandardAssignmentsImpl(clientObject.getStandardAssignments(), this);
        }
        return standardAssignments;
    }

    /**
     * Gets the resource collection API of CustomRecommendations. It manages CustomRecommendation.
     * 
     * @return Resource collection API of CustomRecommendations.
     */
    public CustomRecommendations customRecommendations() {
        if (this.customRecommendations == null) {
            this.customRecommendations = new CustomRecommendationsImpl(clientObject.getCustomRecommendations(), this);
        }
        return customRecommendations;
    }

    /**
     * Gets wrapped service client SecurityCenter providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client SecurityCenter.
     */
    public SecurityCenter serviceClient() {
        return this.clientObject;
    }
}
