// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The data export setting properties.
 */
@Fluent
public final class DataExportSettingProperties implements JsonSerializable<DataExportSettingProperties> {
    /*
     * Is the data export setting enabled
     */
    private boolean enabled;

    /**
     * Creates an instance of DataExportSettingProperties class.
     */
    public DataExportSettingProperties() {
    }

    /**
     * Get the enabled property: Is the data export setting enabled.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Is the data export setting enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the DataExportSettingProperties object itself.
     */
    public DataExportSettingProperties withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataExportSettingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataExportSettingProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataExportSettingProperties.
     */
    public static DataExportSettingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataExportSettingProperties deserializedDataExportSettingProperties = new DataExportSettingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedDataExportSettingProperties.enabled = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataExportSettingProperties;
        });
    }
}
