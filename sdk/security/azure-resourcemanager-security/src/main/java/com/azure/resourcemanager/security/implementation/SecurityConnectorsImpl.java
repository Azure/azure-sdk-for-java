// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.SecurityConnectorsClient;
import com.azure.resourcemanager.security.fluent.models.SecurityConnectorInner;
import com.azure.resourcemanager.security.models.SecurityConnector;
import com.azure.resourcemanager.security.models.SecurityConnectors;

public final class SecurityConnectorsImpl implements SecurityConnectors {
    private static final ClientLogger LOGGER = new ClientLogger(SecurityConnectorsImpl.class);

    private final SecurityConnectorsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public SecurityConnectorsImpl(
        SecurityConnectorsClient innerClient, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SecurityConnector> list() {
        PagedIterable<SecurityConnectorInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new SecurityConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<SecurityConnector> list(Context context) {
        PagedIterable<SecurityConnectorInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new SecurityConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<SecurityConnector> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SecurityConnectorInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new SecurityConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<SecurityConnector> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SecurityConnectorInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new SecurityConnectorImpl(inner1, this.manager()));
    }

    public Response<SecurityConnector> getByResourceGroupWithResponse(
        String resourceGroupName, String securityConnectorName, Context context) {
        Response<SecurityConnectorInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, securityConnectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SecurityConnectorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SecurityConnector getByResourceGroup(String resourceGroupName, String securityConnectorName) {
        SecurityConnectorInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, securityConnectorName);
        if (inner != null) {
            return new SecurityConnectorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String securityConnectorName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, securityConnectorName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String securityConnectorName) {
        this.serviceClient().delete(resourceGroupName, securityConnectorName);
    }

    public SecurityConnector getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String securityConnectorName = Utils.getValueFromIdByName(id, "securityConnectors");
        if (securityConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConnectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, securityConnectorName, Context.NONE).getValue();
    }

    public Response<SecurityConnector> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String securityConnectorName = Utils.getValueFromIdByName(id, "securityConnectors");
        if (securityConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConnectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, securityConnectorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String securityConnectorName = Utils.getValueFromIdByName(id, "securityConnectors");
        if (securityConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConnectors'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, securityConnectorName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String securityConnectorName = Utils.getValueFromIdByName(id, "securityConnectors");
        if (securityConnectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConnectors'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, securityConnectorName, context);
    }

    private SecurityConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public SecurityConnectorImpl define(String name) {
        return new SecurityConnectorImpl(name, this.manager());
    }
}
