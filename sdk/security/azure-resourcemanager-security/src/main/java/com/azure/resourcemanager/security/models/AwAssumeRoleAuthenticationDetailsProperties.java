// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is
 * composed of role Amazon Resource Name (ARN) and external ID. For more details, refer to &lt;a
 * href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html"&gt;Creating a Role to Delegate
 * Permissions to an IAM User (write only)&lt;/a&gt;.
 */
@Fluent
public final class AwAssumeRoleAuthenticationDetailsProperties extends AuthenticationDetailsProperties {
    /*
     * Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use
     * account organization credentials.
     */
    private AuthenticationType authenticationType = AuthenticationType.AWS_ASSUME_ROLE;

    /*
     * The ID of the cloud account
     */
    private String accountId;

    /*
     * Assumed role ID is an identifier that you can use to create temporary security credentials.
     */
    private String awsAssumeRoleArn;

    /*
     * A unique identifier that is required when you assume a role in another account.
     */
    private String awsExternalId;

    /**
     * Creates an instance of AwAssumeRoleAuthenticationDetailsProperties class.
     */
    public AwAssumeRoleAuthenticationDetailsProperties() {
    }

    /**
     * Get the authenticationType property: Connect to your cloud account, for AWS use either account credentials or
     * role-based authentication. For GCP use account organization credentials.
     * 
     * @return the authenticationType value.
     */
    @Override
    public AuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Get the accountId property: The ID of the cloud account.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Get the awsAssumeRoleArn property: Assumed role ID is an identifier that you can use to create temporary security
     * credentials.
     * 
     * @return the awsAssumeRoleArn value.
     */
    public String awsAssumeRoleArn() {
        return this.awsAssumeRoleArn;
    }

    /**
     * Set the awsAssumeRoleArn property: Assumed role ID is an identifier that you can use to create temporary security
     * credentials.
     * 
     * @param awsAssumeRoleArn the awsAssumeRoleArn value to set.
     * @return the AwAssumeRoleAuthenticationDetailsProperties object itself.
     */
    public AwAssumeRoleAuthenticationDetailsProperties withAwsAssumeRoleArn(String awsAssumeRoleArn) {
        this.awsAssumeRoleArn = awsAssumeRoleArn;
        return this;
    }

    /**
     * Get the awsExternalId property: A unique identifier that is required when you assume a role in another account.
     * 
     * @return the awsExternalId value.
     */
    public String awsExternalId() {
        return this.awsExternalId;
    }

    /**
     * Set the awsExternalId property: A unique identifier that is required when you assume a role in another account.
     * 
     * @param awsExternalId the awsExternalId value to set.
     * @return the AwAssumeRoleAuthenticationDetailsProperties object itself.
     */
    public AwAssumeRoleAuthenticationDetailsProperties withAwsExternalId(String awsExternalId) {
        this.awsExternalId = awsExternalId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (awsAssumeRoleArn() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property awsAssumeRoleArn in model AwAssumeRoleAuthenticationDetailsProperties"));
        }
        if (awsExternalId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property awsExternalId in model AwAssumeRoleAuthenticationDetailsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AwAssumeRoleAuthenticationDetailsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("awsAssumeRoleArn", this.awsAssumeRoleArn);
        jsonWriter.writeStringField("awsExternalId", this.awsExternalId);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwAssumeRoleAuthenticationDetailsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwAssumeRoleAuthenticationDetailsProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AwAssumeRoleAuthenticationDetailsProperties.
     */
    public static AwAssumeRoleAuthenticationDetailsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwAssumeRoleAuthenticationDetailsProperties deserializedAwAssumeRoleAuthenticationDetailsProperties
                = new AwAssumeRoleAuthenticationDetailsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationProvisioningState".equals(fieldName)) {
                    deserializedAwAssumeRoleAuthenticationDetailsProperties.withAuthenticationProvisioningState(
                        AuthenticationProvisioningState.fromString(reader.getString()));
                } else if ("grantedPermissions".equals(fieldName)) {
                    List<PermissionProperty> grantedPermissions
                        = reader.readArray(reader1 -> PermissionProperty.fromString(reader1.getString()));
                    deserializedAwAssumeRoleAuthenticationDetailsProperties.withGrantedPermissions(grantedPermissions);
                } else if ("awsAssumeRoleArn".equals(fieldName)) {
                    deserializedAwAssumeRoleAuthenticationDetailsProperties.awsAssumeRoleArn = reader.getString();
                } else if ("awsExternalId".equals(fieldName)) {
                    deserializedAwAssumeRoleAuthenticationDetailsProperties.awsExternalId = reader.getString();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedAwAssumeRoleAuthenticationDetailsProperties.authenticationType
                        = AuthenticationType.fromString(reader.getString());
                } else if ("accountId".equals(fieldName)) {
                    deserializedAwAssumeRoleAuthenticationDetailsProperties.accountId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwAssumeRoleAuthenticationDetailsProperties;
        });
    }
}
