// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.security.fluent.models.ExternalSecuritySolutionInner;
import java.io.IOException;

/**
 * Represents a security solution which sends CEF logs to an OMS workspace.
 */
@Fluent
public final class CefExternalSecuritySolution extends ExternalSecuritySolutionInner {
    /*
     * The kind of the external solution
     */
    private ExternalSecuritySolutionKind kind = ExternalSecuritySolutionKind.CEF;

    /*
     * The external security solution properties for CEF solutions
     */
    private CefSolutionProperties properties;

    /*
     * Location where the resource is stored
     */
    private String location;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CefExternalSecuritySolution class.
     */
    public CefExternalSecuritySolution() {
    }

    /**
     * Get the kind property: The kind of the external solution.
     * 
     * @return the kind value.
     */
    @Override
    public ExternalSecuritySolutionKind kind() {
        return this.kind;
    }

    /**
     * Get the properties property: The external security solution properties for CEF solutions.
     * 
     * @return the properties value.
     */
    public CefSolutionProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The external security solution properties for CEF solutions.
     * 
     * @param properties the properties value to set.
     * @return the CefExternalSecuritySolution object itself.
     */
    public CefExternalSecuritySolution withProperties(CefSolutionProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the location property: Location where the resource is stored.
     * 
     * @return the location value.
     */
    @Override
    public String location() {
        return this.location;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CefExternalSecuritySolution from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CefExternalSecuritySolution if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CefExternalSecuritySolution.
     */
    public static CefExternalSecuritySolution fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CefExternalSecuritySolution deserializedCefExternalSecuritySolution = new CefExternalSecuritySolution();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCefExternalSecuritySolution.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCefExternalSecuritySolution.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCefExternalSecuritySolution.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedCefExternalSecuritySolution.location = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedCefExternalSecuritySolution.kind
                        = ExternalSecuritySolutionKind.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedCefExternalSecuritySolution.properties = CefSolutionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCefExternalSecuritySolution;
        });
    }
}
