// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.GitHubOwnerInner;
import com.azure.resourcemanager.security.fluent.models.GitHubOwnerListResponseInner;
import com.azure.resourcemanager.security.models.DevOpsProvisioningState;
import com.azure.resourcemanager.security.models.GitHubOwnerProperties;
import com.azure.resourcemanager.security.models.OnboardingState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class GitHubOwnerListResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GitHubOwnerListResponseInner model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningStatusMessage\":\"zopjhbzxliohr\",\"provisioningStatusUpdateTimeUtc\":\"2021-05-21T08:47:13Z\",\"provisioningState\":\"Failed\",\"ownerUrl\":\"xqbawpc\",\"gitHubInternalId\":\"nzqcy\",\"onboardingState\":\"Onboarded\"},\"id\":\"p\",\"name\":\"ofyuicd\",\"type\":\"zb\"},{\"properties\":{\"provisioningStatusMessage\":\"wgbdvibidmhmwffp\",\"provisioningStatusUpdateTimeUtc\":\"2021-04-22T02:27:43Z\",\"provisioningState\":\"DeletionFailure\",\"ownerUrl\":\"pckc\",\"gitHubInternalId\":\"rv\",\"onboardingState\":\"OnboardedByOtherConnector\"},\"id\":\"oxoyyukp\",\"name\":\"aimmoiroqb\",\"type\":\"shbraga\"},{\"properties\":{\"provisioningStatusMessage\":\"mfsvbpav\",\"provisioningStatusUpdateTimeUtc\":\"2021-03-10T05:14:48Z\",\"provisioningState\":\"Succeeded\",\"ownerUrl\":\"dbwnu\",\"gitHubInternalId\":\"ahxku\",\"onboardingState\":\"NotOnboarded\"},\"id\":\"jcaacfdmmcpugm\",\"name\":\"hqepvufhbzehewh\",\"type\":\"qhnlbqnbld\"},{\"properties\":{\"provisioningStatusMessage\":\"lgsc\",\"provisioningStatusUpdateTimeUtc\":\"2021-09-12T01:01:46Z\",\"provisioningState\":\"Failed\",\"ownerUrl\":\"rsrrmoucsofldp\",\"gitHubInternalId\":\"iyfc\",\"onboardingState\":\"OnboardedByOtherConnector\"},\"id\":\"eolhbhlvbmx\",\"name\":\"qi\",\"type\":\"s\"}],\"nextLink\":\"kcudfbsfarfsiowl\"}")
            .toObject(GitHubOwnerListResponseInner.class);
        Assertions.assertEquals(DevOpsProvisioningState.FAILED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals(OnboardingState.ONBOARDED, model.value().get(0).properties().onboardingState());
        Assertions.assertEquals("kcudfbsfarfsiowl", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GitHubOwnerListResponseInner model = new GitHubOwnerListResponseInner()
            .withValue(Arrays.asList(
                new GitHubOwnerInner()
                    .withProperties(new GitHubOwnerProperties().withProvisioningState(DevOpsProvisioningState.FAILED)
                        .withOnboardingState(OnboardingState.ONBOARDED)),
                new GitHubOwnerInner().withProperties(
                    new GitHubOwnerProperties().withProvisioningState(DevOpsProvisioningState.DELETION_FAILURE)
                        .withOnboardingState(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR)),
                new GitHubOwnerInner()
                    .withProperties(new GitHubOwnerProperties().withProvisioningState(DevOpsProvisioningState.SUCCEEDED)
                        .withOnboardingState(OnboardingState.NOT_ONBOARDED)),
                new GitHubOwnerInner()
                    .withProperties(new GitHubOwnerProperties().withProvisioningState(DevOpsProvisioningState.FAILED)
                        .withOnboardingState(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR))))
            .withNextLink("kcudfbsfarfsiowl");
        model = BinaryData.fromObject(model).toObject(GitHubOwnerListResponseInner.class);
        Assertions.assertEquals(DevOpsProvisioningState.FAILED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals(OnboardingState.ONBOARDED, model.value().get(0).properties().onboardingState());
        Assertions.assertEquals("kcudfbsfarfsiowl", model.nextLink());
    }
}
