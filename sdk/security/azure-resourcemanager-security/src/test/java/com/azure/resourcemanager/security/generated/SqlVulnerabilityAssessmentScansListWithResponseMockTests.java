// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import com.azure.resourcemanager.security.models.Scans;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScansListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"triggerType\":\"OnDemand\",\"state\":\"InProgress\",\"server\":\"fn\",\"database\":\"eywvfopkyll\",\"sqlVersion\":\"yenjpwdmsfw\",\"startTime\":\"2020-12-24T06:36:22Z\",\"endTime\":\"2021-08-10T23:09:30Z\",\"highSeverityFailedRulesCount\":1260327728,\"mediumSeverityFailedRulesCount\":2132537869,\"lowSeverityFailedRulesCount\":1996764364,\"totalPassedRulesCount\":1891272433,\"totalFailedRulesCount\":1057892050,\"totalRulesCount\":1794257589,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-07-07T05:07:31Z\"},\"id\":\"bzvulqevvjncpmy\",\"name\":\"t\",\"type\":\"gdmvghcmixmlwkf\"},{\"properties\":{\"triggerType\":\"Recurring\",\"state\":\"InProgress\",\"server\":\"talqee\",\"database\":\"dfyimooaezk\",\"sqlVersion\":\"ms\",\"startTime\":\"2021-07-13T03:07:18Z\",\"endTime\":\"2020-12-20T00:04:25Z\",\"highSeverityFailedRulesCount\":74964665,\"mediumSeverityFailedRulesCount\":742367579,\"lowSeverityFailedRulesCount\":932361009,\"totalPassedRulesCount\":1701378589,\"totalFailedRulesCount\":710230123,\"totalRulesCount\":1989521180,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-04-16T16:44:45Z\"},\"id\":\"t\",\"name\":\"n\",\"type\":\"bfb\"},{\"properties\":{\"triggerType\":\"OnDemand\",\"state\":\"InProgress\",\"server\":\"jdkxh\",\"database\":\"wyaolclzxkr\",\"sqlVersion\":\"uyytbpkrpkhqetp\",\"startTime\":\"2021-03-30T13:51:12Z\",\"endTime\":\"2021-12-03T18:08Z\",\"highSeverityFailedRulesCount\":780643942,\"mediumSeverityFailedRulesCount\":650578708,\"lowSeverityFailedRulesCount\":549462867,\"totalPassedRulesCount\":333646951,\"totalFailedRulesCount\":1153589083,\"totalRulesCount\":1748632105,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-09-03T22:17:10Z\"},\"id\":\"hufcmuajwblx\",\"name\":\"htozfrfaw\",\"type\":\"nnsvrfajynihti\"},{\"properties\":{\"triggerType\":\"OnDemand\",\"state\":\"Passed\",\"server\":\"h\",\"database\":\"ctblfehb\",\"sqlVersion\":\"gy\",\"startTime\":\"2021-11-17T15:08:49Z\",\"endTime\":\"2021-04-27T11:28:06Z\",\"highSeverityFailedRulesCount\":1540872356,\"mediumSeverityFailedRulesCount\":1658600942,\"lowSeverityFailedRulesCount\":1041228962,\"totalPassedRulesCount\":1263879205,\"totalFailedRulesCount\":1415213243,\"totalRulesCount\":1053626581,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-11-05T11:46Z\"},\"id\":\"ldxagmdfj\",\"name\":\"cngkwxjsjqu\",\"type\":\"ohufzdtsrpjuvgz\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Scans response = manager.sqlVulnerabilityAssessmentScans()
            .listWithResponse("lyqdvpqfbxgyc", "d", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, response.value().get(0).properties().triggerType());
        Assertions.assertEquals(ScanState.IN_PROGRESS, response.value().get(0).properties().state());
        Assertions.assertEquals("fn", response.value().get(0).properties().server());
        Assertions.assertEquals("eywvfopkyll", response.value().get(0).properties().database());
        Assertions.assertEquals("yenjpwdmsfw", response.value().get(0).properties().sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T06:36:22Z"),
            response.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T23:09:30Z"),
            response.value().get(0).properties().endTime());
        Assertions.assertEquals(1260327728, response.value().get(0).properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(2132537869, response.value().get(0).properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(1996764364, response.value().get(0).properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(1891272433, response.value().get(0).properties().totalPassedRulesCount());
        Assertions.assertEquals(1057892050, response.value().get(0).properties().totalFailedRulesCount());
        Assertions.assertEquals(1794257589, response.value().get(0).properties().totalRulesCount());
        Assertions.assertEquals(false, response.value().get(0).properties().isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-07T05:07:31Z"),
            response.value().get(0).properties().lastScanTime());
    }
}
