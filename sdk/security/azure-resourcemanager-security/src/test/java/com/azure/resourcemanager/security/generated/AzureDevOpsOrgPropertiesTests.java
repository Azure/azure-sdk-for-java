// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsOrgProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AzureDevOpsOrgPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDevOpsOrgProperties model = BinaryData.fromString(
            "{\"provisioningStatusMessage\":\"ojqtobaxk\",\"provisioningStatusUpdateTimeUtc\":\"2021-11-03T13:54:52Z\",\"provisioningState\":\"Failed\",\"onboardingState\":\"OnboardedByOtherConnector\",\"actionableRemediation\":{\"state\":\"None\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"u\",\"category\":\"Secrets\"}],\"branchConfiguration\":{\"branchNames\":[\"syrq\",\"njqhdenxa\"],\"annotateDefaultBranch\":\"Disabled\"},\"inheritFromParentState\":\"Enabled\"}}")
            .toObject(AzureDevOpsOrgProperties.class);
        Assertions.assertEquals(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR, model.onboardingState());
        Assertions.assertEquals(ActionableRemediationState.NONE, model.actionableRemediation().state());
        Assertions.assertEquals("u",
            model.actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.SECRETS,
            model.actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("syrq", model.actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            model.actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.ENABLED, model.actionableRemediation().inheritFromParentState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDevOpsOrgProperties model
            = new AzureDevOpsOrgProperties().withOnboardingState(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR)
                .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.NONE)
                    .withCategoryConfigurations(Arrays.asList(
                        new CategoryConfiguration().withMinimumSeverityLevel("u").withCategory(RuleCategory.SECRETS)))
                    .withBranchConfiguration(
                        new TargetBranchConfiguration().withBranchNames(Arrays.asList("syrq", "njqhdenxa"))
                            .withAnnotateDefaultBranch(AnnotateDefaultBranchState.DISABLED))
                    .withInheritFromParentState(InheritFromParentState.ENABLED));
        model = BinaryData.fromObject(model).toObject(AzureDevOpsOrgProperties.class);
        Assertions.assertEquals(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR, model.onboardingState());
        Assertions.assertEquals(ActionableRemediationState.NONE, model.actionableRemediation().state());
        Assertions.assertEquals("u",
            model.actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.SECRETS,
            model.actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("syrq", model.actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            model.actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.ENABLED, model.actionableRemediation().inheritFromParentState());
    }
}
