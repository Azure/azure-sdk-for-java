// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.RegulatoryComplianceAssessment;
import com.azure.resourcemanager.security.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RegulatoryComplianceAssessmentsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"idhz\",\"assessmentType\":\"re\",\"assessmentDetailsLink\":\"zsdtm\",\"state\":\"Skipped\",\"passedResources\":227264468,\"failedResources\":1345633295,\"skippedResources\":1807547374,\"unsupportedResources\":1705816353},\"id\":\"ychakvy\",\"name\":\"fbqvumkxqj\",\"type\":\"iuepmaxfnzlpqmp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RegulatoryComplianceAssessment response = manager.regulatoryComplianceAssessments()
            .getWithResponse("vtzrxzhclecwwtz", "zclo", "hy", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(State.SKIPPED, response.state());
    }
}
