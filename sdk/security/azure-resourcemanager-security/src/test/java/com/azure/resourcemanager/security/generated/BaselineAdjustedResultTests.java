// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.Baseline;
import com.azure.resourcemanager.security.models.BaselineAdjustedResult;
import com.azure.resourcemanager.security.models.RuleStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BaselineAdjustedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BaselineAdjustedResult model = BinaryData.fromString(
            "{\"baseline\":{\"expectedResults\":[[\"hqnrn\",\"pxehuwrykqga\",\"fmviklby\",\"vkhbejdznx\"],[\"dsrhnjiv\",\"lvtno\",\"qfzgemjdftul\"],[\"tduceamt\",\"czu\"]],\"updatedTime\":\"2021-07-25T15:19:26Z\"},\"status\":\"NonFinding\",\"resultsNotInBaseline\":[[\"qioknssxmojm\",\"vpkjpr\"]],\"resultsOnlyInBaseline\":[[\"fz\"],[\"jyxgtczh\",\"ydbsd\",\"hmkxmaehvbb\"],[\"ripltf\",\"htba\",\"kgxywr\"]]}")
            .toObject(BaselineAdjustedResult.class);
        Assertions.assertEquals("hqnrn", model.baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-25T15:19:26Z"), model.baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.status());
        Assertions.assertEquals("qioknssxmojm", model.resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("fz", model.resultsOnlyInBaseline().get(0).get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BaselineAdjustedResult model = new BaselineAdjustedResult()
            .withBaseline(new Baseline()
                .withExpectedResults(Arrays.asList(Arrays.asList("hqnrn", "pxehuwrykqga", "fmviklby", "vkhbejdznx"),
                    Arrays.asList("dsrhnjiv", "lvtno", "qfzgemjdftul"), Arrays.asList("tduceamt", "czu")))
                .withUpdatedTime(OffsetDateTime.parse("2021-07-25T15:19:26Z")))
            .withStatus(RuleStatus.NON_FINDING)
            .withResultsNotInBaseline(Arrays.asList(Arrays.asList("qioknssxmojm", "vpkjpr")))
            .withResultsOnlyInBaseline(Arrays.asList(Arrays.asList("fz"),
                Arrays.asList("jyxgtczh", "ydbsd", "hmkxmaehvbb"), Arrays.asList("ripltf", "htba", "kgxywr")));
        model = BinaryData.fromObject(model).toObject(BaselineAdjustedResult.class);
        Assertions.assertEquals("hqnrn", model.baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-25T15:19:26Z"), model.baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.status());
        Assertions.assertEquals("qioknssxmojm", model.resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("fz", model.resultsOnlyInBaseline().get(0).get(0));
    }
}
