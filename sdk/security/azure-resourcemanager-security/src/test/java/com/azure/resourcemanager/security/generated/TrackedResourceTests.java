// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.TrackedResource;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrackedResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrackedResource model = BinaryData.fromString(
            "{\"location\":\"cxqqxmyzklaoanp\",\"kind\":\"rvmzrqra\",\"etag\":\"divznl\",\"tags\":{\"jtgzgtaiywbq\":\"lkskhjqjpvbaih\",\"mhljqlxspm\":\"roigbsfsgsaenwld\",\"ryldsxeb\":\"jc\",\"hefr\":\"hsxrznmgsdaluyc\"},\"id\":\"hs\",\"name\":\"uerbgpxebjl\",\"type\":\"dcaytujraxd\"}")
            .toObject(TrackedResource.class);
        Assertions.assertEquals("cxqqxmyzklaoanp", model.location());
        Assertions.assertEquals("rvmzrqra", model.kind());
        Assertions.assertEquals("divznl", model.etag());
        Assertions.assertEquals("lkskhjqjpvbaih", model.tags().get("jtgzgtaiywbq"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrackedResource model = new TrackedResource().withLocation("cxqqxmyzklaoanp")
            .withKind("rvmzrqra")
            .withEtag("divznl")
            .withTags(mapOf("jtgzgtaiywbq", "lkskhjqjpvbaih", "mhljqlxspm", "roigbsfsgsaenwld", "ryldsxeb", "jc",
                "hefr", "hsxrznmgsdaluyc"));
        model = BinaryData.fromObject(model).toObject(TrackedResource.class);
        Assertions.assertEquals("cxqqxmyzklaoanp", model.location());
        Assertions.assertEquals("rvmzrqra", model.kind());
        Assertions.assertEquals("divznl", model.etag());
        Assertions.assertEquals("lkskhjqjpvbaih", model.tags().get("jtgzgtaiywbq"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
