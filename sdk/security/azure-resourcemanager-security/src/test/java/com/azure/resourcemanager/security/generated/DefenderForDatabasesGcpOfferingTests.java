// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DefenderForDatabasesGcpOffering;
import com.azure.resourcemanager.security.models.DefenderForDatabasesGcpOfferingArcAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning;
import org.junit.jupiter.api.Assertions;

public final class DefenderForDatabasesGcpOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForDatabasesGcpOffering model =
            BinaryData
                .fromString(
                    "{\"offeringType\":\"DefenderForDatabasesGcp\",\"arcAutoProvisioning\":{\"enabled\":false},\"defenderForDatabasesArcAutoProvisioning\":{\"serviceAccountEmailAddress\":\"lpckaewsedves\",\"workloadIdentityProviderId\":\"xegqphr\"},\"description\":\"nzhctmjtsgh\"}")
                .toObject(DefenderForDatabasesGcpOffering.class);
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions
            .assertEquals(
                "lpckaewsedves", model.defenderForDatabasesArcAutoProvisioning().serviceAccountEmailAddress());
        Assertions
            .assertEquals("xegqphr", model.defenderForDatabasesArcAutoProvisioning().workloadIdentityProviderId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForDatabasesGcpOffering model =
            new DefenderForDatabasesGcpOffering()
                .withArcAutoProvisioning(new DefenderForDatabasesGcpOfferingArcAutoProvisioning().withEnabled(false))
                .withDefenderForDatabasesArcAutoProvisioning(
                    new DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning()
                        .withServiceAccountEmailAddress("lpckaewsedves")
                        .withWorkloadIdentityProviderId("xegqphr"));
        model = BinaryData.fromObject(model).toObject(DefenderForDatabasesGcpOffering.class);
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions
            .assertEquals(
                "lpckaewsedves", model.defenderForDatabasesArcAutoProvisioning().serviceAccountEmailAddress());
        Assertions
            .assertEquals("xegqphr", model.defenderForDatabasesArcAutoProvisioning().workloadIdentityProviderId());
    }
}
