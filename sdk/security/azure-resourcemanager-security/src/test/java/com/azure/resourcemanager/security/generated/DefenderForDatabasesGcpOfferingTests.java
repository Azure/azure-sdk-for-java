// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ArcAutoProvisioningConfiguration;
import com.azure.resourcemanager.security.models.DefenderForDatabasesGcpOffering;
import com.azure.resourcemanager.security.models.DefenderForDatabasesGcpOfferingArcAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning;
import org.junit.jupiter.api.Assertions;

public final class DefenderForDatabasesGcpOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForDatabasesGcpOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderForDatabasesGcp\",\"arcAutoProvisioning\":{\"enabled\":false,\"configuration\":{\"proxy\":\"qwypvndrwb\",\"privateLinkScope\":\"dtggrssg\"}},\"defenderForDatabasesArcAutoProvisioning\":{\"serviceAccountEmailAddress\":\"kainjmuymvecvzt\",\"workloadIdentityProviderId\":\"bgmusaictd\"},\"description\":\"nkzzohnrddclz\"}")
            .toObject(DefenderForDatabasesGcpOffering.class);
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals("qwypvndrwb", model.arcAutoProvisioning().configuration().proxy());
        Assertions.assertEquals("dtggrssg", model.arcAutoProvisioning().configuration().privateLinkScope());
        Assertions.assertEquals("kainjmuymvecvzt",
            model.defenderForDatabasesArcAutoProvisioning().serviceAccountEmailAddress());
        Assertions.assertEquals("bgmusaictd",
            model.defenderForDatabasesArcAutoProvisioning().workloadIdentityProviderId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForDatabasesGcpOffering model
            = new DefenderForDatabasesGcpOffering()
                .withArcAutoProvisioning(new DefenderForDatabasesGcpOfferingArcAutoProvisioning().withEnabled(false)
                    .withConfiguration(new ArcAutoProvisioningConfiguration().withProxy("qwypvndrwb")
                        .withPrivateLinkScope("dtggrssg")))
                .withDefenderForDatabasesArcAutoProvisioning(
                    new DefenderForDatabasesGcpOfferingDefenderForDatabasesArcAutoProvisioning()
                        .withServiceAccountEmailAddress("kainjmuymvecvzt")
                        .withWorkloadIdentityProviderId("bgmusaictd"));
        model = BinaryData.fromObject(model).toObject(DefenderForDatabasesGcpOffering.class);
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals("qwypvndrwb", model.arcAutoProvisioning().configuration().proxy());
        Assertions.assertEquals("dtggrssg", model.arcAutoProvisioning().configuration().privateLinkScope());
        Assertions.assertEquals("kainjmuymvecvzt",
            model.defenderForDatabasesArcAutoProvisioning().serviceAccountEmailAddress());
        Assertions.assertEquals("bgmusaictd",
            model.defenderForDatabasesArcAutoProvisioning().workloadIdentityProviderId());
    }
}
