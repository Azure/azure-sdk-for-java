// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DefenderCspmGcpOffering;
import com.azure.resourcemanager.security.models.DefenderCspmGcpOfferingCiemDiscovery;
import com.azure.resourcemanager.security.models.DefenderCspmGcpOfferingDataSensitivityDiscovery;
import com.azure.resourcemanager.security.models.DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8S;
import com.azure.resourcemanager.security.models.DefenderCspmGcpOfferingMdcContainersImageAssessment;
import com.azure.resourcemanager.security.models.DefenderCspmGcpOfferingVmScanners;
import com.azure.resourcemanager.security.models.ScanningMode;
import com.azure.resourcemanager.security.models.VmScannersBaseConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderCspmGcpOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderCspmGcpOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderCspmGcp\",\"ciemDiscovery\":{\"workloadIdentityProviderId\":\"m\",\"serviceAccountEmailAddress\":\"ptskwxjgvhxccb\",\"azureActiveDirectoryAppName\":\"akmkookbput\"},\"vmScanners\":{\"enabled\":false,\"configuration\":{\"scanningMode\":\"Default\",\"exclusionTags\":{\"fowzkroyr\":\"lwk\",\"zqjim\":\"urxf\"}}},\"dataSensitivityDiscovery\":{\"enabled\":false,\"workloadIdentityProviderId\":\"jxx\",\"serviceAccountEmailAddress\":\"e\"},\"mdcContainersImageAssessment\":{\"enabled\":true,\"workloadIdentityProviderId\":\"loiwy\",\"serviceAccountEmailAddress\":\"yzivrm\"},\"mdcContainersAgentlessDiscoveryK8s\":{\"enabled\":false,\"workloadIdentityProviderId\":\"lhchwhrktjleif\",\"serviceAccountEmailAddress\":\"fiplhx\"},\"description\":\"smyc\"}")
            .toObject(DefenderCspmGcpOffering.class);
        Assertions.assertEquals("m", model.ciemDiscovery().workloadIdentityProviderId());
        Assertions.assertEquals("ptskwxjgvhxccb", model.ciemDiscovery().serviceAccountEmailAddress());
        Assertions.assertEquals("akmkookbput", model.ciemDiscovery().azureActiveDirectoryAppName());
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("lwk", model.vmScanners().configuration().exclusionTags().get("fowzkroyr"));
        Assertions.assertEquals(false, model.dataSensitivityDiscovery().enabled());
        Assertions.assertEquals("jxx", model.dataSensitivityDiscovery().workloadIdentityProviderId());
        Assertions.assertEquals("e", model.dataSensitivityDiscovery().serviceAccountEmailAddress());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("loiwy", model.mdcContainersImageAssessment().workloadIdentityProviderId());
        Assertions.assertEquals("yzivrm", model.mdcContainersImageAssessment().serviceAccountEmailAddress());
        Assertions.assertEquals(false, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("lhchwhrktjleif",
            model.mdcContainersAgentlessDiscoveryK8S().workloadIdentityProviderId());
        Assertions.assertEquals("fiplhx", model.mdcContainersAgentlessDiscoveryK8S().serviceAccountEmailAddress());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderCspmGcpOffering model = new DefenderCspmGcpOffering()
            .withCiemDiscovery(new DefenderCspmGcpOfferingCiemDiscovery().withWorkloadIdentityProviderId("m")
                .withServiceAccountEmailAddress("ptskwxjgvhxccb")
                .withAzureActiveDirectoryAppName("akmkookbput"))
            .withVmScanners(new DefenderCspmGcpOfferingVmScanners().withEnabled(false)
                .withConfiguration(new VmScannersBaseConfiguration().withScanningMode(ScanningMode.DEFAULT)
                    .withExclusionTags(mapOf("fowzkroyr", "lwk", "zqjim", "urxf"))))
            .withDataSensitivityDiscovery(new DefenderCspmGcpOfferingDataSensitivityDiscovery().withEnabled(false)
                .withWorkloadIdentityProviderId("jxx")
                .withServiceAccountEmailAddress("e"))
            .withMdcContainersImageAssessment(
                new DefenderCspmGcpOfferingMdcContainersImageAssessment().withEnabled(true)
                    .withWorkloadIdentityProviderId("loiwy")
                    .withServiceAccountEmailAddress("yzivrm"))
            .withMdcContainersAgentlessDiscoveryK8S(
                new DefenderCspmGcpOfferingMdcContainersAgentlessDiscoveryK8S().withEnabled(false)
                    .withWorkloadIdentityProviderId("lhchwhrktjleif")
                    .withServiceAccountEmailAddress("fiplhx"));
        model = BinaryData.fromObject(model).toObject(DefenderCspmGcpOffering.class);
        Assertions.assertEquals("m", model.ciemDiscovery().workloadIdentityProviderId());
        Assertions.assertEquals("ptskwxjgvhxccb", model.ciemDiscovery().serviceAccountEmailAddress());
        Assertions.assertEquals("akmkookbput", model.ciemDiscovery().azureActiveDirectoryAppName());
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("lwk", model.vmScanners().configuration().exclusionTags().get("fowzkroyr"));
        Assertions.assertEquals(false, model.dataSensitivityDiscovery().enabled());
        Assertions.assertEquals("jxx", model.dataSensitivityDiscovery().workloadIdentityProviderId());
        Assertions.assertEquals("e", model.dataSensitivityDiscovery().serviceAccountEmailAddress());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("loiwy", model.mdcContainersImageAssessment().workloadIdentityProviderId());
        Assertions.assertEquals("yzivrm", model.mdcContainersImageAssessment().serviceAccountEmailAddress());
        Assertions.assertEquals(false, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("lhchwhrktjleif",
            model.mdcContainersAgentlessDiscoveryK8S().workloadIdentityProviderId());
        Assertions.assertEquals("fiplhx", model.mdcContainersAgentlessDiscoveryK8S().serviceAccountEmailAddress());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
