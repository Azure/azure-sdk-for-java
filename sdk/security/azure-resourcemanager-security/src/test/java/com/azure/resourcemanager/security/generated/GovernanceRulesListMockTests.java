// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GovernanceRulesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"tenantId\":\"sugisn\",\"displayName\":\"mwnwnghojovkey\",\"description\":\"ic\",\"remediationTimeframe\":\"xxf\",\"isGracePeriod\":false,\"rulePriority\":879841671,\"isDisabled\":true,\"ruleType\":\"Integrated\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"efx\",\"ijte\",\"dveywetkrhlol\",\"cnw\"],\"conditionSets\":[\"datafgsvbbvaqdljnpet\",\"datarnrdetawevx\",\"datahuekdxljzvdovb\",\"datablerlpr\"],\"includeMemberScopes\":true,\"ownerSource\":{\"type\":\"ByTag\",\"value\":\"dcb\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":true,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"wbpwy\",\"createdOn\":\"2021-08-23T11:20:16Z\",\"updatedBy\":\"gq\",\"updatedOn\":\"2021-09-24T02:12:17Z\"}},\"id\":\"zndasdnidmj\",\"name\":\"mvyt\",\"type\":\"kiqlarhqtwvcaze\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<GovernanceRule> response = manager.governanceRules().list("m", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mwnwnghojovkey", response.iterator().next().displayName());
        Assertions.assertEquals("ic", response.iterator().next().description());
        Assertions.assertEquals("xxf", response.iterator().next().remediationTimeframe());
        Assertions.assertEquals(false, response.iterator().next().isGracePeriod());
        Assertions.assertEquals(879841671, response.iterator().next().rulePriority());
        Assertions.assertEquals(true, response.iterator().next().isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, response.iterator().next().ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS,
            response.iterator().next().sourceResourceType());
        Assertions.assertEquals("efx", response.iterator().next().excludedScopes().get(0));
        Assertions.assertEquals(true, response.iterator().next().includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.BY_TAG, response.iterator().next().ownerSource().type());
        Assertions.assertEquals("dcb", response.iterator().next().ownerSource().value());
        Assertions.assertEquals(true,
            response.iterator().next().governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false,
            response.iterator().next().governanceEmailNotification().disableOwnerEmailNotification());
    }
}
