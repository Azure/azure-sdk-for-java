// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GovernanceRulesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"tenantId\":\"ep\",\"displayName\":\"wh\",\"description\":\"nfd\",\"remediationTimeframe\":\"ggcj\",\"isGracePeriod\":true,\"rulePriority\":1287241970,\"isDisabled\":true,\"ruleType\":\"Integrated\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"sudy\",\"ymbh\",\"osmbngkqlgxz\"],\"conditionSets\":[\"datavxd\",\"dataxexatmdmnrs\",\"datanxoirxy\"],\"includeMemberScopes\":false,\"ownerSource\":{\"type\":\"Manually\",\"value\":\"oi\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":true,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"nntwg\",\"createdOn\":\"2021-02-28T21:55:42Z\",\"updatedBy\":\"psapzu\",\"updatedOn\":\"2021-11-23T03:42:03Z\"}},\"id\":\"wytb\",\"name\":\"jzghximkg\",\"type\":\"mxpqkjnpyriwn\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<GovernanceRule> response
            = manager.governanceRules().list("apitskshfyftt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wh", response.iterator().next().displayName());
        Assertions.assertEquals("nfd", response.iterator().next().description());
        Assertions.assertEquals("ggcj", response.iterator().next().remediationTimeframe());
        Assertions.assertEquals(true, response.iterator().next().isGracePeriod());
        Assertions.assertEquals(1287241970, response.iterator().next().rulePriority());
        Assertions.assertEquals(true, response.iterator().next().isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, response.iterator().next().ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS,
            response.iterator().next().sourceResourceType());
        Assertions.assertEquals("sudy", response.iterator().next().excludedScopes().get(0));
        Assertions.assertEquals(false, response.iterator().next().includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.MANUALLY,
            response.iterator().next().ownerSource().type());
        Assertions.assertEquals("oi", response.iterator().next().ownerSource().value());
        Assertions.assertEquals(true,
            response.iterator().next().governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false,
            response.iterator().next().governanceEmailNotification().disableOwnerEmailNotification());
    }
}
