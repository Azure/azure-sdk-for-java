// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.GovernanceAssignmentInner;
import com.azure.resourcemanager.security.models.GovernanceAssignmentAdditionalData;
import com.azure.resourcemanager.security.models.GovernanceEmailNotification;
import com.azure.resourcemanager.security.models.RemediationEta;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class GovernanceAssignmentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GovernanceAssignmentInner model = BinaryData.fromString(
            "{\"properties\":{\"owner\":\"qlpqwcciuq\",\"remediationDueDate\":\"2021-06-26T04:49:16Z\",\"remediationEta\":{\"eta\":\"2021-04-01T17:41:23Z\",\"justification\":\"utauv\"},\"isGracePeriod\":true,\"governanceEmailNotification\":{\"disableManagerEmailNotification\":true,\"disableOwnerEmailNotification\":false},\"additionalData\":{\"ticketNumber\":1745648414,\"ticketLink\":\"ojoxafnndlp\",\"ticketStatus\":\"hkoymkcdyhbp\"}},\"id\":\"kpw\",\"name\":\"reqnovvqfov\",\"type\":\"jxywsuws\"}")
            .toObject(GovernanceAssignmentInner.class);
        Assertions.assertEquals("qlpqwcciuq", model.owner());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T04:49:16Z"), model.remediationDueDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T17:41:23Z"), model.remediationEta().eta());
        Assertions.assertEquals("utauv", model.remediationEta().justification());
        Assertions.assertEquals(true, model.isGracePeriod());
        Assertions.assertEquals(true, model.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableOwnerEmailNotification());
        Assertions.assertEquals(1745648414, model.additionalData().ticketNumber());
        Assertions.assertEquals("ojoxafnndlp", model.additionalData().ticketLink());
        Assertions.assertEquals("hkoymkcdyhbp", model.additionalData().ticketStatus());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GovernanceAssignmentInner model = new GovernanceAssignmentInner().withOwner("qlpqwcciuq")
            .withRemediationDueDate(OffsetDateTime.parse("2021-06-26T04:49:16Z"))
            .withRemediationEta(
                new RemediationEta().withEta(OffsetDateTime.parse("2021-04-01T17:41:23Z")).withJustification("utauv"))
            .withIsGracePeriod(true)
            .withGovernanceEmailNotification(new GovernanceEmailNotification().withDisableManagerEmailNotification(true)
                .withDisableOwnerEmailNotification(false))
            .withAdditionalData(new GovernanceAssignmentAdditionalData().withTicketNumber(1745648414)
                .withTicketLink("ojoxafnndlp")
                .withTicketStatus("hkoymkcdyhbp"));
        model = BinaryData.fromObject(model).toObject(GovernanceAssignmentInner.class);
        Assertions.assertEquals("qlpqwcciuq", model.owner());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T04:49:16Z"), model.remediationDueDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T17:41:23Z"), model.remediationEta().eta());
        Assertions.assertEquals("utauv", model.remediationEta().justification());
        Assertions.assertEquals(true, model.isGracePeriod());
        Assertions.assertEquals(true, model.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableOwnerEmailNotification());
        Assertions.assertEquals(1745648414, model.additionalData().ticketNumber());
        Assertions.assertEquals("ojoxafnndlp", model.additionalData().ticketLink());
        Assertions.assertEquals("hkoymkcdyhbp", model.additionalData().ticketStatus());
    }
}
