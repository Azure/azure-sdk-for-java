// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.AutomationInner;
import com.azure.resourcemanager.security.models.AutomationAction;
import com.azure.resourcemanager.security.models.AutomationList;
import com.azure.resourcemanager.security.models.AutomationRuleSet;
import com.azure.resourcemanager.security.models.AutomationScope;
import com.azure.resourcemanager.security.models.AutomationSource;
import com.azure.resourcemanager.security.models.EventSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AutomationListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutomationList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"description\":\"frpmpdnqqskaw\",\"isEnabled\":false,\"scopes\":[{\"description\":\"bnpqfrtqlkzme\",\"scopePath\":\"itgvkx\"},{\"description\":\"yqdrf\",\"scopePath\":\"cealzxwh\"},{\"description\":\"nsymoyqhlwigd\",\"scopePath\":\"bkbxgomfa\"}],\"sources\":[{\"eventSource\":\"Assessments\",\"ruleSets\":[{},{},{},{}]},{\"eventSource\":\"SubAssessmentsSnapshot\",\"ruleSets\":[{}]},{\"eventSource\":\"AttackPaths\",\"ruleSets\":[{},{},{}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"location\":\"jsqzhzbezk\",\"tags\":{\"vvjskgfmocwahp\":\"sidxasicdd\",\"eaahhvjhhn\":\"gat\",\"jjidjk\":\"kzyb\",\"vblbjednljlageua\":\"yxkyxvx\"},\"id\":\"lxunsmjbnkppxy\",\"name\":\"enlsvxeizzgwkln\",\"type\":\"rmffeyc\"},{\"properties\":{\"description\":\"tpiymerteea\",\"isEnabled\":true,\"scopes\":[{\"description\":\"kk\",\"scopePath\":\"ddrtkgdojb\"},{\"description\":\"vavrefdees\",\"scopePath\":\"cuijpxt\"},{\"description\":\"uwprtujwsawd\",\"scopePath\":\"ibabxvititvtzeex\"},{\"description\":\"oxtfglecdmdqbwp\",\"scopePath\":\"q\"}],\"sources\":[{\"eventSource\":\"SecureScores\",\"ruleSets\":[{},{}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"location\":\"lhhxudbxvodhtnsi\",\"tags\":{\"ckdlpag\":\"hzmme\",\"xdfgsftufqobr\":\"rcxfailcfxwmdb\",\"knh\":\"lnacgcc\"},\"id\":\"kizvytn\",\"name\":\"zvulj\",\"type\":\"aaeranokqgukk\"},{\"properties\":{\"description\":\"vbroylaxxu\",\"isEnabled\":true,\"scopes\":[{\"description\":\"osfjbjsv\",\"scopePath\":\"rwhryvycytd\"},{\"description\":\"xgccknfnw\",\"scopePath\":\"tmvpdvjdhtt\"},{\"description\":\"efedxihchrphkm\",\"scopePath\":\"jdqnsdfzpbgt\"},{\"description\":\"ylkdghrje\",\"scopePath\":\"tl\"}],\"sources\":[{\"eventSource\":\"AttackPathsSnapshot\",\"ruleSets\":[{},{}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"location\":\"vbwnhhtq\",\"tags\":{\"vgcxtx\":\"hgppipifhpfeoa\",\"smkss\":\"csheafidltugsr\"},\"id\":\"h\",\"name\":\"iftxfkf\",\"type\":\"egprhptil\"},{\"properties\":{\"description\":\"biqtgdq\",\"isEnabled\":true,\"scopes\":[{\"description\":\"ldrizetpwbra\",\"scopePath\":\"libph\"},{\"description\":\"zmizakakan\",\"scopePath\":\"p\"},{\"description\":\"jzhajoy\",\"scopePath\":\"jlmuoyxprimrsopt\"},{\"description\":\"cjmeislstvasy\",\"scopePath\":\"xdza\"}],\"sources\":[{\"eventSource\":\"Alerts\",\"ruleSets\":[{},{}]},{\"eventSource\":\"SecureScoresSnapshot\",\"ruleSets\":[{},{},{},{}]},{\"eventSource\":\"SecureScoreControls\",\"ruleSets\":[{},{},{}]},{\"eventSource\":\"AttackPaths\",\"ruleSets\":[{},{}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"location\":\"tzolbaemwmdxmeb\",\"tags\":{\"veabfqxnmwmqtib\":\"cjpahl\",\"jaeukmrsieekpn\":\"yijddtvqcttad\",\"pibudqwyxebeybpm\":\"zaapmudqmeqwi\"},\"id\":\"znrtffyaqit\",\"name\":\"hheioqaqhvseuf\",\"type\":\"qyrxp\"}],\"nextLink\":\"cgq\"}")
            .toObject(AutomationList.class);
        Assertions.assertEquals("jsqzhzbezk", model.value().get(0).location());
        Assertions.assertEquals("sidxasicdd", model.value().get(0).tags().get("vvjskgfmocwahp"));
        Assertions.assertEquals("frpmpdnqqskaw", model.value().get(0).description());
        Assertions.assertEquals(false, model.value().get(0).isEnabled());
        Assertions.assertEquals("bnpqfrtqlkzme", model.value().get(0).scopes().get(0).description());
        Assertions.assertEquals("itgvkx", model.value().get(0).scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.ASSESSMENTS, model.value().get(0).sources().get(0).eventSource());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutomationList model
            = new AutomationList()
                .withValue(
                    Arrays.asList(
                        new AutomationInner().withLocation("jsqzhzbezk")
                            .withTags(mapOf("vvjskgfmocwahp", "sidxasicdd", "eaahhvjhhn", "gat", "jjidjk", "kzyb",
                                "vblbjednljlageua", "yxkyxvx"))
                            .withDescription("frpmpdnqqskaw")
                            .withIsEnabled(false)
                            .withScopes(Arrays.asList(
                                new AutomationScope().withDescription("bnpqfrtqlkzme").withScopePath("itgvkx"),
                                new AutomationScope().withDescription("yqdrf").withScopePath("cealzxwh"),
                                new AutomationScope().withDescription("nsymoyqhlwigd").withScopePath("bkbxgomfa")))
                            .withSources(
                                Arrays.asList(
                                    new AutomationSource().withEventSource(EventSource.ASSESSMENTS)
                                        .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet(),
                                            new AutomationRuleSet(), new AutomationRuleSet())),
                                    new AutomationSource().withEventSource(EventSource.SUB_ASSESSMENTS_SNAPSHOT)
                                        .withRuleSets(Arrays.asList(new AutomationRuleSet())),
                                    new AutomationSource()
                                        .withEventSource(EventSource.ATTACK_PATHS)
                                        .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet(),
                                            new AutomationRuleSet()))))
                            .withActions(
                                Arrays.asList(
                                    new AutomationAction(), new AutomationAction(), new AutomationAction(),
                                    new AutomationAction())),
                        new AutomationInner().withLocation("lhhxudbxvodhtnsi")
                            .withTags(mapOf("ckdlpag", "hzmme", "xdfgsftufqobr", "rcxfailcfxwmdb", "knh", "lnacgcc"))
                            .withDescription("tpiymerteea")
                            .withIsEnabled(true)
                            .withScopes(
                                Arrays.asList(new AutomationScope().withDescription("kk").withScopePath("ddrtkgdojb"),
                                    new AutomationScope().withDescription("vavrefdees").withScopePath("cuijpxt"),
                                    new AutomationScope().withDescription("uwprtujwsawd")
                                        .withScopePath("ibabxvititvtzeex"),
                                    new AutomationScope().withDescription("oxtfglecdmdqbwp").withScopePath("q")))
                            .withSources(Arrays.asList(new AutomationSource().withEventSource(EventSource.SECURE_SCORES)
                                .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet()))))
                            .withActions(
                                Arrays.asList(new AutomationAction(), new AutomationAction(), new AutomationAction())),
                        new AutomationInner().withLocation("vbwnhhtq")
                            .withTags(mapOf("vgcxtx", "hgppipifhpfeoa", "smkss", "csheafidltugsr"))
                            .withDescription("vbroylaxxu")
                            .withIsEnabled(true)
                            .withScopes(Arrays.asList(
                                new AutomationScope().withDescription("osfjbjsv").withScopePath("rwhryvycytd"),
                                new AutomationScope().withDescription("xgccknfnw").withScopePath("tmvpdvjdhtt"),
                                new AutomationScope().withDescription("efedxihchrphkm").withScopePath("jdqnsdfzpbgt"),
                                new AutomationScope().withDescription("ylkdghrje").withScopePath("tl")))
                            .withSources(
                                Arrays
                                    .asList(new AutomationSource().withEventSource(EventSource.ATTACK_PATHS_SNAPSHOT)
                                        .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet()))))
                            .withActions(Arrays.asList(new AutomationAction(), new AutomationAction(),
                                new AutomationAction(), new AutomationAction())),
                        new AutomationInner().withLocation("tzolbaemwmdxmeb")
                            .withTags(mapOf("veabfqxnmwmqtib", "cjpahl", "jaeukmrsieekpn", "yijddtvqcttad",
                                "pibudqwyxebeybpm", "zaapmudqmeqwi"))
                            .withDescription("biqtgdq")
                            .withIsEnabled(true)
                            .withScopes(Arrays.asList(
                                new AutomationScope().withDescription("ldrizetpwbra").withScopePath("libph"),
                                new AutomationScope().withDescription("zmizakakan").withScopePath("p"),
                                new AutomationScope().withDescription("jzhajoy").withScopePath("jlmuoyxprimrsopt"),
                                new AutomationScope().withDescription("cjmeislstvasy").withScopePath("xdza")))
                            .withSources(Arrays.asList(
                                new AutomationSource().withEventSource(EventSource.ALERTS)
                                    .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet())),
                                new AutomationSource().withEventSource(EventSource.SECURE_SCORES_SNAPSHOT)
                                    .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet(),
                                        new AutomationRuleSet(), new AutomationRuleSet())),
                                new AutomationSource().withEventSource(EventSource.SECURE_SCORE_CONTROLS)
                                    .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet(),
                                        new AutomationRuleSet())),
                                new AutomationSource().withEventSource(EventSource.ATTACK_PATHS)
                                    .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet()))))
                            .withActions(Arrays.asList(new AutomationAction(), new AutomationAction(),
                                new AutomationAction(), new AutomationAction()))));
        model = BinaryData.fromObject(model).toObject(AutomationList.class);
        Assertions.assertEquals("jsqzhzbezk", model.value().get(0).location());
        Assertions.assertEquals("sidxasicdd", model.value().get(0).tags().get("vvjskgfmocwahp"));
        Assertions.assertEquals("frpmpdnqqskaw", model.value().get(0).description());
        Assertions.assertEquals(false, model.value().get(0).isEnabled());
        Assertions.assertEquals("bnpqfrtqlkzme", model.value().get(0).scopes().get(0).description());
        Assertions.assertEquals("itgvkx", model.value().get(0).scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.ASSESSMENTS, model.value().get(0).sources().get(0).eventSource());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
