// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AzureDevOpsOrgListResponse;
import com.azure.resourcemanager.security.models.DevOpsProvisioningState;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AzureDevOpsOrgsListAvailableWithResponseMockTests {
    @Test
    public void testListAvailableWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningStatusMessage\":\"rjgobekxeheowsec\",\"provisioningStatusUpdateTimeUtc\":\"2021-05-17T18:35:57Z\",\"provisioningState\":\"DeletionFailure\",\"onboardingState\":\"OnboardedByOtherConnector\",\"actionableRemediation\":{\"state\":\"Disabled\",\"categoryConfigurations\":[{},{}],\"branchConfiguration\":{},\"inheritFromParentState\":\"Disabled\"}},\"id\":\"db\",\"name\":\"seesacuicnvq\",\"type\":\"qsuivmrfaptndrmm\"},{\"properties\":{\"provisioningStatusMessage\":\"k\",\"provisioningStatusUpdateTimeUtc\":\"2021-03-13T11:10:31Z\",\"provisioningState\":\"DeletionSuccess\",\"onboardingState\":\"OnboardedByOtherConnector\",\"actionableRemediation\":{\"state\":\"Disabled\",\"categoryConfigurations\":[{},{}],\"branchConfiguration\":{},\"inheritFromParentState\":\"Enabled\"}},\"id\":\"eqrfzavqymcwts\",\"name\":\"uceplbrzgkuorwp\",\"type\":\"b\"},{\"properties\":{\"provisioningStatusMessage\":\"obptscruy\",\"provisioningStatusUpdateTimeUtc\":\"2021-01-31T16:56:08Z\",\"provisioningState\":\"Pending\",\"onboardingState\":\"NotApplicable\",\"actionableRemediation\":{\"state\":\"Enabled\",\"categoryConfigurations\":[{},{},{},{}],\"branchConfiguration\":{},\"inheritFromParentState\":\"Disabled\"}},\"id\":\"smsbnlyoifg\",\"name\":\"fzjqthy\",\"type\":\"cvoevcwfz\"}],\"nextLink\":\"kxxlwwo\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsOrgListResponse response = manager.azureDevOpsOrgs()
            .listAvailableWithResponse("jveugpxzeemp", "pbscboxr", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(DevOpsProvisioningState.DELETION_FAILURE,
            response.value().get(0).properties().provisioningState());
        Assertions.assertEquals(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR,
            response.value().get(0).properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.DISABLED,
            response.value().get(0).properties().actionableRemediation().state());
        Assertions.assertEquals(InheritFromParentState.DISABLED,
            response.value().get(0).properties().actionableRemediation().inheritFromParentState());
        Assertions.assertEquals("kxxlwwo", response.nextLink());
    }
}
