// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.SecurityConnectorInner;
import com.azure.resourcemanager.security.models.CloudName;
import com.azure.resourcemanager.security.models.CloudOffering;
import com.azure.resourcemanager.security.models.EnvironmentData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecurityConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecurityConnectorInner model = BinaryData.fromString(
            "{\"properties\":{\"hierarchyIdentifier\":\"z\",\"hierarchyIdentifierTrialEndDate\":\"2021-05-18T23:48Z\",\"environmentName\":\"GCP\",\"offerings\":[{\"offeringType\":\"CloudOffering\",\"description\":\"yophz\"},{\"offeringType\":\"CloudOffering\",\"description\":\"l\"},{\"offeringType\":\"CloudOffering\",\"description\":\"crpfbcunez\"}],\"environmentData\":{\"environmentType\":\"EnvironmentData\"}},\"location\":\"e\",\"tags\":{\"psihcla\":\"fwyfwlwxjwet\",\"tcmwqkchc\":\"zvaylptrsqqw\",\"xfdeqvhpsyl\":\"waxfewzjkj\",\"bffmbmxz\":\"ksh\"},\"id\":\"rgywwp\",\"name\":\"jx\",\"type\":\"nptfujgi\"}")
            .toObject(SecurityConnectorInner.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("fwyfwlwxjwet", model.tags().get("psihcla"));
        Assertions.assertEquals("z", model.hierarchyIdentifier());
        Assertions.assertEquals(CloudName.GCP, model.environmentName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecurityConnectorInner model = new SecurityConnectorInner().withLocation("e")
            .withTags(mapOf("psihcla", "fwyfwlwxjwet", "tcmwqkchc", "zvaylptrsqqw", "xfdeqvhpsyl", "waxfewzjkj",
                "bffmbmxz", "ksh"))
            .withHierarchyIdentifier("z")
            .withEnvironmentName(CloudName.GCP)
            .withOfferings(Arrays.asList(new CloudOffering(), new CloudOffering(), new CloudOffering()))
            .withEnvironmentData(new EnvironmentData());
        model = BinaryData.fromObject(model).toObject(SecurityConnectorInner.class);
        Assertions.assertEquals("e", model.location());
        Assertions.assertEquals("fwyfwlwxjwet", model.tags().get("psihcla"));
        Assertions.assertEquals("z", model.hierarchyIdentifier());
        Assertions.assertEquals(CloudName.GCP, model.environmentName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
