// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.SecurityConnectorInner;
import com.azure.resourcemanager.security.models.CloudName;
import com.azure.resourcemanager.security.models.CloudOffering;
import com.azure.resourcemanager.security.models.EnvironmentData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecurityConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecurityConnectorInner model = BinaryData.fromString(
            "{\"properties\":{\"hierarchyIdentifier\":\"rctat\",\"hierarchyIdentifierTrialEndDate\":\"2021-04-07T20:43:54Z\",\"environmentName\":\"Github\",\"offerings\":[{\"offeringType\":\"CloudOffering\",\"description\":\"rlcyrduc\"},{\"offeringType\":\"CloudOffering\",\"description\":\"go\"},{\"offeringType\":\"CloudOffering\",\"description\":\"y\"},{\"offeringType\":\"CloudOffering\",\"description\":\"rucvcrrpcjttbs\"}],\"environmentData\":{\"environmentType\":\"EnvironmentData\"}},\"location\":\"jeaq\",\"tags\":{\"oxmlghktuidv\":\"vvf\",\"lpdwwexymzvlazi\":\"ma\"},\"id\":\"bhpwvqsgnyy\",\"name\":\"uzivensrpmeyyvp\",\"type\":\"patlbijp\"}")
            .toObject(SecurityConnectorInner.class);
        Assertions.assertEquals("jeaq", model.location());
        Assertions.assertEquals("vvf", model.tags().get("oxmlghktuidv"));
        Assertions.assertEquals("rctat", model.hierarchyIdentifier());
        Assertions.assertEquals(CloudName.GITHUB, model.environmentName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecurityConnectorInner model = new SecurityConnectorInner().withLocation("jeaq")
            .withTags(mapOf("oxmlghktuidv", "vvf", "lpdwwexymzvlazi", "ma")).withHierarchyIdentifier("rctat")
            .withEnvironmentName(CloudName.GITHUB)
            .withOfferings(
                Arrays.asList(new CloudOffering(), new CloudOffering(), new CloudOffering(), new CloudOffering()))
            .withEnvironmentData(new EnvironmentData());
        model = BinaryData.fromObject(model).toObject(SecurityConnectorInner.class);
        Assertions.assertEquals("jeaq", model.location());
        Assertions.assertEquals("vvf", model.tags().get("oxmlghktuidv"));
        Assertions.assertEquals("rctat", model.hierarchyIdentifier());
        Assertions.assertEquals(CloudName.GITHUB, model.environmentName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
