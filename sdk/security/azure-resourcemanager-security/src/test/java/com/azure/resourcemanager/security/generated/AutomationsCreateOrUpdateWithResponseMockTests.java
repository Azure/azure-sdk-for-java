// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.Automation;
import com.azure.resourcemanager.security.models.AutomationAction;
import com.azure.resourcemanager.security.models.AutomationRuleSet;
import com.azure.resourcemanager.security.models.AutomationScope;
import com.azure.resourcemanager.security.models.AutomationSource;
import com.azure.resourcemanager.security.models.EventSource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AutomationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"zdlbybpaxhpz\",\"isEnabled\":false,\"scopes\":[{\"description\":\"wbh\",\"scopePath\":\"zges\"},{\"description\":\"shagpahn\",\"scopePath\":\"pbyfyvynpmggq\"},{\"description\":\"g\",\"scopePath\":\"vqbugihcdvfoizo\"},{\"description\":\"loejzsaxzgkqw\",\"scopePath\":\"eppjnaphifkfrp\"}],\"sources\":[{\"eventSource\":\"SecureScoreControls\",\"ruleSets\":[{},{},{}]},{\"eventSource\":\"AssessmentsSnapshot\",\"ruleSets\":[{},{},{},{}]},{\"eventSource\":\"RegulatoryComplianceAssessment\",\"ruleSets\":[{}]},{\"eventSource\":\"SecureScoresSnapshot\",\"ruleSets\":[{}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"location\":\"pkimskhnk\",\"tags\":{\"rcmelycpgokut\":\"ykrsm\",\"nv\":\"rvybnz\",\"uzzlapyixlvzcgul\":\"sh\"},\"id\":\"ebxiauqsuptessj\",\"name\":\"wjt\",\"type\":\"tpvb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Automation response
            = manager.automations()
                .define("zqzqweuydybnairv")
                .withRegion("peygkbzb")
                .withExistingResourceGroup("g")
                .withTags(mapOf("pmhttuvsqjsrvjnq", "sybxhqvov", "qbfkceincnrecjbi", "aqg", "sqsvzvmxtc",
                    "wevsfgdrmnszdosm", "hgsulwvgs", "ghndae"))
                .withDescription("sv")
                .withIsEnabled(false)
                .withScopes(
                    Arrays.asList(new AutomationScope().withDescription("atrcnqnvncpr").withScopePath("sjvjnkoiznz"),
                        new AutomationScope().withDescription("biba").withScopePath("gicovjt"),
                        new AutomationScope().withDescription("wr").withScopePath("xyvu")))
                .withSources(
                    Arrays.asList(
                        new AutomationSource().withEventSource(EventSource.REGULATORY_COMPLIANCE_ASSESSMENT_SNAPSHOT)
                            .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet(),
                                new AutomationRuleSet())),
                        new AutomationSource().withEventSource(EventSource.ASSESSMENTS)
                            .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet())),
                        new AutomationSource().withEventSource(EventSource.SECURE_SCORES)
                            .withRuleSets(Arrays.asList(new AutomationRuleSet(), new AutomationRuleSet(),
                                new AutomationRuleSet()))))
                .withActions(Arrays.asList(new AutomationAction(), new AutomationAction(), new AutomationAction(),
                    new AutomationAction()))
                .create();

        Assertions.assertEquals("pkimskhnk", response.location());
        Assertions.assertEquals("ykrsm", response.tags().get("rcmelycpgokut"));
        Assertions.assertEquals("zdlbybpaxhpz", response.description());
        Assertions.assertEquals(false, response.isEnabled());
        Assertions.assertEquals("wbh", response.scopes().get(0).description());
        Assertions.assertEquals("zges", response.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.SECURE_SCORE_CONTROLS, response.sources().get(0).eventSource());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
