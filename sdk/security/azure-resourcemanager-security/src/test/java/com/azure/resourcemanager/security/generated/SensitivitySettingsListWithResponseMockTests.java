// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GetSensitivitySettingsListResponse;
import com.azure.resourcemanager.security.models.MipIntegrationStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SensitivitySettingsListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"sensitiveInfoTypesIds\":[\"1c04bd6e-074d-467e-8a0c-d5e0538bd22b\",\"94d42dd5-8b73-46c4-8ff8-404528a56512\",\"315e7a4d-4bba-471a-9317-db89856cc680\",\"9ae3ecd8-2768-4677-aed8-c58406b859e8\"],\"sensitivityThresholdLabelOrder\":0.48926473,\"sensitivityThresholdLabelId\":\"bac99707-f813-4c1c-a5f9-be2f25e833e8\",\"mipInformation\":{\"mipIntegrationStatus\":\"noConsent\",\"labels\":[{},{}],\"customInfoTypes\":[{},{},{}],\"builtInInfoTypes\":[{},{}]}},\"id\":\"ejjxumowynjmo\",\"name\":\"zmxuktdrsjtmnk\",\"type\":\"jouwfzcfdt\"},{\"properties\":{\"sensitiveInfoTypesIds\":[\"ffc9460a-876b-4cab-9cfd-63cabcd3bb65\",\"40612ec9-e767-489c-8abd-f27d435dffdf\"],\"sensitivityThresholdLabelOrder\":14.436942,\"sensitivityThresholdLabelId\":\"b3e8d67e-f00e-46f0-86ba-ce1d01ff9bb7\",\"mipInformation\":{\"mipIntegrationStatus\":\"noAutoLabelingRules\",\"labels\":[{},{}],\"customInfoTypes\":[{},{}],\"builtInInfoTypes\":[{},{},{},{}]}},\"id\":\"isqbcmlro\",\"name\":\"ommemsoqgbl\",\"type\":\"yeqdob\"},{\"properties\":{\"sensitiveInfoTypesIds\":[\"f1942607-5346-466f-99eb-da8d6caf7a45\",\"e9f658b8-904e-4d80-82c7-303799032f6d\"],\"sensitivityThresholdLabelOrder\":41.067593,\"sensitivityThresholdLabelId\":\"de8518f8-060f-4d03-8e2c-e7500190c96a\",\"mipInformation\":{\"mipIntegrationStatus\":\"noConsent\",\"labels\":[{}],\"customInfoTypes\":[{},{}],\"builtInInfoTypes\":[{},{},{},{}]}},\"id\":\"ixwnlpjcx\",\"name\":\"jgfmyqyyfr\",\"type\":\"idzfpsfy\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        GetSensitivitySettingsListResponse response
            = manager.sensitivitySettings().listWithResponse(com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(UUID.fromString("1c04bd6e-074d-467e-8a0c-d5e0538bd22b"),
            response.value().get(0).properties().sensitiveInfoTypesIds().get(0));
        Assertions.assertEquals(0.48926473F, response.value().get(0).properties().sensitivityThresholdLabelOrder());
        Assertions.assertEquals(UUID.fromString("bac99707-f813-4c1c-a5f9-be2f25e833e8"),
            response.value().get(0).properties().sensitivityThresholdLabelId());
        Assertions.assertEquals(MipIntegrationStatus.NO_CONSENT,
            response.value().get(0).properties().mipInformation().mipIntegrationStatus());
    }
}
