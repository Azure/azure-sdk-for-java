// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.ScanInner;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanInner model = BinaryData.fromString(
            "{\"properties\":{\"triggerType\":\"OnDemand\",\"state\":\"Failed\",\"server\":\"ircgpikpz\",\"database\":\"ejzanlfz\",\"sqlVersion\":\"av\",\"startTime\":\"2021-07-20T21:52:58Z\",\"endTime\":\"2021-04-27T08:06:47Z\",\"highSeverityFailedRulesCount\":392764686,\"mediumSeverityFailedRulesCount\":185109829,\"lowSeverityFailedRulesCount\":988966310,\"totalPassedRulesCount\":115638191,\"totalFailedRulesCount\":1122267125,\"totalRulesCount\":1711524187,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-01-31T15:02:11Z\"},\"id\":\"lazszrn\",\"name\":\"oiindfpwpjy\",\"type\":\"wbtlhflsjcdh\"}")
            .toObject(ScanInner.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.properties().triggerType());
        Assertions.assertEquals(ScanState.FAILED, model.properties().state());
        Assertions.assertEquals("ircgpikpz", model.properties().server());
        Assertions.assertEquals("ejzanlfz", model.properties().database());
        Assertions.assertEquals("av", model.properties().sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T21:52:58Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-27T08:06:47Z"), model.properties().endTime());
        Assertions.assertEquals(392764686, model.properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(185109829, model.properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(988966310, model.properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(115638191, model.properties().totalPassedRulesCount());
        Assertions.assertEquals(1122267125, model.properties().totalFailedRulesCount());
        Assertions.assertEquals(1711524187, model.properties().totalRulesCount());
        Assertions.assertEquals(false, model.properties().isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T15:02:11Z"), model.properties().lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanInner model = new ScanInner().withProperties(new ScanProperties().withTriggerType(ScanTriggerType.ON_DEMAND)
            .withState(ScanState.FAILED)
            .withServer("ircgpikpz")
            .withDatabase("ejzanlfz")
            .withSqlVersion("av")
            .withStartTime(OffsetDateTime.parse("2021-07-20T21:52:58Z"))
            .withEndTime(OffsetDateTime.parse("2021-04-27T08:06:47Z"))
            .withHighSeverityFailedRulesCount(392764686)
            .withMediumSeverityFailedRulesCount(185109829)
            .withLowSeverityFailedRulesCount(988966310)
            .withTotalPassedRulesCount(115638191)
            .withTotalFailedRulesCount(1122267125)
            .withTotalRulesCount(1711524187)
            .withIsBaselineApplied(false)
            .withLastScanTime(OffsetDateTime.parse("2021-01-31T15:02:11Z")));
        model = BinaryData.fromObject(model).toObject(ScanInner.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.properties().triggerType());
        Assertions.assertEquals(ScanState.FAILED, model.properties().state());
        Assertions.assertEquals("ircgpikpz", model.properties().server());
        Assertions.assertEquals("ejzanlfz", model.properties().database());
        Assertions.assertEquals("av", model.properties().sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T21:52:58Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-27T08:06:47Z"), model.properties().endTime());
        Assertions.assertEquals(392764686, model.properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(185109829, model.properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(988966310, model.properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(115638191, model.properties().totalPassedRulesCount());
        Assertions.assertEquals(1122267125, model.properties().totalFailedRulesCount());
        Assertions.assertEquals(1711524187, model.properties().totalRulesCount());
        Assertions.assertEquals(false, model.properties().isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T15:02:11Z"), model.properties().lastScanTime());
    }
}
