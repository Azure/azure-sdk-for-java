// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.ScanInner;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"triggerType\":\"Recurring\",\"state\":\"Passed\",\"server\":\"apcz\",\"database\":\"okjye\",\"sqlVersion\":\"kvnipjoxz\",\"startTime\":\"2021-09-07T17:28:25Z\",\"endTime\":\"2021-08-30T22:34:51Z\",\"highSeverityFailedRulesCount\":1243443225,\"mediumSeverityFailedRulesCount\":1948326965,\"lowSeverityFailedRulesCount\":1187742248,\"totalPassedRulesCount\":1804300161,\"totalFailedRulesCount\":1543997460,\"totalRulesCount\":1345546955,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-10-17T17:25:15Z\"},\"id\":\"jwyahuxinpmqnja\",\"name\":\"wixjsprozvcp\",\"type\":\"tegjvwmf\"}")
                .toObject(ScanInner.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.properties().triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.properties().state());
        Assertions.assertEquals("apcz", model.properties().server());
        Assertions.assertEquals("okjye", model.properties().database());
        Assertions.assertEquals("kvnipjoxz", model.properties().sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T17:28:25Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T22:34:51Z"), model.properties().endTime());
        Assertions.assertEquals(1243443225, model.properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(1948326965, model.properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(1187742248, model.properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(1804300161, model.properties().totalPassedRulesCount());
        Assertions.assertEquals(1543997460, model.properties().totalFailedRulesCount());
        Assertions.assertEquals(1345546955, model.properties().totalRulesCount());
        Assertions.assertEquals(false, model.properties().isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T17:25:15Z"), model.properties().lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanInner model =
            new ScanInner()
                .withProperties(
                    new ScanProperties()
                        .withTriggerType(ScanTriggerType.RECURRING)
                        .withState(ScanState.PASSED)
                        .withServer("apcz")
                        .withDatabase("okjye")
                        .withSqlVersion("kvnipjoxz")
                        .withStartTime(OffsetDateTime.parse("2021-09-07T17:28:25Z"))
                        .withEndTime(OffsetDateTime.parse("2021-08-30T22:34:51Z"))
                        .withHighSeverityFailedRulesCount(1243443225)
                        .withMediumSeverityFailedRulesCount(1948326965)
                        .withLowSeverityFailedRulesCount(1187742248)
                        .withTotalPassedRulesCount(1804300161)
                        .withTotalFailedRulesCount(1543997460)
                        .withTotalRulesCount(1345546955)
                        .withIsBaselineApplied(false)
                        .withLastScanTime(OffsetDateTime.parse("2021-10-17T17:25:15Z")));
        model = BinaryData.fromObject(model).toObject(ScanInner.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.properties().triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.properties().state());
        Assertions.assertEquals("apcz", model.properties().server());
        Assertions.assertEquals("okjye", model.properties().database());
        Assertions.assertEquals("kvnipjoxz", model.properties().sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T17:28:25Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T22:34:51Z"), model.properties().endTime());
        Assertions.assertEquals(1243443225, model.properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(1948326965, model.properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(1187742248, model.properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(1804300161, model.properties().totalPassedRulesCount());
        Assertions.assertEquals(1543997460, model.properties().totalFailedRulesCount());
        Assertions.assertEquals(1345546955, model.properties().totalRulesCount());
        Assertions.assertEquals(false, model.properties().isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T17:25:15Z"), model.properties().lastScanTime());
    }
}
