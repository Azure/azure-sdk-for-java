// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.InformationProtectionPolicyInner;
import com.azure.resourcemanager.security.models.InformationProtectionPolicyList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public final class InformationProtectionPolicyListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InformationProtectionPolicyList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"lastModifiedUtc\":\"2021-01-14T06:42:30Z\",\"version\":\"btndo\",\"labels\":{},\"informationTypes\":{}},\"id\":\"gbjcntujitcjed\",\"name\":\"twwaezkojvdcpzf\",\"type\":\"qouicybxarzgsz\"},{\"properties\":{\"lastModifiedUtc\":\"2021-07-26T12:22:12Z\",\"version\":\"iqopidoamciod\",\"labels\":{},\"informationTypes\":{}},\"id\":\"azxkhnzbonlwnto\",\"name\":\"gokdwbwhks\",\"type\":\"zcmrvexztvb\"}],\"nextLink\":\"gsfraoyzkoow\"}")
                .toObject(InformationProtectionPolicyList.class);
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InformationProtectionPolicyList model =
            new InformationProtectionPolicyList()
                .withValue(
                    Arrays
                        .asList(
                            new InformationProtectionPolicyInner().withLabels(mapOf()).withInformationTypes(mapOf()),
                            new InformationProtectionPolicyInner().withLabels(mapOf()).withInformationTypes(mapOf())));
        model = BinaryData.fromObject(model).toObject(InformationProtectionPolicyList.class);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
