// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyInitiatePort;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyInitiateRequest;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyInitiateVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessRequest;
import com.azure.resourcemanager.security.models.Status;
import com.azure.resourcemanager.security.models.StatusReason;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesInitiateWithResponseMockTests {
    @Test
    public void testInitiateWithResponse() throws Exception {
        String responseStr
            = "{\"virtualMachines\":[{\"id\":\"hzbjecdsysxnkuhv\",\"ports\":[{\"number\":1607873099,\"allowedSourceAddressPrefix\":\"evzcrrwnk\",\"allowedSourceAddressPrefixes\":[\"wq\",\"mxsfqeaxdqe\",\"uvmsaq\"],\"endTimeUtc\":\"2021-08-28T10:26:59Z\",\"status\":\"Revoked\",\"statusReason\":\"Expired\",\"mappedPort\":1893729388},{\"number\":33647393,\"allowedSourceAddressPrefix\":\"wu\",\"allowedSourceAddressPrefixes\":[\"zfz\",\"fgpbcbkc\",\"ympdjieas\"],\"endTimeUtc\":\"2021-09-06T02:22:02Z\",\"status\":\"Initiated\",\"statusReason\":\"Expired\",\"mappedPort\":755472568},{\"number\":605092435,\"allowedSourceAddressPrefix\":\"usrgno\",\"allowedSourceAddressPrefixes\":[\"hbmjphlyyu\"],\"endTimeUtc\":\"2021-11-16T11:41:38Z\",\"status\":\"Initiated\",\"statusReason\":\"UserRequested\",\"mappedPort\":2042897048},{\"number\":478103772,\"allowedSourceAddressPrefix\":\"vqzrurgbqaucp\",\"allowedSourceAddressPrefixes\":[\"jnohafwm\",\"pgjl\"],\"endTimeUtc\":\"2021-06-17T18:56:28Z\",\"status\":\"Initiated\",\"statusReason\":\"NewerRequestInitiated\",\"mappedPort\":453611589}]},{\"id\":\"eametsdwxfa\",\"ports\":[{\"number\":123132790,\"allowedSourceAddressPrefix\":\"cfegsa\",\"allowedSourceAddressPrefixes\":[\"hou\",\"vkandhooimazkm\"],\"endTimeUtc\":\"2021-01-04T11:04:20Z\",\"status\":\"Initiated\",\"statusReason\":\"UserRequested\",\"mappedPort\":347612500}]},{\"id\":\"mfvybfmpotal\",\"ports\":[{\"number\":363431438,\"allowedSourceAddressPrefix\":\"grxxt\",\"allowedSourceAddressPrefixes\":[\"dbqeo\",\"ldmxxbjh\"],\"endTimeUtc\":\"2021-05-01T23:34:44Z\",\"status\":\"Revoked\",\"statusReason\":\"NewerRequestInitiated\",\"mappedPort\":458812901},{\"number\":1875997616,\"allowedSourceAddressPrefix\":\"wqlwdflgqrplzeqz\",\"allowedSourceAddressPrefixes\":[\"b\",\"ffgxtaelxtpfc\",\"atbx\"],\"endTimeUtc\":\"2021-05-29T00:00:49Z\",\"status\":\"Initiated\",\"statusReason\":\"UserRequested\",\"mappedPort\":1178540321},{\"number\":1802136459,\"allowedSourceAddressPrefix\":\"mxvztsh\",\"allowedSourceAddressPrefixes\":[\"fbpeigkflvovriq\",\"uzwbkqcgzygtdj\"],\"endTimeUtc\":\"2021-01-20T16:52:27Z\",\"status\":\"Revoked\",\"statusReason\":\"Expired\",\"mappedPort\":2053526030},{\"number\":960035835,\"allowedSourceAddressPrefix\":\"ur\",\"allowedSourceAddressPrefixes\":[\"yyumhzpst\",\"cqacvttyh\",\"bilnszyjbuw\"],\"endTimeUtc\":\"2021-06-01T00:46:50Z\",\"status\":\"Initiated\",\"statusReason\":\"UserRequested\",\"mappedPort\":1756576324}]},{\"id\":\"scizvkayioxp\",\"ports\":[{\"number\":480483601,\"allowedSourceAddressPrefix\":\"blclef\",\"allowedSourceAddressPrefixes\":[\"bodvdgfuakqs\",\"ym\",\"f\"],\"endTimeUtc\":\"2021-02-14T22:31:05Z\",\"status\":\"Initiated\",\"statusReason\":\"NewerRequestInitiated\",\"mappedPort\":1421687029}]}],\"startTimeUtc\":\"2021-11-19T07:28:52Z\",\"requestor\":\"uqktck\",\"justification\":\"bpkfnxrlncmlz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 202, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        JitNetworkAccessRequest response
            = manager.jitNetworkAccessPolicies()
                .initiateWithResponse("jzrfx", "jtbcqjkbkjcurxr", "wyzrieitqml",
                    new JitNetworkAccessPolicyInitiateRequest()
                        .withVirtualMachines(Arrays.asList(
                            new JitNetworkAccessPolicyInitiateVirtualMachine().withId("wtbdzq")
                                .withPorts(Arrays.asList(
                                    new JitNetworkAccessPolicyInitiatePort().withNumber(872925035)
                                        .withAllowedSourceAddressPrefix("mpebfhlgeeh")
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-05-06T13:31:45Z")),
                                    new JitNetworkAccessPolicyInitiatePort().withNumber(1197957158)
                                        .withAllowedSourceAddressPrefix("plnl")
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-11-08T22:55:55Z")))),
                            new JitNetworkAccessPolicyInitiateVirtualMachine().withId("feszunbua")
                                .withPorts(Arrays.asList(new JitNetworkAccessPolicyInitiatePort().withNumber(85834269)
                                    .withAllowedSourceAddressPrefix("buk")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-05-12T12:31:58Z")))),
                            new JitNetworkAccessPolicyInitiateVirtualMachine().withId("ierz")
                                .withPorts(Arrays.asList(new JitNetworkAccessPolicyInitiatePort().withNumber(1361727302)
                                    .withAllowedSourceAddressPrefix("vvequz")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-04-22T16:09:36Z"))))))
                        .withJustification("pg"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("hzbjecdsysxnkuhv", response.virtualMachines().get(0).id());
        Assertions.assertEquals(1607873099, response.virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals("evzcrrwnk",
            response.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("wq",
            response.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T10:26:59Z"),
            response.virtualMachines().get(0).ports().get(0).endTimeUtc());
        Assertions.assertEquals(Status.REVOKED, response.virtualMachines().get(0).ports().get(0).status());
        Assertions.assertEquals(StatusReason.EXPIRED, response.virtualMachines().get(0).ports().get(0).statusReason());
        Assertions.assertEquals(1893729388, response.virtualMachines().get(0).ports().get(0).mappedPort());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-19T07:28:52Z"), response.startTimeUtc());
        Assertions.assertEquals("uqktck", response.requestor());
        Assertions.assertEquals("bpkfnxrlncmlz", response.justification());
    }
}
