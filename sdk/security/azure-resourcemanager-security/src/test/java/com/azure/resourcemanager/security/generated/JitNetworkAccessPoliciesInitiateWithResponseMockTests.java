// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyInitiatePort;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyInitiateRequest;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyInitiateVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessRequest;
import com.azure.resourcemanager.security.models.Status;
import com.azure.resourcemanager.security.models.StatusReason;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesInitiateWithResponseMockTests {
    @Test
    public void testInitiateWithResponse() throws Exception {
        String responseStr
            = "{\"virtualMachines\":[{\"id\":\"ckze\",\"ports\":[{\"number\":845242945,\"allowedSourceAddressPrefix\":\"wdxgyypm\",\"allowedSourceAddressPrefixes\":[\"lmlnxrcatkuh\",\"k\"],\"endTimeUtc\":\"2021-05-05T23:28:06Z\",\"status\":\"Initiated\",\"statusReason\":\"UserRequested\",\"mappedPort\":730100218},{\"number\":1079004698,\"allowedSourceAddressPrefix\":\"l\",\"allowedSourceAddressPrefixes\":[\"hoxfzz\",\"dmupbusxyug\",\"zwplxzgzumnotii\"],\"endTimeUtc\":\"2021-01-17T15:19:07Z\",\"status\":\"Revoked\",\"statusReason\":\"Expired\",\"mappedPort\":1258337077}]},{\"id\":\"b\",\"ports\":[{\"number\":264839813,\"allowedSourceAddressPrefix\":\"wyshybbnhtt\",\"allowedSourceAddressPrefixes\":[\"onzsurqcoj\",\"sfzhzzcarciuoxyi\",\"dthjfvnhwsgnsput\",\"e\"],\"endTimeUtc\":\"2021-03-28T05:21:55Z\",\"status\":\"Revoked\",\"statusReason\":\"UserRequested\",\"mappedPort\":409872062}]}],\"startTimeUtc\":\"2021-03-17T22:16:34Z\",\"requestor\":\"ssjgbfbb\",\"justification\":\"h\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 202, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        JitNetworkAccessRequest response = manager.jitNetworkAccessPolicies()
            .initiateWithResponse("pqlrzhtocjzfppex", "va", "zwn",
                new JitNetworkAccessPolicyInitiateRequest()
                    .withVirtualMachines(Arrays.asList(
                        new JitNetworkAccessPolicyInitiateVirtualMachine().withId("wgiitvjcmimbms")
                            .withPorts(Arrays.asList(
                                new JitNetworkAccessPolicyInitiatePort().withNumber(1036656620)
                                    .withAllowedSourceAddressPrefix("bb")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-04-04T03:14:25Z")),
                                new JitNetworkAccessPolicyInitiatePort().withNumber(353490881)
                                    .withAllowedSourceAddressPrefix("plodaqrbkpozf")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-05-10T12:23:57Z")),
                                new JitNetworkAccessPolicyInitiatePort().withNumber(15267132)
                                    .withAllowedSourceAddressPrefix("ggvalcrqaxlmbrtv")
                                    .withEndTimeUtc(OffsetDateTime.parse("2020-12-23T07:07:47Z")),
                                new JitNetworkAccessPolicyInitiatePort().withNumber(1624933557)
                                    .withAllowedSourceAddressPrefix("mlplgtlayyxhx")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-05-30T12:16:43Z")))),
                        new JitNetworkAccessPolicyInitiateVirtualMachine().withId("oysxaqq")
                            .withPorts(Arrays.asList(
                                new JitNetworkAccessPolicyInitiatePort().withNumber(227751851)
                                    .withAllowedSourceAddressPrefix("hfaobqnjcsb")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-10-18T15:26:10Z")),
                                new JitNetworkAccessPolicyInitiatePort().withNumber(1764863827)
                                    .withAllowedSourceAddressPrefix("dqwssydvwrybivyw")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-11-04T17:30:10Z")))),
                        new JitNetworkAccessPolicyInitiateVirtualMachine().withId("jnjuvtzijrdlxba")
                            .withPorts(Arrays.asList(
                                new JitNetworkAccessPolicyInitiatePort().withNumber(20225632)
                                    .withAllowedSourceAddressPrefix("pkv")
                                    .withEndTimeUtc(OffsetDateTime.parse("2020-12-25T02:48:57Z")),
                                new JitNetworkAccessPolicyInitiatePort().withNumber(1763835283)
                                    .withAllowedSourceAddressPrefix("dzf")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-07-27T00:10:02Z")),
                                new JitNetworkAccessPolicyInitiatePort().withNumber(1020099627)
                                    .withAllowedSourceAddressPrefix("drcibjxnn")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-04-19T07:29:25Z")),
                                new JitNetworkAccessPolicyInitiatePort().withNumber(1705226853)
                                    .withAllowedSourceAddressPrefix("nhvdtuoam")
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-01-09T10:50:30Z")))),
                        new JitNetworkAccessPolicyInitiateVirtualMachine().withId("bqehs")
                            .withPorts(Arrays.asList(new JitNetworkAccessPolicyInitiatePort().withNumber(960650405)
                                .withAllowedSourceAddressPrefix("isyzfe")
                                .withEndTimeUtc(OffsetDateTime.parse("2021-07-26T00:55:32Z"))))))
                    .withJustification("rzjwn"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ckze", response.virtualMachines().get(0).id());
        Assertions.assertEquals(845242945, response.virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals("wdxgyypm",
            response.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("lmlnxrcatkuh",
            response.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-05T23:28:06Z"),
            response.virtualMachines().get(0).ports().get(0).endTimeUtc());
        Assertions.assertEquals(Status.INITIATED, response.virtualMachines().get(0).ports().get(0).status());
        Assertions.assertEquals(StatusReason.USER_REQUESTED,
            response.virtualMachines().get(0).ports().get(0).statusReason());
        Assertions.assertEquals(730100218, response.virtualMachines().get(0).ports().get(0).mappedPort());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-17T22:16:34Z"), response.startTimeUtc());
        Assertions.assertEquals("ssjgbfbb", response.requestor());
        Assertions.assertEquals("h", response.justification());
    }
}
