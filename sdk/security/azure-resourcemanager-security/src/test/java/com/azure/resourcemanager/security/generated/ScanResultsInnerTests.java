// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.ScanResultInner;
import com.azure.resourcemanager.security.fluent.models.ScanResultsInner;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.ScanResultProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScanResultsInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanResultsInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"ruleId\":\"auzpjlx\",\"status\":\"NonFinding\",\"isTrimmed\":true,\"queryResults\":[]},\"id\":\"lraymezxlskih\",\"name\":\"xrfdsajre\",\"type\":\"nw\"}]}")
                .toObject(ScanResultsInner.class);
        Assertions.assertEquals("auzpjlx", model.value().get(0).properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.value().get(0).properties().status());
        Assertions.assertEquals(true, model.value().get(0).properties().isTrimmed());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanResultsInner model =
            new ScanResultsInner()
                .withValue(
                    Arrays
                        .asList(
                            new ScanResultInner()
                                .withProperties(
                                    new ScanResultProperties()
                                        .withRuleId("auzpjlx")
                                        .withStatus(RuleStatus.NON_FINDING)
                                        .withIsTrimmed(true)
                                        .withQueryResults(Arrays.asList()))));
        model = BinaryData.fromObject(model).toObject(ScanResultsInner.class);
        Assertions.assertEquals("auzpjlx", model.value().get(0).properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.value().get(0).properties().status());
        Assertions.assertEquals(true, model.value().get(0).properties().isTrimmed());
    }
}
