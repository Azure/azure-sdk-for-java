// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.BenchmarkReference;
import com.azure.resourcemanager.security.models.QueryCheck;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.VaRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VaRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VaRule model = BinaryData.fromString(
            "{\"ruleId\":\"zsoldwey\",\"severity\":\"Obsolete\",\"category\":\"nvmnnrwrbiorkta\",\"ruleType\":\"NegativeList\",\"title\":\"hhg\",\"description\":\"hxmsivfo\",\"rationale\":\"loxggdufiqn\",\"queryCheck\":{\"query\":\"uzaofjchvcyyy\",\"expectedResult\":[[\"otcubi\",\"p\",\"ipwoqonmacjek\"],[\"zshq\"],[\"impevf\",\"mblrrilbywd\"],[\"miccwrwfscjfnyn\",\"zqujizdvoqytiby\",\"wb\"]],\"columnNames\":[\"yavutpthjoxois\",\"sks\"]},\"benchmarkReferences\":[{\"benchmark\":\"lqol\",\"reference\":\"kcgxxlxsffgcvi\"}]}")
            .toObject(VaRule.class);
        Assertions.assertEquals("zsoldwey", model.ruleId());
        Assertions.assertEquals(RuleSeverity.OBSOLETE, model.severity());
        Assertions.assertEquals("nvmnnrwrbiorkta", model.category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.ruleType());
        Assertions.assertEquals("hhg", model.title());
        Assertions.assertEquals("hxmsivfo", model.description());
        Assertions.assertEquals("loxggdufiqn", model.rationale());
        Assertions.assertEquals("uzaofjchvcyyy", model.queryCheck().query());
        Assertions.assertEquals("otcubi", model.queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("yavutpthjoxois", model.queryCheck().columnNames().get(0));
        Assertions.assertEquals("lqol", model.benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("kcgxxlxsffgcvi", model.benchmarkReferences().get(0).reference());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VaRule model = new VaRule().withRuleId("zsoldwey")
            .withSeverity(RuleSeverity.OBSOLETE)
            .withCategory("nvmnnrwrbiorkta")
            .withRuleType(RuleType.NEGATIVE_LIST)
            .withTitle("hhg")
            .withDescription("hxmsivfo")
            .withRationale("loxggdufiqn")
            .withQueryCheck(new QueryCheck().withQuery("uzaofjchvcyyy")
                .withExpectedResult(Arrays.asList(Arrays.asList("otcubi", "p", "ipwoqonmacjek"), Arrays.asList("zshq"),
                    Arrays.asList("impevf", "mblrrilbywd"), Arrays.asList("miccwrwfscjfnyn", "zqujizdvoqytiby", "wb")))
                .withColumnNames(Arrays.asList("yavutpthjoxois", "sks")))
            .withBenchmarkReferences(
                Arrays.asList(new BenchmarkReference().withBenchmark("lqol").withReference("kcgxxlxsffgcvi")));
        model = BinaryData.fromObject(model).toObject(VaRule.class);
        Assertions.assertEquals("zsoldwey", model.ruleId());
        Assertions.assertEquals(RuleSeverity.OBSOLETE, model.severity());
        Assertions.assertEquals("nvmnnrwrbiorkta", model.category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.ruleType());
        Assertions.assertEquals("hhg", model.title());
        Assertions.assertEquals("hxmsivfo", model.description());
        Assertions.assertEquals("loxggdufiqn", model.rationale());
        Assertions.assertEquals("uzaofjchvcyyy", model.queryCheck().query());
        Assertions.assertEquals("otcubi", model.queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("yavutpthjoxois", model.queryCheck().columnNames().get(0));
        Assertions.assertEquals("lqol", model.benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("kcgxxlxsffgcvi", model.benchmarkReferences().get(0).reference());
    }
}
