// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.BenchmarkReference;
import com.azure.resourcemanager.security.models.QueryCheck;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.VaRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VaRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VaRule model =
            BinaryData
                .fromString(
                    "{\"ruleId\":\"bh\",\"severity\":\"High\",\"category\":\"yurnpnuhzafc\",\"ruleType\":\"BaselineExpected\",\"title\":\"iig\",\"description\":\"lbuigv\",\"rationale\":\"atvcrkdlbnbq\",\"queryCheck\":{\"query\":\"csyhzlwxaeaov\",\"expectedResult\":[[\"dndsbdweade\",\"zmwntopagt\",\"mvmmagoaqylkjz\",\"jiuazjc\"],[\"xitp\",\"inzcpdltkrlgj\",\"tbdrvcqgue\"]],\"columnNames\":[\"ompheqdur\",\"lyujlfyoump\",\"kyeclcdigpta\",\"brzmqxucycijoclx\"]},\"benchmarkReferences\":[{\"benchmark\":\"jc\",\"reference\":\"yzjdnrqjbt\"},{\"benchmark\":\"eaoqaqbzgyhf\",\"reference\":\"v\"}]}")
                .toObject(VaRule.class);
        Assertions.assertEquals("bh", model.ruleId());
        Assertions.assertEquals(RuleSeverity.HIGH, model.severity());
        Assertions.assertEquals("yurnpnuhzafc", model.category());
        Assertions.assertEquals(RuleType.BASELINE_EXPECTED, model.ruleType());
        Assertions.assertEquals("iig", model.title());
        Assertions.assertEquals("lbuigv", model.description());
        Assertions.assertEquals("atvcrkdlbnbq", model.rationale());
        Assertions.assertEquals("csyhzlwxaeaov", model.queryCheck().query());
        Assertions.assertEquals("dndsbdweade", model.queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("ompheqdur", model.queryCheck().columnNames().get(0));
        Assertions.assertEquals("jc", model.benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("yzjdnrqjbt", model.benchmarkReferences().get(0).reference());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VaRule model =
            new VaRule()
                .withRuleId("bh")
                .withSeverity(RuleSeverity.HIGH)
                .withCategory("yurnpnuhzafc")
                .withRuleType(RuleType.BASELINE_EXPECTED)
                .withTitle("iig")
                .withDescription("lbuigv")
                .withRationale("atvcrkdlbnbq")
                .withQueryCheck(
                    new QueryCheck()
                        .withQuery("csyhzlwxaeaov")
                        .withExpectedResult(
                            Arrays
                                .asList(
                                    Arrays.asList("dndsbdweade", "zmwntopagt", "mvmmagoaqylkjz", "jiuazjc"),
                                    Arrays.asList("xitp", "inzcpdltkrlgj", "tbdrvcqgue")))
                        .withColumnNames(Arrays.asList("ompheqdur", "lyujlfyoump", "kyeclcdigpta", "brzmqxucycijoclx")))
                .withBenchmarkReferences(
                    Arrays
                        .asList(
                            new BenchmarkReference().withBenchmark("jc").withReference("yzjdnrqjbt"),
                            new BenchmarkReference().withBenchmark("eaoqaqbzgyhf").withReference("v")));
        model = BinaryData.fromObject(model).toObject(VaRule.class);
        Assertions.assertEquals("bh", model.ruleId());
        Assertions.assertEquals(RuleSeverity.HIGH, model.severity());
        Assertions.assertEquals("yurnpnuhzafc", model.category());
        Assertions.assertEquals(RuleType.BASELINE_EXPECTED, model.ruleType());
        Assertions.assertEquals("iig", model.title());
        Assertions.assertEquals("lbuigv", model.description());
        Assertions.assertEquals("atvcrkdlbnbq", model.rationale());
        Assertions.assertEquals("csyhzlwxaeaov", model.queryCheck().query());
        Assertions.assertEquals("dndsbdweade", model.queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("ompheqdur", model.queryCheck().columnNames().get(0));
        Assertions.assertEquals("jc", model.benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("yzjdnrqjbt", model.benchmarkReferences().get(0).reference());
    }
}
