// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.BenchmarkReference;
import com.azure.resourcemanager.security.models.QueryCheck;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.VaRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VaRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VaRule model =
            BinaryData
                .fromString(
                    "{\"ruleId\":\"yfsoppu\",\"severity\":\"Obsolete\",\"category\":\"nzwdejba\",\"ruleType\":\"NegativeList\",\"title\":\"zdmohctbqvu\",\"description\":\"xdn\",\"rationale\":\"vo\",\"queryCheck\":{\"query\":\"jjugwdkcglhslaz\",\"expectedResult\":[[\"gdtjixhbkuofqwey\"],[\"menevfyexfwh\",\"bcibvyvdcsitynn\",\"amdecte\",\"f\"],[\"scjeypv\"]],\"columnNames\":[\"rkgqhcjrefo\",\"gm\",\"qsl\",\"yyvxyqjpkcattpn\"]},\"benchmarkReferences\":[{\"benchmark\":\"cczsq\",\"reference\":\"hvmdajvnysounq\"}]}")
                .toObject(VaRule.class);
        Assertions.assertEquals("yfsoppu", model.ruleId());
        Assertions.assertEquals(RuleSeverity.OBSOLETE, model.severity());
        Assertions.assertEquals("nzwdejba", model.category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.ruleType());
        Assertions.assertEquals("zdmohctbqvu", model.title());
        Assertions.assertEquals("xdn", model.description());
        Assertions.assertEquals("vo", model.rationale());
        Assertions.assertEquals("jjugwdkcglhslaz", model.queryCheck().query());
        Assertions.assertEquals("gdtjixhbkuofqwey", model.queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("rkgqhcjrefo", model.queryCheck().columnNames().get(0));
        Assertions.assertEquals("cczsq", model.benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("hvmdajvnysounq", model.benchmarkReferences().get(0).reference());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VaRule model =
            new VaRule()
                .withRuleId("yfsoppu")
                .withSeverity(RuleSeverity.OBSOLETE)
                .withCategory("nzwdejba")
                .withRuleType(RuleType.NEGATIVE_LIST)
                .withTitle("zdmohctbqvu")
                .withDescription("xdn")
                .withRationale("vo")
                .withQueryCheck(
                    new QueryCheck()
                        .withQuery("jjugwdkcglhslaz")
                        .withExpectedResult(
                            Arrays
                                .asList(
                                    Arrays.asList("gdtjixhbkuofqwey"),
                                    Arrays.asList("menevfyexfwh", "bcibvyvdcsitynn", "amdecte", "f"),
                                    Arrays.asList("scjeypv")))
                        .withColumnNames(Arrays.asList("rkgqhcjrefo", "gm", "qsl", "yyvxyqjpkcattpn")))
                .withBenchmarkReferences(
                    Arrays.asList(new BenchmarkReference().withBenchmark("cczsq").withReference("hvmdajvnysounq")));
        model = BinaryData.fromObject(model).toObject(VaRule.class);
        Assertions.assertEquals("yfsoppu", model.ruleId());
        Assertions.assertEquals(RuleSeverity.OBSOLETE, model.severity());
        Assertions.assertEquals("nzwdejba", model.category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.ruleType());
        Assertions.assertEquals("zdmohctbqvu", model.title());
        Assertions.assertEquals("xdn", model.description());
        Assertions.assertEquals("vo", model.rationale());
        Assertions.assertEquals("jjugwdkcglhslaz", model.queryCheck().query());
        Assertions.assertEquals("gdtjixhbkuofqwey", model.queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("rkgqhcjrefo", model.queryCheck().columnNames().get(0));
        Assertions.assertEquals("cczsq", model.benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("hvmdajvnysounq", model.benchmarkReferences().get(0).reference());
    }
}
