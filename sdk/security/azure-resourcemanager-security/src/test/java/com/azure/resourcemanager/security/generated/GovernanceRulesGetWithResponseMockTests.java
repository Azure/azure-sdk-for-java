// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GovernanceRulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"tenantId\":\"j\",\"displayName\":\"n\",\"description\":\"dtjva\",\"remediationTimeframe\":\"yznm\",\"isGracePeriod\":false,\"rulePriority\":1496636288,\"isDisabled\":false,\"ruleType\":\"ServiceNow\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"gytoxuwhtt\",\"zqsa\"],\"conditionSets\":[\"dataebg\",\"datazplusdekpdzzms\",\"datagpgvokyejidbdq\"],\"includeMemberScopes\":true,\"ownerSource\":{\"type\":\"ByTag\",\"value\":\"cwztlvvws\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":false,\"disableOwnerEmailNotification\":true},\"metadata\":{\"createdBy\":\"repwpwfkcaux\",\"createdOn\":\"2021-07-16T09:20:09Z\",\"updatedBy\":\"cpfpdofuckcl\",\"updatedOn\":\"2021-10-21T16:06:31Z\"}},\"id\":\"luevsolzwilfng\",\"name\":\"jfsqeb\",\"type\":\"uxjxhfxf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SecurityManager manager =
            SecurityManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        GovernanceRule response =
            manager
                .governanceRules()
                .getWithResponse("gsevmdm", "enlrstgf", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("n", response.displayName());
        Assertions.assertEquals("dtjva", response.description());
        Assertions.assertEquals("yznm", response.remediationTimeframe());
        Assertions.assertEquals(false, response.isGracePeriod());
        Assertions.assertEquals(1496636288, response.rulePriority());
        Assertions.assertEquals(false, response.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.SERVICE_NOW, response.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, response.sourceResourceType());
        Assertions.assertEquals("gytoxuwhtt", response.excludedScopes().get(0));
        Assertions.assertEquals(true, response.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.BY_TAG, response.ownerSource().type());
        Assertions.assertEquals("cwztlvvws", response.ownerSource().value());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(true, response.governanceEmailNotification().disableOwnerEmailNotification());
    }
}
