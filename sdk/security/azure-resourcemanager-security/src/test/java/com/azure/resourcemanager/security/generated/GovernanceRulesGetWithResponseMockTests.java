// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GovernanceRulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"tenantId\":\"yjrexwdonbexfte\",\"displayName\":\"aubheeggzgrnqt\",\"description\":\"ozuumr\",\"remediationTimeframe\":\"jqgacantnsyx\",\"isGracePeriod\":false,\"rulePriority\":1558697731,\"isDisabled\":false,\"ruleType\":\"Integrated\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"azofm\",\"xvtemaspm\"],\"conditionSets\":[\"dataydscdkxwd\",\"datawj\"],\"includeMemberScopes\":true,\"ownerSource\":{\"type\":\"Manually\",\"value\":\"ntof\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":true,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"oskkz\",\"createdOn\":\"2021-12-05T05:20:59Z\",\"updatedBy\":\"sujybsrwzz\",\"updatedOn\":\"2021-04-21T21:28:15Z\"}},\"id\":\"t\",\"name\":\"dhmfppinm\",\"type\":\"ikesmkwtzgfr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        GovernanceRule response
            = manager.governanceRules().getWithResponse("ot", "xmmqmt", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("aubheeggzgrnqt", response.displayName());
        Assertions.assertEquals("ozuumr", response.description());
        Assertions.assertEquals("jqgacantnsyx", response.remediationTimeframe());
        Assertions.assertEquals(false, response.isGracePeriod());
        Assertions.assertEquals(1558697731, response.rulePriority());
        Assertions.assertEquals(false, response.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, response.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, response.sourceResourceType());
        Assertions.assertEquals("azofm", response.excludedScopes().get(0));
        Assertions.assertEquals(true, response.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.MANUALLY, response.ownerSource().type());
        Assertions.assertEquals("ntof", response.ownerSource().value());
        Assertions.assertEquals(true, response.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableOwnerEmailNotification());
    }
}
