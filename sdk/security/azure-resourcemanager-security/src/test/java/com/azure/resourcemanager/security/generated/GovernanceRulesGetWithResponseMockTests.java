// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GovernanceRulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"tenantId\":\"elgfyatigfgfrr\",\"displayName\":\"dknczgorywn\",\"description\":\"jtv\",\"remediationTimeframe\":\"evdlh\",\"isGracePeriod\":true,\"rulePriority\":415948990,\"isDisabled\":true,\"ruleType\":\"ServiceNow\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"ssrlvkpkpk\",\"cmaccebx\",\"opyicyvsp\"],\"conditionSets\":[\"datalhwyykgvrccpumd\",\"datahgajkrdy\"],\"includeMemberScopes\":true,\"ownerSource\":{\"type\":\"Manually\",\"value\":\"udvafnbfbqvenqnx\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":true,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"ejpec\",\"createdOn\":\"2021-08-22T07:48:03Z\",\"updatedBy\":\"mbpwdludayp\",\"updatedOn\":\"2021-06-06T21:55:23Z\"}},\"id\":\"idwmt\",\"name\":\"f\",\"type\":\"vtzldzchubagwn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        GovernanceRule response = manager.governanceRules()
            .getWithResponse("d", "dzffzjwztsmpchg", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dknczgorywn", response.displayName());
        Assertions.assertEquals("jtv", response.description());
        Assertions.assertEquals("evdlh", response.remediationTimeframe());
        Assertions.assertEquals(true, response.isGracePeriod());
        Assertions.assertEquals(415948990, response.rulePriority());
        Assertions.assertEquals(true, response.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.SERVICE_NOW, response.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, response.sourceResourceType());
        Assertions.assertEquals("ssrlvkpkpk", response.excludedScopes().get(0));
        Assertions.assertEquals(true, response.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.MANUALLY, response.ownerSource().type());
        Assertions.assertEquals("udvafnbfbqvenqnx", response.ownerSource().value());
        Assertions.assertEquals(true, response.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableOwnerEmailNotification());
    }
}
