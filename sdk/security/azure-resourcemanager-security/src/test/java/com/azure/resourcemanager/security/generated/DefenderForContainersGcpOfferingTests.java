// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DefenderForContainersGcpOffering;
import com.azure.resourcemanager.security.models.DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection;
import com.azure.resourcemanager.security.models.DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8S;
import com.azure.resourcemanager.security.models.DefenderForContainersGcpOfferingMdcContainersImageAssessment;
import com.azure.resourcemanager.security.models.DefenderForContainersGcpOfferingNativeCloudConnection;
import com.azure.resourcemanager.security.models.DefenderForContainersGcpOfferingVmScanners;
import com.azure.resourcemanager.security.models.ScanningMode;
import com.azure.resourcemanager.security.models.VmScannersBaseConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderForContainersGcpOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForContainersGcpOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderForContainersGcp\",\"nativeCloudConnection\":{\"serviceAccountEmailAddress\":\"xmrszbknimxlpne\",\"workloadIdentityProviderId\":\"rzutylcurzaqmn\"},\"dataPipelineNativeCloudConnection\":{\"serviceAccountEmailAddress\":\"aehtd\",\"workloadIdentityProviderId\":\"mbnvynfaooeacted\"},\"enableAuditLogsAutoProvisioning\":false,\"enableDefenderAgentAutoProvisioning\":true,\"enablePolicyAgentAutoProvisioning\":false,\"mdcContainersImageAssessment\":{\"enabled\":false,\"workloadIdentityProviderId\":\"ahzllrqmtlpb\",\"serviceAccountEmailAddress\":\"roid\"},\"mdcContainersAgentlessDiscoveryK8s\":{\"enabled\":true,\"workloadIdentityProviderId\":\"ffmnoiics\",\"serviceAccountEmailAddress\":\"yhbrjjta\"},\"vmScanners\":{\"enabled\":true,\"configuration\":{\"scanningMode\":\"Default\",\"exclusionTags\":{\"dp\":\"luqwgusxxhd\",\"bdmvsby\":\"wyblv\",\"kmkwjfbo\":\"daelqpv\",\"v\":\"loggdusxursu\"}}},\"description\":\"cjkcoqwczsyiqri\"}")
            .toObject(DefenderForContainersGcpOffering.class);
        Assertions.assertEquals("xmrszbknimxlpne", model.nativeCloudConnection().serviceAccountEmailAddress());
        Assertions.assertEquals("rzutylcurzaqmn", model.nativeCloudConnection().workloadIdentityProviderId());
        Assertions.assertEquals("aehtd", model.dataPipelineNativeCloudConnection().serviceAccountEmailAddress());
        Assertions.assertEquals("mbnvynfaooeacted",
            model.dataPipelineNativeCloudConnection().workloadIdentityProviderId());
        Assertions.assertEquals(false, model.enableAuditLogsAutoProvisioning());
        Assertions.assertEquals(true, model.enableDefenderAgentAutoProvisioning());
        Assertions.assertEquals(false, model.enablePolicyAgentAutoProvisioning());
        Assertions.assertEquals(false, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("ahzllrqmtlpb", model.mdcContainersImageAssessment().workloadIdentityProviderId());
        Assertions.assertEquals("roid", model.mdcContainersImageAssessment().serviceAccountEmailAddress());
        Assertions.assertEquals(true, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("ffmnoiics", model.mdcContainersAgentlessDiscoveryK8S().workloadIdentityProviderId());
        Assertions.assertEquals("yhbrjjta", model.mdcContainersAgentlessDiscoveryK8S().serviceAccountEmailAddress());
        Assertions.assertEquals(true, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("luqwgusxxhd", model.vmScanners().configuration().exclusionTags().get("dp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForContainersGcpOffering model = new DefenderForContainersGcpOffering()
            .withNativeCloudConnection(new DefenderForContainersGcpOfferingNativeCloudConnection()
                .withServiceAccountEmailAddress("xmrszbknimxlpne")
                .withWorkloadIdentityProviderId("rzutylcurzaqmn"))
            .withDataPipelineNativeCloudConnection(
                new DefenderForContainersGcpOfferingDataPipelineNativeCloudConnection()
                    .withServiceAccountEmailAddress("aehtd")
                    .withWorkloadIdentityProviderId("mbnvynfaooeacted"))
            .withEnableAuditLogsAutoProvisioning(false)
            .withEnableDefenderAgentAutoProvisioning(true)
            .withEnablePolicyAgentAutoProvisioning(false)
            .withMdcContainersImageAssessment(
                new DefenderForContainersGcpOfferingMdcContainersImageAssessment().withEnabled(false)
                    .withWorkloadIdentityProviderId("ahzllrqmtlpb")
                    .withServiceAccountEmailAddress("roid"))
            .withMdcContainersAgentlessDiscoveryK8S(
                new DefenderForContainersGcpOfferingMdcContainersAgentlessDiscoveryK8S().withEnabled(true)
                    .withWorkloadIdentityProviderId("ffmnoiics")
                    .withServiceAccountEmailAddress("yhbrjjta"))
            .withVmScanners(new DefenderForContainersGcpOfferingVmScanners().withEnabled(true)
                .withConfiguration(new VmScannersBaseConfiguration().withScanningMode(ScanningMode.DEFAULT)
                    .withExclusionTags(
                        mapOf("dp", "luqwgusxxhd", "bdmvsby", "wyblv", "kmkwjfbo", "daelqpv", "v", "loggdusxursu"))));
        model = BinaryData.fromObject(model).toObject(DefenderForContainersGcpOffering.class);
        Assertions.assertEquals("xmrszbknimxlpne", model.nativeCloudConnection().serviceAccountEmailAddress());
        Assertions.assertEquals("rzutylcurzaqmn", model.nativeCloudConnection().workloadIdentityProviderId());
        Assertions.assertEquals("aehtd", model.dataPipelineNativeCloudConnection().serviceAccountEmailAddress());
        Assertions.assertEquals("mbnvynfaooeacted",
            model.dataPipelineNativeCloudConnection().workloadIdentityProviderId());
        Assertions.assertEquals(false, model.enableAuditLogsAutoProvisioning());
        Assertions.assertEquals(true, model.enableDefenderAgentAutoProvisioning());
        Assertions.assertEquals(false, model.enablePolicyAgentAutoProvisioning());
        Assertions.assertEquals(false, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("ahzllrqmtlpb", model.mdcContainersImageAssessment().workloadIdentityProviderId());
        Assertions.assertEquals("roid", model.mdcContainersImageAssessment().serviceAccountEmailAddress());
        Assertions.assertEquals(true, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("ffmnoiics", model.mdcContainersAgentlessDiscoveryK8S().workloadIdentityProviderId());
        Assertions.assertEquals("yhbrjjta", model.mdcContainersAgentlessDiscoveryK8S().serviceAccountEmailAddress());
        Assertions.assertEquals(true, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("luqwgusxxhd", model.vmScanners().configuration().exclusionTags().get("dp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
