// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DescendantBehavior;
import com.azure.resourcemanager.security.models.DevOpsPolicyAssignmentProperties;
import com.azure.resourcemanager.security.models.DevOpsPolicyDescriptor;
import com.azure.resourcemanager.security.models.DevOpsPolicyType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class DevOpsPolicyAssignmentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DevOpsPolicyAssignmentProperties model = BinaryData.fromString(
            "{\"provisioningStatusMessage\":\"hs\",\"provisioningStatusUpdateTimeUtc\":\"2021-11-06T07:07:08Z\",\"provisioningState\":\"Succeeded\",\"resourceId\":\"llndnpd\",\"descendantBehavior\":\"Override\",\"policy\":{\"policyName\":\"fgf\",\"policyId\":\"snnfhyetefyp\",\"policyVersion\":\"octfjgtixrjvzuyt\",\"policyType\":\"Unknown\"},\"assignedAt\":\"2021-04-19T09:03:23Z\"}")
            .toObject(DevOpsPolicyAssignmentProperties.class);
        Assertions.assertEquals("llndnpd", model.resourceId());
        Assertions.assertEquals(DescendantBehavior.OVERRIDE, model.descendantBehavior());
        Assertions.assertEquals("fgf", model.policy().policyName());
        Assertions.assertEquals("snnfhyetefyp", model.policy().policyId());
        Assertions.assertEquals("octfjgtixrjvzuyt", model.policy().policyVersion());
        Assertions.assertEquals(DevOpsPolicyType.UNKNOWN, model.policy().policyType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-19T09:03:23Z"), model.assignedAt());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DevOpsPolicyAssignmentProperties model = new DevOpsPolicyAssignmentProperties().withResourceId("llndnpd")
            .withDescendantBehavior(DescendantBehavior.OVERRIDE)
            .withPolicy(new DevOpsPolicyDescriptor().withPolicyName("fgf")
                .withPolicyId("snnfhyetefyp")
                .withPolicyVersion("octfjgtixrjvzuyt")
                .withPolicyType(DevOpsPolicyType.UNKNOWN))
            .withAssignedAt(OffsetDateTime.parse("2021-04-19T09:03:23Z"));
        model = BinaryData.fromObject(model).toObject(DevOpsPolicyAssignmentProperties.class);
        Assertions.assertEquals("llndnpd", model.resourceId());
        Assertions.assertEquals(DescendantBehavior.OVERRIDE, model.descendantBehavior());
        Assertions.assertEquals("fgf", model.policy().policyName());
        Assertions.assertEquals("snnfhyetefyp", model.policy().policyId());
        Assertions.assertEquals("octfjgtixrjvzuyt", model.policy().policyVersion());
        Assertions.assertEquals(DevOpsPolicyType.UNKNOWN, model.policy().policyType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-19T09:03:23Z"), model.assignedAt());
    }
}
