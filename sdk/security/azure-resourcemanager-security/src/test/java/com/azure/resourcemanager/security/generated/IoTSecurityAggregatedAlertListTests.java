// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecurityAggregatedAlertInner;
import com.azure.resourcemanager.security.models.IoTSecurityAggregatedAlertList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecurityAggregatedAlertListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecurityAggregatedAlertList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"alertType\":\"qqtlffhzbkrkj\",\"alertDisplayName\":\"avfqnvhnqoewdogi\",\"vendorName\":\"esypvidbztjh\",\"reportedSeverity\":\"Informational\",\"remediationSteps\":\"ovnynkbwetnju\",\"description\":\"sprkzyaupiac\",\"count\":1087052245270104258,\"effectedResourceType\":\"bwqroohtuovm\",\"systemSource\":\"nur\",\"actionTaken\":\"umghihpvecmsl\",\"logAnalyticsQuery\":\"bl\",\"topDevicesList\":[{\"deviceId\":\"tbsjuscvsf\",\"alertsCount\":5282271236189869633,\"lastOccurrence\":\"mgxuupbezqcc\"},{\"deviceId\":\"rtceukdqkkyihzt\",\"alertsCount\":1190453474254737108,\"lastOccurrence\":\"qzgwldoychil\"},{\"deviceId\":\"ecfehuwa\",\"alertsCount\":3150257068700369640,\"lastOccurrence\":\"icq\"}]},\"tags\":{\"wqejpmvsse\":\"zstacsjvhrweft\"},\"id\":\"aepwamcxtcz\",\"name\":\"upeuknijduyye\",\"type\":\"pydjfboc\"},{\"properties\":{\"alertType\":\"hulrtywikdmhla\",\"alertDisplayName\":\"flgbhgau\",\"vendorName\":\"ixmxufrsryjqgdkf\",\"reportedSeverity\":\"Informational\",\"remediationSteps\":\"eoqbvjhvefgwbmqj\",\"description\":\"ntasfaymxbu\",\"count\":2275237512698358338,\"effectedResourceType\":\"lbm\",\"systemSource\":\"yojwyvfkmbtsu\",\"actionTaken\":\"xsgxjcmmzrrs\",\"logAnalyticsQuery\":\"biwsd\",\"topDevicesList\":[{\"deviceId\":\"qwodiffjx\",\"alertsCount\":3830920266347692806,\"lastOccurrence\":\"uabwibvjogjo\"},{\"deviceId\":\"cyefoyzbamwine\",\"alertsCount\":92298736486368563,\"lastOccurrence\":\"akpoldtvevbo\"}]},\"tags\":{\"uxgvttxpnr\":\"hzjkn\",\"swyskbruffg\":\"pzaamrdixtreki\",\"lcouqehbhbcdszir\":\"lukkutvlxhrpqhvm\"},\"id\":\"randoypmb\",\"name\":\"t\",\"type\":\"ormkfqlwxldyk\"},{\"properties\":{\"alertType\":\"ygaolnjpnnb\",\"alertDisplayName\":\"ksibjgsjjxx\",\"vendorName\":\"rnadzyqegxyiv\",\"reportedSeverity\":\"Informational\",\"remediationSteps\":\"mhwbjijkgqx\",\"description\":\"mbk\",\"count\":729695475510116099,\"effectedResourceType\":\"ujvaannggi\",\"systemSource\":\"wkdtaawxwf\",\"actionTaken\":\"aumrrqmbzmqkrat\",\"logAnalyticsQuery\":\"xwbjs\",\"topDevicesList\":[{\"deviceId\":\"rkfpks\",\"alertsCount\":2332967839395770026,\"lastOccurrence\":\"gewi\"},{\"deviceId\":\"mrhbguzozkye\",\"alertsCount\":1093976769876970154,\"lastOccurrence\":\"hhhqosm\"},{\"deviceId\":\"jkutycyarnr\",\"alertsCount\":4794239806807167911,\"lastOccurrence\":\"abzoghktdpyczhco\"}]},\"tags\":{\"zptwrlohap\":\"nhzqrottjzcfy\"},\"id\":\"infsz\",\"name\":\"yglqdhmrjzral\",\"type\":\"xpjb\"}],\"nextLink\":\"psjoqcjenk\"}")
            .toObject(IoTSecurityAggregatedAlertList.class);
        Assertions.assertEquals("zstacsjvhrweft", model.value().get(0).tags().get("wqejpmvsse"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecurityAggregatedAlertList model = new IoTSecurityAggregatedAlertList().withValue(Arrays.asList(
            new IoTSecurityAggregatedAlertInner().withTags(mapOf("wqejpmvsse", "zstacsjvhrweft")),
            new IoTSecurityAggregatedAlertInner().withTags(
                mapOf("uxgvttxpnr", "hzjkn", "swyskbruffg", "pzaamrdixtreki", "lcouqehbhbcdszir", "lukkutvlxhrpqhvm")),
            new IoTSecurityAggregatedAlertInner().withTags(mapOf("zptwrlohap", "nhzqrottjzcfy"))));
        model = BinaryData.fromObject(model).toObject(IoTSecurityAggregatedAlertList.class);
        Assertions.assertEquals("zstacsjvhrweft", model.value().get(0).tags().get("wqejpmvsse"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
