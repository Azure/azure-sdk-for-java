// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.MalwareScan;
import com.azure.resourcemanager.security.models.SettingName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DefenderForStoragesStartMalwareScanWithResponseMockTests {
    @Test
    public void testStartMalwareScanWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"scanId\":\"jgpvcq\",\"scanStatus\":\"zrbvgw\",\"scanStatusMessage\":\"lxrmxvm\",\"scanStartTime\":\"wynbgovazoymd\",\"scanEndTime\":\"hplkhwwdka\",\"scanSummary\":{\"blobs\":{\"totalBlobsScanned\":776906876341540924,\"maliciousBlobsCount\":2297259519068835744,\"skippedBlobsCount\":3851432879179708390,\"scannedBlobsInGB\":99.07694111649124},\"estimatedScanCostUSD\":18.543818072639585}}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MalwareScan response = manager.defenderForStorages()
            .startMalwareScanWithResponse("xgwzzkw", SettingName.CURRENT, com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("jgpvcq", response.properties().scanId());
        Assertions.assertEquals("zrbvgw", response.properties().scanStatus());
        Assertions.assertEquals("lxrmxvm", response.properties().scanStatusMessage());
        Assertions.assertEquals("wynbgovazoymd", response.properties().scanStartTime());
        Assertions.assertEquals("hplkhwwdka", response.properties().scanEndTime());
        Assertions.assertEquals(776906876341540924L, response.properties().scanSummary().blobs().totalBlobsScanned());
        Assertions.assertEquals(2297259519068835744L,
            response.properties().scanSummary().blobs().maliciousBlobsCount());
        Assertions.assertEquals(3851432879179708390L, response.properties().scanSummary().blobs().skippedBlobsCount());
        Assertions.assertEquals(99.07694111649124D, response.properties().scanSummary().blobs().scannedBlobsInGB());
        Assertions.assertEquals(18.543818072639585D, response.properties().scanSummary().estimatedScanCostUsd());
    }
}
