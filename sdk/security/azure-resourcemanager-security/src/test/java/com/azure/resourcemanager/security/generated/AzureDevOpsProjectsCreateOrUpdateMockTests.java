// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsProject;
import com.azure.resourcemanager.security.models.AzureDevOpsProjectProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureDevOpsProjectsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningStatusMessage\":\"zahgtv\",\"provisioningStatusUpdateTimeUtc\":\"2021-09-06T21:09:28Z\",\"provisioningState\":\"Succeeded\",\"parentOrgName\":\"morzolxosg\",\"projectId\":\"trxueqbmxqfgv\",\"onboardingState\":\"Onboarded\",\"actionableRemediation\":{\"state\":\"Enabled\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"s\",\"category\":\"IaC\"},{\"minimumSeverityLevel\":\"osecxlngouf\",\"category\":\"Dependencies\"}],\"branchConfiguration\":{\"branchNames\":[\"fxzspfyvslazippl\",\"gtdumjty\"],\"annotateDefaultBranch\":\"Enabled\"},\"inheritFromParentState\":\"Disabled\"}},\"id\":\"znlaxozqthk\",\"name\":\"xfugfzizyxd\",\"type\":\"yjnqzbrqcakmfckv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsProject response = manager.azureDevOpsProjects()
            .define("okqoikx")
            .withExistingAzureDevOpsOrg("rmnrijefmrtwxc", "vdsp", "hgffmwtblgm")
            .withProperties(new AzureDevOpsProjectProperties().withParentOrgName("estbsli")
                .withOnboardingState(OnboardingState.ONBOARDED)
                .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.DISABLED)
                    .withCategoryConfigurations(Arrays.asList(
                        new CategoryConfiguration().withMinimumSeverityLevel("zxqdwbymu")
                            .withCategory(RuleCategory.SECRETS),
                        new CategoryConfiguration().withMinimumSeverityLevel("ncrdo")
                            .withCategory(RuleCategory.DEPENDENCIES),
                        new CategoryConfiguration().withMinimumSeverityLevel("s").withCategory(RuleCategory.IAC),
                        new CategoryConfiguration().withMinimumSeverityLevel("khxd").withCategory(RuleCategory.CODE)))
                    .withBranchConfiguration(
                        new TargetBranchConfiguration().withBranchNames(Arrays.asList("cvimmwck", "zvlfymtrts", "xup"))
                            .withAnnotateDefaultBranch(AnnotateDefaultBranchState.ENABLED))
                    .withInheritFromParentState(InheritFromParentState.DISABLED)))
            .create();

        Assertions.assertEquals("morzolxosg", response.properties().parentOrgName());
        Assertions.assertEquals(OnboardingState.ONBOARDED, response.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.ENABLED,
            response.properties().actionableRemediation().state());
        Assertions.assertEquals("s",
            response.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.IAC,
            response.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("fxzspfyvslazippl",
            response.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.ENABLED,
            response.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.DISABLED,
            response.properties().actionableRemediation().inheritFromParentState());
    }
}
