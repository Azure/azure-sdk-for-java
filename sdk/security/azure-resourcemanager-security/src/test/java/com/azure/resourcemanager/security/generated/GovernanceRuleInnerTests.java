// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.GovernanceRuleInner;
import com.azure.resourcemanager.security.models.GovernanceRuleEmailNotification;
import com.azure.resourcemanager.security.models.GovernanceRuleMetadata;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSource;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class GovernanceRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GovernanceRuleInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"tenantId\":\"t\",\"displayName\":\"x\",\"description\":\"qzasunwqrjzfrgqh\",\"remediationTimeframe\":\"hcmbuocnjrohmbp\",\"isGracePeriod\":false,\"rulePriority\":1432807244,\"isDisabled\":false,\"ruleType\":\"Integrated\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"dyvkfkmr\",\"cxneh\",\"sm\"],\"conditionSets\":[\"datadlfp\",\"dataapucygvo\",\"datavyuns\",\"dataxlghieegj\"],\"includeMemberScopes\":false,\"ownerSource\":{\"type\":\"ByTag\",\"value\":\"seksgbux\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":true,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"gaqi\",\"createdOn\":\"2021-02-21T23:48:36Z\",\"updatedBy\":\"iwrqofulopmjnl\",\"updatedOn\":\"2021-03-15T13:05:41Z\"}},\"id\":\"hcbjpibk\",\"name\":\"phuuuerctato\",\"type\":\"intqpbrlcyr\"}")
                .toObject(GovernanceRuleInner.class);
        Assertions.assertEquals("x", model.displayName());
        Assertions.assertEquals("qzasunwqrjzfrgqh", model.description());
        Assertions.assertEquals("hcmbuocnjrohmbp", model.remediationTimeframe());
        Assertions.assertEquals(false, model.isGracePeriod());
        Assertions.assertEquals(1432807244, model.rulePriority());
        Assertions.assertEquals(false, model.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, model.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, model.sourceResourceType());
        Assertions.assertEquals("dyvkfkmr", model.excludedScopes().get(0));
        Assertions.assertEquals(false, model.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.BY_TAG, model.ownerSource().type());
        Assertions.assertEquals("seksgbux", model.ownerSource().value());
        Assertions.assertEquals(true, model.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableOwnerEmailNotification());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GovernanceRuleInner model =
            new GovernanceRuleInner()
                .withDisplayName("x")
                .withDescription("qzasunwqrjzfrgqh")
                .withRemediationTimeframe("hcmbuocnjrohmbp")
                .withIsGracePeriod(false)
                .withRulePriority(1432807244)
                .withIsDisabled(false)
                .withRuleType(GovernanceRuleType.INTEGRATED)
                .withSourceResourceType(GovernanceRuleSourceResourceType.ASSESSMENTS)
                .withExcludedScopes(Arrays.asList("dyvkfkmr", "cxneh", "sm"))
                .withConditionSets(Arrays.asList("datadlfp", "dataapucygvo", "datavyuns", "dataxlghieegj"))
                .withIncludeMemberScopes(false)
                .withOwnerSource(
                    new GovernanceRuleOwnerSource()
                        .withType(GovernanceRuleOwnerSourceType.BY_TAG)
                        .withValue("seksgbux"))
                .withGovernanceEmailNotification(
                    new GovernanceRuleEmailNotification()
                        .withDisableManagerEmailNotification(true)
                        .withDisableOwnerEmailNotification(false))
                .withMetadata(new GovernanceRuleMetadata());
        model = BinaryData.fromObject(model).toObject(GovernanceRuleInner.class);
        Assertions.assertEquals("x", model.displayName());
        Assertions.assertEquals("qzasunwqrjzfrgqh", model.description());
        Assertions.assertEquals("hcmbuocnjrohmbp", model.remediationTimeframe());
        Assertions.assertEquals(false, model.isGracePeriod());
        Assertions.assertEquals(1432807244, model.rulePriority());
        Assertions.assertEquals(false, model.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, model.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, model.sourceResourceType());
        Assertions.assertEquals("dyvkfkmr", model.excludedScopes().get(0));
        Assertions.assertEquals(false, model.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.BY_TAG, model.ownerSource().type());
        Assertions.assertEquals("seksgbux", model.ownerSource().value());
        Assertions.assertEquals(true, model.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableOwnerEmailNotification());
    }
}
