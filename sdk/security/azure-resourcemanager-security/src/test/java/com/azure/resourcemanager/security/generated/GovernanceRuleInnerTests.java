// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.GovernanceRuleInner;
import com.azure.resourcemanager.security.models.GovernanceRuleEmailNotification;
import com.azure.resourcemanager.security.models.GovernanceRuleMetadata;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSource;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class GovernanceRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GovernanceRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"tenantId\":\"yxxrwlycoduh\",\"displayName\":\"kxkgymareqna\",\"description\":\"qugjhkycube\",\"remediationTimeframe\":\"gssofwq\",\"isGracePeriod\":false,\"rulePriority\":1521931041,\"isDisabled\":true,\"ruleType\":\"Integrated\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"i\",\"pxacqqudfn\"],\"conditionSets\":[\"dataxbaaabjyv\",\"datayffimrzrtuzqogs\",\"dataxnevfdnwn\",\"datamewzsyyc\"],\"includeMemberScopes\":true,\"ownerSource\":{\"type\":\"Manually\",\"value\":\"bjudpfrxtrthzv\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":false,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"rqubpaxhexiil\",\"createdOn\":\"2021-10-29T07:32:45Z\",\"updatedBy\":\"tiirqtdqoa\",\"updatedOn\":\"2021-03-24T09:09:32Z\"}},\"id\":\"uzf\",\"name\":\"squyfxrxxlep\",\"type\":\"ramxjezwlwnw\"}")
            .toObject(GovernanceRuleInner.class);
        Assertions.assertEquals("kxkgymareqna", model.displayName());
        Assertions.assertEquals("qugjhkycube", model.description());
        Assertions.assertEquals("gssofwq", model.remediationTimeframe());
        Assertions.assertEquals(false, model.isGracePeriod());
        Assertions.assertEquals(1521931041, model.rulePriority());
        Assertions.assertEquals(true, model.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, model.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, model.sourceResourceType());
        Assertions.assertEquals("i", model.excludedScopes().get(0));
        Assertions.assertEquals(true, model.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.MANUALLY, model.ownerSource().type());
        Assertions.assertEquals("bjudpfrxtrthzv", model.ownerSource().value());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableOwnerEmailNotification());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GovernanceRuleInner model = new GovernanceRuleInner().withDisplayName("kxkgymareqna")
            .withDescription("qugjhkycube")
            .withRemediationTimeframe("gssofwq")
            .withIsGracePeriod(false)
            .withRulePriority(1521931041)
            .withIsDisabled(true)
            .withRuleType(GovernanceRuleType.INTEGRATED)
            .withSourceResourceType(GovernanceRuleSourceResourceType.ASSESSMENTS)
            .withExcludedScopes(Arrays.asList("i", "pxacqqudfn"))
            .withConditionSets(Arrays.asList("dataxbaaabjyv", "datayffimrzrtuzqogs", "dataxnevfdnwn", "datamewzsyyc"))
            .withIncludeMemberScopes(true)
            .withOwnerSource(new GovernanceRuleOwnerSource().withType(GovernanceRuleOwnerSourceType.MANUALLY)
                .withValue("bjudpfrxtrthzv"))
            .withGovernanceEmailNotification(
                new GovernanceRuleEmailNotification().withDisableManagerEmailNotification(false)
                    .withDisableOwnerEmailNotification(false))
            .withMetadata(new GovernanceRuleMetadata());
        model = BinaryData.fromObject(model).toObject(GovernanceRuleInner.class);
        Assertions.assertEquals("kxkgymareqna", model.displayName());
        Assertions.assertEquals("qugjhkycube", model.description());
        Assertions.assertEquals("gssofwq", model.remediationTimeframe());
        Assertions.assertEquals(false, model.isGracePeriod());
        Assertions.assertEquals(1521931041, model.rulePriority());
        Assertions.assertEquals(true, model.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, model.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, model.sourceResourceType());
        Assertions.assertEquals("i", model.excludedScopes().get(0));
        Assertions.assertEquals(true, model.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.MANUALLY, model.ownerSource().type());
        Assertions.assertEquals("bjudpfrxtrthzv", model.ownerSource().value());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, model.governanceEmailNotification().disableOwnerEmailNotification());
    }
}
