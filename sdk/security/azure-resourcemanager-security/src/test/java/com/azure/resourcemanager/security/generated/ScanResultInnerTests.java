// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.ScanResultInner;
import com.azure.resourcemanager.security.models.BaselineAdjustedResult;
import com.azure.resourcemanager.security.models.Remediation;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResultProperties;
import com.azure.resourcemanager.security.models.VaRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScanResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanResultInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"ruleId\":\"hutje\",\"status\":\"Finding\",\"isTrimmed\":true,\"queryResults\":[[\"gjzzdatqxhocdg\",\"ablgphuticndvk\",\"ozwyiftyhxhuro\",\"ftyxolniw\"],[\"cukjf\",\"giawx\",\"lryplwckbasyy\",\"nddhsgcbacph\"],[\"koty\"],[\"gou\",\"zndlikwy\"]],\"remediation\":{\"description\":\"fgibmadgakeq\",\"scripts\":[\"yb\"],\"automated\":true,\"portalLink\":\"dqytbciqfouflmm\"},\"baselineAdjustedResult\":{\"status\":\"InternalError\",\"resultsNotInBaseline\":[[],[]],\"resultsOnlyInBaseline\":[[],[]]},\"ruleMetadata\":{\"ruleId\":\"ugpbkw\",\"severity\":\"Informational\",\"category\":\"duqkt\",\"ruleType\":\"NegativeList\",\"title\":\"wgcu\",\"description\":\"tumkdosvqwhbm\",\"rationale\":\"bbjfddgmbmbexp\",\"benchmarkReferences\":[]}},\"id\":\"q\",\"name\":\"rolfpfp\",\"type\":\"algbquxigjyjg\"}")
                .toObject(ScanResultInner.class);
        Assertions.assertEquals("hutje", model.properties().ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.properties().status());
        Assertions.assertEquals(true, model.properties().isTrimmed());
        Assertions.assertEquals("gjzzdatqxhocdg", model.properties().queryResults().get(0).get(0));
        Assertions.assertEquals("fgibmadgakeq", model.properties().remediation().description());
        Assertions.assertEquals("yb", model.properties().remediation().scripts().get(0));
        Assertions.assertEquals(true, model.properties().remediation().automated());
        Assertions.assertEquals("dqytbciqfouflmm", model.properties().remediation().portalLink());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.properties().baselineAdjustedResult().status());
        Assertions.assertEquals("ugpbkw", model.properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.INFORMATIONAL, model.properties().ruleMetadata().severity());
        Assertions.assertEquals("duqkt", model.properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.properties().ruleMetadata().ruleType());
        Assertions.assertEquals("wgcu", model.properties().ruleMetadata().title());
        Assertions.assertEquals("tumkdosvqwhbm", model.properties().ruleMetadata().description());
        Assertions.assertEquals("bbjfddgmbmbexp", model.properties().ruleMetadata().rationale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanResultInner model =
            new ScanResultInner()
                .withProperties(
                    new ScanResultProperties()
                        .withRuleId("hutje")
                        .withStatus(RuleStatus.FINDING)
                        .withIsTrimmed(true)
                        .withQueryResults(
                            Arrays
                                .asList(
                                    Arrays.asList("gjzzdatqxhocdg", "ablgphuticndvk", "ozwyiftyhxhuro", "ftyxolniw"),
                                    Arrays.asList("cukjf", "giawx", "lryplwckbasyy", "nddhsgcbacph"),
                                    Arrays.asList("koty"),
                                    Arrays.asList("gou", "zndlikwy")))
                        .withRemediation(
                            new Remediation()
                                .withDescription("fgibmadgakeq")
                                .withScripts(Arrays.asList("yb"))
                                .withAutomated(true)
                                .withPortalLink("dqytbciqfouflmm"))
                        .withBaselineAdjustedResult(
                            new BaselineAdjustedResult()
                                .withStatus(RuleStatus.INTERNAL_ERROR)
                                .withResultsNotInBaseline(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                .withResultsOnlyInBaseline(Arrays.asList(Arrays.asList(), Arrays.asList())))
                        .withRuleMetadata(
                            new VaRule()
                                .withRuleId("ugpbkw")
                                .withSeverity(RuleSeverity.INFORMATIONAL)
                                .withCategory("duqkt")
                                .withRuleType(RuleType.NEGATIVE_LIST)
                                .withTitle("wgcu")
                                .withDescription("tumkdosvqwhbm")
                                .withRationale("bbjfddgmbmbexp")
                                .withBenchmarkReferences(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(ScanResultInner.class);
        Assertions.assertEquals("hutje", model.properties().ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.properties().status());
        Assertions.assertEquals(true, model.properties().isTrimmed());
        Assertions.assertEquals("gjzzdatqxhocdg", model.properties().queryResults().get(0).get(0));
        Assertions.assertEquals("fgibmadgakeq", model.properties().remediation().description());
        Assertions.assertEquals("yb", model.properties().remediation().scripts().get(0));
        Assertions.assertEquals(true, model.properties().remediation().automated());
        Assertions.assertEquals("dqytbciqfouflmm", model.properties().remediation().portalLink());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.properties().baselineAdjustedResult().status());
        Assertions.assertEquals("ugpbkw", model.properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.INFORMATIONAL, model.properties().ruleMetadata().severity());
        Assertions.assertEquals("duqkt", model.properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.properties().ruleMetadata().ruleType());
        Assertions.assertEquals("wgcu", model.properties().ruleMetadata().title());
        Assertions.assertEquals("tumkdosvqwhbm", model.properties().ruleMetadata().description());
        Assertions.assertEquals("bbjfddgmbmbexp", model.properties().ruleMetadata().rationale());
    }
}
