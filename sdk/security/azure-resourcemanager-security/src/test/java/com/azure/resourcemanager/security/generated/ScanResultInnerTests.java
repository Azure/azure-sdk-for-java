// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.ScanResultInner;
import com.azure.resourcemanager.security.models.BaselineAdjustedResult;
import com.azure.resourcemanager.security.models.Remediation;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResultProperties;
import com.azure.resourcemanager.security.models.VaRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScanResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanResultInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"ruleId\":\"ejjjkxybwfdb\",\"status\":\"NonFinding\",\"isTrimmed\":true,\"queryResults\":[[\"vkzykjtjknsxf\",\"us\"]],\"remediation\":{\"description\":\"pkupnq\",\"scripts\":[\"jfbp\",\"uwxeoiojfizf\",\"vkjzwfbcyaykm\"],\"automated\":false,\"portalLink\":\"bfw\"},\"baselineAdjustedResult\":{\"status\":\"InternalError\",\"resultsNotInBaseline\":[[],[],[],[]],\"resultsOnlyInBaseline\":[[]]},\"ruleMetadata\":{\"ruleId\":\"xkrplbjaz\",\"severity\":\"Medium\",\"category\":\"viyoypsuhbrnnhjx\",\"ruleType\":\"Binary\",\"title\":\"hqkb\",\"description\":\"etpozycyqiq\",\"rationale\":\"gfsetzlexbsfled\",\"benchmarkReferences\":[]}},\"id\":\"pziuwfbzkkdtnh\",\"name\":\"sycljsel\",\"type\":\"kpbafvafhl\"}")
                .toObject(ScanResultInner.class);
        Assertions.assertEquals("ejjjkxybwfdb", model.properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.properties().status());
        Assertions.assertEquals(true, model.properties().isTrimmed());
        Assertions.assertEquals("vkzykjtjknsxf", model.properties().queryResults().get(0).get(0));
        Assertions.assertEquals("pkupnq", model.properties().remediation().description());
        Assertions.assertEquals("jfbp", model.properties().remediation().scripts().get(0));
        Assertions.assertEquals(false, model.properties().remediation().automated());
        Assertions.assertEquals("bfw", model.properties().remediation().portalLink());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.properties().baselineAdjustedResult().status());
        Assertions.assertEquals("xkrplbjaz", model.properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.MEDIUM, model.properties().ruleMetadata().severity());
        Assertions.assertEquals("viyoypsuhbrnnhjx", model.properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.BINARY, model.properties().ruleMetadata().ruleType());
        Assertions.assertEquals("hqkb", model.properties().ruleMetadata().title());
        Assertions.assertEquals("etpozycyqiq", model.properties().ruleMetadata().description());
        Assertions.assertEquals("gfsetzlexbsfled", model.properties().ruleMetadata().rationale());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanResultInner model =
            new ScanResultInner()
                .withProperties(
                    new ScanResultProperties()
                        .withRuleId("ejjjkxybwfdb")
                        .withStatus(RuleStatus.NON_FINDING)
                        .withIsTrimmed(true)
                        .withQueryResults(Arrays.asList(Arrays.asList("vkzykjtjknsxf", "us")))
                        .withRemediation(
                            new Remediation()
                                .withDescription("pkupnq")
                                .withScripts(Arrays.asList("jfbp", "uwxeoiojfizf", "vkjzwfbcyaykm"))
                                .withAutomated(false)
                                .withPortalLink("bfw"))
                        .withBaselineAdjustedResult(
                            new BaselineAdjustedResult()
                                .withStatus(RuleStatus.INTERNAL_ERROR)
                                .withResultsNotInBaseline(
                                    Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList(), Arrays.asList()))
                                .withResultsOnlyInBaseline(Arrays.asList(Arrays.asList())))
                        .withRuleMetadata(
                            new VaRule()
                                .withRuleId("xkrplbjaz")
                                .withSeverity(RuleSeverity.MEDIUM)
                                .withCategory("viyoypsuhbrnnhjx")
                                .withRuleType(RuleType.BINARY)
                                .withTitle("hqkb")
                                .withDescription("etpozycyqiq")
                                .withRationale("gfsetzlexbsfled")
                                .withBenchmarkReferences(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(ScanResultInner.class);
        Assertions.assertEquals("ejjjkxybwfdb", model.properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.properties().status());
        Assertions.assertEquals(true, model.properties().isTrimmed());
        Assertions.assertEquals("vkzykjtjknsxf", model.properties().queryResults().get(0).get(0));
        Assertions.assertEquals("pkupnq", model.properties().remediation().description());
        Assertions.assertEquals("jfbp", model.properties().remediation().scripts().get(0));
        Assertions.assertEquals(false, model.properties().remediation().automated());
        Assertions.assertEquals("bfw", model.properties().remediation().portalLink());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.properties().baselineAdjustedResult().status());
        Assertions.assertEquals("xkrplbjaz", model.properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.MEDIUM, model.properties().ruleMetadata().severity());
        Assertions.assertEquals("viyoypsuhbrnnhjx", model.properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.BINARY, model.properties().ruleMetadata().ruleType());
        Assertions.assertEquals("hqkb", model.properties().ruleMetadata().title());
        Assertions.assertEquals("etpozycyqiq", model.properties().ruleMetadata().description());
        Assertions.assertEquals("gfsetzlexbsfled", model.properties().ruleMetadata().rationale());
    }
}
