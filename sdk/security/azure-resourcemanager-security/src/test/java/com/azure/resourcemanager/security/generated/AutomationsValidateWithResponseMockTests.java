// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.fluent.models.AutomationInner;
import com.azure.resourcemanager.security.models.AutomationAction;
import com.azure.resourcemanager.security.models.AutomationRuleSet;
import com.azure.resourcemanager.security.models.AutomationScope;
import com.azure.resourcemanager.security.models.AutomationSource;
import com.azure.resourcemanager.security.models.AutomationValidationStatus;
import com.azure.resourcemanager.security.models.EventSource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AutomationsValidateWithResponseMockTests {
    @Test
    public void testValidateWithResponse() throws Exception {
        String responseStr = "{\"isValid\":false,\"message\":\"ehohflyuv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AutomationValidationStatus response = manager.automations()
            .validateWithResponse("cdolrpgupsjlbsmn", "a", new AutomationInner().withLocation("kopaiildcp")
                .withTags(mapOf("drobujnjgy", "hquxsyjofpgv", "njgcp", "uxmqxigidul"))
                .withDescription("cuyjeykcnhpplzhc")
                .withIsEnabled(true)
                .withScopes(Arrays.asList(new AutomationScope().withDescription("uucrl").withScopePath("wnuwkkfzzetl"),
                    new AutomationScope().withDescription("dyxzlvwywjvr").withScopePath("qpwwlzpddarc"),
                    new AutomationScope().withDescription("dwhslxebaj").withScopePath("knmstbdoprwkamp"),
                    new AutomationScope().withDescription("wpbldz").withScopePath("udrcycm")))
                .withSources(Arrays.asList(
                    new AutomationSource().withEventSource(EventSource.ATTACK_PATHS_SNAPSHOT)
                        .withRuleSets(Arrays.asList(new AutomationRuleSet())),
                    new AutomationSource().withEventSource(EventSource.ATTACK_PATHS)
                        .withRuleSets(Arrays.asList(new AutomationRuleSet())),
                    new AutomationSource().withEventSource(EventSource.SUB_ASSESSMENTS_SNAPSHOT)
                        .withRuleSets(Arrays.asList(new AutomationRuleSet())),
                    new AutomationSource().withEventSource(EventSource.SECURE_SCORE_CONTROLS_SNAPSHOT)
                        .withRuleSets(Arrays.asList(new AutomationRuleSet()))))
                .withActions(Arrays.asList(new AutomationAction(), new AutomationAction())),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(false, response.isValid());
        Assertions.assertEquals("ehohflyuv", response.message());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
