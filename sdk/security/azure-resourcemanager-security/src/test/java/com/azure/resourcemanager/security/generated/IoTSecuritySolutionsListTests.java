// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecuritySolutionModelInner;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceDataType;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.AdditionalWorkspacesProperties;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.IoTSecuritySolutionsList;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationConfigurationProperties;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import com.azure.resourcemanager.security.models.UserDefinedResourcesProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecuritySolutionsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecuritySolutionsList model = BinaryData.fromString(
            "{\"value\":[{\"location\":\"rijwai\",\"properties\":{\"workspace\":\"n\",\"displayName\":\"aybfu\",\"status\":\"Disabled\",\"export\":[\"RawEvents\"],\"disabledDataSources\":[\"TwinData\"],\"iotHubs\":[\"rhydkygywez\",\"kiecafygzm\"],\"userDefinedResources\":{\"query\":\"eqvdsm\",\"querySubscriptions\":[\"lixqcah\",\"hxalybxawo\",\"jpodtbl\",\"pkkwj\"]},\"autoDiscoveredResources\":[\"dqhykincnre\",\"ehllizhceum\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_OpenPorts\",\"name\":\"adppyibn\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_PermissiveFirewallPolicy\",\"name\":\"d\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_IPFilter_PermissiveRule\",\"name\":\"whydt\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_IPFilter_DenyAll\",\"name\":\"adswz\",\"status\":\"Enabled\"}],\"unmaskedIpLoggingStatus\":\"Enabled\",\"additionalWorkspaces\":[{\"workspace\":\"owuowh\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"Alerts\"]},{\"workspace\":\"ouvblgmo\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"RawEvents\",\"RawEvents\"]},{\"workspace\":\"tdvrfmv\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"Alerts\",\"RawEvents\",\"Alerts\"]}]},\"tags\":{\"vhdxlwyo\":\"idhftu\",\"kfnjyixhafrat\":\"bfqz\"},\"id\":\"xmbjroum\",\"name\":\"znv\",\"type\":\"l\"}],\"nextLink\":\"rhuzgfxonjtpu\"}")
            .toObject(IoTSecuritySolutionsList.class);
        Assertions.assertEquals("rijwai", model.value().get(0).location());
        Assertions.assertEquals("idhftu", model.value().get(0).tags().get("vhdxlwyo"));
        Assertions.assertEquals("n", model.value().get(0).workspace());
        Assertions.assertEquals("aybfu", model.value().get(0).displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, model.value().get(0).status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.value().get(0).export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.value().get(0).disabledDataSources().get(0));
        Assertions.assertEquals("rhydkygywez", model.value().get(0).iotHubs().get(0));
        Assertions.assertEquals("eqvdsm", model.value().get(0).userDefinedResources().query());
        Assertions.assertEquals("lixqcah", model.value().get(0).userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_OPEN_PORTS,
            model.value().get(0).recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.ENABLED,
            model.value().get(0).recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.ENABLED, model.value().get(0).unmaskedIpLoggingStatus());
        Assertions.assertEquals("owuowh", model.value().get(0).additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL,
            model.value().get(0).additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.ALERTS,
            model.value().get(0).additionalWorkspaces().get(0).dataTypes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecuritySolutionsList model
            = new IoTSecuritySolutionsList()
                .withValue(
                    Arrays
                        .asList(
                            new IoTSecuritySolutionModelInner().withLocation("rijwai")
                                .withTags(mapOf("vhdxlwyo", "idhftu", "kfnjyixhafrat", "bfqz"))
                                .withWorkspace("n")
                                .withDisplayName("aybfu")
                                .withStatus(SecuritySolutionStatus.DISABLED)
                                .withExport(Arrays.asList(ExportData.RAW_EVENTS))
                                .withDisabledDataSources(Arrays.asList(DataSource.TWIN_DATA))
                                .withIotHubs(Arrays.asList("rhydkygywez", "kiecafygzm"))
                                .withUserDefinedResources(new UserDefinedResourcesProperties().withQuery("eqvdsm")
                                    .withQuerySubscriptions(Arrays.asList("lixqcah", "hxalybxawo", "jpodtbl", "pkkwj")))
                                .withRecommendationsConfiguration(Arrays.asList(
                                    new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_OPEN_PORTS)
                                        .withStatus(RecommendationConfigStatus.ENABLED),
                                    new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY)
                                        .withStatus(RecommendationConfigStatus.ENABLED),
                                    new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_IPFILTER_PERMISSIVE_RULE)
                                        .withStatus(RecommendationConfigStatus.ENABLED),
                                    new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_IPFILTER_DENY_ALL)
                                        .withStatus(RecommendationConfigStatus.ENABLED)))
                                .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.ENABLED)
                                .withAdditionalWorkspaces(Arrays.asList(
                                    new AdditionalWorkspacesProperties().withWorkspace("owuowh")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.ALERTS,
                                            AdditionalWorkspaceDataType.ALERTS)),
                                    new AdditionalWorkspacesProperties().withWorkspace("ouvblgmo")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                                            AdditionalWorkspaceDataType.RAW_EVENTS,
                                            AdditionalWorkspaceDataType.RAW_EVENTS)),
                                    new AdditionalWorkspacesProperties().withWorkspace("tdvrfmv")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                                            AdditionalWorkspaceDataType.ALERTS, AdditionalWorkspaceDataType.RAW_EVENTS,
                                            AdditionalWorkspaceDataType.ALERTS))))));
        model = BinaryData.fromObject(model).toObject(IoTSecuritySolutionsList.class);
        Assertions.assertEquals("rijwai", model.value().get(0).location());
        Assertions.assertEquals("idhftu", model.value().get(0).tags().get("vhdxlwyo"));
        Assertions.assertEquals("n", model.value().get(0).workspace());
        Assertions.assertEquals("aybfu", model.value().get(0).displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, model.value().get(0).status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.value().get(0).export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.value().get(0).disabledDataSources().get(0));
        Assertions.assertEquals("rhydkygywez", model.value().get(0).iotHubs().get(0));
        Assertions.assertEquals("eqvdsm", model.value().get(0).userDefinedResources().query());
        Assertions.assertEquals("lixqcah", model.value().get(0).userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_OPEN_PORTS,
            model.value().get(0).recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.ENABLED,
            model.value().get(0).recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.ENABLED, model.value().get(0).unmaskedIpLoggingStatus());
        Assertions.assertEquals("owuowh", model.value().get(0).additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL,
            model.value().get(0).additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.ALERTS,
            model.value().get(0).additionalWorkspaces().get(0).dataTypes().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
