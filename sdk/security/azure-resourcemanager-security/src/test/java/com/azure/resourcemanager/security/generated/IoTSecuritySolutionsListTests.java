// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecuritySolutionModelInner;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceDataType;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.AdditionalWorkspacesProperties;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.IoTSecuritySolutionsList;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationConfigurationProperties;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import com.azure.resourcemanager.security.models.UserDefinedResourcesProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecuritySolutionsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecuritySolutionsList model = BinaryData.fromString(
            "{\"value\":[{\"location\":\"gjfbpkuwxeoi\",\"properties\":{\"workspace\":\"izfavkjzwf\",\"displayName\":\"cyayk\",\"status\":\"Enabled\",\"export\":[\"RawEvents\",\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\",\"TwinData\",\"TwinData\"],\"iotHubs\":[\"ewsrsxkrplbjaze\"],\"userDefinedResources\":{\"query\":\"w\",\"querySubscriptions\":[\"yoyp\",\"uhbrnnhjxsq\",\"jhqkbiwetpozy\",\"yqiq\"]},\"autoDiscoveredResources\":[\"fsetz\",\"e\",\"bsfledynojpziu\",\"fbzkk\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_PermissiveFirewallPolicy\",\"name\":\"sycljsel\",\"status\":\"Enabled\"}],\"unmaskedIpLoggingStatus\":\"Enabled\",\"additionalWorkspaces\":[{\"workspace\":\"afhlbyl\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\"]},{\"workspace\":\"hyzdfwrs\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\"]}]},\"tags\":{\"fnrac\":\"irrhv\",\"g\":\"npq\",\"ouhdawsigrb\":\"uuj\",\"az\":\"bxsjybvitvqkj\"},\"id\":\"umtggmuwdchozfn\",\"name\":\"fexl\",\"type\":\"xn\"},{\"location\":\"kizvoa\",\"properties\":{\"workspace\":\"a\",\"displayName\":\"lnuwiguy\",\"status\":\"Disabled\",\"export\":[\"RawEvents\",\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\",\"TwinData\"],\"iotHubs\":[\"hmpejtlkexaonw\",\"vkcqhr\",\"hxknlccrmmkyupi\"],\"userDefinedResources\":{\"query\":\"byqjfkakfqfrkem\",\"querySubscriptions\":[\"ldudxjascowv\"]},\"autoDiscoveredResources\":[\"kpdxphlk\",\"snmgzvyfi\",\"dkz\",\"qnwsithuqolyah\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_SharedCredentials\",\"name\":\"ulsutrjbhxy\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_IPFilter_DenyAll\",\"name\":\"qezv\",\"status\":\"Enabled\"}],\"unmaskedIpLoggingStatus\":\"Disabled\",\"additionalWorkspaces\":[{\"workspace\":\"tb\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"RawEvents\",\"RawEvents\"]}]},\"tags\":{\"rqtvbczsulmdgglm\":\"tljvfwhreagkhyx\"},\"id\":\"pjpfseykgs\",\"name\":\"ngpszngafpg\",\"type\":\"lkvec\"},{\"location\":\"jcngoadyed\",\"properties\":{\"workspace\":\"gjfoknubnoitpkpz\",\"displayName\":\"rgdg\",\"status\":\"Enabled\",\"export\":[\"RawEvents\",\"RawEvents\",\"RawEvents\",\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\"],\"iotHubs\":[\"qi\",\"we\"],\"userDefinedResources\":{\"query\":\"l\",\"querySubscriptions\":[\"skbuhzaca\",\"ty\",\"tco\"]},\"autoDiscoveredResources\":[\"jpds\",\"zakuejk\",\"vbiztjofqcv\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_AgentSendsUnutilizedMessages\",\"name\":\"ycsjmlbem\",\"status\":\"Disabled\"}],\"unmaskedIpLoggingStatus\":\"Enabled\",\"additionalWorkspaces\":[{\"workspace\":\"xeg\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"RawEvents\"]},{\"workspace\":\"wlpjfelqerppt\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"Alerts\",\"Alerts\"]}]},\"tags\":{\"praoxn\":\"lialwcjgckbbcccg\",\"byubhiqdxyurnpn\":\"uffatsgftipwc\",\"ccnuhiig\":\"hza\"},\"id\":\"yl\",\"name\":\"ui\",\"type\":\"vxva\"}],\"nextLink\":\"crkdlbn\"}")
            .toObject(IoTSecuritySolutionsList.class);
        Assertions.assertEquals("gjfbpkuwxeoi", model.value().get(0).location());
        Assertions.assertEquals("irrhv", model.value().get(0).tags().get("fnrac"));
        Assertions.assertEquals("izfavkjzwf", model.value().get(0).workspace());
        Assertions.assertEquals("cyayk", model.value().get(0).displayName());
        Assertions.assertEquals(SecuritySolutionStatus.ENABLED, model.value().get(0).status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.value().get(0).export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.value().get(0).disabledDataSources().get(0));
        Assertions.assertEquals("ewsrsxkrplbjaze", model.value().get(0).iotHubs().get(0));
        Assertions.assertEquals("w", model.value().get(0).userDefinedResources().query());
        Assertions.assertEquals("yoyp", model.value().get(0).userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY,
            model.value().get(0).recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.ENABLED,
            model.value().get(0).recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.ENABLED, model.value().get(0).unmaskedIpLoggingStatus());
        Assertions.assertEquals("afhlbyl", model.value().get(0).additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL,
            model.value().get(0).additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.RAW_EVENTS,
            model.value().get(0).additionalWorkspaces().get(0).dataTypes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecuritySolutionsList model
            = new IoTSecuritySolutionsList()
                .withValue(
                    Arrays
                        .asList(
                            new IoTSecuritySolutionModelInner().withLocation("gjfbpkuwxeoi")
                                .withTags(
                                    mapOf("fnrac", "irrhv", "g", "npq", "ouhdawsigrb", "uuj", "az", "bxsjybvitvqkj"))
                                .withWorkspace("izfavkjzwf")
                                .withDisplayName("cyayk")
                                .withStatus(SecuritySolutionStatus.ENABLED)
                                .withExport(Arrays.asList(ExportData.RAW_EVENTS, ExportData.RAW_EVENTS))
                                .withDisabledDataSources(Arrays.asList(DataSource.TWIN_DATA, DataSource.TWIN_DATA,
                                    DataSource.TWIN_DATA, DataSource.TWIN_DATA))
                                .withIotHubs(Arrays.asList("ewsrsxkrplbjaze"))
                                .withUserDefinedResources(new UserDefinedResourcesProperties().withQuery("w")
                                    .withQuerySubscriptions(
                                        Arrays.asList("yoyp", "uhbrnnhjxsq", "jhqkbiwetpozy", "yqiq")))
                                .withRecommendationsConfiguration(
                                    Arrays.asList(new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY)
                                        .withStatus(RecommendationConfigStatus.ENABLED)))
                                .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.ENABLED)
                                .withAdditionalWorkspaces(Arrays.asList(
                                    new AdditionalWorkspacesProperties().withWorkspace("afhlbyl")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS)),
                                    new AdditionalWorkspacesProperties()
                                        .withWorkspace("hyzdfwrs")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS)))),
                            new IoTSecuritySolutionModelInner().withLocation("kizvoa")
                                .withTags(mapOf("rqtvbczsulmdgglm", "tljvfwhreagkhyx"))
                                .withWorkspace("a")
                                .withDisplayName("lnuwiguy")
                                .withStatus(SecuritySolutionStatus.DISABLED)
                                .withExport(Arrays.asList(ExportData.RAW_EVENTS, ExportData.RAW_EVENTS))
                                .withDisabledDataSources(
                                    Arrays.asList(DataSource.TWIN_DATA, DataSource.TWIN_DATA, DataSource.TWIN_DATA))
                                .withIotHubs(Arrays.asList("hmpejtlkexaonw", "vkcqhr", "hxknlccrmmkyupi"))
                                .withUserDefinedResources(
                                    new UserDefinedResourcesProperties().withQuery("byqjfkakfqfrkem")
                                        .withQuerySubscriptions(Arrays.asList("ldudxjascowv")))
                                .withRecommendationsConfiguration(Arrays.asList(
                                    new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_SHARED_CREDENTIALS)
                                        .withStatus(RecommendationConfigStatus.ENABLED),
                                    new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_IPFILTER_DENY_ALL)
                                        .withStatus(RecommendationConfigStatus.ENABLED)))
                                .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.DISABLED)
                                .withAdditionalWorkspaces(
                                    Arrays.asList(new AdditionalWorkspacesProperties().withWorkspace("tb")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(
                                            AdditionalWorkspaceDataType.ALERTS, AdditionalWorkspaceDataType.RAW_EVENTS,
                                            AdditionalWorkspaceDataType.RAW_EVENTS)))),
                            new IoTSecuritySolutionModelInner().withLocation("jcngoadyed")
                                .withTags(mapOf("praoxn", "lialwcjgckbbcccg", "byubhiqdxyurnpn", "uffatsgftipwc",
                                    "ccnuhiig", "hza"))
                                .withWorkspace("gjfoknubnoitpkpz")
                                .withDisplayName("rgdg")
                                .withStatus(SecuritySolutionStatus.ENABLED)
                                .withExport(Arrays.asList(ExportData.RAW_EVENTS, ExportData.RAW_EVENTS,
                                    ExportData.RAW_EVENTS, ExportData.RAW_EVENTS))
                                .withDisabledDataSources(Arrays.asList(DataSource.TWIN_DATA, DataSource.TWIN_DATA))
                                .withIotHubs(Arrays.asList("qi", "we"))
                                .withUserDefinedResources(new UserDefinedResourcesProperties().withQuery("l")
                                    .withQuerySubscriptions(Arrays.asList("skbuhzaca", "ty", "tco")))
                                .withRecommendationsConfiguration(
                                    Arrays.asList(new RecommendationConfigurationProperties()
                                        .withRecommendationType(RecommendationType.IO_T_AGENT_SENDS_UNUTILIZED_MESSAGES)
                                        .withStatus(RecommendationConfigStatus.DISABLED)))
                                .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.ENABLED)
                                .withAdditionalWorkspaces(Arrays.asList(
                                    new AdditionalWorkspacesProperties().withWorkspace("xeg")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                                            AdditionalWorkspaceDataType.RAW_EVENTS)),
                                    new AdditionalWorkspacesProperties().withWorkspace("wlpjfelqerppt")
                                        .withType(AdditionalWorkspaceType.SENTINEL)
                                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                                            AdditionalWorkspaceDataType.ALERTS,
                                            AdditionalWorkspaceDataType.ALERTS))))));
        model = BinaryData.fromObject(model).toObject(IoTSecuritySolutionsList.class);
        Assertions.assertEquals("gjfbpkuwxeoi", model.value().get(0).location());
        Assertions.assertEquals("irrhv", model.value().get(0).tags().get("fnrac"));
        Assertions.assertEquals("izfavkjzwf", model.value().get(0).workspace());
        Assertions.assertEquals("cyayk", model.value().get(0).displayName());
        Assertions.assertEquals(SecuritySolutionStatus.ENABLED, model.value().get(0).status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.value().get(0).export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.value().get(0).disabledDataSources().get(0));
        Assertions.assertEquals("ewsrsxkrplbjaze", model.value().get(0).iotHubs().get(0));
        Assertions.assertEquals("w", model.value().get(0).userDefinedResources().query());
        Assertions.assertEquals("yoyp", model.value().get(0).userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY,
            model.value().get(0).recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.ENABLED,
            model.value().get(0).recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.ENABLED, model.value().get(0).unmaskedIpLoggingStatus());
        Assertions.assertEquals("afhlbyl", model.value().get(0).additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL,
            model.value().get(0).additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.RAW_EVENTS,
            model.value().get(0).additionalWorkspaces().get(0).dataTypes().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
