// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.UpdateSensitivitySettingsRequest;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class UpdateSensitivitySettingsRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateSensitivitySettingsRequest model = BinaryData.fromString(
            "{\"sensitiveInfoTypesIds\":[\"a4a9e227-003d-4d3a-833f-53d3ef743cc1\",\"358023ce-51ba-4297-8b23-5ff2440bb1d5\",\"463a547a-bada-4c5e-8b1c-2a71d937aed3\"],\"sensitivityThresholdLabelOrder\":15.116018,\"sensitivityThresholdLabelId\":\"58dda295-5326-4cea-863e-4b58a150d0a6\"}")
            .toObject(UpdateSensitivitySettingsRequest.class);
        Assertions.assertEquals(UUID.fromString("a4a9e227-003d-4d3a-833f-53d3ef743cc1"),
            model.sensitiveInfoTypesIds().get(0));
        Assertions.assertEquals(15.116018F, model.sensitivityThresholdLabelOrder());
        Assertions.assertEquals(UUID.fromString("58dda295-5326-4cea-863e-4b58a150d0a6"),
            model.sensitivityThresholdLabelId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateSensitivitySettingsRequest model = new UpdateSensitivitySettingsRequest()
            .withSensitiveInfoTypesIds(Arrays.asList(UUID.fromString("a4a9e227-003d-4d3a-833f-53d3ef743cc1"),
                UUID.fromString("358023ce-51ba-4297-8b23-5ff2440bb1d5"),
                UUID.fromString("463a547a-bada-4c5e-8b1c-2a71d937aed3")))
            .withSensitivityThresholdLabelOrder(15.116018F)
            .withSensitivityThresholdLabelId(UUID.fromString("58dda295-5326-4cea-863e-4b58a150d0a6"));
        model = BinaryData.fromObject(model).toObject(UpdateSensitivitySettingsRequest.class);
        Assertions.assertEquals(UUID.fromString("a4a9e227-003d-4d3a-833f-53d3ef743cc1"),
            model.sensitiveInfoTypesIds().get(0));
        Assertions.assertEquals(15.116018F, model.sensitivityThresholdLabelOrder());
        Assertions.assertEquals(UUID.fromString("58dda295-5326-4cea-863e-4b58a150d0a6"),
            model.sensitivityThresholdLabelId());
    }
}
