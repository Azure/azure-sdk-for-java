// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GetSensitivitySettingsResponse;
import com.azure.resourcemanager.security.models.MipIntegrationStatus;
import com.azure.resourcemanager.security.models.UpdateSensitivitySettingsRequest;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourceProvidersUpdateSensitivitySettingsWithResponseMockTests {
    @Test
    public void testUpdateSensitivitySettingsWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"sensitiveInfoTypesIds\":[\"c806737f-170b-4094-b896-1331ed222d71\"],\"sensitivityThresholdLabelOrder\":28.38757,\"sensitivityThresholdLabelId\":\"40c6af0f-f978-47e3-83d4-bee02b38b183\",\"mipInformation\":{\"mipIntegrationStatus\":\"Ok\",\"labels\":[{\"name\":\"phklqlii\",\"id\":\"540452a1-0503-4bda-b3e6-34732f5c7142\",\"order\":3.883618}],\"customInfoTypes\":[{\"name\":\"jno\",\"id\":\"eb04953c-e565-4102-86b3-7583aaa99b6f\",\"description\":\"jydgseb\"},{\"name\":\"y\",\"id\":\"43adc73a-7907-44b0-839a-f4799253912a\",\"description\":\"vaebzmwywhrjke\"},{\"name\":\"aedogzougxbxx\",\"id\":\"7b1cd697-5499-4f0b-aa2d-dfc72df79803\",\"description\":\"gcphivfhrmte\"}],\"builtInInfoTypes\":[{\"name\":\"doe\",\"id\":\"b564c5d9-c6c1-4e5f-834b-c7398c64aaeb\",\"type\":\"wusrjzhdt\"}]}},\"id\":\"syfezfsmyljd\",\"name\":\"yyrwnmwtqi\",\"type\":\"jk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        GetSensitivitySettingsResponse response = manager.resourceProviders()
            .updateSensitivitySettingsWithResponse(
                new UpdateSensitivitySettingsRequest()
                    .withSensitiveInfoTypesIds(Arrays.asList(UUID.fromString("f6a8cfae-4764-4d4e-9a58-11e33fbfd88b"),
                        UUID.fromString("83d2a01c-3dca-4a8c-ab26-36e2be54a0b7")))
                    .withSensitivityThresholdLabelOrder(24.597157F)
                    .withSensitivityThresholdLabelId(UUID.fromString("4ba9e1ad-d0b3-4cd4-972a-3c750d9e7077")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(UUID.fromString("c806737f-170b-4094-b896-1331ed222d71"),
            response.properties().sensitiveInfoTypesIds().get(0));
        Assertions.assertEquals(28.38757F, response.properties().sensitivityThresholdLabelOrder());
        Assertions.assertEquals(UUID.fromString("40c6af0f-f978-47e3-83d4-bee02b38b183"),
            response.properties().sensitivityThresholdLabelId());
        Assertions.assertEquals(MipIntegrationStatus.OK, response.properties().mipInformation().mipIntegrationStatus());
        Assertions.assertEquals("phklqlii", response.properties().mipInformation().labels().get(0).name());
        Assertions.assertEquals(UUID.fromString("540452a1-0503-4bda-b3e6-34732f5c7142"),
            response.properties().mipInformation().labels().get(0).id());
        Assertions.assertEquals(3.883618F, response.properties().mipInformation().labels().get(0).order());
        Assertions.assertEquals("jno", response.properties().mipInformation().customInfoTypes().get(0).name());
        Assertions.assertEquals(UUID.fromString("eb04953c-e565-4102-86b3-7583aaa99b6f"),
            response.properties().mipInformation().customInfoTypes().get(0).id());
        Assertions.assertEquals("jydgseb",
            response.properties().mipInformation().customInfoTypes().get(0).description());
        Assertions.assertEquals("doe", response.properties().mipInformation().builtInInfoTypes().get(0).name());
        Assertions.assertEquals(UUID.fromString("b564c5d9-c6c1-4e5f-834b-c7398c64aaeb"),
            response.properties().mipInformation().builtInInfoTypes().get(0).id());
        Assertions.assertEquals("wusrjzhdt", response.properties().mipInformation().builtInInfoTypes().get(0).type());
    }
}
