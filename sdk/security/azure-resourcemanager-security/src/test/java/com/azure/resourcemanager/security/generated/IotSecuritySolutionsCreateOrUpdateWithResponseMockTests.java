// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceDataType;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.AdditionalWorkspacesProperties;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.IoTSecuritySolutionModel;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationConfigurationProperties;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import com.azure.resourcemanager.security.models.UserDefinedResourcesProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotSecuritySolutionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"lirqqcls\",\"properties\":{\"workspace\":\"fepdureev\",\"displayName\":\"vk\",\"status\":\"Disabled\",\"export\":[\"RawEvents\",\"RawEvents\",\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\",\"TwinData\",\"TwinData\"],\"iotHubs\":[\"wctl\",\"ytbltyt\"],\"userDefinedResources\":{\"query\":\"pbgcesfddf\",\"querySubscriptions\":[\"mowurofof\",\"b\",\"jzzwweoblb\",\"dq\"]},\"autoDiscoveredResources\":[\"xccn\",\"fsogvyoxmyqzyqe\",\"gbbzdsl\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_AgentSendsUnutilizedMessages\",\"name\":\"vo\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_InstallAgent\",\"name\":\"pwmgwxwukfjv\",\"status\":\"Disabled\"}],\"unmaskedIpLoggingStatus\":\"Disabled\",\"additionalWorkspaces\":[{\"workspace\":\"isvvvgyphheove\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"RawEvents\"]}]},\"tags\":{\"s\":\"thrtzpuv\",\"uo\":\"rgrqefn\",\"ehdhjofywwna\":\"louurmuzembqq\"},\"id\":\"oxlorxgsl\",\"name\":\"c\",\"type\":\"u\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IoTSecuritySolutionModel response = manager.iotSecuritySolutions()
            .define("traitrmsukxt")
            .withExistingResourceGroup("xsp")
            .withRegion("tgcptctxpoeg")
            .withTags(mapOf("qdm", "opx", "lzwgdpvhw", "lznyjyuw"))
            .withWorkspace("memfvrcclclfkfvy")
            .withDisplayName("ommwrvpoip")
            .withStatus(SecuritySolutionStatus.ENABLED)
            .withExport(Arrays.asList(ExportData.RAW_EVENTS, ExportData.RAW_EVENTS, ExportData.RAW_EVENTS,
                ExportData.RAW_EVENTS))
            .withDisabledDataSources(Arrays.asList(DataSource.TWIN_DATA, DataSource.TWIN_DATA))
            .withIotHubs(Arrays.asList("vpaysqw", "zdcyandblkbnt", "vpvdfmo", "qctfvxu"))
            .withUserDefinedResources(new UserDefinedResourcesProperties().withQuery("qpffapjpjmsbzz")
                .withQuerySubscriptions(Arrays.asList("nyfowyj", "uakkiubeq", "it")))
            .withRecommendationsConfiguration(Arrays.asList(
                new RecommendationConfigurationProperties()
                    .withRecommendationType(RecommendationType.IO_T_EDGE_HUB_MEM_OPTIMIZE)
                    .withStatus(RecommendationConfigStatus.ENABLED),
                new RecommendationConfigurationProperties()
                    .withRecommendationType(RecommendationType.IO_T_VULNERABLE_TLSCIPHER_SUITE)
                    .withStatus(RecommendationConfigStatus.DISABLED),
                new RecommendationConfigurationProperties()
                    .withRecommendationType(RecommendationType.IO_T_EDGE_LOGGING_OPTIONS)
                    .withStatus(RecommendationConfigStatus.ENABLED),
                new RecommendationConfigurationProperties()
                    .withRecommendationType(RecommendationType.IO_T_ACRAUTHENTICATION)
                    .withStatus(RecommendationConfigStatus.ENABLED)))
            .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.DISABLED)
            .withAdditionalWorkspaces(
                Arrays.asList(
                    new AdditionalWorkspacesProperties().withWorkspace("tromlcsvk")
                        .withType(AdditionalWorkspaceType.SENTINEL)
                        .withDataTypes(
                            Arrays.asList(AdditionalWorkspaceDataType.ALERTS, AdditionalWorkspaceDataType.ALERTS)),
                    new AdditionalWorkspacesProperties().withWorkspace("hvfxjtx")
                        .withType(AdditionalWorkspaceType.SENTINEL)
                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                            AdditionalWorkspaceDataType.RAW_EVENTS, AdditionalWorkspaceDataType.RAW_EVENTS,
                            AdditionalWorkspaceDataType.RAW_EVENTS))))
            .create();

        Assertions.assertEquals("lirqqcls", response.location());
        Assertions.assertEquals("thrtzpuv", response.tags().get("s"));
        Assertions.assertEquals("fepdureev", response.workspace());
        Assertions.assertEquals("vk", response.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, response.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, response.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, response.disabledDataSources().get(0));
        Assertions.assertEquals("wctl", response.iotHubs().get(0));
        Assertions.assertEquals("pbgcesfddf", response.userDefinedResources().query());
        Assertions.assertEquals("mowurofof", response.userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_AGENT_SENDS_UNUTILIZED_MESSAGES,
            response.recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.ENABLED,
            response.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.DISABLED, response.unmaskedIpLoggingStatus());
        Assertions.assertEquals("isvvvgyphheove", response.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, response.additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.RAW_EVENTS,
            response.additionalWorkspaces().get(0).dataTypes().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
