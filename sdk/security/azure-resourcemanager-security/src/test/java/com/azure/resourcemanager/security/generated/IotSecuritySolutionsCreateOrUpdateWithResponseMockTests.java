// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceDataType;
import com.azure.resourcemanager.security.models.AdditionalWorkspacesProperties;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.IoTSecuritySolutionModel;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationConfigurationProperties;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import com.azure.resourcemanager.security.models.UserDefinedResourcesProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotSecuritySolutionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"yrqvelrmd\",\"properties\":{\"workspace\":\"hvksbojkl\",\"displayName\":\"jpzwyn\",\"status\":\"Enabled\",\"export\":[\"RawEvents\",\"RawEvents\",\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\"],\"iotHubs\":[\"fnflytfxu\",\"uiqoomis\"],\"userDefinedResources\":{\"query\":\"qwopw\",\"querySubscriptions\":[\"liyznghuqzgp\",\"glkfvdwrgav\",\"fy\"]},\"autoDiscoveredResources\":[\"dfmzukryx\",\"ijvap\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_EdgeHubMemOptimize\",\"name\":\"mcedl\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_IPFilter_PermissiveRule\",\"name\":\"kyoddoqkanqtrkic\",\"status\":\"Disabled\"},{\"recommendationType\":\"IoT_IPFilter_PermissiveRule\",\"name\":\"rgqmndkrww\",\"status\":\"Enabled\"}],\"unmaskedIpLoggingStatus\":\"Enabled\",\"additionalWorkspaces\":[{\"workspace\":\"qeqfsrna\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"RawEvents\",\"RawEvents\",\"RawEvents\"]},{\"workspace\":\"lpzjeldaqwjun\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"Alerts\",\"RawEvents\"]}]},\"tags\":{\"npkbvzpk\":\"sypo\",\"ldxuczlhvbqyczn\":\"dngvnqdjgsbtwg\",\"cqsdgbxcwtvmi\":\"irpiiuvcqoqkqw\"},\"id\":\"ccpkkjla\",\"name\":\"yvwpr\",\"type\":\"maihtnnlbhxjppcb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IoTSecuritySolutionModel response = manager.iotSecuritySolutions()
            .define("hvchvv")
            .withExistingResourceGroup("mjfgoxedrmra")
            .withRegion("iogbntnwzruzsoo")
            .withTags(mapOf("gpgpkkhpjnglaqlm", "ptedeuenthshnfi", "mtrdlpxiww", "h", "loeohy", "ecpvfpnrzikvo",
                "ukxgoyxontbwdq", "ivxdifbwblijhp"))
            .withWorkspace("smxtlcappnvc")
            .withDisplayName("bsp")
            .withStatus(SecuritySolutionStatus.DISABLED)
            .withExport(Arrays.asList(ExportData.RAW_EVENTS, ExportData.RAW_EVENTS, ExportData.RAW_EVENTS,
                ExportData.RAW_EVENTS))
            .withDisabledDataSources(Arrays.asList(DataSource.TWIN_DATA, DataSource.TWIN_DATA, DataSource.TWIN_DATA))
            .withIotHubs(Arrays.asList("pbkmzkwhjjs", "whaefefvvkxd"))
            .withUserDefinedResources(new UserDefinedResourcesProperties().withQuery("mcvaq")
                .withQuerySubscriptions(Arrays.asList("dzdobuesdy", "fxnzp", "df")))
            .withRecommendationsConfiguration(Arrays.asList(new RecommendationConfigurationProperties()
                .withRecommendationType(RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY)
                .withStatus(RecommendationConfigStatus.ENABLED)))
            .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.ENABLED)
            .withAdditionalWorkspaces(Arrays.asList(new AdditionalWorkspacesProperties().withWorkspace("xwclykcru")
                .withType(AdditionalWorkspaceType.SENTINEL)
                .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.ALERTS, AdditionalWorkspaceDataType.RAW_EVENTS,
                    AdditionalWorkspaceDataType.ALERTS))))
            .create();

        Assertions.assertEquals("yrqvelrmd", response.location());
        Assertions.assertEquals("sypo", response.tags().get("npkbvzpk"));
        Assertions.assertEquals("hvksbojkl", response.workspace());
        Assertions.assertEquals("jpzwyn", response.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.ENABLED, response.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, response.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, response.disabledDataSources().get(0));
        Assertions.assertEquals("fnflytfxu", response.iotHubs().get(0));
        Assertions.assertEquals("qwopw", response.userDefinedResources().query());
        Assertions.assertEquals("liyznghuqzgp", response.userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_EDGE_HUB_MEM_OPTIMIZE,
            response.recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.ENABLED,
            response.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.ENABLED, response.unmaskedIpLoggingStatus());
        Assertions.assertEquals("qeqfsrna", response.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, response.additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.ALERTS,
            response.additionalWorkspaces().get(0).dataTypes().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
