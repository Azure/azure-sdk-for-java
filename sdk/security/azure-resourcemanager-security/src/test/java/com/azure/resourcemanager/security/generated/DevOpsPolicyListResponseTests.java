// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.DevOpsPolicyInner;
import com.azure.resourcemanager.security.models.DevOpsPolicyListResponse;
import com.azure.resourcemanager.security.models.DevOpsPolicyProperties;
import com.azure.resourcemanager.security.models.DevOpsPolicySource;
import com.azure.resourcemanager.security.models.DevOpsPolicyType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DevOpsPolicyListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DevOpsPolicyListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningStatusMessage\":\"qvcdlguaucmfdjw\",\"provisioningStatusUpdateTimeUtc\":\"2021-04-30T08:21:17Z\",\"provisioningState\":\"Canceled\",\"source\":\"BuiltIn\",\"policyId\":\"88c719a4-f316-453e-b0ff-50e320ae7600\",\"webUrl\":\"ikczvvitacgxmf\",\"version\":\"serxht\",\"type\":\"Unknown\",\"content\":\"hlwntsjgq\"},\"id\":\"sxypruuu\",\"name\":\"bnchrsziz\",\"type\":\"yuel\"},{\"properties\":{\"provisioningStatusMessage\":\"dnb\",\"provisioningStatusUpdateTimeUtc\":\"2021-06-04T20:59:26Z\",\"provisioningState\":\"PendingDeletion\",\"source\":\"Unknown\",\"policyId\":\"5e01d657-740c-45be-b7ca-c6da7b3bb31e\",\"webUrl\":\"nlgmtrwahzjmu\",\"version\":\"tb\",\"type\":\"Pipeline\",\"content\":\"rohkpigqfusu\"},\"id\":\"kzmkwklsnoxaxmqe\",\"name\":\"alhhjnhgwydyynfs\",\"type\":\"khgb\"},{\"properties\":{\"provisioningStatusMessage\":\"narfdlpukhpyrn\",\"provisioningStatusUpdateTimeUtc\":\"2021-09-11T10:59:22Z\",\"provisioningState\":\"Pending\",\"source\":\"UserDefined\",\"policyId\":\"f04744f6-1370-446b-aada-1898ecc04dbc\",\"webUrl\":\"khnmgbrou\",\"version\":\"dbhfhp\",\"type\":\"Unknown\",\"content\":\"jzoywjxhp\"},\"id\":\"ulontacnpqwteht\",\"name\":\"evrh\",\"type\":\"ljyoogwx\"}],\"nextLink\":\"sd\"}")
            .toObject(DevOpsPolicyListResponse.class);
        Assertions.assertEquals(DevOpsPolicySource.BUILT_IN, model.value().get(0).properties().source());
        Assertions.assertEquals("serxht", model.value().get(0).properties().version());
        Assertions.assertEquals(DevOpsPolicyType.UNKNOWN, model.value().get(0).properties().type());
        Assertions.assertEquals("hlwntsjgq", model.value().get(0).properties().content());
        Assertions.assertEquals("sd", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DevOpsPolicyListResponse model = new DevOpsPolicyListResponse().withValue(Arrays.asList(
            new DevOpsPolicyInner().withProperties(new DevOpsPolicyProperties().withSource(DevOpsPolicySource.BUILT_IN)
                .withVersion("serxht")
                .withType(DevOpsPolicyType.UNKNOWN)
                .withContent("hlwntsjgq")),
            new DevOpsPolicyInner().withProperties(new DevOpsPolicyProperties().withSource(DevOpsPolicySource.UNKNOWN)
                .withVersion("tb")
                .withType(DevOpsPolicyType.PIPELINE)
                .withContent("rohkpigqfusu")),
            new DevOpsPolicyInner()
                .withProperties(new DevOpsPolicyProperties().withSource(DevOpsPolicySource.USER_DEFINED)
                    .withVersion("dbhfhp")
                    .withType(DevOpsPolicyType.UNKNOWN)
                    .withContent("jzoywjxhp"))))
            .withNextLink("sd");
        model = BinaryData.fromObject(model).toObject(DevOpsPolicyListResponse.class);
        Assertions.assertEquals(DevOpsPolicySource.BUILT_IN, model.value().get(0).properties().source());
        Assertions.assertEquals("serxht", model.value().get(0).properties().version());
        Assertions.assertEquals(DevOpsPolicyType.UNKNOWN, model.value().get(0).properties().type());
        Assertions.assertEquals("hlwntsjgq", model.value().get(0).properties().content());
        Assertions.assertEquals("sd", model.nextLink());
    }
}
