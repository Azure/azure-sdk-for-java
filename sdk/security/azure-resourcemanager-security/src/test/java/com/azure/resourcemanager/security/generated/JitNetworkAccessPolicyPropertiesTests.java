// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.JitNetworkAccessPolicyProperties;
import com.azure.resourcemanager.security.fluent.models.JitNetworkAccessRequestInner;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessPortRule;
import com.azure.resourcemanager.security.models.JitNetworkAccessRequestPort;
import com.azure.resourcemanager.security.models.JitNetworkAccessRequestVirtualMachine;
import com.azure.resourcemanager.security.models.Protocol;
import com.azure.resourcemanager.security.models.Status;
import com.azure.resourcemanager.security.models.StatusReason;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class JitNetworkAccessPolicyPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JitNetworkAccessPolicyProperties model = BinaryData.fromString(
            "{\"virtualMachines\":[{\"id\":\"vb\",\"ports\":[{\"number\":1659687624,\"protocol\":\"TCP\",\"allowedSourceAddressPrefix\":\"qfukpeexpgeumi\",\"allowedSourceAddressPrefixes\":[\"uitrdexyiono\"],\"maxRequestAccessDuration\":\"ninbdbzsxcwqqrs\"},{\"number\":626206569,\"protocol\":\"*\",\"allowedSourceAddressPrefix\":\"bprt\",\"allowedSourceAddressPrefixes\":[\"vbzbcyk\"],\"maxRequestAccessDuration\":\"ivmfogdrtbf\"}],\"publicIpAddress\":\"krftsjcwjjxsg\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"vifdxkecifhocjx\",\"ports\":[{\"number\":1807892496,\"endTimeUtc\":\"2021-11-09T06:12:41Z\",\"status\":\"Revoked\",\"statusReason\":\"NewerRequestInitiated\"}]}],\"startTimeUtc\":\"2021-09-26T02:48:41Z\",\"requestor\":\"vtxvcmufun\",\"justification\":\"px\"},{\"virtualMachines\":[{\"id\":\"ir\",\"ports\":[{\"number\":1909827281,\"endTimeUtc\":\"2021-05-14T15:23:24Z\",\"status\":\"Revoked\",\"statusReason\":\"UserRequested\"},{\"number\":150538667,\"endTimeUtc\":\"2021-02-06T11:17:56Z\",\"status\":\"Revoked\",\"statusReason\":\"UserRequested\"}]}],\"startTimeUtc\":\"2021-02-20T22:10Z\",\"requestor\":\"vpygglp\",\"justification\":\"rdcueljtiahx\"},{\"virtualMachines\":[{\"id\":\"q\",\"ports\":[{\"number\":1149624733,\"endTimeUtc\":\"2021-01-18T20:25:22Z\",\"status\":\"Initiated\",\"statusReason\":\"UserRequested\"},{\"number\":253512413,\"endTimeUtc\":\"2021-03-29T11:07:19Z\",\"status\":\"Initiated\",\"statusReason\":\"NewerRequestInitiated\"},{\"number\":1361612282,\"endTimeUtc\":\"2021-04-04T06:26:30Z\",\"status\":\"Revoked\",\"statusReason\":\"Expired\"},{\"number\":2023807206,\"endTimeUtc\":\"2021-03-31T05:28:16Z\",\"status\":\"Revoked\",\"statusReason\":\"Expired\"}]},{\"id\":\"pth\",\"ports\":[{\"number\":1711036836,\"endTimeUtc\":\"2021-08-14T21:08:47Z\",\"status\":\"Revoked\",\"statusReason\":\"Expired\"},{\"number\":1215663059,\"endTimeUtc\":\"2021-11-23T13:13:15Z\",\"status\":\"Revoked\",\"statusReason\":\"UserRequested\"},{\"number\":1050510151,\"endTimeUtc\":\"2021-05-13T04:30:58Z\",\"status\":\"Initiated\",\"statusReason\":\"NewerRequestInitiated\"}]},{\"id\":\"oskkfmk\",\"ports\":[{\"number\":2017064438,\"endTimeUtc\":\"2021-01-27T06:28:09Z\",\"status\":\"Initiated\",\"statusReason\":\"NewerRequestInitiated\"},{\"number\":961532597,\"endTimeUtc\":\"2021-04-24T03:55:15Z\",\"status\":\"Initiated\",\"statusReason\":\"NewerRequestInitiated\"}]}],\"startTimeUtc\":\"2021-01-26T00:09:50Z\",\"requestor\":\"qvjcteoe\",\"justification\":\"rslskkzp\"}],\"provisioningState\":\"jnzdpvocojhpcna\"}")
            .toObject(JitNetworkAccessPolicyProperties.class);
        Assertions.assertEquals("vb", model.virtualMachines().get(0).id());
        Assertions.assertEquals(1659687624, model.virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP, model.virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("qfukpeexpgeumi",
            model.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("uitrdexyiono",
            model.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("ninbdbzsxcwqqrs",
            model.virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("krftsjcwjjxsg", model.virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("vifdxkecifhocjx", model.requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(1807892496, model.requests().get(0).virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T06:12:41Z"),
            model.requests().get(0).virtualMachines().get(0).ports().get(0).endTimeUtc());
        Assertions.assertEquals(Status.REVOKED,
            model.requests().get(0).virtualMachines().get(0).ports().get(0).status());
        Assertions.assertEquals(StatusReason.NEWER_REQUEST_INITIATED,
            model.requests().get(0).virtualMachines().get(0).ports().get(0).statusReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T02:48:41Z"), model.requests().get(0).startTimeUtc());
        Assertions.assertEquals("vtxvcmufun", model.requests().get(0).requestor());
        Assertions.assertEquals("px", model.requests().get(0).justification());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JitNetworkAccessPolicyProperties model
            = new JitNetworkAccessPolicyProperties()
                .withVirtualMachines(Arrays.asList(new JitNetworkAccessPolicyVirtualMachine().withId("vb")
                    .withPorts(Arrays.asList(
                        new JitNetworkAccessPortRule().withNumber(1659687624)
                            .withProtocol(Protocol.TCP)
                            .withAllowedSourceAddressPrefix("qfukpeexpgeumi")
                            .withAllowedSourceAddressPrefixes(Arrays.asList("uitrdexyiono"))
                            .withMaxRequestAccessDuration("ninbdbzsxcwqqrs"),
                        new JitNetworkAccessPortRule().withNumber(626206569)
                            .withProtocol(Protocol.ASTERISK)
                            .withAllowedSourceAddressPrefix("bprt")
                            .withAllowedSourceAddressPrefixes(Arrays.asList("vbzbcyk"))
                            .withMaxRequestAccessDuration("ivmfogdrtbf")))
                    .withPublicIpAddress("krftsjcwjjxsg")))
                .withRequests(Arrays.asList(
                    new JitNetworkAccessRequestInner()
                        .withVirtualMachines(Arrays.asList(
                            new JitNetworkAccessRequestVirtualMachine().withId("vifdxkecifhocjx")
                                .withPorts(Arrays.asList(new JitNetworkAccessRequestPort().withNumber(1807892496)
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-11-09T06:12:41Z"))
                                    .withStatus(Status.REVOKED)
                                    .withStatusReason(StatusReason.NEWER_REQUEST_INITIATED)))))
                        .withStartTimeUtc(OffsetDateTime.parse("2021-09-26T02:48:41Z"))
                        .withRequestor("vtxvcmufun")
                        .withJustification("px"),
                    new JitNetworkAccessRequestInner()
                        .withVirtualMachines(Arrays.asList(new JitNetworkAccessRequestVirtualMachine().withId("ir")
                            .withPorts(Arrays.asList(
                                new JitNetworkAccessRequestPort().withNumber(1909827281)
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-05-14T15:23:24Z"))
                                    .withStatus(Status.REVOKED)
                                    .withStatusReason(StatusReason.USER_REQUESTED),
                                new JitNetworkAccessRequestPort().withNumber(150538667)
                                    .withEndTimeUtc(OffsetDateTime.parse("2021-02-06T11:17:56Z"))
                                    .withStatus(Status.REVOKED)
                                    .withStatusReason(StatusReason.USER_REQUESTED)))))
                        .withStartTimeUtc(OffsetDateTime.parse("2021-02-20T22:10Z"))
                        .withRequestor("vpygglp")
                        .withJustification("rdcueljtiahx"),
                    new JitNetworkAccessRequestInner()
                        .withVirtualMachines(Arrays.asList(
                            new JitNetworkAccessRequestVirtualMachine().withId("q")
                                .withPorts(Arrays.asList(
                                    new JitNetworkAccessRequestPort().withNumber(1149624733)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-01-18T20:25:22Z"))
                                        .withStatus(Status.INITIATED)
                                        .withStatusReason(StatusReason.USER_REQUESTED),
                                    new JitNetworkAccessRequestPort().withNumber(253512413)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-03-29T11:07:19Z"))
                                        .withStatus(Status.INITIATED)
                                        .withStatusReason(StatusReason.NEWER_REQUEST_INITIATED),
                                    new JitNetworkAccessRequestPort().withNumber(1361612282)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-04-04T06:26:30Z"))
                                        .withStatus(Status.REVOKED)
                                        .withStatusReason(StatusReason.EXPIRED),
                                    new JitNetworkAccessRequestPort().withNumber(2023807206)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-03-31T05:28:16Z"))
                                        .withStatus(Status.REVOKED)
                                        .withStatusReason(StatusReason.EXPIRED))),
                            new JitNetworkAccessRequestVirtualMachine().withId("pth")
                                .withPorts(Arrays.asList(
                                    new JitNetworkAccessRequestPort().withNumber(1711036836)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-08-14T21:08:47Z"))
                                        .withStatus(Status.REVOKED)
                                        .withStatusReason(StatusReason.EXPIRED),
                                    new JitNetworkAccessRequestPort().withNumber(1215663059)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-11-23T13:13:15Z"))
                                        .withStatus(Status.REVOKED)
                                        .withStatusReason(StatusReason.USER_REQUESTED),
                                    new JitNetworkAccessRequestPort().withNumber(1050510151)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-05-13T04:30:58Z"))
                                        .withStatus(Status.INITIATED)
                                        .withStatusReason(StatusReason.NEWER_REQUEST_INITIATED))),
                            new JitNetworkAccessRequestVirtualMachine().withId("oskkfmk")
                                .withPorts(Arrays.asList(
                                    new JitNetworkAccessRequestPort().withNumber(2017064438)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-01-27T06:28:09Z"))
                                        .withStatus(Status.INITIATED)
                                        .withStatusReason(StatusReason.NEWER_REQUEST_INITIATED),
                                    new JitNetworkAccessRequestPort().withNumber(961532597)
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-04-24T03:55:15Z"))
                                        .withStatus(Status.INITIATED)
                                        .withStatusReason(StatusReason.NEWER_REQUEST_INITIATED)))))
                        .withStartTimeUtc(OffsetDateTime.parse("2021-01-26T00:09:50Z"))
                        .withRequestor("qvjcteoe")
                        .withJustification("rslskkzp")));
        model = BinaryData.fromObject(model).toObject(JitNetworkAccessPolicyProperties.class);
        Assertions.assertEquals("vb", model.virtualMachines().get(0).id());
        Assertions.assertEquals(1659687624, model.virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP, model.virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("qfukpeexpgeumi",
            model.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("uitrdexyiono",
            model.virtualMachines().get(0).ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("ninbdbzsxcwqqrs",
            model.virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("krftsjcwjjxsg", model.virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("vifdxkecifhocjx", model.requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(1807892496, model.requests().get(0).virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T06:12:41Z"),
            model.requests().get(0).virtualMachines().get(0).ports().get(0).endTimeUtc());
        Assertions.assertEquals(Status.REVOKED,
            model.requests().get(0).virtualMachines().get(0).ports().get(0).status());
        Assertions.assertEquals(StatusReason.NEWER_REQUEST_INITIATED,
            model.requests().get(0).virtualMachines().get(0).ports().get(0).statusReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T02:48:41Z"), model.requests().get(0).startTimeUtc());
        Assertions.assertEquals("vtxvcmufun", model.requests().get(0).requestor());
        Assertions.assertEquals("px", model.requests().get(0).justification());
    }
}
