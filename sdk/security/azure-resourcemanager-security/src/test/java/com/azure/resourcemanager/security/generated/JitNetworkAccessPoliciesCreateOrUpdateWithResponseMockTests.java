// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.fluent.models.JitNetworkAccessRequestInner;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessPortRule;
import com.azure.resourcemanager.security.models.JitNetworkAccessRequestVirtualMachine;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"virtualMachines\":[{\"id\":\"va\",\"ports\":[{\"number\":1844287225,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"axyee\"},{\"number\":830286399,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"modk\"},{\"number\":1872392015,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"tydvvgkmorbpc\"}],\"publicIpAddress\":\"sfyvuztns\"},{\"id\":\"mshkkgygfohr\",\"ports\":[{\"number\":1984448709,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"lclpkr\"},{\"number\":61874796,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"bmjjv\"},{\"number\":1504916808,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"ivrfnztx\"},{\"number\":467683906,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"mgftjviiloh\"}],\"publicIpAddress\":\"rjcxhhfhznsjx\"},{\"id\":\"fo\",\"ports\":[{\"number\":543921331,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"ylyumb\"},{\"number\":965402508,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"rlnuom\"}],\"publicIpAddress\":\"hdkhmemxka\"},{\"id\":\"apesnbyoullyfz\",\"ports\":[{\"number\":1734522947,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"mxxjvwbatjgzk\"},{\"number\":1966871737,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"wzlmpxfmd\"}],\"publicIpAddress\":\"i\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"zphxul\",\"ports\":[]}],\"startTimeUtc\":\"2021-09-19T23:05:25Z\",\"requestor\":\"cbdnpfcg\",\"justification\":\"ttowqx\"},{\"virtualMachines\":[{\"id\":\"pbzxpzl\",\"ports\":[]},{\"id\":\"ovh\",\"ports\":[]}],\"startTimeUtc\":\"2021-07-09T17:55:28Z\",\"requestor\":\"iywtcvzuzpkfeo\",\"justification\":\"t\"},{\"virtualMachines\":[{\"id\":\"ql\",\"ports\":[]},{\"id\":\"eyi\",\"ports\":[]}],\"startTimeUtc\":\"2021-10-28T05:47:58Z\",\"requestor\":\"qpzksdpfvls\",\"justification\":\"metwtlafnkjtefb\"},{\"virtualMachines\":[{\"id\":\"nuvhgcgrllyyfsm\",\"ports\":[]}],\"startTimeUtc\":\"2021-01-05T23:49:10Z\",\"requestor\":\"bxhrchmetvzhuu\",\"justification\":\"ykg\"}],\"provisioningState\":\"kwvbqcawwa\"},\"kind\":\"tsrnyotgnm\",\"location\":\"b\",\"id\":\"reluedcmkryhhee\",\"name\":\"zhhllx\",\"type\":\"knooxdjkl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        JitNetworkAccessPolicy response = manager.jitNetworkAccessPolicies()
            .define("vfwcbawapndm")
            .withExistingLocation("vrmesfhqsac", "qzr")
            .withVirtualMachines(Arrays.asList(
                new JitNetworkAccessPolicyVirtualMachine().withId("vmkmzv")
                    .withPorts(Arrays.asList(new JitNetworkAccessPortRule().withNumber(2005049032)
                        .withProtocol(Protocol.UDP)
                        .withMaxRequestAccessDuration("fblsxyfqgtodg")))
                    .withPublicIpAddress("lefmizdcsr"),
                new JitNetworkAccessPolicyVirtualMachine().withId("b")
                    .withPorts(Arrays.asList(
                        new JitNetworkAccessPortRule().withNumber(231637875)
                            .withProtocol(Protocol.ASTERISK)
                            .withMaxRequestAccessDuration("gfyxhsxcgqbmxbp"),
                        new JitNetworkAccessPortRule().withNumber(1787091989)
                            .withProtocol(Protocol.UDP)
                            .withMaxRequestAccessDuration("xskehojvmazuflf"),
                        new JitNetworkAccessPortRule().withNumber(610236099)
                            .withProtocol(Protocol.TCP)
                            .withMaxRequestAccessDuration("ufhpdncokq")))
                    .withPublicIpAddress("ivbhmnimjlyhb"),
                new JitNetworkAccessPolicyVirtualMachine().withId("fnmmib")
                    .withPorts(Arrays.asList(
                        new JitNetworkAccessPortRule().withNumber(2121513204)
                            .withProtocol(Protocol.UDP)
                            .withMaxRequestAccessDuration("uyrgcaygumqeo"),
                        new JitNetworkAccessPortRule().withNumber(1551748694)
                            .withProtocol(Protocol.UDP)
                            .withMaxRequestAccessDuration("reud"),
                        new JitNetworkAccessPortRule().withNumber(1127102353)
                            .withProtocol(Protocol.ASTERISK)
                            .withMaxRequestAccessDuration("whamigsqzm")))
                    .withPublicIpAddress("iaagwkr")))
            .withKind("unhdikatzmtuv")
            .withRequests(Arrays.asList(new JitNetworkAccessRequestInner()
                .withVirtualMachines(
                    Arrays.asList(new JitNetworkAccessRequestVirtualMachine().withId("g").withPorts(Arrays.asList())))
                .withStartTimeUtc(OffsetDateTime.parse("2021-06-20T21:01:08Z"))
                .withRequestor("nubr")
                .withJustification("jfkxnwtzsroeqcr")))
            .create();

        Assertions.assertEquals("tsrnyotgnm", response.kind());
        Assertions.assertEquals("va", response.virtualMachines().get(0).id());
        Assertions.assertEquals(1844287225, response.virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP, response.virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("axyee", response.virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("sfyvuztns", response.virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("zphxul", response.requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T23:05:25Z"),
            response.requests().get(0).startTimeUtc());
        Assertions.assertEquals("cbdnpfcg", response.requests().get(0).requestor());
        Assertions.assertEquals("ttowqx", response.requests().get(0).justification());
    }
}
