// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.fluent.models.JitNetworkAccessRequestInner;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessPortRule;
import com.azure.resourcemanager.security.models.JitNetworkAccessRequestVirtualMachine;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"virtualMachines\":[{\"id\":\"q\",\"ports\":[{\"number\":765975913,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"byqhaath\"},{\"number\":1952220446,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"x\"}],\"publicIpAddress\":\"colusyruxrzhhlhr\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"bpgmncrvtpifo\",\"ports\":[]},{\"id\":\"omppz\",\"ports\":[]}],\"startTimeUtc\":\"2021-11-14T17:36:28Z\",\"requestor\":\"uq\",\"justification\":\"uhplfcmp\"},{\"virtualMachines\":[{\"id\":\"iugo\",\"ports\":[]},{\"id\":\"e\",\"ports\":[]}],\"startTimeUtc\":\"2021-04-03T01:52:24Z\",\"requestor\":\"lyspjym\",\"justification\":\"ccurn\"},{\"virtualMachines\":[{\"id\":\"unlakgixhqj\",\"ports\":[]}],\"startTimeUtc\":\"2021-09-01T15:04:26Z\",\"requestor\":\"gqwbbxiwtwfgo\",\"justification\":\"alvemn\"}],\"provisioningState\":\"ugabkyydsyweoh\"},\"kind\":\"tsnvonvbftswcdop\",\"location\":\"eptvdticcaflgzwk\",\"id\":\"pxdkbtwoqhgppwxn\",\"name\":\"kfzrxxf\",\"type\":\"duvqzjnnuww\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        JitNetworkAccessPolicy response
            = manager.jitNetworkAccessPolicies()
                .define("cnuqhqpvtw")
                .withExistingLocation("xczzunfnbphcee", "vkbuxlepg")
                .withVirtualMachines(Arrays.asList(
                    new JitNetworkAccessPolicyVirtualMachine().withId("fscl")
                        .withPorts(Arrays.asList(new JitNetworkAccessPortRule().withNumber(1642342665)
                            .withProtocol(Protocol.UDP)
                            .withMaxRequestAccessDuration("ygntbfytnhdnihu")))
                        .withPublicIpAddress("juzvwgbzdtorbi"),
                    new JitNetworkAccessPolicyVirtualMachine().withId("nyfzdpxct")
                        .withPorts(Arrays.asList(
                            new JitNetworkAccessPortRule().withNumber(1279642977)
                                .withProtocol(Protocol.TCP)
                                .withMaxRequestAccessDuration("xdte"),
                            new JitNetworkAccessPortRule().withNumber(1113504150)
                                .withProtocol(Protocol.UDP)
                                .withMaxRequestAccessDuration("j"),
                            new JitNetworkAccessPortRule().withNumber(642807698)
                                .withProtocol(Protocol.UDP)
                                .withMaxRequestAccessDuration("wtidcnzalgmpupj")))
                        .withPublicIpAddress("tyl")))
                .withKind("bpgcryvidbz")
                .withRequests(
                    Arrays.asList(
                        new JitNetworkAccessRequestInner()
                            .withVirtualMachines(Arrays.asList(
                                new JitNetworkAccessRequestVirtualMachine().withId("vb").withPorts(Arrays.asList()),
                                new JitNetworkAccessRequestVirtualMachine().withId("vzlzjsb")
                                    .withPorts(Arrays.asList()),
                                new JitNetworkAccessRequestVirtualMachine().withId("p").withPorts(Arrays.asList())))
                            .withStartTimeUtc(OffsetDateTime.parse("2021-09-15T19:00Z"))
                            .withRequestor("tzaziydpoknseaim")
                            .withJustification("qraokdarluobbval"),
                        new JitNetworkAccessRequestInner()
                            .withVirtualMachines(Arrays.asList(
                                new JitNetworkAccessRequestVirtualMachine().withId("z").withPorts(Arrays.asList()),
                                new JitNetworkAccessRequestVirtualMachine().withId("nyujxysvc")
                                    .withPorts(Arrays.asList()),
                                new JitNetworkAccessRequestVirtualMachine().withId("f").withPorts(Arrays.asList())))
                            .withStartTimeUtc(OffsetDateTime.parse("2021-03-15T08:08:49Z"))
                            .withRequestor("clvildlf")
                            .withJustification("leirmtxfqpfildcg")))
                .create();

        Assertions.assertEquals("tsnvonvbftswcdop", response.kind());
        Assertions.assertEquals("q", response.virtualMachines().get(0).id());
        Assertions.assertEquals(765975913, response.virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP, response.virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("byqhaath",
            response.virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("colusyruxrzhhlhr", response.virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("bpgmncrvtpifo", response.requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T17:36:28Z"),
            response.requests().get(0).startTimeUtc());
        Assertions.assertEquals("uq", response.requests().get(0).requestor());
        Assertions.assertEquals("uhplfcmp", response.requests().get(0).justification());
    }
}
