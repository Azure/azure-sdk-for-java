// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.fluent.models.JitNetworkAccessRequestInner;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessPortRule;
import com.azure.resourcemanager.security.models.JitNetworkAccessRequestVirtualMachine;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"virtualMachines\":[{\"id\":\"bchcazkgdjthprg\",\"ports\":[{\"number\":567232425,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"zhhrurmrfyyqjc\"},{\"number\":1870291647,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"zq\"}],\"publicIpAddress\":\"ddcuqddldaoyvf\"},{\"id\":\"tqewqjojesxjhty\",\"ports\":[{\"number\":1467337847,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"ocygoyineuaxpmez\"},{\"number\":943758520,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"guzlweoyxfoaf\"},{\"number\":1989310623,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"pzlx\"},{\"number\":893743759,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"dhgwhlbpjuaj\"}],\"publicIpAddress\":\"xav\"},{\"id\":\"itnwlyhbujysv\",\"ports\":[{\"number\":334493315,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"ddbhatmabt\"},{\"number\":1592140791,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"qtjtnnrje\"},{\"number\":780646976,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"ciga\"}],\"publicIpAddress\":\"mdfspkdnxqxzxter\"},{\"id\":\"nzrrwsci\",\"ports\":[{\"number\":843125682,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"wi\"},{\"number\":1712594997,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"tol\"}],\"publicIpAddress\":\"yfkryxsgha\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"thqwppvihb\",\"ports\":[]}],\"startTimeUtc\":\"2021-09-02T12:19:24Z\",\"requestor\":\"rvpvdrohul\",\"justification\":\"kabhvxjuaivxzni\"}],\"provisioningState\":\"ygtixk\"},\"kind\":\"obmkphvdlorxz\",\"location\":\"ditu\",\"id\":\"cltfcieileem\",\"name\":\"tkehldopjsxvbb\",\"type\":\"sgikkmibnmdpid\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        JitNetworkAccessPolicy response = manager.jitNetworkAccessPolicies()
            .define("ptrcdzytrtffvpk")
            .withExistingLocation("lrd", "pcpautf")
            .withVirtualMachines(Arrays.asList(new JitNetworkAccessPolicyVirtualMachine().withId("cyuwenbqvpraw")
                .withPorts(Arrays.asList(
                    new JitNetworkAccessPortRule().withNumber(1989004320)
                        .withProtocol(Protocol.ASTERISK)
                        .withMaxRequestAccessDuration("td"),
                    new JitNetworkAccessPortRule().withNumber(15588035)
                        .withProtocol(Protocol.TCP)
                        .withMaxRequestAccessDuration("ldpmecsmxfz")))
                .withPublicIpAddress("femqyq")))
            .withKind("tt")
            .withRequests(Arrays.asList(new JitNetworkAccessRequestInner()
                .withVirtualMachines(Arrays.asList(
                    new JitNetworkAccessRequestVirtualMachine().withId("wgssdquupirnb").withPorts(Arrays.asList()),
                    new JitNetworkAccessRequestVirtualMachine().withId("lqyvdsqxkjwdzp").withPorts(Arrays.asList()),
                    new JitNetworkAccessRequestVirtualMachine().withId("irzyudrq").withPorts(Arrays.asList())))
                .withStartTimeUtc(OffsetDateTime.parse("2021-02-21T11:53:54Z"))
                .withRequestor("rxhxmlfouqpskv")
                .withJustification("db")))
            .create();

        Assertions.assertEquals("obmkphvdlorxz", response.kind());
        Assertions.assertEquals("bchcazkgdjthprg", response.virtualMachines().get(0).id());
        Assertions.assertEquals(567232425, response.virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP, response.virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("zhhrurmrfyyqjc",
            response.virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("ddcuqddldaoyvf", response.virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("thqwppvihb", response.requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T12:19:24Z"),
            response.requests().get(0).startTimeUtc());
        Assertions.assertEquals("rvpvdrohul", response.requests().get(0).requestor());
        Assertions.assertEquals("kabhvxjuaivxzni", response.requests().get(0).justification());
    }
}
