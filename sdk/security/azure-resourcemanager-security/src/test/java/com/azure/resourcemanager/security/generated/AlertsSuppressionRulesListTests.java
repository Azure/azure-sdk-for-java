// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.AlertsSuppressionRuleInner;
import com.azure.resourcemanager.security.models.AlertsSuppressionRulesList;
import com.azure.resourcemanager.security.models.RuleState;
import com.azure.resourcemanager.security.models.ScopeElement;
import com.azure.resourcemanager.security.models.SuppressionAlertsScope;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AlertsSuppressionRulesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertsSuppressionRulesList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"alertType\":\"uesnzwdejbavo\",\"lastModifiedUtc\":\"2021-09-27T19:00:57Z\",\"expirationDateUtc\":\"2021-03-31T13:31:51Z\",\"reason\":\"ohctbqvudwx\",\"state\":\"Disabled\",\"comment\":\"nvowgujju\",\"suppressionAlertsScope\":{\"allOf\":[{},{}]}},\"id\":\"kcglhslaz\",\"name\":\"dyggdtjixhbku\",\"type\":\"fqweykhmene\"}],\"nextLink\":\"yexfwh\"}")
            .toObject(AlertsSuppressionRulesList.class);
        Assertions.assertEquals("uesnzwdejbavo", model.value().get(0).alertType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-31T13:31:51Z"), model.value().get(0).expirationDateUtc());
        Assertions.assertEquals("ohctbqvudwx", model.value().get(0).reason());
        Assertions.assertEquals(RuleState.DISABLED, model.value().get(0).state());
        Assertions.assertEquals("nvowgujju", model.value().get(0).comment());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertsSuppressionRulesList model = new AlertsSuppressionRulesList()
            .withValue(Arrays.asList(new AlertsSuppressionRuleInner().withAlertType("uesnzwdejbavo")
                .withExpirationDateUtc(OffsetDateTime.parse("2021-03-31T13:31:51Z"))
                .withReason("ohctbqvudwx")
                .withState(RuleState.DISABLED)
                .withComment("nvowgujju")
                .withSuppressionAlertsScope(new SuppressionAlertsScope()
                    .withAllOf(Arrays.asList(new ScopeElement().withAdditionalProperties(mapOf()),
                        new ScopeElement().withAdditionalProperties(mapOf()))))));
        model = BinaryData.fromObject(model).toObject(AlertsSuppressionRulesList.class);
        Assertions.assertEquals("uesnzwdejbavo", model.value().get(0).alertType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-31T13:31:51Z"), model.value().get(0).expirationDateUtc());
        Assertions.assertEquals("ohctbqvudwx", model.value().get(0).reason());
        Assertions.assertEquals(RuleState.DISABLED, model.value().get(0).state());
        Assertions.assertEquals("nvowgujju", model.value().get(0).comment());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
