// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScanPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanProperties model = BinaryData.fromString(
            "{\"triggerType\":\"Recurring\",\"state\":\"Passed\",\"server\":\"bgofeljag\",\"database\":\"mqhldvrii\",\"sqlVersion\":\"jnalghf\",\"startTime\":\"2021-04-12T00:35:59Z\",\"endTime\":\"2021-11-20T12:15:25Z\",\"highSeverityFailedRulesCount\":1282361088,\"mediumSeverityFailedRulesCount\":1998457536,\"lowSeverityFailedRulesCount\":1898146920,\"totalPassedRulesCount\":404189900,\"totalFailedRulesCount\":2013630700,\"totalRulesCount\":1425531110,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-10-10T22:08:47Z\"}")
            .toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.state());
        Assertions.assertEquals("bgofeljag", model.server());
        Assertions.assertEquals("mqhldvrii", model.database());
        Assertions.assertEquals("jnalghf", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-12T00:35:59Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-20T12:15:25Z"), model.endTime());
        Assertions.assertEquals(1282361088, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(1998457536, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(1898146920, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(404189900, model.totalPassedRulesCount());
        Assertions.assertEquals(2013630700, model.totalFailedRulesCount());
        Assertions.assertEquals(1425531110, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T22:08:47Z"), model.lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanProperties model = new ScanProperties().withTriggerType(ScanTriggerType.RECURRING)
            .withState(ScanState.PASSED)
            .withServer("bgofeljag")
            .withDatabase("mqhldvrii")
            .withSqlVersion("jnalghf")
            .withStartTime(OffsetDateTime.parse("2021-04-12T00:35:59Z"))
            .withEndTime(OffsetDateTime.parse("2021-11-20T12:15:25Z"))
            .withHighSeverityFailedRulesCount(1282361088)
            .withMediumSeverityFailedRulesCount(1998457536)
            .withLowSeverityFailedRulesCount(1898146920)
            .withTotalPassedRulesCount(404189900)
            .withTotalFailedRulesCount(2013630700)
            .withTotalRulesCount(1425531110)
            .withIsBaselineApplied(true)
            .withLastScanTime(OffsetDateTime.parse("2021-10-10T22:08:47Z"));
        model = BinaryData.fromObject(model).toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.state());
        Assertions.assertEquals("bgofeljag", model.server());
        Assertions.assertEquals("mqhldvrii", model.database());
        Assertions.assertEquals("jnalghf", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-12T00:35:59Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-20T12:15:25Z"), model.endTime());
        Assertions.assertEquals(1282361088, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(1998457536, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(1898146920, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(404189900, model.totalPassedRulesCount());
        Assertions.assertEquals(2013630700, model.totalFailedRulesCount());
        Assertions.assertEquals(1425531110, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T22:08:47Z"), model.lastScanTime());
    }
}
