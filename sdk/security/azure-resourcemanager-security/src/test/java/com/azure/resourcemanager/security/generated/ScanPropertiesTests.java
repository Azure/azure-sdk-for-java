// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScanPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanProperties model =
            BinaryData
                .fromString(
                    "{\"triggerType\":\"OnDemand\",\"state\":\"Failed\",\"server\":\"zerohzrsqalsxk\",\"database\":\"wqapfgsdp\",\"sqlVersion\":\"essmzhhku\",\"startTime\":\"2021-07-13T07:40:22Z\",\"endTime\":\"2021-02-20T07:41:15Z\",\"highSeverityFailedRulesCount\":173129276,\"mediumSeverityFailedRulesCount\":1276247393,\"lowSeverityFailedRulesCount\":611963257,\"totalPassedRulesCount\":363165990,\"totalFailedRulesCount\":1539234550,\"totalRulesCount\":205688026,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-08-04T07:59:56Z\"}")
                .toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.triggerType());
        Assertions.assertEquals(ScanState.FAILED, model.state());
        Assertions.assertEquals("zerohzrsqalsxk", model.server());
        Assertions.assertEquals("wqapfgsdp", model.database());
        Assertions.assertEquals("essmzhhku", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T07:40:22Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T07:41:15Z"), model.endTime());
        Assertions.assertEquals(173129276, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(1276247393, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(611963257, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(363165990, model.totalPassedRulesCount());
        Assertions.assertEquals(1539234550, model.totalFailedRulesCount());
        Assertions.assertEquals(205688026, model.totalRulesCount());
        Assertions.assertEquals(false, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T07:59:56Z"), model.lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanProperties model =
            new ScanProperties()
                .withTriggerType(ScanTriggerType.ON_DEMAND)
                .withState(ScanState.FAILED)
                .withServer("zerohzrsqalsxk")
                .withDatabase("wqapfgsdp")
                .withSqlVersion("essmzhhku")
                .withStartTime(OffsetDateTime.parse("2021-07-13T07:40:22Z"))
                .withEndTime(OffsetDateTime.parse("2021-02-20T07:41:15Z"))
                .withHighSeverityFailedRulesCount(173129276)
                .withMediumSeverityFailedRulesCount(1276247393)
                .withLowSeverityFailedRulesCount(611963257)
                .withTotalPassedRulesCount(363165990)
                .withTotalFailedRulesCount(1539234550)
                .withTotalRulesCount(205688026)
                .withIsBaselineApplied(false)
                .withLastScanTime(OffsetDateTime.parse("2021-08-04T07:59:56Z"));
        model = BinaryData.fromObject(model).toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.triggerType());
        Assertions.assertEquals(ScanState.FAILED, model.state());
        Assertions.assertEquals("zerohzrsqalsxk", model.server());
        Assertions.assertEquals("wqapfgsdp", model.database());
        Assertions.assertEquals("essmzhhku", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T07:40:22Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T07:41:15Z"), model.endTime());
        Assertions.assertEquals(173129276, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(1276247393, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(611963257, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(363165990, model.totalPassedRulesCount());
        Assertions.assertEquals(1539234550, model.totalFailedRulesCount());
        Assertions.assertEquals(205688026, model.totalRulesCount());
        Assertions.assertEquals(false, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T07:59:56Z"), model.lastScanTime());
    }
}
