// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScanPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanProperties model = BinaryData.fromString(
            "{\"triggerType\":\"Recurring\",\"state\":\"FailedToRun\",\"server\":\"c\",\"database\":\"xccybvpa\",\"sqlVersion\":\"kkudzp\",\"startTime\":\"2021-08-18T20:25:34Z\",\"endTime\":\"2021-05-27T09:18:41Z\",\"highSeverityFailedRulesCount\":704877183,\"mediumSeverityFailedRulesCount\":167130524,\"lowSeverityFailedRulesCount\":625665728,\"totalPassedRulesCount\":2097030241,\"totalFailedRulesCount\":1027576008,\"totalRulesCount\":1084901302,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-04-17T08:19:07Z\"}")
            .toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.triggerType());
        Assertions.assertEquals(ScanState.FAILED_TO_RUN, model.state());
        Assertions.assertEquals("c", model.server());
        Assertions.assertEquals("xccybvpa", model.database());
        Assertions.assertEquals("kkudzp", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-18T20:25:34Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-27T09:18:41Z"), model.endTime());
        Assertions.assertEquals(704877183, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(167130524, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(625665728, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(2097030241, model.totalPassedRulesCount());
        Assertions.assertEquals(1027576008, model.totalFailedRulesCount());
        Assertions.assertEquals(1084901302, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-17T08:19:07Z"), model.lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanProperties model = new ScanProperties().withTriggerType(ScanTriggerType.RECURRING)
            .withState(ScanState.FAILED_TO_RUN).withServer("c").withDatabase("xccybvpa").withSqlVersion("kkudzp")
            .withStartTime(OffsetDateTime.parse("2021-08-18T20:25:34Z"))
            .withEndTime(OffsetDateTime.parse("2021-05-27T09:18:41Z")).withHighSeverityFailedRulesCount(704877183)
            .withMediumSeverityFailedRulesCount(167130524).withLowSeverityFailedRulesCount(625665728)
            .withTotalPassedRulesCount(2097030241).withTotalFailedRulesCount(1027576008).withTotalRulesCount(1084901302)
            .withIsBaselineApplied(true).withLastScanTime(OffsetDateTime.parse("2021-04-17T08:19:07Z"));
        model = BinaryData.fromObject(model).toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.triggerType());
        Assertions.assertEquals(ScanState.FAILED_TO_RUN, model.state());
        Assertions.assertEquals("c", model.server());
        Assertions.assertEquals("xccybvpa", model.database());
        Assertions.assertEquals("kkudzp", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-18T20:25:34Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-27T09:18:41Z"), model.endTime());
        Assertions.assertEquals(704877183, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(167130524, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(625665728, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(2097030241, model.totalPassedRulesCount());
        Assertions.assertEquals(1027576008, model.totalFailedRulesCount());
        Assertions.assertEquals(1084901302, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-17T08:19:07Z"), model.lastScanTime());
    }
}
