// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScanPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanProperties model = BinaryData.fromString(
            "{\"triggerType\":\"OnDemand\",\"state\":\"Passed\",\"server\":\"qwjygvja\",\"database\":\"blmhvkzuhb\",\"sqlVersion\":\"vyhgs\",\"startTime\":\"2021-06-13T17:46:53Z\",\"endTime\":\"2021-09-26T10:41:28Z\",\"highSeverityFailedRulesCount\":153480217,\"mediumSeverityFailedRulesCount\":2024202190,\"lowSeverityFailedRulesCount\":978838133,\"totalPassedRulesCount\":659096869,\"totalFailedRulesCount\":950135360,\"totalRulesCount\":1393630743,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-08-15T03:14:49Z\"}")
            .toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.state());
        Assertions.assertEquals("qwjygvja", model.server());
        Assertions.assertEquals("blmhvkzuhb", model.database());
        Assertions.assertEquals("vyhgs", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T17:46:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T10:41:28Z"), model.endTime());
        Assertions.assertEquals(153480217, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(2024202190, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(978838133, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(659096869, model.totalPassedRulesCount());
        Assertions.assertEquals(950135360, model.totalFailedRulesCount());
        Assertions.assertEquals(1393630743, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T03:14:49Z"), model.lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanProperties model = new ScanProperties().withTriggerType(ScanTriggerType.ON_DEMAND)
            .withState(ScanState.PASSED)
            .withServer("qwjygvja")
            .withDatabase("blmhvkzuhb")
            .withSqlVersion("vyhgs")
            .withStartTime(OffsetDateTime.parse("2021-06-13T17:46:53Z"))
            .withEndTime(OffsetDateTime.parse("2021-09-26T10:41:28Z"))
            .withHighSeverityFailedRulesCount(153480217)
            .withMediumSeverityFailedRulesCount(2024202190)
            .withLowSeverityFailedRulesCount(978838133)
            .withTotalPassedRulesCount(659096869)
            .withTotalFailedRulesCount(950135360)
            .withTotalRulesCount(1393630743)
            .withIsBaselineApplied(true)
            .withLastScanTime(OffsetDateTime.parse("2021-08-15T03:14:49Z"));
        model = BinaryData.fromObject(model).toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.state());
        Assertions.assertEquals("qwjygvja", model.server());
        Assertions.assertEquals("blmhvkzuhb", model.database());
        Assertions.assertEquals("vyhgs", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T17:46:53Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-26T10:41:28Z"), model.endTime());
        Assertions.assertEquals(153480217, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(2024202190, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(978838133, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(659096869, model.totalPassedRulesCount());
        Assertions.assertEquals(950135360, model.totalFailedRulesCount());
        Assertions.assertEquals(1393630743, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T03:14:49Z"), model.lastScanTime());
    }
}
