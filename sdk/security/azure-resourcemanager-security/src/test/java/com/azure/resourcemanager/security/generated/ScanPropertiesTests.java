// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScanPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanProperties model =
            BinaryData
                .fromString(
                    "{\"triggerType\":\"OnDemand\",\"state\":\"Failed\",\"server\":\"dvpjhulsuuvmk\",\"database\":\"zkrwfn\",\"sqlVersion\":\"odjpslwejd\",\"startTime\":\"2021-02-19T06:09:33Z\",\"endTime\":\"2021-01-02T14:29:41Z\",\"highSeverityFailedRulesCount\":1059261896,\"mediumSeverityFailedRulesCount\":718311626,\"lowSeverityFailedRulesCount\":854028036,\"totalPassedRulesCount\":2018987029,\"totalFailedRulesCount\":1285377118,\"totalRulesCount\":733588491,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-11-13T06:20:15Z\"}")
                .toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.triggerType());
        Assertions.assertEquals(ScanState.FAILED, model.state());
        Assertions.assertEquals("dvpjhulsuuvmk", model.server());
        Assertions.assertEquals("zkrwfn", model.database());
        Assertions.assertEquals("odjpslwejd", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T06:09:33Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-02T14:29:41Z"), model.endTime());
        Assertions.assertEquals(1059261896, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(718311626, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(854028036, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(2018987029, model.totalPassedRulesCount());
        Assertions.assertEquals(1285377118, model.totalFailedRulesCount());
        Assertions.assertEquals(733588491, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-13T06:20:15Z"), model.lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanProperties model =
            new ScanProperties()
                .withTriggerType(ScanTriggerType.ON_DEMAND)
                .withState(ScanState.FAILED)
                .withServer("dvpjhulsuuvmk")
                .withDatabase("zkrwfn")
                .withSqlVersion("odjpslwejd")
                .withStartTime(OffsetDateTime.parse("2021-02-19T06:09:33Z"))
                .withEndTime(OffsetDateTime.parse("2021-01-02T14:29:41Z"))
                .withHighSeverityFailedRulesCount(1059261896)
                .withMediumSeverityFailedRulesCount(718311626)
                .withLowSeverityFailedRulesCount(854028036)
                .withTotalPassedRulesCount(2018987029)
                .withTotalFailedRulesCount(1285377118)
                .withTotalRulesCount(733588491)
                .withIsBaselineApplied(true)
                .withLastScanTime(OffsetDateTime.parse("2021-11-13T06:20:15Z"));
        model = BinaryData.fromObject(model).toObject(ScanProperties.class);
        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, model.triggerType());
        Assertions.assertEquals(ScanState.FAILED, model.state());
        Assertions.assertEquals("dvpjhulsuuvmk", model.server());
        Assertions.assertEquals("zkrwfn", model.database());
        Assertions.assertEquals("odjpslwejd", model.sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T06:09:33Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-02T14:29:41Z"), model.endTime());
        Assertions.assertEquals(1059261896, model.highSeverityFailedRulesCount());
        Assertions.assertEquals(718311626, model.mediumSeverityFailedRulesCount());
        Assertions.assertEquals(854028036, model.lowSeverityFailedRulesCount());
        Assertions.assertEquals(2018987029, model.totalPassedRulesCount());
        Assertions.assertEquals(1285377118, model.totalFailedRulesCount());
        Assertions.assertEquals(733588491, model.totalRulesCount());
        Assertions.assertEquals(true, model.isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-13T06:20:15Z"), model.lastScanTime());
    }
}
