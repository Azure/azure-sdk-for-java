// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecurityAggregatedAlertInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecurityAggregatedAlertInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecurityAggregatedAlertInner model = BinaryData.fromString(
            "{\"properties\":{\"alertType\":\"qzvs\",\"alertDisplayName\":\"fxjelg\",\"vendorName\":\"zqjhhhqxuwyvca\",\"reportedSeverity\":\"Informational\",\"remediationSteps\":\"i\",\"description\":\"s\",\"count\":1416900945899711725,\"effectedResourceType\":\"szlbscm\",\"systemSource\":\"zijiufehgmv\",\"actionTaken\":\"nwyvq\",\"logAnalyticsQuery\":\"rerlniy\",\"topDevicesList\":[{\"deviceId\":\"fwxzutg\",\"alertsCount\":6406393797589213878,\"lastOccurrence\":\"gh\"},{\"deviceId\":\"pgxyjtcdxabbu\",\"alertsCount\":8863809603382559898,\"lastOccurrence\":\"enbbklqpxzucafed\"},{\"deviceId\":\"wnlzafwxu\",\"alertsCount\":6540552944605179682,\"lastOccurrence\":\"ookrtalvnbw\"}]},\"tags\":{\"jjukyrdnqodxah\":\"emeluclv\",\"qnvzoqgyipemch\":\"xhqf\",\"lghwzhome\":\"avsczuejdtxp\"},\"id\":\"jjstliuhqawmo\",\"name\":\"ia\",\"type\":\"cz\"}")
            .toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("emeluclv", model.tags().get("jjukyrdnqodxah"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecurityAggregatedAlertInner model = new IoTSecurityAggregatedAlertInner()
            .withTags(mapOf("jjukyrdnqodxah", "emeluclv", "qnvzoqgyipemch", "xhqf", "lghwzhome", "avsczuejdtxp"));
        model = BinaryData.fromObject(model).toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("emeluclv", model.tags().get("jjukyrdnqodxah"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
