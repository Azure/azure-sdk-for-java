// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecurityAggregatedAlertInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecurityAggregatedAlertInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecurityAggregatedAlertInner model = BinaryData.fromString(
            "{\"properties\":{\"alertType\":\"paz\",\"alertDisplayName\":\"oywjxhpdulont\",\"vendorName\":\"pqwtehtue\",\"reportedSeverity\":\"Low\",\"remediationSteps\":\"ljyoogwx\",\"description\":\"sd\",\"count\":809684715358738696,\"effectedResourceType\":\"sreurfqkfuare\",\"systemSource\":\"vhhtklnvnaf\",\"actionTaken\":\"kyfede\",\"logAnalyticsQuery\":\"bo\",\"topDevicesList\":[{\"deviceId\":\"xypokkhmi\",\"alertsCount\":8259010476237708124,\"lastOccurrence\":\"czngnbdxxe\"},{\"deviceId\":\"ninvudbchaqdt\",\"alertsCount\":1324309601620872345,\"lastOccurrence\":\"qct\"},{\"deviceId\":\"xdtddmflhuytxzv\",\"alertsCount\":3117767040904980283,\"lastOccurrence\":\"xbannovvoxc\"},{\"deviceId\":\"tprwnw\",\"alertsCount\":1964680709263393565,\"lastOccurrence\":\"ytlyokrrrouuxvn\"}]},\"tags\":{\"lobdxna\":\"bcrymodizrx\",\"op\":\"pmkmlmvevfx\",\"hrdd\":\"hbzxli\",\"nzqcy\":\"tfgxqbawpcb\"},\"id\":\"napqo\",\"name\":\"yuicdhzbdy\",\"type\":\"wwgbdv\"}")
            .toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("bcrymodizrx", model.tags().get("lobdxna"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecurityAggregatedAlertInner model = new IoTSecurityAggregatedAlertInner()
            .withTags(mapOf("lobdxna", "bcrymodizrx", "op", "pmkmlmvevfx", "hrdd", "hbzxli", "nzqcy", "tfgxqbawpcb"));
        model = BinaryData.fromObject(model).toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("bcrymodizrx", model.tags().get("lobdxna"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
