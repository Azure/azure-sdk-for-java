// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecurityAggregatedAlertInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecurityAggregatedAlertInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecurityAggregatedAlertInner model = BinaryData.fromString(
            "{\"properties\":{\"alertType\":\"oiqtamtyvskn\",\"alertDisplayName\":\"wzawnvsbcfhzagxn\",\"vendorName\":\"cvd\",\"reportedSeverity\":\"Medium\",\"remediationSteps\":\"zregzgyufutrwpw\",\"description\":\"ye\",\"count\":7725440285768406469,\"effectedResourceType\":\"meottawj\",\"systemSource\":\"sxwwhnhjtf\",\"actionTaken\":\"n\",\"logAnalyticsQuery\":\"miljpnwynud\",\"topDevicesList\":[{\"deviceId\":\"sauzpjlx\",\"alertsCount\":6301220478923674751,\"lastOccurrence\":\"iqhzlr\"}]},\"tags\":{\"rfdsajrednwy\":\"ezxlskihm\"},\"id\":\"shtuwgm\",\"name\":\"vuafpwzyifr\",\"type\":\"gwltxeqip\"}")
            .toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("ezxlskihm", model.tags().get("rfdsajrednwy"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecurityAggregatedAlertInner model
            = new IoTSecurityAggregatedAlertInner().withTags(mapOf("rfdsajrednwy", "ezxlskihm"));
        model = BinaryData.fromObject(model).toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("ezxlskihm", model.tags().get("rfdsajrednwy"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
