// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecurityAggregatedAlertInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecurityAggregatedAlertInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecurityAggregatedAlertInner model = BinaryData.fromString(
            "{\"properties\":{\"alertType\":\"cmgyud\",\"alertDisplayName\":\"tlmoyrx\",\"vendorName\":\"u\",\"reportedSeverity\":\"Informational\",\"remediationSteps\":\"ntxhdzhlrqjbhck\",\"description\":\"lhrxsbkyvpyc\",\"count\":1835147591912684740,\"effectedResourceType\":\"p\",\"systemSource\":\"afkuwb\",\"actionTaken\":\"nwbmeh\",\"logAnalyticsQuery\":\"eyvjusrtslhspkde\",\"topDevicesList\":[{\"deviceId\":\"fm\",\"alertsCount\":6174140957199534437,\"lastOccurrence\":\"t\"},{\"deviceId\":\"lmqkrhahvlj\",\"alertsCount\":8641218324516083606,\"lastOccurrence\":\"uhcdhm\"},{\"deviceId\":\"alaexqpvfadmwsrc\",\"alertsCount\":8220008823832302214,\"lastOccurrence\":\"vgomz\"}]},\"tags\":{\"ali\":\"isgwbnbbeldawkz\",\"hashsfwxosow\":\"urqhaka\"},\"id\":\"xcug\",\"name\":\"cjooxdjebwpucwwf\",\"type\":\"ovbvmeueciv\"}")
            .toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("isgwbnbbeldawkz", model.tags().get("ali"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecurityAggregatedAlertInner model = new IoTSecurityAggregatedAlertInner()
            .withTags(mapOf("ali", "isgwbnbbeldawkz", "hashsfwxosow", "urqhaka"));
        model = BinaryData.fromObject(model).toObject(IoTSecurityAggregatedAlertInner.class);
        Assertions.assertEquals("isgwbnbbeldawkz", model.tags().get("ali"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
