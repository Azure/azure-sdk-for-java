// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.AutomationInner;
import com.azure.resourcemanager.security.models.AutomationAction;
import com.azure.resourcemanager.security.models.AutomationRuleSet;
import com.azure.resourcemanager.security.models.AutomationScope;
import com.azure.resourcemanager.security.models.AutomationSource;
import com.azure.resourcemanager.security.models.AutomationTriggeringRule;
import com.azure.resourcemanager.security.models.EventSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AutomationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutomationInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"smjqfrddgam\",\"isEnabled\":true,\"scopes\":[{\"description\":\"rsjuivfcdisyir\",\"scopePath\":\"zhczexrxzbujrtrh\"}],\"sources\":[{\"eventSource\":\"Alerts\",\"ruleSets\":[{\"rules\":[{}]}]},{\"eventSource\":\"Assessments\",\"ruleSets\":[{\"rules\":[{},{},{},{}]},{\"rules\":[{},{},{}]},{\"rules\":[{},{}]},{\"rules\":[{},{},{}]}]},{\"eventSource\":\"AttackPaths\",\"ruleSets\":[{\"rules\":[{},{}]},{\"rules\":[{},{},{}]},{\"rules\":[{}]}]},{\"eventSource\":\"AssessmentsSnapshot\",\"ruleSets\":[{\"rules\":[{}]},{\"rules\":[{},{},{}]}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"location\":\"bjkvreljeamu\",\"tags\":{\"mjerbdk\":\"mlovuanashcxl\",\"bccxjmonfdgn\":\"lvidizozs\",\"ypuuwwltvuqjctze\":\"n\"},\"id\":\"keifzzhmkdasv\",\"name\":\"lyhb\",\"type\":\"cu\"}")
            .toObject(AutomationInner.class);
        Assertions.assertEquals("bjkvreljeamu", model.location());
        Assertions.assertEquals("mlovuanashcxl", model.tags().get("mjerbdk"));
        Assertions.assertEquals("smjqfrddgam", model.description());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("rsjuivfcdisyir", model.scopes().get(0).description());
        Assertions.assertEquals("zhczexrxzbujrtrh", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.ALERTS, model.sources().get(0).eventSource());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutomationInner model = new AutomationInner().withLocation("bjkvreljeamu")
            .withTags(mapOf("mjerbdk", "mlovuanashcxl", "bccxjmonfdgn", "lvidizozs", "ypuuwwltvuqjctze", "n"))
            .withDescription("smjqfrddgam")
            .withIsEnabled(true)
            .withScopes(Arrays
                .asList(new AutomationScope().withDescription("rsjuivfcdisyir").withScopePath("zhczexrxzbujrtrh")))
            .withSources(Arrays.asList(
                new AutomationSource().withEventSource(EventSource.ALERTS)
                    .withRuleSets(Arrays
                        .asList(new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule())))),
                new AutomationSource().withEventSource(EventSource.ASSESSMENTS)
                    .withRuleSets(Arrays.asList(
                        new AutomationRuleSet()
                            .withRules(Arrays.asList(new AutomationTriggeringRule(), new AutomationTriggeringRule(),
                                new AutomationTriggeringRule(), new AutomationTriggeringRule())),
                        new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule(),
                            new AutomationTriggeringRule(), new AutomationTriggeringRule())),
                        new AutomationRuleSet()
                            .withRules(Arrays.asList(new AutomationTriggeringRule(), new AutomationTriggeringRule())),
                        new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule(),
                            new AutomationTriggeringRule(), new AutomationTriggeringRule())))),
                new AutomationSource().withEventSource(EventSource.ATTACK_PATHS)
                    .withRuleSets(Arrays.asList(
                        new AutomationRuleSet()
                            .withRules(Arrays.asList(new AutomationTriggeringRule(), new AutomationTriggeringRule())),
                        new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule(),
                            new AutomationTriggeringRule(), new AutomationTriggeringRule())),
                        new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule())))),
                new AutomationSource().withEventSource(EventSource.ASSESSMENTS_SNAPSHOT)
                    .withRuleSets(
                        Arrays.asList(new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule())),
                            new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule(),
                                new AutomationTriggeringRule(), new AutomationTriggeringRule()))))))
            .withActions(Arrays.asList(new AutomationAction(), new AutomationAction(), new AutomationAction(),
                new AutomationAction()));
        model = BinaryData.fromObject(model).toObject(AutomationInner.class);
        Assertions.assertEquals("bjkvreljeamu", model.location());
        Assertions.assertEquals("mlovuanashcxl", model.tags().get("mjerbdk"));
        Assertions.assertEquals("smjqfrddgam", model.description());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("rsjuivfcdisyir", model.scopes().get(0).description());
        Assertions.assertEquals("zhczexrxzbujrtrh", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.ALERTS, model.sources().get(0).eventSource());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
