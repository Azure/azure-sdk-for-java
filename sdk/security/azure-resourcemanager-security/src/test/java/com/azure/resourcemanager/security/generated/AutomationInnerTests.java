// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.AutomationInner;
import com.azure.resourcemanager.security.models.AutomationAction;
import com.azure.resourcemanager.security.models.AutomationRuleSet;
import com.azure.resourcemanager.security.models.AutomationScope;
import com.azure.resourcemanager.security.models.AutomationSource;
import com.azure.resourcemanager.security.models.AutomationTriggeringRule;
import com.azure.resourcemanager.security.models.EventSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AutomationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutomationInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"dnqqskawaoqvmmb\",\"isEnabled\":false,\"scopes\":[{\"description\":\"qlkzme\",\"scopePath\":\"itgvkx\"}],\"sources\":[{\"eventSource\":\"SubAssessmentsSnapshot\",\"ruleSets\":[{\"rules\":[{},{},{}]},{\"rules\":[{},{},{},{}]}]},{\"eventSource\":\"Assessments\",\"ruleSets\":[{\"rules\":[{},{}]}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"location\":\"nsymoyqhlwigd\",\"tags\":{\"ajuwas\":\"kbxgom\",\"hzbezkgi\":\"vdaeyyguxakjsq\",\"vvjskgfmocwahp\":\"sidxasicdd\"},\"id\":\"gat\",\"name\":\"eaahhvjhhn\",\"type\":\"kzyb\"}")
            .toObject(AutomationInner.class);
        Assertions.assertEquals("nsymoyqhlwigd", model.location());
        Assertions.assertEquals("kbxgom", model.tags().get("ajuwas"));
        Assertions.assertEquals("dnqqskawaoqvmmb", model.description());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("qlkzme", model.scopes().get(0).description());
        Assertions.assertEquals("itgvkx", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.SUB_ASSESSMENTS_SNAPSHOT, model.sources().get(0).eventSource());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutomationInner model = new AutomationInner().withLocation("nsymoyqhlwigd")
            .withTags(mapOf("ajuwas", "kbxgom", "hzbezkgi", "vdaeyyguxakjsq", "vvjskgfmocwahp", "sidxasicdd"))
            .withDescription("dnqqskawaoqvmmb")
            .withIsEnabled(false)
            .withScopes(Arrays.asList(new AutomationScope().withDescription("qlkzme").withScopePath("itgvkx")))
            .withSources(Arrays.asList(
                new AutomationSource().withEventSource(EventSource.SUB_ASSESSMENTS_SNAPSHOT)
                    .withRuleSets(Arrays.asList(
                        new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule(),
                            new AutomationTriggeringRule(), new AutomationTriggeringRule())),
                        new AutomationRuleSet()
                            .withRules(Arrays.asList(new AutomationTriggeringRule(), new AutomationTriggeringRule(),
                                new AutomationTriggeringRule(), new AutomationTriggeringRule())))),
                new AutomationSource().withEventSource(EventSource.ASSESSMENTS)
                    .withRuleSets(Arrays.asList(new AutomationRuleSet()
                        .withRules(Arrays.asList(new AutomationTriggeringRule(), new AutomationTriggeringRule()))))))
            .withActions(Arrays.asList(new AutomationAction(), new AutomationAction()));
        model = BinaryData.fromObject(model).toObject(AutomationInner.class);
        Assertions.assertEquals("nsymoyqhlwigd", model.location());
        Assertions.assertEquals("kbxgom", model.tags().get("ajuwas"));
        Assertions.assertEquals("dnqqskawaoqvmmb", model.description());
        Assertions.assertEquals(false, model.isEnabled());
        Assertions.assertEquals("qlkzme", model.scopes().get(0).description());
        Assertions.assertEquals("itgvkx", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.SUB_ASSESSMENTS_SNAPSHOT, model.sources().get(0).eventSource());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
