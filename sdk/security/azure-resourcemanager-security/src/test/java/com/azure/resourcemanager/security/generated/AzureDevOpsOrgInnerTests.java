// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.AzureDevOpsOrgInner;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsOrgProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AzureDevOpsOrgInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureDevOpsOrgInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningStatusMessage\":\"jaosrxuzv\",\"provisioningStatusUpdateTimeUtc\":\"2021-02-06T04:29:10Z\",\"provisioningState\":\"Failed\",\"onboardingState\":\"NotApplicable\",\"actionableRemediation\":{\"state\":\"Disabled\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"zah\",\"category\":\"Containers\"},{\"minimumSeverityLevel\":\"lyrtltlaprlt\",\"category\":\"Code\"},{\"minimumSeverityLevel\":\"bhjmznnb\",\"category\":\"Dependencies\"}],\"branchConfiguration\":{\"branchNames\":[\"larvlagunbtg\"],\"annotateDefaultBranch\":\"Disabled\"},\"inheritFromParentState\":\"Disabled\"}},\"id\":\"nbmhyree\",\"name\":\"dzqavbpdqmjxlyyz\",\"type\":\"lgouwtlmjj\"}")
            .toObject(AzureDevOpsOrgInner.class);
        Assertions.assertEquals(OnboardingState.NOT_APPLICABLE, model.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.DISABLED,
            model.properties().actionableRemediation().state());
        Assertions.assertEquals("zah",
            model.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.CONTAINERS,
            model.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("larvlagunbtg",
            model.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            model.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.DISABLED,
            model.properties().actionableRemediation().inheritFromParentState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureDevOpsOrgInner model = new AzureDevOpsOrgInner().withProperties(new AzureDevOpsOrgProperties()
            .withOnboardingState(OnboardingState.NOT_APPLICABLE)
            .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.DISABLED)
                .withCategoryConfigurations(Arrays.asList(
                    new CategoryConfiguration().withMinimumSeverityLevel("zah").withCategory(RuleCategory.CONTAINERS),
                    new CategoryConfiguration().withMinimumSeverityLevel("lyrtltlaprlt")
                        .withCategory(RuleCategory.CODE),
                    new CategoryConfiguration().withMinimumSeverityLevel("bhjmznnb")
                        .withCategory(RuleCategory.DEPENDENCIES)))
                .withBranchConfiguration(new TargetBranchConfiguration().withBranchNames(Arrays.asList("larvlagunbtg"))
                    .withAnnotateDefaultBranch(AnnotateDefaultBranchState.DISABLED))
                .withInheritFromParentState(InheritFromParentState.DISABLED)));
        model = BinaryData.fromObject(model).toObject(AzureDevOpsOrgInner.class);
        Assertions.assertEquals(OnboardingState.NOT_APPLICABLE, model.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.DISABLED,
            model.properties().actionableRemediation().state());
        Assertions.assertEquals("zah",
            model.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.CONTAINERS,
            model.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("larvlagunbtg",
            model.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            model.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.DISABLED,
            model.properties().actionableRemediation().inheritFromParentState());
    }
}
