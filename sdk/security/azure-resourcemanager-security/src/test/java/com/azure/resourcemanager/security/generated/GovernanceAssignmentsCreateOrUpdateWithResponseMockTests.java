// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceAssignment;
import com.azure.resourcemanager.security.models.GovernanceAssignmentAdditionalData;
import com.azure.resourcemanager.security.models.GovernanceEmailNotification;
import com.azure.resourcemanager.security.models.RemediationEta;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GovernanceAssignmentsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"owner\":\"mpspfeylq\",\"remediationDueDate\":\"2021-01-17T01:06:19Z\",\"remediationEta\":{\"eta\":\"2021-09-14T20:14:28Z\",\"justification\":\"vujex\"},\"isGracePeriod\":true,\"governanceEmailNotification\":{\"disableManagerEmailNotification\":true,\"disableOwnerEmailNotification\":false},\"additionalData\":{\"ticketNumber\":2064153963,\"ticketLink\":\"paslavxjfiuofpi\",\"ticketStatus\":\"dzlvssqywj\"}},\"id\":\"packyh\",\"name\":\"dvikm\",\"type\":\"ngpmillxgjsci\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SecurityManager manager =
            SecurityManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        GovernanceAssignment response =
            manager
                .governanceAssignments()
                .define("pryj")
                .withExistingAssessment("uerbgpxebjl", "dcaytujraxd")
                .withOwner("nsewouxl")
                .withRemediationDueDate(OffsetDateTime.parse("2021-06-07T17:36:48Z"))
                .withRemediationEta(
                    new RemediationEta()
                        .withEta(OffsetDateTime.parse("2021-06-30T16:12:02Z"))
                        .withJustification("vyljurkeposehqq"))
                .withIsGracePeriod(true)
                .withGovernanceEmailNotification(
                    new GovernanceEmailNotification()
                        .withDisableManagerEmailNotification(true)
                        .withDisableOwnerEmailNotification(false))
                .withAdditionalData(
                    new GovernanceAssignmentAdditionalData()
                        .withTicketNumber(1305721046)
                        .withTicketLink("lzmkxerxxxotee")
                        .withTicketStatus("howgomvvhxo"))
                .create();

        Assertions.assertEquals("mpspfeylq", response.owner());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-17T01:06:19Z"), response.remediationDueDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-14T20:14:28Z"), response.remediationEta().eta());
        Assertions.assertEquals("vujex", response.remediationEta().justification());
        Assertions.assertEquals(true, response.isGracePeriod());
        Assertions.assertEquals(true, response.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableOwnerEmailNotification());
        Assertions.assertEquals(2064153963, response.additionalData().ticketNumber());
        Assertions.assertEquals("paslavxjfiuofpi", response.additionalData().ticketLink());
        Assertions.assertEquals("dzlvssqywj", response.additionalData().ticketStatus());
    }
}
