// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"virtualMachines\":[{\"id\":\"jxnnnoz\",\"ports\":[{\"number\":213218486,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"dtuoamqobqe\"},{\"number\":1680065726,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"sht\"},{\"number\":926157641,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"zfeoctrzjw\"}],\"publicIpAddress\":\"wckzeb\"},{\"id\":\"bvwdxgyypmxq\",\"ports\":[{\"number\":1763246546,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"nxrcatkuhskegdk\"},{\"number\":730100218,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"ilyeshox\"},{\"number\":180908634,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"jdmu\"}],\"publicIpAddress\":\"usx\"},{\"id\":\"ugozwplxzgzumnot\",\"ports\":[{\"number\":1361773912,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"kbygb\"},{\"number\":168327185,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"kwyshybbn\"},{\"number\":1940462931,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"yizonzsurqcoja\"}],\"publicIpAddress\":\"zhzzcarciuoxyipd\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"vnhwsgnsputfel\",\"ports\":[]},{\"id\":\"ch\",\"ports\":[]}],\"startTimeUtc\":\"2021-07-11T12:17:35Z\",\"requestor\":\"fssjgbfbbachxx\",\"justification\":\"zunf\"}],\"provisioningState\":\"phceeivk\"},\"kind\":\"xlepghcnu\",\"location\":\"qpvtwttf\",\"id\":\"clggagygntbfytn\",\"name\":\"dnihuzzjuzvwg\",\"type\":\"zdtorbiwnyfzdpxc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JitNetworkAccessPolicy> response
            = manager.jitNetworkAccessPolicies().listByResourceGroup("tjfdzfmnpbdrc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("xlepghcnu", response.iterator().next().kind());
        Assertions.assertEquals("jxnnnoz", response.iterator().next().virtualMachines().get(0).id());
        Assertions.assertEquals(213218486, response.iterator().next().virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP,
            response.iterator().next().virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("dtuoamqobqe",
            response.iterator().next().virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("wckzeb", response.iterator().next().virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("vnhwsgnsputfel",
            response.iterator().next().requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T12:17:35Z"),
            response.iterator().next().requests().get(0).startTimeUtc());
        Assertions.assertEquals("fssjgbfbbachxx", response.iterator().next().requests().get(0).requestor());
        Assertions.assertEquals("zunf", response.iterator().next().requests().get(0).justification());
    }
}
