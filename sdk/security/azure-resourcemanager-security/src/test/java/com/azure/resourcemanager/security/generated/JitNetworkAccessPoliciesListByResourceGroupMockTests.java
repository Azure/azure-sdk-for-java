// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"virtualMachines\":[{\"id\":\"rhnxzmfvmw\",\"ports\":[{\"number\":1637142886,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"csrawwhyxfs\"}],\"publicIpAddress\":\"bydmvwnbun\"},{\"id\":\"odtevzshqykebmps\",\"ports\":[{\"number\":1481816648,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"cldkck\"}],\"publicIpAddress\":\"ovqdmhcej\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"macjakgkqwxqd\",\"ports\":[]},{\"id\":\"oqzh\",\"ports\":[]},{\"id\":\"wdjox\",\"ports\":[]},{\"id\":\"kbd\",\"ports\":[]}],\"startTimeUtc\":\"2021-09-27T16:18:27Z\",\"requestor\":\"obvcnsbioez\",\"justification\":\"fhnfzxtf\"},{\"virtualMachines\":[{\"id\":\"yugtkxncwdy\",\"ports\":[]}],\"startTimeUtc\":\"2021-02-18T19:32:39Z\",\"requestor\":\"lrlcm\",\"justification\":\"ejywwwvnhwwkrmqe\"},{\"virtualMachines\":[{\"id\":\"hha\",\"ports\":[]},{\"id\":\"qfudfyziruqv\",\"ports\":[]},{\"id\":\"njxiakgyjmzb\",\"ports\":[]}],\"startTimeUtc\":\"2021-03-28T06:33:44Z\",\"requestor\":\"gikyluyu\",\"justification\":\"brdcvoloxtvqcb\"}],\"provisioningState\":\"yhmmglvnbenkps\"},\"kind\":\"kkyankxv\",\"location\":\"tfgfbhnkxasomaf\",\"id\":\"gazhlrdxpc\",\"name\":\"autfzptrcdzy\",\"type\":\"rtffvpkdxcy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JitNetworkAccessPolicy> response
            = manager.jitNetworkAccessPolicies().listByResourceGroup("owtolkyqfnj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kkyankxv", response.iterator().next().kind());
        Assertions.assertEquals("rhnxzmfvmw", response.iterator().next().virtualMachines().get(0).id());
        Assertions.assertEquals(1637142886,
            response.iterator().next().virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP,
            response.iterator().next().virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("csrawwhyxfs",
            response.iterator().next().virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("bydmvwnbun", response.iterator().next().virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("macjakgkqwxqd",
            response.iterator().next().requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-27T16:18:27Z"),
            response.iterator().next().requests().get(0).startTimeUtc());
        Assertions.assertEquals("obvcnsbioez", response.iterator().next().requests().get(0).requestor());
        Assertions.assertEquals("fhnfzxtf", response.iterator().next().requests().get(0).justification());
    }
}
