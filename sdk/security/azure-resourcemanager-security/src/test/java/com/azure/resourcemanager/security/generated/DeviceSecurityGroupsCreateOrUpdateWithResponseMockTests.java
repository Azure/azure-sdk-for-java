// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.AllowlistCustomAlertRule;
import com.azure.resourcemanager.security.models.DenylistCustomAlertRule;
import com.azure.resourcemanager.security.models.DeviceSecurityGroup;
import com.azure.resourcemanager.security.models.ThresholdCustomAlertRule;
import com.azure.resourcemanager.security.models.TimeWindowCustomAlertRule;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DeviceSecurityGroupsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"thresholdRules\":[{\"ruleType\":\"ThresholdCustomAlertRule\",\"minThreshold\":1328706024,\"maxThreshold\":1120187138,\"displayName\":\"vuzimbwttmhlvryc\",\"description\":\"rnwuk\",\"isEnabled\":true},{\"ruleType\":\"ThresholdCustomAlertRule\",\"minThreshold\":599612313,\"maxThreshold\":825877071,\"displayName\":\"dwz\",\"description\":\"gkw\",\"isEnabled\":false}],\"timeWindowRules\":[{\"ruleType\":\"TimeWindowCustomAlertRule\",\"timeWindowSize\":\"PT98H5M\",\"minThreshold\":1609484552,\"maxThreshold\":845690431,\"displayName\":\"yfiqiidxcorjvudy\",\"description\":\"trttcuayiqy\",\"isEnabled\":false},{\"ruleType\":\"TimeWindowCustomAlertRule\",\"timeWindowSize\":\"PT196H24M29S\",\"minThreshold\":421598056,\"maxThreshold\":633612952,\"displayName\":\"zifb\",\"description\":\"qexowqzrtgqrqk\",\"isEnabled\":true}],\"allowlistRules\":[{\"ruleType\":\"AllowlistCustomAlertRule\",\"allowlistValues\":[\"kuobpw\",\"inpgobothxiew\",\"pnyjtu\"],\"valueType\":\"String\",\"displayName\":\"v\",\"description\":\"tc\",\"isEnabled\":false},{\"ruleType\":\"AllowlistCustomAlertRule\",\"allowlistValues\":[\"r\",\"ldowuwhdlrif\",\"ozttcbiich\",\"kudsozodwjc\"],\"valueType\":\"IpCidr\",\"displayName\":\"xryqycymzr\",\"description\":\"fgdwzauz\",\"isEnabled\":true}],\"denylistRules\":[{\"ruleType\":\"DenylistCustomAlertRule\",\"denylistValues\":[\"dnyciwzk\",\"lykqadfge\",\"vzohabbriz\"],\"valueType\":\"IpCidr\",\"displayName\":\"rsbgailjqovqmxq\",\"description\":\"ofx\",\"isEnabled\":false},{\"ruleType\":\"DenylistCustomAlertRule\",\"denylistValues\":[\"iuokglts\",\"ooiobhiebruptl\",\"rvqz\",\"aqsos\"],\"valueType\":\"IpCidr\",\"displayName\":\"vgrghnhu\",\"description\":\"rqhjnin\",\"isEnabled\":true}]},\"id\":\"s\",\"name\":\"vnhqkgeb\",\"type\":\"qzmcsviuj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DeviceSecurityGroup response = manager.deviceSecurityGroups()
            .define("qyrgqmndk")
            .withExistingResourceId("qtrkicw")
            .withThresholdRules(Arrays.asList(new ThresholdCustomAlertRule().withIsEnabled(true)
                .withMinThreshold(778573069)
                .withMaxThreshold(53616592)))
            .withTimeWindowRules(Arrays.asList(
                new TimeWindowCustomAlertRule().withIsEnabled(false)
                    .withMinThreshold(1165273378)
                    .withMaxThreshold(55569092)
                    .withTimeWindowSize(Duration.parse("PT45H1M23S")),
                new TimeWindowCustomAlertRule().withIsEnabled(false)
                    .withMinThreshold(312679817)
                    .withMaxThreshold(1071987260)
                    .withTimeWindowSize(Duration.parse("PT125H55M5S")),
                new TimeWindowCustomAlertRule().withIsEnabled(false)
                    .withMinThreshold(803641039)
                    .withMaxThreshold(268684026)
                    .withTimeWindowSize(Duration.parse("PT153H17M10S"))))
            .withAllowlistRules(Arrays.asList(
                new AllowlistCustomAlertRule().withIsEnabled(false)
                    .withAllowlistValues(Arrays.asList("znrirp", "iuvcqoqkqwucqs", "g", "xcwtvm")),
                new AllowlistCustomAlertRule().withIsEnabled(true)
                    .withAllowlistValues(Arrays.asList("lbhxjppcbqetfzfp", "vo", "zayjwdu", "jh")),
                new AllowlistCustomAlertRule().withIsEnabled(true)
                    .withAllowlistValues(Arrays.asList("zepdpcymgbfm", "quyyaesc"))))
            .withDenylistRules(Arrays.asList(
                new DenylistCustomAlertRule().withIsEnabled(true).withDenylistValues(Arrays.asList("lxvcozcgoe")),
                new DenylistCustomAlertRule().withIsEnabled(true).withDenylistValues(Arrays.asList("nyonelivgt"))))
            .create();

        Assertions.assertEquals(true, response.thresholdRules().get(0).isEnabled());
        Assertions.assertEquals(1328706024, response.thresholdRules().get(0).minThreshold());
        Assertions.assertEquals(1120187138, response.thresholdRules().get(0).maxThreshold());
        Assertions.assertEquals(false, response.timeWindowRules().get(0).isEnabled());
        Assertions.assertEquals(1609484552, response.timeWindowRules().get(0).minThreshold());
        Assertions.assertEquals(845690431, response.timeWindowRules().get(0).maxThreshold());
        Assertions.assertEquals(Duration.parse("PT98H5M"), response.timeWindowRules().get(0).timeWindowSize());
        Assertions.assertEquals(false, response.allowlistRules().get(0).isEnabled());
        Assertions.assertEquals("kuobpw", response.allowlistRules().get(0).allowlistValues().get(0));
        Assertions.assertEquals(false, response.denylistRules().get(0).isEnabled());
        Assertions.assertEquals("dnyciwzk", response.denylistRules().get(0).denylistValues().get(0));
    }
}
