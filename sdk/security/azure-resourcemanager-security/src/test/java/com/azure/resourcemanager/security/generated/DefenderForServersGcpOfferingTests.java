// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOffering;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingArcAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingDefenderForServers;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingMdeAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingSubPlan;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingVaAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingVaAutoProvisioningConfiguration;
import com.azure.resourcemanager.security.models.SubPlan;
import com.azure.resourcemanager.security.models.Type;
import org.junit.jupiter.api.Assertions;

public final class DefenderForServersGcpOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForServersGcpOffering model =
            BinaryData
                .fromString(
                    "{\"offeringType\":\"DefenderForServersGcp\",\"defenderForServers\":{\"workloadIdentityProviderId\":\"vaexh\",\"serviceAccountEmailAddress\":\"trceqnkbrupob\"},\"arcAutoProvisioning\":{\"enabled\":false},\"vaAutoProvisioning\":{\"enabled\":false,\"configuration\":{\"type\":\"Qualys\"}},\"mdeAutoProvisioning\":{\"enabled\":false,\"configuration\":\"datajpbi\"},\"subPlan\":{\"type\":\"P2\"},\"description\":\"hep\"}")
                .toObject(DefenderForServersGcpOffering.class);
        Assertions.assertEquals("vaexh", model.defenderForServers().workloadIdentityProviderId());
        Assertions.assertEquals("trceqnkbrupob", model.defenderForServers().serviceAccountEmailAddress());
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals(false, model.vaAutoProvisioning().enabled());
        Assertions.assertEquals(Type.QUALYS, model.vaAutoProvisioning().configuration().type());
        Assertions.assertEquals(false, model.mdeAutoProvisioning().enabled());
        Assertions.assertEquals(SubPlan.P2, model.subPlan().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForServersGcpOffering model =
            new DefenderForServersGcpOffering()
                .withDefenderForServers(
                    new DefenderForServersGcpOfferingDefenderForServers()
                        .withWorkloadIdentityProviderId("vaexh")
                        .withServiceAccountEmailAddress("trceqnkbrupob"))
                .withArcAutoProvisioning(new DefenderForServersGcpOfferingArcAutoProvisioning().withEnabled(false))
                .withVaAutoProvisioning(
                    new DefenderForServersGcpOfferingVaAutoProvisioning()
                        .withEnabled(false)
                        .withConfiguration(
                            new DefenderForServersGcpOfferingVaAutoProvisioningConfiguration().withType(Type.QUALYS)))
                .withMdeAutoProvisioning(
                    new DefenderForServersGcpOfferingMdeAutoProvisioning()
                        .withEnabled(false)
                        .withConfiguration("datajpbi"))
                .withSubPlan(new DefenderForServersGcpOfferingSubPlan().withType(SubPlan.P2));
        model = BinaryData.fromObject(model).toObject(DefenderForServersGcpOffering.class);
        Assertions.assertEquals("vaexh", model.defenderForServers().workloadIdentityProviderId());
        Assertions.assertEquals("trceqnkbrupob", model.defenderForServers().serviceAccountEmailAddress());
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals(false, model.vaAutoProvisioning().enabled());
        Assertions.assertEquals(Type.QUALYS, model.vaAutoProvisioning().configuration().type());
        Assertions.assertEquals(false, model.mdeAutoProvisioning().enabled());
        Assertions.assertEquals(SubPlan.P2, model.subPlan().type());
    }
}
