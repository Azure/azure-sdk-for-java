// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ArcAutoProvisioningConfiguration;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOffering;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingArcAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingDefenderForServers;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingMdeAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingSubPlan;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingVaAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingVaAutoProvisioningConfiguration;
import com.azure.resourcemanager.security.models.DefenderForServersGcpOfferingVmScanners;
import com.azure.resourcemanager.security.models.ScanningMode;
import com.azure.resourcemanager.security.models.SubPlan;
import com.azure.resourcemanager.security.models.Type;
import com.azure.resourcemanager.security.models.VmScannersBaseConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderForServersGcpOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForServersGcpOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderForServersGcp\",\"defenderForServers\":{\"workloadIdentityProviderId\":\"afxcz\",\"serviceAccountEmailAddress\":\"cckwrtwle\"},\"arcAutoProvisioning\":{\"enabled\":false,\"configuration\":{\"proxy\":\"rtlhpdhwyn\",\"privateLinkScope\":\"aczcnjfmbbfnvjxi\"}},\"vaAutoProvisioning\":{\"enabled\":false,\"configuration\":{\"type\":\"TVM\"}},\"mdeAutoProvisioning\":{\"enabled\":false,\"configuration\":\"datas\"},\"subPlan\":{\"type\":\"P1\"},\"vmScanners\":{\"enabled\":false,\"configuration\":{\"scanningMode\":\"Default\",\"exclusionTags\":{\"hyxwbgbud\":\"ii\",\"thojvlirknucos\":\"vqdorbccqcd\"}}},\"description\":\"rdtnagzl\"}")
            .toObject(DefenderForServersGcpOffering.class);
        Assertions.assertEquals("afxcz", model.defenderForServers().workloadIdentityProviderId());
        Assertions.assertEquals("cckwrtwle", model.defenderForServers().serviceAccountEmailAddress());
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals("rtlhpdhwyn", model.arcAutoProvisioning().configuration().proxy());
        Assertions.assertEquals("aczcnjfmbbfnvjxi", model.arcAutoProvisioning().configuration().privateLinkScope());
        Assertions.assertEquals(false, model.vaAutoProvisioning().enabled());
        Assertions.assertEquals(Type.TVM, model.vaAutoProvisioning().configuration().type());
        Assertions.assertEquals(false, model.mdeAutoProvisioning().enabled());
        Assertions.assertEquals(SubPlan.P1, model.subPlan().type());
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("ii", model.vmScanners().configuration().exclusionTags().get("hyxwbgbud"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForServersGcpOffering model = new DefenderForServersGcpOffering()
            .withDefenderForServers(
                new DefenderForServersGcpOfferingDefenderForServers().withWorkloadIdentityProviderId("afxcz")
                    .withServiceAccountEmailAddress("cckwrtwle"))
            .withArcAutoProvisioning(new DefenderForServersGcpOfferingArcAutoProvisioning().withEnabled(false)
                .withConfiguration(new ArcAutoProvisioningConfiguration().withProxy("rtlhpdhwyn")
                    .withPrivateLinkScope("aczcnjfmbbfnvjxi")))
            .withVaAutoProvisioning(new DefenderForServersGcpOfferingVaAutoProvisioning().withEnabled(false)
                .withConfiguration(
                    new DefenderForServersGcpOfferingVaAutoProvisioningConfiguration().withType(Type.TVM)))
            .withMdeAutoProvisioning(
                new DefenderForServersGcpOfferingMdeAutoProvisioning().withEnabled(false).withConfiguration("datas"))
            .withSubPlan(new DefenderForServersGcpOfferingSubPlan().withType(SubPlan.P1))
            .withVmScanners(new DefenderForServersGcpOfferingVmScanners().withEnabled(false)
                .withConfiguration(new VmScannersBaseConfiguration().withScanningMode(ScanningMode.DEFAULT)
                    .withExclusionTags(mapOf("hyxwbgbud", "ii", "thojvlirknucos", "vqdorbccqcd"))));
        model = BinaryData.fromObject(model).toObject(DefenderForServersGcpOffering.class);
        Assertions.assertEquals("afxcz", model.defenderForServers().workloadIdentityProviderId());
        Assertions.assertEquals("cckwrtwle", model.defenderForServers().serviceAccountEmailAddress());
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals("rtlhpdhwyn", model.arcAutoProvisioning().configuration().proxy());
        Assertions.assertEquals("aczcnjfmbbfnvjxi", model.arcAutoProvisioning().configuration().privateLinkScope());
        Assertions.assertEquals(false, model.vaAutoProvisioning().enabled());
        Assertions.assertEquals(Type.TVM, model.vaAutoProvisioning().configuration().type());
        Assertions.assertEquals(false, model.mdeAutoProvisioning().enabled());
        Assertions.assertEquals(SubPlan.P1, model.subPlan().type());
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("ii", model.vmScanners().configuration().exclusionTags().get("hyxwbgbud"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
