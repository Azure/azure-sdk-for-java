// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.ArcAutoProvisioningConfiguration;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOffering;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOfferingArcAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOfferingDefenderForServers;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOfferingMdeAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOfferingSubPlan;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOfferingVaAutoProvisioning;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOfferingVaAutoProvisioningConfiguration;
import com.azure.resourcemanager.security.models.DefenderForServersAwsOfferingVmScanners;
import com.azure.resourcemanager.security.models.ScanningMode;
import com.azure.resourcemanager.security.models.SubPlan;
import com.azure.resourcemanager.security.models.Type;
import com.azure.resourcemanager.security.models.VmScannersBaseConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderForServersAwsOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForServersAwsOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderForServersAws\",\"defenderForServers\":{\"cloudRoleArn\":\"euukppdi\"},\"arcAutoProvisioning\":{\"cloudRoleArn\":\"olxvhhyqqe\",\"enabled\":false,\"configuration\":{\"proxy\":\"rznmginmtsdixc\",\"privateLinkScope\":\"kibmgjymn\"}},\"vaAutoProvisioning\":{\"enabled\":true,\"configuration\":{\"type\":\"TVM\"}},\"mdeAutoProvisioning\":{\"enabled\":true,\"configuration\":\"datazoofj\"},\"subPlan\":{\"type\":\"P1\"},\"vmScanners\":{\"cloudRoleArn\":\"pfbhtleber\",\"enabled\":false,\"configuration\":{\"scanningMode\":\"Default\",\"exclusionTags\":{\"owkdnjr\":\"qnwjjq\",\"wiehycpn\":\"gkr\"}}},\"description\":\"awonoehrguqlhfw\"}")
            .toObject(DefenderForServersAwsOffering.class);
        Assertions.assertEquals("euukppdi", model.defenderForServers().cloudRoleArn());
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals("rznmginmtsdixc", model.arcAutoProvisioning().configuration().proxy());
        Assertions.assertEquals("kibmgjymn", model.arcAutoProvisioning().configuration().privateLinkScope());
        Assertions.assertEquals("olxvhhyqqe", model.arcAutoProvisioning().cloudRoleArn());
        Assertions.assertEquals(true, model.vaAutoProvisioning().enabled());
        Assertions.assertEquals(Type.TVM, model.vaAutoProvisioning().configuration().type());
        Assertions.assertEquals(true, model.mdeAutoProvisioning().enabled());
        Assertions.assertEquals(SubPlan.P1, model.subPlan().type());
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("qnwjjq", model.vmScanners().configuration().exclusionTags().get("owkdnjr"));
        Assertions.assertEquals("pfbhtleber", model.vmScanners().cloudRoleArn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForServersAwsOffering model = new DefenderForServersAwsOffering()
            .withDefenderForServers(new DefenderForServersAwsOfferingDefenderForServers().withCloudRoleArn("euukppdi"))
            .withArcAutoProvisioning(new DefenderForServersAwsOfferingArcAutoProvisioning().withEnabled(false)
                .withConfiguration(new ArcAutoProvisioningConfiguration().withProxy("rznmginmtsdixc")
                    .withPrivateLinkScope("kibmgjymn"))
                .withCloudRoleArn("olxvhhyqqe"))
            .withVaAutoProvisioning(new DefenderForServersAwsOfferingVaAutoProvisioning().withEnabled(true)
                .withConfiguration(
                    new DefenderForServersAwsOfferingVaAutoProvisioningConfiguration().withType(Type.TVM)))
            .withMdeAutoProvisioning(
                new DefenderForServersAwsOfferingMdeAutoProvisioning().withEnabled(true).withConfiguration("datazoofj"))
            .withSubPlan(new DefenderForServersAwsOfferingSubPlan().withType(SubPlan.P1))
            .withVmScanners(new DefenderForServersAwsOfferingVmScanners().withEnabled(false)
                .withConfiguration(new VmScannersBaseConfiguration().withScanningMode(ScanningMode.DEFAULT)
                    .withExclusionTags(mapOf("owkdnjr", "qnwjjq", "wiehycpn", "gkr")))
                .withCloudRoleArn("pfbhtleber"));
        model = BinaryData.fromObject(model).toObject(DefenderForServersAwsOffering.class);
        Assertions.assertEquals("euukppdi", model.defenderForServers().cloudRoleArn());
        Assertions.assertEquals(false, model.arcAutoProvisioning().enabled());
        Assertions.assertEquals("rznmginmtsdixc", model.arcAutoProvisioning().configuration().proxy());
        Assertions.assertEquals("kibmgjymn", model.arcAutoProvisioning().configuration().privateLinkScope());
        Assertions.assertEquals("olxvhhyqqe", model.arcAutoProvisioning().cloudRoleArn());
        Assertions.assertEquals(true, model.vaAutoProvisioning().enabled());
        Assertions.assertEquals(Type.TVM, model.vaAutoProvisioning().configuration().type());
        Assertions.assertEquals(true, model.mdeAutoProvisioning().enabled());
        Assertions.assertEquals(SubPlan.P1, model.subPlan().type());
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("qnwjjq", model.vmScanners().configuration().exclusionTags().get("owkdnjr"));
        Assertions.assertEquals("pfbhtleber", model.vmScanners().cloudRoleArn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
