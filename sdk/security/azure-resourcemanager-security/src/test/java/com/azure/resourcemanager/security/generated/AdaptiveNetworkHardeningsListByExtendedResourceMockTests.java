// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.AdaptiveNetworkHardening;
import com.azure.resourcemanager.security.models.Direction;
import com.azure.resourcemanager.security.models.TransportProtocol;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AdaptiveNetworkHardeningsListByExtendedResourceMockTests {
    @Test
    public void testListByExtendedResource() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"rules\":[{\"name\":\"pfv\",\"direction\":\"Inbound\",\"destinationPort\":1760398745,\"protocols\":[\"UDP\",\"UDP\",\"UDP\",\"UDP\"],\"ipAddresses\":[\"kjtefbdp\",\"u\"]},{\"name\":\"gc\",\"direction\":\"Inbound\",\"destinationPort\":304883302,\"protocols\":[\"UDP\",\"TCP\",\"TCP\"],\"ipAddresses\":[\"xh\",\"chmetvzhuugdykgd\",\"kwvbqcawwa\",\"qtsrnyotgnmz\"]},{\"name\":\"creluedcmk\",\"direction\":\"Inbound\",\"destinationPort\":2089076850,\"protocols\":[\"TCP\"],\"ipAddresses\":[\"llxwkno\",\"xdjklfsd\",\"tkqiymmddslwnlg\"]},{\"name\":\"lhmkspybnnn\",\"direction\":\"Inbound\",\"destinationPort\":1343602215,\"protocols\":[\"UDP\"],\"ipAddresses\":[\"upmrs\",\"wknrdvvmb\",\"erndzzywxqraqxtk\",\"eetnn\"]}],\"rulesCalculationTime\":\"2021-05-17T04:55:07Z\",\"effectiveNetworkSecurityGroups\":[{\"networkInterface\":\"ks\",\"networkSecurityGroups\":[\"jmr\"]},{\"networkInterface\":\"xwasfwqjzybmfq\",\"networkSecurityGroups\":[\"pfcfguamrvamuvkg\",\"wpjbblu\",\"gctvnspjvsyydj\",\"hdukcsqvyeegxhu\"]},{\"networkInterface\":\"jwum\",\"networkSecurityGroups\":[\"ym\",\"qvnxpfyxdjs\",\"nonxemhqpz\"]}]},\"id\":\"nat\",\"name\":\"vgcm\",\"type\":\"vdjlww\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AdaptiveNetworkHardening> response = manager.adaptiveNetworkHardenings()
            .listByExtendedResource("omotq", "ql", "eyi", "gq", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pfv", response.iterator().next().rules().get(0).name());
        Assertions.assertEquals(Direction.INBOUND, response.iterator().next().rules().get(0).direction());
        Assertions.assertEquals(1760398745, response.iterator().next().rules().get(0).destinationPort());
        Assertions.assertEquals(TransportProtocol.UDP, response.iterator().next().rules().get(0).protocols().get(0));
        Assertions.assertEquals("kjtefbdp", response.iterator().next().rules().get(0).ipAddresses().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T04:55:07Z"),
            response.iterator().next().rulesCalculationTime());
        Assertions.assertEquals("ks",
            response.iterator().next().effectiveNetworkSecurityGroups().get(0).networkInterface());
        Assertions.assertEquals("jmr",
            response.iterator().next().effectiveNetworkSecurityGroups().get(0).networkSecurityGroups().get(0));
    }
}
