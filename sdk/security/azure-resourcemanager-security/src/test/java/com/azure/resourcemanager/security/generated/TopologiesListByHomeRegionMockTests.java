// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.TopologyResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TopologiesListByHomeRegionMockTests {
    @Test
    public void testListByHomeRegion() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"calculatedDateTime\":\"2021-10-18T09:10:33Z\",\"topologyResources\":[{\"resourceId\":\"szk\",\"severity\":\"kosjwr\",\"recommendationsExist\":true,\"networkZones\":\"luqf\",\"topologyScore\":87557700,\"location\":\"iimi\",\"parents\":[{},{},{}],\"children\":[{},{},{}]},{\"resourceId\":\"buwbngeu\",\"severity\":\"dqngqamhb\",\"recommendationsExist\":false,\"networkZones\":\"qxn\",\"topologyScore\":1320935222,\"location\":\"affzqodokstkvomd\",\"parents\":[{},{}],\"children\":[{},{},{}]},{\"resourceId\":\"qipapifccydbjgh\",\"severity\":\"qnttrw\",\"recommendationsExist\":false,\"networkZones\":\"vvxdvphx\",\"topologyScore\":1446080525,\"location\":\"xcaicb\",\"parents\":[{},{}],\"children\":[{},{},{}]}]},\"location\":\"fovkmamiy\",\"id\":\"gunrukcyyaa\",\"name\":\"bkubzqazdlrkvi\",\"type\":\"zkifqbxmnnid\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<TopologyResource> response
            = manager.topologies().listByHomeRegion("poipdjxyotgvrax", com.azure.core.util.Context.NONE);

    }
}
