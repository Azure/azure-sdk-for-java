// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.AutomationAction;
import com.azure.resourcemanager.security.models.AutomationRuleSet;
import com.azure.resourcemanager.security.models.AutomationScope;
import com.azure.resourcemanager.security.models.AutomationSource;
import com.azure.resourcemanager.security.models.AutomationTriggeringRule;
import com.azure.resourcemanager.security.models.AutomationUpdateModel;
import com.azure.resourcemanager.security.models.EventSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AutomationUpdateModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutomationUpdateModel model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"bwnhhtql\",\"isEnabled\":true,\"scopes\":[{\"description\":\"ipifhpfeoajvg\",\"scopePath\":\"txjcsheafidlt\"},{\"description\":\"sr\",\"scopePath\":\"mks\"},{\"description\":\"h\",\"scopePath\":\"ftxfkf\"}],\"sources\":[{\"eventSource\":\"SubAssessments\",\"ruleSets\":[{\"rules\":[{}]}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"tags\":{\"hm\":\"biqtgdq\",\"lllibph\":\"wsldrizetpwbr\",\"a\":\"qzmiza\"}}")
            .toObject(AutomationUpdateModel.class);
        Assertions.assertEquals("biqtgdq", model.tags().get("hm"));
        Assertions.assertEquals("bwnhhtql", model.description());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("ipifhpfeoajvg", model.scopes().get(0).description());
        Assertions.assertEquals("txjcsheafidlt", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.SUB_ASSESSMENTS, model.sources().get(0).eventSource());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutomationUpdateModel model
            = new AutomationUpdateModel().withTags(mapOf("hm", "biqtgdq", "lllibph", "wsldrizetpwbr", "a", "qzmiza"))
                .withDescription("bwnhhtql")
                .withIsEnabled(true)
                .withScopes(
                    Arrays.asList(new AutomationScope().withDescription("ipifhpfeoajvg").withScopePath("txjcsheafidlt"),
                        new AutomationScope().withDescription("sr").withScopePath("mks"),
                        new AutomationScope().withDescription("h").withScopePath("ftxfkf")))
                .withSources(Arrays.asList(new AutomationSource().withEventSource(EventSource.SUB_ASSESSMENTS)
                    .withRuleSets(Arrays
                        .asList(new AutomationRuleSet().withRules(Arrays.asList(new AutomationTriggeringRule()))))))
                .withActions(Arrays.asList(new AutomationAction(), new AutomationAction(), new AutomationAction(),
                    new AutomationAction()));
        model = BinaryData.fromObject(model).toObject(AutomationUpdateModel.class);
        Assertions.assertEquals("biqtgdq", model.tags().get("hm"));
        Assertions.assertEquals("bwnhhtql", model.description());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("ipifhpfeoajvg", model.scopes().get(0).description());
        Assertions.assertEquals("txjcsheafidlt", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.SUB_ASSESSMENTS, model.sources().get(0).eventSource());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
