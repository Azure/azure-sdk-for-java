// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.AutomationAction;
import com.azure.resourcemanager.security.models.AutomationRuleSet;
import com.azure.resourcemanager.security.models.AutomationScope;
import com.azure.resourcemanager.security.models.AutomationSource;
import com.azure.resourcemanager.security.models.AutomationTriggeringRule;
import com.azure.resourcemanager.security.models.AutomationUpdateModel;
import com.azure.resourcemanager.security.models.EventSource;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AutomationUpdateModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AutomationUpdateModel model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"dorhcgyyp\",\"isEnabled\":true,\"scopes\":[{\"description\":\"undmbx\",\"scopePath\":\"gcmjkavl\"},{\"description\":\"rb\",\"scopePath\":\"tp\"},{\"description\":\"tzfjltf\",\"scopePath\":\"zcyjtot\"}],\"sources\":[{\"eventSource\":\"SubAssessments\",\"ruleSets\":[{\"rules\":[{},{}]}]}],\"actions\":[{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"},{\"actionType\":\"AutomationAction\"}]},\"tags\":{\"hedsvqwthmkyib\":\"q\",\"sgqcwdho\":\"ysi\",\"fcohdxbzlmcmu\":\"sdtmcdzs\",\"onqzinkfkbgbzbow\":\"pcvhdbevwqqxeys\"}}")
            .toObject(AutomationUpdateModel.class);
        Assertions.assertEquals("q", model.tags().get("hedsvqwthmkyib"));
        Assertions.assertEquals("dorhcgyyp", model.description());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("undmbx", model.scopes().get(0).description());
        Assertions.assertEquals("gcmjkavl", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.SUB_ASSESSMENTS, model.sources().get(0).eventSource());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AutomationUpdateModel model = new AutomationUpdateModel()
            .withTags(mapOf("hedsvqwthmkyib", "q", "sgqcwdho", "ysi", "fcohdxbzlmcmu", "sdtmcdzs", "onqzinkfkbgbzbow",
                "pcvhdbevwqqxeys"))
            .withDescription("dorhcgyyp")
            .withIsEnabled(true)
            .withScopes(Arrays.asList(new AutomationScope().withDescription("undmbx").withScopePath("gcmjkavl"),
                new AutomationScope().withDescription("rb").withScopePath("tp"),
                new AutomationScope().withDescription("tzfjltf").withScopePath("zcyjtot")))
            .withSources(Arrays.asList(new AutomationSource().withEventSource(EventSource.SUB_ASSESSMENTS)
                .withRuleSets(Arrays.asList(new AutomationRuleSet()
                    .withRules(Arrays.asList(new AutomationTriggeringRule(), new AutomationTriggeringRule()))))))
            .withActions(Arrays.asList(new AutomationAction(), new AutomationAction(), new AutomationAction(),
                new AutomationAction()));
        model = BinaryData.fromObject(model).toObject(AutomationUpdateModel.class);
        Assertions.assertEquals("q", model.tags().get("hedsvqwthmkyib"));
        Assertions.assertEquals("dorhcgyyp", model.description());
        Assertions.assertEquals(true, model.isEnabled());
        Assertions.assertEquals("undmbx", model.scopes().get(0).description());
        Assertions.assertEquals("gcmjkavl", model.scopes().get(0).scopePath());
        Assertions.assertEquals(EventSource.SUB_ASSESSMENTS, model.sources().get(0).eventSource());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
