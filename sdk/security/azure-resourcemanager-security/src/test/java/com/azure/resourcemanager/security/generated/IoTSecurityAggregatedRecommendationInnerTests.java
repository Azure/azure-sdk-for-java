// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecurityAggregatedRecommendationInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecurityAggregatedRecommendationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecurityAggregatedRecommendationInner model = BinaryData.fromString(
            "{\"properties\":{\"recommendationName\":\"xrmcqibycnojvk\",\"recommendationDisplayName\":\"e\",\"description\":\"sgzvahapjyzhpv\",\"recommendationTypeId\":\"zcjrvxdjzlmwlx\",\"detectedBy\":\"ug\",\"remediationSteps\":\"zovawjvz\",\"reportedSeverity\":\"Low\",\"healthyDevices\":6384208989627743230,\"unhealthyDeviceCount\":193130563963832642,\"logAnalyticsQuery\":\"nxipeil\"},\"tags\":{\"bbtdzumvee\":\"uaejxdultsk\",\"zuhkfpbsjyof\":\"gpw\"},\"id\":\"xl\",\"name\":\"us\",\"type\":\"ttouwaboekqvkel\"}")
            .toObject(IoTSecurityAggregatedRecommendationInner.class);
        Assertions.assertEquals("uaejxdultsk", model.tags().get("bbtdzumvee"));
        Assertions.assertEquals("xrmcqibycnojvk", model.recommendationName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecurityAggregatedRecommendationInner model = new IoTSecurityAggregatedRecommendationInner()
            .withTags(mapOf("bbtdzumvee", "uaejxdultsk", "zuhkfpbsjyof", "gpw"))
            .withRecommendationName("xrmcqibycnojvk");
        model = BinaryData.fromObject(model).toObject(IoTSecurityAggregatedRecommendationInner.class);
        Assertions.assertEquals("uaejxdultsk", model.tags().get("bbtdzumvee"));
        Assertions.assertEquals("xrmcqibycnojvk", model.recommendationName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
