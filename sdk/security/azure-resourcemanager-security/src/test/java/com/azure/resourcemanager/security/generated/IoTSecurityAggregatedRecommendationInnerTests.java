// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecurityAggregatedRecommendationInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecurityAggregatedRecommendationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecurityAggregatedRecommendationInner model = BinaryData.fromString(
            "{\"properties\":{\"recommendationName\":\"otz\",\"recommendationDisplayName\":\"d\",\"description\":\"llgryfqiuasigr\",\"recommendationTypeId\":\"socnequygdjboq\",\"detectedBy\":\"mtqjkqevadrmm\",\"remediationSteps\":\"uawvcmjzk\",\"reportedSeverity\":\"Medium\",\"healthyDevices\":1360540220147078445,\"unhealthyDeviceCount\":8823059610268043114,\"logAnalyticsQuery\":\"oswoqiqazugamx\"},\"tags\":{\"amnppcce\":\"rcoiis\",\"tdsbezax\":\"u\"},\"id\":\"f\",\"name\":\"kzxuiz\",\"type\":\"y\"}")
            .toObject(IoTSecurityAggregatedRecommendationInner.class);
        Assertions.assertEquals("rcoiis", model.tags().get("amnppcce"));
        Assertions.assertEquals("otz", model.recommendationName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecurityAggregatedRecommendationInner model = new IoTSecurityAggregatedRecommendationInner()
            .withTags(mapOf("amnppcce", "rcoiis", "tdsbezax", "u")).withRecommendationName("otz");
        model = BinaryData.fromObject(model).toObject(IoTSecurityAggregatedRecommendationInner.class);
        Assertions.assertEquals("rcoiis", model.tags().get("amnppcce"));
        Assertions.assertEquals("otz", model.recommendationName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
