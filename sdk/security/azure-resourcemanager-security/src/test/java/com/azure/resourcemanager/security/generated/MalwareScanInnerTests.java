// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.MalwareScanInner;
import com.azure.resourcemanager.security.models.BlobsScanSummary;
import com.azure.resourcemanager.security.models.MalwareScanProperties;
import com.azure.resourcemanager.security.models.ScanSummary;
import org.junit.jupiter.api.Assertions;

public final class MalwareScanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MalwareScanInner model = BinaryData.fromString(
            "{\"properties\":{\"scanId\":\"aongbj\",\"scanStatus\":\"tujitcjedft\",\"scanStatusMessage\":\"ae\",\"scanStartTime\":\"ojvdcpzfoqo\",\"scanEndTime\":\"cybxa\",\"scanSummary\":{\"blobs\":{\"totalBlobsScanned\":3190948346133126702,\"maliciousBlobsCount\":7790831784605788648,\"skippedBlobsCount\":5666070682617757665,\"scannedBlobsInGB\":3.581124185797613},\"estimatedScanCostUSD\":47.23536410668127}}}")
            .toObject(MalwareScanInner.class);
        Assertions.assertEquals("aongbj", model.properties().scanId());
        Assertions.assertEquals("tujitcjedft", model.properties().scanStatus());
        Assertions.assertEquals("ae", model.properties().scanStatusMessage());
        Assertions.assertEquals("ojvdcpzfoqo", model.properties().scanStartTime());
        Assertions.assertEquals("cybxa", model.properties().scanEndTime());
        Assertions.assertEquals(3190948346133126702L, model.properties().scanSummary().blobs().totalBlobsScanned());
        Assertions.assertEquals(7790831784605788648L, model.properties().scanSummary().blobs().maliciousBlobsCount());
        Assertions.assertEquals(5666070682617757665L, model.properties().scanSummary().blobs().skippedBlobsCount());
        Assertions.assertEquals(3.581124185797613D, model.properties().scanSummary().blobs().scannedBlobsInGB());
        Assertions.assertEquals(47.23536410668127D, model.properties().scanSummary().estimatedScanCostUsd());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MalwareScanInner model
            = new MalwareScanInner()
                .withProperties(
                    new MalwareScanProperties().withScanId("aongbj")
                        .withScanStatus("tujitcjedft")
                        .withScanStatusMessage("ae")
                        .withScanStartTime("ojvdcpzfoqo")
                        .withScanEndTime("cybxa")
                        .withScanSummary(new ScanSummary()
                            .withBlobs(new BlobsScanSummary().withTotalBlobsScanned(3190948346133126702L)
                                .withMaliciousBlobsCount(7790831784605788648L)
                                .withSkippedBlobsCount(5666070682617757665L)
                                .withScannedBlobsInGB(3.581124185797613D))
                            .withEstimatedScanCostUsd(47.23536410668127D)));
        model = BinaryData.fromObject(model).toObject(MalwareScanInner.class);
        Assertions.assertEquals("aongbj", model.properties().scanId());
        Assertions.assertEquals("tujitcjedft", model.properties().scanStatus());
        Assertions.assertEquals("ae", model.properties().scanStatusMessage());
        Assertions.assertEquals("ojvdcpzfoqo", model.properties().scanStartTime());
        Assertions.assertEquals("cybxa", model.properties().scanEndTime());
        Assertions.assertEquals(3190948346133126702L, model.properties().scanSummary().blobs().totalBlobsScanned());
        Assertions.assertEquals(7790831784605788648L, model.properties().scanSummary().blobs().maliciousBlobsCount());
        Assertions.assertEquals(5666070682617757665L, model.properties().scanSummary().blobs().skippedBlobsCount());
        Assertions.assertEquals(3.581124185797613D, model.properties().scanSummary().blobs().scannedBlobsInGB());
        Assertions.assertEquals(47.23536410668127D, model.properties().scanSummary().estimatedScanCostUsd());
    }
}
