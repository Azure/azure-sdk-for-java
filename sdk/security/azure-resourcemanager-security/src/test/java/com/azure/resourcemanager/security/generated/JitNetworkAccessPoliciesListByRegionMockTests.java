// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesListByRegionMockTests {
    @Test
    public void testListByRegion() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"virtualMachines\":[{\"id\":\"enegg\",\"ports\":[{\"number\":1307676483,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"zpxlitwkejmgemud\"},{\"number\":883228909,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"hskvsdfvhrypezam\"}],\"publicIpAddress\":\"kapvnpeukgn\"},{\"id\":\"fakeqnitro\",\"ports\":[{\"number\":61090455,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"vktfp\"},{\"number\":1173407545,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"wshvfxjt\"},{\"number\":540342239,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"wmvdyq\"},{\"number\":1270557733,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"ropxfqd\"}],\"publicIpAddress\":\"lznyjyuw\"},{\"id\":\"lzwgdpvhw\",\"ports\":[{\"number\":1167647739,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"amqtrhqdoxdegacd\"},{\"number\":1399760112,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"kw\"},{\"number\":363665282,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"bpgdcidpdaqe\"},{\"number\":444699563,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"ddlirqqcl\"}],\"publicIpAddress\":\"qifepdureeviv\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"ioklsuffp\",\"ports\":[]},{\"id\":\"eswc\",\"ports\":[]},{\"id\":\"lfytbltytvnpbgce\",\"ports\":[]}],\"startTimeUtc\":\"2021-05-06T14:28:24Z\",\"requestor\":\"ddfclmowu\",\"justification\":\"fofkbcjzzwweob\"},{\"virtualMachines\":[{\"id\":\"tdqzhixccnkfso\",\"ports\":[]}],\"startTimeUtc\":\"2020-12-24T00:27:56Z\",\"requestor\":\"yoxmyqzyqepg\",\"justification\":\"z\"}],\"provisioningState\":\"luokc\"},\"kind\":\"oxdddpwmgwxwuk\",\"location\":\"v\",\"id\":\"glaxseis\",\"name\":\"vvgyphheo\",\"type\":\"ejk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JitNetworkAccessPolicy> response
            = manager.jitNetworkAccessPolicies().listByRegion("anguhbnhogse", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("oxdddpwmgwxwuk", response.iterator().next().kind());
        Assertions.assertEquals("enegg", response.iterator().next().virtualMachines().get(0).id());
        Assertions.assertEquals(1307676483,
            response.iterator().next().virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP,
            response.iterator().next().virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("zpxlitwkejmgemud",
            response.iterator().next().virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("kapvnpeukgn", response.iterator().next().virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("ioklsuffp",
            response.iterator().next().requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T14:28:24Z"),
            response.iterator().next().requests().get(0).startTimeUtc());
        Assertions.assertEquals("ddfclmowu", response.iterator().next().requests().get(0).requestor());
        Assertions.assertEquals("fofkbcjzzwweob", response.iterator().next().requests().get(0).justification());
    }
}
