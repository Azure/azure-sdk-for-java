// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesListByRegionMockTests {
    @Test
    public void testListByRegion() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"virtualMachines\":[{\"id\":\"xnwcgzuoxixtx\",\"ports\":[{\"number\":1460009454,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"sehbknnrnk\"},{\"number\":589543785,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"awpcbso\"}],\"publicIpAddress\":\"ehczbnivcohsxv\"},{\"id\":\"pkjealkdbewhotv\",\"ports\":[{\"number\":1781899157,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"uq\"},{\"number\":1424020455,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"dktrjtoqszh\"}],\"publicIpAddress\":\"ngjn\"},{\"id\":\"kvzmxlffqg\",\"ports\":[{\"number\":852860637,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"kqyipgkmjtda\"},{\"number\":2035829379,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"zesimef\"},{\"number\":486715826,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"rfzjlflzagvdavab\"},{\"number\":624510871,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"fcorzbidae\"}],\"publicIpAddress\":\"zni\"},{\"id\":\"e\",\"ports\":[{\"number\":978435959,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"jwiylciobb\"},{\"number\":969466087,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"srzeqxuecuuuexsm\"},{\"number\":706554267,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"evfgaxfe\"},{\"number\":54733302,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"qsddk\"}],\"publicIpAddress\":\"kgxqfkyrxgmzze\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"zfss\",\"ports\":[]},{\"id\":\"fegaok\",\"ports\":[]},{\"id\":\"ddkkraj\",\"ports\":[]},{\"id\":\"yuklxkel\",\"ports\":[]}],\"startTimeUtc\":\"2021-01-04T09:23:26Z\",\"requestor\":\"pyqbwhue\",\"justification\":\"hgsingm\"}],\"provisioningState\":\"avsf\"},\"kind\":\"rvqrwwbdrwroqk\",\"location\":\"nzpqhqqsarky\",\"id\":\"lfameaasjq\",\"name\":\"nhekzazvgeytlpls\",\"type\":\"fcvedks\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JitNetworkAccessPolicy> response
            = manager.jitNetworkAccessPolicies().listByRegion("m", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rvqrwwbdrwroqk", response.iterator().next().kind());
        Assertions.assertEquals("xnwcgzuoxixtx", response.iterator().next().virtualMachines().get(0).id());
        Assertions.assertEquals(1460009454,
            response.iterator().next().virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP,
            response.iterator().next().virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("sehbknnrnk",
            response.iterator().next().virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("ehczbnivcohsxv",
            response.iterator().next().virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("zfss", response.iterator().next().requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-04T09:23:26Z"),
            response.iterator().next().requests().get(0).startTimeUtc());
        Assertions.assertEquals("pyqbwhue", response.iterator().next().requests().get(0).requestor());
        Assertions.assertEquals("hgsingm", response.iterator().next().requests().get(0).justification());
    }
}
