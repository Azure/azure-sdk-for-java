// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOffering;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingCiem;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingCiemDiscovery;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingCiemOidc;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingDataSensitivityDiscovery;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingDatabasesDspm;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8S;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingMdcContainersImageAssessment;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingVmScanners;
import com.azure.resourcemanager.security.models.ScanningMode;
import com.azure.resourcemanager.security.models.VmScannersBaseConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderCspmAwsOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderCspmAwsOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderCspmAws\",\"vmScanners\":{\"cloudRoleArn\":\"cbygvthrmx\",\"enabled\":false,\"configuration\":{\"scanningMode\":\"Default\",\"exclusionTags\":{\"pkeboozflyac\":\"omraw\",\"lm\":\"gaedaoiq\"}}},\"dataSensitivityDiscovery\":{\"enabled\":false,\"cloudRoleArn\":\"abdxfkuzb\"},\"databasesDspm\":{\"enabled\":true,\"cloudRoleArn\":\"oyvhtuqbpeln\"},\"ciem\":{\"ciemDiscovery\":{\"cloudRoleArn\":\"cgagdvcdqhftzbp\"},\"ciemOidc\":{\"cloudRoleArn\":\"ofdf\",\"azureActiveDirectoryAppName\":\"tncwmhjobzrfpr\"}},\"mdcContainersImageAssessment\":{\"enabled\":true,\"cloudRoleArn\":\"h\"},\"mdcContainersAgentlessDiscoveryK8s\":{\"enabled\":true,\"cloudRoleArn\":\"bzwgwhgkgsoau\"},\"description\":\"rssat\"}")
            .toObject(DefenderCspmAwsOffering.class);
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("omraw", model.vmScanners().configuration().exclusionTags().get("pkeboozflyac"));
        Assertions.assertEquals("cbygvthrmx", model.vmScanners().cloudRoleArn());
        Assertions.assertEquals(false, model.dataSensitivityDiscovery().enabled());
        Assertions.assertEquals("abdxfkuzb", model.dataSensitivityDiscovery().cloudRoleArn());
        Assertions.assertEquals(true, model.databasesDspm().enabled());
        Assertions.assertEquals("oyvhtuqbpeln", model.databasesDspm().cloudRoleArn());
        Assertions.assertEquals("cgagdvcdqhftzbp", model.ciem().ciemDiscovery().cloudRoleArn());
        Assertions.assertEquals("ofdf", model.ciem().ciemOidc().cloudRoleArn());
        Assertions.assertEquals("tncwmhjobzrfpr", model.ciem().ciemOidc().azureActiveDirectoryAppName());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("h", model.mdcContainersImageAssessment().cloudRoleArn());
        Assertions.assertEquals(true, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("bzwgwhgkgsoau", model.mdcContainersAgentlessDiscoveryK8S().cloudRoleArn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderCspmAwsOffering model = new DefenderCspmAwsOffering()
            .withVmScanners(new DefenderCspmAwsOfferingVmScanners().withEnabled(false)
                .withConfiguration(new VmScannersBaseConfiguration().withScanningMode(ScanningMode.DEFAULT)
                    .withExclusionTags(mapOf("pkeboozflyac", "omraw", "lm", "gaedaoiq")))
                .withCloudRoleArn("cbygvthrmx"))
            .withDataSensitivityDiscovery(
                new DefenderCspmAwsOfferingDataSensitivityDiscovery().withEnabled(false).withCloudRoleArn("abdxfkuzb"))
            .withDatabasesDspm(
                new DefenderCspmAwsOfferingDatabasesDspm().withEnabled(true).withCloudRoleArn("oyvhtuqbpeln"))
            .withCiem(new DefenderCspmAwsOfferingCiem()
                .withCiemDiscovery(new DefenderCspmAwsOfferingCiemDiscovery().withCloudRoleArn("cgagdvcdqhftzbp"))
                .withCiemOidc(new DefenderCspmAwsOfferingCiemOidc().withCloudRoleArn("ofdf")
                    .withAzureActiveDirectoryAppName("tncwmhjobzrfpr")))
            .withMdcContainersImageAssessment(
                new DefenderCspmAwsOfferingMdcContainersImageAssessment().withEnabled(true).withCloudRoleArn("h"))
            .withMdcContainersAgentlessDiscoveryK8S(
                new DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8S().withEnabled(true)
                    .withCloudRoleArn("bzwgwhgkgsoau"));
        model = BinaryData.fromObject(model).toObject(DefenderCspmAwsOffering.class);
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("omraw", model.vmScanners().configuration().exclusionTags().get("pkeboozflyac"));
        Assertions.assertEquals("cbygvthrmx", model.vmScanners().cloudRoleArn());
        Assertions.assertEquals(false, model.dataSensitivityDiscovery().enabled());
        Assertions.assertEquals("abdxfkuzb", model.dataSensitivityDiscovery().cloudRoleArn());
        Assertions.assertEquals(true, model.databasesDspm().enabled());
        Assertions.assertEquals("oyvhtuqbpeln", model.databasesDspm().cloudRoleArn());
        Assertions.assertEquals("cgagdvcdqhftzbp", model.ciem().ciemDiscovery().cloudRoleArn());
        Assertions.assertEquals("ofdf", model.ciem().ciemOidc().cloudRoleArn());
        Assertions.assertEquals("tncwmhjobzrfpr", model.ciem().ciemOidc().azureActiveDirectoryAppName());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("h", model.mdcContainersImageAssessment().cloudRoleArn());
        Assertions.assertEquals(true, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("bzwgwhgkgsoau", model.mdcContainersAgentlessDiscoveryK8S().cloudRoleArn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
