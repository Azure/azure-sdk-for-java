// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOffering;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingCiem;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingCiemDiscovery;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingCiemOidc;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingDataSensitivityDiscovery;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingDatabasesDspm;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8S;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingMdcContainersImageAssessment;
import com.azure.resourcemanager.security.models.DefenderCspmAwsOfferingVmScanners;
import com.azure.resourcemanager.security.models.ScanningMode;
import com.azure.resourcemanager.security.models.VmScannersBaseConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderCspmAwsOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderCspmAwsOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderCspmAws\",\"vmScanners\":{\"cloudRoleArn\":\"ylztp\",\"enabled\":false,\"configuration\":{\"scanningMode\":\"Default\",\"exclusionTags\":{\"fvezefk\":\"k\",\"zcntogffjwajnrtw\":\"kqtwqlepjjzkcasf\"}}},\"dataSensitivityDiscovery\":{\"enabled\":true,\"cloudRoleArn\":\"ifmxawo\"},\"databasesDspm\":{\"enabled\":false,\"cloudRoleArn\":\"nhrkmjqncfvdsc\"},\"ciem\":{\"ciemDiscovery\":{\"cloudRoleArn\":\"vwfnqqwypvn\"},\"ciemOidc\":{\"cloudRoleArn\":\"b\",\"azureActiveDirectoryAppName\":\"dtggrssg\"}},\"mdcContainersImageAssessment\":{\"enabled\":true,\"cloudRoleArn\":\"injmuymve\"},\"mdcContainersAgentlessDiscoveryK8s\":{\"enabled\":true,\"cloudRoleArn\":\"cbgmusaictd\"},\"description\":\"nkzzohnrddclz\"}")
            .toObject(DefenderCspmAwsOffering.class);
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("k", model.vmScanners().configuration().exclusionTags().get("fvezefk"));
        Assertions.assertEquals("ylztp", model.vmScanners().cloudRoleArn());
        Assertions.assertEquals(true, model.dataSensitivityDiscovery().enabled());
        Assertions.assertEquals("ifmxawo", model.dataSensitivityDiscovery().cloudRoleArn());
        Assertions.assertEquals(false, model.databasesDspm().enabled());
        Assertions.assertEquals("nhrkmjqncfvdsc", model.databasesDspm().cloudRoleArn());
        Assertions.assertEquals("vwfnqqwypvn", model.ciem().ciemDiscovery().cloudRoleArn());
        Assertions.assertEquals("b", model.ciem().ciemOidc().cloudRoleArn());
        Assertions.assertEquals("dtggrssg", model.ciem().ciemOidc().azureActiveDirectoryAppName());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("injmuymve", model.mdcContainersImageAssessment().cloudRoleArn());
        Assertions.assertEquals(true, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("cbgmusaictd", model.mdcContainersAgentlessDiscoveryK8S().cloudRoleArn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderCspmAwsOffering model = new DefenderCspmAwsOffering()
            .withVmScanners(new DefenderCspmAwsOfferingVmScanners().withEnabled(false)
                .withConfiguration(new VmScannersBaseConfiguration().withScanningMode(ScanningMode.DEFAULT)
                    .withExclusionTags(mapOf("fvezefk", "k", "zcntogffjwajnrtw", "kqtwqlepjjzkcasf")))
                .withCloudRoleArn("ylztp"))
            .withDataSensitivityDiscovery(
                new DefenderCspmAwsOfferingDataSensitivityDiscovery().withEnabled(true).withCloudRoleArn("ifmxawo"))
            .withDatabasesDspm(
                new DefenderCspmAwsOfferingDatabasesDspm().withEnabled(false).withCloudRoleArn("nhrkmjqncfvdsc"))
            .withCiem(new DefenderCspmAwsOfferingCiem()
                .withCiemDiscovery(new DefenderCspmAwsOfferingCiemDiscovery().withCloudRoleArn("vwfnqqwypvn"))
                .withCiemOidc(new DefenderCspmAwsOfferingCiemOidc().withCloudRoleArn("b")
                    .withAzureActiveDirectoryAppName("dtggrssg")))
            .withMdcContainersImageAssessment(
                new DefenderCspmAwsOfferingMdcContainersImageAssessment().withEnabled(true)
                    .withCloudRoleArn("injmuymve"))
            .withMdcContainersAgentlessDiscoveryK8S(
                new DefenderCspmAwsOfferingMdcContainersAgentlessDiscoveryK8S().withEnabled(true)
                    .withCloudRoleArn("cbgmusaictd"));
        model = BinaryData.fromObject(model).toObject(DefenderCspmAwsOffering.class);
        Assertions.assertEquals(false, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("k", model.vmScanners().configuration().exclusionTags().get("fvezefk"));
        Assertions.assertEquals("ylztp", model.vmScanners().cloudRoleArn());
        Assertions.assertEquals(true, model.dataSensitivityDiscovery().enabled());
        Assertions.assertEquals("ifmxawo", model.dataSensitivityDiscovery().cloudRoleArn());
        Assertions.assertEquals(false, model.databasesDspm().enabled());
        Assertions.assertEquals("nhrkmjqncfvdsc", model.databasesDspm().cloudRoleArn());
        Assertions.assertEquals("vwfnqqwypvn", model.ciem().ciemDiscovery().cloudRoleArn());
        Assertions.assertEquals("b", model.ciem().ciemOidc().cloudRoleArn());
        Assertions.assertEquals("dtggrssg", model.ciem().ciemOidc().azureActiveDirectoryAppName());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("injmuymve", model.mdcContainersImageAssessment().cloudRoleArn());
        Assertions.assertEquals(true, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("cbgmusaictd", model.mdcContainersAgentlessDiscoveryK8S().cloudRoleArn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
