// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecuritySolutionModelInner;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.AdditionalWorkspacesProperties;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationConfigurationProperties;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import com.azure.resourcemanager.security.models.UserDefinedResourcesProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecuritySolutionModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecuritySolutionModelInner model =
            BinaryData
                .fromString(
                    "{\"location\":\"czvyifq\",\"properties\":{\"workspace\":\"dvjsllrmvvdf\",\"displayName\":\"atkpnp\",\"status\":\"Disabled\",\"export\":[\"RawEvents\",\"RawEvents\",\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\"],\"iotHubs\":[\"iqzbq\",\"vsovmyokac\",\"pkwlhz\",\"obpxjmflbvvn\"],\"userDefinedResources\":{\"query\":\"rkcciwwzjuqk\",\"querySubscriptions\":[\"sa\"]},\"autoDiscoveredResources\":[\"ku\",\"foskghsauuimj\",\"vxieduugidyj\",\"rfbyaosvexcso\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_PermissiveFirewallPolicy\",\"name\":\"ocohslkevleg\",\"status\":\"Disabled\"},{\"recommendationType\":\"IoT_PrivilegedDockerOptions\",\"name\":\"u\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_PermissiveOutputFirewallRules\",\"name\":\"faxkffeii\",\"status\":\"Disabled\"}],\"unmaskedIpLoggingStatus\":\"Disabled\",\"additionalWorkspaces\":[{\"workspace\":\"yvshxmz\",\"type\":\"Sentinel\",\"dataTypes\":[]}]},\"tags\":{\"pydptko\":\"igrxwburvjxxjn\"},\"id\":\"nkoukn\",\"name\":\"udwtiukbl\",\"type\":\"ngkpocipazy\"}")
                .toObject(IoTSecuritySolutionModelInner.class);
        Assertions.assertEquals("czvyifq", model.location());
        Assertions.assertEquals("igrxwburvjxxjn", model.tags().get("pydptko"));
        Assertions.assertEquals("dvjsllrmvvdf", model.workspace());
        Assertions.assertEquals("atkpnp", model.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, model.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.disabledDataSources().get(0));
        Assertions.assertEquals("iqzbq", model.iotHubs().get(0));
        Assertions.assertEquals("rkcciwwzjuqk", model.userDefinedResources().query());
        Assertions.assertEquals("sa", model.userDefinedResources().querySubscriptions().get(0));
        Assertions
            .assertEquals(
                RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY,
                model.recommendationsConfiguration().get(0).recommendationType());
        Assertions
            .assertEquals(RecommendationConfigStatus.DISABLED, model.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.DISABLED, model.unmaskedIpLoggingStatus());
        Assertions.assertEquals("yvshxmz", model.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, model.additionalWorkspaces().get(0).type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecuritySolutionModelInner model =
            new IoTSecuritySolutionModelInner()
                .withLocation("czvyifq")
                .withTags(mapOf("pydptko", "igrxwburvjxxjn"))
                .withWorkspace("dvjsllrmvvdf")
                .withDisplayName("atkpnp")
                .withStatus(SecuritySolutionStatus.DISABLED)
                .withExport(Arrays.asList(ExportData.RAW_EVENTS, ExportData.RAW_EVENTS, ExportData.RAW_EVENTS))
                .withDisabledDataSources(Arrays.asList(DataSource.TWIN_DATA, DataSource.TWIN_DATA))
                .withIotHubs(Arrays.asList("iqzbq", "vsovmyokac", "pkwlhz", "obpxjmflbvvn"))
                .withUserDefinedResources(
                    new UserDefinedResourcesProperties()
                        .withQuery("rkcciwwzjuqk")
                        .withQuerySubscriptions(Arrays.asList("sa")))
                .withRecommendationsConfiguration(
                    Arrays
                        .asList(
                            new RecommendationConfigurationProperties()
                                .withRecommendationType(RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY)
                                .withStatus(RecommendationConfigStatus.DISABLED),
                            new RecommendationConfigurationProperties()
                                .withRecommendationType(RecommendationType.IO_T_PRIVILEGED_DOCKER_OPTIONS)
                                .withStatus(RecommendationConfigStatus.ENABLED),
                            new RecommendationConfigurationProperties()
                                .withRecommendationType(RecommendationType.IO_T_PERMISSIVE_OUTPUT_FIREWALL_RULES)
                                .withStatus(RecommendationConfigStatus.DISABLED)))
                .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.DISABLED)
                .withAdditionalWorkspaces(
                    Arrays
                        .asList(
                            new AdditionalWorkspacesProperties()
                                .withWorkspace("yvshxmz")
                                .withType(AdditionalWorkspaceType.SENTINEL)
                                .withDataTypes(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(IoTSecuritySolutionModelInner.class);
        Assertions.assertEquals("czvyifq", model.location());
        Assertions.assertEquals("igrxwburvjxxjn", model.tags().get("pydptko"));
        Assertions.assertEquals("dvjsllrmvvdf", model.workspace());
        Assertions.assertEquals("atkpnp", model.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, model.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.disabledDataSources().get(0));
        Assertions.assertEquals("iqzbq", model.iotHubs().get(0));
        Assertions.assertEquals("rkcciwwzjuqk", model.userDefinedResources().query());
        Assertions.assertEquals("sa", model.userDefinedResources().querySubscriptions().get(0));
        Assertions
            .assertEquals(
                RecommendationType.IO_T_PERMISSIVE_FIREWALL_POLICY,
                model.recommendationsConfiguration().get(0).recommendationType());
        Assertions
            .assertEquals(RecommendationConfigStatus.DISABLED, model.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.DISABLED, model.unmaskedIpLoggingStatus());
        Assertions.assertEquals("yvshxmz", model.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, model.additionalWorkspaces().get(0).type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
