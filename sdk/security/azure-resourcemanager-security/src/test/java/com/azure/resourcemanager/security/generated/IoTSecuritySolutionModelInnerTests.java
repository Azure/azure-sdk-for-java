// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.IoTSecuritySolutionModelInner;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceDataType;
import com.azure.resourcemanager.security.models.AdditionalWorkspacesProperties;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationConfigurationProperties;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import com.azure.resourcemanager.security.models.UserDefinedResourcesProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IoTSecuritySolutionModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IoTSecuritySolutionModelInner model = BinaryData.fromString(
            "{\"location\":\"klelssxb\",\"properties\":{\"workspace\":\"sxz\",\"displayName\":\"jks\",\"status\":\"Disabled\",\"export\":[\"RawEvents\",\"RawEvents\",\"RawEvents\",\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\",\"TwinData\"],\"iotHubs\":[\"doewbidyvt\",\"owx\",\"gpiudeug\"],\"userDefinedResources\":{\"query\":\"xzecpaxwkufykhvu\",\"querySubscriptions\":[\"epmrut\",\"nabaobnslujd\"]},\"autoDiscoveredResources\":[\"ymkmvguihyw\",\"rtspphkixkykxds\",\"j\",\"emmucfxh\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_IPFilter_DenyAll\",\"name\":\"rmymyincqlhr\",\"status\":\"Disabled\"},{\"recommendationType\":\"IoT_PermissiveOutputFirewallRules\",\"name\":\"lmiiiovg\",\"status\":\"Enabled\"}],\"unmaskedIpLoggingStatus\":\"Disabled\",\"additionalWorkspaces\":[{\"workspace\":\"qkctotiowlxte\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"RawEvents\",\"Alerts\",\"RawEvents\"]},{\"workspace\":\"ukranblw\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"Alerts\"]},{\"workspace\":\"zgygqwahoiulwgni\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"RawEvents\",\"Alerts\",\"Alerts\"]},{\"workspace\":\"z\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"RawEvents\",\"Alerts\"]}]},\"tags\":{\"mifoxxkub\":\"jpmcub\",\"gvgovpbbttefjo\":\"phavpmhbrb\"},\"id\":\"nssqyzqed\",\"name\":\"kdfrdbiqmrjgeihf\",\"type\":\"lg\"}")
            .toObject(IoTSecuritySolutionModelInner.class);
        Assertions.assertEquals("klelssxb", model.location());
        Assertions.assertEquals("jpmcub", model.tags().get("mifoxxkub"));
        Assertions.assertEquals("sxz", model.workspace());
        Assertions.assertEquals("jks", model.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, model.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.disabledDataSources().get(0));
        Assertions.assertEquals("doewbidyvt", model.iotHubs().get(0));
        Assertions.assertEquals("xzecpaxwkufykhvu", model.userDefinedResources().query());
        Assertions.assertEquals("epmrut", model.userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_IPFILTER_DENY_ALL,
            model.recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.DISABLED,
            model.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.DISABLED, model.unmaskedIpLoggingStatus());
        Assertions.assertEquals("qkctotiowlxte", model.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, model.additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.RAW_EVENTS,
            model.additionalWorkspaces().get(0).dataTypes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IoTSecuritySolutionModelInner model = new IoTSecuritySolutionModelInner().withLocation("klelssxb")
            .withTags(mapOf("mifoxxkub", "jpmcub", "gvgovpbbttefjo", "phavpmhbrb"))
            .withWorkspace("sxz")
            .withDisplayName("jks")
            .withStatus(SecuritySolutionStatus.DISABLED)
            .withExport(Arrays.asList(ExportData.RAW_EVENTS, ExportData.RAW_EVENTS, ExportData.RAW_EVENTS,
                ExportData.RAW_EVENTS))
            .withDisabledDataSources(Arrays.asList(DataSource.TWIN_DATA, DataSource.TWIN_DATA, DataSource.TWIN_DATA))
            .withIotHubs(Arrays.asList("doewbidyvt", "owx", "gpiudeug"))
            .withUserDefinedResources(new UserDefinedResourcesProperties().withQuery("xzecpaxwkufykhvu")
                .withQuerySubscriptions(Arrays.asList("epmrut", "nabaobnslujd")))
            .withRecommendationsConfiguration(Arrays.asList(
                new RecommendationConfigurationProperties()
                    .withRecommendationType(RecommendationType.IO_T_IPFILTER_DENY_ALL)
                    .withStatus(RecommendationConfigStatus.DISABLED),
                new RecommendationConfigurationProperties()
                    .withRecommendationType(RecommendationType.IO_T_PERMISSIVE_OUTPUT_FIREWALL_RULES)
                    .withStatus(RecommendationConfigStatus.ENABLED)))
            .withUnmaskedIpLoggingStatus(UnmaskedIpLoggingStatus.DISABLED)
            .withAdditionalWorkspaces(
                Arrays.asList(
                    new AdditionalWorkspacesProperties().withWorkspace("qkctotiowlxte")
                        .withType(AdditionalWorkspaceType.SENTINEL)
                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                            AdditionalWorkspaceDataType.RAW_EVENTS, AdditionalWorkspaceDataType.ALERTS,
                            AdditionalWorkspaceDataType.RAW_EVENTS)),
                    new AdditionalWorkspacesProperties().withWorkspace("ukranblw")
                        .withType(AdditionalWorkspaceType.SENTINEL)
                        .withDataTypes(
                            Arrays.asList(AdditionalWorkspaceDataType.ALERTS, AdditionalWorkspaceDataType.ALERTS)),
                    new AdditionalWorkspacesProperties().withWorkspace("zgygqwahoiulwgni")
                        .withType(AdditionalWorkspaceType.SENTINEL)
                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                            AdditionalWorkspaceDataType.RAW_EVENTS, AdditionalWorkspaceDataType.ALERTS,
                            AdditionalWorkspaceDataType.ALERTS)),
                    new AdditionalWorkspacesProperties().withWorkspace("z")
                        .withType(AdditionalWorkspaceType.SENTINEL)
                        .withDataTypes(Arrays.asList(AdditionalWorkspaceDataType.RAW_EVENTS,
                            AdditionalWorkspaceDataType.RAW_EVENTS, AdditionalWorkspaceDataType.ALERTS))));
        model = BinaryData.fromObject(model).toObject(IoTSecuritySolutionModelInner.class);
        Assertions.assertEquals("klelssxb", model.location());
        Assertions.assertEquals("jpmcub", model.tags().get("mifoxxkub"));
        Assertions.assertEquals("sxz", model.workspace());
        Assertions.assertEquals("jks", model.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, model.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, model.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, model.disabledDataSources().get(0));
        Assertions.assertEquals("doewbidyvt", model.iotHubs().get(0));
        Assertions.assertEquals("xzecpaxwkufykhvu", model.userDefinedResources().query());
        Assertions.assertEquals("epmrut", model.userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_IPFILTER_DENY_ALL,
            model.recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.DISABLED,
            model.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.DISABLED, model.unmaskedIpLoggingStatus());
        Assertions.assertEquals("qkctotiowlxte", model.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, model.additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.RAW_EVENTS,
            model.additionalWorkspaces().get(0).dataTypes().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
