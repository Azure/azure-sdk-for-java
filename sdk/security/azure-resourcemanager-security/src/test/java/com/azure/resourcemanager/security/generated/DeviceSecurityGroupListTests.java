// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.DeviceSecurityGroupInner;
import com.azure.resourcemanager.security.models.AllowlistCustomAlertRule;
import com.azure.resourcemanager.security.models.DenylistCustomAlertRule;
import com.azure.resourcemanager.security.models.DeviceSecurityGroupList;
import com.azure.resourcemanager.security.models.ThresholdCustomAlertRule;
import com.azure.resourcemanager.security.models.TimeWindowCustomAlertRule;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DeviceSecurityGroupListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeviceSecurityGroupList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"thresholdRules\":[{\"ruleType\":\"ThresholdCustomAlertRule\",\"minThreshold\":1718523407,\"maxThreshold\":1982857391,\"displayName\":\"pafolp\",\"description\":\"wamxqzrag\",\"isEnabled\":true}],\"timeWindowRules\":[{\"ruleType\":\"TimeWindowCustomAlertRule\",\"timeWindowSize\":\"PT173H10M19S\",\"minThreshold\":36085311,\"maxThreshold\":1755800422,\"displayName\":\"ulajvlejchc\",\"description\":\"lzk\",\"isEnabled\":false},{\"ruleType\":\"TimeWindowCustomAlertRule\",\"timeWindowSize\":\"PT97H58S\",\"minThreshold\":667275674,\"maxThreshold\":1189039850,\"displayName\":\"rupdwvnphcnzq\",\"description\":\"jhmqrhvthla\",\"isEnabled\":true}],\"allowlistRules\":[{\"ruleType\":\"AllowlistCustomAlertRule\",\"allowlistValues\":[\"smlzzhzdtxetlgy\",\"lhqvlnnpxybafi\"],\"valueType\":\"String\",\"displayName\":\"arbgjekgl\",\"description\":\"byu\",\"isEnabled\":true}],\"denylistRules\":[{\"ruleType\":\"DenylistCustomAlertRule\",\"denylistValues\":[\"wvmzegjonfhjir\",\"gdn\"],\"valueType\":\"IpCidr\",\"displayName\":\"fkspzhzmtksjci\",\"description\":\"igsxcdgljplk\",\"isEnabled\":false},{\"ruleType\":\"DenylistCustomAlertRule\",\"denylistValues\":[\"chtomflrytsw\"],\"valueType\":\"String\",\"displayName\":\"dgycxnmskwhqjjy\",\"description\":\"urlpshh\",\"isEnabled\":true}]},\"id\":\"pedwqsl\",\"name\":\"rhmpqvwwsk\",\"type\":\"ndcbrwi\"}],\"nextLink\":\"vqejosovy\"}")
            .toObject(DeviceSecurityGroupList.class);
        Assertions.assertEquals(true, model.value().get(0).thresholdRules().get(0).isEnabled());
        Assertions.assertEquals(1718523407, model.value().get(0).thresholdRules().get(0).minThreshold());
        Assertions.assertEquals(1982857391, model.value().get(0).thresholdRules().get(0).maxThreshold());
        Assertions.assertEquals(false, model.value().get(0).timeWindowRules().get(0).isEnabled());
        Assertions.assertEquals(36085311, model.value().get(0).timeWindowRules().get(0).minThreshold());
        Assertions.assertEquals(1755800422, model.value().get(0).timeWindowRules().get(0).maxThreshold());
        Assertions.assertEquals(Duration.parse("PT173H10M19S"),
            model.value().get(0).timeWindowRules().get(0).timeWindowSize());
        Assertions.assertEquals(true, model.value().get(0).allowlistRules().get(0).isEnabled());
        Assertions.assertEquals("smlzzhzdtxetlgy",
            model.value().get(0).allowlistRules().get(0).allowlistValues().get(0));
        Assertions.assertEquals(false, model.value().get(0).denylistRules().get(0).isEnabled());
        Assertions.assertEquals("wvmzegjonfhjir", model.value().get(0).denylistRules().get(0).denylistValues().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeviceSecurityGroupList model
            = new DeviceSecurityGroupList().withValue(Arrays.asList(new DeviceSecurityGroupInner()
                .withThresholdRules(Arrays.asList(new ThresholdCustomAlertRule().withIsEnabled(true)
                    .withMinThreshold(1718523407)
                    .withMaxThreshold(1982857391)))
                .withTimeWindowRules(Arrays.asList(
                    new TimeWindowCustomAlertRule().withIsEnabled(false)
                        .withMinThreshold(36085311)
                        .withMaxThreshold(1755800422)
                        .withTimeWindowSize(Duration.parse("PT173H10M19S")),
                    new TimeWindowCustomAlertRule().withIsEnabled(true)
                        .withMinThreshold(667275674)
                        .withMaxThreshold(1189039850)
                        .withTimeWindowSize(Duration.parse("PT97H58S"))))
                .withAllowlistRules(Arrays.asList(new AllowlistCustomAlertRule().withIsEnabled(true)
                    .withAllowlistValues(Arrays.asList("smlzzhzdtxetlgy", "lhqvlnnpxybafi"))))
                .withDenylistRules(Arrays.asList(
                    new DenylistCustomAlertRule().withIsEnabled(false)
                        .withDenylistValues(Arrays.asList("wvmzegjonfhjir", "gdn")),
                    new DenylistCustomAlertRule().withIsEnabled(true)
                        .withDenylistValues(Arrays.asList("chtomflrytsw"))))));
        model = BinaryData.fromObject(model).toObject(DeviceSecurityGroupList.class);
        Assertions.assertEquals(true, model.value().get(0).thresholdRules().get(0).isEnabled());
        Assertions.assertEquals(1718523407, model.value().get(0).thresholdRules().get(0).minThreshold());
        Assertions.assertEquals(1982857391, model.value().get(0).thresholdRules().get(0).maxThreshold());
        Assertions.assertEquals(false, model.value().get(0).timeWindowRules().get(0).isEnabled());
        Assertions.assertEquals(36085311, model.value().get(0).timeWindowRules().get(0).minThreshold());
        Assertions.assertEquals(1755800422, model.value().get(0).timeWindowRules().get(0).maxThreshold());
        Assertions.assertEquals(Duration.parse("PT173H10M19S"),
            model.value().get(0).timeWindowRules().get(0).timeWindowSize());
        Assertions.assertEquals(true, model.value().get(0).allowlistRules().get(0).isEnabled());
        Assertions.assertEquals("smlzzhzdtxetlgy",
            model.value().get(0).allowlistRules().get(0).allowlistValues().get(0));
        Assertions.assertEquals(false, model.value().get(0).denylistRules().get(0).isEnabled());
        Assertions.assertEquals("wvmzegjonfhjir", model.value().get(0).denylistRules().get(0).denylistValues().get(0));
    }
}
