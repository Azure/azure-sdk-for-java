// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesListByResourceGroupAndRegionMockTests {
    @Test
    public void testListByResourceGroupAndRegion() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"virtualMachines\":[{\"id\":\"ldjvzmxy\",\"ports\":[{\"number\":464456721,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"stjvcszbdb\"}],\"publicIpAddress\":\"bozltyola\"},{\"id\":\"bibtkeiecupmwx\",\"ports\":[{\"number\":2052471057,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"rlnrpeylfii\"},{\"number\":1758187097,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"dgiql\"},{\"number\":265781727,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"xwwwvunknsgvxhx\"}],\"publicIpAddress\":\"eatr\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"fjvifbm\",\"ports\":[]},{\"id\":\"j\",\"ports\":[]},{\"id\":\"ehqyoytrcoufk\",\"ports\":[]},{\"id\":\"mbhukdfpknvk\",\"ports\":[]}],\"startTimeUtc\":\"2021-04-02T22:04:58Z\",\"requestor\":\"o\",\"justification\":\"ezchmeodhzjlrknc\"},{\"virtualMachines\":[{\"id\":\"fxmuqeq\",\"ports\":[]},{\"id\":\"wqphfvsftsst\",\"ports\":[]},{\"id\":\"lpxcachdt\",\"ports\":[]}],\"startTimeUtc\":\"2021-07-19T04:42:20Z\",\"requestor\":\"gfctuu\",\"justification\":\"wqrzvuxnxauohsh\"},{\"virtualMachines\":[{\"id\":\"ltdbvmjdhy\",\"ports\":[]}],\"startTimeUtc\":\"2021-08-24T05:23:23Z\",\"requestor\":\"gocbdxvr\",\"justification\":\"ptbczsuzgr\"},{\"virtualMachines\":[{\"id\":\"kekytkzvtvmaatv\",\"ports\":[]},{\"id\":\"gpycei\",\"ports\":[]}],\"startTimeUtc\":\"2021-10-02T20:00:09Z\",\"requestor\":\"arhbdx\",\"justification\":\"yplskhwfjud\"}],\"provisioningState\":\"bqpsezsggd\"},\"kind\":\"tfcbrtsrdplqdyza\",\"location\":\"asfzrguzliyvsb\",\"id\":\"sinva\",\"name\":\"djuljgxotuda\",\"type\":\"kiyaosthulzugi\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JitNetworkAccessPolicy> response = manager.jitNetworkAccessPolicies()
            .listByResourceGroupAndRegion("ibweua", "gtxlzncoqxtvytzq", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tfcbrtsrdplqdyza", response.iterator().next().kind());
        Assertions.assertEquals("ldjvzmxy", response.iterator().next().virtualMachines().get(0).id());
        Assertions.assertEquals(464456721, response.iterator().next().virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.ASTERISK,
            response.iterator().next().virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("stjvcszbdb",
            response.iterator().next().virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("bozltyola", response.iterator().next().virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("fjvifbm", response.iterator().next().requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T22:04:58Z"),
            response.iterator().next().requests().get(0).startTimeUtc());
        Assertions.assertEquals("o", response.iterator().next().requests().get(0).requestor());
        Assertions.assertEquals("ezchmeodhzjlrknc", response.iterator().next().requests().get(0).justification());
    }
}
