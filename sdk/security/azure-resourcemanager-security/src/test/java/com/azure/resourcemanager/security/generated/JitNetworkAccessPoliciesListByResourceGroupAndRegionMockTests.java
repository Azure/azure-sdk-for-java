// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicy;
import com.azure.resourcemanager.security.models.Protocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class JitNetworkAccessPoliciesListByResourceGroupAndRegionMockTests {
    @Test
    public void testListByResourceGroupAndRegion() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"virtualMachines\":[{\"id\":\"mecsmxfzyn\",\"ports\":[{\"number\":49001949,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"yqkkpgwgss\"}],\"publicIpAddress\":\"uup\"},{\"id\":\"rnbnlqyvdsq\",\"ports\":[{\"number\":1847755984,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"dz\"}],\"publicIpAddress\":\"irzyudrq\"},{\"id\":\"xrxhxmlfouqp\",\"ports\":[{\"number\":828905112,\"protocol\":\"UDP\",\"maxRequestAccessDuration\":\"n\"},{\"number\":1007101946,\"protocol\":\"TCP\",\"maxRequestAccessDuration\":\"mrrhyjxcqcacz\"},{\"number\":831558414,\"protocol\":\"*\",\"maxRequestAccessDuration\":\"aeztt\"}],\"publicIpAddress\":\"qyfydql\"}],\"requests\":[{\"virtualMachines\":[{\"id\":\"gyfybdsvkllrzhsh\",\"ports\":[]},{\"id\":\"kbchcazkgdjthprg\",\"ports\":[]}],\"startTimeUtc\":\"2021-05-03T23:24:47Z\",\"requestor\":\"hfz\",\"justification\":\"rurmrf\"},{\"virtualMachines\":[{\"id\":\"qjcni\",\"ports\":[]},{\"id\":\"zq\",\"ports\":[]},{\"id\":\"sddcuqddlda\",\"ports\":[]}],\"startTimeUtc\":\"2021-04-19T22:17:32Z\",\"requestor\":\"vfztq\",\"justification\":\"qjojesxjht\"},{\"virtualMachines\":[{\"id\":\"zwqocygoyineuaxp\",\"ports\":[]}],\"startTimeUtc\":\"2021-06-22T19:43:50Z\",\"requestor\":\"zitrguzlwe\",\"justification\":\"xfoa\"},{\"virtualMachines\":[{\"id\":\"dypzlxlmndhgwhlb\",\"ports\":[]},{\"id\":\"juajzqxavmitnwl\",\"ports\":[]}],\"startTimeUtc\":\"2021-10-29T11:16:34Z\",\"requestor\":\"bujysvdtyyddbhat\",\"justification\":\"btpgnq\"}],\"provisioningState\":\"tn\"},\"kind\":\"jewihcigaahm\",\"location\":\"spkdnx\",\"id\":\"xzxtertn\",\"name\":\"rrwsci\",\"type\":\"lhdwi\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<JitNetworkAccessPolicy> response = manager.jitNetworkAccessPolicies()
            .listByResourceGroupAndRegion("wenbqvpr", "wvoqatdjkal", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jewihcigaahm", response.iterator().next().kind());
        Assertions.assertEquals("mecsmxfzyn", response.iterator().next().virtualMachines().get(0).id());
        Assertions.assertEquals(49001949, response.iterator().next().virtualMachines().get(0).ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP,
            response.iterator().next().virtualMachines().get(0).ports().get(0).protocol());
        Assertions.assertEquals("yqkkpgwgss",
            response.iterator().next().virtualMachines().get(0).ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("uup", response.iterator().next().virtualMachines().get(0).publicIpAddress());
        Assertions.assertEquals("gyfybdsvkllrzhsh",
            response.iterator().next().requests().get(0).virtualMachines().get(0).id());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-03T23:24:47Z"),
            response.iterator().next().requests().get(0).startTimeUtc());
        Assertions.assertEquals("hfz", response.iterator().next().requests().get(0).requestor());
        Assertions.assertEquals("rurmrf", response.iterator().next().requests().get(0).justification());
    }
}
