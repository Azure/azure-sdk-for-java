// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.SecurityConnectorInner;
import com.azure.resourcemanager.security.models.CloudName;
import com.azure.resourcemanager.security.models.SecurityConnectorsList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecurityConnectorsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecurityConnectorsList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"hierarchyIdentifier\":\"p\",\"hierarchyIdentifierTrialEndDate\":\"2021-02-22T22:51:57Z\",\"environmentName\":\"GCP\",\"offerings\":[]},\"location\":\"dzsylollgtrczz\",\"tags\":{\"p\":\"xzji\",\"defxrdc\":\"uaurkihcir\",\"nurnnq\":\"xnbkkj\"},\"id\":\"nqbpi\",\"name\":\"xqltgrd\",\"type\":\"gypxrxvbfihwuhvc\"}],\"nextLink\":\"fsrb\"}")
                .toObject(SecurityConnectorsList.class);
        Assertions.assertEquals("dzsylollgtrczz", model.value().get(0).location());
        Assertions.assertEquals("xzji", model.value().get(0).tags().get("p"));
        Assertions.assertEquals("p", model.value().get(0).hierarchyIdentifier());
        Assertions.assertEquals(CloudName.GCP, model.value().get(0).environmentName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecurityConnectorsList model =
            new SecurityConnectorsList()
                .withValue(
                    Arrays
                        .asList(
                            new SecurityConnectorInner()
                                .withLocation("dzsylollgtrczz")
                                .withTags(mapOf("p", "xzji", "defxrdc", "uaurkihcir", "nurnnq", "xnbkkj"))
                                .withHierarchyIdentifier("p")
                                .withEnvironmentName(CloudName.GCP)
                                .withOfferings(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(SecurityConnectorsList.class);
        Assertions.assertEquals("dzsylollgtrczz", model.value().get(0).location());
        Assertions.assertEquals("xzji", model.value().get(0).tags().get("p"));
        Assertions.assertEquals("p", model.value().get(0).hierarchyIdentifier());
        Assertions.assertEquals(CloudName.GCP, model.value().get(0).environmentName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
