// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsOrg;
import com.azure.resourcemanager.security.models.AzureDevOpsOrgProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.DevOpsProvisioningState;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureDevOpsOrgsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningStatusMessage\":\"zllvna\",\"provisioningStatusUpdateTimeUtc\":\"2021-01-27T21:10:29Z\",\"provisioningState\":\"Succeeded\",\"onboardingState\":\"OnboardedByOtherConnector\",\"actionableRemediation\":{\"state\":\"None\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"akybepsihz\",\"category\":\"Dependencies\"},{\"minimumSeverityLevel\":\"ymppglxjsfgb\",\"category\":\"Dependencies\"}],\"branchConfiguration\":{\"branchNames\":[\"lycxlubruk\",\"qbuo\",\"rbdkgqdmvvvj\",\"fjjfexuvsveam\"],\"annotateDefaultBranch\":\"Enabled\"},\"inheritFromParentState\":\"Enabled\"}},\"id\":\"uvhxiohglmufzuuy\",\"name\":\"zhaeemty\",\"type\":\"sdpxtsdy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsOrg response
            = manager.azureDevOpsOrgs()
                .define("adohsj")
                .withExistingSecurityConnector("tacvs", "nssxylsui")
                .withProperties(new AzureDevOpsOrgProperties()
                    .withProvisioningState(DevOpsProvisioningState.DELETION_SUCCESS)
                    .withOnboardingState(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR)
                    .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.NONE)
                        .withCategoryConfigurations(
                            Arrays.asList(new CategoryConfiguration().withMinimumSeverityLevel("pwwgzeylzp")
                                .withCategory(RuleCategory.DEPENDENCIES)))
                        .withBranchConfiguration(new TargetBranchConfiguration()
                            .withBranchNames(Arrays.asList("rkt", "o", "gynsixgzbbnug", "quarb"))
                            .withAnnotateDefaultBranch(AnnotateDefaultBranchState.ENABLED))
                        .withInheritFromParentState(InheritFromParentState.ENABLED)))
                .create();

        Assertions.assertEquals(DevOpsProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR, response.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.NONE, response.properties().actionableRemediation().state());
        Assertions.assertEquals("akybepsihz",
            response.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.DEPENDENCIES,
            response.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("lycxlubruk",
            response.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.ENABLED,
            response.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.ENABLED,
            response.properties().actionableRemediation().inheritFromParentState());
    }
}
