// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsOrg;
import com.azure.resourcemanager.security.models.AzureDevOpsOrgProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureDevOpsOrgsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningStatusMessage\":\"ghc\",\"provisioningStatusUpdateTimeUtc\":\"2021-08-13T11:19:07Z\",\"provisioningState\":\"Succeeded\",\"onboardingState\":\"Onboarded\",\"actionableRemediation\":{\"state\":\"None\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"iwmlgstmf\",\"category\":\"Artifacts\"},{\"minimumSeverityLevel\":\"isjmo\",\"category\":\"Artifacts\"},{\"minimumSeverityLevel\":\"q\",\"category\":\"Dependencies\"}],\"branchConfiguration\":{\"branchNames\":[\"krvtyycvy\",\"v\",\"ejqaw\"],\"annotateDefaultBranch\":\"Disabled\"},\"inheritFromParentState\":\"Enabled\"}},\"id\":\"fzxk\",\"name\":\"zbdypbbimhjbozv\",\"type\":\"ortclnhbjcyuzly\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsOrg response = manager.azureDevOpsOrgs()
            .define("mdfjwcngkwxjsj")
            .withExistingSecurityConnector("jxdumhycxonebld", "a")
            .withProperties(new AzureDevOpsOrgProperties().withOnboardingState(OnboardingState.ONBOARDED)
                .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.NONE)
                    .withCategoryConfigurations(Arrays.asList(
                        new CategoryConfiguration().withMinimumSeverityLevel("acrzhnsbylgmg")
                            .withCategory(RuleCategory.SECRETS),
                        new CategoryConfiguration().withMinimumSeverityLevel("czouan")
                            .withCategory(RuleCategory.ARTIFACTS),
                        new CategoryConfiguration().withMinimumSeverityLevel("vcxglxoqwb")
                            .withCategory(RuleCategory.ARTIFACTS)))
                    .withBranchConfiguration(new TargetBranchConfiguration()
                        .withBranchNames(Arrays.asList("zbwbgwzhbhfljeyo", "piovnlh", "wyakzuafapwxsvde", "tjiobni"))
                        .withAnnotateDefaultBranch(AnnotateDefaultBranchState.ENABLED))
                    .withInheritFromParentState(InheritFromParentState.DISABLED)))
            .create();

        Assertions.assertEquals(OnboardingState.ONBOARDED, response.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.NONE, response.properties().actionableRemediation().state());
        Assertions.assertEquals("iwmlgstmf",
            response.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.ARTIFACTS,
            response.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("krvtyycvy",
            response.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            response.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.ENABLED,
            response.properties().actionableRemediation().inheritFromParentState());
    }
}
