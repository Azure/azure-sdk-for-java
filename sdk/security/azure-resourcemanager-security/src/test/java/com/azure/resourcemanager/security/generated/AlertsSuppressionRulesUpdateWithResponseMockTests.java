// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.fluent.models.AlertsSuppressionRuleInner;
import com.azure.resourcemanager.security.models.AlertsSuppressionRule;
import com.azure.resourcemanager.security.models.RuleState;
import com.azure.resourcemanager.security.models.ScopeElement;
import com.azure.resourcemanager.security.models.SuppressionAlertsScope;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AlertsSuppressionRulesUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alertType\":\"corkfrocgbmxl\",\"lastModifiedUtc\":\"2021-11-29T06:49:01Z\",\"expirationDateUtc\":\"2021-10-01T18:03:45Z\",\"reason\":\"zbjesylslur\",\"state\":\"Disabled\",\"comment\":\"ygpnyhgdzuqsca\",\"suppressionAlertsScope\":{\"allOf\":[{\"field\":\"ouprs\",\"\":{\"fduiolhgyqvpb\":\"datazsslhmgwfnivrx\",\"oqzucfzluczdq\":\"dataj\"}},{\"field\":\"rbormvhvzie\",\"\":{\"gmnwsvhbn\":\"datarnqujywzcqy\",\"jtobdrrp\":\"dataqiwy\"}},{\"field\":\"ehkuns\",\"\":{\"egea\":\"datahhlwtpk\",\"qsttewuvcysjeuf\":\"datatbzkgtzqn\",\"lpditfnonpi\":\"datax\",\"qflvtlrvbst\":\"datauxlvrhprrvbwonl\"}}]}},\"id\":\"huy\",\"name\":\"uninttlnrjdszd\",\"type\":\"u\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AlertsSuppressionRule response = manager.alertsSuppressionRules()
            .updateWithResponse("wihbnnxemv",
                new AlertsSuppressionRuleInner().withAlertType("u")
                    .withExpirationDateUtc(OffsetDateTime.parse("2021-11-23T15:37:38Z"))
                    .withReason("auratni")
                    .withState(RuleState.ENABLED)
                    .withComment("fzs")
                    .withSuppressionAlertsScope(new SuppressionAlertsScope().withAllOf(
                        Arrays.asList(new ScopeElement().withField("yrletndqlmf").withAdditionalProperties(mapOf()),
                            new ScopeElement().withField("cwtewfhxwyrkb").withAdditionalProperties(mapOf()),
                            new ScopeElement().withField("tzqzcloy").withAdditionalProperties(mapOf()),
                            new ScopeElement().withField("vyrfbqvum").withAdditionalProperties(mapOf())))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("corkfrocgbmxl", response.alertType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-01T18:03:45Z"), response.expirationDateUtc());
        Assertions.assertEquals("zbjesylslur", response.reason());
        Assertions.assertEquals(RuleState.DISABLED, response.state());
        Assertions.assertEquals("ygpnyhgdzuqsca", response.comment());
        Assertions.assertEquals("ouprs", response.suppressionAlertsScope().allOf().get(0).field());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
