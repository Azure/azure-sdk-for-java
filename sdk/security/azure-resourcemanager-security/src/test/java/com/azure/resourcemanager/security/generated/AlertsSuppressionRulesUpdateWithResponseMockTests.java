// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.fluent.models.AlertsSuppressionRuleInner;
import com.azure.resourcemanager.security.models.AlertsSuppressionRule;
import com.azure.resourcemanager.security.models.RuleState;
import com.azure.resourcemanager.security.models.SuppressionAlertsScope;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AlertsSuppressionRulesUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"alertType\":\"kgd\",\"lastModifiedUtc\":\"2021-11-26T23:11:17Z\",\"expirationDateUtc\":\"2021-10-12T17:44:39Z\",\"reason\":\"k\",\"state\":\"Disabled\",\"comment\":\"hgsqtnqsktxq\",\"suppressionAlertsScope\":{\"allOf\":[]}},\"id\":\"jbqggweeiwdhdm\",\"name\":\"cgbfzuscstun\",\"type\":\"lhxd\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SecurityManager manager =
            SecurityManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AlertsSuppressionRule response =
            manager
                .alertsSuppressionRules()
                .updateWithResponse(
                    "lfmsibzoyrfg",
                    new AlertsSuppressionRuleInner()
                        .withAlertType("ydpmypgfqvmt")
                        .withExpirationDateUtc(OffsetDateTime.parse("2021-08-23T13:21:07Z"))
                        .withReason("kxp")
                        .withState(RuleState.ENABLED)
                        .withComment("ewp")
                        .withSuppressionAlertsScope(new SuppressionAlertsScope().withAllOf(Arrays.asList())),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("kgd", response.alertType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-12T17:44:39Z"), response.expirationDateUtc());
        Assertions.assertEquals("k", response.reason());
        Assertions.assertEquals(RuleState.DISABLED, response.state());
        Assertions.assertEquals("hgsqtnqsktxq", response.comment());
    }
}
