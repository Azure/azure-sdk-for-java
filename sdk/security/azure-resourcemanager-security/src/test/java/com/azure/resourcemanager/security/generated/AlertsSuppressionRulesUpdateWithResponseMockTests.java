// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.fluent.models.AlertsSuppressionRuleInner;
import com.azure.resourcemanager.security.models.AlertsSuppressionRule;
import com.azure.resourcemanager.security.models.RuleState;
import com.azure.resourcemanager.security.models.ScopeElement;
import com.azure.resourcemanager.security.models.SuppressionAlertsScope;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AlertsSuppressionRulesUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alertType\":\"swku\",\"lastModifiedUtc\":\"2021-08-16T22:12:26Z\",\"expirationDateUtc\":\"2021-06-04T13:34:39Z\",\"reason\":\"aczkf\",\"state\":\"Expired\",\"comment\":\"tgawphnskiv\",\"suppressionAlertsScope\":{\"allOf\":[{\"field\":\"qcumecsa\",\"\":{\"uy\":\"dataoqbd\"}},{\"field\":\"bskowkr\",\"\":{\"asfgqgucyhfaimqv\":\"datahrbkhtmqowi\",\"oehgfmqmskkixvlz\":\"dataruozkgyfp\",\"yntvzjyielbq\":\"dataxplhpeva\"}},{\"field\":\"vbqv\",\"\":{\"nstlpwqpjn\":\"datapecqxgiqasifubn\"}},{\"field\":\"khtupsvyou\",\"\":{\"lznfhkqytkztado\":\"dataiyxfwkztsmsfbevy\",\"yyhigqkzjuqw\":\"datagfzdgjfcycrsvl\",\"nfdbgsoscienezf\":\"dataajquzxpixhyoi\",\"nrtekw\":\"databennmfkbp\"}}]}},\"id\":\"nthropmdudsyiu\",\"name\":\"ztvktjhffecqko\",\"type\":\"youergaghp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AlertsSuppressionRule response
            = manager.alertsSuppressionRules()
                .updateWithResponse("lweeprne",
                    new AlertsSuppressionRuleInner().withAlertType("l")
                        .withExpirationDateUtc(OffsetDateTime.parse("2021-07-17T07:02:50Z"))
                        .withReason("fjsxscbduxapg")
                        .withState(RuleState.DISABLED)
                        .withComment("ebmvrdjom")
                        .withSuppressionAlertsScope(new SuppressionAlertsScope().withAllOf(Arrays.asList(
                            new ScopeElement().withField("bvvdlsflxkqesd").withAdditionalProperties(mapOf()),
                            new ScopeElement().withField("dhuihaouwudhuao").withAdditionalProperties(mapOf()),
                            new ScopeElement().withField("ravrcjkjymg").withAdditionalProperties(mapOf()),
                            new ScopeElement().withField("stifgufyjf").withAdditionalProperties(mapOf())))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("swku", response.alertType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T13:34:39Z"), response.expirationDateUtc());
        Assertions.assertEquals("aczkf", response.reason());
        Assertions.assertEquals(RuleState.EXPIRED, response.state());
        Assertions.assertEquals("tgawphnskiv", response.comment());
        Assertions.assertEquals("qcumecsa", response.suppressionAlertsScope().allOf().get(0).field());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
