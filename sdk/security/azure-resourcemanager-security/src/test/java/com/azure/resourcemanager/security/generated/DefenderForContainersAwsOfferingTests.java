// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOffering;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOfferingCloudWatchToKinesis;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOfferingKinesisToS3;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOfferingKubernetesDataCollection;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOfferingKubernetesService;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8S;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOfferingMdcContainersImageAssessment;
import com.azure.resourcemanager.security.models.DefenderForContainersAwsOfferingVmScanners;
import com.azure.resourcemanager.security.models.ScanningMode;
import com.azure.resourcemanager.security.models.VmScannersBaseConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderForContainersAwsOfferingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForContainersAwsOffering model = BinaryData.fromString(
            "{\"offeringType\":\"DefenderForContainersAws\",\"kubernetesService\":{\"cloudRoleArn\":\"bkgx\"},\"kubernetesDataCollection\":{\"cloudRoleArn\":\"auxreddobmcn\"},\"cloudWatchToKinesis\":{\"cloudRoleArn\":\"wytkujsqy\"},\"kinesisToS3\":{\"cloudRoleArn\":\"oxfab\"},\"enableAuditLogsAutoProvisioning\":false,\"enableDefenderAgentAutoProvisioning\":true,\"enablePolicyAgentAutoProvisioning\":false,\"kubeAuditRetentionTime\":1641076170728392414,\"dataCollectionExternalId\":\"ali\",\"mdcContainersImageAssessment\":{\"enabled\":true,\"cloudRoleArn\":\"nwplrr\"},\"mdcContainersAgentlessDiscoveryK8s\":{\"enabled\":false,\"cloudRoleArn\":\"sbbi\"},\"vmScanners\":{\"cloudRoleArn\":\"cu\",\"enabled\":true,\"configuration\":{\"scanningMode\":\"Default\",\"exclusionTags\":{\"f\":\"fsfeqbbe\"}}},\"description\":\"qfpyyxmzrmt\"}")
            .toObject(DefenderForContainersAwsOffering.class);
        Assertions.assertEquals("bkgx", model.kubernetesService().cloudRoleArn());
        Assertions.assertEquals("auxreddobmcn", model.kubernetesDataCollection().cloudRoleArn());
        Assertions.assertEquals("wytkujsqy", model.cloudWatchToKinesis().cloudRoleArn());
        Assertions.assertEquals("oxfab", model.kinesisToS3().cloudRoleArn());
        Assertions.assertEquals(false, model.enableAuditLogsAutoProvisioning());
        Assertions.assertEquals(true, model.enableDefenderAgentAutoProvisioning());
        Assertions.assertEquals(false, model.enablePolicyAgentAutoProvisioning());
        Assertions.assertEquals(1641076170728392414L, model.kubeAuditRetentionTime());
        Assertions.assertEquals("ali", model.dataCollectionExternalId());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("nwplrr", model.mdcContainersImageAssessment().cloudRoleArn());
        Assertions.assertEquals(false, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("sbbi", model.mdcContainersAgentlessDiscoveryK8S().cloudRoleArn());
        Assertions.assertEquals(true, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("fsfeqbbe", model.vmScanners().configuration().exclusionTags().get("f"));
        Assertions.assertEquals("cu", model.vmScanners().cloudRoleArn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForContainersAwsOffering model = new DefenderForContainersAwsOffering()
            .withKubernetesService(new DefenderForContainersAwsOfferingKubernetesService().withCloudRoleArn("bkgx"))
            .withKubernetesDataCollection(
                new DefenderForContainersAwsOfferingKubernetesDataCollection().withCloudRoleArn("auxreddobmcn"))
            .withCloudWatchToKinesis(
                new DefenderForContainersAwsOfferingCloudWatchToKinesis().withCloudRoleArn("wytkujsqy"))
            .withKinesisToS3(new DefenderForContainersAwsOfferingKinesisToS3().withCloudRoleArn("oxfab"))
            .withEnableAuditLogsAutoProvisioning(false)
            .withEnableDefenderAgentAutoProvisioning(true)
            .withEnablePolicyAgentAutoProvisioning(false)
            .withKubeAuditRetentionTime(1641076170728392414L)
            .withDataCollectionExternalId("ali")
            .withMdcContainersImageAssessment(
                new DefenderForContainersAwsOfferingMdcContainersImageAssessment().withEnabled(true)
                    .withCloudRoleArn("nwplrr"))
            .withMdcContainersAgentlessDiscoveryK8S(
                new DefenderForContainersAwsOfferingMdcContainersAgentlessDiscoveryK8S().withEnabled(false)
                    .withCloudRoleArn("sbbi"))
            .withVmScanners(new DefenderForContainersAwsOfferingVmScanners().withEnabled(true)
                .withConfiguration(new VmScannersBaseConfiguration().withScanningMode(ScanningMode.DEFAULT)
                    .withExclusionTags(mapOf("f", "fsfeqbbe")))
                .withCloudRoleArn("cu"));
        model = BinaryData.fromObject(model).toObject(DefenderForContainersAwsOffering.class);
        Assertions.assertEquals("bkgx", model.kubernetesService().cloudRoleArn());
        Assertions.assertEquals("auxreddobmcn", model.kubernetesDataCollection().cloudRoleArn());
        Assertions.assertEquals("wytkujsqy", model.cloudWatchToKinesis().cloudRoleArn());
        Assertions.assertEquals("oxfab", model.kinesisToS3().cloudRoleArn());
        Assertions.assertEquals(false, model.enableAuditLogsAutoProvisioning());
        Assertions.assertEquals(true, model.enableDefenderAgentAutoProvisioning());
        Assertions.assertEquals(false, model.enablePolicyAgentAutoProvisioning());
        Assertions.assertEquals(1641076170728392414L, model.kubeAuditRetentionTime());
        Assertions.assertEquals("ali", model.dataCollectionExternalId());
        Assertions.assertEquals(true, model.mdcContainersImageAssessment().enabled());
        Assertions.assertEquals("nwplrr", model.mdcContainersImageAssessment().cloudRoleArn());
        Assertions.assertEquals(false, model.mdcContainersAgentlessDiscoveryK8S().enabled());
        Assertions.assertEquals("sbbi", model.mdcContainersAgentlessDiscoveryK8S().cloudRoleArn());
        Assertions.assertEquals(true, model.vmScanners().enabled());
        Assertions.assertEquals(ScanningMode.DEFAULT, model.vmScanners().configuration().scanningMode());
        Assertions.assertEquals("fsfeqbbe", model.vmScanners().configuration().exclusionTags().get("f"));
        Assertions.assertEquals("cu", model.vmScanners().cloudRoleArn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
