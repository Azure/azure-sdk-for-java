// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.fluent.models.ScanInner;
import com.azure.resourcemanager.security.fluent.models.ScansInner;
import com.azure.resourcemanager.security.models.ScanProperties;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScansInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScansInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"triggerType\":\"Recurring\",\"state\":\"Passed\",\"server\":\"dfdosygexp\",\"database\":\"jakhmsbzjh\",\"sqlVersion\":\"zevdphlx\",\"startTime\":\"2021-03-08T08:26:20Z\",\"endTime\":\"2021-06-12T13:25:29Z\",\"highSeverityFailedRulesCount\":578472109,\"mediumSeverityFailedRulesCount\":545631747,\"lowSeverityFailedRulesCount\":607055364,\"totalPassedRulesCount\":1007211846,\"totalFailedRulesCount\":219924002,\"totalRulesCount\":257181558,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-06-30T00:58:21Z\"},\"id\":\"v\",\"name\":\"cjrwzoxxjtfellu\",\"type\":\"fziton\"},{\"properties\":{\"triggerType\":\"Recurring\",\"state\":\"Passed\",\"server\":\"jlxofpdvhpfxxyp\",\"database\":\"i\",\"sqlVersion\":\"ayhuy\",\"startTime\":\"2021-05-05T04:33:07Z\",\"endTime\":\"2021-08-30T21:34:13Z\",\"highSeverityFailedRulesCount\":1068463715,\"mediumSeverityFailedRulesCount\":783834227,\"lowSeverityFailedRulesCount\":92863061,\"totalPassedRulesCount\":895630833,\"totalFailedRulesCount\":1290742637,\"totalRulesCount\":905573137,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-06-29T17:54:10Z\"},\"id\":\"gnarxzxtheo\",\"name\":\"usivye\",\"type\":\"cciqihnhungbwjz\"},{\"properties\":{\"triggerType\":\"Recurring\",\"state\":\"Passed\",\"server\":\"ispe\",\"database\":\"tzfkufubl\",\"sqlVersion\":\"fxqeof\",\"startTime\":\"2021-11-09T06:35:40Z\",\"endTime\":\"2021-11-08T09:04:14Z\",\"highSeverityFailedRulesCount\":1946289710,\"mediumSeverityFailedRulesCount\":158340850,\"lowSeverityFailedRulesCount\":5903092,\"totalPassedRulesCount\":1154409847,\"totalFailedRulesCount\":171596164,\"totalRulesCount\":1952793695,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-11-14T12:38:49Z\"},\"id\":\"sntnbybkzgcw\",\"name\":\"wclxxwrl\",\"type\":\"douskcqvkocrcjdk\"},{\"properties\":{\"triggerType\":\"Recurring\",\"state\":\"Passed\",\"server\":\"jbiksqrglssai\",\"database\":\"p\",\"sqlVersion\":\"nzl\",\"startTime\":\"2021-11-25T19:06:53Z\",\"endTime\":\"2021-02-24T21:44:30Z\",\"highSeverityFailedRulesCount\":450622751,\"mediumSeverityFailedRulesCount\":2010421384,\"lowSeverityFailedRulesCount\":1530688943,\"totalPassedRulesCount\":168593557,\"totalFailedRulesCount\":1762114496,\"totalRulesCount\":253386723,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-03-09T00:46:41Z\"},\"id\":\"ujitcjcz\",\"name\":\"zevndhkrwpdappds\",\"type\":\"dkvwrwjfe\"}]}")
                .toObject(ScansInner.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.value().get(0).properties().triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.value().get(0).properties().state());
        Assertions.assertEquals("dfdosygexp", model.value().get(0).properties().server());
        Assertions.assertEquals("jakhmsbzjh", model.value().get(0).properties().database());
        Assertions.assertEquals("zevdphlx", model.value().get(0).properties().sqlVersion());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-03-08T08:26:20Z"), model.value().get(0).properties().startTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-12T13:25:29Z"), model.value().get(0).properties().endTime());
        Assertions.assertEquals(578472109, model.value().get(0).properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(545631747, model.value().get(0).properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(607055364, model.value().get(0).properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(1007211846, model.value().get(0).properties().totalPassedRulesCount());
        Assertions.assertEquals(219924002, model.value().get(0).properties().totalFailedRulesCount());
        Assertions.assertEquals(257181558, model.value().get(0).properties().totalRulesCount());
        Assertions.assertEquals(false, model.value().get(0).properties().isBaselineApplied());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-30T00:58:21Z"), model.value().get(0).properties().lastScanTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScansInner model =
            new ScansInner()
                .withValue(
                    Arrays
                        .asList(
                            new ScanInner()
                                .withProperties(
                                    new ScanProperties()
                                        .withTriggerType(ScanTriggerType.RECURRING)
                                        .withState(ScanState.PASSED)
                                        .withServer("dfdosygexp")
                                        .withDatabase("jakhmsbzjh")
                                        .withSqlVersion("zevdphlx")
                                        .withStartTime(OffsetDateTime.parse("2021-03-08T08:26:20Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-06-12T13:25:29Z"))
                                        .withHighSeverityFailedRulesCount(578472109)
                                        .withMediumSeverityFailedRulesCount(545631747)
                                        .withLowSeverityFailedRulesCount(607055364)
                                        .withTotalPassedRulesCount(1007211846)
                                        .withTotalFailedRulesCount(219924002)
                                        .withTotalRulesCount(257181558)
                                        .withIsBaselineApplied(false)
                                        .withLastScanTime(OffsetDateTime.parse("2021-06-30T00:58:21Z"))),
                            new ScanInner()
                                .withProperties(
                                    new ScanProperties()
                                        .withTriggerType(ScanTriggerType.RECURRING)
                                        .withState(ScanState.PASSED)
                                        .withServer("jlxofpdvhpfxxyp")
                                        .withDatabase("i")
                                        .withSqlVersion("ayhuy")
                                        .withStartTime(OffsetDateTime.parse("2021-05-05T04:33:07Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-08-30T21:34:13Z"))
                                        .withHighSeverityFailedRulesCount(1068463715)
                                        .withMediumSeverityFailedRulesCount(783834227)
                                        .withLowSeverityFailedRulesCount(92863061)
                                        .withTotalPassedRulesCount(895630833)
                                        .withTotalFailedRulesCount(1290742637)
                                        .withTotalRulesCount(905573137)
                                        .withIsBaselineApplied(true)
                                        .withLastScanTime(OffsetDateTime.parse("2021-06-29T17:54:10Z"))),
                            new ScanInner()
                                .withProperties(
                                    new ScanProperties()
                                        .withTriggerType(ScanTriggerType.RECURRING)
                                        .withState(ScanState.PASSED)
                                        .withServer("ispe")
                                        .withDatabase("tzfkufubl")
                                        .withSqlVersion("fxqeof")
                                        .withStartTime(OffsetDateTime.parse("2021-11-09T06:35:40Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-11-08T09:04:14Z"))
                                        .withHighSeverityFailedRulesCount(1946289710)
                                        .withMediumSeverityFailedRulesCount(158340850)
                                        .withLowSeverityFailedRulesCount(5903092)
                                        .withTotalPassedRulesCount(1154409847)
                                        .withTotalFailedRulesCount(171596164)
                                        .withTotalRulesCount(1952793695)
                                        .withIsBaselineApplied(true)
                                        .withLastScanTime(OffsetDateTime.parse("2021-11-14T12:38:49Z"))),
                            new ScanInner()
                                .withProperties(
                                    new ScanProperties()
                                        .withTriggerType(ScanTriggerType.RECURRING)
                                        .withState(ScanState.PASSED)
                                        .withServer("jbiksqrglssai")
                                        .withDatabase("p")
                                        .withSqlVersion("nzl")
                                        .withStartTime(OffsetDateTime.parse("2021-11-25T19:06:53Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-02-24T21:44:30Z"))
                                        .withHighSeverityFailedRulesCount(450622751)
                                        .withMediumSeverityFailedRulesCount(2010421384)
                                        .withLowSeverityFailedRulesCount(1530688943)
                                        .withTotalPassedRulesCount(168593557)
                                        .withTotalFailedRulesCount(1762114496)
                                        .withTotalRulesCount(253386723)
                                        .withIsBaselineApplied(true)
                                        .withLastScanTime(OffsetDateTime.parse("2021-03-09T00:46:41Z")))));
        model = BinaryData.fromObject(model).toObject(ScansInner.class);
        Assertions.assertEquals(ScanTriggerType.RECURRING, model.value().get(0).properties().triggerType());
        Assertions.assertEquals(ScanState.PASSED, model.value().get(0).properties().state());
        Assertions.assertEquals("dfdosygexp", model.value().get(0).properties().server());
        Assertions.assertEquals("jakhmsbzjh", model.value().get(0).properties().database());
        Assertions.assertEquals("zevdphlx", model.value().get(0).properties().sqlVersion());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-03-08T08:26:20Z"), model.value().get(0).properties().startTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-06-12T13:25:29Z"), model.value().get(0).properties().endTime());
        Assertions.assertEquals(578472109, model.value().get(0).properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(545631747, model.value().get(0).properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(607055364, model.value().get(0).properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(1007211846, model.value().get(0).properties().totalPassedRulesCount());
        Assertions.assertEquals(219924002, model.value().get(0).properties().totalFailedRulesCount());
        Assertions.assertEquals(257181558, model.value().get(0).properties().totalRulesCount());
        Assertions.assertEquals(false, model.value().get(0).properties().isBaselineApplied());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-30T00:58:21Z"), model.value().get(0).properties().lastScanTime());
    }
}
