// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.Baseline;
import com.azure.resourcemanager.security.models.BaselineAdjustedResult;
import com.azure.resourcemanager.security.models.BenchmarkReference;
import com.azure.resourcemanager.security.models.QueryCheck;
import com.azure.resourcemanager.security.models.Remediation;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResultProperties;
import com.azure.resourcemanager.security.models.VaRule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScanResultPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanResultProperties model =
            BinaryData
                .fromString(
                    "{\"ruleId\":\"lc\",\"status\":\"Finding\",\"isTrimmed\":true,\"queryResults\":[[\"zdfwrsofpltdbm\"],[\"rrhvhfnracwnpq\",\"g\"]],\"remediation\":{\"description\":\"jwouhda\",\"scripts\":[\"grbjbxsjybvitvqk\"],\"automated\":false,\"portalLink\":\"nu\"},\"baselineAdjustedResult\":{\"baseline\":{\"expectedResults\":[[]],\"updatedTime\":\"2021-03-21T07:29:24Z\"},\"status\":\"Finding\",\"resultsNotInBaseline\":[[\"fnkf\",\"xlvxnoakiz\",\"oaiknaqlnuwig\"],[\"xly\"],[\"phvxz\",\"wxh\"]],\"resultsOnlyInBaseline\":[[\"tl\",\"exaonwivkcq\",\"rxhxkn\",\"ccrmmk\"],[\"pijubyq\",\"fkak\",\"qfrkemyildudxj\",\"sco\"]]},\"ruleMetadata\":{\"ruleId\":\"djkpdxph\",\"severity\":\"Low\",\"category\":\"nmgzvyfijdkzuqnw\",\"ruleType\":\"PositiveList\",\"title\":\"uqoly\",\"description\":\"luqw\",\"rationale\":\"lsutrjbh\",\"queryCheck\":{\"query\":\"fhyqezvqqugdrft\",\"expectedResult\":[[]],\"columnNames\":[\"reuquowtljvf\",\"hreagk\",\"yxvrqtvbczsul\"]},\"benchmarkReferences\":[{\"benchmark\":\"lmepjpf\",\"reference\":\"ykgsangpszng\"},{\"benchmark\":\"p\",\"reference\":\"lkvec\"},{\"benchmark\":\"jcngoadyed\",\"reference\":\"rgjfoknubnoi\"}]}}")
                .toObject(ScanResultProperties.class);
        Assertions.assertEquals("lc", model.ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.status());
        Assertions.assertEquals(true, model.isTrimmed());
        Assertions.assertEquals("zdfwrsofpltdbm", model.queryResults().get(0).get(0));
        Assertions.assertEquals("jwouhda", model.remediation().description());
        Assertions.assertEquals("grbjbxsjybvitvqk", model.remediation().scripts().get(0));
        Assertions.assertEquals(false, model.remediation().automated());
        Assertions.assertEquals("nu", model.remediation().portalLink());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-21T07:29:24Z"), model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.FINDING, model.baselineAdjustedResult().status());
        Assertions.assertEquals("fnkf", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("tl", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("djkpdxph", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.LOW, model.ruleMetadata().severity());
        Assertions.assertEquals("nmgzvyfijdkzuqnw", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.POSITIVE_LIST, model.ruleMetadata().ruleType());
        Assertions.assertEquals("uqoly", model.ruleMetadata().title());
        Assertions.assertEquals("luqw", model.ruleMetadata().description());
        Assertions.assertEquals("lsutrjbh", model.ruleMetadata().rationale());
        Assertions.assertEquals("fhyqezvqqugdrft", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("reuquowtljvf", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("lmepjpf", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("ykgsangpszng", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanResultProperties model =
            new ScanResultProperties()
                .withRuleId("lc")
                .withStatus(RuleStatus.FINDING)
                .withIsTrimmed(true)
                .withQueryResults(Arrays.asList(Arrays.asList("zdfwrsofpltdbm"), Arrays.asList("rrhvhfnracwnpq", "g")))
                .withRemediation(
                    new Remediation()
                        .withDescription("jwouhda")
                        .withScripts(Arrays.asList("grbjbxsjybvitvqk"))
                        .withAutomated(false)
                        .withPortalLink("nu"))
                .withBaselineAdjustedResult(
                    new BaselineAdjustedResult()
                        .withBaseline(
                            new Baseline()
                                .withExpectedResults(Arrays.asList(Arrays.asList()))
                                .withUpdatedTime(OffsetDateTime.parse("2021-03-21T07:29:24Z")))
                        .withStatus(RuleStatus.FINDING)
                        .withResultsNotInBaseline(
                            Arrays
                                .asList(
                                    Arrays.asList("fnkf", "xlvxnoakiz", "oaiknaqlnuwig"),
                                    Arrays.asList("xly"),
                                    Arrays.asList("phvxz", "wxh")))
                        .withResultsOnlyInBaseline(
                            Arrays
                                .asList(
                                    Arrays.asList("tl", "exaonwivkcq", "rxhxkn", "ccrmmk"),
                                    Arrays.asList("pijubyq", "fkak", "qfrkemyildudxj", "sco"))))
                .withRuleMetadata(
                    new VaRule()
                        .withRuleId("djkpdxph")
                        .withSeverity(RuleSeverity.LOW)
                        .withCategory("nmgzvyfijdkzuqnw")
                        .withRuleType(RuleType.POSITIVE_LIST)
                        .withTitle("uqoly")
                        .withDescription("luqw")
                        .withRationale("lsutrjbh")
                        .withQueryCheck(
                            new QueryCheck()
                                .withQuery("fhyqezvqqugdrft")
                                .withExpectedResult(Arrays.asList(Arrays.asList()))
                                .withColumnNames(Arrays.asList("reuquowtljvf", "hreagk", "yxvrqtvbczsul")))
                        .withBenchmarkReferences(
                            Arrays
                                .asList(
                                    new BenchmarkReference().withBenchmark("lmepjpf").withReference("ykgsangpszng"),
                                    new BenchmarkReference().withBenchmark("p").withReference("lkvec"),
                                    new BenchmarkReference()
                                        .withBenchmark("jcngoadyed")
                                        .withReference("rgjfoknubnoi"))));
        model = BinaryData.fromObject(model).toObject(ScanResultProperties.class);
        Assertions.assertEquals("lc", model.ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.status());
        Assertions.assertEquals(true, model.isTrimmed());
        Assertions.assertEquals("zdfwrsofpltdbm", model.queryResults().get(0).get(0));
        Assertions.assertEquals("jwouhda", model.remediation().description());
        Assertions.assertEquals("grbjbxsjybvitvqk", model.remediation().scripts().get(0));
        Assertions.assertEquals(false, model.remediation().automated());
        Assertions.assertEquals("nu", model.remediation().portalLink());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-21T07:29:24Z"), model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.FINDING, model.baselineAdjustedResult().status());
        Assertions.assertEquals("fnkf", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("tl", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("djkpdxph", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.LOW, model.ruleMetadata().severity());
        Assertions.assertEquals("nmgzvyfijdkzuqnw", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.POSITIVE_LIST, model.ruleMetadata().ruleType());
        Assertions.assertEquals("uqoly", model.ruleMetadata().title());
        Assertions.assertEquals("luqw", model.ruleMetadata().description());
        Assertions.assertEquals("lsutrjbh", model.ruleMetadata().rationale());
        Assertions.assertEquals("fhyqezvqqugdrft", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("reuquowtljvf", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("lmepjpf", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("ykgsangpszng", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }
}
