// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.Baseline;
import com.azure.resourcemanager.security.models.BaselineAdjustedResult;
import com.azure.resourcemanager.security.models.BenchmarkReference;
import com.azure.resourcemanager.security.models.QueryCheck;
import com.azure.resourcemanager.security.models.Remediation;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResultProperties;
import com.azure.resourcemanager.security.models.VaRule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScanResultPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanResultProperties model = BinaryData.fromString(
            "{\"ruleId\":\"wafqroud\",\"status\":\"InternalError\",\"isTrimmed\":true,\"queryResults\":[[\"r\"]],\"remediation\":{\"description\":\"unzo\",\"scripts\":[\"hcxgkmoyx\",\"dyuib\",\"mfdn\"],\"automated\":true,\"portalLink\":\"vfvfcj\"},\"baselineAdjustedResult\":{\"baseline\":{\"expectedResults\":[[\"rvhmgor\",\"fukiscvwmzhw\",\"lefaxvxilcbtgn\",\"nzeyqxtjj\"],[\"qlqhycavodg\",\"xdbeesmieknl\"]],\"updatedTime\":\"2021-01-30T20:04:42Z\"},\"status\":\"NonFinding\",\"resultsNotInBaseline\":[[\"uagydwqfbylyrf\",\"iagtc\",\"jocqwogfnzjvusf\",\"ld\"],[\"zuxylfsbtkadpyso\",\"nbtgkbugrjqctoj\",\"mi\",\"of\"],[\"ypefojyqdhcupl\",\"plcwkhi\",\"ihlhzdsqtzb\"]],\"resultsOnlyInBaseline\":[[\"o\"],[\"jhf\",\"mvec\",\"ctxmwoteyowcluq\",\"vekqvgqo\"],[\"ifzmpjwyivqi\",\"f\"],[\"vhrfsphuagrt\",\"ikteusqczkvyk\"]]},\"ruleMetadata\":{\"ruleId\":\"byjaffmmf\",\"severity\":\"Low\",\"category\":\"cuubgq\",\"ruleType\":\"BaselineExpected\",\"title\":\"a\",\"description\":\"etttwgdslqxihhr\",\"rationale\":\"oi\",\"queryCheck\":{\"query\":\"eypxiutcxapzhyr\",\"expectedResult\":[[\"g\"],[\"joxslhvnhla\",\"rqnkkzjcjbtr\"],[\"ehvvib\",\"xjjs\",\"oqbeitpkxzt\",\"oobklftidgfcwq\"]],\"columnNames\":[\"maqxzhemjyh\"]},\"benchmarkReferences\":[{\"benchmark\":\"swtwkozzwc\",\"reference\":\"kb\"}]}}")
            .toObject(ScanResultProperties.class);
        Assertions.assertEquals("wafqroud", model.ruleId());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.status());
        Assertions.assertEquals(true, model.isTrimmed());
        Assertions.assertEquals("r", model.queryResults().get(0).get(0));
        Assertions.assertEquals("unzo", model.remediation().description());
        Assertions.assertEquals("hcxgkmoyx", model.remediation().scripts().get(0));
        Assertions.assertEquals(true, model.remediation().automated());
        Assertions.assertEquals("vfvfcj", model.remediation().portalLink());
        Assertions.assertEquals("rvhmgor", model.baselineAdjustedResult().baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T20:04:42Z"),
            model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.baselineAdjustedResult().status());
        Assertions.assertEquals("uagydwqfbylyrf", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("o", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("byjaffmmf", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.LOW, model.ruleMetadata().severity());
        Assertions.assertEquals("cuubgq", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.BASELINE_EXPECTED, model.ruleMetadata().ruleType());
        Assertions.assertEquals("a", model.ruleMetadata().title());
        Assertions.assertEquals("etttwgdslqxihhr", model.ruleMetadata().description());
        Assertions.assertEquals("oi", model.ruleMetadata().rationale());
        Assertions.assertEquals("eypxiutcxapzhyr", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("g", model.ruleMetadata().queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("maqxzhemjyh", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("swtwkozzwc", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("kb", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanResultProperties model
            = new ScanResultProperties()
                .withRuleId("wafqroud").withStatus(RuleStatus.INTERNAL_ERROR).withIsTrimmed(
                    true)
                .withQueryResults(
                    Arrays.asList(Arrays.asList("r")))
                .withRemediation(
                    new Remediation()
                        .withDescription(
                            "unzo")
                        .withScripts(
                            Arrays.asList("hcxgkmoyx", "dyuib", "mfdn"))
                        .withAutomated(true).withPortalLink("vfvfcj"))
                .withBaselineAdjustedResult(new BaselineAdjustedResult()
                    .withBaseline(new Baseline()
                        .withExpectedResults(
                            Arrays.asList(Arrays.asList("rvhmgor", "fukiscvwmzhw", "lefaxvxilcbtgn", "nzeyqxtjj"),
                                Arrays.asList("qlqhycavodg", "xdbeesmieknl")))
                        .withUpdatedTime(OffsetDateTime.parse("2021-01-30T20:04:42Z")))
                    .withStatus(RuleStatus.NON_FINDING)
                    .withResultsNotInBaseline(
                        Arrays.asList(Arrays.asList("uagydwqfbylyrf", "iagtc", "jocqwogfnzjvusf", "ld"),
                            Arrays.asList("zuxylfsbtkadpyso", "nbtgkbugrjqctoj", "mi", "of"),
                            Arrays.asList("ypefojyqdhcupl", "plcwkhi", "ihlhzdsqtzb")))
                    .withResultsOnlyInBaseline(
                        Arrays.asList(Arrays.asList("o"), Arrays.asList("jhf", "mvec", "ctxmwoteyowcluq", "vekqvgqo"),
                            Arrays.asList("ifzmpjwyivqi", "f"), Arrays.asList("vhrfsphuagrt", "ikteusqczkvyk"))))
                .withRuleMetadata(new VaRule().withRuleId("byjaffmmf").withSeverity(RuleSeverity.LOW)
                    .withCategory("cuubgq").withRuleType(RuleType.BASELINE_EXPECTED).withTitle("a")
                    .withDescription("etttwgdslqxihhr").withRationale("oi")
                    .withQueryCheck(new QueryCheck().withQuery("eypxiutcxapzhyr")
                        .withExpectedResult(
                            Arrays.asList(Arrays.asList("g"), Arrays.asList("joxslhvnhla", "rqnkkzjcjbtr"),
                                Arrays.asList("ehvvib", "xjjs", "oqbeitpkxzt", "oobklftidgfcwq")))
                        .withColumnNames(Arrays.asList("maqxzhemjyh")))
                    .withBenchmarkReferences(
                        Arrays.asList(new BenchmarkReference().withBenchmark("swtwkozzwc").withReference("kb"))));
        model = BinaryData.fromObject(model).toObject(ScanResultProperties.class);
        Assertions.assertEquals("wafqroud", model.ruleId());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.status());
        Assertions.assertEquals(true, model.isTrimmed());
        Assertions.assertEquals("r", model.queryResults().get(0).get(0));
        Assertions.assertEquals("unzo", model.remediation().description());
        Assertions.assertEquals("hcxgkmoyx", model.remediation().scripts().get(0));
        Assertions.assertEquals(true, model.remediation().automated());
        Assertions.assertEquals("vfvfcj", model.remediation().portalLink());
        Assertions.assertEquals("rvhmgor", model.baselineAdjustedResult().baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T20:04:42Z"),
            model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.baselineAdjustedResult().status());
        Assertions.assertEquals("uagydwqfbylyrf", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("o", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("byjaffmmf", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.LOW, model.ruleMetadata().severity());
        Assertions.assertEquals("cuubgq", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.BASELINE_EXPECTED, model.ruleMetadata().ruleType());
        Assertions.assertEquals("a", model.ruleMetadata().title());
        Assertions.assertEquals("etttwgdslqxihhr", model.ruleMetadata().description());
        Assertions.assertEquals("oi", model.ruleMetadata().rationale());
        Assertions.assertEquals("eypxiutcxapzhyr", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("g", model.ruleMetadata().queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("maqxzhemjyh", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("swtwkozzwc", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("kb", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }
}
