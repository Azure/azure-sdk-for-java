// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.Baseline;
import com.azure.resourcemanager.security.models.BaselineAdjustedResult;
import com.azure.resourcemanager.security.models.BenchmarkReference;
import com.azure.resourcemanager.security.models.QueryCheck;
import com.azure.resourcemanager.security.models.Remediation;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResultProperties;
import com.azure.resourcemanager.security.models.VaRule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScanResultPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanResultProperties model = BinaryData.fromString(
            "{\"ruleId\":\"jbibg\",\"status\":\"Finding\",\"isTrimmed\":false,\"queryResults\":[[\"cluyovwxnbkf\",\"zzxscyhwzdgiruj\"],[\"bomvzzbtdcqv\",\"niyujv\",\"ylwdshfssn\",\"bgye\"],[\"ymsgaojfmwnc\",\"tmr\",\"hirctymoxoftpipi\"],[\"czuhxacpqjlihh\",\"usps\",\"asdvl\"]],\"remediation\":{\"description\":\"dgzxulucvpamrsr\",\"scripts\":[\"vxurisjnhnytxifq\",\"zgxmr\",\"ublwpcesutrg\"],\"automated\":false,\"portalLink\":\"uutpwoqhih\"},\"baselineAdjustedResult\":{\"baseline\":{\"expectedResults\":[[\"pnfqntcyp\",\"xjvfoimwksl\",\"rcizjxvyd\",\"ceacvlhvygdy\"]],\"updatedTime\":\"2021-04-02T04:25:09Z\"},\"status\":\"NonFinding\",\"resultsNotInBaseline\":[[\"awjs\",\"biwkojgcyzt\",\"fmznba\",\"qphchqnrnrpxehuw\"],[\"k\",\"gaifmvik\",\"bydvkhbejdz\"],[\"cvdsrhnj\"]],\"resultsOnlyInBaseline\":[[\"v\",\"novqfzge\"],[\"dftuljltduce\",\"mtmczuome\",\"wcw\"],[\"ioknssxmoj\",\"sv\",\"kjprvk\"]]},\"ruleMetadata\":{\"ruleId\":\"zqljyxgtczh\",\"severity\":\"Medium\",\"category\":\"sdshmkxmaehvb\",\"ruleType\":\"PositiveList\",\"title\":\"iplt\",\"description\":\"htba\",\"rationale\":\"gx\",\"queryCheck\":{\"query\":\"ckpyklyhplu\",\"expectedResult\":[[\"ruud\"],[\"zibt\",\"ostgkts\",\"vdxec\",\"zedqbcvhzlhplo\"]],\"columnNames\":[\"dlwwqfbumlkxt\"]},\"benchmarkReferences\":[{\"benchmark\":\"smlmbtxhwgfwsrta\",\"reference\":\"oezbrhubsk\"},{\"benchmark\":\"dyg\",\"reference\":\"okkqfqjbvleo\"},{\"benchmark\":\"ml\",\"reference\":\"qtqzfavyv\"},{\"benchmark\":\"qybaryeua\",\"reference\":\"kq\"}]}}")
            .toObject(ScanResultProperties.class);
        Assertions.assertEquals("jbibg", model.ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.status());
        Assertions.assertEquals(false, model.isTrimmed());
        Assertions.assertEquals("cluyovwxnbkf", model.queryResults().get(0).get(0));
        Assertions.assertEquals("dgzxulucvpamrsr", model.remediation().description());
        Assertions.assertEquals("vxurisjnhnytxifq", model.remediation().scripts().get(0));
        Assertions.assertEquals(false, model.remediation().automated());
        Assertions.assertEquals("uutpwoqhih", model.remediation().portalLink());
        Assertions.assertEquals("pnfqntcyp", model.baselineAdjustedResult().baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T04:25:09Z"),
            model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.baselineAdjustedResult().status());
        Assertions.assertEquals("awjs", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("v", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("zqljyxgtczh", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.MEDIUM, model.ruleMetadata().severity());
        Assertions.assertEquals("sdshmkxmaehvb", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.POSITIVE_LIST, model.ruleMetadata().ruleType());
        Assertions.assertEquals("iplt", model.ruleMetadata().title());
        Assertions.assertEquals("htba", model.ruleMetadata().description());
        Assertions.assertEquals("gx", model.ruleMetadata().rationale());
        Assertions.assertEquals("ckpyklyhplu", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("ruud", model.ruleMetadata().queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("dlwwqfbumlkxt", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("smlmbtxhwgfwsrta", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("oezbrhubsk", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanResultProperties model = new ScanResultProperties().withRuleId("jbibg")
            .withStatus(RuleStatus.FINDING)
            .withIsTrimmed(false)
            .withQueryResults(Arrays.asList(Arrays.asList("cluyovwxnbkf", "zzxscyhwzdgiruj"),
                Arrays.asList("bomvzzbtdcqv", "niyujv", "ylwdshfssn", "bgye"),
                Arrays.asList("ymsgaojfmwnc", "tmr", "hirctymoxoftpipi"),
                Arrays.asList("czuhxacpqjlihh", "usps", "asdvl")))
            .withRemediation(new Remediation().withDescription("dgzxulucvpamrsr")
                .withScripts(Arrays.asList("vxurisjnhnytxifq", "zgxmr", "ublwpcesutrg"))
                .withAutomated(false)
                .withPortalLink("uutpwoqhih"))
            .withBaselineAdjustedResult(new BaselineAdjustedResult()
                .withBaseline(new Baseline()
                    .withExpectedResults(
                        Arrays.asList(Arrays.asList("pnfqntcyp", "xjvfoimwksl", "rcizjxvyd", "ceacvlhvygdy")))
                    .withUpdatedTime(OffsetDateTime.parse("2021-04-02T04:25:09Z")))
                .withStatus(RuleStatus.NON_FINDING)
                .withResultsNotInBaseline(
                    Arrays.asList(Arrays.asList("awjs", "biwkojgcyzt", "fmznba", "qphchqnrnrpxehuw"),
                        Arrays.asList("k", "gaifmvik", "bydvkhbejdz"), Arrays.asList("cvdsrhnj")))
                .withResultsOnlyInBaseline(Arrays.asList(Arrays.asList("v", "novqfzge"),
                    Arrays.asList("dftuljltduce", "mtmczuome", "wcw"), Arrays.asList("ioknssxmoj", "sv", "kjprvk"))))
            .withRuleMetadata(new VaRule().withRuleId("zqljyxgtczh")
                .withSeverity(RuleSeverity.MEDIUM)
                .withCategory("sdshmkxmaehvb")
                .withRuleType(RuleType.POSITIVE_LIST)
                .withTitle("iplt")
                .withDescription("htba")
                .withRationale("gx")
                .withQueryCheck(new QueryCheck().withQuery("ckpyklyhplu")
                    .withExpectedResult(Arrays.asList(Arrays.asList("ruud"),
                        Arrays.asList("zibt", "ostgkts", "vdxec", "zedqbcvhzlhplo")))
                    .withColumnNames(Arrays.asList("dlwwqfbumlkxt")))
                .withBenchmarkReferences(Arrays.asList(
                    new BenchmarkReference().withBenchmark("smlmbtxhwgfwsrta").withReference("oezbrhubsk"),
                    new BenchmarkReference().withBenchmark("dyg").withReference("okkqfqjbvleo"),
                    new BenchmarkReference().withBenchmark("ml").withReference("qtqzfavyv"),
                    new BenchmarkReference().withBenchmark("qybaryeua").withReference("kq"))));
        model = BinaryData.fromObject(model).toObject(ScanResultProperties.class);
        Assertions.assertEquals("jbibg", model.ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.status());
        Assertions.assertEquals(false, model.isTrimmed());
        Assertions.assertEquals("cluyovwxnbkf", model.queryResults().get(0).get(0));
        Assertions.assertEquals("dgzxulucvpamrsr", model.remediation().description());
        Assertions.assertEquals("vxurisjnhnytxifq", model.remediation().scripts().get(0));
        Assertions.assertEquals(false, model.remediation().automated());
        Assertions.assertEquals("uutpwoqhih", model.remediation().portalLink());
        Assertions.assertEquals("pnfqntcyp", model.baselineAdjustedResult().baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T04:25:09Z"),
            model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.NON_FINDING, model.baselineAdjustedResult().status());
        Assertions.assertEquals("awjs", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("v", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("zqljyxgtczh", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.MEDIUM, model.ruleMetadata().severity());
        Assertions.assertEquals("sdshmkxmaehvb", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.POSITIVE_LIST, model.ruleMetadata().ruleType());
        Assertions.assertEquals("iplt", model.ruleMetadata().title());
        Assertions.assertEquals("htba", model.ruleMetadata().description());
        Assertions.assertEquals("gx", model.ruleMetadata().rationale());
        Assertions.assertEquals("ckpyklyhplu", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("ruud", model.ruleMetadata().queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("dlwwqfbumlkxt", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("smlmbtxhwgfwsrta", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("oezbrhubsk", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }
}
