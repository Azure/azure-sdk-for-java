// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.Baseline;
import com.azure.resourcemanager.security.models.BaselineAdjustedResult;
import com.azure.resourcemanager.security.models.BenchmarkReference;
import com.azure.resourcemanager.security.models.QueryCheck;
import com.azure.resourcemanager.security.models.Remediation;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResultProperties;
import com.azure.resourcemanager.security.models.VaRule;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScanResultPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScanResultProperties model =
            BinaryData
                .fromString(
                    "{\"ruleId\":\"aoyfhrtxilnerkuj\",\"status\":\"Finding\",\"isTrimmed\":false,\"queryResults\":[[\"fqawrlyxw\",\"kcprbnw\",\"xgjvtbv\",\"ysszdnrujqguh\"],[\"ouqfprwz\"],[\"nguitnwuizgazxu\",\"izuckyfihrfidfvz\"]],\"remediation\":{\"description\":\"uht\",\"scripts\":[\"isdkfthwxmnteiw\",\"opvkmijcm\"],\"automated\":false,\"portalLink\":\"ufufsrp\"},\"baselineAdjustedResult\":{\"baseline\":{\"expectedResults\":[[],[],[]],\"updatedTime\":\"2021-08-05T10:27:23Z\"},\"status\":\"InternalError\",\"resultsNotInBaseline\":[[\"bzsgfyccsne\",\"mdwzjeiachboo\",\"flnrosfqpteehzz\"],[\"pyqr\",\"mzinpvswjdk\",\"rsoodqxhcrmnoh\"],[\"ckwhds\"],[\"fiyipjxsqwpgrj\",\"znorcj\",\"vsnb\",\"xqabnmocpcysh\"]],\"resultsOnlyInBaseline\":[[\"fblj\",\"gpbtoqcjmklj\",\"vbqid\",\"qajzyulpkudjkr\"]]},\"ruleMetadata\":{\"ruleId\":\"bzhfepgzgqexz\",\"severity\":\"Obsolete\",\"category\":\"scpai\",\"ruleType\":\"NegativeList\",\"title\":\"bcsglumma\",\"description\":\"j\",\"rationale\":\"dxob\",\"queryCheck\":{\"query\":\"xkqpxo\",\"expectedResult\":[[],[],[],[]],\"columnNames\":[\"npime\",\"gstxgcp\",\"dg\"]},\"benchmarkReferences\":[{\"benchmark\":\"r\",\"reference\":\"djwzrlov\"},{\"benchmark\":\"lwhijcoejctbzaq\",\"reference\":\"sycbkbfk\"},{\"benchmark\":\"kdkexxp\",\"reference\":\"fmxa\"},{\"benchmark\":\"fjpgddtocjjxhvp\",\"reference\":\"uexhdzx\"}]}}")
                .toObject(ScanResultProperties.class);
        Assertions.assertEquals("aoyfhrtxilnerkuj", model.ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.status());
        Assertions.assertEquals(false, model.isTrimmed());
        Assertions.assertEquals("fqawrlyxw", model.queryResults().get(0).get(0));
        Assertions.assertEquals("uht", model.remediation().description());
        Assertions.assertEquals("isdkfthwxmnteiw", model.remediation().scripts().get(0));
        Assertions.assertEquals(false, model.remediation().automated());
        Assertions.assertEquals("ufufsrp", model.remediation().portalLink());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-05T10:27:23Z"), model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.baselineAdjustedResult().status());
        Assertions.assertEquals("bzsgfyccsne", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("fblj", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("bzhfepgzgqexz", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.OBSOLETE, model.ruleMetadata().severity());
        Assertions.assertEquals("scpai", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.ruleMetadata().ruleType());
        Assertions.assertEquals("bcsglumma", model.ruleMetadata().title());
        Assertions.assertEquals("j", model.ruleMetadata().description());
        Assertions.assertEquals("dxob", model.ruleMetadata().rationale());
        Assertions.assertEquals("xkqpxo", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("npime", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("r", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("djwzrlov", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScanResultProperties model =
            new ScanResultProperties()
                .withRuleId("aoyfhrtxilnerkuj")
                .withStatus(RuleStatus.FINDING)
                .withIsTrimmed(false)
                .withQueryResults(
                    Arrays
                        .asList(
                            Arrays.asList("fqawrlyxw", "kcprbnw", "xgjvtbv", "ysszdnrujqguh"),
                            Arrays.asList("ouqfprwz"),
                            Arrays.asList("nguitnwuizgazxu", "izuckyfihrfidfvz")))
                .withRemediation(
                    new Remediation()
                        .withDescription("uht")
                        .withScripts(Arrays.asList("isdkfthwxmnteiw", "opvkmijcm"))
                        .withAutomated(false)
                        .withPortalLink("ufufsrp"))
                .withBaselineAdjustedResult(
                    new BaselineAdjustedResult()
                        .withBaseline(
                            new Baseline()
                                .withExpectedResults(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList()))
                                .withUpdatedTime(OffsetDateTime.parse("2021-08-05T10:27:23Z")))
                        .withStatus(RuleStatus.INTERNAL_ERROR)
                        .withResultsNotInBaseline(
                            Arrays
                                .asList(
                                    Arrays.asList("bzsgfyccsne", "mdwzjeiachboo", "flnrosfqpteehzz"),
                                    Arrays.asList("pyqr", "mzinpvswjdk", "rsoodqxhcrmnoh"),
                                    Arrays.asList("ckwhds"),
                                    Arrays.asList("fiyipjxsqwpgrj", "znorcj", "vsnb", "xqabnmocpcysh")))
                        .withResultsOnlyInBaseline(
                            Arrays.asList(Arrays.asList("fblj", "gpbtoqcjmklj", "vbqid", "qajzyulpkudjkr"))))
                .withRuleMetadata(
                    new VaRule()
                        .withRuleId("bzhfepgzgqexz")
                        .withSeverity(RuleSeverity.OBSOLETE)
                        .withCategory("scpai")
                        .withRuleType(RuleType.NEGATIVE_LIST)
                        .withTitle("bcsglumma")
                        .withDescription("j")
                        .withRationale("dxob")
                        .withQueryCheck(
                            new QueryCheck()
                                .withQuery("xkqpxo")
                                .withExpectedResult(
                                    Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList(), Arrays.asList()))
                                .withColumnNames(Arrays.asList("npime", "gstxgcp", "dg")))
                        .withBenchmarkReferences(
                            Arrays
                                .asList(
                                    new BenchmarkReference().withBenchmark("r").withReference("djwzrlov"),
                                    new BenchmarkReference().withBenchmark("lwhijcoejctbzaq").withReference("sycbkbfk"),
                                    new BenchmarkReference().withBenchmark("kdkexxp").withReference("fmxa"),
                                    new BenchmarkReference()
                                        .withBenchmark("fjpgddtocjjxhvp")
                                        .withReference("uexhdzx"))));
        model = BinaryData.fromObject(model).toObject(ScanResultProperties.class);
        Assertions.assertEquals("aoyfhrtxilnerkuj", model.ruleId());
        Assertions.assertEquals(RuleStatus.FINDING, model.status());
        Assertions.assertEquals(false, model.isTrimmed());
        Assertions.assertEquals("fqawrlyxw", model.queryResults().get(0).get(0));
        Assertions.assertEquals("uht", model.remediation().description());
        Assertions.assertEquals("isdkfthwxmnteiw", model.remediation().scripts().get(0));
        Assertions.assertEquals(false, model.remediation().automated());
        Assertions.assertEquals("ufufsrp", model.remediation().portalLink());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-05T10:27:23Z"), model.baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, model.baselineAdjustedResult().status());
        Assertions.assertEquals("bzsgfyccsne", model.baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("fblj", model.baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("bzhfepgzgqexz", model.ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.OBSOLETE, model.ruleMetadata().severity());
        Assertions.assertEquals("scpai", model.ruleMetadata().category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, model.ruleMetadata().ruleType());
        Assertions.assertEquals("bcsglumma", model.ruleMetadata().title());
        Assertions.assertEquals("j", model.ruleMetadata().description());
        Assertions.assertEquals("dxob", model.ruleMetadata().rationale());
        Assertions.assertEquals("xkqpxo", model.ruleMetadata().queryCheck().query());
        Assertions.assertEquals("npime", model.ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("r", model.ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("djwzrlov", model.ruleMetadata().benchmarkReferences().get(0).reference());
    }
}
