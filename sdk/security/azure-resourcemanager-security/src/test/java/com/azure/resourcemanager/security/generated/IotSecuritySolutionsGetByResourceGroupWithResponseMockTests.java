// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceDataType;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.IoTSecuritySolutionModel;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotSecuritySolutionsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"yaosthulzu\",\"properties\":{\"workspace\":\"gspxldlnoc\",\"displayName\":\"cygimizl\",\"status\":\"Disabled\",\"export\":[\"RawEvents\"],\"disabledDataSources\":[\"TwinData\"],\"iotHubs\":[\"lmsppp\",\"eszthjtryjs\",\"diylgzzuqixp\"],\"userDefinedResources\":{\"query\":\"bqowgvmxwbohxd\",\"querySubscriptions\":[\"oexb\"]},\"autoDiscoveredResources\":[\"nakaj\",\"scmne\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_EdgeLoggingOptions\",\"name\":\"qeumz\",\"status\":\"Disabled\"},{\"recommendationType\":\"IoT_IPFilter_PermissiveRule\",\"name\":\"gqaeiv\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_SharedCredentials\",\"name\":\"xrbgbzgfhzdza\",\"status\":\"Disabled\"},{\"recommendationType\":\"IoT_OpenPorts\",\"name\":\"vcbicfecthotbkj\",\"status\":\"Enabled\"}],\"unmaskedIpLoggingStatus\":\"Enabled\",\"additionalWorkspaces\":[{\"workspace\":\"vtwkyjdpayx\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"RawEvents\",\"Alerts\"]},{\"workspace\":\"qztjfkgb\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"Alerts\",\"Alerts\",\"RawEvents\"]},{\"workspace\":\"en\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\"]},{\"workspace\":\"heo\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"Alerts\",\"Alerts\"]}]},\"tags\":{\"bglaecctokfspvjr\":\"wypphtjtntcwgpd\",\"ftyptwjwiyyeo\":\"spkvrmp\"},\"id\":\"gmc\",\"name\":\"djmvphwfnu\",\"type\":\"slvfzzioxbgomv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IoTSecuritySolutionModel response = manager.iotSecuritySolutions()
            .getByResourceGroupWithResponse("ljgxot", "dam", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("yaosthulzu", response.location());
        Assertions.assertEquals("wypphtjtntcwgpd", response.tags().get("bglaecctokfspvjr"));
        Assertions.assertEquals("gspxldlnoc", response.workspace());
        Assertions.assertEquals("cygimizl", response.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.DISABLED, response.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, response.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, response.disabledDataSources().get(0));
        Assertions.assertEquals("lmsppp", response.iotHubs().get(0));
        Assertions.assertEquals("bqowgvmxwbohxd", response.userDefinedResources().query());
        Assertions.assertEquals("oexb", response.userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_EDGE_LOGGING_OPTIONS,
            response.recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.DISABLED,
            response.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.ENABLED, response.unmaskedIpLoggingStatus());
        Assertions.assertEquals("vtwkyjdpayx", response.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, response.additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.ALERTS,
            response.additionalWorkspaces().get(0).dataTypes().get(0));
    }
}
