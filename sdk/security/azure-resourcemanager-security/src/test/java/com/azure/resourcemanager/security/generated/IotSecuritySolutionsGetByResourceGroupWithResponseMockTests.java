// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceDataType;
import com.azure.resourcemanager.security.models.AdditionalWorkspaceType;
import com.azure.resourcemanager.security.models.DataSource;
import com.azure.resourcemanager.security.models.ExportData;
import com.azure.resourcemanager.security.models.IoTSecuritySolutionModel;
import com.azure.resourcemanager.security.models.RecommendationConfigStatus;
import com.azure.resourcemanager.security.models.RecommendationType;
import com.azure.resourcemanager.security.models.SecuritySolutionStatus;
import com.azure.resourcemanager.security.models.UnmaskedIpLoggingStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotSecuritySolutionsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"qejex\",\"properties\":{\"workspace\":\"huhdku\",\"displayName\":\"gywadrklpdyehjr\",\"status\":\"Enabled\",\"export\":[\"RawEvents\"],\"disabledDataSources\":[\"TwinData\",\"TwinData\",\"TwinData\"],\"iotHubs\":[\"mfvuhzmol\",\"veolngsfmhwdxqup\",\"mlhkl\",\"njqzmq\"],\"userDefinedResources\":{\"query\":\"hitrnw\",\"querySubscriptions\":[\"q\",\"bthb\",\"piqnrjoc\"]},\"autoDiscoveredResources\":[\"fvkywzrqeiad\",\"pkhuvnlmdcnut\",\"exmizunzbq\"],\"recommendationsConfiguration\":[{\"recommendationType\":\"IoT_IPFilter_DenyAll\",\"name\":\"ctfqhhvvwzprjaa\",\"status\":\"Disabled\"},{\"recommendationType\":\"IoT_PermissiveOutputFirewallRules\",\"name\":\"btvavlya\",\"status\":\"Enabled\"},{\"recommendationType\":\"IoT_PrivilegedDockerOptions\",\"name\":\"cn\",\"status\":\"Enabled\"}],\"unmaskedIpLoggingStatus\":\"Disabled\",\"additionalWorkspaces\":[{\"workspace\":\"uzqcrlkor\",\"type\":\"Sentinel\",\"dataTypes\":[\"Alerts\",\"RawEvents\",\"Alerts\",\"Alerts\"]},{\"workspace\":\"fyqncow\",\"type\":\"Sentinel\",\"dataTypes\":[\"RawEvents\",\"RawEvents\"]}]},\"tags\":{\"aakktbjor\":\"iaaosladag\",\"kajqhsnsejpli\":\"z\"},\"id\":\"l\",\"name\":\"yljzbk\",\"type\":\"wlfjwxgvtk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IoTSecuritySolutionModel response = manager.iotSecuritySolutions()
            .getByResourceGroupWithResponse("nyldjdkjvd", "yknkxioxhnrjlq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("qejex", response.location());
        Assertions.assertEquals("iaaosladag", response.tags().get("aakktbjor"));
        Assertions.assertEquals("huhdku", response.workspace());
        Assertions.assertEquals("gywadrklpdyehjr", response.displayName());
        Assertions.assertEquals(SecuritySolutionStatus.ENABLED, response.status());
        Assertions.assertEquals(ExportData.RAW_EVENTS, response.export().get(0));
        Assertions.assertEquals(DataSource.TWIN_DATA, response.disabledDataSources().get(0));
        Assertions.assertEquals("mfvuhzmol", response.iotHubs().get(0));
        Assertions.assertEquals("hitrnw", response.userDefinedResources().query());
        Assertions.assertEquals("q", response.userDefinedResources().querySubscriptions().get(0));
        Assertions.assertEquals(RecommendationType.IO_T_IPFILTER_DENY_ALL,
            response.recommendationsConfiguration().get(0).recommendationType());
        Assertions.assertEquals(RecommendationConfigStatus.DISABLED,
            response.recommendationsConfiguration().get(0).status());
        Assertions.assertEquals(UnmaskedIpLoggingStatus.DISABLED, response.unmaskedIpLoggingStatus());
        Assertions.assertEquals("uzqcrlkor", response.additionalWorkspaces().get(0).workspace());
        Assertions.assertEquals(AdditionalWorkspaceType.SENTINEL, response.additionalWorkspaces().get(0).type());
        Assertions.assertEquals(AdditionalWorkspaceDataType.ALERTS,
            response.additionalWorkspaces().get(0).dataTypes().get(0));
    }
}
