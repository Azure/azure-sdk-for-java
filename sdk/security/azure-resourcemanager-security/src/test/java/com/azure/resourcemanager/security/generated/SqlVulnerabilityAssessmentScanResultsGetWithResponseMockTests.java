// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScanResultsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ruleId\":\"uynf\",\"status\":\"NonFinding\",\"isTrimmed\":false,\"queryResults\":[[\"s\",\"horkslhraqk\"],[\"lwkffl\",\"qwmwqoguflteat\",\"egefzjx\",\"jtqbgysi\"],[\"hnvxwtd\",\"tcbjdbtqy\",\"kxunsaujqgbb\",\"vovoa\"],[\"gjsmbc\",\"loygsabdgdheron\",\"dun\"]],\"remediation\":{\"description\":\"vz\",\"scripts\":[\"qhgzuyxtrvfdb\",\"skgqjbvitptpvsf\"],\"automated\":true,\"portalLink\":\"hpiwrmu\"},\"baselineAdjustedResult\":{\"baseline\":{\"expectedResults\":[[\"y\",\"dwfbwxy\",\"dqtmggcpdrmeg\"],[\"rzctwymzskwqk\",\"g\",\"seiphgliup\"],[\"coobkjlcaxsqcomj\",\"qiincevxxkde\",\"pximziizmeq\"]],\"updatedTime\":\"2021-08-19T08:04:21Z\"},\"status\":\"Finding\",\"resultsNotInBaseline\":[[\"qxxpqhmlqi\"],[\"blmcvrjaznotdof\"],[\"pbqs\",\"qkpsbqsb\",\"m\",\"taftazgcx\"]],\"resultsOnlyInBaseline\":[[\"cqufylam\",\"ow\",\"gc\"]]},\"ruleMetadata\":{\"ruleId\":\"utehlka\",\"severity\":\"Informational\",\"category\":\"pquksxiknsgofu\",\"ruleType\":\"NegativeList\",\"title\":\"p\",\"description\":\"kggvmfnnbbx\",\"rationale\":\"dfkkedeetxtpwcv\",\"queryCheck\":{\"query\":\"wsunjzijaciwmmpd\",\"expectedResult\":[[\"nbzzsnfz\"]],\"columnNames\":[\"iwsuanzhwsyui\",\"kzqqhbtfloilmkf\",\"eoiipjpngvyvu\",\"ikdlpsxntugfwimq\"]},\"benchmarkReferences\":[{\"benchmark\":\"locfmvsw\",\"reference\":\"jeleifqhdxt\"},{\"benchmark\":\"ulkrybpaev\",\"reference\":\"byjecrq\"},{\"benchmark\":\"akkchs\",\"reference\":\"ulborcxuibsdq\"},{\"benchmark\":\"yblpectsmwpgwe\",\"reference\":\"hbjq\"}]}},\"id\":\"qfbleruf\",\"name\":\"llcshjuci\",\"type\":\"bymjjvtpne\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScanResult response = manager.sqlVulnerabilityAssessmentScanResults()
            .getWithResponse("uzkeutuip", "clzjwaqdz", "ydewuwxyll", "zzevtzqwczochwb",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("uynf", response.properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, response.properties().status());
        Assertions.assertEquals(false, response.properties().isTrimmed());
        Assertions.assertEquals("s", response.properties().queryResults().get(0).get(0));
        Assertions.assertEquals("vz", response.properties().remediation().description());
        Assertions.assertEquals("qhgzuyxtrvfdb", response.properties().remediation().scripts().get(0));
        Assertions.assertEquals(true, response.properties().remediation().automated());
        Assertions.assertEquals("hpiwrmu", response.properties().remediation().portalLink());
        Assertions.assertEquals("y",
            response.properties().baselineAdjustedResult().baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-19T08:04:21Z"),
            response.properties().baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.FINDING, response.properties().baselineAdjustedResult().status());
        Assertions.assertEquals("qxxpqhmlqi",
            response.properties().baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("cqufylam",
            response.properties().baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("utehlka", response.properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.INFORMATIONAL, response.properties().ruleMetadata().severity());
        Assertions.assertEquals("pquksxiknsgofu", response.properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, response.properties().ruleMetadata().ruleType());
        Assertions.assertEquals("p", response.properties().ruleMetadata().title());
        Assertions.assertEquals("kggvmfnnbbx", response.properties().ruleMetadata().description());
        Assertions.assertEquals("dfkkedeetxtpwcv", response.properties().ruleMetadata().rationale());
        Assertions.assertEquals("wsunjzijaciwmmpd", response.properties().ruleMetadata().queryCheck().query());
        Assertions.assertEquals("nbzzsnfz",
            response.properties().ruleMetadata().queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("iwsuanzhwsyui",
            response.properties().ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("locfmvsw",
            response.properties().ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("jeleifqhdxt",
            response.properties().ruleMetadata().benchmarkReferences().get(0).reference());
    }
}
