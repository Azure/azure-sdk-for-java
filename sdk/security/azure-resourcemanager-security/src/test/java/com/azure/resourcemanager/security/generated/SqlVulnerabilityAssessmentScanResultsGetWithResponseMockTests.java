// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResult;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScanResultsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"ruleId\":\"bwbgwzhbhfljey\",\"status\":\"NonFinding\",\"isTrimmed\":true,\"queryResults\":[[\"hr\",\"yakzuafapwxsvd\",\"atjiobnirgoextqd\",\"wtgntimznupb\"],[\"bsetkodsqv\",\"edaakghcrzmm\"]],\"remediation\":{\"description\":\"vdhdgdiwmlgs\",\"scripts\":[\"etqjisjm\"],\"automated\":true,\"portalLink\":\"aqfkakhgkrvtyycv\"},\"baselineAdjustedResult\":{\"baseline\":{\"expectedResults\":[[\"qawfusqpf\",\"xkczbdypbbimhjb\",\"zvoortc\",\"nh\"],[\"cyuzlybqscibv\",\"lkv\",\"kcafnwqhawv\"]],\"updatedTime\":\"2021-02-03T09:33:25Z\"},\"status\":\"Finding\",\"resultsNotInBaseline\":[[\"lmgjzrycwpbgum\",\"hmxpucknsastl\",\"smg\",\"micttrvl\"],[\"j\",\"xok\",\"xamqecjrzvlcivqx\"],[\"mklphxwww\",\"ojk\"],[\"nfbrzjvfsunhaev\",\"ahx\"]],\"resultsOnlyInBaseline\":[[\"ywuahwcorewc\",\"naaxqjfdajr\",\"gim\",\"mggewdqbxexfy\"],[\"vussuqks\",\"wsfxay\"],[\"byeywpmohnrtli\",\"ffydzt\",\"qrf\"],[\"ynzfwvzdteqjmyqx\",\"hgkaxnyprijyoxx\"]]},\"ruleMetadata\":{\"ruleId\":\"so\",\"severity\":\"Obsolete\",\"category\":\"cc\",\"ruleType\":\"Binary\",\"title\":\"pjmspau\",\"description\":\"qom\",\"rationale\":\"alknuyapvibzic\",\"queryCheck\":{\"query\":\"chcaptkhjxnrk\",\"expectedResult\":[[\"ccklzhzn\"],[\"vlxy\",\"mnctigp\"],[\"ywicklktgkdprtq\",\"ytdc\",\"efuhb\"],[\"bvjsbgmlamoax\",\"ayt\",\"pkvbp\",\"ltcwsexheeocnqo\"]],\"columnNames\":[\"epvlryszfhd\",\"yfhxohzbzhhav\",\"fuxnvkdslcofuvtf\",\"ehoui\"]},\"benchmarkReferences\":[{\"benchmark\":\"hjfddxq\",\"reference\":\"ssubzssp\"},{\"benchmark\":\"vail\",\"reference\":\"uyvxpqwlkqdgwbzt\"},{\"benchmark\":\"hldwvogl\",\"reference\":\"jdhgslorm\"}]}},\"id\":\"btofcvxkyl\",\"name\":\"cnsdy\",\"type\":\"m\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        ScanResult response = manager.sqlVulnerabilityAssessmentScanResults()
            .getWithResponse("crzhnsbylg", "gbhuqczou", "nbfulv", "xglxoqwbztil", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("bwbgwzhbhfljey", response.properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, response.properties().status());
        Assertions.assertEquals(true, response.properties().isTrimmed());
        Assertions.assertEquals("hr", response.properties().queryResults().get(0).get(0));
        Assertions.assertEquals("vdhdgdiwmlgs", response.properties().remediation().description());
        Assertions.assertEquals("etqjisjm", response.properties().remediation().scripts().get(0));
        Assertions.assertEquals(true, response.properties().remediation().automated());
        Assertions.assertEquals("aqfkakhgkrvtyycv", response.properties().remediation().portalLink());
        Assertions.assertEquals("qawfusqpf",
            response.properties().baselineAdjustedResult().baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T09:33:25Z"),
            response.properties().baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.FINDING, response.properties().baselineAdjustedResult().status());
        Assertions.assertEquals("lmgjzrycwpbgum",
            response.properties().baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("ywuahwcorewc",
            response.properties().baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("so", response.properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.OBSOLETE, response.properties().ruleMetadata().severity());
        Assertions.assertEquals("cc", response.properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.BINARY, response.properties().ruleMetadata().ruleType());
        Assertions.assertEquals("pjmspau", response.properties().ruleMetadata().title());
        Assertions.assertEquals("qom", response.properties().ruleMetadata().description());
        Assertions.assertEquals("alknuyapvibzic", response.properties().ruleMetadata().rationale());
        Assertions.assertEquals("chcaptkhjxnrk", response.properties().ruleMetadata().queryCheck().query());
        Assertions.assertEquals("ccklzhzn",
            response.properties().ruleMetadata().queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("epvlryszfhd", response.properties().ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("hjfddxq",
            response.properties().ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("ssubzssp",
            response.properties().ruleMetadata().benchmarkReferences().get(0).reference());
    }
}
