// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScanResultsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ruleId\":\"odqxxpqhm\",\"status\":\"NonFinding\",\"isTrimmed\":false,\"queryResults\":[[\"c\",\"rjaznotdofqvpb\"],[\"dqk\"],[\"bqsbbmitaf\"],[\"zgcxsvqlcquf\",\"lamxowbgc\",\"oyutehlk\",\"rvtipquks\"]],\"remediation\":{\"description\":\"nsgofunsw\",\"scripts\":[\"ekggvmfnnbbxn\",\"dfkkedeetxtpwcv\",\"i\"],\"automated\":true,\"portalLink\":\"njzijaciwm\"},\"baselineAdjustedResult\":{\"baseline\":{\"expectedResults\":[[\"onbz\"],[\"nfzyviiwsuanz\",\"wsyuifkzqqhbtflo\",\"lmkf\",\"eoiipjpngvyvu\"]],\"updatedTime\":\"2021-09-05T20:14:24Z\"},\"status\":\"NonFinding\",\"resultsNotInBaseline\":[[\"ntugfwi\",\"qn\",\"yclocfmvswxvjel\"],[\"fqhdxt\",\"wulkr\"]],\"resultsOnlyInBaseline\":[[\"evy\",\"byjecrq\"],[\"akkchs\",\"oulborcxuibsdqbd\",\"blpectsmwpg\"],[\"oqhbjqlqfbler\",\"f\"],[\"lcshjucihbym\",\"jvtpnerxvjeaz\",\"ahelh\"]]},\"ruleMetadata\":{\"ruleId\":\"yiieqamct\",\"severity\":\"Low\",\"category\":\"gfzdosiz\",\"ruleType\":\"NegativeList\",\"title\":\"vflgzhc\",\"description\":\"gwahcrxo\",\"rationale\":\"rutvnpccxz\",\"queryCheck\":{\"query\":\"pmhz\",\"expectedResult\":[[\"kvnnjdtujq\",\"vhnjvpmxnhtmz\"],[\"qlfxolrwv\",\"lgxyf\",\"swequflzyyopoay\"],[\"wgwqubot\"],[\"ufrkwjiemimdt\",\"powewjs\"]],\"columnNames\":[\"eedddrftfquu\",\"p\",\"lhs\",\"igeeuwbr\"]},\"benchmarkReferences\":[{\"benchmark\":\"f\",\"reference\":\"qn\"},{\"benchmark\":\"dqw\",\"reference\":\"xoqgvbzpggpw\"},{\"benchmark\":\"y\",\"reference\":\"qajejirvavrvkgp\"}]}},\"id\":\"gplbjuvlnhxnrnjh\",\"name\":\"na\",\"type\":\"ge\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScanResult response = manager.sqlVulnerabilityAssessmentScanResults()
            .getWithResponse("gliupqscoob", "jlcaxsqcomjiqi", "ncevxxkdevpxi", "ziizmeqmdu",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("odqxxpqhm", response.properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, response.properties().status());
        Assertions.assertEquals(false, response.properties().isTrimmed());
        Assertions.assertEquals("c", response.properties().queryResults().get(0).get(0));
        Assertions.assertEquals("nsgofunsw", response.properties().remediation().description());
        Assertions.assertEquals("ekggvmfnnbbxn", response.properties().remediation().scripts().get(0));
        Assertions.assertEquals(true, response.properties().remediation().automated());
        Assertions.assertEquals("njzijaciwm", response.properties().remediation().portalLink());
        Assertions.assertEquals("onbz",
            response.properties().baselineAdjustedResult().baseline().expectedResults().get(0).get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-05T20:14:24Z"),
            response.properties().baselineAdjustedResult().baseline().updatedTime());
        Assertions.assertEquals(RuleStatus.NON_FINDING, response.properties().baselineAdjustedResult().status());
        Assertions.assertEquals("ntugfwi",
            response.properties().baselineAdjustedResult().resultsNotInBaseline().get(0).get(0));
        Assertions.assertEquals("evy",
            response.properties().baselineAdjustedResult().resultsOnlyInBaseline().get(0).get(0));
        Assertions.assertEquals("yiieqamct", response.properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.LOW, response.properties().ruleMetadata().severity());
        Assertions.assertEquals("gfzdosiz", response.properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.NEGATIVE_LIST, response.properties().ruleMetadata().ruleType());
        Assertions.assertEquals("vflgzhc", response.properties().ruleMetadata().title());
        Assertions.assertEquals("gwahcrxo", response.properties().ruleMetadata().description());
        Assertions.assertEquals("rutvnpccxz", response.properties().ruleMetadata().rationale());
        Assertions.assertEquals("pmhz", response.properties().ruleMetadata().queryCheck().query());
        Assertions.assertEquals("kvnnjdtujq",
            response.properties().ruleMetadata().queryCheck().expectedResult().get(0).get(0));
        Assertions.assertEquals("eedddrftfquu", response.properties().ruleMetadata().queryCheck().columnNames().get(0));
        Assertions.assertEquals("f", response.properties().ruleMetadata().benchmarkReferences().get(0).benchmark());
        Assertions.assertEquals("qn", response.properties().ruleMetadata().benchmarkReferences().get(0).reference());
    }
}
