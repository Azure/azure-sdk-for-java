// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.CloudName;
import com.azure.resourcemanager.security.models.CloudOffering;
import com.azure.resourcemanager.security.models.EnvironmentData;
import com.azure.resourcemanager.security.models.SecurityConnector;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SecurityConnectorsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"hierarchyIdentifier\":\"nddlirqq\",\"hierarchyIdentifierTrialEndDate\":\"2021-07-04T20:06:19Z\",\"environmentName\":\"AzureDevOps\",\"offerings\":[{\"offeringType\":\"CloudOffering\",\"description\":\"pd\"},{\"offeringType\":\"CloudOffering\",\"description\":\"eevivkig\"},{\"offeringType\":\"CloudOffering\",\"description\":\"oklsuffpxesw\"}],\"environmentData\":{\"environmentType\":\"EnvironmentData\"}},\"location\":\"lfytbltytvnpbgce\",\"tags\":{\"zzwweoblb\":\"dfclmowurofofkbc\",\"hixcc\":\"dq\",\"og\":\"kf\"},\"id\":\"yoxmyqzyqepg\",\"name\":\"bzd\",\"type\":\"luokc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SecurityConnector response = manager.securityConnectors().define("pvnpeukgnmfakeqn").withRegion("jropxfqdm")
            .withExistingResourceGroup("zammpk").withTags(mapOf("vhwirilamq", "nyjyuwqlzwgd", "gacde", "rhqdoxd"))
            .withHierarchyIdentifier("mlcsvk").withEnvironmentName(CloudName.AZURE)
            .withOfferings(Arrays.asList(new CloudOffering(), new CloudOffering()))
            .withEnvironmentData(new EnvironmentData()).create();

        Assertions.assertEquals("lfytbltytvnpbgce", response.location());
        Assertions.assertEquals("dfclmowurofofkbc", response.tags().get("zzwweoblb"));
        Assertions.assertEquals("nddlirqq", response.hierarchyIdentifier());
        Assertions.assertEquals(CloudName.AZURE_DEV_OPS, response.environmentName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
