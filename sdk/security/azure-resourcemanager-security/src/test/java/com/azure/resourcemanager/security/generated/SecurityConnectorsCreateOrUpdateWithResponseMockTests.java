// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.CloudName;
import com.azure.resourcemanager.security.models.CloudOffering;
import com.azure.resourcemanager.security.models.EnvironmentData;
import com.azure.resourcemanager.security.models.SecurityConnector;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SecurityConnectorsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"hierarchyIdentifier\":\"cnuestbsliejdnc\",\"hierarchyIdentifierTrialEndDate\":\"2021-02-08T15:18:26Z\",\"environmentName\":\"Azure\",\"offerings\":[{\"offeringType\":\"CloudOffering\",\"description\":\"iytehhxtzxqdwbym\"},{\"offeringType\":\"CloudOffering\",\"description\":\"lngncrdorc\"}],\"environmentData\":{\"environmentType\":\"EnvironmentData\"}},\"location\":\"s\",\"tags\":{\"dbyhqtzcvim\":\"ekh\"},\"id\":\"wckozvlf\",\"name\":\"mtrtsv\",\"type\":\"upqtzckj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SecurityConnector response = manager.securityConnectors()
            .define("cqqnlsjxcsc")
            .withRegion("lsfo")
            .withExistingResourceGroup("lrlqxbctatezyozd")
            .withTags(mapOf("elpfijtezgxmpes", "mtfcqmmynbr", "f", "amadlerzi", "mirmnrijefmrt", "ivczktllxswtdap",
                "ffmwt", "xcevdspth"))
            .withHierarchyIdentifier("dmra")
            .withEnvironmentName(CloudName.AZURE)
            .withOfferings(Arrays.asList(new CloudOffering(), new CloudOffering(), new CloudOffering()))
            .withEnvironmentData(new EnvironmentData())
            .create();

        Assertions.assertEquals("s", response.location());
        Assertions.assertEquals("ekh", response.tags().get("dbyhqtzcvim"));
        Assertions.assertEquals("cnuestbsliejdnc", response.hierarchyIdentifier());
        Assertions.assertEquals(CloudName.AZURE, response.environmentName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
