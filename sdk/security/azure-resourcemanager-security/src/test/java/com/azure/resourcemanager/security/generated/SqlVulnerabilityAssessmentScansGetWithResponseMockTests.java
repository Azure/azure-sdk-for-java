// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.Scan;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScansGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"triggerType\":\"Recurring\",\"state\":\"Failed\",\"server\":\"cil\",\"database\":\"znlaxozqthk\",\"sqlVersion\":\"fugfzizy\",\"startTime\":\"2021-04-17T09:55:57Z\",\"endTime\":\"2021-12-08T08:55:26Z\",\"highSeverityFailedRulesCount\":699080226,\"mediumSeverityFailedRulesCount\":445750891,\"lowSeverityFailedRulesCount\":827248199,\"totalPassedRulesCount\":1083198172,\"totalFailedRulesCount\":33864061,\"totalRulesCount\":885544179,\"isBaselineApplied\":false,\"lastScanTime\":\"2021-05-08T13:36:50Z\"},\"id\":\"jucamns\",\"name\":\"qoitwhmucjiu\",\"type\":\"cxyvehykl\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Scan response = manager.sqlVulnerabilityAssessmentScans()
            .getWithResponse("mfxzspf", "vsl", "zipplxg", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(ScanTriggerType.RECURRING, response.properties().triggerType());
        Assertions.assertEquals(ScanState.FAILED, response.properties().state());
        Assertions.assertEquals("cil", response.properties().server());
        Assertions.assertEquals("znlaxozqthk", response.properties().database());
        Assertions.assertEquals("fugfzizy", response.properties().sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-17T09:55:57Z"), response.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-08T08:55:26Z"), response.properties().endTime());
        Assertions.assertEquals(699080226, response.properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(445750891, response.properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(827248199, response.properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(1083198172, response.properties().totalPassedRulesCount());
        Assertions.assertEquals(33864061, response.properties().totalFailedRulesCount());
        Assertions.assertEquals(885544179, response.properties().totalRulesCount());
        Assertions.assertEquals(false, response.properties().isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-08T13:36:50Z"), response.properties().lastScanTime());
    }
}
