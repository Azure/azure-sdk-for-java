// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.Scan;
import com.azure.resourcemanager.security.models.ScanState;
import com.azure.resourcemanager.security.models.ScanTriggerType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScansGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"triggerType\":\"OnDemand\",\"state\":\"Failed\",\"server\":\"f\",\"database\":\"lzfbpntogken\",\"sqlVersion\":\"khbmcarmoyfxxk\",\"startTime\":\"2021-01-07T21:38:42Z\",\"endTime\":\"2021-04-22T07:09:08Z\",\"highSeverityFailedRulesCount\":686540302,\"mediumSeverityFailedRulesCount\":302699807,\"lowSeverityFailedRulesCount\":1307514543,\"totalPassedRulesCount\":262414797,\"totalFailedRulesCount\":732326213,\"totalRulesCount\":1043556293,\"isBaselineApplied\":true,\"lastScanTime\":\"2021-05-26T20:03:53Z\"},\"id\":\"t\",\"name\":\"peerscd\",\"type\":\"rnrnjrcufmbgacnr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SecurityManager manager =
            SecurityManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Scan response =
            manager
                .sqlVulnerabilityAssessmentScans()
                .getWithResponse("th", "eatnejrnminzq", "lgtkihoni", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(ScanTriggerType.ON_DEMAND, response.properties().triggerType());
        Assertions.assertEquals(ScanState.FAILED, response.properties().state());
        Assertions.assertEquals("f", response.properties().server());
        Assertions.assertEquals("lzfbpntogken", response.properties().database());
        Assertions.assertEquals("khbmcarmoyfxxk", response.properties().sqlVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-07T21:38:42Z"), response.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-22T07:09:08Z"), response.properties().endTime());
        Assertions.assertEquals(686540302, response.properties().highSeverityFailedRulesCount());
        Assertions.assertEquals(302699807, response.properties().mediumSeverityFailedRulesCount());
        Assertions.assertEquals(1307514543, response.properties().lowSeverityFailedRulesCount());
        Assertions.assertEquals(262414797, response.properties().totalPassedRulesCount());
        Assertions.assertEquals(732326213, response.properties().totalFailedRulesCount());
        Assertions.assertEquals(1043556293, response.properties().totalRulesCount());
        Assertions.assertEquals(true, response.properties().isBaselineApplied());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-26T20:03:53Z"), response.properties().lastScanTime());
    }
}
