// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.GovernanceRuleEmailNotification;
import com.azure.resourcemanager.security.models.GovernanceRuleMetadata;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSource;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GovernanceRulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"tenantId\":\"jsji\",\"displayName\":\"krpskcjhmm\",\"description\":\"bnivdqtkykp\",\"remediationTimeframe\":\"nlsfgnyscac\",\"isGracePeriod\":false,\"rulePriority\":1074099871,\"isDisabled\":false,\"ruleType\":\"Integrated\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"xxicee\",\"vjwyuveox\",\"pzzwahdrdvhaztk\"],\"conditionSets\":[\"dataivz\",\"datagxmbrygmwibiosiq\",\"dataykqfdqwdrtx\"],\"includeMemberScopes\":true,\"ownerSource\":{\"type\":\"Manually\",\"value\":\"mrcokzzertkounz\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":false,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"mfpopikzebqnnf\",\"createdOn\":\"2021-09-07T18:51:20Z\",\"updatedBy\":\"qowsdlkhczygpmg\",\"updatedOn\":\"2021-09-14T19:58:23Z\"}},\"id\":\"ulojhhylx\",\"name\":\"evfiyymotu\",\"type\":\"bybwjmtftcvelnir\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        GovernanceRule response = manager.governanceRules()
            .define("jigcwtspanb")
            .withExistingScope("xkrkqgvxrktj")
            .withDisplayName("edyybruholaemwcg")
            .withDescription("mrimaabsqql")
            .withRemediationTimeframe("b")
            .withIsGracePeriod(false)
            .withRulePriority(1578967576)
            .withIsDisabled(true)
            .withRuleType(GovernanceRuleType.SERVICE_NOW)
            .withSourceResourceType(GovernanceRuleSourceResourceType.ASSESSMENTS)
            .withExcludedScopes(Arrays.asList("bjsmihrije"))
            .withConditionSets(Arrays.asList("datafsjwfcz", "datalkvbgukbsv", "datawyo"))
            .withIncludeMemberScopes(false)
            .withOwnerSource(new GovernanceRuleOwnerSource().withType(GovernanceRuleOwnerSourceType.BY_TAG)
                .withValue("nhjgclxaxwcffasp"))
            .withGovernanceEmailNotification(
                new GovernanceRuleEmailNotification().withDisableManagerEmailNotification(false)
                    .withDisableOwnerEmailNotification(true))
            .withMetadata(new GovernanceRuleMetadata())
            .create();

        Assertions.assertEquals("krpskcjhmm", response.displayName());
        Assertions.assertEquals("bnivdqtkykp", response.description());
        Assertions.assertEquals("nlsfgnyscac", response.remediationTimeframe());
        Assertions.assertEquals(false, response.isGracePeriod());
        Assertions.assertEquals(1074099871, response.rulePriority());
        Assertions.assertEquals(false, response.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, response.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, response.sourceResourceType());
        Assertions.assertEquals("xxicee", response.excludedScopes().get(0));
        Assertions.assertEquals(true, response.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.MANUALLY, response.ownerSource().type());
        Assertions.assertEquals("mrcokzzertkounz", response.ownerSource().value());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableOwnerEmailNotification());
    }
}
