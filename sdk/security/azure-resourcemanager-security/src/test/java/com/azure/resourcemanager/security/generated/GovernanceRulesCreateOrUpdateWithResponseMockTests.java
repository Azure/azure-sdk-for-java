// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.GovernanceRuleEmailNotification;
import com.azure.resourcemanager.security.models.GovernanceRuleMetadata;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSource;
import com.azure.resourcemanager.security.models.GovernanceRuleOwnerSourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleSourceResourceType;
import com.azure.resourcemanager.security.models.GovernanceRuleType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GovernanceRulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"tenantId\":\"nwbhanzgesfhshag\",\"displayName\":\"ahn\",\"description\":\"pbyfyvynpmggq\",\"remediationTimeframe\":\"g\",\"isGracePeriod\":true,\"rulePriority\":177836950,\"isDisabled\":false,\"ruleType\":\"Integrated\",\"sourceResourceType\":\"Assessments\",\"excludedScopes\":[\"dvfoizorbl\"],\"conditionSets\":[\"datajzsaxzgkqwvde\"],\"includeMemberScopes\":false,\"ownerSource\":{\"type\":\"Manually\",\"value\":\"hi\"},\"governanceEmailNotification\":{\"disableManagerEmailNotification\":false,\"disableOwnerEmailNotification\":false},\"metadata\":{\"createdBy\":\"ubpebrm\",\"createdOn\":\"2021-10-07T01:34:45Z\",\"updatedBy\":\"p\",\"updatedOn\":\"2021-05-15T19:53:19Z\"}},\"id\":\"b\",\"name\":\"tpkimskhnkkhbykr\",\"type\":\"mhrcmelycpgoku\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        GovernanceRule response = manager.governanceRules().define("aaugic").withExistingScope("csjvjnkoiznzsqbi")
            .withDisplayName("zbassqfyy").withDescription("ppeygkbzbloasy").withRemediationTimeframe("h")
            .withIsGracePeriod(true).withRulePriority(1144181952).withIsDisabled(true)
            .withRuleType(GovernanceRuleType.SERVICE_NOW)
            .withSourceResourceType(GovernanceRuleSourceResourceType.ASSESSMENTS)
            .withExcludedScopes(Arrays.asList("uvsqj", "rvjnqtaqgxqb", "kceincnrec"))
            .withConditionSets(Arrays.asList("dataiywevsfg", "datarmnszdosmjsqsvz")).withIncludeMemberScopes(false)
            .withOwnerSource(
                new GovernanceRuleOwnerSource().withType(GovernanceRuleOwnerSourceType.MANUALLY).withValue("ghndae"))
            .withGovernanceEmailNotification(new GovernanceRuleEmailNotification()
                .withDisableManagerEmailNotification(false).withDisableOwnerEmailNotification(true))
            .withMetadata(new GovernanceRuleMetadata()).create();

        Assertions.assertEquals("ahn", response.displayName());
        Assertions.assertEquals("pbyfyvynpmggq", response.description());
        Assertions.assertEquals("g", response.remediationTimeframe());
        Assertions.assertEquals(true, response.isGracePeriod());
        Assertions.assertEquals(177836950, response.rulePriority());
        Assertions.assertEquals(false, response.isDisabled());
        Assertions.assertEquals(GovernanceRuleType.INTEGRATED, response.ruleType());
        Assertions.assertEquals(GovernanceRuleSourceResourceType.ASSESSMENTS, response.sourceResourceType());
        Assertions.assertEquals("dvfoizorbl", response.excludedScopes().get(0));
        Assertions.assertEquals(false, response.includeMemberScopes());
        Assertions.assertEquals(GovernanceRuleOwnerSourceType.MANUALLY, response.ownerSource().type());
        Assertions.assertEquals("hi", response.ownerSource().value());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableManagerEmailNotification());
        Assertions.assertEquals(false, response.governanceEmailNotification().disableOwnerEmailNotification());
    }
}
