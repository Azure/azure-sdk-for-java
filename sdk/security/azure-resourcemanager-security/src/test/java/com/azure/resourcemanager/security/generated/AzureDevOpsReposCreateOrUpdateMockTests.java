// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsRepository;
import com.azure.resourcemanager.security.models.AzureDevOpsRepositoryProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureDevOpsReposCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningStatusMessage\":\"knsastlpsmgomi\",\"provisioningStatusUpdateTimeUtc\":\"2021-11-01T08:22:43Z\",\"provisioningState\":\"Succeeded\",\"parentOrgName\":\"vvjmxokxx\",\"parentProjectName\":\"qecjrzvlcivqx\",\"repoId\":\"mklphxwww\",\"repoUrl\":\"jkbgnfbr\",\"visibility\":\"vfsunhaevla\",\"onboardingState\":\"Onboarded\",\"actionableRemediation\":{\"state\":\"Enabled\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"ahwcorewcnn\",\"category\":\"Dependencies\"},{\"minimumSeverityLevel\":\"jfdaj\",\"category\":\"Containers\"}],\"branchConfiguration\":{\"branchNames\":[\"mggewdqbxexfy\",\"nvussuqk\"],\"annotateDefaultBranch\":\"Disabled\"},\"inheritFromParentState\":\"Enabled\"}},\"id\":\"xayzqbyeyw\",\"name\":\"mohnrtl\",\"type\":\"kffydztkqrfbgy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsRepository response = manager.azureDevOpsRepos()
            .define("vhed")
            .withExistingProject("fapwxsvdeatjiobn", "rgoextqdnw", "gntimz", "upbmtbsetkods")
            .withProperties(new AzureDevOpsRepositoryProperties().withParentOrgName("vdhdgdiwmlgs")
                .withParentProjectName("fetq")
                .withOnboardingState(OnboardingState.NOT_ONBOARDED)
                .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.DISABLED)
                    .withCategoryConfigurations(Arrays.asList(
                        new CategoryConfiguration().withMinimumSeverityLevel("qpfzxkczbd")
                            .withCategory(RuleCategory.CONTAINERS),
                        new CategoryConfiguration().withMinimumSeverityLevel("imh")
                            .withCategory(RuleCategory.CONTAINERS),
                        new CategoryConfiguration().withMinimumSeverityLevel("voortcl")
                            .withCategory(RuleCategory.CONTAINERS)))
                    .withBranchConfiguration(
                        new TargetBranchConfiguration().withBranchNames(Arrays.asList("uzlybqs", "ibvylkv"))
                            .withAnnotateDefaultBranch(AnnotateDefaultBranchState.DISABLED))
                    .withInheritFromParentState(InheritFromParentState.ENABLED)))
            .create();

        Assertions.assertEquals("vvjmxokxx", response.properties().parentOrgName());
        Assertions.assertEquals("qecjrzvlcivqx", response.properties().parentProjectName());
        Assertions.assertEquals(OnboardingState.ONBOARDED, response.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.ENABLED,
            response.properties().actionableRemediation().state());
        Assertions.assertEquals("ahwcorewcnn",
            response.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.DEPENDENCIES,
            response.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("mggewdqbxexfy",
            response.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            response.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.ENABLED,
            response.properties().actionableRemediation().inheritFromParentState());
    }
}
