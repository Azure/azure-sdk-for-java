// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsRepository;
import com.azure.resourcemanager.security.models.AzureDevOpsRepositoryProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureDevOpsReposCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningStatusMessage\":\"nrswknpdrgnmz\",\"provisioningStatusUpdateTimeUtc\":\"2021-06-28T00:31:56Z\",\"provisioningState\":\"Succeeded\",\"parentOrgName\":\"fqckie\",\"parentProjectName\":\"rejyoyb\",\"repoId\":\"ftusdwmnrt\",\"repoUrl\":\"bucnnrov\",\"visibility\":\"epxwsicvwqzocsfs\",\"onboardingState\":\"OnboardedByOtherConnector\",\"actionableRemediation\":{\"state\":\"None\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"wdibu\",\"category\":\"Secrets\"},{\"minimumSeverityLevel\":\"ga\",\"category\":\"Containers\"},{\"minimumSeverityLevel\":\"hry\",\"category\":\"Artifacts\"},{\"minimumSeverityLevel\":\"knuubxcwojt\",\"category\":\"Secrets\"}],\"branchConfiguration\":{\"branchNames\":[\"py\",\"evffifu\",\"gtdow\"],\"annotateDefaultBranch\":\"Disabled\"},\"inheritFromParentState\":\"Disabled\"}},\"id\":\"fcbybpchrtcz\",\"name\":\"jcujyznvyrjqdjlg\",\"type\":\"ui\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsRepository response = manager.azureDevOpsRepos()
            .define("uszbdjrdfeuj")
            .withExistingProject("ufl", "syzzdcrolr", "esbomphz", "ymunwjivt")
            .withProperties(new AzureDevOpsRepositoryProperties().withParentOrgName("ydzin")
                .withParentProjectName("oulpozmdahy")
                .withOnboardingState(OnboardingState.ONBOARDED)
                .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.DISABLED)
                    .withCategoryConfigurations(
                        Arrays.asList(new CategoryConfiguration().withMinimumSeverityLevel("xmaxcjp")
                            .withCategory(RuleCategory.DEPENDENCIES)))
                    .withBranchConfiguration(new TargetBranchConfiguration()
                        .withBranchNames(Arrays.asList("dwdsoqtbfkvuozbz", "hn", "ekwanklp", "rlcydjht"))
                        .withAnnotateDefaultBranch(AnnotateDefaultBranchState.ENABLED))
                    .withInheritFromParentState(InheritFromParentState.ENABLED)))
            .create();

        Assertions.assertEquals("fqckie", response.properties().parentOrgName());
        Assertions.assertEquals("rejyoyb", response.properties().parentProjectName());
        Assertions.assertEquals(OnboardingState.ONBOARDED_BY_OTHER_CONNECTOR, response.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.NONE, response.properties().actionableRemediation().state());
        Assertions.assertEquals("wdibu",
            response.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.SECRETS,
            response.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("py",
            response.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            response.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.DISABLED,
            response.properties().actionableRemediation().inheritFromParentState());
    }
}
