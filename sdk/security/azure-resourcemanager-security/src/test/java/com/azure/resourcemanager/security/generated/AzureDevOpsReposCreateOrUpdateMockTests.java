// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.ActionableRemediation;
import com.azure.resourcemanager.security.models.ActionableRemediationState;
import com.azure.resourcemanager.security.models.AnnotateDefaultBranchState;
import com.azure.resourcemanager.security.models.AzureDevOpsRepository;
import com.azure.resourcemanager.security.models.AzureDevOpsRepositoryProperties;
import com.azure.resourcemanager.security.models.CategoryConfiguration;
import com.azure.resourcemanager.security.models.DevOpsProvisioningState;
import com.azure.resourcemanager.security.models.InheritFromParentState;
import com.azure.resourcemanager.security.models.OnboardingState;
import com.azure.resourcemanager.security.models.RuleCategory;
import com.azure.resourcemanager.security.models.TargetBranchConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AzureDevOpsReposCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningStatusMessage\":\"poipdjxyotgvrax\",\"provisioningStatusUpdateTimeUtc\":\"2021-07-09T17:08:15Z\",\"provisioningState\":\"Succeeded\",\"parentOrgName\":\"fszkrlkosjwrrets\",\"parentProjectName\":\"qfgksdiim\",\"repoId\":\"ixviob\",\"repoUrl\":\"bngeuwhd\",\"visibility\":\"gqamhbmggnqxnex\",\"onboardingState\":\"NotOnboarded\",\"actionableRemediation\":{\"state\":\"Disabled\",\"categoryConfigurations\":[{\"minimumSeverityLevel\":\"okstkvomdqxno\",\"category\":\"Artifacts\"},{\"minimumSeverityLevel\":\"papi\",\"category\":\"Code\"},{\"minimumSeverityLevel\":\"d\",\"category\":\"Artifacts\"},{\"minimumSeverityLevel\":\"un\",\"category\":\"Artifacts\"}],\"branchConfiguration\":{\"branchNames\":[\"ocbzvvxdvphxmw\"],\"annotateDefaultBranch\":\"Disabled\"},\"inheritFromParentState\":\"Disabled\"}},\"id\":\"icbicbogsfo\",\"name\":\"k\",\"type\":\"amiyfgunrukcyyaa\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AzureDevOpsRepository response = manager.azureDevOpsRepos()
            .define("ppypfreuwvzhnd")
            .withExistingProject("eynqlsnrgaxoyv", "jjpfyxhsppvjs", "uouoqtenq", "omuogeqeapaseq")
            .withProperties(new AzureDevOpsRepositoryProperties()
                .withProvisioningState(DevOpsProvisioningState.SUCCEEDED)
                .withParentOrgName("hellitpqvpivrsgq")
                .withParentProjectName("olxeomebzvtv")
                .withOnboardingState(OnboardingState.NOT_APPLICABLE)
                .withActionableRemediation(new ActionableRemediation().withState(ActionableRemediationState.DISABLED)
                    .withCategoryConfigurations(Arrays.asList(
                        new CategoryConfiguration().withMinimumSeverityLevel("katywedbpir")
                            .withCategory(RuleCategory.CONTAINERS),
                        new CategoryConfiguration().withMinimumSeverityLevel("uzbbhxncs")
                            .withCategory(RuleCategory.ARTIFACTS),
                        new CategoryConfiguration().withMinimumSeverityLevel("aveuxgmigs")
                            .withCategory(RuleCategory.DEPENDENCIES)))
                    .withBranchConfiguration(
                        new TargetBranchConfiguration().withBranchNames(Arrays.asList("n", "uiimerffhgvcym"))
                            .withAnnotateDefaultBranch(AnnotateDefaultBranchState.DISABLED))
                    .withInheritFromParentState(InheritFromParentState.DISABLED)))
            .create();

        Assertions.assertEquals(DevOpsProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("fszkrlkosjwrrets", response.properties().parentOrgName());
        Assertions.assertEquals("qfgksdiim", response.properties().parentProjectName());
        Assertions.assertEquals(OnboardingState.NOT_ONBOARDED, response.properties().onboardingState());
        Assertions.assertEquals(ActionableRemediationState.DISABLED,
            response.properties().actionableRemediation().state());
        Assertions.assertEquals("okstkvomdqxno",
            response.properties().actionableRemediation().categoryConfigurations().get(0).minimumSeverityLevel());
        Assertions.assertEquals(RuleCategory.ARTIFACTS,
            response.properties().actionableRemediation().categoryConfigurations().get(0).category());
        Assertions.assertEquals("ocbzvvxdvphxmw",
            response.properties().actionableRemediation().branchConfiguration().branchNames().get(0));
        Assertions.assertEquals(AnnotateDefaultBranchState.DISABLED,
            response.properties().actionableRemediation().branchConfiguration().annotateDefaultBranch());
        Assertions.assertEquals(InheritFromParentState.DISABLED,
            response.properties().actionableRemediation().inheritFromParentState());
    }
}
