// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessPortRule;
import com.azure.resourcemanager.security.models.Protocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class JitNetworkAccessPolicyVirtualMachineTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JitNetworkAccessPolicyVirtualMachine model = BinaryData.fromString(
            "{\"id\":\"rbhmpfulubef\",\"ports\":[{\"number\":2083834764,\"protocol\":\"TCP\",\"allowedSourceAddressPrefix\":\"fbfunun\",\"allowedSourceAddressPrefixes\":[\"krvfyifkdschl\",\"vfictnkjjwgcwn\"],\"maxRequestAccessDuration\":\"hbkgfyrt\"},{\"number\":347654816,\"protocol\":\"*\",\"allowedSourceAddressPrefix\":\"mjpjscdfpdqwty\",\"allowedSourceAddressPrefixes\":[\"gwmseharxifv\",\"n\",\"x\",\"mbpjptnvwjh\"],\"maxRequestAccessDuration\":\"sidqpxlbtpakft\"}],\"publicIpAddress\":\"atw\"}")
            .toObject(JitNetworkAccessPolicyVirtualMachine.class);
        Assertions.assertEquals("rbhmpfulubef", model.id());
        Assertions.assertEquals(2083834764, model.ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP, model.ports().get(0).protocol());
        Assertions.assertEquals("fbfunun", model.ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("krvfyifkdschl", model.ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("hbkgfyrt", model.ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("atw", model.publicIpAddress());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JitNetworkAccessPolicyVirtualMachine model = new JitNetworkAccessPolicyVirtualMachine().withId("rbhmpfulubef")
            .withPorts(Arrays.asList(
                new JitNetworkAccessPortRule().withNumber(2083834764)
                    .withProtocol(Protocol.TCP)
                    .withAllowedSourceAddressPrefix("fbfunun")
                    .withAllowedSourceAddressPrefixes(Arrays.asList("krvfyifkdschl", "vfictnkjjwgcwn"))
                    .withMaxRequestAccessDuration("hbkgfyrt"),
                new JitNetworkAccessPortRule().withNumber(347654816)
                    .withProtocol(Protocol.ASTERISK)
                    .withAllowedSourceAddressPrefix("mjpjscdfpdqwty")
                    .withAllowedSourceAddressPrefixes(Arrays.asList("gwmseharxifv", "n", "x", "mbpjptnvwjh"))
                    .withMaxRequestAccessDuration("sidqpxlbtpakft")))
            .withPublicIpAddress("atw");
        model = BinaryData.fromObject(model).toObject(JitNetworkAccessPolicyVirtualMachine.class);
        Assertions.assertEquals("rbhmpfulubef", model.id());
        Assertions.assertEquals(2083834764, model.ports().get(0).number());
        Assertions.assertEquals(Protocol.TCP, model.ports().get(0).protocol());
        Assertions.assertEquals("fbfunun", model.ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("krvfyifkdschl", model.ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("hbkgfyrt", model.ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("atw", model.publicIpAddress());
    }
}
