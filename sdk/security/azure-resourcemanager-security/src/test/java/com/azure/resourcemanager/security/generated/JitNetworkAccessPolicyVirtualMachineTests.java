// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessPortRule;
import com.azure.resourcemanager.security.models.Protocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class JitNetworkAccessPolicyVirtualMachineTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JitNetworkAccessPolicyVirtualMachine model = BinaryData.fromString(
            "{\"id\":\"dfcea\",\"ports\":[{\"number\":532238686,\"protocol\":\"UDP\",\"allowedSourceAddressPrefix\":\"ygdyftumrtw\",\"allowedSourceAddressPrefixes\":[\"jslb\",\"wkojgcyztsfmzn\",\"aeqphchqnr\",\"rpxeh\"],\"maxRequestAccessDuration\":\"wrykqgai\"}],\"publicIpAddress\":\"viklb\"}")
            .toObject(JitNetworkAccessPolicyVirtualMachine.class);
        Assertions.assertEquals("dfcea", model.id());
        Assertions.assertEquals(532238686, model.ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP, model.ports().get(0).protocol());
        Assertions.assertEquals("ygdyftumrtw", model.ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("jslb", model.ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("wrykqgai", model.ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("viklb", model.publicIpAddress());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JitNetworkAccessPolicyVirtualMachine model = new JitNetworkAccessPolicyVirtualMachine().withId("dfcea")
            .withPorts(Arrays.asList(new JitNetworkAccessPortRule().withNumber(532238686)
                .withProtocol(Protocol.UDP)
                .withAllowedSourceAddressPrefix("ygdyftumrtw")
                .withAllowedSourceAddressPrefixes(Arrays.asList("jslb", "wkojgcyztsfmzn", "aeqphchqnr", "rpxeh"))
                .withMaxRequestAccessDuration("wrykqgai")))
            .withPublicIpAddress("viklb");
        model = BinaryData.fromObject(model).toObject(JitNetworkAccessPolicyVirtualMachine.class);
        Assertions.assertEquals("dfcea", model.id());
        Assertions.assertEquals(532238686, model.ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP, model.ports().get(0).protocol());
        Assertions.assertEquals("ygdyftumrtw", model.ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("jslb", model.ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("wrykqgai", model.ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("viklb", model.publicIpAddress());
    }
}
