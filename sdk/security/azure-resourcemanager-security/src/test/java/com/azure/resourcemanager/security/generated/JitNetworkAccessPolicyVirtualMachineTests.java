// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.security.models.JitNetworkAccessPolicyVirtualMachine;
import com.azure.resourcemanager.security.models.JitNetworkAccessPortRule;
import com.azure.resourcemanager.security.models.Protocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class JitNetworkAccessPolicyVirtualMachineTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JitNetworkAccessPolicyVirtualMachine model = BinaryData.fromString(
            "{\"id\":\"pcqzg\",\"ports\":[{\"number\":833282883,\"protocol\":\"UDP\",\"allowedSourceAddressPrefix\":\"ecohm\",\"allowedSourceAddressPrefixes\":[\"lrrskap\",\"xwieexuyade\",\"ltfokyksyim\",\"ccgrvkcxzznn\"],\"maxRequestAccessDuration\":\"i\"},{\"number\":1659751922,\"protocol\":\"UDP\",\"allowedSourceAddressPrefix\":\"ejeg\",\"allowedSourceAddressPrefixes\":[\"jguwrjmwvv\",\"tu\",\"kxxi\",\"wgxql\"],\"maxRequestAccessDuration\":\"ekotjgxi\"}],\"publicIpAddress\":\"f\"}")
            .toObject(JitNetworkAccessPolicyVirtualMachine.class);
        Assertions.assertEquals("pcqzg", model.id());
        Assertions.assertEquals(833282883, model.ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP, model.ports().get(0).protocol());
        Assertions.assertEquals("ecohm", model.ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("lrrskap", model.ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("i", model.ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("f", model.publicIpAddress());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JitNetworkAccessPolicyVirtualMachine model = new JitNetworkAccessPolicyVirtualMachine().withId("pcqzg")
            .withPorts(Arrays.asList(
                new JitNetworkAccessPortRule().withNumber(833282883).withProtocol(Protocol.UDP)
                    .withAllowedSourceAddressPrefix("ecohm")
                    .withAllowedSourceAddressPrefixes(
                        Arrays.asList("lrrskap", "xwieexuyade", "ltfokyksyim", "ccgrvkcxzznn"))
                    .withMaxRequestAccessDuration("i"),
                new JitNetworkAccessPortRule().withNumber(1659751922).withProtocol(Protocol.UDP)
                    .withAllowedSourceAddressPrefix("ejeg")
                    .withAllowedSourceAddressPrefixes(Arrays.asList("jguwrjmwvv", "tu", "kxxi", "wgxql"))
                    .withMaxRequestAccessDuration("ekotjgxi")))
            .withPublicIpAddress("f");
        model = BinaryData.fromObject(model).toObject(JitNetworkAccessPolicyVirtualMachine.class);
        Assertions.assertEquals("pcqzg", model.id());
        Assertions.assertEquals(833282883, model.ports().get(0).number());
        Assertions.assertEquals(Protocol.UDP, model.ports().get(0).protocol());
        Assertions.assertEquals("ecohm", model.ports().get(0).allowedSourceAddressPrefix());
        Assertions.assertEquals("lrrskap", model.ports().get(0).allowedSourceAddressPrefixes().get(0));
        Assertions.assertEquals("i", model.ports().get(0).maxRequestAccessDuration());
        Assertions.assertEquals("f", model.publicIpAddress());
    }
}
