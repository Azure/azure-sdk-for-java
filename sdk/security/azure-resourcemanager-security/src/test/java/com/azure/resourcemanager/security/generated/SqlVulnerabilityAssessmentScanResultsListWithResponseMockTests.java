// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResults;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScanResultsListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ruleId\":\"d\",\"status\":\"InternalError\",\"isTrimmed\":true,\"queryResults\":[[\"qmxv\",\"o\"],[\"wbwggijts\"]],\"remediation\":{\"description\":\"nrr\",\"scripts\":[\"wsbzrhdugquhtr\",\"zfrunjfhrjhiycba\",\"seqnczkv\",\"hvtuwyjsqwzsz\"],\"automated\":false,\"portalLink\":\"gzunkfnyskwwunqh\"},\"baselineAdjustedResult\":{\"baseline\":{},\"status\":\"NonFinding\",\"resultsNotInBaseline\":[[]],\"resultsOnlyInBaseline\":[[],[],[],[]]},\"ruleMetadata\":{\"ruleId\":\"pc\",\"severity\":\"Medium\",\"category\":\"ljpx\",\"ruleType\":\"PositiveList\",\"title\":\"chyluqa\",\"description\":\"cufjjfxt\",\"rationale\":\"tqdstahhhsa\",\"queryCheck\":{},\"benchmarkReferences\":[{},{}]}},\"id\":\"ritrcwb\",\"name\":\"aesyyefm\",\"type\":\"wo\"},{\"properties\":{\"ruleId\":\"iiqb\",\"status\":\"InternalError\",\"isTrimmed\":false,\"queryResults\":[[\"tistyikjhorlx\",\"pypkennycntrq\",\"xwtdmbqjtsuhqh\"],[\"xtdyqavfxbqmzxsy\",\"ksinpa\",\"m\"],[\"wb\",\"hvwt\",\"pbgchcgsfzhb\"],[\"iys\"]],\"remediation\":{\"description\":\"sdjpgxe\",\"scripts\":[\"wkcfferzn\",\"cbivov\",\"om\"],\"automated\":false,\"portalLink\":\"qcooplfpohimgcky\"},\"baselineAdjustedResult\":{\"baseline\":{},\"status\":\"InternalError\",\"resultsNotInBaseline\":[[],[],[],[]],\"resultsOnlyInBaseline\":[[],[],[],[]]},\"ruleMetadata\":{\"ruleId\":\"xsuloutnpb\",\"severity\":\"High\",\"category\":\"qo\",\"ruleType\":\"PositiveList\",\"title\":\"cdmwk\",\"description\":\"pfhsldqdza\",\"rationale\":\"unye\",\"queryCheck\":{},\"benchmarkReferences\":[{},{},{}]}},\"id\":\"dsytcikswhcam\",\"name\":\"uynfxkcgsfcmvh\",\"type\":\"drp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SecurityManager manager = SecurityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScanResults response = manager.sqlVulnerabilityAssessmentScanResults()
            .listWithResponse("bx", "epqmjmoplukfykk", "hsovadkrmj", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("d", response.value().get(0).properties().ruleId());
        Assertions.assertEquals(RuleStatus.INTERNAL_ERROR, response.value().get(0).properties().status());
        Assertions.assertEquals(true, response.value().get(0).properties().isTrimmed());
        Assertions.assertEquals("qmxv", response.value().get(0).properties().queryResults().get(0).get(0));
        Assertions.assertEquals("nrr", response.value().get(0).properties().remediation().description());
        Assertions.assertEquals("wsbzrhdugquhtr", response.value().get(0).properties().remediation().scripts().get(0));
        Assertions.assertEquals(false, response.value().get(0).properties().remediation().automated());
        Assertions.assertEquals("gzunkfnyskwwunqh", response.value().get(0).properties().remediation().portalLink());
        Assertions.assertEquals(RuleStatus.NON_FINDING,
            response.value().get(0).properties().baselineAdjustedResult().status());
        Assertions.assertEquals("pc", response.value().get(0).properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.MEDIUM, response.value().get(0).properties().ruleMetadata().severity());
        Assertions.assertEquals("ljpx", response.value().get(0).properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.POSITIVE_LIST, response.value().get(0).properties().ruleMetadata().ruleType());
        Assertions.assertEquals("chyluqa", response.value().get(0).properties().ruleMetadata().title());
        Assertions.assertEquals("cufjjfxt", response.value().get(0).properties().ruleMetadata().description());
        Assertions.assertEquals("tqdstahhhsa", response.value().get(0).properties().ruleMetadata().rationale());
    }
}
