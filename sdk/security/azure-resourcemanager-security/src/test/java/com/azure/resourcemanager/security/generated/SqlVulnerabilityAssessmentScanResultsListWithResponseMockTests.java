// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.security.SecurityManager;
import com.azure.resourcemanager.security.models.RuleSeverity;
import com.azure.resourcemanager.security.models.RuleStatus;
import com.azure.resourcemanager.security.models.RuleType;
import com.azure.resourcemanager.security.models.ScanResults;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SqlVulnerabilityAssessmentScanResultsListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"ruleId\":\"mvrrqfibpk\",\"status\":\"NonFinding\",\"isTrimmed\":false,\"queryResults\":[[\"zjuddndihupn\"],[\"hyl\",\"yafewcmodxw\",\"uytxnxr\"]],\"remediation\":{\"description\":\"tzeargvfvkhbj\",\"scripts\":[\"pjxsd\",\"w\",\"ignybffqcw\",\"ynepkt\"],\"automated\":false,\"portalLink\":\"vconysebjijfhp\"},\"baselineAdjustedResult\":{\"baseline\":{},\"status\":\"NonFinding\",\"resultsNotInBaseline\":[[],[],[],[]],\"resultsOnlyInBaseline\":[[]]},\"ruleMetadata\":{\"ruleId\":\"okbskkyporsy\",\"severity\":\"Medium\",\"category\":\"nbydlgfaph\",\"ruleType\":\"Binary\",\"title\":\"wtsaynrtvj\",\"description\":\"reeoxvq\",\"rationale\":\"rnbli\",\"queryCheck\":{},\"benchmarkReferences\":[{}]}},\"id\":\"fbmdivixzhpjgq\",\"name\":\"miaoaweacfx\",\"type\":\"ubuhruetcnxriqz\"},{\"properties\":{\"ruleId\":\"k\",\"status\":\"Finding\",\"isTrimmed\":true,\"queryResults\":[[\"urnowobwxrxmyo\",\"ohlsfjf\",\"uqjpzh\"],[\"huv\",\"qxqkv\",\"dmjhymudjma\",\"jzdebhsermcly\"],[\"wu\",\"yqkaaptb\",\"svkb\"],[\"ptwybloccuhplx\"]],\"remediation\":{\"description\":\"ssh\",\"scripts\":[\"pszbeuybutcdzj\"],\"automated\":true,\"portalLink\":\"peyxdyuxurxr\"},\"baselineAdjustedResult\":{\"baseline\":{},\"status\":\"Finding\",\"resultsNotInBaseline\":[[],[]],\"resultsOnlyInBaseline\":[[],[],[]]},\"ruleMetadata\":{\"ruleId\":\"k\",\"severity\":\"High\",\"category\":\"ikczscymqfv\",\"ruleType\":\"Binary\",\"title\":\"qnyumz\",\"description\":\"dokez\",\"rationale\":\"ezknfzqnzbflbqmh\",\"queryCheck\":{},\"benchmarkReferences\":[{},{},{}]}},\"id\":\"xvwedhag\",\"name\":\"bbsesea\",\"type\":\"ufl\"},{\"properties\":{\"ruleId\":\"zzdcrolrz\",\"status\":\"NonFinding\",\"isTrimmed\":true,\"queryResults\":[[\"kymunwjivtb\"]],\"remediation\":{\"description\":\"bdjrd\",\"scripts\":[\"jywdalis\"],\"automated\":false,\"portalLink\":\"gcaydzinloo\"},\"baselineAdjustedResult\":{\"baseline\":{},\"status\":\"NonFinding\",\"resultsNotInBaseline\":[[],[],[],[]],\"resultsOnlyInBaseline\":[[],[],[],[]]},\"ruleMetadata\":{\"ruleId\":\"lxrsido\",\"severity\":\"Informational\",\"category\":\"poiaffjkrtn\",\"ruleType\":\"PositiveList\",\"title\":\"imxm\",\"description\":\"cjppitygvd\",\"rationale\":\"soqtbfkvuozbzch\",\"queryCheck\":{},\"benchmarkReferences\":[{}]}},\"id\":\"wanklpur\",\"name\":\"cydjh\",\"type\":\"kjse\"},{\"properties\":{\"ruleId\":\"yn\",\"status\":\"NonFinding\",\"isTrimmed\":true,\"queryResults\":[[\"o\",\"xblrdolenrsw\",\"npdrgnmzaofroe\"],[\"ckievyr\",\"jyoybkqftusdw\",\"nrtv\",\"bucnnrov\"]],\"remediation\":{\"description\":\"pxwsicvwqzocsf\",\"scripts\":[\"nnmsg\",\"ywdibugvnrgalvw\",\"hry\"],\"automated\":true,\"portalLink\":\"knuubxcwojt\"},\"baselineAdjustedResult\":{\"baseline\":{},\"status\":\"InternalError\",\"resultsNotInBaseline\":[[]],\"resultsOnlyInBaseline\":[[],[],[]]},\"ruleMetadata\":{\"ruleId\":\"ffif\",\"severity\":\"High\",\"category\":\"dowlxmwefcb\",\"ruleType\":\"NegativeList\",\"title\":\"hrtczwjcujyz\",\"description\":\"yrjq\",\"rationale\":\"lgkuirxxeuwi\",\"queryCheck\":{},\"benchmarkReferences\":[{},{}]}},\"id\":\"vnfgbdviwxo\",\"name\":\"ktxagfujdb\",\"type\":\"jnyexbvxgxqq\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SecurityManager manager = SecurityManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        ScanResults response = manager.sqlVulnerabilityAssessmentScanResults()
            .listWithResponse("qunkygb", "tmsgkwedwl", "tzhgbgbhud", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("mvrrqfibpk", response.value().get(0).properties().ruleId());
        Assertions.assertEquals(RuleStatus.NON_FINDING, response.value().get(0).properties().status());
        Assertions.assertEquals(false, response.value().get(0).properties().isTrimmed());
        Assertions.assertEquals("zjuddndihupn", response.value().get(0).properties().queryResults().get(0).get(0));
        Assertions.assertEquals("tzeargvfvkhbj", response.value().get(0).properties().remediation().description());
        Assertions.assertEquals("pjxsd", response.value().get(0).properties().remediation().scripts().get(0));
        Assertions.assertEquals(false, response.value().get(0).properties().remediation().automated());
        Assertions.assertEquals("vconysebjijfhp", response.value().get(0).properties().remediation().portalLink());
        Assertions.assertEquals(RuleStatus.NON_FINDING,
            response.value().get(0).properties().baselineAdjustedResult().status());
        Assertions.assertEquals("okbskkyporsy", response.value().get(0).properties().ruleMetadata().ruleId());
        Assertions.assertEquals(RuleSeverity.MEDIUM, response.value().get(0).properties().ruleMetadata().severity());
        Assertions.assertEquals("nbydlgfaph", response.value().get(0).properties().ruleMetadata().category());
        Assertions.assertEquals(RuleType.BINARY, response.value().get(0).properties().ruleMetadata().ruleType());
        Assertions.assertEquals("wtsaynrtvj", response.value().get(0).properties().ruleMetadata().title());
        Assertions.assertEquals("reeoxvq", response.value().get(0).properties().ruleMetadata().description());
        Assertions.assertEquals("rnbli", response.value().get(0).properties().ruleMetadata().rationale());
    }
}
