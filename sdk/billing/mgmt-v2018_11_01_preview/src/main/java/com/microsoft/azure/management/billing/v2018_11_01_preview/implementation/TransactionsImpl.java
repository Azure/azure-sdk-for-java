/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2018_11_01_preview.Transactions;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2018_11_01_preview.TransactionsSummary;

class TransactionsImpl extends WrapperImpl<TransactionsInner> implements Transactions {
    private final BillingManager manager;

    TransactionsImpl(BillingManager manager) {
        super(manager.inner().transactions());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private TransactionsSummaryImpl wrapModel(TransactionsSummaryInner inner) {
        return  new TransactionsSummaryImpl(inner, manager());
    }

    @Override
    public Observable<TransactionsSummary> listByBillingProfileNameAsync(final String billingAccountName, final String billingProfileName, final String startDate, final String endDate) {
        TransactionsInner client = this.inner();
        return client.listByBillingProfileNameAsync(billingAccountName, billingProfileName, startDate, endDate)
        .flatMapIterable(new Func1<Page<TransactionsSummaryInner>, Iterable<TransactionsSummaryInner>>() {
            @Override
            public Iterable<TransactionsSummaryInner> call(Page<TransactionsSummaryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TransactionsSummaryInner, TransactionsSummary>() {
            @Override
            public TransactionsSummary call(TransactionsSummaryInner inner) {
                return new TransactionsSummaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TransactionsSummary> listByCustomerNameAsync(final String billingAccountName, final String customerName, final String startDate, final String endDate) {
        TransactionsInner client = this.inner();
        return client.listByCustomerNameAsync(billingAccountName, customerName, startDate, endDate)
        .flatMapIterable(new Func1<Page<TransactionsSummaryInner>, Iterable<TransactionsSummaryInner>>() {
            @Override
            public Iterable<TransactionsSummaryInner> call(Page<TransactionsSummaryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TransactionsSummaryInner, TransactionsSummary>() {
            @Override
            public TransactionsSummary call(TransactionsSummaryInner inner) {
                return new TransactionsSummaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TransactionsSummary> listByInvoiceSectionNameAsync(final String billingAccountName, final String invoiceSectionName, final String startDate, final String endDate) {
        TransactionsInner client = this.inner();
        return client.listByInvoiceSectionNameAsync(billingAccountName, invoiceSectionName, startDate, endDate)
        .flatMapIterable(new Func1<Page<TransactionsSummaryInner>, Iterable<TransactionsSummaryInner>>() {
            @Override
            public Iterable<TransactionsSummaryInner> call(Page<TransactionsSummaryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TransactionsSummaryInner, TransactionsSummary>() {
            @Override
            public TransactionsSummary call(TransactionsSummaryInner inner) {
                return new TransactionsSummaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TransactionsSummary> listByBillingAccountNameAsync(final String billingAccountName, final String startDate, final String endDate) {
        TransactionsInner client = this.inner();
        return client.listByBillingAccountNameAsync(billingAccountName, startDate, endDate)
        .flatMapIterable(new Func1<Page<TransactionsSummaryInner>, Iterable<TransactionsSummaryInner>>() {
            @Override
            public Iterable<TransactionsSummaryInner> call(Page<TransactionsSummaryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TransactionsSummaryInner, TransactionsSummary>() {
            @Override
            public TransactionsSummary call(TransactionsSummaryInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
