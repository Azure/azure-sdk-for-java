/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Invoices.
 */
public class InvoicesInner {
    /** The Retrofit service to perform REST calls. */
    private InvoicesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of InvoicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public InvoicesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(InvoicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Invoices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface InvoicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Invoices listByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices")
        Observable<Response<ResponseBody>> listByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Invoices listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Invoices get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Invoices listByBillingAccountNameNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNameNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Invoices listByBillingProfileNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingProfileNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List of invoices for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object if successful.
     */
    public PagedList<InvoiceSummaryInner> listByBillingAccountName(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<InvoiceSummaryInner>> response = listByBillingAccountNameSinglePageAsync(billingAccountName, periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<InvoiceSummaryInner>(response.body()) {
            @Override
            public Page<InvoiceSummaryInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of invoices for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceSummaryInner>> listByBillingAccountNameAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate, final ListOperationCallback<InvoiceSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameSinglePageAsync(billingAccountName, periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of invoices for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<Page<InvoiceSummaryInner>> listByBillingAccountNameAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName, periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Page<InvoiceSummaryInner>>() {
                @Override
                public Page<InvoiceSummaryInner> call(ServiceResponse<Page<InvoiceSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of invoices for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingAccountNameWithServiceResponseAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        return listByBillingAccountNameSinglePageAsync(billingAccountName, periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(ServiceResponse<Page<InvoiceSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of invoices for a billing account.
     *
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param billingAccountName Billing Account Id.
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param periodStartDate Invoice period start date.
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingAccountNameSinglePageAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), periodStartDate, periodEndDate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceSummaryInner>> result = listByBillingAccountNameDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceSummaryInner>> listByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object if successful.
     */
    public PagedList<InvoiceSummaryInner> listByBillingProfile(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<InvoiceSummaryInner>> response = listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<InvoiceSummaryInner>(response.body()) {
            @Override
            public Page<InvoiceSummaryInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceSummaryInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate, final ListOperationCallback<InvoiceSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<Page<InvoiceSummaryInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Page<InvoiceSummaryInner>>() {
                @Override
                public Page<InvoiceSummaryInner> call(ServiceResponse<Page<InvoiceSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingProfileWithServiceResponseAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        return listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(ServiceResponse<Page<InvoiceSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of invoices for a billing profile.
     *
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param billingAccountName Billing Account Id.
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param billingProfileName Billing Profile Id.
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param periodStartDate Invoice period start date.
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingProfileSinglePageAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByBillingProfile(billingAccountName, billingProfileName, this.client.apiVersion(), periodStartDate, periodEndDate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceSummaryInner>> result = listByBillingProfileDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceSummaryInner>> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the invoice by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceSummaryInner object if successful.
     */
    public InvoiceSummaryInner get(String billingAccountName, String billingProfileName, String invoiceName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceName).toBlocking().single().body();
    }

    /**
     * Get the invoice by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceName Invoice Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceSummaryInner> getAsync(String billingAccountName, String billingProfileName, String invoiceName, final ServiceCallback<InvoiceSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceName), serviceCallback);
    }

    /**
     * Get the invoice by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceSummaryInner object
     */
    public Observable<InvoiceSummaryInner> getAsync(String billingAccountName, String billingProfileName, String invoiceName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceName).map(new Func1<ServiceResponse<InvoiceSummaryInner>, InvoiceSummaryInner>() {
            @Override
            public InvoiceSummaryInner call(ServiceResponse<InvoiceSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the invoice by name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceName Invoice Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceSummaryInner object
     */
    public Observable<ServiceResponse<InvoiceSummaryInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, billingProfileName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceSummaryInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceSummaryInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceSummaryInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceSummaryInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List of invoices for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object if successful.
     */
    public PagedList<InvoiceSummaryInner> listByBillingAccountNameNext(final String nextPageLink) {
        ServiceResponse<Page<InvoiceSummaryInner>> response = listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<InvoiceSummaryInner>(response.body()) {
            @Override
            public Page<InvoiceSummaryInner> nextPage(String nextPageLink) {
                return listByBillingAccountNameNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of invoices for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceSummaryInner>> listByBillingAccountNameNextAsync(final String nextPageLink, final ServiceFuture<List<InvoiceSummaryInner>> serviceFuture, final ListOperationCallback<InvoiceSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNameNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(String nextPageLink) {
                    return listByBillingAccountNameNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of invoices for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<Page<InvoiceSummaryInner>> listByBillingAccountNameNextAsync(final String nextPageLink) {
        return listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Page<InvoiceSummaryInner>>() {
                @Override
                public Page<InvoiceSummaryInner> call(ServiceResponse<Page<InvoiceSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of invoices for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingAccountNameNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNameNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(ServiceResponse<Page<InvoiceSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNameNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of invoices for a billing account.
     *
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingAccountNameNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNameNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceSummaryInner>> result = listByBillingAccountNameNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceSummaryInner>> listByBillingAccountNameNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object if successful.
     */
    public PagedList<InvoiceSummaryInner> listByBillingProfileNext(final String nextPageLink) {
        ServiceResponse<Page<InvoiceSummaryInner>> response = listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<InvoiceSummaryInner>(response.body()) {
            @Override
            public Page<InvoiceSummaryInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceSummaryInner>> listByBillingProfileNextAsync(final String nextPageLink, final ServiceFuture<List<InvoiceSummaryInner>> serviceFuture, final ListOperationCallback<InvoiceSummaryInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<Page<InvoiceSummaryInner>> listByBillingProfileNextAsync(final String nextPageLink) {
        return listByBillingProfileNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Page<InvoiceSummaryInner>>() {
                @Override
                public Page<InvoiceSummaryInner> call(ServiceResponse<Page<InvoiceSummaryInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of invoices for a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceSummaryInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingProfileNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingProfileNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceSummaryInner>>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(ServiceResponse<Page<InvoiceSummaryInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of invoices for a billing profile.
     *
    ServiceResponse<PageImpl<InvoiceSummaryInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceSummaryInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> listByBillingProfileNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingProfileNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceSummaryInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceSummaryInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceSummaryInner>> result = listByBillingProfileNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceSummaryInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceSummaryInner>> listByBillingProfileNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceSummaryInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceSummaryInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
