/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2018_11_01_preview.AcceptTransferRequest;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ProductDetails;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RecipientTransfers.
 */
public class RecipientTransfersInner {
    /** The Retrofit service to perform REST calls. */
    private RecipientTransfersService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of RecipientTransfersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RecipientTransfersInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(RecipientTransfersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RecipientTransfers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RecipientTransfersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.RecipientTransfers accept" })
        @POST("providers/Microsoft.Billing/transfers/{transferName}/acceptTransfer")
        Observable<Response<ResponseBody>> accept(@Path("transferName") String transferName, @Header("accept-language") String acceptLanguage, @Body AcceptTransferRequest body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.RecipientTransfers decline" })
        @POST("providers/Microsoft.Billing/transfers/{transferName}/declineTransfer")
        Observable<Response<ResponseBody>> decline(@Path("transferName") String transferName, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.RecipientTransfers get" })
        @GET("providers/Microsoft.Billing/transfers/{transferName}/")
        Observable<Response<ResponseBody>> get(@Path("transferName") String transferName, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.RecipientTransfers list" })
        @GET("providers/Microsoft.Billing/transfers")
        Observable<Response<ResponseBody>> list(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.RecipientTransfers listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecipientTransferDetailsInner object if successful.
     */
    public RecipientTransferDetailsInner accept(String transferName) {
        return acceptWithServiceResponseAsync(transferName).toBlocking().single().body();
    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecipientTransferDetailsInner> acceptAsync(String transferName, final ServiceCallback<RecipientTransferDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(acceptWithServiceResponseAsync(transferName), serviceCallback);
    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<RecipientTransferDetailsInner> acceptAsync(String transferName) {
        return acceptWithServiceResponseAsync(transferName).map(new Func1<ServiceResponse<RecipientTransferDetailsInner>, RecipientTransferDetailsInner>() {
            @Override
            public RecipientTransferDetailsInner call(ServiceResponse<RecipientTransferDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<ServiceResponse<RecipientTransferDetailsInner>> acceptWithServiceResponseAsync(String transferName) {
        if (transferName == null) {
            throw new IllegalArgumentException("Parameter transferName is required and cannot be null.");
        }
        final List<ProductDetails> productDetails = null;
        AcceptTransferRequest body = new AcceptTransferRequest();
        body.withProductDetails(null);
        return service.accept(transferName, this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecipientTransferDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<RecipientTransferDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecipientTransferDetailsInner> clientResponse = acceptDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @param productDetails Request parameters to accept transfer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecipientTransferDetailsInner object if successful.
     */
    public RecipientTransferDetailsInner accept(String transferName, List<ProductDetails> productDetails) {
        return acceptWithServiceResponseAsync(transferName, productDetails).toBlocking().single().body();
    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @param productDetails Request parameters to accept transfer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecipientTransferDetailsInner> acceptAsync(String transferName, List<ProductDetails> productDetails, final ServiceCallback<RecipientTransferDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(acceptWithServiceResponseAsync(transferName, productDetails), serviceCallback);
    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @param productDetails Request parameters to accept transfer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<RecipientTransferDetailsInner> acceptAsync(String transferName, List<ProductDetails> productDetails) {
        return acceptWithServiceResponseAsync(transferName, productDetails).map(new Func1<ServiceResponse<RecipientTransferDetailsInner>, RecipientTransferDetailsInner>() {
            @Override
            public RecipientTransferDetailsInner call(ServiceResponse<RecipientTransferDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Accepts the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @param productDetails Request parameters to accept transfer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<ServiceResponse<RecipientTransferDetailsInner>> acceptWithServiceResponseAsync(String transferName, List<ProductDetails> productDetails) {
        if (transferName == null) {
            throw new IllegalArgumentException("Parameter transferName is required and cannot be null.");
        }
        Validator.validate(productDetails);
        AcceptTransferRequest body = new AcceptTransferRequest();
        body.withProductDetails(productDetails);
        return service.accept(transferName, this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecipientTransferDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<RecipientTransferDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecipientTransferDetailsInner> clientResponse = acceptDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecipientTransferDetailsInner> acceptDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecipientTransferDetailsInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecipientTransferDetailsInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Declines the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecipientTransferDetailsInner object if successful.
     */
    public RecipientTransferDetailsInner decline(String transferName) {
        return declineWithServiceResponseAsync(transferName).toBlocking().single().body();
    }

    /**
     * Declines the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecipientTransferDetailsInner> declineAsync(String transferName, final ServiceCallback<RecipientTransferDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(declineWithServiceResponseAsync(transferName), serviceCallback);
    }

    /**
     * Declines the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<RecipientTransferDetailsInner> declineAsync(String transferName) {
        return declineWithServiceResponseAsync(transferName).map(new Func1<ServiceResponse<RecipientTransferDetailsInner>, RecipientTransferDetailsInner>() {
            @Override
            public RecipientTransferDetailsInner call(ServiceResponse<RecipientTransferDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Declines the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<ServiceResponse<RecipientTransferDetailsInner>> declineWithServiceResponseAsync(String transferName) {
        if (transferName == null) {
            throw new IllegalArgumentException("Parameter transferName is required and cannot be null.");
        }
        return service.decline(transferName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecipientTransferDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<RecipientTransferDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecipientTransferDetailsInner> clientResponse = declineDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecipientTransferDetailsInner> declineDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecipientTransferDetailsInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecipientTransferDetailsInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecipientTransferDetailsInner object if successful.
     */
    public RecipientTransferDetailsInner get(String transferName) {
        return getWithServiceResponseAsync(transferName).toBlocking().single().body();
    }

    /**
     * Gets the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecipientTransferDetailsInner> getAsync(String transferName, final ServiceCallback<RecipientTransferDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(transferName), serviceCallback);
    }

    /**
     * Gets the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<RecipientTransferDetailsInner> getAsync(String transferName) {
        return getWithServiceResponseAsync(transferName).map(new Func1<ServiceResponse<RecipientTransferDetailsInner>, RecipientTransferDetailsInner>() {
            @Override
            public RecipientTransferDetailsInner call(ServiceResponse<RecipientTransferDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the transfer with given transfer Id.
     *
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecipientTransferDetailsInner object
     */
    public Observable<ServiceResponse<RecipientTransferDetailsInner>> getWithServiceResponseAsync(String transferName) {
        if (transferName == null) {
            throw new IllegalArgumentException("Parameter transferName is required and cannot be null.");
        }
        return service.get(transferName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecipientTransferDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<RecipientTransferDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecipientTransferDetailsInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecipientTransferDetailsInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecipientTransferDetailsInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecipientTransferDetailsInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transfers received by caller.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecipientTransferDetailsInner&gt; object if successful.
     */
    public PagedList<RecipientTransferDetailsInner> list() {
        ServiceResponse<Page<RecipientTransferDetailsInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<RecipientTransferDetailsInner>(response.body()) {
            @Override
            public Page<RecipientTransferDetailsInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transfers received by caller.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecipientTransferDetailsInner>> listAsync(final ListOperationCallback<RecipientTransferDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transfers received by caller.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecipientTransferDetailsInner&gt; object
     */
    public Observable<Page<RecipientTransferDetailsInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<RecipientTransferDetailsInner>>, Page<RecipientTransferDetailsInner>>() {
                @Override
                public Page<RecipientTransferDetailsInner> call(ServiceResponse<Page<RecipientTransferDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transfers received by caller.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecipientTransferDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<RecipientTransferDetailsInner>>, Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> call(ServiceResponse<Page<RecipientTransferDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transfers received by caller.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecipientTransferDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> listSinglePageAsync() {
        return service.list(this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecipientTransferDetailsInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecipientTransferDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecipientTransferDetailsInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecipientTransferDetailsInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecipientTransferDetailsInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transfers received by caller.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RecipientTransferDetailsInner&gt; object if successful.
     */
    public PagedList<RecipientTransferDetailsInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<RecipientTransferDetailsInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RecipientTransferDetailsInner>(response.body()) {
            @Override
            public Page<RecipientTransferDetailsInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transfers received by caller.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RecipientTransferDetailsInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RecipientTransferDetailsInner>> serviceFuture, final ListOperationCallback<RecipientTransferDetailsInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transfers received by caller.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecipientTransferDetailsInner&gt; object
     */
    public Observable<Page<RecipientTransferDetailsInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RecipientTransferDetailsInner>>, Page<RecipientTransferDetailsInner>>() {
                @Override
                public Page<RecipientTransferDetailsInner> call(ServiceResponse<Page<RecipientTransferDetailsInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transfers received by caller.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RecipientTransferDetailsInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RecipientTransferDetailsInner>>, Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> call(ServiceResponse<Page<RecipientTransferDetailsInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transfers received by caller.
     *
    ServiceResponse<PageImpl<RecipientTransferDetailsInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RecipientTransferDetailsInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecipientTransferDetailsInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecipientTransferDetailsInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecipientTransferDetailsInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecipientTransferDetailsInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RecipientTransferDetailsInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RecipientTransferDetailsInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
