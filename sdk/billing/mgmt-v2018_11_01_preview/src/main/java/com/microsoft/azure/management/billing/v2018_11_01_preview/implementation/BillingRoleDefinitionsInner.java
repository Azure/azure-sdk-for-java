/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingRoleDefinitions.
 */
public class BillingRoleDefinitionsInner {
    /** The Retrofit service to perform REST calls. */
    private BillingRoleDefinitionsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingRoleDefinitionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingRoleDefinitionsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingRoleDefinitionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingRoleDefinitions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingRoleDefinitionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingRoleDefinitions getByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/providers/Microsoft.Billing/billingRoleDefinitions/{billingRoleDefinitionName}")
        Observable<Response<ResponseBody>> getByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Path("billingRoleDefinitionName") String billingRoleDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingRoleDefinitions getByInvoiceSectionName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleDefinitions/{billingRoleDefinitionName}")
        Observable<Response<ResponseBody>> getByInvoiceSectionName(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingRoleDefinitionName") String billingRoleDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingRoleDefinitions getByBillingProfileName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Billing/billingRoleDefinitions/{billingRoleDefinitionName}")
        Observable<Response<ResponseBody>> getByBillingProfileName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("billingRoleDefinitionName") String billingRoleDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingRoleDefinitions listByBillingAccountName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/providers/Microsoft.Billing/billingRoleDefinitions")
        Observable<Response<ResponseBody>> listByBillingAccountName(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingRoleDefinitions listByInvoiceSectionName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Billing/billingRoleDefinitions")
        Observable<Response<ResponseBody>> listByInvoiceSectionName(@Path("billingAccountName") String billingAccountName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.BillingRoleDefinitions listByBillingProfileName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Billing/billingRoleDefinitions")
        Observable<Response<ResponseBody>> listByBillingProfileName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionInner object if successful.
     */
    public BillingRoleDefinitionInner getByBillingAccountName(String billingAccountName, String billingRoleDefinitionName) {
        return getByBillingAccountNameWithServiceResponseAsync(billingAccountName, billingRoleDefinitionName).toBlocking().single().body();
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingRoleDefinitionName role definition id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionInner> getByBillingAccountNameAsync(String billingAccountName, String billingRoleDefinitionName, final ServiceCallback<BillingRoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByBillingAccountNameWithServiceResponseAsync(billingAccountName, billingRoleDefinitionName), serviceCallback);
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<BillingRoleDefinitionInner> getByBillingAccountNameAsync(String billingAccountName, String billingRoleDefinitionName) {
        return getByBillingAccountNameWithServiceResponseAsync(billingAccountName, billingRoleDefinitionName).map(new Func1<ServiceResponse<BillingRoleDefinitionInner>, BillingRoleDefinitionInner>() {
            @Override
            public BillingRoleDefinitionInner call(ServiceResponse<BillingRoleDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionInner>> getByBillingAccountNameWithServiceResponseAsync(String billingAccountName, String billingRoleDefinitionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingRoleDefinitionName == null) {
            throw new IllegalArgumentException("Parameter billingRoleDefinitionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByBillingAccountName(billingAccountName, billingRoleDefinitionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionInner> clientResponse = getByBillingAccountNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionInner> getByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionInner object if successful.
     */
    public BillingRoleDefinitionInner getByInvoiceSectionName(String billingAccountName, String invoiceSectionName, String billingRoleDefinitionName) {
        return getByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleDefinitionName).toBlocking().single().body();
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleDefinitionName role definition id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionInner> getByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String billingRoleDefinitionName, final ServiceCallback<BillingRoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleDefinitionName), serviceCallback);
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<BillingRoleDefinitionInner> getByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, String billingRoleDefinitionName) {
        return getByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName, billingRoleDefinitionName).map(new Func1<ServiceResponse<BillingRoleDefinitionInner>, BillingRoleDefinitionInner>() {
            @Override
            public BillingRoleDefinitionInner call(ServiceResponse<BillingRoleDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionInner>> getByInvoiceSectionNameWithServiceResponseAsync(String billingAccountName, String invoiceSectionName, String billingRoleDefinitionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingRoleDefinitionName == null) {
            throw new IllegalArgumentException("Parameter billingRoleDefinitionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByInvoiceSectionName(billingAccountName, invoiceSectionName, billingRoleDefinitionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionInner> clientResponse = getByInvoiceSectionNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionInner> getByInvoiceSectionNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionInner object if successful.
     */
    public BillingRoleDefinitionInner getByBillingProfileName(String billingAccountName, String billingProfileName, String billingRoleDefinitionName) {
        return getByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, billingRoleDefinitionName).toBlocking().single().body();
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param billingRoleDefinitionName role definition id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionInner> getByBillingProfileNameAsync(String billingAccountName, String billingProfileName, String billingRoleDefinitionName, final ServiceCallback<BillingRoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, billingRoleDefinitionName), serviceCallback);
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<BillingRoleDefinitionInner> getByBillingProfileNameAsync(String billingAccountName, String billingProfileName, String billingRoleDefinitionName) {
        return getByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName, billingRoleDefinitionName).map(new Func1<ServiceResponse<BillingRoleDefinitionInner>, BillingRoleDefinitionInner>() {
            @Override
            public BillingRoleDefinitionInner call(ServiceResponse<BillingRoleDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the role definition for a role.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param billingRoleDefinitionName role definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionInner>> getByBillingProfileNameWithServiceResponseAsync(String billingAccountName, String billingProfileName, String billingRoleDefinitionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (billingRoleDefinitionName == null) {
            throw new IllegalArgumentException("Parameter billingRoleDefinitionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByBillingProfileName(billingAccountName, billingProfileName, billingRoleDefinitionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionInner> clientResponse = getByBillingProfileNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionInner> getByBillingProfileNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definition for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionListResultInner object if successful.
     */
    public BillingRoleDefinitionListResultInner listByBillingAccountName(String billingAccountName) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName).toBlocking().single().body();
    }

    /**
     * Lists the role definition for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionListResultInner> listByBillingAccountNameAsync(String billingAccountName, final ServiceCallback<BillingRoleDefinitionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountNameWithServiceResponseAsync(billingAccountName), serviceCallback);
    }

    /**
     * Lists the role definition for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionListResultInner object
     */
    public Observable<BillingRoleDefinitionListResultInner> listByBillingAccountNameAsync(String billingAccountName) {
        return listByBillingAccountNameWithServiceResponseAsync(billingAccountName).map(new Func1<ServiceResponse<BillingRoleDefinitionListResultInner>, BillingRoleDefinitionListResultInner>() {
            @Override
            public BillingRoleDefinitionListResultInner call(ServiceResponse<BillingRoleDefinitionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the role definition for a billing account.
     *
     * @param billingAccountName Billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionListResultInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionListResultInner>> listByBillingAccountNameWithServiceResponseAsync(String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccountName(billingAccountName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionListResultInner> clientResponse = listByBillingAccountNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionListResultInner> listByBillingAccountNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definition for an invoice Section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionListResultInner object if successful.
     */
    public BillingRoleDefinitionListResultInner listByInvoiceSectionName(String billingAccountName, String invoiceSectionName) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName).toBlocking().single().body();
    }

    /**
     * Lists the role definition for an invoice Section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName, final ServiceCallback<BillingRoleDefinitionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName), serviceCallback);
    }

    /**
     * Lists the role definition for an invoice Section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionListResultInner object
     */
    public Observable<BillingRoleDefinitionListResultInner> listByInvoiceSectionNameAsync(String billingAccountName, String invoiceSectionName) {
        return listByInvoiceSectionNameWithServiceResponseAsync(billingAccountName, invoiceSectionName).map(new Func1<ServiceResponse<BillingRoleDefinitionListResultInner>, BillingRoleDefinitionListResultInner>() {
            @Override
            public BillingRoleDefinitionListResultInner call(ServiceResponse<BillingRoleDefinitionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the role definition for an invoice Section.
     *
     * @param billingAccountName Billing Account Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionListResultInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionListResultInner>> listByInvoiceSectionNameWithServiceResponseAsync(String billingAccountName, String invoiceSectionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByInvoiceSectionName(billingAccountName, invoiceSectionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionListResultInner> clientResponse = listByInvoiceSectionNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionListResultInner> listByInvoiceSectionNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definition for a Billing Profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionListResultInner object if successful.
     */
    public BillingRoleDefinitionListResultInner listByBillingProfileName(String billingAccountName, String billingProfileName) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName).toBlocking().single().body();
    }

    /**
     * Lists the role definition for a Billing Profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName, final ServiceCallback<BillingRoleDefinitionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName), serviceCallback);
    }

    /**
     * Lists the role definition for a Billing Profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionListResultInner object
     */
    public Observable<BillingRoleDefinitionListResultInner> listByBillingProfileNameAsync(String billingAccountName, String billingProfileName) {
        return listByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName).map(new Func1<ServiceResponse<BillingRoleDefinitionListResultInner>, BillingRoleDefinitionListResultInner>() {
            @Override
            public BillingRoleDefinitionListResultInner call(ServiceResponse<BillingRoleDefinitionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the role definition for a Billing Profile.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionListResultInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionListResultInner>> listByBillingProfileNameWithServiceResponseAsync(String billingAccountName, String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingProfileName(billingAccountName, billingProfileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionListResultInner> clientResponse = listByBillingProfileNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionListResultInner> listByBillingProfileNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
