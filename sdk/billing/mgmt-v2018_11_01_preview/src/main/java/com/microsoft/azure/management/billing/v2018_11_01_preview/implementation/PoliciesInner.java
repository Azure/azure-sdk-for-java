/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2018_11_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2018_11_01_preview.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Policies.
 */
public class PoliciesInner {
    /** The Retrofit service to perform REST calls. */
    private PoliciesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of PoliciesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PoliciesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(PoliciesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Policies to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PoliciesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Policies getByBillingProfileName" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default")
        Observable<Response<ResponseBody>> getByBillingProfileName(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2018_11_01_preview.Policies update" })
        @PUT("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default")
        Observable<Response<ResponseBody>> update(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Body PolicyInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * The policy for a given billing account name and billing profile name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner getByBillingProfileName(String billingAccountName, String billingProfileName) {
        return getByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName).toBlocking().single().body();
    }

    /**
     * The policy for a given billing account name and billing profile name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> getByBillingProfileNameAsync(String billingAccountName, String billingProfileName, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName), serviceCallback);
    }

    /**
     * The policy for a given billing account name and billing profile name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<PolicyInner> getByBillingProfileNameAsync(String billingAccountName, String billingProfileName) {
        return getByBillingProfileNameWithServiceResponseAsync(billingAccountName, billingProfileName).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The policy for a given billing account name and billing profile name.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<ServiceResponse<PolicyInner>> getByBillingProfileNameWithServiceResponseAsync(String billingAccountName, String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByBillingProfileName(billingAccountName, billingProfileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyInner> clientResponse = getByBillingProfileNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyInner> getByBillingProfileNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to update a policy.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param parameters Parameters supplied to the update policy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyInner object if successful.
     */
    public PolicyInner update(String billingAccountName, String billingProfileName, PolicyInner parameters) {
        return updateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters).toBlocking().single().body();
    }

    /**
     * The operation to update a policy.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param parameters Parameters supplied to the update policy operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyInner> updateAsync(String billingAccountName, String billingProfileName, PolicyInner parameters, final ServiceCallback<PolicyInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters), serviceCallback);
    }

    /**
     * The operation to update a policy.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param parameters Parameters supplied to the update policy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<PolicyInner> updateAsync(String billingAccountName, String billingProfileName, PolicyInner parameters) {
        return updateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters).map(new Func1<ServiceResponse<PolicyInner>, PolicyInner>() {
            @Override
            public PolicyInner call(ServiceResponse<PolicyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to update a policy.
     *
     * @param billingAccountName Billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param parameters Parameters supplied to the update policy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyInner object
     */
    public Observable<ServiceResponse<PolicyInner>> updateWithServiceResponseAsync(String billingAccountName, String billingProfileName, PolicyInner parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(billingAccountName, billingProfileName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
