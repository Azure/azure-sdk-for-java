/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Instructions.
 */
public class InstructionsInner {
    /** The Retrofit service to perform REST calls. */
    private InstructionsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of InstructionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public InstructionsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(InstructionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Instructions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface InstructionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Instructions listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Instructions get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("instructionName") String instructionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Instructions put" })
        @PUT("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}")
        Observable<Response<ResponseBody>> put(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("instructionName") String instructionName, @Query("api-version") String apiVersion, @Body InstructionInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Instructions listByBillingProfileNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingProfileNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InstructionInner&gt; object if successful.
     */
    public PagedList<InstructionInner> listByBillingProfile(final String billingAccountName, final String billingProfileName) {
        ServiceResponse<Page<InstructionInner>> response = listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName).toBlocking().single();
        return new PagedList<InstructionInner>(response.body()) {
            @Override
            public Page<InstructionInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InstructionInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final ListOperationCallback<InstructionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName),
            new Func1<String, Observable<ServiceResponse<Page<InstructionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InstructionInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InstructionInner&gt; object
     */
    public Observable<Page<InstructionInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName)
            .map(new Func1<ServiceResponse<Page<InstructionInner>>, Page<InstructionInner>>() {
                @Override
                public Page<InstructionInner> call(ServiceResponse<Page<InstructionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InstructionInner&gt; object
     */
    public Observable<ServiceResponse<Page<InstructionInner>>> listByBillingProfileWithServiceResponseAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName)
            .concatMap(new Func1<ServiceResponse<Page<InstructionInner>>, Observable<ServiceResponse<Page<InstructionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InstructionInner>>> call(ServiceResponse<Page<InstructionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the instructions by billing profile id.
     *
    ServiceResponse<PageImpl<InstructionInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<InstructionInner>> * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InstructionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InstructionInner>>> listByBillingProfileSinglePageAsync(final String billingAccountName, final String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingProfile(billingAccountName, billingProfileName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InstructionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InstructionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InstructionInner>> result = listByBillingProfileDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InstructionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InstructionInner>> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InstructionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InstructionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the instruction by name. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InstructionInner object if successful.
     */
    public InstructionInner get(String billingAccountName, String billingProfileName, String instructionName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, instructionName).toBlocking().single().body();
    }

    /**
     * Get the instruction by name. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InstructionInner> getAsync(String billingAccountName, String billingProfileName, String instructionName, final ServiceCallback<InstructionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, instructionName), serviceCallback);
    }

    /**
     * Get the instruction by name. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InstructionInner object
     */
    public Observable<InstructionInner> getAsync(String billingAccountName, String billingProfileName, String instructionName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, instructionName).map(new Func1<ServiceResponse<InstructionInner>, InstructionInner>() {
            @Override
            public InstructionInner call(ServiceResponse<InstructionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the instruction by name. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InstructionInner object
     */
    public Observable<ServiceResponse<InstructionInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String instructionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (instructionName == null) {
            throw new IllegalArgumentException("Parameter instructionName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.get(billingAccountName, billingProfileName, instructionName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InstructionInner>>>() {
                @Override
                public Observable<ServiceResponse<InstructionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InstructionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InstructionInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InstructionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InstructionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates an instruction. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param parameters The new instruction.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InstructionInner object if successful.
     */
    public InstructionInner put(String billingAccountName, String billingProfileName, String instructionName, InstructionInner parameters) {
        return putWithServiceResponseAsync(billingAccountName, billingProfileName, instructionName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates an instruction. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param parameters The new instruction.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InstructionInner> putAsync(String billingAccountName, String billingProfileName, String instructionName, InstructionInner parameters, final ServiceCallback<InstructionInner> serviceCallback) {
        return ServiceFuture.fromResponse(putWithServiceResponseAsync(billingAccountName, billingProfileName, instructionName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an instruction. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param parameters The new instruction.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InstructionInner object
     */
    public Observable<InstructionInner> putAsync(String billingAccountName, String billingProfileName, String instructionName, InstructionInner parameters) {
        return putWithServiceResponseAsync(billingAccountName, billingProfileName, instructionName, parameters).map(new Func1<ServiceResponse<InstructionInner>, InstructionInner>() {
            @Override
            public InstructionInner call(ServiceResponse<InstructionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an instruction. These are custom billing instructions and are only applicable for certain customers.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param parameters The new instruction.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InstructionInner object
     */
    public Observable<ServiceResponse<InstructionInner>> putWithServiceResponseAsync(String billingAccountName, String billingProfileName, String instructionName, InstructionInner parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (instructionName == null) {
            throw new IllegalArgumentException("Parameter instructionName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2020-05-01";
        return service.put(billingAccountName, billingProfileName, instructionName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InstructionInner>>>() {
                @Override
                public Observable<ServiceResponse<InstructionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InstructionInner> clientResponse = putDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InstructionInner> putDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InstructionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InstructionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InstructionInner&gt; object if successful.
     */
    public PagedList<InstructionInner> listByBillingProfileNext(final String nextPageLink) {
        ServiceResponse<Page<InstructionInner>> response = listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<InstructionInner>(response.body()) {
            @Override
            public Page<InstructionInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InstructionInner>> listByBillingProfileNextAsync(final String nextPageLink, final ServiceFuture<List<InstructionInner>> serviceFuture, final ListOperationCallback<InstructionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<InstructionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InstructionInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InstructionInner&gt; object
     */
    public Observable<Page<InstructionInner>> listByBillingProfileNextAsync(final String nextPageLink) {
        return listByBillingProfileNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<InstructionInner>>, Page<InstructionInner>>() {
                @Override
                public Page<InstructionInner> call(ServiceResponse<Page<InstructionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the instructions by billing profile id.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InstructionInner&gt; object
     */
    public Observable<ServiceResponse<Page<InstructionInner>>> listByBillingProfileNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingProfileNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<InstructionInner>>, Observable<ServiceResponse<Page<InstructionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InstructionInner>>> call(ServiceResponse<Page<InstructionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the instructions by billing profile id.
     *
    ServiceResponse<PageImpl<InstructionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InstructionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InstructionInner>>> listByBillingProfileNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingProfileNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InstructionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InstructionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InstructionInner>> result = listByBillingProfileNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InstructionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InstructionInner>> listByBillingProfileNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InstructionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InstructionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
