/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingPermissions.
 */
public class BillingPermissionsInner {
    /** The Retrofit service to perform REST calls. */
    private BillingPermissionsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingPermissionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingPermissionsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingPermissionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingPermissions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingPermissionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByCustomer" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingPermissions")
        Observable<Response<ResponseBody>> listByCustomer(@Path("billingAccountName") String billingAccountName, @Path("customerName") String customerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingPermissions")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByInvoiceSections" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingPermissions")
        Observable<Response<ResponseBody>> listByInvoiceSections(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingPermissions")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByCustomerNext" })
        @GET
        Observable<Response<ResponseBody>> listByCustomerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByBillingAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByInvoiceSectionsNext" })
        @GET
        Observable<Response<ResponseBody>> listByInvoiceSectionsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions listByBillingProfileNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingProfileNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByCustomer(final String billingAccountName, final String customerName) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByCustomerSinglePageAsync(billingAccountName, customerName).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByCustomerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByCustomerAsync(final String billingAccountName, final String customerName, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByCustomerSinglePageAsync(billingAccountName, customerName),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByCustomerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByCustomerAsync(final String billingAccountName, final String customerName) {
        return listByCustomerWithServiceResponseAsync(billingAccountName, customerName)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByCustomerWithServiceResponseAsync(final String billingAccountName, final String customerName) {
        return listByCustomerSinglePageAsync(billingAccountName, customerName)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByCustomerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByCustomerSinglePageAsync(final String billingAccountName, final String customerName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByCustomer(billingAccountName, customerName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByCustomerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByCustomerDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByBillingAccount(final String billingAccountName) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByBillingAccountSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByBillingAccountAsync(final String billingAccountName, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByBillingAccountAsync(final String billingAccountName) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingAccount(billingAccountName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByInvoiceSections(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByInvoiceSectionsSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByInvoiceSectionsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByInvoiceSectionsAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSectionsSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByInvoiceSectionsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByInvoiceSectionsAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        return listByInvoiceSectionsWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByInvoiceSectionsWithServiceResponseAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        return listByInvoiceSectionsSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceSectionsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param billingProfileName The ID that uniquely identifies a billing profile.
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByInvoiceSectionsSinglePageAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByInvoiceSections(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByInvoiceSectionsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByInvoiceSectionsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByBillingProfile(final String billingAccountName, final String billingProfileName) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingProfileWithServiceResponseAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingProfileSinglePageAsync(final String billingAccountName, final String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingProfile(billingAccountName, billingProfileName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByBillingProfileDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByCustomerNext(final String nextPageLink) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByCustomerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByCustomerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByCustomerNextAsync(final String nextPageLink, final ServiceFuture<List<BillingPermissionsPropertiesInner>> serviceFuture, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByCustomerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByCustomerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByCustomerNextAsync(final String nextPageLink) {
        return listByCustomerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByCustomerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByCustomerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByCustomerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has for a customer.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByCustomerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByCustomerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByCustomerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByCustomerNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByBillingAccountNext(final String nextPageLink) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByBillingAccountNextAsync(final String nextPageLink, final ServiceFuture<List<BillingPermissionsPropertiesInner>> serviceFuture, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByBillingAccountNextAsync(final String nextPageLink) {
        return listByBillingAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing account.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByBillingAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByBillingAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByInvoiceSectionsNext(final String nextPageLink) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByInvoiceSectionsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByInvoiceSectionsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByInvoiceSectionsNextAsync(final String nextPageLink, final ServiceFuture<List<BillingPermissionsPropertiesInner>> serviceFuture, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSectionsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByInvoiceSectionsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByInvoiceSectionsNextAsync(final String nextPageLink) {
        return listByInvoiceSectionsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByInvoiceSectionsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByInvoiceSectionsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceSectionsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on an invoice section.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByInvoiceSectionsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByInvoiceSectionsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByInvoiceSectionsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByInvoiceSectionsNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object if successful.
     */
    public PagedList<BillingPermissionsPropertiesInner> listByBillingProfileNext(final String nextPageLink) {
        ServiceResponse<Page<BillingPermissionsPropertiesInner>> response = listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingPermissionsPropertiesInner>(response.body()) {
            @Override
            public Page<BillingPermissionsPropertiesInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingPermissionsPropertiesInner>> listByBillingProfileNextAsync(final String nextPageLink, final ServiceFuture<List<BillingPermissionsPropertiesInner>> serviceFuture, final ListOperationCallback<BillingPermissionsPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<Page<BillingPermissionsPropertiesInner>> listByBillingProfileNextAsync(final String nextPageLink) {
        return listByBillingProfileNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Page<BillingPermissionsPropertiesInner>>() {
                @Override
                public Page<BillingPermissionsPropertiesInner> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingPermissionsPropertiesInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingProfileNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingProfileNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingPermissionsPropertiesInner>>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(ServiceResponse<Page<BillingPermissionsPropertiesInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing permissions the caller has on a billing profile.
     *
    ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingPermissionsPropertiesInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> listByBillingProfileNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingProfileNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingPermissionsPropertiesInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> result = listByBillingProfileNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingPermissionsPropertiesInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingPermissionsPropertiesInner>> listByBillingProfileNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingPermissionsPropertiesInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingPermissionsPropertiesInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
