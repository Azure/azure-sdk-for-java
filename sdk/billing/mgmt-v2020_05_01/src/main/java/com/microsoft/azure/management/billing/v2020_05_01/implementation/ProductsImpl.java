/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2020_05_01.Products;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2020_05_01.Product;
import com.microsoft.azure.management.billing.v2020_05_01.ValidateProductTransferEligibilityResult;

class ProductsImpl extends WrapperImpl<ProductsInner> implements Products {
    private final BillingManager manager;

    ProductsImpl(BillingManager manager) {
        super(manager.inner().products());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private ProductImpl wrapModel(ProductInner inner) {
        return  new ProductImpl(inner, manager());
    }

    @Override
    public Observable<Product> listByBillingAccountAsync(final String billingAccountName) {
        ProductsInner client = this.inner();
        return client.listByBillingAccountAsync(billingAccountName)
        .flatMapIterable(new Func1<Page<ProductInner>, Iterable<ProductInner>>() {
            @Override
            public Iterable<ProductInner> call(Page<ProductInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName) {
        ProductsInner client = this.inner();
        return client.listByBillingProfileAsync(billingAccountName, billingProfileName)
        .flatMapIterable(new Func1<Page<ProductInner>, Iterable<ProductInner>>() {
            @Override
            public Iterable<ProductInner> call(Page<ProductInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> listByInvoiceSectionAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        ProductsInner client = this.inner();
        return client.listByInvoiceSectionAsync(billingAccountName, billingProfileName, invoiceSectionName)
        .flatMapIterable(new Func1<Page<ProductInner>, Iterable<ProductInner>>() {
            @Override
            public Iterable<ProductInner> call(Page<ProductInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> getAsync(String billingAccountName, String productName) {
        ProductsInner client = this.inner();
        return client.getAsync(billingAccountName, productName)
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> moveAsync(String billingAccountName, String productName) {
        ProductsInner client = this.inner();
        return client.moveAsync(billingAccountName, productName)
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ValidateProductTransferEligibilityResult> validateMoveAsync(String billingAccountName, String productName) {
        ProductsInner client = this.inner();
        return client.validateMoveAsync(billingAccountName, productName)
        .map(new Func1<ValidateProductTransferEligibilityResultInner, ValidateProductTransferEligibilityResult>() {
            @Override
            public ValidateProductTransferEligibilityResult call(ValidateProductTransferEligibilityResultInner inner) {
                return new ValidateProductTransferEligibilityResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> listByCustomerAsync(final String billingAccountName, final String customerName) {
        ProductsInner client = this.inner();
        return client.listByCustomerAsync(billingAccountName, customerName)
        .flatMapIterable(new Func1<Page<ProductInner>, Iterable<ProductInner>>() {
            @Override
            public Iterable<ProductInner> call(Page<ProductInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
