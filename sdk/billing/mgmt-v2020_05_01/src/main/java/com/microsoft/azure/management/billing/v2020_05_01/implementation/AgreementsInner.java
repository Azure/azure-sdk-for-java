/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Agreements.
 */
public class AgreementsInner {
    /** The Retrofit service to perform REST calls. */
    private AgreementsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of AgreementsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AgreementsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(AgreementsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Agreements to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AgreementsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Agreements listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Agreements get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/{agreementName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("agreementName") String agreementName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Agreements listByBillingAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AgreementInner&gt; object if successful.
     */
    public PagedList<AgreementInner> listByBillingAccount(final String billingAccountName) {
        ServiceResponse<Page<AgreementInner>> response = listByBillingAccountSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<AgreementInner>(response.body()) {
            @Override
            public Page<AgreementInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AgreementInner>> listByBillingAccountAsync(final String billingAccountName, final ListOperationCallback<AgreementInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AgreementInner&gt; object
     */
    public Observable<Page<AgreementInner>> listByBillingAccountAsync(final String billingAccountName) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<AgreementInner>>, Page<AgreementInner>>() {
                @Override
                public Page<AgreementInner> call(ServiceResponse<Page<AgreementInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AgreementInner&gt; object
     */
    public Observable<ServiceResponse<Page<AgreementInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<AgreementInner>>, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(ServiceResponse<Page<AgreementInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AgreementInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AgreementInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        final String expand = null;
        return service.listByBillingAccount(billingAccountName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AgreementInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AgreementInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AgreementInner&gt; object if successful.
     */
    public PagedList<AgreementInner> listByBillingAccount(final String billingAccountName, final String expand) {
        ServiceResponse<Page<AgreementInner>> response = listByBillingAccountSinglePageAsync(billingAccountName, expand).toBlocking().single();
        return new PagedList<AgreementInner>(response.body()) {
            @Override
            public Page<AgreementInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the participants.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AgreementInner>> listByBillingAccountAsync(final String billingAccountName, final String expand, final ListOperationCallback<AgreementInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName, expand),
            new Func1<String, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AgreementInner&gt; object
     */
    public Observable<Page<AgreementInner>> listByBillingAccountAsync(final String billingAccountName, final String expand) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, expand)
            .map(new Func1<ServiceResponse<Page<AgreementInner>>, Page<AgreementInner>>() {
                @Override
                public Page<AgreementInner> call(ServiceResponse<Page<AgreementInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AgreementInner&gt; object
     */
    public Observable<ServiceResponse<Page<AgreementInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName, final String expand) {
        return listByBillingAccountSinglePageAsync(billingAccountName, expand)
            .concatMap(new Func1<ServiceResponse<Page<AgreementInner>>, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(ServiceResponse<Page<AgreementInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the agreements for a billing account.
     *
    ServiceResponse<PageImpl<AgreementInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<AgreementInner>> * @param expand May be used to expand the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AgreementInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AgreementInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName, final String expand) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingAccount(billingAccountName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AgreementInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AgreementInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AgreementInner>> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AgreementInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AgreementInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AgreementInner object if successful.
     */
    public AgreementInner get(String billingAccountName, String agreementName) {
        return getWithServiceResponseAsync(billingAccountName, agreementName).toBlocking().single().body();
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AgreementInner> getAsync(String billingAccountName, String agreementName, final ServiceCallback<AgreementInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, agreementName), serviceCallback);
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgreementInner object
     */
    public Observable<AgreementInner> getAsync(String billingAccountName, String agreementName) {
        return getWithServiceResponseAsync(billingAccountName, agreementName).map(new Func1<ServiceResponse<AgreementInner>, AgreementInner>() {
            @Override
            public AgreementInner call(ServiceResponse<AgreementInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgreementInner object
     */
    public Observable<ServiceResponse<AgreementInner>> getWithServiceResponseAsync(String billingAccountName, String agreementName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (agreementName == null) {
            throw new IllegalArgumentException("Parameter agreementName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        final String expand = null;
        return service.get(billingAccountName, agreementName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AgreementInner>>>() {
                @Override
                public Observable<ServiceResponse<AgreementInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AgreementInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @param expand May be used to expand the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AgreementInner object if successful.
     */
    public AgreementInner get(String billingAccountName, String agreementName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, agreementName, expand).toBlocking().single().body();
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @param expand May be used to expand the participants.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AgreementInner> getAsync(String billingAccountName, String agreementName, String expand, final ServiceCallback<AgreementInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, agreementName, expand), serviceCallback);
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @param expand May be used to expand the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgreementInner object
     */
    public Observable<AgreementInner> getAsync(String billingAccountName, String agreementName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, agreementName, expand).map(new Func1<ServiceResponse<AgreementInner>, AgreementInner>() {
            @Override
            public AgreementInner call(ServiceResponse<AgreementInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an agreement by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @param expand May be used to expand the participants.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AgreementInner object
     */
    public Observable<ServiceResponse<AgreementInner>> getWithServiceResponseAsync(String billingAccountName, String agreementName, String expand) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (agreementName == null) {
            throw new IllegalArgumentException("Parameter agreementName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.get(billingAccountName, agreementName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AgreementInner>>>() {
                @Override
                public Observable<ServiceResponse<AgreementInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AgreementInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AgreementInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AgreementInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AgreementInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;AgreementInner&gt; object if successful.
     */
    public PagedList<AgreementInner> listByBillingAccountNext(final String nextPageLink) {
        ServiceResponse<Page<AgreementInner>> response = listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<AgreementInner>(response.body()) {
            @Override
            public Page<AgreementInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AgreementInner>> listByBillingAccountNextAsync(final String nextPageLink, final ServiceFuture<List<AgreementInner>> serviceFuture, final ListOperationCallback<AgreementInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AgreementInner&gt; object
     */
    public Observable<Page<AgreementInner>> listByBillingAccountNextAsync(final String nextPageLink) {
        return listByBillingAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<AgreementInner>>, Page<AgreementInner>>() {
                @Override
                public Page<AgreementInner> call(ServiceResponse<Page<AgreementInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the agreements for a billing account.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;AgreementInner&gt; object
     */
    public Observable<ServiceResponse<Page<AgreementInner>>> listByBillingAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<AgreementInner>>, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(ServiceResponse<Page<AgreementInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the agreements for a billing account.
     *
    ServiceResponse<PageImpl<AgreementInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;AgreementInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<AgreementInner>>> listByBillingAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<AgreementInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<AgreementInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AgreementInner>> result = listByBillingAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<AgreementInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AgreementInner>> listByBillingAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AgreementInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AgreementInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
