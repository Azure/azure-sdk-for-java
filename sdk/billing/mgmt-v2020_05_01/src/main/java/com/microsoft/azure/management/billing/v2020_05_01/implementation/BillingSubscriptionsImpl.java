/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2020_05_01.BillingSubscriptions;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2020_05_01.BillingSubscription;
import com.microsoft.azure.management.billing.v2020_05_01.ValidateSubscriptionTransferEligibilityResult;

class BillingSubscriptionsImpl extends WrapperImpl<BillingSubscriptionsInner> implements BillingSubscriptions {
    private final BillingManager manager;

    BillingSubscriptionsImpl(BillingManager manager) {
        super(manager.inner().billingSubscriptions());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private BillingSubscriptionImpl wrapModel(BillingSubscriptionInner inner) {
        return  new BillingSubscriptionImpl(inner, manager());
    }

    @Override
    public Observable<BillingSubscription> listByBillingAccountAsync(final String billingAccountName) {
        BillingSubscriptionsInner client = this.inner();
        return client.listByBillingAccountAsync(billingAccountName)
        .flatMapIterable(new Func1<Page<BillingSubscriptionInner>, Iterable<BillingSubscriptionInner>>() {
            @Override
            public Iterable<BillingSubscriptionInner> call(Page<BillingSubscriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingSubscriptionInner, BillingSubscription>() {
            @Override
            public BillingSubscription call(BillingSubscriptionInner inner) {
                return new BillingSubscriptionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingSubscription> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName) {
        BillingSubscriptionsInner client = this.inner();
        return client.listByBillingProfileAsync(billingAccountName, billingProfileName)
        .flatMapIterable(new Func1<Page<BillingSubscriptionInner>, Iterable<BillingSubscriptionInner>>() {
            @Override
            public Iterable<BillingSubscriptionInner> call(Page<BillingSubscriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingSubscriptionInner, BillingSubscription>() {
            @Override
            public BillingSubscription call(BillingSubscriptionInner inner) {
                return new BillingSubscriptionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingSubscription> listByInvoiceSectionAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        BillingSubscriptionsInner client = this.inner();
        return client.listByInvoiceSectionAsync(billingAccountName, billingProfileName, invoiceSectionName)
        .flatMapIterable(new Func1<Page<BillingSubscriptionInner>, Iterable<BillingSubscriptionInner>>() {
            @Override
            public Iterable<BillingSubscriptionInner> call(Page<BillingSubscriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingSubscriptionInner, BillingSubscription>() {
            @Override
            public BillingSubscription call(BillingSubscriptionInner inner) {
                return new BillingSubscriptionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingSubscription> getAsync(String billingAccountName) {
        BillingSubscriptionsInner client = this.inner();
        return client.getAsync(billingAccountName)
        .map(new Func1<BillingSubscriptionInner, BillingSubscription>() {
            @Override
            public BillingSubscription call(BillingSubscriptionInner inner) {
                return new BillingSubscriptionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingSubscription> moveAsync(String billingAccountName, String destinationInvoiceSectionId) {
        BillingSubscriptionsInner client = this.inner();
        return client.moveAsync(billingAccountName, destinationInvoiceSectionId)
        .map(new Func1<BillingSubscriptionInner, BillingSubscription>() {
            @Override
            public BillingSubscription call(BillingSubscriptionInner inner) {
                return new BillingSubscriptionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ValidateSubscriptionTransferEligibilityResult> validateMoveAsync(String billingAccountName, String destinationInvoiceSectionId) {
        BillingSubscriptionsInner client = this.inner();
        return client.validateMoveAsync(billingAccountName, destinationInvoiceSectionId)
        .map(new Func1<ValidateSubscriptionTransferEligibilityResultInner, ValidateSubscriptionTransferEligibilityResult>() {
            @Override
            public ValidateSubscriptionTransferEligibilityResult call(ValidateSubscriptionTransferEligibilityResultInner inner) {
                return new ValidateSubscriptionTransferEligibilityResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingSubscription> listByCustomerAsync(final String billingAccountName, final String customerName) {
        BillingSubscriptionsInner client = this.inner();
        return client.listByCustomerAsync(billingAccountName, customerName)
        .flatMapIterable(new Func1<Page<BillingSubscriptionInner>, Iterable<BillingSubscriptionInner>>() {
            @Override
            public Iterable<BillingSubscriptionInner> call(Page<BillingSubscriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingSubscriptionInner, BillingSubscription>() {
            @Override
            public BillingSubscription call(BillingSubscriptionInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
