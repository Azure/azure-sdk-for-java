/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingRoleDefinitions.
 */
public class BillingRoleDefinitionsInner {
    /** The Retrofit service to perform REST calls. */
    private BillingRoleDefinitionsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingRoleDefinitionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingRoleDefinitionsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingRoleDefinitionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingRoleDefinitions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingRoleDefinitionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions getByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/{billingRoleDefinitionName}")
        Observable<Response<ResponseBody>> getByBillingAccount(@Path("billingAccountName") String billingAccountName, @Path("billingRoleDefinitionName") String billingRoleDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions getByInvoiceSection" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions/{billingRoleDefinitionName}")
        Observable<Response<ResponseBody>> getByInvoiceSection(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Path("billingRoleDefinitionName") String billingRoleDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions getByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions/{billingRoleDefinitionName}")
        Observable<Response<ResponseBody>> getByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("billingRoleDefinitionName") String billingRoleDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions listByInvoiceSection" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions")
        Observable<Response<ResponseBody>> listByInvoiceSection(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions listByBillingAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions listByInvoiceSectionNext" })
        @GET
        Observable<Response<ResponseBody>> listByInvoiceSectionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingRoleDefinitions listByBillingProfileNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingProfileNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the definition for a role on a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionInner object if successful.
     */
    public BillingRoleDefinitionInner getByBillingAccount(String billingAccountName, String billingRoleDefinitionName) {
        return getByBillingAccountWithServiceResponseAsync(billingAccountName, billingRoleDefinitionName).toBlocking().single().body();
    }

    /**
     * Gets the definition for a role on a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionInner> getByBillingAccountAsync(String billingAccountName, String billingRoleDefinitionName, final ServiceCallback<BillingRoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByBillingAccountWithServiceResponseAsync(billingAccountName, billingRoleDefinitionName), serviceCallback);
    }

    /**
     * Gets the definition for a role on a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<BillingRoleDefinitionInner> getByBillingAccountAsync(String billingAccountName, String billingRoleDefinitionName) {
        return getByBillingAccountWithServiceResponseAsync(billingAccountName, billingRoleDefinitionName).map(new Func1<ServiceResponse<BillingRoleDefinitionInner>, BillingRoleDefinitionInner>() {
            @Override
            public BillingRoleDefinitionInner call(ServiceResponse<BillingRoleDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the definition for a role on a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionInner>> getByBillingAccountWithServiceResponseAsync(String billingAccountName, String billingRoleDefinitionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingRoleDefinitionName == null) {
            throw new IllegalArgumentException("Parameter billingRoleDefinitionName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.getByBillingAccount(billingAccountName, billingRoleDefinitionName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionInner> clientResponse = getByBillingAccountDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionInner> getByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the definition for a role on an invoice section. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionInner object if successful.
     */
    public BillingRoleDefinitionInner getByInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleDefinitionName) {
        return getByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingRoleDefinitionName).toBlocking().single().body();
    }

    /**
     * Gets the definition for a role on an invoice section. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionInner> getByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleDefinitionName, final ServiceCallback<BillingRoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingRoleDefinitionName), serviceCallback);
    }

    /**
     * Gets the definition for a role on an invoice section. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<BillingRoleDefinitionInner> getByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleDefinitionName) {
        return getByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, billingRoleDefinitionName).map(new Func1<ServiceResponse<BillingRoleDefinitionInner>, BillingRoleDefinitionInner>() {
            @Override
            public BillingRoleDefinitionInner call(ServiceResponse<BillingRoleDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the definition for a role on an invoice section. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionInner>> getByInvoiceSectionWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleDefinitionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (billingRoleDefinitionName == null) {
            throw new IllegalArgumentException("Parameter billingRoleDefinitionName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.getByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, billingRoleDefinitionName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionInner> clientResponse = getByInvoiceSectionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionInner> getByInvoiceSectionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the definition for a role on a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingRoleDefinitionInner object if successful.
     */
    public BillingRoleDefinitionInner getByBillingProfile(String billingAccountName, String billingProfileName, String billingRoleDefinitionName) {
        return getByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, billingRoleDefinitionName).toBlocking().single().body();
    }

    /**
     * Gets the definition for a role on a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingRoleDefinitionInner> getByBillingProfileAsync(String billingAccountName, String billingProfileName, String billingRoleDefinitionName, final ServiceCallback<BillingRoleDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, billingRoleDefinitionName), serviceCallback);
    }

    /**
     * Gets the definition for a role on a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<BillingRoleDefinitionInner> getByBillingProfileAsync(String billingAccountName, String billingProfileName, String billingRoleDefinitionName) {
        return getByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, billingRoleDefinitionName).map(new Func1<ServiceResponse<BillingRoleDefinitionInner>, BillingRoleDefinitionInner>() {
            @Override
            public BillingRoleDefinitionInner call(ServiceResponse<BillingRoleDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the definition for a role on a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingRoleDefinitionInner object
     */
    public Observable<ServiceResponse<BillingRoleDefinitionInner>> getByBillingProfileWithServiceResponseAsync(String billingAccountName, String billingProfileName, String billingRoleDefinitionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (billingRoleDefinitionName == null) {
            throw new IllegalArgumentException("Parameter billingRoleDefinitionName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.getByBillingProfile(billingAccountName, billingProfileName, billingRoleDefinitionName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingRoleDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingRoleDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingRoleDefinitionInner> clientResponse = getByBillingProfileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingRoleDefinitionInner> getByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingRoleDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingRoleDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object if successful.
     */
    public PagedList<BillingRoleDefinitionInner> listByBillingAccount(final String billingAccountName) {
        ServiceResponse<Page<BillingRoleDefinitionInner>> response = listByBillingAccountSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<BillingRoleDefinitionInner>(response.body()) {
            @Override
            public Page<BillingRoleDefinitionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingRoleDefinitionInner>> listByBillingAccountAsync(final String billingAccountName, final ListOperationCallback<BillingRoleDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<Page<BillingRoleDefinitionInner>> listByBillingAccountAsync(final String billingAccountName) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Page<BillingRoleDefinitionInner>>() {
                @Override
                public Page<BillingRoleDefinitionInner> call(ServiceResponse<Page<BillingRoleDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(ServiceResponse<Page<BillingRoleDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingAccount(billingAccountName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingRoleDefinitionInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingRoleDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingRoleDefinitionInner>> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingRoleDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingRoleDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object if successful.
     */
    public PagedList<BillingRoleDefinitionInner> listByInvoiceSection(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        ServiceResponse<Page<BillingRoleDefinitionInner>> response = listByInvoiceSectionSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName).toBlocking().single();
        return new PagedList<BillingRoleDefinitionInner>(response.body()) {
            @Override
            public Page<BillingRoleDefinitionInner> nextPage(String nextPageLink) {
                return listByInvoiceSectionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingRoleDefinitionInner>> listByInvoiceSectionAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName, final ListOperationCallback<BillingRoleDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSectionSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName),
            new Func1<String, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(String nextPageLink) {
                    return listByInvoiceSectionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<Page<BillingRoleDefinitionInner>> listByInvoiceSectionAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        return listByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName)
            .map(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Page<BillingRoleDefinitionInner>>() {
                @Override
                public Page<BillingRoleDefinitionInner> call(ServiceResponse<Page<BillingRoleDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByInvoiceSectionWithServiceResponseAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        return listByInvoiceSectionSinglePageAsync(billingAccountName, billingProfileName, invoiceSectionName)
            .concatMap(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(ServiceResponse<Page<BillingRoleDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceSectionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param billingProfileName The ID that uniquely identifies a billing profile.
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByInvoiceSectionSinglePageAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingRoleDefinitionInner>> result = listByInvoiceSectionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingRoleDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingRoleDefinitionInner>> listByInvoiceSectionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingRoleDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingRoleDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object if successful.
     */
    public PagedList<BillingRoleDefinitionInner> listByBillingProfile(final String billingAccountName, final String billingProfileName) {
        ServiceResponse<Page<BillingRoleDefinitionInner>> response = listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName).toBlocking().single();
        return new PagedList<BillingRoleDefinitionInner>(response.body()) {
            @Override
            public Page<BillingRoleDefinitionInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingRoleDefinitionInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final ListOperationCallback<BillingRoleDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName),
            new Func1<String, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<Page<BillingRoleDefinitionInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName)
            .map(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Page<BillingRoleDefinitionInner>>() {
                @Override
                public Page<BillingRoleDefinitionInner> call(ServiceResponse<Page<BillingRoleDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingProfileWithServiceResponseAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName)
            .concatMap(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(ServiceResponse<Page<BillingRoleDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingProfileSinglePageAsync(final String billingAccountName, final String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingProfile(billingAccountName, billingProfileName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingRoleDefinitionInner>> result = listByBillingProfileDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingRoleDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingRoleDefinitionInner>> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingRoleDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingRoleDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object if successful.
     */
    public PagedList<BillingRoleDefinitionInner> listByBillingAccountNext(final String nextPageLink) {
        ServiceResponse<Page<BillingRoleDefinitionInner>> response = listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingRoleDefinitionInner>(response.body()) {
            @Override
            public Page<BillingRoleDefinitionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingRoleDefinitionInner>> listByBillingAccountNextAsync(final String nextPageLink, final ServiceFuture<List<BillingRoleDefinitionInner>> serviceFuture, final ListOperationCallback<BillingRoleDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<Page<BillingRoleDefinitionInner>> listByBillingAccountNextAsync(final String nextPageLink) {
        return listByBillingAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Page<BillingRoleDefinitionInner>>() {
                @Override
                public Page<BillingRoleDefinitionInner> call(ServiceResponse<Page<BillingRoleDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(ServiceResponse<Page<BillingRoleDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingRoleDefinitionInner>> result = listByBillingAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingRoleDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingRoleDefinitionInner>> listByBillingAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingRoleDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingRoleDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object if successful.
     */
    public PagedList<BillingRoleDefinitionInner> listByInvoiceSectionNext(final String nextPageLink) {
        ServiceResponse<Page<BillingRoleDefinitionInner>> response = listByInvoiceSectionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingRoleDefinitionInner>(response.body()) {
            @Override
            public Page<BillingRoleDefinitionInner> nextPage(String nextPageLink) {
                return listByInvoiceSectionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingRoleDefinitionInner>> listByInvoiceSectionNextAsync(final String nextPageLink, final ServiceFuture<List<BillingRoleDefinitionInner>> serviceFuture, final ListOperationCallback<BillingRoleDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSectionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(String nextPageLink) {
                    return listByInvoiceSectionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<Page<BillingRoleDefinitionInner>> listByInvoiceSectionNextAsync(final String nextPageLink) {
        return listByInvoiceSectionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Page<BillingRoleDefinitionInner>>() {
                @Override
                public Page<BillingRoleDefinitionInner> call(ServiceResponse<Page<BillingRoleDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByInvoiceSectionNextWithServiceResponseAsync(final String nextPageLink) {
        return listByInvoiceSectionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(ServiceResponse<Page<BillingRoleDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceSectionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByInvoiceSectionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByInvoiceSectionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingRoleDefinitionInner>> result = listByInvoiceSectionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingRoleDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingRoleDefinitionInner>> listByInvoiceSectionNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingRoleDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingRoleDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object if successful.
     */
    public PagedList<BillingRoleDefinitionInner> listByBillingProfileNext(final String nextPageLink) {
        ServiceResponse<Page<BillingRoleDefinitionInner>> response = listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingRoleDefinitionInner>(response.body()) {
            @Override
            public Page<BillingRoleDefinitionInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingRoleDefinitionInner>> listByBillingProfileNextAsync(final String nextPageLink, final ServiceFuture<List<BillingRoleDefinitionInner>> serviceFuture, final ListOperationCallback<BillingRoleDefinitionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<Page<BillingRoleDefinitionInner>> listByBillingProfileNextAsync(final String nextPageLink) {
        return listByBillingProfileNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Page<BillingRoleDefinitionInner>>() {
                @Override
                public Page<BillingRoleDefinitionInner> call(ServiceResponse<Page<BillingRoleDefinitionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingRoleDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingProfileNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingProfileNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingRoleDefinitionInner>>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(ServiceResponse<Page<BillingRoleDefinitionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<BillingRoleDefinitionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingRoleDefinitionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> listByBillingProfileNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingProfileNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingRoleDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingRoleDefinitionInner>> result = listByBillingProfileNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingRoleDefinitionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingRoleDefinitionInner>> listByBillingProfileNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingRoleDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingRoleDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
