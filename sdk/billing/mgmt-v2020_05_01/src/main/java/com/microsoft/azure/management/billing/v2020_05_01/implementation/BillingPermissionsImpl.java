/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2020_05_01.BillingPermissions;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2020_05_01.BillingPermissionsProperties;

class BillingPermissionsImpl extends WrapperImpl<BillingPermissionsInner> implements BillingPermissions {
    private final BillingManager manager;

    BillingPermissionsImpl(BillingManager manager) {
        super(manager.inner().billingPermissions());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private BillingPermissionsPropertiesImpl wrapModel(BillingPermissionsPropertiesInner inner) {
        return  new BillingPermissionsPropertiesImpl(inner, manager());
    }

    @Override
    public Observable<BillingPermissionsProperties> listByBillingAccountAsync(final String billingAccountName) {
        BillingPermissionsInner client = this.inner();
        return client.listByBillingAccountAsync(billingAccountName)
        .flatMapIterable(new Func1<Page<BillingPermissionsPropertiesInner>, Iterable<BillingPermissionsPropertiesInner>>() {
            @Override
            public Iterable<BillingPermissionsPropertiesInner> call(Page<BillingPermissionsPropertiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingPermissionsPropertiesInner, BillingPermissionsProperties>() {
            @Override
            public BillingPermissionsProperties call(BillingPermissionsPropertiesInner inner) {
                return new BillingPermissionsPropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingPermissionsProperties> listByInvoiceSectionsAsync(final String billingAccountName, final String billingProfileName, final String invoiceSectionName) {
        BillingPermissionsInner client = this.inner();
        return client.listByInvoiceSectionsAsync(billingAccountName, billingProfileName, invoiceSectionName)
        .flatMapIterable(new Func1<Page<BillingPermissionsPropertiesInner>, Iterable<BillingPermissionsPropertiesInner>>() {
            @Override
            public Iterable<BillingPermissionsPropertiesInner> call(Page<BillingPermissionsPropertiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingPermissionsPropertiesInner, BillingPermissionsProperties>() {
            @Override
            public BillingPermissionsProperties call(BillingPermissionsPropertiesInner inner) {
                return new BillingPermissionsPropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingPermissionsProperties> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName) {
        BillingPermissionsInner client = this.inner();
        return client.listByBillingProfileAsync(billingAccountName, billingProfileName)
        .flatMapIterable(new Func1<Page<BillingPermissionsPropertiesInner>, Iterable<BillingPermissionsPropertiesInner>>() {
            @Override
            public Iterable<BillingPermissionsPropertiesInner> call(Page<BillingPermissionsPropertiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingPermissionsPropertiesInner, BillingPermissionsProperties>() {
            @Override
            public BillingPermissionsProperties call(BillingPermissionsPropertiesInner inner) {
                return new BillingPermissionsPropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingPermissionsProperties> listByCustomerAsync(final String billingAccountName, final String customerName) {
        BillingPermissionsInner client = this.inner();
        return client.listByCustomerAsync(billingAccountName, customerName)
        .flatMapIterable(new Func1<Page<BillingPermissionsPropertiesInner>, Iterable<BillingPermissionsPropertiesInner>>() {
            @Override
            public Iterable<BillingPermissionsPropertiesInner> call(Page<BillingPermissionsPropertiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingPermissionsPropertiesInner, BillingPermissionsProperties>() {
            @Override
            public BillingPermissionsProperties call(BillingPermissionsPropertiesInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
