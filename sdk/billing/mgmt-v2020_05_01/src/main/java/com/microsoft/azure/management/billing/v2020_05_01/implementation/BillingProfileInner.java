/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import com.microsoft.azure.management.billing.v2020_05_01.BillingRelationshipType;
import com.microsoft.azure.management.billing.v2020_05_01.AddressDetails;
import com.microsoft.azure.management.billing.v2020_05_01.IndirectRelationshipInfo;
import java.util.List;
import com.microsoft.azure.management.billing.v2020_05_01.AzurePlan;
import com.microsoft.azure.management.billing.v2020_05_01.InvoiceSectionsOnExpand;
import com.microsoft.azure.management.billing.v2020_05_01.BillingProfileStatus;
import com.microsoft.azure.management.billing.v2020_05_01.StatusReasonCode;
import com.microsoft.azure.management.billing.v2020_05_01.SpendingLimit;
import com.microsoft.azure.management.billing.v2020_05_01.TargetCloud;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * A billing profile.
 */
@JsonFlatten
public class BillingProfileInner extends ProxyResource {
    /**
     * The name of the billing profile.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /**
     * The purchase order name that will appear on the invoices generated for
     * the billing profile.
     */
    @JsonProperty(value = "properties.poNumber")
    private String poNumber;

    /**
     * Identifies which services and purchases are paid by a billing profile.
     * Possible values include: 'Direct', 'IndirectCustomer',
     * 'IndirectPartner', 'CSPPartner'.
     */
    @JsonProperty(value = "properties.billingRelationshipType", access = JsonProperty.Access.WRITE_ONLY)
    private BillingRelationshipType billingRelationshipType;

    /**
     * Billing address.
     */
    @JsonProperty(value = "properties.billTo")
    private AddressDetails billTo;

    /**
     * Identifies the billing profile that is linked to another billing profile
     * in indirect purchase motion.
     */
    @JsonProperty(value = "properties.indirectRelationshipInfo", access = JsonProperty.Access.WRITE_ONLY)
    private IndirectRelationshipInfo indirectRelationshipInfo;

    /**
     * Flag controlling whether the invoices for the billing profile are sent
     * through email.
     */
    @JsonProperty(value = "properties.invoiceEmailOptIn")
    private Boolean invoiceEmailOptIn;

    /**
     * The day of the month when the invoice for the billing profile is
     * generated.
     */
    @JsonProperty(value = "properties.invoiceDay", access = JsonProperty.Access.WRITE_ONLY)
    private Integer invoiceDay;

    /**
     * The currency in which the charges for the billing profile are billed.
     */
    @JsonProperty(value = "properties.currency", access = JsonProperty.Access.WRITE_ONLY)
    private String currency;

    /**
     * Information about the enabled azure plans.
     */
    @JsonProperty(value = "properties.enabledAzurePlans")
    private List<AzurePlan> enabledAzurePlans;

    /**
     * The invoice sections associated to the billing profile. By default this
     * is not populated, unless it's specified in $expand.
     */
    @JsonProperty(value = "properties.invoiceSections")
    private InvoiceSectionsOnExpand invoiceSections;

    /**
     * Indicates whether user has read access to the billing profile.
     */
    @JsonProperty(value = "properties.hasReadAccess", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean hasReadAccess;

    /**
     * The system generated unique identifier for a billing profile.
     */
    @JsonProperty(value = "properties.systemId", access = JsonProperty.Access.WRITE_ONLY)
    private String systemId;

    /**
     * The status of the billing profile. Possible values include: 'Active',
     * 'Disabled', 'Warned'.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private BillingProfileStatus status;

    /**
     * Reason for the specified billing profile status. Possible values
     * include: 'PastDue', 'SpendingLimitReached', 'SpendingLimitExpired'.
     */
    @JsonProperty(value = "properties.statusReasonCode", access = JsonProperty.Access.WRITE_ONLY)
    private StatusReasonCode statusReasonCode;

    /**
     * The billing profile spending limit. Possible values include: 'Off',
     * 'On'.
     */
    @JsonProperty(value = "properties.spendingLimit", access = JsonProperty.Access.WRITE_ONLY)
    private SpendingLimit spendingLimit;

    /**
     * Identifies the cloud environments that are associated with a billing
     * profile. This is a system managed optional field and gets updated as the
     * billing profile gets associated with accounts in various clouds.
     */
    @JsonProperty(value = "properties.targetClouds", access = JsonProperty.Access.WRITE_ONLY)
    private List<TargetCloud> targetClouds;

    /**
     * Get the name of the billing profile.
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the name of the billing profile.
     *
     * @param displayName the displayName value to set
     * @return the BillingProfileInner object itself.
     */
    public BillingProfileInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the purchase order name that will appear on the invoices generated for the billing profile.
     *
     * @return the poNumber value
     */
    public String poNumber() {
        return this.poNumber;
    }

    /**
     * Set the purchase order name that will appear on the invoices generated for the billing profile.
     *
     * @param poNumber the poNumber value to set
     * @return the BillingProfileInner object itself.
     */
    public BillingProfileInner withPoNumber(String poNumber) {
        this.poNumber = poNumber;
        return this;
    }

    /**
     * Get identifies which services and purchases are paid by a billing profile. Possible values include: 'Direct', 'IndirectCustomer', 'IndirectPartner', 'CSPPartner'.
     *
     * @return the billingRelationshipType value
     */
    public BillingRelationshipType billingRelationshipType() {
        return this.billingRelationshipType;
    }

    /**
     * Get billing address.
     *
     * @return the billTo value
     */
    public AddressDetails billTo() {
        return this.billTo;
    }

    /**
     * Set billing address.
     *
     * @param billTo the billTo value to set
     * @return the BillingProfileInner object itself.
     */
    public BillingProfileInner withBillTo(AddressDetails billTo) {
        this.billTo = billTo;
        return this;
    }

    /**
     * Get identifies the billing profile that is linked to another billing profile in indirect purchase motion.
     *
     * @return the indirectRelationshipInfo value
     */
    public IndirectRelationshipInfo indirectRelationshipInfo() {
        return this.indirectRelationshipInfo;
    }

    /**
     * Get flag controlling whether the invoices for the billing profile are sent through email.
     *
     * @return the invoiceEmailOptIn value
     */
    public Boolean invoiceEmailOptIn() {
        return this.invoiceEmailOptIn;
    }

    /**
     * Set flag controlling whether the invoices for the billing profile are sent through email.
     *
     * @param invoiceEmailOptIn the invoiceEmailOptIn value to set
     * @return the BillingProfileInner object itself.
     */
    public BillingProfileInner withInvoiceEmailOptIn(Boolean invoiceEmailOptIn) {
        this.invoiceEmailOptIn = invoiceEmailOptIn;
        return this;
    }

    /**
     * Get the day of the month when the invoice for the billing profile is generated.
     *
     * @return the invoiceDay value
     */
    public Integer invoiceDay() {
        return this.invoiceDay;
    }

    /**
     * Get the currency in which the charges for the billing profile are billed.
     *
     * @return the currency value
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Get information about the enabled azure plans.
     *
     * @return the enabledAzurePlans value
     */
    public List<AzurePlan> enabledAzurePlans() {
        return this.enabledAzurePlans;
    }

    /**
     * Set information about the enabled azure plans.
     *
     * @param enabledAzurePlans the enabledAzurePlans value to set
     * @return the BillingProfileInner object itself.
     */
    public BillingProfileInner withEnabledAzurePlans(List<AzurePlan> enabledAzurePlans) {
        this.enabledAzurePlans = enabledAzurePlans;
        return this;
    }

    /**
     * Get the invoice sections associated to the billing profile. By default this is not populated, unless it's specified in $expand.
     *
     * @return the invoiceSections value
     */
    public InvoiceSectionsOnExpand invoiceSections() {
        return this.invoiceSections;
    }

    /**
     * Set the invoice sections associated to the billing profile. By default this is not populated, unless it's specified in $expand.
     *
     * @param invoiceSections the invoiceSections value to set
     * @return the BillingProfileInner object itself.
     */
    public BillingProfileInner withInvoiceSections(InvoiceSectionsOnExpand invoiceSections) {
        this.invoiceSections = invoiceSections;
        return this;
    }

    /**
     * Get indicates whether user has read access to the billing profile.
     *
     * @return the hasReadAccess value
     */
    public Boolean hasReadAccess() {
        return this.hasReadAccess;
    }

    /**
     * Get the system generated unique identifier for a billing profile.
     *
     * @return the systemId value
     */
    public String systemId() {
        return this.systemId;
    }

    /**
     * Get the status of the billing profile. Possible values include: 'Active', 'Disabled', 'Warned'.
     *
     * @return the status value
     */
    public BillingProfileStatus status() {
        return this.status;
    }

    /**
     * Get reason for the specified billing profile status. Possible values include: 'PastDue', 'SpendingLimitReached', 'SpendingLimitExpired'.
     *
     * @return the statusReasonCode value
     */
    public StatusReasonCode statusReasonCode() {
        return this.statusReasonCode;
    }

    /**
     * Get the billing profile spending limit. Possible values include: 'Off', 'On'.
     *
     * @return the spendingLimit value
     */
    public SpendingLimit spendingLimit() {
        return this.spendingLimit;
    }

    /**
     * Get identifies the cloud environments that are associated with a billing profile. This is a system managed optional field and gets updated as the billing profile gets associated with accounts in various clouds.
     *
     * @return the targetClouds value
     */
    public List<TargetCloud> targetClouds() {
        return this.targetClouds;
    }

}
