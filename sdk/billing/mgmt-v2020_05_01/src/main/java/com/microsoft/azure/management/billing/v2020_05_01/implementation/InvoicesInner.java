/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.management.billing.v2020_05_01.InvoicesDownloadBillingSubscriptionInvoiceHeaders;
import com.microsoft.azure.management.billing.v2020_05_01.InvoicesDownloadInvoiceHeaders;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in Invoices.
 */
public class InvoicesInner {
    /** The Retrofit service to perform REST calls. */
    private InvoicesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of InvoicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public InvoicesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(InvoicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Invoices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface InvoicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices getById" })
        @GET("providers/Microsoft.Billing/billingAccounts/default/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> getById(@Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices downloadInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> downloadInvoice(@Path("billingAccountName") String billingAccountName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Query("downloadToken") String downloadToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices beginDownloadInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> beginDownloadInvoice(@Path("billingAccountName") String billingAccountName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Query("downloadToken") String downloadToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices listByBillingSubscription" })
        @GET("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices")
        Observable<Response<ResponseBody>> listByBillingSubscription(@Path("subscriptionId") String subscriptionId, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices getBySubscriptionAndInvoiceId" })
        @GET("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> getBySubscriptionAndInvoiceId(@Path("subscriptionId") String subscriptionId, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices downloadBillingSubscriptionInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> downloadBillingSubscriptionInvoice(@Path("subscriptionId") String subscriptionId, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Query("downloadToken") String downloadToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices beginDownloadBillingSubscriptionInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download")
        Observable<Response<ResponseBody>> beginDownloadBillingSubscriptionInvoice(@Path("subscriptionId") String subscriptionId, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Query("downloadToken") String downloadToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices listByBillingAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices listByBillingProfileNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingProfileNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.Invoices listByBillingSubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingSubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingAccount(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingAccountAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingAccountAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        return listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingAccount(billingAccountName, apiVersion, periodStartDate, periodEndDate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingProfile(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingProfileWithServiceResponseAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        return listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<InvoiceInner>> * @param billingProfileName The ID that uniquely identifies a billing profile.
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingProfileSinglePageAsync(final String billingAccountName, final String billingProfileName, final String periodStartDate, final String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingProfile(billingAccountName, billingProfileName, apiVersion, periodStartDate, periodEndDate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingProfileDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceInner object if successful.
     */
    public InvoiceInner get(String billingAccountName, String invoiceName) {
        return getWithServiceResponseAsync(billingAccountName, invoiceName).toBlocking().single().body();
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceInner> getAsync(String billingAccountName, String invoiceName, final ServiceCallback<InvoiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, invoiceName), serviceCallback);
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<InvoiceInner> getAsync(String billingAccountName, String invoiceName) {
        return getWithServiceResponseAsync(billingAccountName, invoiceName).map(new Func1<ServiceResponse<InvoiceInner>, InvoiceInner>() {
            @Override
            public InvoiceInner call(ServiceResponse<InvoiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<ServiceResponse<InvoiceInner>> getWithServiceResponseAsync(String billingAccountName, String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.get(billingAccountName, invoiceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceInner object if successful.
     */
    public InvoiceInner getById(String invoiceName) {
        return getByIdWithServiceResponseAsync(invoiceName).toBlocking().single().body();
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceInner> getByIdAsync(String invoiceName, final ServiceCallback<InvoiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(invoiceName), serviceCallback);
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<InvoiceInner> getByIdAsync(String invoiceName) {
        return getByIdWithServiceResponseAsync(invoiceName).map(new Func1<ServiceResponse<InvoiceInner>, InvoiceInner>() {
            @Override
            public InvoiceInner call(ServiceResponse<InvoiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<ServiceResponse<InvoiceInner>> getByIdWithServiceResponseAsync(String invoiceName) {
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.getById(invoiceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceInner> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceInner> getByIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner downloadInvoice(String billingAccountName, String invoiceName, String downloadToken) {
        return downloadInvoiceWithServiceResponseAsync(billingAccountName, invoiceName, downloadToken).toBlocking().last().body();
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> downloadInvoiceAsync(String billingAccountName, String invoiceName, String downloadToken, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(downloadInvoiceWithServiceResponseAsync(billingAccountName, invoiceName, downloadToken), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DownloadUrlInner> downloadInvoiceAsync(String billingAccountName, String invoiceName, String downloadToken) {
        return downloadInvoiceWithServiceResponseAsync(billingAccountName, invoiceName, downloadToken).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders>> downloadInvoiceWithServiceResponseAsync(String billingAccountName, String invoiceName, String downloadToken) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (downloadToken == null) {
            throw new IllegalArgumentException("Parameter downloadToken is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        Observable<Response<ResponseBody>> observable = service.downloadInvoice(billingAccountName, invoiceName, apiVersion, downloadToken, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<DownloadUrlInner>() { }.getType(), InvoicesDownloadInvoiceHeaders.class);
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner beginDownloadInvoice(String billingAccountName, String invoiceName, String downloadToken) {
        return beginDownloadInvoiceWithServiceResponseAsync(billingAccountName, invoiceName, downloadToken).toBlocking().single().body();
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> beginDownloadInvoiceAsync(String billingAccountName, String invoiceName, String downloadToken, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDownloadInvoiceWithServiceResponseAsync(billingAccountName, invoiceName, downloadToken), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<DownloadUrlInner> beginDownloadInvoiceAsync(String billingAccountName, String invoiceName, String downloadToken) {
        return beginDownloadInvoiceWithServiceResponseAsync(billingAccountName, invoiceName, downloadToken).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders>> beginDownloadInvoiceWithServiceResponseAsync(String billingAccountName, String invoiceName, String downloadToken) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (downloadToken == null) {
            throw new IllegalArgumentException("Parameter downloadToken is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.beginDownloadInvoice(billingAccountName, invoiceName, apiVersion, downloadToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders> clientResponse = beginDownloadInvoiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadInvoiceHeaders> beginDownloadInvoiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadUrlInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadUrlInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, InvoicesDownloadInvoiceHeaders.class);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingSubscription(final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingSubscriptionSinglePageAsync(periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingSubscriptionAsync(final String periodStartDate, final String periodEndDate, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingSubscriptionSinglePageAsync(periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingSubscriptionAsync(final String periodStartDate, final String periodEndDate) {
        return listByBillingSubscriptionWithServiceResponseAsync(periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionWithServiceResponseAsync(final String periodStartDate, final String periodEndDate) {
        return listByBillingSubscriptionSinglePageAsync(periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodStartDate Invoice period start date.
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionSinglePageAsync(final String periodStartDate, final String periodEndDate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingSubscription(this.client.subscriptionId(), periodStartDate, periodEndDate, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an invoice by subscription ID and invoice ID.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceInner object if successful.
     */
    public InvoiceInner getBySubscriptionAndInvoiceId(String invoiceName) {
        return getBySubscriptionAndInvoiceIdWithServiceResponseAsync(invoiceName).toBlocking().single().body();
    }

    /**
     * Gets an invoice by subscription ID and invoice ID.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceInner> getBySubscriptionAndInvoiceIdAsync(String invoiceName, final ServiceCallback<InvoiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getBySubscriptionAndInvoiceIdWithServiceResponseAsync(invoiceName), serviceCallback);
    }

    /**
     * Gets an invoice by subscription ID and invoice ID.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<InvoiceInner> getBySubscriptionAndInvoiceIdAsync(String invoiceName) {
        return getBySubscriptionAndInvoiceIdWithServiceResponseAsync(invoiceName).map(new Func1<ServiceResponse<InvoiceInner>, InvoiceInner>() {
            @Override
            public InvoiceInner call(ServiceResponse<InvoiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an invoice by subscription ID and invoice ID.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<ServiceResponse<InvoiceInner>> getBySubscriptionAndInvoiceIdWithServiceResponseAsync(String invoiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.getBySubscriptionAndInvoiceId(this.client.subscriptionId(), invoiceName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceInner> clientResponse = getBySubscriptionAndInvoiceIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceInner> getBySubscriptionAndInvoiceIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner downloadBillingSubscriptionInvoice(String invoiceName, String downloadToken) {
        return downloadBillingSubscriptionInvoiceWithServiceResponseAsync(invoiceName, downloadToken).toBlocking().last().body();
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> downloadBillingSubscriptionInvoiceAsync(String invoiceName, String downloadToken, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(downloadBillingSubscriptionInvoiceWithServiceResponseAsync(invoiceName, downloadToken), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DownloadUrlInner> downloadBillingSubscriptionInvoiceAsync(String invoiceName, String downloadToken) {
        return downloadBillingSubscriptionInvoiceWithServiceResponseAsync(invoiceName, downloadToken).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders>> downloadBillingSubscriptionInvoiceWithServiceResponseAsync(String invoiceName, String downloadToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (downloadToken == null) {
            throw new IllegalArgumentException("Parameter downloadToken is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        Observable<Response<ResponseBody>> observable = service.downloadBillingSubscriptionInvoice(this.client.subscriptionId(), invoiceName, apiVersion, downloadToken, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<DownloadUrlInner>() { }.getType(), InvoicesDownloadBillingSubscriptionInvoiceHeaders.class);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner beginDownloadBillingSubscriptionInvoice(String invoiceName, String downloadToken) {
        return beginDownloadBillingSubscriptionInvoiceWithServiceResponseAsync(invoiceName, downloadToken).toBlocking().single().body();
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> beginDownloadBillingSubscriptionInvoiceAsync(String invoiceName, String downloadToken, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDownloadBillingSubscriptionInvoiceWithServiceResponseAsync(invoiceName, downloadToken), serviceCallback);
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<DownloadUrlInner> beginDownloadBillingSubscriptionInvoiceAsync(String invoiceName, String downloadToken) {
        return beginDownloadBillingSubscriptionInvoiceWithServiceResponseAsync(invoiceName, downloadToken).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an invoice.
     *
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders>> beginDownloadBillingSubscriptionInvoiceWithServiceResponseAsync(String invoiceName, String downloadToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (downloadToken == null) {
            throw new IllegalArgumentException("Parameter downloadToken is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.beginDownloadBillingSubscriptionInvoice(this.client.subscriptionId(), invoiceName, apiVersion, downloadToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders> clientResponse = beginDownloadBillingSubscriptionInvoiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadBillingSubscriptionInvoiceHeaders> beginDownloadBillingSubscriptionInvoiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadUrlInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadUrlInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, InvoicesDownloadBillingSubscriptionInvoiceHeaders.class);
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingAccountNext(final String nextPageLink) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingAccountNextAsync(final String nextPageLink, final ServiceFuture<List<InvoiceInner>> serviceFuture, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingAccountNextAsync(final String nextPageLink) {
        return listByBillingAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingProfileNext(final String nextPageLink) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingProfileNextAsync(final String nextPageLink, final ServiceFuture<List<InvoiceInner>> serviceFuture, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingProfileNextAsync(final String nextPageLink) {
        return listByBillingProfileNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingProfileNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingProfileNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingProfileNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingProfileNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingProfileNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingProfileNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingSubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingSubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<InvoiceInner>> serviceFuture, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingSubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingSubscriptionNextAsync(final String nextPageLink) {
        return listByBillingSubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingSubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingSubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingSubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingSubscriptionNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
