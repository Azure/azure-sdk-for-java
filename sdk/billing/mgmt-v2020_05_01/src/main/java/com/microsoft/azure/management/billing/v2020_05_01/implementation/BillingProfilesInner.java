/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2020_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2020_05_01.BillingProfilesCreateOrUpdateHeaders;
import com.microsoft.azure.management.billing.v2020_05_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BillingProfiles.
 */
public class BillingProfilesInner {
    /** The Retrofit service to perform REST calls. */
    private BillingProfilesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingProfilesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BillingProfilesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(BillingProfilesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingProfiles to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BillingProfilesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingProfiles listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingProfiles get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingProfiles createOrUpdate" })
        @PUT("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Body BillingProfileInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingProfiles beginCreateOrUpdate" })
        @PUT("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Body BillingProfileInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2020_05_01.BillingProfiles listByBillingAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingProfileInner&gt; object if successful.
     */
    public PagedList<BillingProfileInner> listByBillingAccount(final String billingAccountName) {
        ServiceResponse<Page<BillingProfileInner>> response = listByBillingAccountSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<BillingProfileInner>(response.body()) {
            @Override
            public Page<BillingProfileInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingProfileInner>> listByBillingAccountAsync(final String billingAccountName, final ListOperationCallback<BillingProfileInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingProfileInner&gt; object
     */
    public Observable<Page<BillingProfileInner>> listByBillingAccountAsync(final String billingAccountName) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<BillingProfileInner>>, Page<BillingProfileInner>>() {
                @Override
                public Page<BillingProfileInner> call(ServiceResponse<Page<BillingProfileInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingProfileInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingProfileInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<BillingProfileInner>>, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(ServiceResponse<Page<BillingProfileInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingProfileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingProfileInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        final String expand = null;
        return service.listByBillingAccount(billingAccountName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingProfileInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingProfileInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the invoice sections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingProfileInner&gt; object if successful.
     */
    public PagedList<BillingProfileInner> listByBillingAccount(final String billingAccountName, final String expand) {
        ServiceResponse<Page<BillingProfileInner>> response = listByBillingAccountSinglePageAsync(billingAccountName, expand).toBlocking().single();
        return new PagedList<BillingProfileInner>(response.body()) {
            @Override
            public Page<BillingProfileInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the invoice sections.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingProfileInner>> listByBillingAccountAsync(final String billingAccountName, final String expand, final ListOperationCallback<BillingProfileInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName, expand),
            new Func1<String, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the invoice sections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingProfileInner&gt; object
     */
    public Observable<Page<BillingProfileInner>> listByBillingAccountAsync(final String billingAccountName, final String expand) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, expand)
            .map(new Func1<ServiceResponse<Page<BillingProfileInner>>, Page<BillingProfileInner>>() {
                @Override
                public Page<BillingProfileInner> call(ServiceResponse<Page<BillingProfileInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param expand May be used to expand the invoice sections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingProfileInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingProfileInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName, final String expand) {
        return listByBillingAccountSinglePageAsync(billingAccountName, expand)
            .concatMap(new Func1<ServiceResponse<Page<BillingProfileInner>>, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(ServiceResponse<Page<BillingProfileInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
    ServiceResponse<PageImpl<BillingProfileInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<BillingProfileInner>> * @param expand May be used to expand the invoice sections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingProfileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingProfileInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName, final String expand) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.listByBillingAccount(billingAccountName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingProfileInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingProfileInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingProfileInner>> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingProfileInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingProfileInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner get(String billingAccountName, String billingProfileName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName).toBlocking().single().body();
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> getAsync(String billingAccountName, String billingProfileName, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName), serviceCallback);
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<BillingProfileInner> getAsync(String billingAccountName, String billingProfileName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName).map(new Func1<ServiceResponse<BillingProfileInner>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponse<BillingProfileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<ServiceResponse<BillingProfileInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        final String expand = null;
        return service.get(billingAccountName, billingProfileName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingProfileInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param expand May be used to expand the invoice sections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner get(String billingAccountName, String billingProfileName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, expand).toBlocking().single().body();
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param expand May be used to expand the invoice sections.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> getAsync(String billingAccountName, String billingProfileName, String expand, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, expand), serviceCallback);
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param expand May be used to expand the invoice sections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<BillingProfileInner> getAsync(String billingAccountName, String billingProfileName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, expand).map(new Func1<ServiceResponse<BillingProfileInner>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponse<BillingProfileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param expand May be used to expand the invoice sections.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<ServiceResponse<BillingProfileInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String expand) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        final String apiVersion = "2020-05-01";
        return service.get(billingAccountName, billingProfileName, apiVersion, expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BillingProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<BillingProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BillingProfileInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BillingProfileInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingProfileInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingProfileInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner createOrUpdate(String billingAccountName, String billingProfileName, BillingProfileInner parameters) {
        return createOrUpdateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> createOrUpdateAsync(String billingAccountName, String billingProfileName, BillingProfileInner parameters, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BillingProfileInner> createOrUpdateAsync(String billingAccountName, String billingProfileName, BillingProfileInner parameters) {
        return createOrUpdateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters).map(new Func1<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String billingAccountName, String billingProfileName, BillingProfileInner parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2020-05-01";
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(billingAccountName, billingProfileName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<BillingProfileInner>() { }.getType(), BillingProfilesCreateOrUpdateHeaders.class);
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BillingProfileInner object if successful.
     */
    public BillingProfileInner beginCreateOrUpdate(String billingAccountName, String billingProfileName, BillingProfileInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BillingProfileInner> beginCreateOrUpdateAsync(String billingAccountName, String billingProfileName, BillingProfileInner parameters, final ServiceCallback<BillingProfileInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<BillingProfileInner> beginCreateOrUpdateAsync(String billingAccountName, String billingProfileName, BillingProfileInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(billingAccountName, billingProfileName, parameters).map(new Func1<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders>, BillingProfileInner>() {
            @Override
            public BillingProfileInner call(ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BillingProfileInner object
     */
    public Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String billingAccountName, String billingProfileName, BillingProfileInner parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2020-05-01";
        return service.beginCreateOrUpdate(billingAccountName, billingProfileName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<BillingProfileInner, BillingProfilesCreateOrUpdateHeaders> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BillingProfileInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BillingProfileInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, BillingProfilesCreateOrUpdateHeaders.class);
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BillingProfileInner&gt; object if successful.
     */
    public PagedList<BillingProfileInner> listByBillingAccountNext(final String nextPageLink) {
        ServiceResponse<Page<BillingProfileInner>> response = listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BillingProfileInner>(response.body()) {
            @Override
            public Page<BillingProfileInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BillingProfileInner>> listByBillingAccountNextAsync(final String nextPageLink, final ServiceFuture<List<BillingProfileInner>> serviceFuture, final ListOperationCallback<BillingProfileInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingProfileInner&gt; object
     */
    public Observable<Page<BillingProfileInner>> listByBillingAccountNextAsync(final String nextPageLink) {
        return listByBillingAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BillingProfileInner>>, Page<BillingProfileInner>>() {
                @Override
                public Page<BillingProfileInner> call(ServiceResponse<Page<BillingProfileInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BillingProfileInner&gt; object
     */
    public Observable<ServiceResponse<Page<BillingProfileInner>>> listByBillingAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BillingProfileInner>>, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(ServiceResponse<Page<BillingProfileInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
    ServiceResponse<PageImpl<BillingProfileInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BillingProfileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BillingProfileInner>>> listByBillingAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BillingProfileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BillingProfileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BillingProfileInner>> result = listByBillingAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BillingProfileInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BillingProfileInner>> listByBillingAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BillingProfileInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BillingProfileInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
