/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.billing.v2017_04_24_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2017_04_24_preview.Invoices;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2017_04_24_preview.Invoice;
import com.microsoft.azure.arm.utils.PagedListConverter;

class InvoicesImpl extends WrapperImpl<InvoicesInner> implements Invoices {
    private PagedListConverter<InvoiceInner, Invoice> converter;
    private final BillingManager manager;

    InvoicesImpl(BillingManager manager) {
        super(manager.inner().invoices());
        this.manager = manager;
        this.converter = new PagedListConverter<InvoiceInner, Invoice>() {
            @Override
            public Observable<Invoice> typeConvertAsync(InvoiceInner inner) {
                return Observable.just((Invoice) wrapModel(inner));
            }
        };
    }

    public BillingManager manager() {
        return this.manager;
    }

    private InvoiceImpl wrapModel(InvoiceInner inner) {
        return  new InvoiceImpl(inner, manager());
    }

    @Override
    public Observable<Invoice> getAsync(String invoiceName) {
        InvoicesInner client = this.inner();
        return client.getAsync(invoiceName)
        .map(new Func1<InvoiceInner, Invoice>() {
            @Override
            public Invoice call(InvoiceInner inner) {
                return new InvoiceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Invoice> getLatestAsync() {
        InvoicesInner client = this.inner();
        return client.getLatestAsync()
        .map(new Func1<InvoiceInner, Invoice>() {
            @Override
            public Invoice call(InvoiceInner inner) {
                return new InvoiceImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<Invoice> list() {
        InvoicesInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<Invoice> listAsync() {
        InvoicesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<InvoiceInner>, Iterable<InvoiceInner>>() {
            @Override
            public Iterable<InvoiceInner> call(Page<InvoiceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<InvoiceInner, Invoice>() {
            @Override
            public Invoice call(InvoiceInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
