/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.billing.v2017_04_24_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2017_04_24_preview.BillingPeriods;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2017_04_24_preview.BillingPeriod;
import com.microsoft.azure.arm.utils.PagedListConverter;

class BillingPeriodsImpl extends WrapperImpl<BillingPeriodsInner> implements BillingPeriods {
    private PagedListConverter<BillingPeriodInner, BillingPeriod> converter;
    private final BillingManager manager;

    BillingPeriodsImpl(BillingManager manager) {
        super(manager.inner().billingPeriods());
        this.manager = manager;
        this.converter = new PagedListConverter<BillingPeriodInner, BillingPeriod>() {
            @Override
            public Observable<BillingPeriod> typeConvertAsync(BillingPeriodInner inner) {
                return Observable.just((BillingPeriod) wrapModel(inner));
            }
        };
    }

    public BillingManager manager() {
        return this.manager;
    }

    private BillingPeriodImpl wrapModel(BillingPeriodInner inner) {
        return  new BillingPeriodImpl(inner, manager());
    }

    @Override
    public Observable<BillingPeriod> getAsync(String billingPeriodName) {
        BillingPeriodsInner client = this.inner();
        return client.getAsync(billingPeriodName)
        .map(new Func1<BillingPeriodInner, BillingPeriod>() {
            @Override
            public BillingPeriod call(BillingPeriodInner inner) {
                return new BillingPeriodImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<BillingPeriod> list() {
        BillingPeriodsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<BillingPeriod> listAsync() {
        BillingPeriodsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<BillingPeriodInner>, Iterable<BillingPeriodInner>>() {
            @Override
            public Iterable<BillingPeriodInner> call(Page<BillingPeriodInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingPeriodInner, BillingPeriod>() {
            @Override
            public BillingPeriod call(BillingPeriodInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
