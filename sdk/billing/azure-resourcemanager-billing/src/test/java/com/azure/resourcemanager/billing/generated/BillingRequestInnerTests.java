// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.BillingRequestInner;
import com.azure.resourcemanager.billing.models.BillingRequestProperties;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesCreatedBy;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesLastUpdatedBy;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesReviewedBy;
import com.azure.resourcemanager.billing.models.BillingRequestStatus;
import com.azure.resourcemanager.billing.models.BillingRequestType;
import com.azure.resourcemanager.billing.models.Principal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BillingRequestInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingRequestInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"additionalInformation\":{\"tuzqogsexne\":\"aabjyvayffimrz\",\"wmewzsyy\":\"fdnw\",\"judpfrxt\":\"euzsoi\"},\"reviewedBy\":{\"tenantId\":\"zvaytdwkqbr\",\"objectId\":\"bpaxhexiilivpdt\",\"upn\":\"r\"},\"reviewalDate\":\"2021-10-30T18:40:51Z\",\"billingAccountId\":\"oaxoruzfgsqu\",\"billingAccountName\":\"xrxxlep\",\"billingAccountDisplayName\":\"amxjezwlw\",\"billingAccountPrimaryBillingTenantId\":\"xuqlcvydypat\",\"billingProfileId\":\"oa\",\"billingProfileName\":\"kniod\",\"billingProfileDisplayName\":\"oebwnujhemms\",\"createdBy\":{\"tenantId\":\"kcrodtjinfw\",\"objectId\":\"fltkacjv\",\"upn\":\"kdlfoa\"},\"creationDate\":\"2020-12-29T16:57:58Z\",\"expirationDate\":\"2021-02-17T13:48:46Z\",\"decisionReason\":\"agaowpulpqblylsy\",\"invoiceSectionId\":\"qjnsjervtia\",\"invoiceSectionName\":\"sdszue\",\"invoiceSectionDisplayName\":\"sbzkf\",\"customerId\":\"eyvpnqicvinvkj\",\"customerName\":\"dxrbuukzcle\",\"customerDisplayName\":\"hmlwpaztzpo\",\"subscriptionId\":\"cckwyfzqwhxxbu\",\"subscriptionName\":\"a\",\"subscriptionDisplayName\":\"feqztppriol\",\"justification\":\"rjaltolmncw\",\"recipients\":[{\"tenantId\":\"wcsdbnwdcfhucq\",\"objectId\":\"fuvglsbjjca\",\"upn\":\"xbvtvudu\"},{\"tenantId\":\"cormr\",\"objectId\":\"qtvcofudflvkgj\",\"upn\":\"gdknnqv\"},{\"tenantId\":\"znqntoru\",\"objectId\":\"gsahmkycgrauw\",\"upn\":\"etaebu\"}],\"requestScope\":\"vdmovsmzlxwabm\",\"billingScope\":\"efkifr\",\"status\":\"Approved\",\"type\":\"ProvisioningAccess\",\"lastUpdatedBy\":{\"tenantId\":\"mqlgk\",\"objectId\":\"tndoaongbjc\",\"upn\":\"ujitcjedftww\"},\"lastUpdatedDate\":\"2021-04-17T00:18:26Z\"},\"tags\":{\"bxarzgszufoxci\":\"jvdcpzfoqouic\",\"haz\":\"opidoamciodh\",\"toego\":\"khnzbonlw\"},\"id\":\"wbw\",\"name\":\"kszzcmrvexztv\",\"type\":\"t\"}")
            .toObject(BillingRequestInner.class);
        Assertions.assertEquals("jvdcpzfoqouic", model.tags().get("bxarzgszufoxci"));
        Assertions.assertEquals("aabjyvayffimrz", model.properties().additionalInformation().get("tuzqogsexne"));
        Assertions.assertEquals("zvaytdwkqbr", model.properties().reviewedBy().tenantId());
        Assertions.assertEquals("bpaxhexiilivpdt", model.properties().reviewedBy().objectId());
        Assertions.assertEquals("r", model.properties().reviewedBy().upn());
        Assertions.assertEquals("kcrodtjinfw", model.properties().createdBy().tenantId());
        Assertions.assertEquals("fltkacjv", model.properties().createdBy().objectId());
        Assertions.assertEquals("kdlfoa", model.properties().createdBy().upn());
        Assertions.assertEquals("agaowpulpqblylsy", model.properties().decisionReason());
        Assertions.assertEquals("rjaltolmncw", model.properties().justification());
        Assertions.assertEquals("wcsdbnwdcfhucq", model.properties().recipients().get(0).tenantId());
        Assertions.assertEquals("fuvglsbjjca", model.properties().recipients().get(0).objectId());
        Assertions.assertEquals("xbvtvudu", model.properties().recipients().get(0).upn());
        Assertions.assertEquals("vdmovsmzlxwabm", model.properties().requestScope());
        Assertions.assertEquals(BillingRequestStatus.APPROVED, model.properties().status());
        Assertions.assertEquals(BillingRequestType.PROVISIONING_ACCESS, model.properties().type());
        Assertions.assertEquals("mqlgk", model.properties().lastUpdatedBy().tenantId());
        Assertions.assertEquals("tndoaongbjc", model.properties().lastUpdatedBy().objectId());
        Assertions.assertEquals("ujitcjedftww", model.properties().lastUpdatedBy().upn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingRequestInner model = new BillingRequestInner()
            .withTags(mapOf("bxarzgszufoxci", "jvdcpzfoqouic", "haz", "opidoamciodh", "toego", "khnzbonlw"))
            .withProperties(new BillingRequestProperties()
                .withAdditionalInformation(
                    mapOf("tuzqogsexne", "aabjyvayffimrz", "wmewzsyy", "fdnw", "judpfrxt", "euzsoi"))
                .withReviewedBy(new BillingRequestPropertiesReviewedBy().withTenantId("zvaytdwkqbr")
                    .withObjectId("bpaxhexiilivpdt")
                    .withUpn("r"))
                .withCreatedBy(new BillingRequestPropertiesCreatedBy().withTenantId("kcrodtjinfw")
                    .withObjectId("fltkacjv")
                    .withUpn("kdlfoa"))
                .withDecisionReason("agaowpulpqblylsy")
                .withJustification("rjaltolmncw")
                .withRecipients(Arrays.asList(
                    new Principal().withTenantId("wcsdbnwdcfhucq").withObjectId("fuvglsbjjca").withUpn("xbvtvudu"),
                    new Principal().withTenantId("cormr").withObjectId("qtvcofudflvkgj").withUpn("gdknnqv"),
                    new Principal().withTenantId("znqntoru").withObjectId("gsahmkycgrauw").withUpn("etaebu")))
                .withRequestScope("vdmovsmzlxwabm")
                .withStatus(BillingRequestStatus.APPROVED)
                .withType(BillingRequestType.PROVISIONING_ACCESS)
                .withLastUpdatedBy(new BillingRequestPropertiesLastUpdatedBy().withTenantId("mqlgk")
                    .withObjectId("tndoaongbjc")
                    .withUpn("ujitcjedftww")));
        model = BinaryData.fromObject(model).toObject(BillingRequestInner.class);
        Assertions.assertEquals("jvdcpzfoqouic", model.tags().get("bxarzgszufoxci"));
        Assertions.assertEquals("aabjyvayffimrz", model.properties().additionalInformation().get("tuzqogsexne"));
        Assertions.assertEquals("zvaytdwkqbr", model.properties().reviewedBy().tenantId());
        Assertions.assertEquals("bpaxhexiilivpdt", model.properties().reviewedBy().objectId());
        Assertions.assertEquals("r", model.properties().reviewedBy().upn());
        Assertions.assertEquals("kcrodtjinfw", model.properties().createdBy().tenantId());
        Assertions.assertEquals("fltkacjv", model.properties().createdBy().objectId());
        Assertions.assertEquals("kdlfoa", model.properties().createdBy().upn());
        Assertions.assertEquals("agaowpulpqblylsy", model.properties().decisionReason());
        Assertions.assertEquals("rjaltolmncw", model.properties().justification());
        Assertions.assertEquals("wcsdbnwdcfhucq", model.properties().recipients().get(0).tenantId());
        Assertions.assertEquals("fuvglsbjjca", model.properties().recipients().get(0).objectId());
        Assertions.assertEquals("xbvtvudu", model.properties().recipients().get(0).upn());
        Assertions.assertEquals("vdmovsmzlxwabm", model.properties().requestScope());
        Assertions.assertEquals(BillingRequestStatus.APPROVED, model.properties().status());
        Assertions.assertEquals(BillingRequestType.PROVISIONING_ACCESS, model.properties().type());
        Assertions.assertEquals("mqlgk", model.properties().lastUpdatedBy().tenantId());
        Assertions.assertEquals("tndoaongbjc", model.properties().lastUpdatedBy().objectId());
        Assertions.assertEquals("ujitcjedftww", model.properties().lastUpdatedBy().upn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
