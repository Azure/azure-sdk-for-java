// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.CustomerPolicyInner;
import com.azure.resourcemanager.billing.models.CustomerPolicy;
import com.azure.resourcemanager.billing.models.CustomerPolicyProperties;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ViewChargesPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoliciesCreateOrUpdateByCustomerAtBillingAccountMockTests {
    @Test
    public void testCreateOrUpdateByCustomerAtBillingAccount() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"viewCharges\":\"NotAllowed\",\"policies\":[{\"name\":\"ttkprxypxtip\",\"value\":\"bebafiqxomevke\",\"policyType\":\"SystemControlled\",\"scope\":\"vncxtnbutytoaini\"},{\"name\":\"xhzqgbaqvqe\",\"value\":\"ackobkrg\",\"policyType\":\"UserControlled\",\"scope\":\"bxwxlh\"}]},\"tags\":{\"zlgu\":\"hxothfyifju\",\"hmnuzyycqs\":\"smt\",\"amochpwwykfy\":\"yrywdezprycixjg\",\"khmoudmcad\":\"jkztdckwqv\"},\"id\":\"jfuvmjtxwazyvibn\",\"name\":\"ebffkgfiyd\",\"type\":\"rjmwaa\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomerPolicy response
            = manager.policies()
                .createOrUpdateByCustomerAtBillingAccount("zmfpspaxhfuwygss", "sjcpfepylms", new CustomerPolicyInner()
                    .withTags(mapOf("qgxbovtj", "z", "fyevhurklow", "dymdypsxkw", "lyoix", "drvzcl", "nqizvsih", "ei"))
                    .withProperties(new CustomerPolicyProperties().withViewCharges(ViewChargesPolicy.OTHER)
                        .withPolicies(Arrays.asList(
                            new PolicySummary().withName("iyzrdjfmmwk")
                                .withValue("yxyksdel")
                                .withPolicyType(PolicyType.OTHER)
                                .withScope("ffvbhtuey"),
                            new PolicySummary().withName("kxqnwc")
                                .withValue("qsbncadfapzebjeg")
                                .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                                .withScope("erbyw"),
                            new PolicySummary().withName("veisjbpzdwhxputk")
                                .withValue("l")
                                .withPolicyType(PolicyType.USER_CONTROLLED)
                                .withScope("vdfeyaevzjqfxf")))),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hxothfyifju", response.tags().get("zlgu"));
        Assertions.assertEquals(ViewChargesPolicy.NOT_ALLOWED, response.properties().viewCharges());
        Assertions.assertEquals("ttkprxypxtip", response.properties().policies().get(0).name());
        Assertions.assertEquals("bebafiqxomevke", response.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.SYSTEM_CONTROLLED, response.properties().policies().get(0).policyType());
        Assertions.assertEquals("vncxtnbutytoaini", response.properties().policies().get(0).scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
