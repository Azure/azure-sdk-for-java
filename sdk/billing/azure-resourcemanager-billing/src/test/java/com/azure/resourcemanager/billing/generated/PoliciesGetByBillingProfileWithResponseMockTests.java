// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.BillingProfilePolicy;
import com.azure.resourcemanager.billing.models.EnrollmentAccountOwnerViewCharges;
import com.azure.resourcemanager.billing.models.EnrollmentAuthLevelState;
import com.azure.resourcemanager.billing.models.EnrollmentDepartmentAdminViewCharges;
import com.azure.resourcemanager.billing.models.InvoiceSectionLabelManagementPolicy;
import com.azure.resourcemanager.billing.models.MarketplacePurchasesPolicy;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ReservationPurchasesPolicy;
import com.azure.resourcemanager.billing.models.SavingsPlanPurchasesPolicy;
import com.azure.resourcemanager.billing.models.ViewChargesPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoliciesGetByBillingProfileWithResponseMockTests {
    @Test
    public void testGetByBillingProfileWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Pending\",\"enterpriseAgreementPolicies\":{\"authenticationType\":\"OrganizationalAccountOnly\",\"accountOwnerViewCharges\":\"NotAllowed\",\"departmentAdminViewCharges\":\"Allowed\"},\"invoiceSectionLabelManagement\":\"Allowed\",\"marketplacePurchases\":\"AllAllowed\",\"reservationPurchases\":\"Allowed\",\"savingsPlanPurchases\":\"Disabled\",\"viewCharges\":\"NotAllowed\",\"policies\":[{\"name\":\"fxbiqwgm\",\"value\":\"nwaofnoiphw\",\"policyType\":\"Other\",\"scope\":\"ugxjtuhidjws\"}]},\"tags\":{\"vtymncwjdmjdph\":\"cqenyjwadvfq\",\"jrbnzbemr\":\"f\"},\"id\":\"fimageiqjneprhx\",\"name\":\"ktusrpjmevszbj\",\"type\":\"qktokc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingProfilePolicy response = manager.policies()
            .getByBillingProfileWithResponse("hsfgaxuvaej", "af", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cqenyjwadvfq", response.tags().get("vtymncwjdmjdph"));
        Assertions.assertEquals(EnrollmentAuthLevelState.ORGANIZATIONAL_ACCOUNT_ONLY,
            response.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.NOT_ALLOWED,
            response.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.ALLOWED,
            response.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(InvoiceSectionLabelManagementPolicy.ALLOWED,
            response.properties().invoiceSectionLabelManagement());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ALL_ALLOWED, response.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.ALLOWED, response.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.DISABLED, response.properties().savingsPlanPurchases());
        Assertions.assertEquals(ViewChargesPolicy.NOT_ALLOWED, response.properties().viewCharges());
        Assertions.assertEquals("fxbiqwgm", response.properties().policies().get(0).name());
        Assertions.assertEquals("nwaofnoiphw", response.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.OTHER, response.properties().policies().get(0).policyType());
        Assertions.assertEquals("ugxjtuhidjws", response.properties().policies().get(0).scope());
    }
}
