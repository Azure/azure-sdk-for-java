// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingRoleAssignmentInner;
import com.azure.resourcemanager.billing.models.BillingRoleAssignment;
import com.azure.resourcemanager.billing.models.BillingRoleAssignmentProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BillingRoleAssignmentsCreateOrUpdateByDepartmentMockTests {
    @Test
    public void testCreateOrUpdateByDepartment() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"createdOn\":\"2021-04-25T21:42:28Z\",\"createdByPrincipalTenantId\":\"vf\",\"createdByPrincipalId\":\"hbjhmvpjxsd\",\"createdByPrincipalPuid\":\"eignybffqc\",\"createdByUserEmailAddress\":\"ynepkt\",\"modifiedOn\":\"2020-12-29T15:00:50Z\",\"modifiedByPrincipalPuid\":\"vconysebjijfhp\",\"modifiedByUserEmailAddress\":\"ikou\",\"modifiedByPrincipalId\":\"falo\",\"modifiedByPrincipalTenantId\":\"skk\",\"principalPuid\":\"orsyni\",\"principalId\":\"nbydlgfaph\",\"principalTenantId\":\"ubwt\",\"roleDefinitionId\":\"ay\",\"scope\":\"tvjfqreeoxvqj\",\"userAuthenticationType\":\"nblihs\",\"userEmailAddress\":\"fbmdivixzhpjgq\",\"principalTenantName\":\"iaoaweacfxa\",\"principalDisplayName\":\"uhruetcnxri\",\"principalType\":\"DirectoryRole\",\"billingRequestId\":\"ckh\",\"billingAccountId\":\"drrjsu\",\"billingAccountDisplayName\":\"owo\",\"billingProfileId\":\"xrxmyokohlsfjfo\",\"billingProfileDisplayName\":\"jpz\",\"invoiceSectionId\":\"ahuvkqxqkvadmjh\",\"invoiceSectionDisplayName\":\"udjmaaj\",\"customerId\":\"ebhsermclyqw\",\"customerDisplayName\":\"hyqkaaptbssvkbcb\"},\"tags\":{\"plxzbnsshvqnpszb\":\"ybloccu\",\"peyxdyuxurxr\":\"uybutcdzjfjt\"},\"id\":\"qmmijgpq\",\"name\":\"k\",\"type\":\"naeikczscymqf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingRoleAssignment response = manager.billingRoleAssignments()
            .createOrUpdateByDepartment("yfp", "ms", "auemqomxoa",
                new BillingRoleAssignmentInner().withTags(mapOf("fibpkwmamrlfi", "imvrr", "d", "judd"))
                    .withProperties(new BillingRoleAssignmentProperties().withPrincipalPuid("vbpbl")
                        .withPrincipalId("wsexheeocnqou")
                        .withPrincipalTenantId("epvlryszfhd")
                        .withRoleDefinitionId("yfhxohzbzhhav")
                        .withScope("uxnvkdslcof")
                        .withUserAuthenticationType("tfuehouisak")
                        .withUserEmailAddress("jfddxqfussub")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ybloccu", response.tags().get("plxzbnsshvqnpszb"));
        Assertions.assertEquals("orsyni", response.properties().principalPuid());
        Assertions.assertEquals("nbydlgfaph", response.properties().principalId());
        Assertions.assertEquals("ubwt", response.properties().principalTenantId());
        Assertions.assertEquals("ay", response.properties().roleDefinitionId());
        Assertions.assertEquals("tvjfqreeoxvqj", response.properties().scope());
        Assertions.assertEquals("nblihs", response.properties().userAuthenticationType());
        Assertions.assertEquals("fbmdivixzhpjgq", response.properties().userEmailAddress());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
