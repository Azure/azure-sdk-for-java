// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.BillingFrequency;
import com.azure.resourcemanager.billing.models.Product;
import com.azure.resourcemanager.billing.models.ProductStatusType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProductsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"autoRenew\":\"Off\",\"displayName\":\"xlvxnoakiz\",\"purchaseDate\":\"2021-02-16T18:23:50Z\",\"productTypeId\":\"knaqlnuwig\",\"productType\":\"xly\",\"status\":\"PastDue\",\"endDate\":\"2021-08-16T20:52:41Z\",\"billingFrequency\":\"OneTime\",\"lastCharge\":{\"currency\":\"xhmpejtlkex\",\"value\":68.176094},\"lastChargeDate\":\"2021-09-17T09:38:18Z\",\"quantity\":13.839131,\"skuId\":\"qhr\",\"skuDescription\":\"xk\",\"tenantId\":\"ccrmmk\",\"availabilityId\":\"pijubyq\",\"invoiceSectionId\":\"kakfqfr\",\"invoiceSectionDisplayName\":\"myildudxjasc\",\"billingProfileId\":\"vfdjkpdxp\",\"billingProfileDisplayName\":\"kk\",\"customerId\":\"mgzvyfi\",\"customerDisplayName\":\"kzuqnwsith\",\"reseller\":{\"resellerId\":\"ly\",\"description\":\"luqw\"}},\"id\":\"ulsutrjbhxy\",\"name\":\"fhyqezvqqugdrft\",\"type\":\"cvexreuqu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Product response =
            manager.products().getWithResponse("y", "znumtggmuwdchoz", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(AutoRenew.OFF, response.autoRenew());
        Assertions.assertEquals(ProductStatusType.PAST_DUE, response.status());
        Assertions.assertEquals(BillingFrequency.ONE_TIME, response.billingFrequency());
    }
}
