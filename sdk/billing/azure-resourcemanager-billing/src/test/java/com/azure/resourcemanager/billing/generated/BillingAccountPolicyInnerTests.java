// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.BillingAccountPolicyInner;
import com.azure.resourcemanager.billing.models.BillingAccountPolicyProperties;
import com.azure.resourcemanager.billing.models.BillingAccountPolicyPropertiesEnterpriseAgreementPolicies;
import com.azure.resourcemanager.billing.models.EnrollmentAccountOwnerViewCharges;
import com.azure.resourcemanager.billing.models.EnrollmentAuthLevelState;
import com.azure.resourcemanager.billing.models.EnrollmentDepartmentAdminViewCharges;
import com.azure.resourcemanager.billing.models.MarketplacePurchasesPolicy;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ReservationPurchasesPolicy;
import com.azure.resourcemanager.billing.models.SavingsPlanPurchasesPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BillingAccountPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingAccountPolicyInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"enterpriseAgreementPolicies\":{\"authenticationType\":\"MicrosoftAccountOnly\",\"accountOwnerViewCharges\":\"Allowed\",\"departmentAdminViewCharges\":\"Disabled\"},\"marketplacePurchases\":\"Other\",\"reservationPurchases\":\"Allowed\",\"savingsPlanPurchases\":\"Other\",\"policies\":[{\"name\":\"wza\",\"value\":\"zuu\",\"policyType\":\"SystemControlled\",\"scope\":\"irvpefycdve\"},{\"name\":\"itjn\",\"value\":\"zaj\",\"policyType\":\"Other\",\"scope\":\"hwjuyxxbxqvmvua\"}]},\"tags\":{\"sa\":\"adxkxeqbwpntghy\"},\"id\":\"drnxsluvlzla\",\"name\":\"ltxkpb\",\"type\":\"hvfdqqj\"}")
            .toObject(BillingAccountPolicyInner.class);
        Assertions.assertEquals("adxkxeqbwpntghy", model.tags().get("sa"));
        Assertions.assertEquals(EnrollmentAuthLevelState.MICROSOFT_ACCOUNT_ONLY,
            model.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.ALLOWED,
            model.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.DISABLED,
            model.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(MarketplacePurchasesPolicy.OTHER, model.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.ALLOWED, model.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.OTHER, model.properties().savingsPlanPurchases());
        Assertions.assertEquals("wza", model.properties().policies().get(0).name());
        Assertions.assertEquals("zuu", model.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.SYSTEM_CONTROLLED, model.properties().policies().get(0).policyType());
        Assertions.assertEquals("irvpefycdve", model.properties().policies().get(0).scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingAccountPolicyInner model = new BillingAccountPolicyInner().withTags(mapOf("sa", "adxkxeqbwpntghy"))
            .withProperties(new BillingAccountPolicyProperties()
                .withEnterpriseAgreementPolicies(new BillingAccountPolicyPropertiesEnterpriseAgreementPolicies()
                    .withAuthenticationType(EnrollmentAuthLevelState.MICROSOFT_ACCOUNT_ONLY)
                    .withAccountOwnerViewCharges(EnrollmentAccountOwnerViewCharges.ALLOWED)
                    .withDepartmentAdminViewCharges(EnrollmentDepartmentAdminViewCharges.DISABLED))
                .withMarketplacePurchases(MarketplacePurchasesPolicy.OTHER)
                .withReservationPurchases(ReservationPurchasesPolicy.ALLOWED)
                .withSavingsPlanPurchases(SavingsPlanPurchasesPolicy.OTHER)
                .withPolicies(Arrays.asList(
                    new PolicySummary().withName("wza")
                        .withValue("zuu")
                        .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                        .withScope("irvpefycdve"),
                    new PolicySummary().withName("itjn")
                        .withValue("zaj")
                        .withPolicyType(PolicyType.OTHER)
                        .withScope("hwjuyxxbxqvmvua"))));
        model = BinaryData.fromObject(model).toObject(BillingAccountPolicyInner.class);
        Assertions.assertEquals("adxkxeqbwpntghy", model.tags().get("sa"));
        Assertions.assertEquals(EnrollmentAuthLevelState.MICROSOFT_ACCOUNT_ONLY,
            model.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.ALLOWED,
            model.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.DISABLED,
            model.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(MarketplacePurchasesPolicy.OTHER, model.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.ALLOWED, model.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.OTHER, model.properties().savingsPlanPurchases());
        Assertions.assertEquals("wza", model.properties().policies().get(0).name());
        Assertions.assertEquals("zuu", model.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.SYSTEM_CONTROLLED, model.properties().policies().get(0).policyType());
        Assertions.assertEquals("irvpefycdve", model.properties().policies().get(0).scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
