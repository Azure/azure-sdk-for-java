// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.BillingProfilePolicyInner;
import com.azure.resourcemanager.billing.models.BillingProfilePolicyProperties;
import com.azure.resourcemanager.billing.models.BillingProfilePolicyPropertiesEnterpriseAgreementPolicies;
import com.azure.resourcemanager.billing.models.EnrollmentAccountOwnerViewCharges;
import com.azure.resourcemanager.billing.models.EnrollmentAuthLevelState;
import com.azure.resourcemanager.billing.models.EnrollmentDepartmentAdminViewCharges;
import com.azure.resourcemanager.billing.models.InvoiceSectionLabelManagementPolicy;
import com.azure.resourcemanager.billing.models.MarketplacePurchasesPolicy;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ReservationPurchasesPolicy;
import com.azure.resourcemanager.billing.models.SavingsPlanPurchasesPolicy;
import com.azure.resourcemanager.billing.models.ViewChargesPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BillingProfilePolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingProfilePolicyInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"enterpriseAgreementPolicies\":{\"authenticationType\":\"Other\",\"accountOwnerViewCharges\":\"Disabled\",\"departmentAdminViewCharges\":\"Disabled\"},\"invoiceSectionLabelManagement\":\"NotAllowed\",\"marketplacePurchases\":\"AllAllowed\",\"reservationPurchases\":\"Other\",\"savingsPlanPurchases\":\"Disabled\",\"viewCharges\":\"Other\",\"policies\":[{\"name\":\"rfgdrwj\",\"value\":\"ewhfjsrwqrxetf\",\"policyType\":\"UserControlled\",\"scope\":\"rrmdqntycna\"},{\"name\":\"hvmaxgnuyeamcmhu\",\"value\":\"jecehokwc\",\"policyType\":\"UserControlled\",\"scope\":\"loesqrggvr\"},{\"name\":\"yrukoi\",\"value\":\"ciduwjle\",\"policyType\":\"SystemControlled\",\"scope\":\"h\"}]},\"tags\":{\"ruzythqkkwhbg\":\"p\",\"jdtvmclyymffhmj\":\"vellvulnxdmnitm\",\"jqrbrpvnm\":\"ddnyxfzuvrzmzqm\"},\"id\":\"foebo\",\"name\":\"tjpp\",\"type\":\"laohoqkp\"}")
            .toObject(BillingProfilePolicyInner.class);
        Assertions.assertEquals("p", model.tags().get("ruzythqkkwhbg"));
        Assertions.assertEquals(EnrollmentAuthLevelState.OTHER,
            model.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.DISABLED,
            model.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.DISABLED,
            model.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(InvoiceSectionLabelManagementPolicy.NOT_ALLOWED,
            model.properties().invoiceSectionLabelManagement());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ALL_ALLOWED, model.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.OTHER, model.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.DISABLED, model.properties().savingsPlanPurchases());
        Assertions.assertEquals(ViewChargesPolicy.OTHER, model.properties().viewCharges());
        Assertions.assertEquals("rfgdrwj", model.properties().policies().get(0).name());
        Assertions.assertEquals("ewhfjsrwqrxetf", model.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.USER_CONTROLLED, model.properties().policies().get(0).policyType());
        Assertions.assertEquals("rrmdqntycna", model.properties().policies().get(0).scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingProfilePolicyInner model = new BillingProfilePolicyInner()
            .withTags(mapOf("ruzythqkkwhbg", "p", "jdtvmclyymffhmj", "vellvulnxdmnitm", "jqrbrpvnm", "ddnyxfzuvrzmzqm"))
            .withProperties(new BillingProfilePolicyProperties()
                .withEnterpriseAgreementPolicies(new BillingProfilePolicyPropertiesEnterpriseAgreementPolicies()
                    .withAuthenticationType(EnrollmentAuthLevelState.OTHER)
                    .withAccountOwnerViewCharges(EnrollmentAccountOwnerViewCharges.DISABLED)
                    .withDepartmentAdminViewCharges(EnrollmentDepartmentAdminViewCharges.DISABLED))
                .withInvoiceSectionLabelManagement(InvoiceSectionLabelManagementPolicy.NOT_ALLOWED)
                .withMarketplacePurchases(MarketplacePurchasesPolicy.ALL_ALLOWED)
                .withReservationPurchases(ReservationPurchasesPolicy.OTHER)
                .withSavingsPlanPurchases(SavingsPlanPurchasesPolicy.DISABLED)
                .withViewCharges(ViewChargesPolicy.OTHER)
                .withPolicies(Arrays.asList(
                    new PolicySummary().withName("rfgdrwj")
                        .withValue("ewhfjsrwqrxetf")
                        .withPolicyType(PolicyType.USER_CONTROLLED)
                        .withScope("rrmdqntycna"),
                    new PolicySummary().withName("hvmaxgnuyeamcmhu")
                        .withValue("jecehokwc")
                        .withPolicyType(PolicyType.USER_CONTROLLED)
                        .withScope("loesqrggvr"),
                    new PolicySummary().withName("yrukoi")
                        .withValue("ciduwjle")
                        .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                        .withScope("h"))));
        model = BinaryData.fromObject(model).toObject(BillingProfilePolicyInner.class);
        Assertions.assertEquals("p", model.tags().get("ruzythqkkwhbg"));
        Assertions.assertEquals(EnrollmentAuthLevelState.OTHER,
            model.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.DISABLED,
            model.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.DISABLED,
            model.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(InvoiceSectionLabelManagementPolicy.NOT_ALLOWED,
            model.properties().invoiceSectionLabelManagement());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ALL_ALLOWED, model.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.OTHER, model.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.DISABLED, model.properties().savingsPlanPurchases());
        Assertions.assertEquals(ViewChargesPolicy.OTHER, model.properties().viewCharges());
        Assertions.assertEquals("rfgdrwj", model.properties().policies().get(0).name());
        Assertions.assertEquals("ewhfjsrwqrxetf", model.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.USER_CONTROLLED, model.properties().policies().get(0).policyType());
        Assertions.assertEquals("rrmdqntycna", model.properties().policies().get(0).scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
