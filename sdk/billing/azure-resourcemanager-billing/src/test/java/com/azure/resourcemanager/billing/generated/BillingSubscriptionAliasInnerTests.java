// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.BillingSubscriptionAliasInner;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.Beneficiary;
import com.azure.resourcemanager.billing.models.SystemOverrides;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BillingSubscriptionAliasInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingSubscriptionAliasInner model = BinaryData.fromString(
            "{\"properties\":{\"billingSubscriptionId\":\"itgueiookjbs\",\"autoRenew\":\"On\",\"beneficiaryTenantId\":\"dt\",\"beneficiary\":{\"tenantId\":\"lq\",\"objectId\":\"slmot\"},\"billingFrequency\":\"bnfxofvc\",\"billingProfileId\":\"gdirazf\",\"billingPolicies\":{\"jtmvc\":\"jwabmd\",\"kyqltqsrogt\":\"pexcmjurbuhh\",\"ysidfvclgl\":\"wkffdjkt\",\"uijtkbu\":\"n\"},\"billingProfileDisplayName\":\"ogsf\",\"billingProfileName\":\"ayiansharujtji\",\"consumptionCostCenter\":\"fzyjqt\",\"customerId\":\"wkpqhjpenuygbq\",\"customerDisplayName\":\"qekewvnqvcd\",\"customerName\":\"uaucmf\",\"displayName\":\"wnlaxpu\",\"enrollmentAccountId\":\"qikczvvita\",\"enrollmentAccountDisplayName\":\"xmfcsserxhtv\",\"enrollmentAccountSubscriptionDetails\":{\"enrollmentAccountStartDate\":\"2021-08-20T21:03:29Z\",\"subscriptionEnrollmentAccountStatus\":\"Inactive\"},\"invoiceSectionId\":\"tsjgqrsx\",\"invoiceSectionDisplayName\":\"ruuuybnch\",\"invoiceSectionName\":\"zizoyuely\",\"lastMonthCharges\":{\"currency\":\"dnb\",\"value\":69.42177},\"monthToDateCharges\":{\"currency\":\"agfl\",\"value\":10.99121},\"nextBillingCycleDetails\":{\"billingFrequency\":\"rwahzjmucftbyr\"},\"offerId\":\"rohkpigqfusu\",\"productCategory\":\"zmkw\",\"productType\":\"snoxaxmqeqa\",\"productTypeId\":\"hjnhgwydyynfsvk\",\"purchaseDate\":\"2020-12-23T07:31:38Z\",\"quantity\":4003660705799176769,\"reseller\":{\"resellerId\":\"arfdlpukhpyrnei\",\"description\":\"cpeogkhnmgbrou\"},\"renewalTermDetails\":{\"billingFrequency\":\"bhfhpfpazjzoy\",\"productId\":\"xhpdulontacnpqwt\",\"productTypeId\":\"tuevrh\",\"skuId\":\"jyoogwxh\",\"termDuration\":\"duugwbsre\",\"quantity\":2143153475020717086,\"termEndDate\":\"2021-09-27T14:55:54Z\"},\"skuId\":\"arenlvhhtklnvnaf\",\"skuDescription\":\"kyfede\",\"systemOverrides\":{\"cancellation\":\"NotAllowed\",\"cancellationAllowedEndDate\":\"2021-06-23T11:56:40Z\"},\"resourceUri\":\"qxypokkhminq\",\"termDuration\":\"mczngn\",\"termStartDate\":\"2021-04-29T07:37:31Z\",\"termEndDate\":\"2021-05-11T16:57:57Z\",\"provisioningTenantId\":\"unin\",\"status\":\"Suspended\",\"operationStatus\":\"None\",\"provisioningState\":\"Failed\",\"subscriptionId\":\"dtvqe\",\"suspensionReasons\":[\"ct\"],\"suspensionReasonDetails\":[{\"effectiveDate\":\"2021-01-26T21:13:49Z\",\"reason\":\"Cancelled\"},{\"effectiveDate\":\"2021-09-23T09:20Z\",\"reason\":\"PolicyViolation\"},{\"effectiveDate\":\"2021-07-14T00:50:04Z\",\"reason\":\"Cancelled\"},{\"effectiveDate\":\"2021-05-03T13:15:01Z\",\"reason\":\"None\"}]},\"tags\":{\"ytprwnwvroev\":\"pxbannovvoxc\",\"rrrouuxvnsa\":\"tlyo\",\"lobdxna\":\"bcrymodizrx\",\"op\":\"pmkmlmvevfx\"},\"id\":\"bzxliohrdddtfgxq\",\"name\":\"awpcbbnzqcykn\",\"type\":\"p\"}")
            .toObject(BillingSubscriptionAliasInner.class);
        Assertions.assertEquals("pxbannovvoxc", model.tags().get("ytprwnwvroev"));
        Assertions.assertEquals(AutoRenew.ON, model.autoRenew());
        Assertions.assertEquals("dt", model.beneficiaryTenantId());
        Assertions.assertEquals("lq", model.beneficiary().tenantId());
        Assertions.assertEquals("slmot", model.beneficiary().objectId());
        Assertions.assertEquals("bnfxofvc", model.billingFrequency());
        Assertions.assertEquals("gdirazf", model.billingProfileId());
        Assertions.assertEquals("fzyjqt", model.consumptionCostCenter());
        Assertions.assertEquals("wkpqhjpenuygbq", model.customerId());
        Assertions.assertEquals("wnlaxpu", model.displayName());
        Assertions.assertEquals("tsjgqrsx", model.invoiceSectionId());
        Assertions.assertEquals("hjnhgwydyynfsvk", model.productTypeId());
        Assertions.assertEquals(4003660705799176769L, model.quantity());
        Assertions.assertEquals("arenlvhhtklnvnaf", model.skuId());
        Assertions.assertEquals("mczngn", model.termDuration());
        Assertions.assertEquals("unin", model.provisioningTenantId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingSubscriptionAliasInner model = new BillingSubscriptionAliasInner()
            .withTags(mapOf("ytprwnwvroev", "pxbannovvoxc", "rrrouuxvnsa", "tlyo", "lobdxna", "bcrymodizrx", "op",
                "pmkmlmvevfx"))
            .withAutoRenew(AutoRenew.ON)
            .withBeneficiaryTenantId("dt")
            .withBeneficiary(new Beneficiary().withTenantId("lq").withObjectId("slmot"))
            .withBillingFrequency("bnfxofvc")
            .withBillingProfileId("gdirazf")
            .withConsumptionCostCenter("fzyjqt")
            .withCustomerId("wkpqhjpenuygbq")
            .withDisplayName("wnlaxpu")
            .withInvoiceSectionId("tsjgqrsx")
            .withProductTypeId("hjnhgwydyynfsvk")
            .withQuantity(4003660705799176769L)
            .withSkuId("arenlvhhtklnvnaf")
            .withSystemOverrides(new SystemOverrides())
            .withTermDuration("mczngn")
            .withProvisioningTenantId("unin");
        model = BinaryData.fromObject(model).toObject(BillingSubscriptionAliasInner.class);
        Assertions.assertEquals("pxbannovvoxc", model.tags().get("ytprwnwvroev"));
        Assertions.assertEquals(AutoRenew.ON, model.autoRenew());
        Assertions.assertEquals("dt", model.beneficiaryTenantId());
        Assertions.assertEquals("lq", model.beneficiary().tenantId());
        Assertions.assertEquals("slmot", model.beneficiary().objectId());
        Assertions.assertEquals("bnfxofvc", model.billingFrequency());
        Assertions.assertEquals("gdirazf", model.billingProfileId());
        Assertions.assertEquals("fzyjqt", model.consumptionCostCenter());
        Assertions.assertEquals("wkpqhjpenuygbq", model.customerId());
        Assertions.assertEquals("wnlaxpu", model.displayName());
        Assertions.assertEquals("tsjgqrsx", model.invoiceSectionId());
        Assertions.assertEquals("hjnhgwydyynfsvk", model.productTypeId());
        Assertions.assertEquals(4003660705799176769L, model.quantity());
        Assertions.assertEquals("arenlvhhtklnvnaf", model.skuId());
        Assertions.assertEquals("mczngn", model.termDuration());
        Assertions.assertEquals("unin", model.provisioningTenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
