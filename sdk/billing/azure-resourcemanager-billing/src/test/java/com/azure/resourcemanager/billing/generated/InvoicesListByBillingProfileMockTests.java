// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Invoice;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InvoicesListByBillingProfileMockTests {
    @Test
    public void testListByBillingProfile() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"dueDate\":\"2020-12-27T08:21:28Z\",\"invoiceDate\":\"2021-09-25T19:32:22Z\",\"status\":\"Due\",\"amountDue\":{\"currency\":\"owx\",\"value\":91.388405},\"azurePrepaymentApplied\":{\"currency\":\"deugf\",\"value\":16.688908},\"billedAmount\":{\"currency\":\"paxwkufyk\",\"value\":29.66174},\"creditAmount\":{\"currency\":\"epmrut\",\"value\":97.59715},\"freeAzureCreditApplied\":{\"currency\":\"obns\",\"value\":77.23243},\"subTotal\":{\"currency\":\"ltymkmvguihywart\",\"value\":92.43603},\"taxAmount\":{\"currency\":\"ixkykxd\",\"value\":5.8867693},\"totalAmount\":{\"currency\":\"mmuc\",\"value\":52.700138},\"invoicePeriodStartDate\":\"2021-11-27T23:37:26Z\",\"invoicePeriodEndDate\":\"2021-02-28T12:10:12Z\",\"invoiceType\":\"AzureMarketplace\",\"isMonthlyInvoice\":true,\"billingProfileId\":\"yincql\",\"billingProfileDisplayName\":\"isws\",\"purchaseOrderNumber\":\"iiiovgqcgxuugq\",\"documents\":[],\"payments\":[],\"rebillDetails\":{},\"documentType\":\"Invoice\",\"billedDocumentId\":\"teqdptj\",\"creditForDocumentId\":\"dtguk\",\"subscriptionId\":\"nblwphqlkcc\"},\"id\":\"zgygqwahoiulwgni\",\"name\":\"prglvawuwzduf\",\"type\":\"pivlsbbjpm\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Invoice> response =
            manager
                .invoices()
                .listByBillingProfile(
                    "ywaeeczgf", "ukklelss", "blycsxzujksr", "smdesqplpvmjcd", com.azure.core.util.Context.NONE);
    }
}
