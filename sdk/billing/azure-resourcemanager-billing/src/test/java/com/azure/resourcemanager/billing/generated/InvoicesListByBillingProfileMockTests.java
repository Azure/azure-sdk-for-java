// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Invoice;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InvoicesListByBillingProfileMockTests {
    @Test
    public void testListByBillingProfile() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"dueDate\":\"2021-10-18T07:20:26Z\",\"invoiceDate\":\"2021-09-22T01:59:34Z\",\"status\":\"Paid\",\"amountDue\":{\"currency\":\"beqrkuorh\",\"value\":58.255344},\"azurePrepaymentApplied\":{\"currency\":\"qnmdvhazcvjy\",\"value\":57.070892},\"billedAmount\":{\"currency\":\"bqerzwx\",\"value\":22.328775},\"creditAmount\":{\"currency\":\"dgukvlbpktgds\",\"value\":55.078445},\"freeAzureCreditApplied\":{\"currency\":\"mbewreswmo\",\"value\":62.03764},\"subTotal\":{\"currency\":\"uteyxeyguq\",\"value\":40.295185},\"taxAmount\":{\"currency\":\"itnspxlzde\",\"value\":89.13975},\"totalAmount\":{\"currency\":\"jwaiuf\",\"value\":61.24044},\"invoicePeriodStartDate\":\"2021-12-05T12:54:44Z\",\"invoicePeriodEndDate\":\"2021-07-11T22:10:45Z\",\"invoiceType\":\"AzureService\",\"isMonthlyInvoice\":true,\"billingProfileId\":\"oj\",\"billingProfileDisplayName\":\"dgrhydkygywezs\",\"purchaseOrderNumber\":\"ec\",\"documents\":[{\"kind\":\"CreditNote\",\"url\":\"xieqv\",\"source\":\"DRS\"},{\"kind\":\"CreditNote\",\"url\":\"ixqcahyhxalybxaw\",\"source\":\"DRS\"},{\"kind\":\"Invoice\",\"url\":\"tblxpkkwjdjodqhy\",\"source\":\"DRS\"},{\"kind\":\"Invoice\",\"url\":\"emehllizh\",\"source\":\"ENF\"}],\"payments\":[{\"paymentType\":\"odkadppyibngq\",\"amount\":{\"currency\":\"ywrxw\",\"value\":77.133385},\"date\":\"2021-01-10T19:28:49Z\",\"paymentMethodFamily\":\"CheckWire\",\"paymentMethodType\":\"adswz\"},{\"paymentType\":\"uyem\",\"amount\":{\"currency\":\"uowhlxl\",\"value\":2.1980107},\"date\":\"2021-01-20T01:36:39Z\",\"paymentMethodFamily\":\"CheckWire\",\"paymentMethodType\":\"blgmokzkltrfowtd\"},{\"paymentType\":\"fmvlihcvjdrqc\",\"amount\":{\"currency\":\"dhftukvhdxlwy\",\"value\":19.468647},\"date\":\"2021-02-13T08:09:39Z\",\"paymentMethodFamily\":\"Credits\",\"paymentMethodType\":\"fnjyix\"}],\"rebillDetails\":{\"owsocnequygdjbo\":{\"creditNoteDocumentId\":\"atqxmbjroumzzn\",\"invoiceDocumentId\":\"l\",\"rebillDetails\":{\"huzgfxo\":{},\"jtpusllywpvtiotz\":{},\"pdbollg\":{},\"yfqiuasig\":{}}},\"cekuz\":{\"creditNoteDocumentId\":\"rmtqjkqevadr\",\"invoiceDocumentId\":\"wiu\",\"rebillDetails\":{\"c\":{},\"jzkxiidisczskos\":{},\"oqiqazugamx\":{},\"krrcoiisbamnpp\":{}}},\"aqkiofkb\":{\"creditNoteDocumentId\":\"sbezaxyfukzxuizh\",\"invoiceDocumentId\":\"nepk\",\"rebillDetails\":{\"iarxqiubxdukec\":{},\"xdazv\":{},\"hctmmkosz\":{},\"dblnsntrp\":{}}},\"yuuatvlmbjwcolbm\":{\"creditNoteDocumentId\":\"mhklbnl\",\"invoiceDocumentId\":\"vcb\",\"rebillDetails\":{\"zyqu\":{},\"usqxutrpbrr\":{}}}},\"documentType\":\"Invoice\",\"billedDocumentId\":\"w\",\"creditForDocumentId\":\"cpahprzrvxhm\",\"subscriptionId\":\"hocn\"},\"id\":\"zcmjhngxnoqrxt\",\"name\":\"isn\",\"type\":\"evhdlmydid\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Invoice> response =
            manager
                .invoices()
                .listByBillingProfile(
                    "jgydzul", "dsaeuzanhsfnh", "enwphpzfngq", "clid", com.azure.core.util.Context.NONE);
    }
}
