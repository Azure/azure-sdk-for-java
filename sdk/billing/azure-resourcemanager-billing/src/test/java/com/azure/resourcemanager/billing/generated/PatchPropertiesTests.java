// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.PatchProperties;
import com.azure.resourcemanager.billing.models.AppliedScopeType;
import com.azure.resourcemanager.billing.models.InstanceFlexibility;
import com.azure.resourcemanager.billing.models.ReservationAppliedScopeProperties;
import com.azure.resourcemanager.billing.models.ReservationBillingPlan;
import com.azure.resourcemanager.billing.models.ReservationPurchaseRequest;
import com.azure.resourcemanager.billing.models.SkuName;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PatchProperties model = BinaryData.fromString(
            "{\"appliedScopeType\":\"Shared\",\"appliedScopeProperties\":{\"tenantId\":\"rsnhpcs\",\"managementGroupId\":\"qxovppqibukk\",\"subscriptionId\":\"zrlrmlccmetjs\",\"resourceGroupId\":\"ivfqbqnasdsy\",\"displayName\":\"zsieuscplhyvd\"},\"instanceFlexibility\":\"Off\",\"displayName\":\"zkxitd\",\"renew\":true,\"renewProperties\":{\"purchaseProperties\":{\"sku\":{\"name\":\"olrupjovm\"},\"location\":\"sayebra\",\"properties\":{\"reservedResourceType\":\"lpzbtzuykykipf\",\"billingScopeId\":\"yepfn\",\"term\":\"mbezacfpztg\",\"billingPlan\":\"Monthly\",\"quantity\":903703732,\"displayName\":\"jga\",\"appliedScopeType\":\"Single\",\"appliedScopes\":[\"gkppgkqzkcyzmf\",\"ngdyfcixrhlcq\",\"hoe\",\"goiutgw\"],\"appliedScopeProperties\":{\"tenantId\":\"a\",\"managementGroupId\":\"qha\",\"subscriptionId\":\"ntacih\",\"resourceGroupId\":\"ogmipnmliqmvl\",\"displayName\":\"i\"},\"renew\":false,\"reservedResourceProperties\":{\"instanceFlexibility\":\"Off\"},\"instanceFlexibility\":\"On\",\"reviewDateTime\":\"2021-02-19T08:53:13Z\"}}},\"reviewDateTime\":\"2021-02-11T08:57:44Z\"}")
            .toObject(PatchProperties.class);
        Assertions.assertEquals(AppliedScopeType.SHARED, model.appliedScopeType());
        Assertions.assertEquals("rsnhpcs", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("qxovppqibukk", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("zrlrmlccmetjs", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("ivfqbqnasdsy", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("zsieuscplhyvd", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.instanceFlexibility());
        Assertions.assertEquals("zkxitd", model.displayName());
        Assertions.assertEquals(true, model.renew());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-11T08:57:44Z"), model.reviewDateTime());
        Assertions.assertEquals("olrupjovm", model.purchaseProperties().sku().name());
        Assertions.assertEquals("sayebra", model.purchaseProperties().location());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.purchaseProperties().billingPlan());
        Assertions.assertEquals(903703732, model.purchaseProperties().quantity());
        Assertions.assertEquals("jga", model.purchaseProperties().displayName());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.purchaseProperties().appliedScopeType());
        Assertions.assertEquals("gkppgkqzkcyzmf", model.purchaseProperties().appliedScopes().get(0));
        Assertions.assertEquals("a", model.purchaseProperties().appliedScopeProperties().tenantId());
        Assertions.assertEquals("qha", model.purchaseProperties().appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("ntacih", model.purchaseProperties().appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("ogmipnmliqmvl", model.purchaseProperties().appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("i", model.purchaseProperties().appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.purchaseProperties().renew());
        Assertions.assertEquals(InstanceFlexibility.ON, model.purchaseProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T08:53:13Z"),
            model.purchaseProperties().reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.OFF,
            model.purchaseProperties().instanceFlexibilityReservedResourcePropertiesInstanceFlexibility());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PatchProperties model = new PatchProperties().withAppliedScopeType(AppliedScopeType.SHARED)
            .withAppliedScopeProperties(new ReservationAppliedScopeProperties().withTenantId("rsnhpcs")
                .withManagementGroupId("qxovppqibukk")
                .withSubscriptionId("zrlrmlccmetjs")
                .withResourceGroupId("ivfqbqnasdsy")
                .withDisplayName("zsieuscplhyvd"))
            .withInstanceFlexibility(InstanceFlexibility.OFF)
            .withDisplayName("zkxitd")
            .withRenew(true)
            .withReviewDateTime(OffsetDateTime.parse("2021-02-11T08:57:44Z"))
            .withPurchaseProperties(new ReservationPurchaseRequest().withSku(new SkuName().withName("olrupjovm"))
                .withLocation("sayebra")
                .withBillingPlan(ReservationBillingPlan.MONTHLY)
                .withQuantity(903703732)
                .withDisplayName("jga")
                .withAppliedScopeType(AppliedScopeType.SINGLE)
                .withAppliedScopes(Arrays.asList("gkppgkqzkcyzmf", "ngdyfcixrhlcq", "hoe", "goiutgw"))
                .withAppliedScopeProperties(new ReservationAppliedScopeProperties().withTenantId("a")
                    .withManagementGroupId("qha")
                    .withSubscriptionId("ntacih")
                    .withResourceGroupId("ogmipnmliqmvl")
                    .withDisplayName("i"))
                .withRenew(false)
                .withInstanceFlexibility(InstanceFlexibility.ON)
                .withReviewDateTime(OffsetDateTime.parse("2021-02-19T08:53:13Z"))
                .withInstanceFlexibilityReservedResourcePropertiesInstanceFlexibility(InstanceFlexibility.OFF));
        model = BinaryData.fromObject(model).toObject(PatchProperties.class);
        Assertions.assertEquals(AppliedScopeType.SHARED, model.appliedScopeType());
        Assertions.assertEquals("rsnhpcs", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("qxovppqibukk", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("zrlrmlccmetjs", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("ivfqbqnasdsy", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("zsieuscplhyvd", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.instanceFlexibility());
        Assertions.assertEquals("zkxitd", model.displayName());
        Assertions.assertEquals(true, model.renew());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-11T08:57:44Z"), model.reviewDateTime());
        Assertions.assertEquals("olrupjovm", model.purchaseProperties().sku().name());
        Assertions.assertEquals("sayebra", model.purchaseProperties().location());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.purchaseProperties().billingPlan());
        Assertions.assertEquals(903703732, model.purchaseProperties().quantity());
        Assertions.assertEquals("jga", model.purchaseProperties().displayName());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.purchaseProperties().appliedScopeType());
        Assertions.assertEquals("gkppgkqzkcyzmf", model.purchaseProperties().appliedScopes().get(0));
        Assertions.assertEquals("a", model.purchaseProperties().appliedScopeProperties().tenantId());
        Assertions.assertEquals("qha", model.purchaseProperties().appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("ntacih", model.purchaseProperties().appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("ogmipnmliqmvl", model.purchaseProperties().appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("i", model.purchaseProperties().appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.purchaseProperties().renew());
        Assertions.assertEquals(InstanceFlexibility.ON, model.purchaseProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T08:53:13Z"),
            model.purchaseProperties().reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.OFF,
            model.purchaseProperties().instanceFlexibilityReservedResourcePropertiesInstanceFlexibility());
    }
}
