// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.PatchPropertiesRenewProperties;
import com.azure.resourcemanager.billing.models.AppliedScopeType;
import com.azure.resourcemanager.billing.models.InstanceFlexibility;
import com.azure.resourcemanager.billing.models.ReservationAppliedScopeProperties;
import com.azure.resourcemanager.billing.models.ReservationBillingPlan;
import com.azure.resourcemanager.billing.models.ReservationPurchaseRequest;
import com.azure.resourcemanager.billing.models.SkuName;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PatchPropertiesRenewPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PatchPropertiesRenewProperties model = BinaryData.fromString(
            "{\"purchaseProperties\":{\"sku\":{\"name\":\"dtsdfjy\"},\"location\":\"socwiqbuout\",\"properties\":{\"reservedResourceType\":\"zgleofjsbg\",\"billingScopeId\":\"wzvdajfwnncfm\",\"term\":\"iqgjjrlhiql\",\"billingPlan\":\"Monthly\",\"quantity\":354836266,\"displayName\":\"ougu\",\"appliedScopeType\":\"ManagementGroup\",\"appliedScopes\":[\"pg\",\"ttbas\"],\"appliedScopeProperties\":{\"tenantId\":\"ap\",\"managementGroupId\":\"n\",\"subscriptionId\":\"eaqbkixv\",\"resourceGroupId\":\"wy\",\"displayName\":\"bb\"},\"renew\":false,\"reservedResourceProperties\":{\"instanceFlexibility\":\"Off\"},\"instanceFlexibility\":\"Off\",\"reviewDateTime\":\"2021-07-09T19:26:55Z\"}}}")
            .toObject(PatchPropertiesRenewProperties.class);
        Assertions.assertEquals("dtsdfjy", model.purchaseProperties().sku().name());
        Assertions.assertEquals("socwiqbuout", model.purchaseProperties().location());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.purchaseProperties().billingPlan());
        Assertions.assertEquals(354836266, model.purchaseProperties().quantity());
        Assertions.assertEquals("ougu", model.purchaseProperties().displayName());
        Assertions.assertEquals(AppliedScopeType.MANAGEMENT_GROUP, model.purchaseProperties().appliedScopeType());
        Assertions.assertEquals("pg", model.purchaseProperties().appliedScopes().get(0));
        Assertions.assertEquals("ap", model.purchaseProperties().appliedScopeProperties().tenantId());
        Assertions.assertEquals("n", model.purchaseProperties().appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("eaqbkixv", model.purchaseProperties().appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("wy", model.purchaseProperties().appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("bb", model.purchaseProperties().appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.purchaseProperties().renew());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.purchaseProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-09T19:26:55Z"),
            model.purchaseProperties().reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.OFF,
            model.purchaseProperties().instanceFlexibilityReservedResourcePropertiesInstanceFlexibility());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PatchPropertiesRenewProperties model = new PatchPropertiesRenewProperties()
            .withPurchaseProperties(new ReservationPurchaseRequest().withSku(new SkuName().withName("dtsdfjy"))
                .withLocation("socwiqbuout")
                .withBillingPlan(ReservationBillingPlan.MONTHLY)
                .withQuantity(354836266)
                .withDisplayName("ougu")
                .withAppliedScopeType(AppliedScopeType.MANAGEMENT_GROUP)
                .withAppliedScopes(Arrays.asList("pg", "ttbas"))
                .withAppliedScopeProperties(new ReservationAppliedScopeProperties().withTenantId("ap")
                    .withManagementGroupId("n")
                    .withSubscriptionId("eaqbkixv")
                    .withResourceGroupId("wy")
                    .withDisplayName("bb"))
                .withRenew(false)
                .withInstanceFlexibility(InstanceFlexibility.OFF)
                .withReviewDateTime(OffsetDateTime.parse("2021-07-09T19:26:55Z"))
                .withInstanceFlexibilityReservedResourcePropertiesInstanceFlexibility(InstanceFlexibility.OFF));
        model = BinaryData.fromObject(model).toObject(PatchPropertiesRenewProperties.class);
        Assertions.assertEquals("dtsdfjy", model.purchaseProperties().sku().name());
        Assertions.assertEquals("socwiqbuout", model.purchaseProperties().location());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.purchaseProperties().billingPlan());
        Assertions.assertEquals(354836266, model.purchaseProperties().quantity());
        Assertions.assertEquals("ougu", model.purchaseProperties().displayName());
        Assertions.assertEquals(AppliedScopeType.MANAGEMENT_GROUP, model.purchaseProperties().appliedScopeType());
        Assertions.assertEquals("pg", model.purchaseProperties().appliedScopes().get(0));
        Assertions.assertEquals("ap", model.purchaseProperties().appliedScopeProperties().tenantId());
        Assertions.assertEquals("n", model.purchaseProperties().appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("eaqbkixv", model.purchaseProperties().appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("wy", model.purchaseProperties().appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("bb", model.purchaseProperties().appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.purchaseProperties().renew());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.purchaseProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-09T19:26:55Z"),
            model.purchaseProperties().reviewDateTime());
        Assertions.assertEquals(InstanceFlexibility.OFF,
            model.purchaseProperties().instanceFlexibilityReservedResourcePropertiesInstanceFlexibility());
    }
}
