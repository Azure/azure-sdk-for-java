// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.Beneficiary;
import com.azure.resourcemanager.billing.models.BillingSubscription;
import com.azure.resourcemanager.billing.models.BillingSubscriptionPatch;
import com.azure.resourcemanager.billing.models.SystemOverrides;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BillingSubscriptionsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"autoRenew\":\"On\",\"beneficiaryTenantId\":\"rvpa\",\"beneficiary\":{\"tenantId\":\"deex\",\"objectId\":\"juguvnxbo\"},\"billingFrequency\":\"zurnzoytkbeadyf\",\"billingProfileId\":\"rozoijo\",\"billingPolicies\":{\"hsxw\":\"pkiwseacbtaxdrpa\",\"dacrq\":\"xrz\",\"ysyajmm\":\"wkkg\"},\"billingProfileDisplayName\":\"updc\",\"billingProfileName\":\"rufs\",\"consumptionCostCenter\":\"kuxkdiumgs\",\"customerId\":\"xwkscw\",\"customerDisplayName\":\"hfihvlm\",\"customerName\":\"eylaulpuexy\",\"displayName\":\"xztyecxdslspg\",\"enrollmentAccountId\":\"d\",\"enrollmentAccountDisplayName\":\"y\",\"enrollmentAccountSubscriptionDetails\":{\"enrollmentAccountStartDate\":\"2021-04-22T17:12:01Z\",\"subscriptionEnrollmentAccountStatus\":\"Transferring\"},\"invoiceSectionId\":\"vsv\",\"invoiceSectionDisplayName\":\"ltaprq\",\"invoiceSectionName\":\"kmvzrkpmonxdwf\",\"lastMonthCharges\":{\"currency\":\"bgftfvqukkm\",\"value\":71.73403},\"monthToDateCharges\":{\"currency\":\"gpdqrjyl\",\"value\":20.2398},\"nextBillingCycleDetails\":{\"billingFrequency\":\"mjhhxls\"},\"offerId\":\"ehztbejrdzwy\",\"productCategory\":\"dp\",\"productType\":\"wufifnj\",\"productTypeId\":\"hmjkykqf\",\"purchaseDate\":\"2021-05-15T09:53:50Z\",\"quantity\":1971220922186606928,\"reseller\":{\"resellerId\":\"ysmkbndnrihpja\",\"description\":\"cbeejnoignydlkr\"},\"renewalTermDetails\":{\"billingFrequency\":\"bnmrmhkipjardvdp\",\"productId\":\"wdxmiaelnp\",\"productTypeId\":\"eclundd\",\"skuId\":\"lpbjszqj\",\"termDuration\":\"kjvaycxrwknsbg\",\"quantity\":5955357506701250430,\"termEndDate\":\"2021-11-08T12:22:43Z\"},\"skuId\":\"iypzcyh\",\"skuDescription\":\"cebtpgvut\",\"systemOverrides\":{\"cancellation\":\"NotAllowed\",\"cancellationAllowedEndDate\":\"2021-07-24T18:42:41Z\"},\"resourceUri\":\"wq\",\"termDuration\":\"cowken\",\"termStartDate\":\"2021-08-15T03:44:16Z\",\"termEndDate\":\"2021-11-19T18:35:36Z\",\"provisioningTenantId\":\"flxq\",\"status\":\"Failed\",\"operationStatus\":\"Other\",\"provisioningState\":\"Succeeded\",\"subscriptionId\":\"uwgnyjdiujtic\",\"suspensionReasons\":[\"fzlhibf\"],\"suspensionReasonDetails\":[{\"effectiveDate\":\"2021-06-24T10:24:57Z\",\"reason\":\"Other\"}]},\"tags\":{\"vvdgnmeiom\":\"jkuf\",\"zaisfofg\":\"obbaibcfbfy\",\"ifmyzb\":\"mrkm\",\"lptbdponhblqi\":\"hdnhhcmt\"},\"id\":\"nuqfpzjzzbpcwtw\",\"name\":\"rchkcmruawqesqs\",\"type\":\"mie\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingSubscription response = manager.billingSubscriptions()
            .update("cznvzmsvzn", "heqzhehgvmm",
                new BillingSubscriptionPatch()
                    .withTags(mapOf("m", "hcnnkvthwtam", "cocdxvbeqzjd", "gyvxhfmuhkezuucq", "ytlxugjr", "xtutpdwneec",
                        "fbvhgykzov", "vnffaofkvfruxz"))
                    .withAutoRenew(AutoRenew.ON)
                    .withBeneficiaryTenantId("nbnyplu")
                    .withBeneficiary(new Beneficiary().withTenantId("kfcdfux").withObjectId("zvxotnoilqcdvhy"))
                    .withBillingFrequency("qhxytsq")
                    .withBillingProfileId("wcacwaaqakvokyax")
                    .withConsumptionCostCenter("jhmnaphrsk")
                    .withCustomerId("e")
                    .withDisplayName("ntteyrftxytja")
                    .withInvoiceSectionId("j")
                    .withProductTypeId("nat")
                    .withQuantity(6291558623280922400L)
                    .withSkuId("xdm")
                    .withSystemOverrides(new SystemOverrides())
                    .withTermDuration("nzi")
                    .withProvisioningTenantId("rwxxqkwargcbgdg"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jkuf", response.tags().get("vvdgnmeiom"));
        Assertions.assertEquals(AutoRenew.ON, response.autoRenew());
        Assertions.assertEquals("rvpa", response.beneficiaryTenantId());
        Assertions.assertEquals("deex", response.beneficiary().tenantId());
        Assertions.assertEquals("juguvnxbo", response.beneficiary().objectId());
        Assertions.assertEquals("zurnzoytkbeadyf", response.billingFrequency());
        Assertions.assertEquals("rozoijo", response.billingProfileId());
        Assertions.assertEquals("kuxkdiumgs", response.consumptionCostCenter());
        Assertions.assertEquals("xwkscw", response.customerId());
        Assertions.assertEquals("xztyecxdslspg", response.displayName());
        Assertions.assertEquals("vsv", response.invoiceSectionId());
        Assertions.assertEquals("hmjkykqf", response.productTypeId());
        Assertions.assertEquals(1971220922186606928L, response.quantity());
        Assertions.assertEquals("iypzcyh", response.skuId());
        Assertions.assertEquals("cowken", response.termDuration());
        Assertions.assertEquals("flxq", response.provisioningTenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
