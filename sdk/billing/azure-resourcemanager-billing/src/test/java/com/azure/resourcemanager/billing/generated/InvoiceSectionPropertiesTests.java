// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.InvoiceSectionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InvoiceSectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InvoiceSectionProperties model =
            BinaryData
                .fromString(
                    "{\"displayName\":\"tzlcuiywgqywgn\",\"labels\":{\"pphrcgynco\":\"ynhz\",\"vmmcoofs\":\"pec\",\"y\":\"lzevgbmqjqab\"},\"state\":\"Restricted\",\"systemId\":\"kwlzuvccfwnfn\",\"tags\":{\"bxetqgtzxdpn\":\"fionl\",\"eallnwsubisnj\":\"bqqwxrj\"},\"targetCloud\":\"USNat\"}")
                .toObject(InvoiceSectionProperties.class);
        Assertions.assertEquals("tzlcuiywgqywgn", model.displayName());
        Assertions.assertEquals("ynhz", model.labels().get("pphrcgynco"));
        Assertions.assertEquals("fionl", model.tags().get("bxetqgtzxdpn"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InvoiceSectionProperties model =
            new InvoiceSectionProperties()
                .withDisplayName("tzlcuiywgqywgn")
                .withLabels(mapOf("pphrcgynco", "ynhz", "vmmcoofs", "pec", "y", "lzevgbmqjqab"))
                .withTags(mapOf("bxetqgtzxdpn", "fionl", "eallnwsubisnj", "bqqwxrj"));
        model = BinaryData.fromObject(model).toObject(InvoiceSectionProperties.class);
        Assertions.assertEquals("tzlcuiywgqywgn", model.displayName());
        Assertions.assertEquals("ynhz", model.labels().get("pphrcgynco"));
        Assertions.assertEquals("fionl", model.tags().get("bxetqgtzxdpn"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
