// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Reservation;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReservationsListByBillingProfileMockTests {
    @Test
    public void testListByBillingProfile() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"id\":\"tuubwyvpjb\",\"name\":\"cpj\",\"type\":\"uqgixex\",\"location\":\"dfbwljav\",\"sku\":{\"name\":\"rkjd\"},\"properties\":{\"appliedScopes\":[\"liegftcvbi\",\"ftksd\",\"gdnk\",\"fgmwd\"],\"appliedScopeType\":\"eb\",\"reservedResourceType\":\"czldbglzoutbaaqg\",\"quantity\":61.248142,\"provisioningState\":\"jclyzgsnor\",\"expiryDate\":\"gmnzjotvmrx\",\"provisioningSubState\":\"lobvv\",\"displayName\":\"hvhd\",\"displayProvisioningState\":\"ayfluiyuosnu\",\"userFriendlyRenewState\":\"t\",\"userFriendlyAppliedScopeType\":\"vhyibdrqrsw\",\"effectiveDateTime\":\"uubpyrow\",\"skuDescription\":\"oxztfwfqch\",\"term\":\"zevjnnctag\",\"renew\":false,\"renewSource\":\"tpqpemhzcgkrep\",\"utilization\":{\"trend\":\"qyhwqwem\",\"aggregates\":[{\"grain\":80.07647,\"grainUnit\":\"km\",\"value\":29.985165,\"valueUnit\":\"inhgre\"},{\"grain\":62.95766,\"grainUnit\":\"h\",\"value\":6.4491034,\"valueUnit\":\"jpceeznzan\"},{\"grain\":13.895082,\"grainUnit\":\"faxy\",\"value\":70.06363,\"valueUnit\":\"ciphmsexr\"}]}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Reservation> response =
            manager
                .reservations()
                .listByBillingProfile(
                    "anlduwzorxsb", "x", "qk", "xym", "kqv", "qepdx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("liegftcvbi", response.iterator().next().appliedScopes().get(0));
    }
}
