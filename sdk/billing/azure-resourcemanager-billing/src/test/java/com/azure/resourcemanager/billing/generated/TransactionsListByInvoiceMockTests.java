// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.ReservationType;
import com.azure.resourcemanager.billing.models.Transaction;
import com.azure.resourcemanager.billing.models.TransactionTypeKind;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TransactionsListByInvoiceMockTests {
    @Test
    public void testListByInvoice() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"kind\":\"reservation\",\"date\":\"2021-10-25T06:31:18Z\",\"invoice\":\"vne\",\"invoiceId\":\"aifghtmoqqt\",\"orderId\":\"fhzbkr\",\"orderName\":\"jjavfq\",\"productFamily\":\"hnqoewdo\",\"productTypeId\":\"yetesy\",\"productType\":\"idbz\",\"productDescription\":\"hqtfbovn\",\"transactionType\":\"Purchase\",\"transactionAmount\":{\"currency\":\"etnjuhpsprkz\",\"value\":20.758957},\"quantity\":333927859,\"invoiceSectionId\":\"ccxnafbwqroohtuo\",\"invoiceSectionDisplayName\":\"aonurjtumg\",\"billingProfileId\":\"hpv\",\"billingProfileDisplayName\":\"mslclblyjxlt\",\"customerId\":\"juscvsfx\",\"customerDisplayName\":\"ctmgxuupbezqccy\",\"subscriptionId\":\"tce\",\"subscriptionName\":\"d\",\"azurePlan\":\"ky\",\"azureCreditApplied\":{\"currency\":\"tg\",\"value\":65.07157},\"billingCurrency\":\"qzgwldoychil\",\"discount\":47.130497,\"effectivePrice\":{\"currency\":\"ehuwaoa\",\"value\":0.38245916},\"exchangeRate\":37.166195,\"marketPrice\":{\"currency\":\"lizst\",\"value\":20.003922},\"pricingCurrency\":\"vhrweftkwqejpmv\",\"servicePeriodStartDate\":\"2021-09-05T09:38:44Z\",\"servicePeriodEndDate\":\"2021-06-10T02:31:17Z\",\"subTotal\":{\"currency\":\"wamcxtczhup\",\"value\":59.264435},\"tax\":{\"currency\":\"jduyyespydjfb\",\"value\":9.652024},\"unitOfMeasure\":\"hhulrtywikdm\",\"units\":94.05045,\"unitType\":\"uflgbhgauacdixm\"},\"id\":\"ufr\",\"name\":\"ryjqgdkf\",\"type\":\"ozo\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Transaction> response =
            manager.transactions().listByInvoice("ctwwgzw", "jlmec", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(TransactionTypeKind.RESERVATION, response.iterator().next().kind());
        Assertions.assertEquals(ReservationType.PURCHASE, response.iterator().next().transactionType());
    }
}
