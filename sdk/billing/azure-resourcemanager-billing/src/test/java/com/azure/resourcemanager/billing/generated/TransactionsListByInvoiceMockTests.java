// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.ReservationType;
import com.azure.resourcemanager.billing.models.Transaction;
import com.azure.resourcemanager.billing.models.TransactionTypeKind;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TransactionsListByInvoiceMockTests {
    @Test
    public void testListByInvoice() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"kind\":\"reservation\",\"date\":\"2021-03-31T05:28:16Z\",\"invoice\":\"spthzodubtlmjtgb\",\"invoiceId\":\"oskkfmk\",\"orderId\":\"djxyxgbkkqvjcteo\",\"orderName\":\"l\",\"productFamily\":\"lskkzpxvj\",\"productTypeId\":\"dpvocojhpcn\",\"productType\":\"xzfsnggytexvzilm\",\"productDescription\":\"vzkwwwncknr\",\"transactionType\":\"Usage"
                + " Charge\",\"transactionAmount\":{\"currency\":\"skzptjxulweucyr\",\"value\":39.67817},\"quantity\":1721081240,\"invoiceSectionId\":\"h\",\"invoiceSectionDisplayName\":\"gcj\",\"billingProfileId\":\"n\",\"billingProfileDisplayName\":\"hokamvfej\",\"customerId\":\"nttmbq\",\"customerDisplayName\":\"bzfivfok\",\"subscriptionId\":\"sthhzagjfwy\",\"subscriptionName\":\"lhgenuzejgvkv\",\"azurePlan\":\"aqszllrzl\",\"azureCreditApplied\":{\"currency\":\"dqgmih\",\"value\":32.735397},\"billingCurrency\":\"cqrhnx\",\"discount\":44.072353,\"effectivePrice\":{\"currency\":\"logxsvtzar\",\"value\":33.984566},\"exchangeRate\":35.240227,\"marketPrice\":{\"currency\":\"kt\",\"value\":37.85608},\"pricingCurrency\":\"wzzoslpk\",\"servicePeriodStartDate\":\"2021-12-03T08:55:55Z\",\"servicePeriodEndDate\":\"2021-04-17T17:18:02Z\",\"subTotal\":{\"currency\":\"zp\",\"value\":60.2799},\"tax\":{\"currency\":\"jcemqbmfuvqar\",\"value\":49.285866},\"unitOfMeasure\":\"qreblui\",\"units\":55.643856,\"unitType\":\"xsfgtdmbvxekr\"},\"id\":\"okqkbudbtwao\",\"name\":\"bavly\",\"type\":\"taaknwfrkebsmhp\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Transaction> response =
            manager.transactions().listByInvoice("crdcueljti", "hxmfqryarvsxzqb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(TransactionTypeKind.RESERVATION, response.iterator().next().kind());
        Assertions.assertEquals(ReservationType.USAGE_CHARGE, response.iterator().next().transactionType());
    }
}
