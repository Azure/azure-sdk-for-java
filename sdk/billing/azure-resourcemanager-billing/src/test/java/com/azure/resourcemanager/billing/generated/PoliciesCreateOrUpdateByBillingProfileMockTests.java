// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingProfilePolicyInner;
import com.azure.resourcemanager.billing.models.BillingProfilePolicy;
import com.azure.resourcemanager.billing.models.BillingProfilePolicyProperties;
import com.azure.resourcemanager.billing.models.BillingProfilePolicyPropertiesEnterpriseAgreementPolicies;
import com.azure.resourcemanager.billing.models.EnrollmentAccountOwnerViewCharges;
import com.azure.resourcemanager.billing.models.EnrollmentAuthLevelState;
import com.azure.resourcemanager.billing.models.EnrollmentDepartmentAdminViewCharges;
import com.azure.resourcemanager.billing.models.InvoiceSectionLabelManagementPolicy;
import com.azure.resourcemanager.billing.models.MarketplacePurchasesPolicy;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ReservationPurchasesPolicy;
import com.azure.resourcemanager.billing.models.SavingsPlanPurchasesPolicy;
import com.azure.resourcemanager.billing.models.ViewChargesPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoliciesCreateOrUpdateByBillingProfileMockTests {
    @Test
    public void testCreateOrUpdateByBillingProfile() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"enterpriseAgreementPolicies\":{\"authenticationType\":\"OrganizationalAccountOnly\",\"accountOwnerViewCharges\":\"Other\",\"departmentAdminViewCharges\":\"Disabled\"},\"invoiceSectionLabelManagement\":\"Other\",\"marketplacePurchases\":\"OnlyFreeAllowed\",\"reservationPurchases\":\"Allowed\",\"savingsPlanPurchases\":\"Disabled\",\"viewCharges\":\"Other\",\"policies\":[{\"name\":\"cffjhi\",\"value\":\"qzbsq\",\"policyType\":\"Other\",\"scope\":\"io\"}]},\"tags\":{\"dglxppewtlfsw\":\"zsw\",\"vvb\":\"lwnffczwzr\"},\"id\":\"npriyttiqdcjg\",\"name\":\"mcwmqpcwoe\",\"type\":\"jrfrucpefwdxbp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingProfilePolicy response
            = manager.policies()
                .createOrUpdateByBillingProfile("ckmzbhxxdxnh", "nnkakqwtozxl",
                    new BillingProfilePolicyInner()
                        .withTags(mapOf("szcwwv", "c", "tqxqiqaefu", "xvibivhjryppm", "lkffgyfehjs", "qfcorajdb", "ufx",
                            "ceuvynhmbz"))
                        .withProperties(new BillingProfilePolicyProperties()
                            .withEnterpriseAgreementPolicies(
                                new BillingProfilePolicyPropertiesEnterpriseAgreementPolicies()
                                    .withAuthenticationType(
                                        EnrollmentAuthLevelState.ORGANIZATIONAL_ACCOUNT_CROSS_TENANT)
                                    .withAccountOwnerViewCharges(EnrollmentAccountOwnerViewCharges.NOT_ALLOWED)
                                    .withDepartmentAdminViewCharges(EnrollmentDepartmentAdminViewCharges.NOT_ALLOWED))
                            .withInvoiceSectionLabelManagement(InvoiceSectionLabelManagementPolicy.ALLOWED)
                            .withMarketplacePurchases(MarketplacePurchasesPolicy.ALL_ALLOWED)
                            .withReservationPurchases(ReservationPurchasesPolicy.OTHER)
                            .withSavingsPlanPurchases(SavingsPlanPurchasesPolicy.DISABLED)
                            .withViewCharges(ViewChargesPolicy.NOT_ALLOWED)
                            .withPolicies(Arrays.asList(
                                new PolicySummary().withName("htfm")
                                    .withValue("aknppucfv")
                                    .withPolicyType(PolicyType.USER_CONTROLLED)
                                    .withScope("xcrh"),
                                new PolicySummary().withName("cnvd")
                                    .withValue("iuxx")
                                    .withPolicyType(PolicyType.OTHER)
                                    .withScope("phyjued"),
                                new PolicySummary().withName("kpysm")
                                    .withValue("p")
                                    .withPolicyType(PolicyType.OTHER)
                                    .withScope("ssbuzaxmkutho")))),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zsw", response.tags().get("dglxppewtlfsw"));
        Assertions.assertEquals(EnrollmentAuthLevelState.ORGANIZATIONAL_ACCOUNT_ONLY,
            response.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.OTHER,
            response.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.DISABLED,
            response.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(InvoiceSectionLabelManagementPolicy.OTHER,
            response.properties().invoiceSectionLabelManagement());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ONLY_FREE_ALLOWED,
            response.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.ALLOWED, response.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.DISABLED, response.properties().savingsPlanPurchases());
        Assertions.assertEquals(ViewChargesPolicy.OTHER, response.properties().viewCharges());
        Assertions.assertEquals("cffjhi", response.properties().policies().get(0).name());
        Assertions.assertEquals("qzbsq", response.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.OTHER, response.properties().policies().get(0).policyType());
        Assertions.assertEquals("io", response.properties().policies().get(0).scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
