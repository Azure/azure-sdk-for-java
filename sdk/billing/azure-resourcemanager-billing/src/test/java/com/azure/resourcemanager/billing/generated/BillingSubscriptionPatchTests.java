// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.Beneficiary;
import com.azure.resourcemanager.billing.models.BillingSubscriptionPatch;
import com.azure.resourcemanager.billing.models.SystemOverrides;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BillingSubscriptionPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingSubscriptionPatch model = BinaryData.fromString(
            "{\"properties\":{\"autoRenew\":\"Off\",\"beneficiaryTenantId\":\"lsbs\",\"beneficiary\":{\"tenantId\":\"qagwwrxaomz\",\"objectId\":\"glrrczez\"},\"billingFrequency\":\"hltnjadhqoawjq\",\"billingProfileId\":\"ueayfbpcmsplb\",\"billingPolicies\":{\"hwmgnmbscbbxig\":\"ueq\",\"dpyqyybxubmd\":\"hxiidlopedb\"},\"billingProfileDisplayName\":\"fcbqwremjela\",\"billingProfileName\":\"cigeleohdbvqvw\",\"consumptionCostCenter\":\"jopwbeonrlkwz\",\"customerId\":\"ybxc\",\"customerDisplayName\":\"kxcpt\",\"customerName\":\"qfyiaseqchkr\",\"displayName\":\"zrazisgyk\",\"enrollmentAccountId\":\"emv\",\"enrollmentAccountDisplayName\":\"bwzohmnrxxbs\",\"enrollmentAccountSubscriptionDetails\":{\"enrollmentAccountStartDate\":\"2021-01-19T09:33:12Z\",\"subscriptionEnrollmentAccountStatus\":\"Transferring\"},\"invoiceSectionId\":\"mdptys\",\"invoiceSectionDisplayName\":\"qsgnzxojpsl\",\"invoiceSectionName\":\"jgpliuf\",\"lastMonthCharges\":{\"currency\":\"oyxqvapcohhou\",\"value\":41.746384},\"monthToDateCharges\":{\"currency\":\"jxcx\",\"value\":60.126854},\"nextBillingCycleDetails\":{\"billingFrequency\":\"gdzbenr\"},\"offerId\":\"cawetzqddt\",\"productCategory\":\"fljhznamtua\",\"productType\":\"zwcjjncqtj\",\"productTypeId\":\"izvg\",\"purchaseDate\":\"2021-06-03T19:02:24Z\",\"quantity\":4237616710513929439,\"reseller\":{\"resellerId\":\"bxn\",\"description\":\"ebwgga\"},\"renewalTermDetails\":{\"billingFrequency\":\"zlswvajqf\",\"productId\":\"lx\",\"productTypeId\":\"qzasunwqrjzfrgqh\",\"skuId\":\"hcmbuocnjrohmbp\",\"termDuration\":\"yx\",\"quantity\":7175723432453090904,\"termEndDate\":\"2021-04-23T08:29:33Z\"},\"skuId\":\"yvk\",\"skuDescription\":\"m\",\"systemOverrides\":{\"cancellation\":\"NotAllowed\",\"cancellationAllowedEndDate\":\"2021-11-22T14:53:53Z\"},\"resourceUri\":\"v\",\"termDuration\":\"tod\",\"termStartDate\":\"2021-03-04T19:11:35Z\",\"termEndDate\":\"2021-09-18T22:21:22Z\",\"provisioningTenantId\":\"ucygvo\",\"status\":\"Failed\",\"operationStatus\":\"LockedForUpdate\",\"provisioningState\":\"Pending\",\"subscriptionId\":\"lghieegjlgvvpase\",\"suspensionReasons\":[\"buxantuyg\",\"hgaqipirpiwrq\",\"fulopmjnlexwhcb\"],\"suspensionReasonDetails\":[{\"effectiveDate\":\"2021-10-20T08:28:15Z\",\"reason\":\"PolicyViolation\"},{\"effectiveDate\":\"2021-02-26T18:08:35Z\",\"reason\":\"PastDue\"}]},\"tags\":{\"duczkgof\":\"ctatoyintqpbrlcy\",\"srucvcrrpcjtt\":\"y\"},\"id\":\"t\",\"name\":\"jeaq\",\"type\":\"rmvvfkoxmlghktui\"}")
            .toObject(BillingSubscriptionPatch.class);
        Assertions.assertEquals("ctatoyintqpbrlcy", model.tags().get("duczkgof"));
        Assertions.assertEquals(AutoRenew.OFF, model.autoRenew());
        Assertions.assertEquals("lsbs", model.beneficiaryTenantId());
        Assertions.assertEquals("qagwwrxaomz", model.beneficiary().tenantId());
        Assertions.assertEquals("glrrczez", model.beneficiary().objectId());
        Assertions.assertEquals("hltnjadhqoawjq", model.billingFrequency());
        Assertions.assertEquals("ueayfbpcmsplb", model.billingProfileId());
        Assertions.assertEquals("jopwbeonrlkwz", model.consumptionCostCenter());
        Assertions.assertEquals("ybxc", model.customerId());
        Assertions.assertEquals("zrazisgyk", model.displayName());
        Assertions.assertEquals("mdptys", model.invoiceSectionId());
        Assertions.assertEquals("izvg", model.productTypeId());
        Assertions.assertEquals(4237616710513929439L, model.quantity());
        Assertions.assertEquals("yvk", model.skuId());
        Assertions.assertEquals("tod", model.termDuration());
        Assertions.assertEquals("ucygvo", model.provisioningTenantId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingSubscriptionPatch model
            = new BillingSubscriptionPatch().withTags(mapOf("duczkgof", "ctatoyintqpbrlcy", "srucvcrrpcjtt", "y"))
                .withAutoRenew(AutoRenew.OFF)
                .withBeneficiaryTenantId("lsbs")
                .withBeneficiary(new Beneficiary().withTenantId("qagwwrxaomz").withObjectId("glrrczez"))
                .withBillingFrequency("hltnjadhqoawjq")
                .withBillingProfileId("ueayfbpcmsplb")
                .withConsumptionCostCenter("jopwbeonrlkwz")
                .withCustomerId("ybxc")
                .withDisplayName("zrazisgyk")
                .withInvoiceSectionId("mdptys")
                .withProductTypeId("izvg")
                .withQuantity(4237616710513929439L)
                .withSkuId("yvk")
                .withSystemOverrides(new SystemOverrides())
                .withTermDuration("tod")
                .withProvisioningTenantId("ucygvo");
        model = BinaryData.fromObject(model).toObject(BillingSubscriptionPatch.class);
        Assertions.assertEquals("ctatoyintqpbrlcy", model.tags().get("duczkgof"));
        Assertions.assertEquals(AutoRenew.OFF, model.autoRenew());
        Assertions.assertEquals("lsbs", model.beneficiaryTenantId());
        Assertions.assertEquals("qagwwrxaomz", model.beneficiary().tenantId());
        Assertions.assertEquals("glrrczez", model.beneficiary().objectId());
        Assertions.assertEquals("hltnjadhqoawjq", model.billingFrequency());
        Assertions.assertEquals("ueayfbpcmsplb", model.billingProfileId());
        Assertions.assertEquals("jopwbeonrlkwz", model.consumptionCostCenter());
        Assertions.assertEquals("ybxc", model.customerId());
        Assertions.assertEquals("zrazisgyk", model.displayName());
        Assertions.assertEquals("mdptys", model.invoiceSectionId());
        Assertions.assertEquals("izvg", model.productTypeId());
        Assertions.assertEquals(4237616710513929439L, model.quantity());
        Assertions.assertEquals("yvk", model.skuId());
        Assertions.assertEquals("tod", model.termDuration());
        Assertions.assertEquals("ucygvo", model.provisioningTenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
