// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.BillingAccountPolicy;
import com.azure.resourcemanager.billing.models.EnrollmentAccountOwnerViewCharges;
import com.azure.resourcemanager.billing.models.EnrollmentAuthLevelState;
import com.azure.resourcemanager.billing.models.EnrollmentDepartmentAdminViewCharges;
import com.azure.resourcemanager.billing.models.MarketplacePurchasesPolicy;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ReservationPurchasesPolicy;
import com.azure.resourcemanager.billing.models.SavingsPlanPurchasesPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoliciesGetByBillingAccountWithResponseMockTests {
    @Test
    public void testGetByBillingAccountWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"ConfirmedBilling\",\"enterpriseAgreementPolicies\":{\"authenticationType\":\"Other\",\"accountOwnerViewCharges\":\"Disabled\",\"departmentAdminViewCharges\":\"Other\"},\"marketplacePurchases\":\"OnlyFreeAllowed\",\"reservationPurchases\":\"Other\",\"savingsPlanPurchases\":\"NotAllowed\",\"policies\":[{\"name\":\"gdfecju\",\"value\":\"yrwvo\",\"policyType\":\"UserControlled\",\"scope\":\"wxbaczypslfqgfwo\"},{\"name\":\"tgpeizuz\",\"value\":\"eouftcj\",\"policyType\":\"SystemControlled\",\"scope\":\"dfomscwlcfcpza\"},{\"name\":\"qbbfgmeqhtngrxfq\",\"value\":\"sewfbllegezvwuwi\",\"policyType\":\"SystemControlled\",\"scope\":\"ggjacmaz\"}]},\"tags\":{\"bzykmdklwbq\":\"gvmiproqp\",\"qqtmpgrzciltwedl\":\"mtwua\",\"lhyiohcjugduogg\":\"pnoeb\"},\"id\":\"zmy\",\"name\":\"guykrpzpmwz\",\"type\":\"lcrzdweb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingAccountPolicy response = manager.policies()
            .getByBillingAccountWithResponse("zrkhptyh", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("gvmiproqp", response.tags().get("bzykmdklwbq"));
        Assertions.assertEquals(EnrollmentAuthLevelState.OTHER,
            response.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.DISABLED,
            response.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.OTHER,
            response.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ONLY_FREE_ALLOWED,
            response.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.OTHER, response.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.NOT_ALLOWED, response.properties().savingsPlanPurchases());
        Assertions.assertEquals("gdfecju", response.properties().policies().get(0).name());
        Assertions.assertEquals("yrwvo", response.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.USER_CONTROLLED, response.properties().policies().get(0).policyType());
        Assertions.assertEquals("wxbaczypslfqgfwo", response.properties().policies().get(0).scope());
    }
}
