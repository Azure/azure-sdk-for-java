// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingSubscriptionAliasInner;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.Beneficiary;
import com.azure.resourcemanager.billing.models.BillingSubscriptionAlias;
import com.azure.resourcemanager.billing.models.SystemOverrides;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BillingSubscriptionsAliasesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"billingSubscriptionId\":\"vkyezwsey\",\"autoRenew\":\"Off\",\"beneficiaryTenantId\":\"mjw\",\"beneficiary\":{\"tenantId\":\"lqreof\",\"objectId\":\"krztpyaymhxlnmw\"},\"billingFrequency\":\"symnrtvqmima\",\"billingProfileId\":\"otpcvp\",\"billingPolicies\":{\"wtominrufqqa\":\"pkvyqpvzxxzn\"},\"billingProfileDisplayName\":\"gasfmhbxv\",\"billingProfileName\":\"kqnatxvuzc\",\"consumptionCostCenter\":\"lirybytcaqp\",\"customerId\":\"hlc\",\"customerDisplayName\":\"rvxyyh\",\"customerName\":\"i\",\"displayName\":\"tq\",\"enrollmentAccountId\":\"panteqiw\",\"enrollmentAccountDisplayName\":\"ukaa\",\"enrollmentAccountSubscriptionDetails\":{\"enrollmentAccountStartDate\":\"2021-01-23T22:26:58Z\",\"subscriptionEnrollmentAccountStatus\":\"TransferredOut\"},\"invoiceSectionId\":\"xysjd\",\"invoiceSectionDisplayName\":\"vksijrjgyind\",\"invoiceSectionName\":\"i\",\"lastMonthCharges\":{\"currency\":\"uyxuupze\",\"value\":76.48739},\"monthToDateCharges\":{\"currency\":\"opdtph\",\"value\":29.796202},\"nextBillingCycleDetails\":{\"billingFrequency\":\"zy\"},\"offerId\":\"gqyiyjxzx\",\"productCategory\":\"htnyz\",\"productType\":\"o\",\"productTypeId\":\"mdlk\",\"purchaseDate\":\"2021-02-05T19:50:42Z\",\"quantity\":3089360574056270609,\"reseller\":{\"resellerId\":\"bwxpmgyqshsasmr\",\"description\":\"yutkbx\"},\"renewalTermDetails\":{\"billingFrequency\":\"ztkyqguauuihk\",\"productId\":\"gkyncyzjndfeemxi\",\"productTypeId\":\"pfivypmwdza\",\"skuId\":\"cr\",\"termDuration\":\"ppoqimyhxnpdggll\",\"quantity\":7101363085083316212,\"termEndDate\":\"2021-06-02T15:39:32Z\"},\"skuId\":\"m\",\"skuDescription\":\"c\",\"systemOverrides\":{\"cancellation\":\"NotAllowed\",\"cancellationAllowedEndDate\":\"2021-04-24T21:13:02Z\"},\"resourceUri\":\"djnstzeurdo\",\"termDuration\":\"l\",\"termStartDate\":\"2021-05-01T08:38:59Z\",\"termEndDate\":\"2021-08-03T03:41:27Z\",\"provisioningTenantId\":\"znymwzl\",\"status\":\"Failed\",\"operationStatus\":\"None\",\"provisioningState\":\"Succeeded\",\"subscriptionId\":\"fubevwadxc\",\"suspensionReasons\":[\"evltfebq\",\"qiaklqakps\"],\"suspensionReasonDetails\":[{\"effectiveDate\":\"2021-03-19T17:59:24Z\",\"reason\":\"Other\"},{\"effectiveDate\":\"2021-04-12T03:54:25Z\",\"reason\":\"PolicyViolation\"}]},\"tags\":{\"qkgt\":\"ipzgfofuadcjqne\"},\"id\":\"arg\",\"name\":\"eynqlsnrgaxoyv\",\"type\":\"jjpfyxhsppvjs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingSubscriptionAlias response = manager.billingSubscriptionsAliases()
            .createOrUpdate("sabcylzz", "etumzenkrd",
                new BillingSubscriptionAliasInner()
                    .withTags(mapOf("khcidcfwoo", "qyrpub", "zowgmmixf", "ku", "jnpahzhpqscuyil", "aupgblna"))
                    .withAutoRenew(AutoRenew.OFF)
                    .withBeneficiaryTenantId("qqqeetsqaclc")
                    .withBeneficiary(new Beneficiary().withTenantId("of").withObjectId("raiai"))
                    .withBillingFrequency("kewqwamptld")
                    .withBillingProfileId("orzljhnxfkffng")
                    .withConsumptionCostCenter("okyduqzuscolb")
                    .withCustomerId("ehtekx")
                    .withDisplayName("bcztamkyrkwsthp")
                    .withInvoiceSectionId("sxfrwvlyp")
                    .withProductTypeId("cuvwat")
                    .withQuantity(6528757801026193127L)
                    .withSkuId("vjk")
                    .withSystemOverrides(new SystemOverrides())
                    .withTermDuration("x")
                    .withProvisioningTenantId("xrqghotingzic"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ipzgfofuadcjqne", response.tags().get("qkgt"));
        Assertions.assertEquals(AutoRenew.OFF, response.autoRenew());
        Assertions.assertEquals("mjw", response.beneficiaryTenantId());
        Assertions.assertEquals("lqreof", response.beneficiary().tenantId());
        Assertions.assertEquals("krztpyaymhxlnmw", response.beneficiary().objectId());
        Assertions.assertEquals("symnrtvqmima", response.billingFrequency());
        Assertions.assertEquals("otpcvp", response.billingProfileId());
        Assertions.assertEquals("lirybytcaqp", response.consumptionCostCenter());
        Assertions.assertEquals("hlc", response.customerId());
        Assertions.assertEquals("tq", response.displayName());
        Assertions.assertEquals("xysjd", response.invoiceSectionId());
        Assertions.assertEquals("mdlk", response.productTypeId());
        Assertions.assertEquals(3089360574056270609L, response.quantity());
        Assertions.assertEquals("m", response.skuId());
        Assertions.assertEquals("l", response.termDuration());
        Assertions.assertEquals("znymwzl", response.provisioningTenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
