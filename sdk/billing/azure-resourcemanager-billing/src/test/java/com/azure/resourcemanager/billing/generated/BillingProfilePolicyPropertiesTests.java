// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.models.BillingProfilePolicyProperties;
import com.azure.resourcemanager.billing.models.BillingProfilePolicyPropertiesEnterpriseAgreementPolicies;
import com.azure.resourcemanager.billing.models.EnrollmentAccountOwnerViewCharges;
import com.azure.resourcemanager.billing.models.EnrollmentAuthLevelState;
import com.azure.resourcemanager.billing.models.EnrollmentDepartmentAdminViewCharges;
import com.azure.resourcemanager.billing.models.InvoiceSectionLabelManagementPolicy;
import com.azure.resourcemanager.billing.models.MarketplacePurchasesPolicy;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ReservationPurchasesPolicy;
import com.azure.resourcemanager.billing.models.SavingsPlanPurchasesPolicy;
import com.azure.resourcemanager.billing.models.ViewChargesPolicy;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BillingProfilePolicyPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingProfilePolicyProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Pending\",\"enterpriseAgreementPolicies\":{\"authenticationType\":\"OrganizationalAccountOnly\",\"accountOwnerViewCharges\":\"NotAllowed\",\"departmentAdminViewCharges\":\"Allowed\"},\"invoiceSectionLabelManagement\":\"Other\",\"marketplacePurchases\":\"AllAllowed\",\"reservationPurchases\":\"NotAllowed\",\"savingsPlanPurchases\":\"NotAllowed\",\"viewCharges\":\"Other\",\"policies\":[{\"name\":\"xdqaolfylnkkb\",\"value\":\"jvlywl\",\"policyType\":\"SystemControlled\",\"scope\":\"obbjwhlwy\"},{\"name\":\"nqzocrdzg\",\"value\":\"euntgxdncaqtti\",\"policyType\":\"SystemControlled\",\"scope\":\"fuvnyttzgixgyri\"},{\"name\":\"gm\",\"value\":\"ehlq\",\"policyType\":\"UserControlled\",\"scope\":\"flkn\"}]}")
            .toObject(BillingProfilePolicyProperties.class);
        Assertions.assertEquals(EnrollmentAuthLevelState.ORGANIZATIONAL_ACCOUNT_ONLY,
            model.enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.NOT_ALLOWED,
            model.enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.ALLOWED,
            model.enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(InvoiceSectionLabelManagementPolicy.OTHER, model.invoiceSectionLabelManagement());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ALL_ALLOWED, model.marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.NOT_ALLOWED, model.reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.NOT_ALLOWED, model.savingsPlanPurchases());
        Assertions.assertEquals(ViewChargesPolicy.OTHER, model.viewCharges());
        Assertions.assertEquals("xdqaolfylnkkb", model.policies().get(0).name());
        Assertions.assertEquals("jvlywl", model.policies().get(0).value());
        Assertions.assertEquals(PolicyType.SYSTEM_CONTROLLED, model.policies().get(0).policyType());
        Assertions.assertEquals("obbjwhlwy", model.policies().get(0).scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingProfilePolicyProperties model = new BillingProfilePolicyProperties()
            .withEnterpriseAgreementPolicies(new BillingProfilePolicyPropertiesEnterpriseAgreementPolicies()
                .withAuthenticationType(EnrollmentAuthLevelState.ORGANIZATIONAL_ACCOUNT_ONLY)
                .withAccountOwnerViewCharges(EnrollmentAccountOwnerViewCharges.NOT_ALLOWED)
                .withDepartmentAdminViewCharges(EnrollmentDepartmentAdminViewCharges.ALLOWED))
            .withInvoiceSectionLabelManagement(InvoiceSectionLabelManagementPolicy.OTHER)
            .withMarketplacePurchases(MarketplacePurchasesPolicy.ALL_ALLOWED)
            .withReservationPurchases(ReservationPurchasesPolicy.NOT_ALLOWED)
            .withSavingsPlanPurchases(SavingsPlanPurchasesPolicy.NOT_ALLOWED)
            .withViewCharges(ViewChargesPolicy.OTHER)
            .withPolicies(Arrays.asList(
                new PolicySummary().withName("xdqaolfylnkkb")
                    .withValue("jvlywl")
                    .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                    .withScope("obbjwhlwy"),
                new PolicySummary().withName("nqzocrdzg")
                    .withValue("euntgxdncaqtti")
                    .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                    .withScope("fuvnyttzgixgyri"),
                new PolicySummary().withName("gm")
                    .withValue("ehlq")
                    .withPolicyType(PolicyType.USER_CONTROLLED)
                    .withScope("flkn")));
        model = BinaryData.fromObject(model).toObject(BillingProfilePolicyProperties.class);
        Assertions.assertEquals(EnrollmentAuthLevelState.ORGANIZATIONAL_ACCOUNT_ONLY,
            model.enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.NOT_ALLOWED,
            model.enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.ALLOWED,
            model.enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(InvoiceSectionLabelManagementPolicy.OTHER, model.invoiceSectionLabelManagement());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ALL_ALLOWED, model.marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.NOT_ALLOWED, model.reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.NOT_ALLOWED, model.savingsPlanPurchases());
        Assertions.assertEquals(ViewChargesPolicy.OTHER, model.viewCharges());
        Assertions.assertEquals("xdqaolfylnkkb", model.policies().get(0).name());
        Assertions.assertEquals("jvlywl", model.policies().get(0).value());
        Assertions.assertEquals(PolicyType.SYSTEM_CONTROLLED, model.policies().get(0).policyType());
        Assertions.assertEquals("obbjwhlwy", model.policies().get(0).scope());
    }
}
