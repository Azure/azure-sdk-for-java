// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.CustomerPolicyInner;
import com.azure.resourcemanager.billing.models.CustomerPolicy;
import com.azure.resourcemanager.billing.models.CustomerPolicyProperties;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ViewChargesPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoliciesCreateOrUpdateByCustomerMockTests {
    @Test
    public void testCreateOrUpdateByCustomer() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"viewCharges\":\"Other\",\"policies\":[{\"name\":\"lbsnlfp\",\"value\":\"jrh\",\"policyType\":\"SystemControlled\",\"scope\":\"orhwuujymyjvkoy\"},{\"name\":\"tourrq\",\"value\":\"hlhz\",\"policyType\":\"Other\",\"scope\":\"emzvqm\"},{\"name\":\"svxbagccvhnoq\",\"value\":\"wepcntqos\",\"policyType\":\"UserControlled\",\"scope\":\"kx\"}]},\"tags\":{\"d\":\"uyygdoi\",\"x\":\"c\",\"enbdqxf\":\"byvbdvgztjtzs\"},\"id\":\"jcngjcdyk\",\"name\":\"pnfvzbvtxgsn\",\"type\":\"sqjjcwggjimlcb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomerPolicy response = manager.policies()
            .createOrUpdateByCustomer("yarqthbjblhefq", "irnxtpzdgy", "lwuiklbjlnbx",
                new CustomerPolicyInner()
                    .withTags(mapOf("efoxlzrijpkb", "bogpb", "zawenrv", "vmzupqkrqeqj", "izvve", "itzdjixkepladoh"))
                    .withProperties(new CustomerPolicyProperties().withViewCharges(ViewChargesPolicy.OTHER)
                        .withPolicies(Arrays.asList(
                            new PolicySummary().withName("gjfhviahoke")
                                .withValue("madyoctmdauoscc")
                                .withPolicyType(PolicyType.OTHER)
                                .withScope("stnt"),
                            new PolicySummary().withName("teufgdgbzftsbpe")
                                .withValue("f")
                                .withPolicyType(PolicyType.USER_CONTROLLED)
                                .withScope("cdbzoxhoi")))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("uyygdoi", response.tags().get("d"));
        Assertions.assertEquals(ViewChargesPolicy.OTHER, response.properties().viewCharges());
        Assertions.assertEquals("lbsnlfp", response.properties().policies().get(0).name());
        Assertions.assertEquals("jrh", response.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.SYSTEM_CONTROLLED, response.properties().policies().get(0).policyType());
        Assertions.assertEquals("orhwuujymyjvkoy", response.properties().policies().get(0).scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
