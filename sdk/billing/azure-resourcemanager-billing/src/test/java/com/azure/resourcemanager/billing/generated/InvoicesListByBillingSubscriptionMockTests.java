// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Invoice;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InvoicesListByBillingSubscriptionMockTests {
    @Test
    public void testListByBillingSubscription() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"dueDate\":\"2021-08-01T02:12:30Z\",\"invoiceDate\":\"2021-07-23T13:48:24Z\",\"status\":\"Due\",\"amountDue\":{\"currency\":\"xak\",\"value\":59.714634},\"azurePrepaymentApplied\":{\"currency\":\"mxgaabjkdtfohfao\",\"value\":80.68029},\"billedAmount\":{\"currency\":\"wrsiwdyjqurykc\",\"value\":59.443794},\"creditAmount\":{\"currency\":\"ekcsueh\",\"value\":90.89297},\"freeAzureCreditApplied\":{\"currency\":\"cbcbgydlqidy\",\"value\":74.43678},\"subTotal\":{\"currency\":\"tyrilkfbnrqqxvz\",\"value\":71.63675},\"taxAmount\":{\"currency\":\"nqtxjtomalswbnf\",\"value\":13.888711},\"totalAmount\":{\"currency\":\"dwq\",\"value\":73.06933},\"invoicePeriodStartDate\":\"2021-09-30T19:59:55Z\",\"invoicePeriodEndDate\":\"2021-07-22T22:20:06Z\",\"invoiceType\":\"AzureMarketplace\",\"isMonthlyInvoice\":false,\"billingProfileId\":\"hvmywhsbrcarycs\",\"billingProfileDisplayName\":\"zyvoaqa\",\"purchaseOrderNumber\":\"vehzp\",\"documents\":[{\"kind\":\"Invoice\",\"url\":\"bhmpfulubefgybp\",\"source\":\"ENF\"}],\"payments\":[{\"paymentType\":\"unmpzkrvfyifkdsc\",\"amount\":{\"currency\":\"vfictnkjjwgcwn\",\"value\":97.29117},\"date\":\"2021-02-22T02:23:06Z\",\"paymentMethodFamily\":\"Credits\",\"paymentMethodType\":\"togmhmjpjscdfpd\"},{\"paymentType\":\"tygevgwmseharx\",\"amount\":{\"currency\":\"qnrxtmbpjptn\",\"value\":64.42339},\"date\":\"2021-11-11T15:17:45Z\",\"paymentMethodFamily\":\"None\",\"paymentMethodType\":\"qpxlb\"}],\"rebillDetails\":{\"hpycvjqdvdwkq\":{\"creditNoteDocumentId\":\"f\",\"invoiceDocumentId\":\"gatwmykyu\",\"rebillDetails\":{\"mdwmf\":{}}},\"jrr\":{\"creditNoteDocumentId\":\"drlefgnaavuag\",\"invoiceDocumentId\":\"etaoutnpdc\",\"rebillDetails\":{\"spfefyihduyeuyld\":{},\"hmtybkcgsuthhll\":{},\"mwynefxexlfciatx\":{}}}},\"documentType\":\"CreditNote\",\"billedDocumentId\":\"skjh\",\"creditForDocumentId\":\"dl\",\"subscriptionId\":\"foxcx\"},\"id\":\"cvslxlhuavkrmukm\",\"name\":\"jmkxettcslojf\",\"type\":\"qid\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Invoice> response =
            manager.invoices().listByBillingSubscription("qytl", "hd", com.azure.core.util.Context.NONE);
    }
}
