// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Invoice;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InvoicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"dueDate\":\"2021-03-09T19:20:38Z\",\"invoiceDate\":\"2021-03-12T02:37:11Z\",\"status\":\"Paid\",\"amountDue\":{\"currency\":\"efjokn\",\"value\":76.97374},\"azurePrepaymentApplied\":{\"currency\":\"qedikdfrd\",\"value\":26.596153},\"billedAmount\":{\"currency\":\"jgeihfqlggwfi\",\"value\":70.12909},\"creditAmount\":{\"currency\":\"jpbyephmgtv\",\"value\":89.511314},\"freeAzureCreditApplied\":{\"currency\":\"m\",\"value\":27.577436},\"subTotal\":{\"currency\":\"gxhnpomyqwcabv\",\"value\":19.589584},\"taxAmount\":{\"currency\":\"ey\",\"value\":95.847664},\"totalAmount\":{\"currency\":\"augmrmfjlr\",\"value\":87.45515},\"invoicePeriodStartDate\":\"2021-07-12T07:37Z\",\"invoicePeriodEndDate\":\"2021-02-10T01:38:52Z\",\"invoiceType\":\"AzureService\",\"isMonthlyInvoice\":false,\"billingProfileId\":\"isizm\",\"billingProfileDisplayName\":\"eds\",\"purchaseOrderNumber\":\"wuived\",\"documents\":[],\"payments\":[],\"rebillDetails\":{},\"documentType\":\"Invoice\",\"billedDocumentId\":\"qbpsmg\",\"creditForDocumentId\":\"guamlj\",\"subscriptionId\":\"rgmsplzga\"},\"id\":\"fcshh\",\"name\":\"new\",\"type\":\"nxkympqanxrjk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Invoice response =
            manager
                .invoices()
                .getWithResponse("ubkmifo", "xkubvphavpmhbrbq", com.azure.core.util.Context.NONE)
                .getValue();
    }
}
