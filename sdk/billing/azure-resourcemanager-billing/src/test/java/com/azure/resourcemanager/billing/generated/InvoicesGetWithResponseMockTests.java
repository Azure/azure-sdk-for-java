// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Invoice;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InvoicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"dueDate\":\"2021-11-17T19:03:39Z\",\"invoiceDate\":\"2021-02-19T20:52:36Z\",\"status\":\"Paid\",\"amountDue\":{\"currency\":\"kxhnegknj\",\"value\":60.299294},\"azurePrepaymentApplied\":{\"currency\":\"me\",\"value\":81.79294},\"billedAmount\":{\"currency\":\"aobrlbp\",\"value\":47.0766},\"creditAmount\":{\"currency\":\"gnc\",\"value\":6.3192663},\"freeAzureCreditApplied\":{\"currency\":\"muowakywalhjy\",\"value\":31.87473},\"subTotal\":{\"currency\":\"tagdrc\",\"value\":39.965935},\"taxAmount\":{\"currency\":\"jomevtfycnlb\",\"value\":88.9565},\"totalAmount\":{\"currency\":\"dkkgjiiytssikizb\",\"value\":15.754026},\"invoicePeriodStartDate\":\"2021-09-02T05:20:52Z\",\"invoicePeriodEndDate\":\"2021-10-15T11:52:21Z\",\"invoiceType\":\"AzureMarketplace\",\"isMonthlyInvoice\":true,\"billingProfileId\":\"qsorh\",\"billingProfileDisplayName\":\"kxgnlykmxcpwzvmd\",\"purchaseOrderNumber\":\"sqdtiwlwxlbon\",\"documents\":[{\"kind\":\"CreditNote\",\"url\":\"icqchygtv\",\"source\":\"ENF\"},{\"kind\":\"VoidNote\",\"url\":\"epubdp\",\"source\":\"DRS\"},{\"kind\":\"TaxReceipt\",\"url\":\"xiaodet\",\"source\":\"ENF\"},{\"kind\":\"TaxReceipt\",\"url\":\"xuwsai\",\"source\":\"DRS\"}],\"payments\":[{\"paymentType\":\"s\",\"amount\":{\"currency\":\"ehgcvkbcknjo\",\"value\":11.539727},\"date\":\"2021-12-07T15:44:06Z\",\"paymentMethodFamily\":\"CreditCard\",\"paymentMethodType\":\"els\"},{\"paymentType\":\"rqz\",\"amount\":{\"currency\":\"o\",\"value\":33.21297},\"date\":\"2021-12-08T00:40:43Z\",\"paymentMethodFamily\":\"None\",\"paymentMethodType\":\"ljgl\"}],\"rebillDetails\":{\"zdgvpyigdaqqilz\":{\"creditNoteDocumentId\":\"qwaafrqulhm\",\"invoiceDocumentId\":\"qb\",\"rebillDetails\":{\"afjrqpjiyrqjcrg\":{},\"xwmzwdfkbnrz\":{},\"rpdltbq\":{},\"tqjfgxxsaet\":{}}},\"tuicds\":{\"creditNoteDocumentId\":\"d\",\"invoiceDocumentId\":\"joedx\",\"rebillDetails\":{\"caifpaurww\":{},\"ilfjqqacdmk\":{},\"wxdcvjwcyz\":{},\"akeciqchx\":{}}},\"ii\":{\"creditNoteDocumentId\":\"dfmmpzhzzwvy\",\"invoiceDocumentId\":\"gyngydgrpxncak\",\"rebillDetails\":{\"ondjrkclam\":{},\"glvlmfejdoqeyk\":{},\"ltygxhqfgqkayej\":{},\"xtlgflwfg\":{}}},\"a\":{\"creditNoteDocumentId\":\"ijjcea\",\"invoiceDocumentId\":\"ijjj\",\"rebillDetails\":{\"am\":{}}}},\"documentType\":\"CreditNote\",\"billedDocumentId\":\"xk\",\"creditForDocumentId\":\"cxetyvkunmignoh\",\"subscriptionId\":\"kgqogjw\"},\"id\":\"indedvabbx\",\"name\":\"hmedeilbjywfcfxz\",\"type\":\"rzzihvwypus\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Invoice response =
            manager.invoices().getWithResponse("hepfwwtjfdoes", "xhmw", com.azure.core.util.Context.NONE).getValue();
    }
}
