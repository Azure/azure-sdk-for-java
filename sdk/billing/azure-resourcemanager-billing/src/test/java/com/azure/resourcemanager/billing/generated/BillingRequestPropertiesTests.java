// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.models.BillingRequestProperties;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesCreatedBy;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesLastUpdatedBy;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesReviewedBy;
import com.azure.resourcemanager.billing.models.BillingRequestStatus;
import com.azure.resourcemanager.billing.models.BillingRequestType;
import com.azure.resourcemanager.billing.models.Principal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BillingRequestPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BillingRequestProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Creating\",\"additionalInformation\":{\"lmnguxaw\":\"aoyzkoow\"},\"reviewedBy\":{\"tenantId\":\"dsyuuximerqfob\",\"objectId\":\"znkbykutwpfhpagm\",\"upn\":\"skdsnfdsdoakg\"},\"reviewalDate\":\"2021-11-05T14:44:19Z\",\"billingAccountId\":\"kkze\",\"billingAccountName\":\"l\",\"billingAccountDisplayName\":\"wpusdsttwvogv\",\"billingAccountPrimaryBillingTenantId\":\"ejdcngqqmoakuf\",\"billingProfileId\":\"jzrwrdgrtw\",\"billingProfileName\":\"nuuzkopbm\",\"billingProfileDisplayName\":\"rfdwoyu\",\"createdBy\":{\"tenantId\":\"iuiefozbhdmsm\",\"objectId\":\"zqhof\",\"upn\":\"maequiahxicslfa\"},\"creationDate\":\"2021-11-28T10:16:40Z\",\"expirationDate\":\"2021-01-04T13:19:25Z\",\"decisionReason\":\"ylhalnswhcc\",\"invoiceSectionId\":\"hka\",\"invoiceSectionName\":\"witqscywuggwoluh\",\"invoiceSectionDisplayName\":\"bwemhairs\",\"customerId\":\"gzd\",\"customerName\":\"swe\",\"customerDisplayName\":\"qwdxggicc\",\"subscriptionId\":\"xqhuexm\",\"subscriptionName\":\"tlstvlzywem\",\"subscriptionDisplayName\":\"rncsdtclu\",\"justification\":\"ypbsfgytguslfead\",\"recipients\":[{\"tenantId\":\"ukyhejhzis\",\"objectId\":\"fpel\",\"upn\":\"p\"}],\"requestScope\":\"ksrpqv\",\"billingScope\":\"zraehtwd\",\"status\":\"Completed\",\"type\":\"RoleAssignment\",\"lastUpdatedBy\":{\"tenantId\":\"byrcdlbhshfwp\",\"objectId\":\"cstwity\",\"upn\":\"evxccedcp\"},\"lastUpdatedDate\":\"2021-05-27T10:40:38Z\"}")
            .toObject(BillingRequestProperties.class);
        Assertions.assertEquals("aoyzkoow", model.additionalInformation().get("lmnguxaw"));
        Assertions.assertEquals("dsyuuximerqfob", model.reviewedBy().tenantId());
        Assertions.assertEquals("znkbykutwpfhpagm", model.reviewedBy().objectId());
        Assertions.assertEquals("skdsnfdsdoakg", model.reviewedBy().upn());
        Assertions.assertEquals("iuiefozbhdmsm", model.createdBy().tenantId());
        Assertions.assertEquals("zqhof", model.createdBy().objectId());
        Assertions.assertEquals("maequiahxicslfa", model.createdBy().upn());
        Assertions.assertEquals("ylhalnswhcc", model.decisionReason());
        Assertions.assertEquals("ypbsfgytguslfead", model.justification());
        Assertions.assertEquals("ukyhejhzis", model.recipients().get(0).tenantId());
        Assertions.assertEquals("fpel", model.recipients().get(0).objectId());
        Assertions.assertEquals("p", model.recipients().get(0).upn());
        Assertions.assertEquals("ksrpqv", model.requestScope());
        Assertions.assertEquals(BillingRequestStatus.COMPLETED, model.status());
        Assertions.assertEquals(BillingRequestType.ROLE_ASSIGNMENT, model.type());
        Assertions.assertEquals("byrcdlbhshfwp", model.lastUpdatedBy().tenantId());
        Assertions.assertEquals("cstwity", model.lastUpdatedBy().objectId());
        Assertions.assertEquals("evxccedcp", model.lastUpdatedBy().upn());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BillingRequestProperties model = new BillingRequestProperties()
            .withAdditionalInformation(mapOf("lmnguxaw", "aoyzkoow"))
            .withReviewedBy(new BillingRequestPropertiesReviewedBy().withTenantId("dsyuuximerqfob")
                .withObjectId("znkbykutwpfhpagm")
                .withUpn("skdsnfdsdoakg"))
            .withCreatedBy(new BillingRequestPropertiesCreatedBy().withTenantId("iuiefozbhdmsm")
                .withObjectId("zqhof")
                .withUpn("maequiahxicslfa"))
            .withDecisionReason("ylhalnswhcc")
            .withJustification("ypbsfgytguslfead")
            .withRecipients(Arrays.asList(new Principal().withTenantId("ukyhejhzis").withObjectId("fpel").withUpn("p")))
            .withRequestScope("ksrpqv")
            .withStatus(BillingRequestStatus.COMPLETED)
            .withType(BillingRequestType.ROLE_ASSIGNMENT)
            .withLastUpdatedBy(new BillingRequestPropertiesLastUpdatedBy().withTenantId("byrcdlbhshfwp")
                .withObjectId("cstwity")
                .withUpn("evxccedcp"));
        model = BinaryData.fromObject(model).toObject(BillingRequestProperties.class);
        Assertions.assertEquals("aoyzkoow", model.additionalInformation().get("lmnguxaw"));
        Assertions.assertEquals("dsyuuximerqfob", model.reviewedBy().tenantId());
        Assertions.assertEquals("znkbykutwpfhpagm", model.reviewedBy().objectId());
        Assertions.assertEquals("skdsnfdsdoakg", model.reviewedBy().upn());
        Assertions.assertEquals("iuiefozbhdmsm", model.createdBy().tenantId());
        Assertions.assertEquals("zqhof", model.createdBy().objectId());
        Assertions.assertEquals("maequiahxicslfa", model.createdBy().upn());
        Assertions.assertEquals("ylhalnswhcc", model.decisionReason());
        Assertions.assertEquals("ypbsfgytguslfead", model.justification());
        Assertions.assertEquals("ukyhejhzis", model.recipients().get(0).tenantId());
        Assertions.assertEquals("fpel", model.recipients().get(0).objectId());
        Assertions.assertEquals("p", model.recipients().get(0).upn());
        Assertions.assertEquals("ksrpqv", model.requestScope());
        Assertions.assertEquals(BillingRequestStatus.COMPLETED, model.status());
        Assertions.assertEquals(BillingRequestType.ROLE_ASSIGNMENT, model.type());
        Assertions.assertEquals("byrcdlbhshfwp", model.lastUpdatedBy().tenantId());
        Assertions.assertEquals("cstwity", model.lastUpdatedBy().objectId());
        Assertions.assertEquals("evxccedcp", model.lastUpdatedBy().upn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
