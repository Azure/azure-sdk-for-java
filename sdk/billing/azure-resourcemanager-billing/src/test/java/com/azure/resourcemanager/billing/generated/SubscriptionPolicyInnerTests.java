// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.SubscriptionPolicyInner;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.SubscriptionPolicyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SubscriptionPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubscriptionPolicyInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"policies\":[{\"name\":\"maiubavlzwp\",\"value\":\"mfalkzazmgok\",\"policyType\":\"Other\",\"scope\":\"qafkmkrokzrth\"},{\"name\":\"twpqrtva\",\"value\":\"nqnixiezeagmce\",\"policyType\":\"UserControlled\",\"scope\":\"gedhfpjstlzm\"},{\"name\":\"syjdeolctae\",\"value\":\"syrled\",\"policyType\":\"SystemControlled\",\"scope\":\"tb\"},{\"name\":\"qigdx\",\"value\":\"sgeafgfosehx\",\"policyType\":\"SystemControlled\",\"scope\":\"ezppkkwaaesk\"}]},\"tags\":{\"eqtoyrpl\":\"lp\",\"llpquevhamfo\":\"xlaj\",\"mkekxpkzwaqxo\":\"gwb\"},\"id\":\"ovchiqbplvfid\",\"name\":\"sztekxby\",\"type\":\"gmsfepxyi\"}")
            .toObject(SubscriptionPolicyInner.class);
        Assertions.assertEquals("lp", model.tags().get("eqtoyrpl"));
        Assertions.assertEquals("maiubavlzwp", model.properties().policies().get(0).name());
        Assertions.assertEquals("mfalkzazmgok", model.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.OTHER, model.properties().policies().get(0).policyType());
        Assertions.assertEquals("qafkmkrokzrth", model.properties().policies().get(0).scope());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubscriptionPolicyInner model = new SubscriptionPolicyInner()
            .withTags(mapOf("eqtoyrpl", "lp", "llpquevhamfo", "xlaj", "mkekxpkzwaqxo", "gwb"))
            .withProperties(new SubscriptionPolicyProperties().withPolicies(Arrays.asList(
                new PolicySummary().withName("maiubavlzwp")
                    .withValue("mfalkzazmgok")
                    .withPolicyType(PolicyType.OTHER)
                    .withScope("qafkmkrokzrth"),
                new PolicySummary().withName("twpqrtva")
                    .withValue("nqnixiezeagmce")
                    .withPolicyType(PolicyType.USER_CONTROLLED)
                    .withScope("gedhfpjstlzm"),
                new PolicySummary().withName("syjdeolctae")
                    .withValue("syrled")
                    .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                    .withScope("tb"),
                new PolicySummary().withName("qigdx")
                    .withValue("sgeafgfosehx")
                    .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                    .withScope("ezppkkwaaesk"))));
        model = BinaryData.fromObject(model).toObject(SubscriptionPolicyInner.class);
        Assertions.assertEquals("lp", model.tags().get("eqtoyrpl"));
        Assertions.assertEquals("maiubavlzwp", model.properties().policies().get(0).name());
        Assertions.assertEquals("mfalkzazmgok", model.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.OTHER, model.properties().policies().get(0).policyType());
        Assertions.assertEquals("qafkmkrokzrth", model.properties().policies().get(0).scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
