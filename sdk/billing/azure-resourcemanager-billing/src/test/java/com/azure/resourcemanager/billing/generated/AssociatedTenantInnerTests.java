// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.AssociatedTenantInner;
import com.azure.resourcemanager.billing.models.AssociatedTenantProperties;
import com.azure.resourcemanager.billing.models.BillingManagementTenantState;
import com.azure.resourcemanager.billing.models.ProvisioningTenantState;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssociatedTenantInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssociatedTenantInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Expired\",\"displayName\":\"mmajtjaodx\",\"tenantId\":\"nbdxk\",\"billingManagementState\":\"Other\",\"provisioningManagementState\":\"Active\",\"provisioningBillingRequestId\":\"jionpimexgstxgc\"},\"tags\":{\"djwzrlov\":\"gmaajrm\"},\"id\":\"lwhijcoejctbzaq\",\"name\":\"qsycbkbfkgu\",\"type\":\"dkexxppofm\"}")
            .toObject(AssociatedTenantInner.class);
        Assertions.assertEquals("gmaajrm", model.tags().get("djwzrlov"));
        Assertions.assertEquals("mmajtjaodx", model.properties().displayName());
        Assertions.assertEquals("nbdxk", model.properties().tenantId());
        Assertions.assertEquals(BillingManagementTenantState.OTHER, model.properties().billingManagementState());
        Assertions.assertEquals(ProvisioningTenantState.ACTIVE, model.properties().provisioningManagementState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssociatedTenantInner model = new AssociatedTenantInner().withTags(mapOf("djwzrlov", "gmaajrm"))
            .withProperties(new AssociatedTenantProperties().withDisplayName("mmajtjaodx")
                .withTenantId("nbdxk")
                .withBillingManagementState(BillingManagementTenantState.OTHER)
                .withProvisioningManagementState(ProvisioningTenantState.ACTIVE));
        model = BinaryData.fromObject(model).toObject(AssociatedTenantInner.class);
        Assertions.assertEquals("gmaajrm", model.tags().get("djwzrlov"));
        Assertions.assertEquals("mmajtjaodx", model.properties().displayName());
        Assertions.assertEquals("nbdxk", model.properties().tenantId());
        Assertions.assertEquals(BillingManagementTenantState.OTHER, model.properties().billingManagementState());
        Assertions.assertEquals(ProvisioningTenantState.ACTIVE, model.properties().provisioningManagementState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
