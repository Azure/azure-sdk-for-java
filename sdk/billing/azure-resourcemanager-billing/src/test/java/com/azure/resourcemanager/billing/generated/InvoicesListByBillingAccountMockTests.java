// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Invoice;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InvoicesListByBillingAccountMockTests {
    @Test
    public void testListByBillingAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"dueDate\":\"2021-03-06T18:23Z\",\"invoiceDate\":\"2021-04-24T06:39:06Z\",\"status\":\"Paid\",\"amountDue\":{\"currency\":\"bbmpxdlvykfre\",\"value\":84.02913},\"azurePrepaymentApplied\":{\"currency\":\"qwjksghudgz\",\"value\":94.31504},\"billedAmount\":{\"currency\":\"ggsvoujkxibdaf\",\"value\":84.80425},\"creditAmount\":{\"currency\":\"yomkxfbvfbhdy\",\"value\":93.879715},\"freeAzureCreditApplied\":{\"currency\":\"pgddeimawz\",\"value\":66.26469},\"subTotal\":{\"currency\":\"um\",\"value\":96.09336},\"taxAmount\":{\"currency\":\"jcazt\",\"value\":72.1469},\"totalAmount\":{\"currency\":\"qowxwcom\",\"value\":43.389618},\"invoicePeriodStartDate\":\"2020-12-30T18:43:22Z\",\"invoicePeriodEndDate\":\"2021-05-14T17:01:32Z\",\"invoiceType\":\"AzureSupport\",\"isMonthlyInvoice\":false,\"billingProfileId\":\"k\",\"billingProfileDisplayName\":\"ve\",\"purchaseOrderNumber\":\"fdv\",\"documents\":[],\"payments\":[],\"rebillDetails\":{},\"documentType\":\"Invoice\",\"billedDocumentId\":\"gddpq\",\"creditForDocumentId\":\"ehnmnaoyankco\",\"subscriptionId\":\"swankltytmh\"},\"id\":\"roznnhdrlktgj\",\"name\":\"sggux\",\"type\":\"eml\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Invoice> response =
            manager
                .invoices()
                .listByBillingAccount(
                    "wskondcbrwimuvqe", "osovyrrleaesin", "qtljqobbpihehc", com.azure.core.util.Context.NONE);
    }
}
