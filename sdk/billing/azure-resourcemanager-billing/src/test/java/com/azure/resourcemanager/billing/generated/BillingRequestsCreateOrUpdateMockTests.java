// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingRequestInner;
import com.azure.resourcemanager.billing.models.BillingRequest;
import com.azure.resourcemanager.billing.models.BillingRequestProperties;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesCreatedBy;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesLastUpdatedBy;
import com.azure.resourcemanager.billing.models.BillingRequestPropertiesReviewedBy;
import com.azure.resourcemanager.billing.models.BillingRequestStatus;
import com.azure.resourcemanager.billing.models.BillingRequestType;
import com.azure.resourcemanager.billing.models.Principal;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BillingRequestsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"additionalInformation\":{\"rieikmwlaoklfnis\":\"rajubowuywevt\"},\"reviewedBy\":{\"tenantId\":\"ucb\",\"objectId\":\"re\",\"upn\":\"cnnstjcyy\"},\"reviewalDate\":\"2021-03-04T11:08:51Z\",\"billingAccountId\":\"rx\",\"billingAccountName\":\"cl\",\"billingAccountDisplayName\":\"wwtzqzcloy\",\"billingAccountPrimaryBillingTenantId\":\"u\",\"billingProfileId\":\"idhz\",\"billingProfileName\":\"re\",\"billingProfileDisplayName\":\"zsdtm\",\"createdBy\":{\"tenantId\":\"orj\",\"objectId\":\"bchycha\",\"upn\":\"yrfbqvumkxq\"},\"creationDate\":\"2021-05-27T12:05:16Z\",\"expirationDate\":\"2021-07-12T23:34:42Z\",\"decisionReason\":\"ma\",\"invoiceSectionId\":\"nzlpqmpftxefvu\",\"invoiceSectionName\":\"l\",\"invoiceSectionDisplayName\":\"tuxy\",\"customerId\":\"hfcaeo\",\"customerName\":\"fqd\",\"customerDisplayName\":\"jflobhahqmomf\",\"subscriptionId\":\"o\",\"subscriptionName\":\"fr\",\"subscriptionDisplayName\":\"gbmxldjmz\",\"justification\":\"bjesylslur\",\"recipients\":[{\"tenantId\":\"g\",\"objectId\":\"y\",\"upn\":\"dzuqscag\"},{\"tenantId\":\"voupr\",\"objectId\":\"tqzsslhmgwfnivr\",\"upn\":\"fduiolhgyqvpb\"},{\"tenantId\":\"poqzucfz\",\"objectId\":\"czdquurbo\",\"upn\":\"vhvzielbprnqu\"}],\"requestScope\":\"wzcqygg\",\"billingScope\":\"wsvh\",\"status\":\"Expired\",\"type\":\"UpdateBillingPolicy\",\"lastUpdatedBy\":{\"tenantId\":\"ejto\",\"objectId\":\"r\",\"upn\":\"nreh\"},\"lastUpdatedDate\":\"2021-10-16T13:11:04Z\"},\"tags\":{\"l\":\"fjh\",\"nwqsttewu\":\"tpkvegeattbzkgtz\",\"fjxflpditfno\":\"cysje\",\"yuxlvrhprrv\":\"p\"},\"id\":\"onleqflvtl\",\"name\":\"vbstphuyku\",\"type\":\"i\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingRequest response = manager.billingRequests()
            .createOrUpdate("uehvvpx", new BillingRequestInner()
                .withTags(
                    mapOf("yrletndqlmf", "le", "evnoqayrehjuqwva", "ggnbbuypwovvvsfl", "enqqzlxnqzu", "xrlzhpziha"))
                .withProperties(new BillingRequestProperties()
                    .withAdditionalInformation(mapOf("dpmtonvhgn", "ojlleu", "apmumm", "tmeplhbpj"))
                    .withReviewedBy(
                        new BillingRequestPropertiesReviewedBy().withTenantId("a").withObjectId("c").withUpn("iuaiqpm"))
                    .withCreatedBy(new BillingRequestPropertiesCreatedBy().withTenantId("lvrqo")
                        .withObjectId("wsieeailwdq")
                        .withUpn("fydeotmfxlkd"))
                    .withDecisionReason("mkuuyiuy")
                    .withJustification("duetbapf")
                    .withRecipients(
                        Arrays.asList(new Principal().withTenantId("xtrlqbpx").withObjectId("zkjp").withUpn("gzxvbczw"),
                            new Principal().withTenantId("egbthm").withObjectId("i").withUpn("buiggrunozf")))
                    .withRequestScope("aljthoivsdwsn")
                    .withStatus(BillingRequestStatus.DECLINED)
                    .withType(BillingRequestType.UPDATE_BILLING_POLICY)
                    .withLastUpdatedBy(new BillingRequestPropertiesLastUpdatedBy().withTenantId("hwahfbw")
                        .withObjectId("bnnxem")
                        .withUpn("nuqqkotauratnicp"))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fjh", response.tags().get("l"));
        Assertions.assertEquals("rajubowuywevt", response.properties().additionalInformation().get("rieikmwlaoklfnis"));
        Assertions.assertEquals("ucb", response.properties().reviewedBy().tenantId());
        Assertions.assertEquals("re", response.properties().reviewedBy().objectId());
        Assertions.assertEquals("cnnstjcyy", response.properties().reviewedBy().upn());
        Assertions.assertEquals("orj", response.properties().createdBy().tenantId());
        Assertions.assertEquals("bchycha", response.properties().createdBy().objectId());
        Assertions.assertEquals("yrfbqvumkxq", response.properties().createdBy().upn());
        Assertions.assertEquals("ma", response.properties().decisionReason());
        Assertions.assertEquals("bjesylslur", response.properties().justification());
        Assertions.assertEquals("g", response.properties().recipients().get(0).tenantId());
        Assertions.assertEquals("y", response.properties().recipients().get(0).objectId());
        Assertions.assertEquals("dzuqscag", response.properties().recipients().get(0).upn());
        Assertions.assertEquals("wzcqygg", response.properties().requestScope());
        Assertions.assertEquals(BillingRequestStatus.EXPIRED, response.properties().status());
        Assertions.assertEquals(BillingRequestType.UPDATE_BILLING_POLICY, response.properties().type());
        Assertions.assertEquals("ejto", response.properties().lastUpdatedBy().tenantId());
        Assertions.assertEquals("r", response.properties().lastUpdatedBy().objectId());
        Assertions.assertEquals("nreh", response.properties().lastUpdatedBy().upn());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
