// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.billing.fluent.models.InvoiceSectionInner;
import com.azure.resourcemanager.billing.models.InvoiceSectionsOnExpand;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InvoiceSectionsOnExpandTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InvoiceSectionsOnExpand model =
            BinaryData
                .fromString(
                    "{\"hasMoreResults\":false,\"value\":[{\"properties\":{\"displayName\":\"uqktap\",\"labels\":{\"tumkdosvqwhbm\":\"gcue\"},\"state\":\"Restricted\",\"systemId\":\"jfddgmbmbe\",\"tags\":{\"gbquxigj\":\"bhtqqrolfpfpsa\",\"lnerkujysvleju\":\"jgzjaoyfhrtx\",\"kcprbnw\":\"fqawrlyxw\",\"ysszdnrujqguh\":\"xgjvtbv\"},\"targetCloud\":\"USNat\"},\"id\":\"uqfprwzw\",\"name\":\"nguitnwuizgazxu\",\"type\":\"izuckyfihrfidfvz\"},{\"properties\":{\"displayName\":\"uht\",\"labels\":{\"opvkmijcm\":\"isdkfthwxmnteiw\",\"uf\":\"xdcu\"},\"state\":\"Restricted\",\"systemId\":\"mzidnsezcxtb\",\"tags\":{\"newmdwzjeiachbo\":\"fycc\",\"eeh\":\"sflnrosfqp\"},\"targetCloud\":\"USSec\"},\"id\":\"ypyqrimzinp\",\"name\":\"swjdkirso\",\"type\":\"dqxhcrmnohjtckwh\"},{\"properties\":{\"displayName\":\"ifiyipjxsqwpgrj\",\"labels\":{\"qabnmoc\":\"orcjxvsnby\",\"toqcjmklja\":\"cyshurzafbljjgp\",\"yulpkudjkr\":\"bqidtqaj\",\"e\":\"khbzhfepgzg\"},\"state\":\"Active\",\"systemId\":\"c\",\"tags\":{\"bcsglumma\":\"paierh\"},\"targetCloud\":\"USGov\"},\"id\":\"aodxo\",\"name\":\"nbdxk\",\"type\":\"pxokajionp\"},{\"properties\":{\"displayName\":\"xg\",\"labels\":{\"gmaajrm\":\"gcpo\"},\"state\":\"Active\",\"systemId\":\"zrlovmclwhijcoej\",\"tags\":{\"ukdkexxppofmxa\":\"zaqsqsycbkbfk\",\"jpgd\":\"c\",\"j\":\"toc\",\"hd\":\"hvpmoue\"},\"targetCloud\":\"USSec\"},\"id\":\"bqe\",\"name\":\"jnxqbzvddntwn\",\"type\":\"eic\"}]}")
                .toObject(InvoiceSectionsOnExpand.class);
        Assertions.assertEquals("uqktap", model.value().get(0).displayName());
        Assertions.assertEquals("gcue", model.value().get(0).labels().get("tumkdosvqwhbm"));
        Assertions.assertEquals("bhtqqrolfpfpsa", model.value().get(0).tags().get("gbquxigj"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InvoiceSectionsOnExpand model =
            new InvoiceSectionsOnExpand()
                .withValue(
                    Arrays
                        .asList(
                            new InvoiceSectionInner()
                                .withDisplayName("uqktap")
                                .withLabels(mapOf("tumkdosvqwhbm", "gcue"))
                                .withTags(
                                    mapOf(
                                        "gbquxigj",
                                        "bhtqqrolfpfpsa",
                                        "lnerkujysvleju",
                                        "jgzjaoyfhrtx",
                                        "kcprbnw",
                                        "fqawrlyxw",
                                        "ysszdnrujqguh",
                                        "xgjvtbv")),
                            new InvoiceSectionInner()
                                .withDisplayName("uht")
                                .withLabels(mapOf("opvkmijcm", "isdkfthwxmnteiw", "uf", "xdcu"))
                                .withTags(mapOf("newmdwzjeiachbo", "fycc", "eeh", "sflnrosfqp")),
                            new InvoiceSectionInner()
                                .withDisplayName("ifiyipjxsqwpgrj")
                                .withLabels(
                                    mapOf(
                                        "qabnmoc",
                                        "orcjxvsnby",
                                        "toqcjmklja",
                                        "cyshurzafbljjgp",
                                        "yulpkudjkr",
                                        "bqidtqaj",
                                        "e",
                                        "khbzhfepgzg"))
                                .withTags(mapOf("bcsglumma", "paierh")),
                            new InvoiceSectionInner()
                                .withDisplayName("xg")
                                .withLabels(mapOf("gmaajrm", "gcpo"))
                                .withTags(
                                    mapOf(
                                        "ukdkexxppofmxa", "zaqsqsycbkbfk", "jpgd", "c", "j", "toc", "hd", "hvpmoue"))));
        model = BinaryData.fromObject(model).toObject(InvoiceSectionsOnExpand.class);
        Assertions.assertEquals("uqktap", model.value().get(0).displayName());
        Assertions.assertEquals("gcue", model.value().get(0).labels().get("tumkdosvqwhbm"));
        Assertions.assertEquals("bhtqqrolfpfpsa", model.value().get(0).tags().get("gbquxigj"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
