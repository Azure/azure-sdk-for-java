// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingAccountPolicyInner;
import com.azure.resourcemanager.billing.models.BillingAccountPolicy;
import com.azure.resourcemanager.billing.models.BillingAccountPolicyProperties;
import com.azure.resourcemanager.billing.models.BillingAccountPolicyPropertiesEnterpriseAgreementPolicies;
import com.azure.resourcemanager.billing.models.EnrollmentAccountOwnerViewCharges;
import com.azure.resourcemanager.billing.models.EnrollmentAuthLevelState;
import com.azure.resourcemanager.billing.models.EnrollmentDepartmentAdminViewCharges;
import com.azure.resourcemanager.billing.models.MarketplacePurchasesPolicy;
import com.azure.resourcemanager.billing.models.PolicySummary;
import com.azure.resourcemanager.billing.models.PolicyType;
import com.azure.resourcemanager.billing.models.ReservationPurchasesPolicy;
import com.azure.resourcemanager.billing.models.SavingsPlanPurchasesPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoliciesCreateOrUpdateByBillingAccountMockTests {
    @Test
    public void testCreateOrUpdateByBillingAccount() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"enterpriseAgreementPolicies\":{\"authenticationType\":\"Other\",\"accountOwnerViewCharges\":\"Disabled\",\"departmentAdminViewCharges\":\"Other\"},\"marketplacePurchases\":\"AllAllowed\",\"reservationPurchases\":\"Allowed\",\"savingsPlanPurchases\":\"Other\",\"policies\":[{\"name\":\"rfmcjjxx\",\"value\":\"dwmjurtnolzio\",\"policyType\":\"UserControlled\",\"scope\":\"ukeplfwykr\"},{\"name\":\"jenpsff\",\"value\":\"zefajgb\",\"policyType\":\"Other\",\"scope\":\"p\"}]},\"tags\":{\"xfnzcev\":\"h\",\"yd\":\"bie\",\"rvdszrizpejhy\":\"jdkzfkneckv\",\"itykzyirjui\":\"zzxqtcgswmhzci\"},\"id\":\"nfu\",\"name\":\"htzgxsyiwmopkudh\",\"type\":\"ztbwzjbqzq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingAccountPolicy response = manager.policies()
            .createOrUpdateByBillingAccount("vspknxraidjeddn",
                new BillingAccountPolicyInner().withTags(mapOf("bzmyov", "hvp", "mfsh", "xstxsfztlvs"))
                    .withProperties(new BillingAccountPolicyProperties()
                        .withEnterpriseAgreementPolicies(new BillingAccountPolicyPropertiesEnterpriseAgreementPolicies()
                            .withAuthenticationType(EnrollmentAuthLevelState.OTHER)
                            .withAccountOwnerViewCharges(EnrollmentAccountOwnerViewCharges.DISABLED)
                            .withDepartmentAdminViewCharges(EnrollmentDepartmentAdminViewCharges.OTHER))
                        .withMarketplacePurchases(MarketplacePurchasesPolicy.NOT_ALLOWED)
                        .withReservationPurchases(ReservationPurchasesPolicy.DISABLED)
                        .withSavingsPlanPurchases(SavingsPlanPurchasesPolicy.DISABLED)
                        .withPolicies(Arrays.asList(
                            new PolicySummary().withName("uckojqoxpwdh")
                                .withValue("dosqvdoy")
                                .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                                .withScope("xushml"),
                            new PolicySummary().withName("h")
                                .withValue("ptvk")
                                .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                                .withScope("nt"),
                            new PolicySummary().withName("zee")
                                .withValue("pggsyeydctjne")
                                .withPolicyType(PolicyType.SYSTEM_CONTROLLED)
                                .withScope("tlzbwbyvjisp")))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("h", response.tags().get("xfnzcev"));
        Assertions.assertEquals(EnrollmentAuthLevelState.OTHER,
            response.properties().enterpriseAgreementPolicies().authenticationType());
        Assertions.assertEquals(EnrollmentAccountOwnerViewCharges.DISABLED,
            response.properties().enterpriseAgreementPolicies().accountOwnerViewCharges());
        Assertions.assertEquals(EnrollmentDepartmentAdminViewCharges.OTHER,
            response.properties().enterpriseAgreementPolicies().departmentAdminViewCharges());
        Assertions.assertEquals(MarketplacePurchasesPolicy.ALL_ALLOWED, response.properties().marketplacePurchases());
        Assertions.assertEquals(ReservationPurchasesPolicy.ALLOWED, response.properties().reservationPurchases());
        Assertions.assertEquals(SavingsPlanPurchasesPolicy.OTHER, response.properties().savingsPlanPurchases());
        Assertions.assertEquals("rfmcjjxx", response.properties().policies().get(0).name());
        Assertions.assertEquals("dwmjurtnolzio", response.properties().policies().get(0).value());
        Assertions.assertEquals(PolicyType.USER_CONTROLLED, response.properties().policies().get(0).policyType());
        Assertions.assertEquals("ukeplfwykr", response.properties().policies().get(0).scope());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
