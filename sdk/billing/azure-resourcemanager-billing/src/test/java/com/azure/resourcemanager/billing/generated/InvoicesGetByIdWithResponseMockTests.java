// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.Invoice;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InvoicesGetByIdWithResponseMockTests {
    @Test
    public void testGetByIdWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"dueDate\":\"2021-07-26T15:18:54Z\",\"invoiceDate\":\"2021-01-08T10:56:15Z\",\"status\":\"OverDue\",\"amountDue\":{\"currency\":\"mvxad\",\"value\":87.58046},\"azurePrepaymentApplied\":{\"currency\":\"gna\",\"value\":1.360035},\"billedAmount\":{\"currency\":\"fbktyjmfczlf\",\"value\":83.57908},\"creditAmount\":{\"currency\":\"rbzg\",\"value\":53.014297},\"freeAzureCreditApplied\":{\"currency\":\"mj\",\"value\":15.6469345},\"subTotal\":{\"currency\":\"nyq\",\"value\":57.199444},\"taxAmount\":{\"currency\":\"srv\",\"value\":90.34967},\"totalAmount\":{\"currency\":\"jceagb\",\"value\":12.424713},\"invoicePeriodStartDate\":\"2021-08-18T19:10:01Z\",\"invoicePeriodEndDate\":\"2021-06-15T22:04:52Z\",\"invoiceType\":\"AzureMarketplace\",\"isMonthlyInvoice\":true,\"billingProfileId\":\"hxgonoyjf\",\"billingProfileDisplayName\":\"puby\",\"purchaseOrderNumber\":\"clkfkee\",\"documents\":[{\"kind\":\"VoidNote\",\"url\":\"m\",\"source\":\"ENF\"}],\"payments\":[{\"paymentType\":\"l\",\"amount\":{\"currency\":\"qavn\",\"value\":82.538345},\"date\":\"2021-07-06T04:26:03Z\",\"paymentMethodFamily\":\"CheckWire\",\"paymentMethodType\":\"nyjpylxdbfv\"},{\"paymentType\":\"mvmsxbae\",\"amount\":{\"currency\":\"cnkottlwuhva\",\"value\":65.12634},\"date\":\"2021-03-31T21:17:56Z\",\"paymentMethodFamily\":\"Credits\",\"paymentMethodType\":\"jjzakzwjiqullqx\"}],\"rebillDetails\":{\"r\":{\"creditNoteDocumentId\":\"rscmqerndbrnye\",\"invoiceDocumentId\":\"ltfnnxrkad\",\"rebillDetails\":{\"n\":{},\"fmu\":{},\"iiripfohykfkxbbc\":{}}},\"parybjufpt\":{\"creditNoteDocumentId\":\"iutgnjizbeewoiy\",\"invoiceDocumentId\":\"vzbjuyrsrzi\",\"rebillDetails\":{\"ixgbdsuifrevk\":{},\"apezkiswqjmdghs\":{}}},\"rr\":{\"creditNoteDocumentId\":\"czjnc\",\"invoiceDocumentId\":\"iyqvldaswv\",\"rebillDetails\":{\"sqqzlgcndhz\":{}}},\"ezxlhdjzqdca\":{\"creditNoteDocumentId\":\"fsrhkhgsnxu\",\"invoiceDocumentId\":\"kpphefsbzx\",\"rebillDetails\":{\"xomeikjclwzacn\":{},\"wpfsuqtaaz\":{},\"qbxyxoyfpuqqi\":{}}}},\"documentType\":\"CreditNote\",\"billedDocumentId\":\"sozjiihj\",\"creditForDocumentId\":\"ybmrzoepnxwd\",\"subscriptionId\":\"njkgvfnmx\"},\"id\":\"ursqf\",\"name\":\"ibtyibuyvpirfqjp\",\"type\":\"qnoowsbedenrex\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Invoice response =
            manager.invoices().getByIdWithResponse("vjslczwcii", com.azure.core.util.Context.NONE).getValue();
    }
}
