// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.Product;
import com.azure.resourcemanager.billing.models.ProductPatch;
import com.azure.resourcemanager.billing.models.ProductProperties;
import com.azure.resourcemanager.billing.models.ProductPropertiesLastCharge;
import com.azure.resourcemanager.billing.models.ProductPropertiesReseller;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProductsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"autoRenew\":\"Off\",\"availabilityId\":\"uuwd\",\"billingFrequency\":\"qahlby\",\"billingProfileId\":\"hb\",\"billingProfileDisplayName\":\"tlmacbwmvp\",\"customerId\":\"jyzicel\",\"customerDisplayName\":\"azcgwnibnduqgji\",\"displayName\":\"xxiao\",\"endDate\":\"wu\",\"invoiceSectionId\":\"m\",\"invoiceSectionDisplayName\":\"spugnv\",\"lastCharge\":{\"currency\":\"wadudokoxqbozezx\",\"value\":36.251335},\"lastChargeDate\":\"rgukqobo\",\"productType\":\"ll\",\"productTypeId\":\"lqufkrnrbnjkcol\",\"skuId\":\"qlyputawdmd\",\"skuDescription\":\"ufzqvv\",\"purchaseDate\":\"jzofyldxkzhvfo\",\"quantity\":1830501166525434226,\"status\":\"Expiring\",\"tenantId\":\"buiywky\",\"reseller\":{\"resellerId\":\"acbeauvldbd\",\"description\":\"guifqjtoxzxbljpz\"}},\"tags\":{\"aii\":\"gdarfumit\",\"wbgmjrvrsq\":\"mokfdybv\",\"cttvxkxgffpvv\":\"jcozrwry\"},\"id\":\"vvnxoqaaq\",\"name\":\"b\",\"type\":\"wqwwte\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Product response = manager.products()
            .updateWithResponse("gqiismaggkt", "oykrbk",
                new ProductPatch().withTags(mapOf("oorw", "mdgffvxni", "pcxljzzcdrgtuaoo", "dtjpsjw"))
                    .withProperties(new ProductProperties().withAutoRenew(AutoRenew.OFF)
                        .withLastCharge(new ProductPropertiesLastCharge())
                        .withReseller(new ProductPropertiesReseller())),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("gdarfumit", response.tags().get("aii"));
        Assertions.assertEquals(AutoRenew.OFF, response.properties().autoRenew());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
