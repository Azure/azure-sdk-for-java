// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.ProductInner;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.BillingFrequency;
import com.azure.resourcemanager.billing.models.Product;
import com.azure.resourcemanager.billing.models.ProductStatusType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ProductsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"autoRenew\":\"On\",\"displayName\":\"nyuffat\",\"purchaseDate\":\"2021-10-10T05:31:28Z\",\"productTypeId\":\"ipwcxbyu\",\"productType\":\"iqdxyurnpnuh\",\"status\":\"Expired\",\"endDate\":\"2021-09-18T21:35:06Z\",\"billingFrequency\":\"OneTime\",\"lastCharge\":{\"currency\":\"i\",\"value\":7.8384876},\"lastChargeDate\":\"2021-03-10T09:27:35Z\",\"quantity\":68.321144,\"skuId\":\"vxva\",\"skuDescription\":\"crkdlbn\",\"tenantId\":\"xvhcs\",\"availabilityId\":\"zlwxaeaovur\",\"invoiceSectionId\":\"dndsbdweade\",\"invoiceSectionDisplayName\":\"mwntopagttmvmma\",\"billingProfileId\":\"aqylkjztji\",\"billingProfileDisplayName\":\"zjcg\",\"customerId\":\"itpfinzcpdl\",\"customerDisplayName\":\"rlgjm\",\"reseller\":{\"resellerId\":\"rvcqguefzhomphe\",\"description\":\"urelyujlfyoump\"}},\"id\":\"kyeclcdigpta\",\"name\":\"brzmqxucycijoclx\",\"type\":\"utgjcyz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Product response =
            manager
                .products()
                .updateWithResponse(
                    "wtl",
                    "vfwhreagkhyxv",
                    new ProductInner()
                        .withAutoRenew(AutoRenew.ON)
                        .withStatus(ProductStatusType.INACTIVE)
                        .withBillingFrequency(BillingFrequency.ONE_TIME),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(AutoRenew.ON, response.autoRenew());
        Assertions.assertEquals(ProductStatusType.EXPIRED, response.status());
        Assertions.assertEquals(BillingFrequency.ONE_TIME, response.billingFrequency());
    }
}
