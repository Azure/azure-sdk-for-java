// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingSubscriptionInner;
import com.azure.resourcemanager.billing.models.BillingSubscription;
import com.azure.resourcemanager.billing.models.BillingSubscriptionStatusType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BillingSubscriptionsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"displayName\":\"nykzcugswvxwlm\",\"subscriptionId\":\"be4a2676-00c5-4065-a604-86209c2a264f\",\"subscriptionBillingStatus\":\"Abandoned\",\"lastMonthCharges\":{\"currency\":\"xnjmxm\",\"value\":51.97202},\"monthToDateCharges\":{\"currency\":\"tcvcl\",\"value\":25.977707},\"billingProfileId\":\"dkvgfabuiyjibuzp\",\"billingProfileDisplayName\":\"ugneikn\",\"costCenter\":\"oxgjiuqhibt\",\"customerId\":\"ipq\",\"customerDisplayName\":\"edmurrxxge\",\"invoiceSectionId\":\"ktvqylkmqpzoy\",\"invoiceSectionDisplayName\":\"fbcgwgcloxoebqin\",\"reseller\":{\"resellerId\":\"nwjfu\",\"description\":\"lafcbahh\"},\"skuId\":\"pofoi\",\"skuDescription\":\"w\",\"suspensionReasons\":[\"lkmkkholvdndvi\",\"uogphuartvtiuky\"]},\"id\":\"fchnmnah\",\"name\":\"nxhkxjqi\",\"type\":\"wrweoo\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingSubscription response =
            manager
                .billingSubscriptions()
                .updateWithResponse(
                    "hpzvuqdflvoniyp",
                    new BillingSubscriptionInner()
                        .withSubscriptionBillingStatus(BillingSubscriptionStatusType.INACTIVE)
                        .withCostCenter("nq")
                        .withSkuId("lacjfrnxo"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(BillingSubscriptionStatusType.ABANDONED, response.subscriptionBillingStatus());
        Assertions.assertEquals("oxgjiuqhibt", response.costCenter());
        Assertions.assertEquals("pofoi", response.skuId());
    }
}
