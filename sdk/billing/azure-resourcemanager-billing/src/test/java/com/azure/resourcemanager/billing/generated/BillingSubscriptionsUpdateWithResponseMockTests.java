// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingSubscriptionInner;
import com.azure.resourcemanager.billing.models.BillingSubscription;
import com.azure.resourcemanager.billing.models.BillingSubscriptionStatusType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BillingSubscriptionsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"displayName\":\"nadzyq\",\"subscriptionId\":\"9c495d9e-c771-42c4-93de-3b9400399a06\",\"subscriptionBillingStatus\":\"Abandoned\",\"lastMonthCharges\":{\"currency\":\"pinbmhwbjijkgqxn\",\"value\":29.5635},\"monthToDateCharges\":{\"currency\":\"znj\",\"value\":81.3425},\"billingProfileId\":\"aan\",\"billingProfileDisplayName\":\"giycwkdtaawxwfek\",\"costCenter\":\"mrrqmbzmqkratb\",\"customerId\":\"wbjsidbirkf\",\"customerDisplayName\":\"sokdgoge\",\"invoiceSectionId\":\"jymrhbg\",\"invoiceSectionDisplayName\":\"ozkyewnfnzh\",\"reseller\":{\"resellerId\":\"o\",\"description\":\"ffjkutycyarnroo\"},\"skuId\":\"uabzoghkt\",\"skuDescription\":\"yczhco\",\"suspensionReasons\":[\"nhzqrottjzcfy\"]},\"id\":\"zptwrlohap\",\"name\":\"infsz\",\"type\":\"yglqdhmrjzral\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        BillingManager manager =
            BillingManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingSubscription response =
            manager
                .billingSubscriptions()
                .updateWithResponse(
                    "wyvf",
                    new BillingSubscriptionInner()
                        .withSubscriptionBillingStatus(BillingSubscriptionStatusType.INACTIVE)
                        .withCostCenter("oyzbamwineofvf")
                        .withSkuId("rpq"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(BillingSubscriptionStatusType.ABANDONED, response.subscriptionBillingStatus());
        Assertions.assertEquals("mrrqmbzmqkratb", response.costCenter());
        Assertions.assertEquals("uabzoghkt", response.skuId());
    }
}
