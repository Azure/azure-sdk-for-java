// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingRoleAssignmentInner;
import com.azure.resourcemanager.billing.models.BillingRoleAssignment;
import com.azure.resourcemanager.billing.models.BillingRoleAssignmentProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BillingRoleAssignmentsCreateOrUpdateByEnrollmentAccountMockTests {
    @Test
    public void testCreateOrUpdateByEnrollmentAccount() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"createdOn\":\"2021-07-29T13:22:49Z\",\"createdByPrincipalTenantId\":\"i\",\"createdByPrincipalId\":\"jsb\",\"createdByPrincipalPuid\":\"mseesacuicnvqiqs\",\"createdByUserEmailAddress\":\"vmrfaptndrmmn\",\"modifiedOn\":\"2021-07-05T09:48:43Z\",\"modifiedByPrincipalPuid\":\"mxrqkekcdaviieb\",\"modifiedByUserEmailAddress\":\"rfzav\",\"modifiedByPrincipalId\":\"mc\",\"modifiedByPrincipalTenantId\":\"siuc\",\"principalPuid\":\"lbrzgk\",\"principalId\":\"rwpqbstweobptsc\",\"principalTenantId\":\"ykk\",\"roleDefinitionId\":\"elayynoyjyfls\",\"scope\":\"bnlyoifgdfzj\",\"userAuthenticationType\":\"hykcvoevcwf\",\"userEmailAddress\":\"tkxxlwwo\",\"principalTenantName\":\"gbsdz\",\"principalDisplayName\":\"cvypjhubd\",\"principalType\":\"Unknown\",\"billingRequestId\":\"xehujcqgzwv\",\"billingAccountId\":\"iuaoibmjklqrljd\",\"billingAccountDisplayName\":\"kylaxrjiqoqovqhg\",\"billingProfileId\":\"gxuwudgcyqru\",\"billingProfileDisplayName\":\"mryddnqivahfcq\",\"invoiceSectionId\":\"jzebp\",\"invoiceSectionDisplayName\":\"ciyoypoedk\",\"customerId\":\"w\",\"customerDisplayName\":\"bpybqeigxuyxsxte\"},\"tags\":{\"hcgnaqsrmrfqder\":\"hznfff\",\"wyqznbbyzp\":\"rgsdcobpmgq\",\"oiq\":\"szfutgpbygbnbc\",\"lwzhxzuxerx\":\"tzpvqew\"},\"id\":\"wl\",\"name\":\"kqsqvvdkfp\",\"type\":\"jdajdqxymxxyfrd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingRoleAssignment response = manager.billingRoleAssignments()
            .createOrUpdateByEnrollmentAccount("abebckc", "srsixwn", "pjcxbjgfm",
                new BillingRoleAssignmentInner().withTags(mapOf("veugpx", "f", "pup", "ee"))
                    .withProperties(new BillingRoleAssignmentProperties().withPrincipalPuid("iapypimr")
                        .withPrincipalId("rqw")
                        .withPrincipalTenantId("zesstuiny")
                        .withRoleDefinitionId("kmlf")
                        .withScope("jzcxxvzjoy")
                        .withUserAuthenticationType("gahxuerrdaktnyt")
                        .withUserEmailAddress("cerfcvcpvf")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hznfff", response.tags().get("hcgnaqsrmrfqder"));
        Assertions.assertEquals("lbrzgk", response.properties().principalPuid());
        Assertions.assertEquals("rwpqbstweobptsc", response.properties().principalId());
        Assertions.assertEquals("ykk", response.properties().principalTenantId());
        Assertions.assertEquals("elayynoyjyfls", response.properties().roleDefinitionId());
        Assertions.assertEquals("bnlyoifgdfzj", response.properties().scope());
        Assertions.assertEquals("hykcvoevcwf", response.properties().userAuthenticationType());
        Assertions.assertEquals("tkxxlwwo", response.properties().userEmailAddress());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
