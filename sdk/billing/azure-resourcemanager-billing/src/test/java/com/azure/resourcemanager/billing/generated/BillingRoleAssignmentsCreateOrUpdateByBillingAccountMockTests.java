// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.billing.BillingManager;
import com.azure.resourcemanager.billing.fluent.models.BillingRoleAssignmentInner;
import com.azure.resourcemanager.billing.models.BillingRoleAssignment;
import com.azure.resourcemanager.billing.models.BillingRoleAssignmentProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BillingRoleAssignmentsCreateOrUpdateByBillingAccountMockTests {
    @Test
    public void testCreateOrUpdateByBillingAccount() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"createdOn\":\"2021-03-15T12:37:31Z\",\"createdByPrincipalTenantId\":\"ehmdqvaolidxd\",\"createdByPrincipalId\":\"fvkjcimbrsvxph\",\"createdByPrincipalPuid\":\"nhptjlrkdcy\",\"createdByUserEmailAddress\":\"i\",\"modifiedOn\":\"2021-02-04T05:42:16Z\",\"modifiedByPrincipalPuid\":\"tdtftmizuzjd\",\"modifiedByUserEmailAddress\":\"gyzcslazprkq\",\"modifiedByPrincipalId\":\"imxpggktteagb\",\"modifiedByPrincipalTenantId\":\"cnqpjuytvudeylp\",\"principalPuid\":\"bkisb\",\"principalId\":\"fmxgl\",\"principalTenantId\":\"dj\",\"roleDefinitionId\":\"au\",\"scope\":\"shzn\",\"userAuthenticationType\":\"ttuhaaax\",\"userEmailAddress\":\"c\",\"principalTenantName\":\"mdkqtxfrm\",\"principalDisplayName\":\"cxstowageh\",\"principalType\":\"Unknown\",\"billingRequestId\":\"wesrtjaqgb\",\"billingAccountId\":\"kncypmte\",\"billingAccountDisplayName\":\"psaneyvaerpi\",\"billingProfileId\":\"nhrfbrj\",\"billingProfileDisplayName\":\"jwqdmr\",\"invoiceSectionId\":\"nilppqcai\",\"invoiceSectionDisplayName\":\"zwfwlrfdjwlzseod\",\"customerId\":\"fdrslzymqx\",\"customerDisplayName\":\"rwycu\"},\"tags\":{\"zebjrahg\":\"jwgetfigwneqjxz\",\"gxzss\":\"stubw\",\"hfmdoiiyobq\":\"xliqmsck\"},\"id\":\"ja\",\"name\":\"wrsofxcacrm\",\"type\":\"jf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        BillingManager manager = BillingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        BillingRoleAssignment response = manager.billingRoleAssignments()
            .createOrUpdateByBillingAccount("orxsqtzngxbsale", "guxcmmhip", new BillingRoleAssignmentInner()
                .withTags(
                    mapOf("sbtwskkfkuyikmx", "ffhvqii", "bqtrefeclflxc", "hqsxjbjkewrig", "cvdefxonztpcjpt", "ffzw"))
                .withProperties(new BillingRoleAssignmentProperties().withPrincipalPuid("dmohheuyu")
                    .withPrincipalId("xmyevyigdeipnfi")
                    .withPrincipalTenantId("jwlii")
                    .withRoleDefinitionId("cndjzwhajo")
                    .withScope("pqokhdyncra")
                    .withUserAuthenticationType("sewbempfapmqnm")
                    .withUserEmailAddress("yksygih")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jwgetfigwneqjxz", response.tags().get("zebjrahg"));
        Assertions.assertEquals("bkisb", response.properties().principalPuid());
        Assertions.assertEquals("fmxgl", response.properties().principalId());
        Assertions.assertEquals("dj", response.properties().principalTenantId());
        Assertions.assertEquals("au", response.properties().roleDefinitionId());
        Assertions.assertEquals("shzn", response.properties().scope());
        Assertions.assertEquals("ttuhaaax", response.properties().userAuthenticationType());
        Assertions.assertEquals("c", response.properties().userEmailAddress());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
