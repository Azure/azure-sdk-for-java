// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.fluent.models.ReservationInner;
import java.io.IOException;
import java.util.List;

/**
 * The list of reservations and summary of roll out count of reservations in each state.
 */
@Fluent
public final class ReservationsListResult implements JsonSerializable<ReservationsListResult> {
    /*
     * The link (url) to the next page of results.
     */
    private String nextLink;

    /*
     * The roll out count summary of the reservations
     */
    private ReservationSummary summary;

    /*
     * The list of reservations.
     */
    private List<ReservationInner> value;

    /**
     * Creates an instance of ReservationsListResult class.
     */
    public ReservationsListResult() {
    }

    /**
     * Get the nextLink property: The link (url) to the next page of results.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Get the summary property: The roll out count summary of the reservations.
     * 
     * @return the summary value.
     */
    public ReservationSummary summary() {
        return this.summary;
    }

    /**
     * Set the summary property: The roll out count summary of the reservations.
     * 
     * @param summary the summary value to set.
     * @return the ReservationsListResult object itself.
     */
    public ReservationsListResult withSummary(ReservationSummary summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get the value property: The list of reservations.
     * 
     * @return the value value.
     */
    public List<ReservationInner> value() {
        return this.value;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (summary() != null) {
            summary().validate();
        }
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("summary", this.summary);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationsListResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationsListResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationsListResult.
     */
    public static ReservationsListResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationsListResult deserializedReservationsListResult = new ReservationsListResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nextLink".equals(fieldName)) {
                    deserializedReservationsListResult.nextLink = reader.getString();
                } else if ("summary".equals(fieldName)) {
                    deserializedReservationsListResult.summary = ReservationSummary.fromJson(reader);
                } else if ("value".equals(fieldName)) {
                    List<ReservationInner> value = reader.readArray(reader1 -> ReservationInner.fromJson(reader1));
                    deserializedReservationsListResult.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationsListResult;
        });
    }
}
