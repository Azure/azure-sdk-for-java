// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A product.
 */
@Fluent
public final class ProductProperties implements JsonSerializable<ProductProperties> {
    /*
     * Indicates whether auto renewal is turned on or off for a product.
     */
    private AutoRenew autoRenew;

    /*
     * The availability of the product.
     */
    private String availabilityId;

    /*
     * The frequency at which the product will be billed.
     */
    private String billingFrequency;

    /*
     * The ID of the billing profile to which the product is billed.
     */
    private String billingProfileId;

    /*
     * The name of the billing profile to which the product is billed.
     */
    private String billingProfileDisplayName;

    /*
     * The ID of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner
     * Agreement billing account.
     */
    private String customerId;

    /*
     * The name of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner
     * Agreement billing account.
     */
    private String customerDisplayName;

    /*
     * The display name of the product.
     */
    private String displayName;

    /*
     * The date when the product will be renewed or canceled.
     */
    private String endDate;

    /*
     * The ID of the invoice section to which the product is billed.
     */
    private String invoiceSectionId;

    /*
     * The name of the invoice section to which the product is billed.
     */
    private String invoiceSectionDisplayName;

    /*
     * The last month charges.
     */
    private ProductPropertiesLastCharge lastCharge;

    /*
     * The date of the last charge.
     */
    private String lastChargeDate;

    /*
     * The description of the type of product.
     */
    private String productType;

    /*
     * The ID of the type of product.
     */
    private String productTypeId;

    /*
     * The sku ID of the product.
     */
    private String skuId;

    /*
     * The sku description of the product.
     */
    private String skuDescription;

    /*
     * The date when the product was purchased.
     */
    private String purchaseDate;

    /*
     * The quantity purchased for the product.
     */
    private Long quantity;

    /*
     * The status of the product.
     */
    private ProductStatus status;

    /*
     * The id of the tenant in which the product is used.
     */
    private String tenantId;

    /*
     * Reseller for this product. The fields is not available for Microsoft Partner Agreement products.
     */
    private ProductPropertiesReseller reseller;

    /**
     * Creates an instance of ProductProperties class.
     */
    public ProductProperties() {
    }

    /**
     * Get the autoRenew property: Indicates whether auto renewal is turned on or off for a product.
     * 
     * @return the autoRenew value.
     */
    public AutoRenew autoRenew() {
        return this.autoRenew;
    }

    /**
     * Set the autoRenew property: Indicates whether auto renewal is turned on or off for a product.
     * 
     * @param autoRenew the autoRenew value to set.
     * @return the ProductProperties object itself.
     */
    public ProductProperties withAutoRenew(AutoRenew autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }

    /**
     * Get the availabilityId property: The availability of the product.
     * 
     * @return the availabilityId value.
     */
    public String availabilityId() {
        return this.availabilityId;
    }

    /**
     * Get the billingFrequency property: The frequency at which the product will be billed.
     * 
     * @return the billingFrequency value.
     */
    public String billingFrequency() {
        return this.billingFrequency;
    }

    /**
     * Get the billingProfileId property: The ID of the billing profile to which the product is billed.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the billingProfileDisplayName property: The name of the billing profile to which the product is billed.
     * 
     * @return the billingProfileDisplayName value.
     */
    public String billingProfileDisplayName() {
        return this.billingProfileDisplayName;
    }

    /**
     * Get the customerId property: The ID of the customer for whom the product was purchased. The field is applicable
     * only for Microsoft Partner Agreement billing account.
     * 
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get the customerDisplayName property: The name of the customer for whom the product was purchased. The field is
     * applicable only for Microsoft Partner Agreement billing account.
     * 
     * @return the customerDisplayName value.
     */
    public String customerDisplayName() {
        return this.customerDisplayName;
    }

    /**
     * Get the displayName property: The display name of the product.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the endDate property: The date when the product will be renewed or canceled.
     * 
     * @return the endDate value.
     */
    public String endDate() {
        return this.endDate;
    }

    /**
     * Get the invoiceSectionId property: The ID of the invoice section to which the product is billed.
     * 
     * @return the invoiceSectionId value.
     */
    public String invoiceSectionId() {
        return this.invoiceSectionId;
    }

    /**
     * Get the invoiceSectionDisplayName property: The name of the invoice section to which the product is billed.
     * 
     * @return the invoiceSectionDisplayName value.
     */
    public String invoiceSectionDisplayName() {
        return this.invoiceSectionDisplayName;
    }

    /**
     * Get the lastCharge property: The last month charges.
     * 
     * @return the lastCharge value.
     */
    public ProductPropertiesLastCharge lastCharge() {
        return this.lastCharge;
    }

    /**
     * Set the lastCharge property: The last month charges.
     * 
     * @param lastCharge the lastCharge value to set.
     * @return the ProductProperties object itself.
     */
    public ProductProperties withLastCharge(ProductPropertiesLastCharge lastCharge) {
        this.lastCharge = lastCharge;
        return this;
    }

    /**
     * Get the lastChargeDate property: The date of the last charge.
     * 
     * @return the lastChargeDate value.
     */
    public String lastChargeDate() {
        return this.lastChargeDate;
    }

    /**
     * Get the productType property: The description of the type of product.
     * 
     * @return the productType value.
     */
    public String productType() {
        return this.productType;
    }

    /**
     * Get the productTypeId property: The ID of the type of product.
     * 
     * @return the productTypeId value.
     */
    public String productTypeId() {
        return this.productTypeId;
    }

    /**
     * Get the skuId property: The sku ID of the product.
     * 
     * @return the skuId value.
     */
    public String skuId() {
        return this.skuId;
    }

    /**
     * Get the skuDescription property: The sku description of the product.
     * 
     * @return the skuDescription value.
     */
    public String skuDescription() {
        return this.skuDescription;
    }

    /**
     * Get the purchaseDate property: The date when the product was purchased.
     * 
     * @return the purchaseDate value.
     */
    public String purchaseDate() {
        return this.purchaseDate;
    }

    /**
     * Get the quantity property: The quantity purchased for the product.
     * 
     * @return the quantity value.
     */
    public Long quantity() {
        return this.quantity;
    }

    /**
     * Get the status property: The status of the product.
     * 
     * @return the status value.
     */
    public ProductStatus status() {
        return this.status;
    }

    /**
     * Get the tenantId property: The id of the tenant in which the product is used.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the reseller property: Reseller for this product. The fields is not available for Microsoft Partner Agreement
     * products.
     * 
     * @return the reseller value.
     */
    public ProductPropertiesReseller reseller() {
        return this.reseller;
    }

    /**
     * Set the reseller property: Reseller for this product. The fields is not available for Microsoft Partner Agreement
     * products.
     * 
     * @param reseller the reseller value to set.
     * @return the ProductProperties object itself.
     */
    public ProductProperties withReseller(ProductPropertiesReseller reseller) {
        this.reseller = reseller;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lastCharge() != null) {
            lastCharge().validate();
        }
        if (reseller() != null) {
            reseller().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("autoRenew", this.autoRenew == null ? null : this.autoRenew.toString());
        jsonWriter.writeJsonField("lastCharge", this.lastCharge);
        jsonWriter.writeJsonField("reseller", this.reseller);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProductProperties.
     */
    public static ProductProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductProperties deserializedProductProperties = new ProductProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoRenew".equals(fieldName)) {
                    deserializedProductProperties.autoRenew = AutoRenew.fromString(reader.getString());
                } else if ("availabilityId".equals(fieldName)) {
                    deserializedProductProperties.availabilityId = reader.getString();
                } else if ("billingFrequency".equals(fieldName)) {
                    deserializedProductProperties.billingFrequency = reader.getString();
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedProductProperties.billingProfileId = reader.getString();
                } else if ("billingProfileDisplayName".equals(fieldName)) {
                    deserializedProductProperties.billingProfileDisplayName = reader.getString();
                } else if ("customerId".equals(fieldName)) {
                    deserializedProductProperties.customerId = reader.getString();
                } else if ("customerDisplayName".equals(fieldName)) {
                    deserializedProductProperties.customerDisplayName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedProductProperties.displayName = reader.getString();
                } else if ("endDate".equals(fieldName)) {
                    deserializedProductProperties.endDate = reader.getString();
                } else if ("invoiceSectionId".equals(fieldName)) {
                    deserializedProductProperties.invoiceSectionId = reader.getString();
                } else if ("invoiceSectionDisplayName".equals(fieldName)) {
                    deserializedProductProperties.invoiceSectionDisplayName = reader.getString();
                } else if ("lastCharge".equals(fieldName)) {
                    deserializedProductProperties.lastCharge = ProductPropertiesLastCharge.fromJson(reader);
                } else if ("lastChargeDate".equals(fieldName)) {
                    deserializedProductProperties.lastChargeDate = reader.getString();
                } else if ("productType".equals(fieldName)) {
                    deserializedProductProperties.productType = reader.getString();
                } else if ("productTypeId".equals(fieldName)) {
                    deserializedProductProperties.productTypeId = reader.getString();
                } else if ("skuId".equals(fieldName)) {
                    deserializedProductProperties.skuId = reader.getString();
                } else if ("skuDescription".equals(fieldName)) {
                    deserializedProductProperties.skuDescription = reader.getString();
                } else if ("purchaseDate".equals(fieldName)) {
                    deserializedProductProperties.purchaseDate = reader.getString();
                } else if ("quantity".equals(fieldName)) {
                    deserializedProductProperties.quantity = reader.getNullable(JsonReader::getLong);
                } else if ("status".equals(fieldName)) {
                    deserializedProductProperties.status = ProductStatus.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedProductProperties.tenantId = reader.getString();
                } else if ("reseller".equals(fieldName)) {
                    deserializedProductProperties.reseller = ProductPropertiesReseller.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductProperties;
        });
    }
}
