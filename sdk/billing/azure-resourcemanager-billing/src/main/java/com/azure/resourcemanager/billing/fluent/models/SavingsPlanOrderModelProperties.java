// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.models.BillingPlan;
import com.azure.resourcemanager.billing.models.BillingPlanInformation;
import com.azure.resourcemanager.billing.models.ExtendedStatusInfo;
import com.azure.resourcemanager.billing.models.SavingsPlanTerm;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Savings plan order properties.
 */
@Fluent
public final class SavingsPlanOrderModelProperties implements JsonSerializable<SavingsPlanOrderModelProperties> {
    /*
     * Display name
     */
    private String displayName;

    /*
     * The provisioning state of the savings plan, e.g. Succeeded
     */
    private String provisioningState;

    /*
     * Subscription that will be charged for purchasing SavingsPlan
     */
    private String billingScopeId;

    /*
     * Fully-qualified identifier of the billing profile where the savings plan is applied. Present only for Field-led
     * or Customer-led customers.
     */
    private String billingProfileId;

    /*
     * Fully-qualified identifier of the customer where the savings plan is applied. Present only for Partner-led
     * customers.
     */
    private String customerId;

    /*
     * Fully-qualified identifier of the billing account where the savings plan is applied.
     */
    private String billingAccountId;

    /*
     * Represents the Savings plan term in ISO 8601 format.
     */
    private SavingsPlanTerm term;

    /*
     * Represents the billing plan in ISO 8601 format. Required only for monthly purchases.
     */
    private BillingPlan billingPlan;

    /*
     * DateTime when the savings plan benefit started.
     */
    private OffsetDateTime benefitStartTime;

    /*
     * DateTime when the savings plan will expire.
     */
    private OffsetDateTime expiryDateTime;

    /*
     * Information describing the type of billing plan for this savings plan.
     */
    private BillingPlanInformation planInformation;

    /*
     * The savingsPlans property.
     */
    private List<String> savingsPlans;

    /*
     * Extended status information
     */
    private ExtendedStatusInfo extendedStatusInfo;

    /*
     * Represents UPN
     */
    private String productCode;

    /**
     * Creates an instance of SavingsPlanOrderModelProperties class.
     */
    public SavingsPlanOrderModelProperties() {
    }

    /**
     * Get the displayName property: Display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name.
     * 
     * @param displayName the displayName value to set.
     * @return the SavingsPlanOrderModelProperties object itself.
     */
    public SavingsPlanOrderModelProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the savings plan, e.g. Succeeded.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the billingScopeId property: Subscription that will be charged for purchasing SavingsPlan.
     * 
     * @return the billingScopeId value.
     */
    public String billingScopeId() {
        return this.billingScopeId;
    }

    /**
     * Set the billingScopeId property: Subscription that will be charged for purchasing SavingsPlan.
     * 
     * @param billingScopeId the billingScopeId value to set.
     * @return the SavingsPlanOrderModelProperties object itself.
     */
    public SavingsPlanOrderModelProperties withBillingScopeId(String billingScopeId) {
        this.billingScopeId = billingScopeId;
        return this;
    }

    /**
     * Get the billingProfileId property: Fully-qualified identifier of the billing profile where the savings plan is
     * applied. Present only for Field-led or Customer-led customers.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the customerId property: Fully-qualified identifier of the customer where the savings plan is applied.
     * Present only for Partner-led customers.
     * 
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get the billingAccountId property: Fully-qualified identifier of the billing account where the savings plan is
     * applied.
     * 
     * @return the billingAccountId value.
     */
    public String billingAccountId() {
        return this.billingAccountId;
    }

    /**
     * Get the term property: Represents the Savings plan term in ISO 8601 format.
     * 
     * @return the term value.
     */
    public SavingsPlanTerm term() {
        return this.term;
    }

    /**
     * Set the term property: Represents the Savings plan term in ISO 8601 format.
     * 
     * @param term the term value to set.
     * @return the SavingsPlanOrderModelProperties object itself.
     */
    public SavingsPlanOrderModelProperties withTerm(SavingsPlanTerm term) {
        this.term = term;
        return this;
    }

    /**
     * Get the billingPlan property: Represents the billing plan in ISO 8601 format. Required only for monthly
     * purchases.
     * 
     * @return the billingPlan value.
     */
    public BillingPlan billingPlan() {
        return this.billingPlan;
    }

    /**
     * Set the billingPlan property: Represents the billing plan in ISO 8601 format. Required only for monthly
     * purchases.
     * 
     * @param billingPlan the billingPlan value to set.
     * @return the SavingsPlanOrderModelProperties object itself.
     */
    public SavingsPlanOrderModelProperties withBillingPlan(BillingPlan billingPlan) {
        this.billingPlan = billingPlan;
        return this;
    }

    /**
     * Get the benefitStartTime property: DateTime when the savings plan benefit started.
     * 
     * @return the benefitStartTime value.
     */
    public OffsetDateTime benefitStartTime() {
        return this.benefitStartTime;
    }

    /**
     * Get the expiryDateTime property: DateTime when the savings plan will expire.
     * 
     * @return the expiryDateTime value.
     */
    public OffsetDateTime expiryDateTime() {
        return this.expiryDateTime;
    }

    /**
     * Get the planInformation property: Information describing the type of billing plan for this savings plan.
     * 
     * @return the planInformation value.
     */
    public BillingPlanInformation planInformation() {
        return this.planInformation;
    }

    /**
     * Set the planInformation property: Information describing the type of billing plan for this savings plan.
     * 
     * @param planInformation the planInformation value to set.
     * @return the SavingsPlanOrderModelProperties object itself.
     */
    public SavingsPlanOrderModelProperties withPlanInformation(BillingPlanInformation planInformation) {
        this.planInformation = planInformation;
        return this;
    }

    /**
     * Get the savingsPlans property: The savingsPlans property.
     * 
     * @return the savingsPlans value.
     */
    public List<String> savingsPlans() {
        return this.savingsPlans;
    }

    /**
     * Set the savingsPlans property: The savingsPlans property.
     * 
     * @param savingsPlans the savingsPlans value to set.
     * @return the SavingsPlanOrderModelProperties object itself.
     */
    public SavingsPlanOrderModelProperties withSavingsPlans(List<String> savingsPlans) {
        this.savingsPlans = savingsPlans;
        return this;
    }

    /**
     * Get the extendedStatusInfo property: Extended status information.
     * 
     * @return the extendedStatusInfo value.
     */
    public ExtendedStatusInfo extendedStatusInfo() {
        return this.extendedStatusInfo;
    }

    /**
     * Get the productCode property: Represents UPN.
     * 
     * @return the productCode value.
     */
    public String productCode() {
        return this.productCode;
    }

    /**
     * Set the productCode property: Represents UPN.
     * 
     * @param productCode the productCode value to set.
     * @return the SavingsPlanOrderModelProperties object itself.
     */
    public SavingsPlanOrderModelProperties withProductCode(String productCode) {
        this.productCode = productCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (planInformation() != null) {
            planInformation().validate();
        }
        if (extendedStatusInfo() != null) {
            extendedStatusInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("billingScopeId", this.billingScopeId);
        jsonWriter.writeStringField("term", this.term == null ? null : this.term.toString());
        jsonWriter.writeStringField("billingPlan", this.billingPlan == null ? null : this.billingPlan.toString());
        jsonWriter.writeJsonField("planInformation", this.planInformation);
        jsonWriter.writeArrayField("savingsPlans", this.savingsPlans, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("productCode", this.productCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SavingsPlanOrderModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SavingsPlanOrderModelProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SavingsPlanOrderModelProperties.
     */
    public static SavingsPlanOrderModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SavingsPlanOrderModelProperties deserializedSavingsPlanOrderModelProperties
                = new SavingsPlanOrderModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.displayName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.provisioningState = reader.getString();
                } else if ("billingScopeId".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.billingScopeId = reader.getString();
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.billingProfileId = reader.getString();
                } else if ("customerId".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.customerId = reader.getString();
                } else if ("billingAccountId".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.billingAccountId = reader.getString();
                } else if ("term".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.term = SavingsPlanTerm.fromString(reader.getString());
                } else if ("billingPlan".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.billingPlan
                        = BillingPlan.fromString(reader.getString());
                } else if ("benefitStartTime".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.benefitStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiryDateTime".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.expiryDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("planInformation".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.planInformation
                        = BillingPlanInformation.fromJson(reader);
                } else if ("savingsPlans".equals(fieldName)) {
                    List<String> savingsPlans = reader.readArray(reader1 -> reader1.getString());
                    deserializedSavingsPlanOrderModelProperties.savingsPlans = savingsPlans;
                } else if ("extendedStatusInfo".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.extendedStatusInfo
                        = ExtendedStatusInfo.fromJson(reader);
                } else if ("productCode".equals(fieldName)) {
                    deserializedSavingsPlanOrderModelProperties.productCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSavingsPlanOrderModelProperties;
        });
    }
}
