// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The current payment term of the billing profile.
 */
@Fluent
public final class BillingProfilePropertiesCurrentPaymentTerm extends PaymentTerm {
    /*
     * Indicates payment term is the standard payment term.
     */
    private Boolean isDefault;

    /**
     * Creates an instance of BillingProfilePropertiesCurrentPaymentTerm class.
     */
    public BillingProfilePropertiesCurrentPaymentTerm() {
    }

    /**
     * Get the isDefault property: Indicates payment term is the standard payment term.
     * 
     * @return the isDefault value.
     */
    @Override
    public Boolean isDefault() {
        return this.isDefault;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingProfilePropertiesCurrentPaymentTerm withTerm(String term) {
        super.withTerm(term);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingProfilePropertiesCurrentPaymentTerm withStartDate(OffsetDateTime startDate) {
        super.withStartDate(startDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingProfilePropertiesCurrentPaymentTerm withEndDate(OffsetDateTime endDate) {
        super.withEndDate(endDate);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("term", term());
        jsonWriter.writeStringField("startDate",
            startDate() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(startDate()));
        jsonWriter.writeStringField("endDate",
            endDate() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(endDate()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingProfilePropertiesCurrentPaymentTerm from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingProfilePropertiesCurrentPaymentTerm if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingProfilePropertiesCurrentPaymentTerm.
     */
    public static BillingProfilePropertiesCurrentPaymentTerm fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingProfilePropertiesCurrentPaymentTerm deserializedBillingProfilePropertiesCurrentPaymentTerm
                = new BillingProfilePropertiesCurrentPaymentTerm();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("term".equals(fieldName)) {
                    deserializedBillingProfilePropertiesCurrentPaymentTerm.withTerm(reader.getString());
                } else if ("startDate".equals(fieldName)) {
                    deserializedBillingProfilePropertiesCurrentPaymentTerm.withStartDate(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endDate".equals(fieldName)) {
                    deserializedBillingProfilePropertiesCurrentPaymentTerm.withEndDate(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("isDefault".equals(fieldName)) {
                    deserializedBillingProfilePropertiesCurrentPaymentTerm.isDefault
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingProfilePropertiesCurrentPaymentTerm;
        });
    }
}
