// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.models.ProductDetails;
import java.io.IOException;
import java.util.List;

/**
 * Request parameters to accept transfer.
 */
@Fluent
public final class AcceptTransferProperties implements JsonSerializable<AcceptTransferProperties> {
    /*
     * Request parameters to accept transfer.
     */
    private List<ProductDetails> productDetails;

    /**
     * Creates an instance of AcceptTransferProperties class.
     */
    public AcceptTransferProperties() {
    }

    /**
     * Get the productDetails property: Request parameters to accept transfer.
     * 
     * @return the productDetails value.
     */
    public List<ProductDetails> productDetails() {
        return this.productDetails;
    }

    /**
     * Set the productDetails property: Request parameters to accept transfer.
     * 
     * @param productDetails the productDetails value to set.
     * @return the AcceptTransferProperties object itself.
     */
    public AcceptTransferProperties withProductDetails(List<ProductDetails> productDetails) {
        this.productDetails = productDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productDetails() != null) {
            productDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("productDetails", this.productDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcceptTransferProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcceptTransferProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AcceptTransferProperties.
     */
    public static AcceptTransferProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcceptTransferProperties deserializedAcceptTransferProperties = new AcceptTransferProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productDetails".equals(fieldName)) {
                    List<ProductDetails> productDetails = reader.readArray(reader1 -> ProductDetails.fromJson(reader1));
                    deserializedAcceptTransferProperties.productDetails = productDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAcceptTransferProperties;
        });
    }
}
