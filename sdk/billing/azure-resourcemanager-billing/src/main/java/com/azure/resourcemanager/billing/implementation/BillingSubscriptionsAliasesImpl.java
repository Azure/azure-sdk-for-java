// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billing.fluent.BillingSubscriptionsAliasesClient;
import com.azure.resourcemanager.billing.fluent.models.BillingSubscriptionAliasInner;
import com.azure.resourcemanager.billing.models.BillingSubscriptionAlias;
import com.azure.resourcemanager.billing.models.BillingSubscriptionsAliases;

public final class BillingSubscriptionsAliasesImpl implements BillingSubscriptionsAliases {
    private static final ClientLogger LOGGER = new ClientLogger(BillingSubscriptionsAliasesImpl.class);

    private final BillingSubscriptionsAliasesClient innerClient;

    private final com.azure.resourcemanager.billing.BillingManager serviceManager;

    public BillingSubscriptionsAliasesImpl(BillingSubscriptionsAliasesClient innerClient,
        com.azure.resourcemanager.billing.BillingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<BillingSubscriptionAlias> getWithResponse(String billingAccountName, String aliasName,
        Context context) {
        Response<BillingSubscriptionAliasInner> inner
            = this.serviceClient().getWithResponse(billingAccountName, aliasName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new BillingSubscriptionAliasImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingSubscriptionAlias get(String billingAccountName, String aliasName) {
        BillingSubscriptionAliasInner inner = this.serviceClient().get(billingAccountName, aliasName);
        if (inner != null) {
            return new BillingSubscriptionAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingSubscriptionAlias createOrUpdate(String billingAccountName, String aliasName,
        BillingSubscriptionAliasInner parameters) {
        BillingSubscriptionAliasInner inner
            = this.serviceClient().createOrUpdate(billingAccountName, aliasName, parameters);
        if (inner != null) {
            return new BillingSubscriptionAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingSubscriptionAlias createOrUpdate(String billingAccountName, String aliasName,
        BillingSubscriptionAliasInner parameters, Context context) {
        BillingSubscriptionAliasInner inner
            = this.serviceClient().createOrUpdate(billingAccountName, aliasName, parameters, context);
        if (inner != null) {
            return new BillingSubscriptionAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingSubscriptionAlias> listByBillingAccount(String billingAccountName) {
        PagedIterable<BillingSubscriptionAliasInner> inner
            = this.serviceClient().listByBillingAccount(billingAccountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingSubscriptionAliasImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingSubscriptionAlias> listByBillingAccount(String billingAccountName,
        Boolean includeDeleted, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        PagedIterable<BillingSubscriptionAliasInner> inner = this.serviceClient()
            .listByBillingAccount(billingAccountName, includeDeleted, filter, orderBy, top, skip, count, search,
                context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingSubscriptionAliasImpl(inner1, this.manager()));
    }

    private BillingSubscriptionsAliasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.billing.BillingManager manager() {
        return this.serviceManager;
    }
}
