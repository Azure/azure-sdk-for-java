// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.models.Amount;
import com.azure.resourcemanager.billing.models.AutoRenew;
import com.azure.resourcemanager.billing.models.Beneficiary;
import com.azure.resourcemanager.billing.models.BillingSubscriptionOperationStatus;
import com.azure.resourcemanager.billing.models.BillingSubscriptionStatus;
import com.azure.resourcemanager.billing.models.BillingSubscriptionStatusDetails;
import com.azure.resourcemanager.billing.models.NextBillingCycleDetails;
import com.azure.resourcemanager.billing.models.ProvisioningState;
import com.azure.resourcemanager.billing.models.RenewalTermDetails;
import com.azure.resourcemanager.billing.models.Reseller;
import com.azure.resourcemanager.billing.models.SubscriptionEnrollmentAccountStatus;
import com.azure.resourcemanager.billing.models.SystemOverrides;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * A billing subscription alias.
 */
@Fluent
public final class BillingSubscriptionAliasProperties extends BillingSubscriptionProperties {
    /*
     * The ID of the billing subscription with the subscription alias.
     */
    private String billingSubscriptionId;

    /*
     * The suspension details for a subscription. This field is not available for Enterprise Agreement billing accounts.
     */
    private List<BillingSubscriptionStatusDetails> suspensionReasonDetails;

    /*
     * The suspension reason for a subscription. This field is not available for Enterprise Agreement billing accounts.
     */
    private List<String> suspensionReasons;

    /*
     * The ID of the subscription.
     */
    private String subscriptionId;

    /*
     * The provisioning state of the resource during a long-running operation.
     */
    private ProvisioningState provisioningState;

    /*
     * The status of an operation on the subscription. When None, there is no ongoing operation. When LockedForUpdate,
     * write operations will be blocked on the Billing Subscription. Other is the default value and you may need to
     * refer to the latest API version for more details.
     */
    private BillingSubscriptionOperationStatus operationStatus;

    /*
     * The status of the subscription. This field is not available for Enterprise Agreement billing accounts
     */
    private BillingSubscriptionStatus status;

    /*
     * End date of the term in UTC time.
     */
    private OffsetDateTime termEndDate;

    /*
     * Start date of the term in UTC time.
     */
    private OffsetDateTime termStartDate;

    /*
     * Unique identifier of the linked resource.
     */
    private String resourceUri;

    /*
     * The SKU description of the product for which the subscription is purchased. This field is is only available for
     * billing accounts with agreement type Microsoft Customer Agreement and Microsoft Partner Agreement.
     */
    private String skuDescription;

    /*
     * Details for the next renewal term of a subscription.
     */
    private RenewalTermDetails renewalTermDetails;

    /*
     * Reseller for this subscription. The fields is not available for Microsoft Partner Agreement billing accounts.
     */
    private Reseller reseller;

    /*
     * Purchase date of the product in UTC time.
     */
    private OffsetDateTime purchaseDate;

    /*
     * Type of the product for which the subscription is purchased.
     */
    private String productType;

    /*
     * The category of the product for which the subscription is purchased. Possible values include: AzureSupport,
     * Hardware, ReservationOrder, SaaS, SavingsPlanOrder, Software, UsageBased, Other.
     */
    private String productCategory;

    /*
     * The offer ID for the subscription. This field is only available for the Microsoft Online Services Program billing
     * accounts.
     */
    private String offerId;

    /*
     * Next billing cycle details of the subscription.
     */
    private NextBillingCycleDetails nextBillingCycleDetails;

    /*
     * The current month to date charges. This field is only available for usage based subscriptions of Microsoft
     * Customer Agreement billing accounts.
     */
    private Amount monthToDateCharges;

    /*
     * The last month's charges. This field is only available for usage based subscriptions of Microsoft Customer
     * Agreement billing accounts.
     */
    private Amount lastMonthCharges;

    /*
     * The ID that uniquely identifies an invoice section.
     */
    private String invoiceSectionName;

    /*
     * The name of the invoice section.
     */
    private String invoiceSectionDisplayName;

    /*
     * Enrollment Account Subscription details. This field is available only for the Enterprise Agreement Type billing
     * accounts.
     */
    private EnrollmentAccountSubscriptionDetails innerEnrollmentAccountSubscriptionDetails;

    /*
     * The enrollment Account name associated with the subscription. This field is available only for the Enterprise
     * Agreement Type billing accounts.
     */
    private String enrollmentAccountDisplayName;

    /*
     * The enrollment Account ID associated with the subscription. This field is available only for the Enterprise
     * Agreement Type billing accounts.
     */
    private String enrollmentAccountId;

    /*
     * The ID that uniquely identifies a customer.
     */
    private String customerName;

    /*
     * The name of the customer.
     */
    private String customerDisplayName;

    /*
     * The ID that uniquely identifies a billing profile.
     */
    private String billingProfileName;

    /*
     * The name of the billing profile.
     */
    private String billingProfileDisplayName;

    /*
     * Dictionary of billing policies associated with the subscription.
     */
    private Map<String, String> billingPolicies;

    /**
     * Creates an instance of BillingSubscriptionAliasProperties class.
     */
    public BillingSubscriptionAliasProperties() {
    }

    /**
     * Get the billingSubscriptionId property: The ID of the billing subscription with the subscription alias.
     * 
     * @return the billingSubscriptionId value.
     */
    public String billingSubscriptionId() {
        return this.billingSubscriptionId;
    }

    /**
     * Get the suspensionReasonDetails property: The suspension details for a subscription. This field is not available
     * for Enterprise Agreement billing accounts.
     * 
     * @return the suspensionReasonDetails value.
     */
    @Override
    public List<BillingSubscriptionStatusDetails> suspensionReasonDetails() {
        return this.suspensionReasonDetails;
    }

    /**
     * Get the suspensionReasons property: The suspension reason for a subscription. This field is not available for
     * Enterprise Agreement billing accounts.
     * 
     * @return the suspensionReasons value.
     */
    @Override
    public List<String> suspensionReasons() {
        return this.suspensionReasons;
    }

    /**
     * Get the subscriptionId property: The ID of the subscription.
     * 
     * @return the subscriptionId value.
     */
    @Override
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource during a long-running operation.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the operationStatus property: The status of an operation on the subscription. When None, there is no ongoing
     * operation. When LockedForUpdate, write operations will be blocked on the Billing Subscription. Other is the
     * default value and you may need to refer to the latest API version for more details.
     * 
     * @return the operationStatus value.
     */
    @Override
    public BillingSubscriptionOperationStatus operationStatus() {
        return this.operationStatus;
    }

    /**
     * Get the status property: The status of the subscription. This field is not available for Enterprise Agreement
     * billing accounts.
     * 
     * @return the status value.
     */
    @Override
    public BillingSubscriptionStatus status() {
        return this.status;
    }

    /**
     * Get the termEndDate property: End date of the term in UTC time.
     * 
     * @return the termEndDate value.
     */
    @Override
    public OffsetDateTime termEndDate() {
        return this.termEndDate;
    }

    /**
     * Get the termStartDate property: Start date of the term in UTC time.
     * 
     * @return the termStartDate value.
     */
    @Override
    public OffsetDateTime termStartDate() {
        return this.termStartDate;
    }

    /**
     * Get the resourceUri property: Unique identifier of the linked resource.
     * 
     * @return the resourceUri value.
     */
    @Override
    public String resourceUri() {
        return this.resourceUri;
    }

    /**
     * Get the skuDescription property: The SKU description of the product for which the subscription is purchased. This
     * field is is only available for billing accounts with agreement type Microsoft Customer Agreement and Microsoft
     * Partner Agreement.
     * 
     * @return the skuDescription value.
     */
    @Override
    public String skuDescription() {
        return this.skuDescription;
    }

    /**
     * Get the renewalTermDetails property: Details for the next renewal term of a subscription.
     * 
     * @return the renewalTermDetails value.
     */
    @Override
    public RenewalTermDetails renewalTermDetails() {
        return this.renewalTermDetails;
    }

    /**
     * Get the reseller property: Reseller for this subscription. The fields is not available for Microsoft Partner
     * Agreement billing accounts.
     * 
     * @return the reseller value.
     */
    @Override
    public Reseller reseller() {
        return this.reseller;
    }

    /**
     * Get the purchaseDate property: Purchase date of the product in UTC time.
     * 
     * @return the purchaseDate value.
     */
    @Override
    public OffsetDateTime purchaseDate() {
        return this.purchaseDate;
    }

    /**
     * Get the productType property: Type of the product for which the subscription is purchased.
     * 
     * @return the productType value.
     */
    @Override
    public String productType() {
        return this.productType;
    }

    /**
     * Get the productCategory property: The category of the product for which the subscription is purchased. Possible
     * values include: AzureSupport, Hardware, ReservationOrder, SaaS, SavingsPlanOrder, Software, UsageBased, Other.
     * 
     * @return the productCategory value.
     */
    @Override
    public String productCategory() {
        return this.productCategory;
    }

    /**
     * Get the offerId property: The offer ID for the subscription. This field is only available for the Microsoft
     * Online Services Program billing accounts.
     * 
     * @return the offerId value.
     */
    @Override
    public String offerId() {
        return this.offerId;
    }

    /**
     * Get the nextBillingCycleDetails property: Next billing cycle details of the subscription.
     * 
     * @return the nextBillingCycleDetails value.
     */
    @Override
    public NextBillingCycleDetails nextBillingCycleDetails() {
        return this.nextBillingCycleDetails;
    }

    /**
     * Get the monthToDateCharges property: The current month to date charges. This field is only available for usage
     * based subscriptions of Microsoft Customer Agreement billing accounts.
     * 
     * @return the monthToDateCharges value.
     */
    @Override
    public Amount monthToDateCharges() {
        return this.monthToDateCharges;
    }

    /**
     * Get the lastMonthCharges property: The last month's charges. This field is only available for usage based
     * subscriptions of Microsoft Customer Agreement billing accounts.
     * 
     * @return the lastMonthCharges value.
     */
    @Override
    public Amount lastMonthCharges() {
        return this.lastMonthCharges;
    }

    /**
     * Get the invoiceSectionName property: The ID that uniquely identifies an invoice section.
     * 
     * @return the invoiceSectionName value.
     */
    @Override
    public String invoiceSectionName() {
        return this.invoiceSectionName;
    }

    /**
     * Get the invoiceSectionDisplayName property: The name of the invoice section.
     * 
     * @return the invoiceSectionDisplayName value.
     */
    @Override
    public String invoiceSectionDisplayName() {
        return this.invoiceSectionDisplayName;
    }

    /**
     * Get the innerEnrollmentAccountSubscriptionDetails property: Enrollment Account Subscription details. This field
     * is available only for the Enterprise Agreement Type billing accounts.
     * 
     * @return the innerEnrollmentAccountSubscriptionDetails value.
     */
    private EnrollmentAccountSubscriptionDetails innerEnrollmentAccountSubscriptionDetails() {
        return this.innerEnrollmentAccountSubscriptionDetails;
    }

    /**
     * Get the enrollmentAccountDisplayName property: The enrollment Account name associated with the subscription. This
     * field is available only for the Enterprise Agreement Type billing accounts.
     * 
     * @return the enrollmentAccountDisplayName value.
     */
    @Override
    public String enrollmentAccountDisplayName() {
        return this.enrollmentAccountDisplayName;
    }

    /**
     * Get the enrollmentAccountId property: The enrollment Account ID associated with the subscription. This field is
     * available only for the Enterprise Agreement Type billing accounts.
     * 
     * @return the enrollmentAccountId value.
     */
    @Override
    public String enrollmentAccountId() {
        return this.enrollmentAccountId;
    }

    /**
     * Get the customerName property: The ID that uniquely identifies a customer.
     * 
     * @return the customerName value.
     */
    @Override
    public String customerName() {
        return this.customerName;
    }

    /**
     * Get the customerDisplayName property: The name of the customer.
     * 
     * @return the customerDisplayName value.
     */
    @Override
    public String customerDisplayName() {
        return this.customerDisplayName;
    }

    /**
     * Get the billingProfileName property: The ID that uniquely identifies a billing profile.
     * 
     * @return the billingProfileName value.
     */
    @Override
    public String billingProfileName() {
        return this.billingProfileName;
    }

    /**
     * Get the billingProfileDisplayName property: The name of the billing profile.
     * 
     * @return the billingProfileDisplayName value.
     */
    @Override
    public String billingProfileDisplayName() {
        return this.billingProfileDisplayName;
    }

    /**
     * Get the billingPolicies property: Dictionary of billing policies associated with the subscription.
     * 
     * @return the billingPolicies value.
     */
    @Override
    public Map<String, String> billingPolicies() {
        return this.billingPolicies;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withAutoRenew(AutoRenew autoRenew) {
        super.withAutoRenew(autoRenew);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withBeneficiaryTenantId(String beneficiaryTenantId) {
        super.withBeneficiaryTenantId(beneficiaryTenantId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withBeneficiary(Beneficiary beneficiary) {
        super.withBeneficiary(beneficiary);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withBillingFrequency(String billingFrequency) {
        super.withBillingFrequency(billingFrequency);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withBillingProfileId(String billingProfileId) {
        super.withBillingProfileId(billingProfileId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withConsumptionCostCenter(String consumptionCostCenter) {
        super.withConsumptionCostCenter(consumptionCostCenter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withCustomerId(String customerId) {
        super.withCustomerId(customerId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withInvoiceSectionId(String invoiceSectionId) {
        super.withInvoiceSectionId(invoiceSectionId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withProductTypeId(String productTypeId) {
        super.withProductTypeId(productTypeId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withQuantity(Long quantity) {
        super.withQuantity(quantity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withSkuId(String skuId) {
        super.withSkuId(skuId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withSystemOverrides(SystemOverrides systemOverrides) {
        super.withSystemOverrides(systemOverrides);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withTermDuration(String termDuration) {
        super.withTermDuration(termDuration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingSubscriptionAliasProperties withProvisioningTenantId(String provisioningTenantId) {
        super.withProvisioningTenantId(provisioningTenantId);
        return this;
    }

    /**
     * Get the enrollmentAccountStartDate property: The enrollment Account and the subscription association start date.
     * This field is available only for the Enterprise Agreement Type.
     * 
     * @return the enrollmentAccountStartDate value.
     */
    public OffsetDateTime enrollmentAccountStartDate() {
        return this.innerEnrollmentAccountSubscriptionDetails() == null
            ? null
            : this.innerEnrollmentAccountSubscriptionDetails().enrollmentAccountStartDate();
    }

    /**
     * Get the subscriptionEnrollmentAccountStatus property: The current enrollment account status of the subscription.
     * This field is available only for the Enterprise Agreement Type.
     * 
     * @return the subscriptionEnrollmentAccountStatus value.
     */
    public SubscriptionEnrollmentAccountStatus subscriptionEnrollmentAccountStatus() {
        return this.innerEnrollmentAccountSubscriptionDetails() == null
            ? null
            : this.innerEnrollmentAccountSubscriptionDetails().subscriptionEnrollmentAccountStatus();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (beneficiary() != null) {
            beneficiary().validate();
        }
        if (innerEnrollmentAccountSubscriptionDetails() != null) {
            innerEnrollmentAccountSubscriptionDetails().validate();
        }
        if (lastMonthCharges() != null) {
            lastMonthCharges().validate();
        }
        if (monthToDateCharges() != null) {
            monthToDateCharges().validate();
        }
        if (nextBillingCycleDetails() != null) {
            nextBillingCycleDetails().validate();
        }
        if (reseller() != null) {
            reseller().validate();
        }
        if (renewalTermDetails() != null) {
            renewalTermDetails().validate();
        }
        if (systemOverrides() != null) {
            systemOverrides().validate();
        }
        if (suspensionReasonDetails() != null) {
            suspensionReasonDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("autoRenew", autoRenew() == null ? null : autoRenew().toString());
        jsonWriter.writeStringField("beneficiaryTenantId", beneficiaryTenantId());
        jsonWriter.writeJsonField("beneficiary", beneficiary());
        jsonWriter.writeStringField("billingFrequency", billingFrequency());
        jsonWriter.writeStringField("billingProfileId", billingProfileId());
        jsonWriter.writeStringField("consumptionCostCenter", consumptionCostCenter());
        jsonWriter.writeStringField("customerId", customerId());
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("invoiceSectionId", invoiceSectionId());
        jsonWriter.writeStringField("productTypeId", productTypeId());
        jsonWriter.writeNumberField("quantity", quantity());
        jsonWriter.writeStringField("skuId", skuId());
        jsonWriter.writeJsonField("systemOverrides", systemOverrides());
        jsonWriter.writeStringField("termDuration", termDuration());
        jsonWriter.writeStringField("provisioningTenantId", provisioningTenantId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingSubscriptionAliasProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingSubscriptionAliasProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingSubscriptionAliasProperties.
     */
    public static BillingSubscriptionAliasProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingSubscriptionAliasProperties deserializedBillingSubscriptionAliasProperties
                = new BillingSubscriptionAliasProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoRenew".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties
                        .withAutoRenew(AutoRenew.fromString(reader.getString()));
                } else if ("beneficiaryTenantId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withBeneficiaryTenantId(reader.getString());
                } else if ("beneficiary".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withBeneficiary(Beneficiary.fromJson(reader));
                } else if ("billingFrequency".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withBillingFrequency(reader.getString());
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withBillingProfileId(reader.getString());
                } else if ("billingPolicies".equals(fieldName)) {
                    Map<String, String> billingPolicies = reader.readMap(reader1 -> reader1.getString());
                    deserializedBillingSubscriptionAliasProperties.billingPolicies = billingPolicies;
                } else if ("billingProfileDisplayName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.billingProfileDisplayName = reader.getString();
                } else if ("billingProfileName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.billingProfileName = reader.getString();
                } else if ("consumptionCostCenter".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withConsumptionCostCenter(reader.getString());
                } else if ("customerId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withCustomerId(reader.getString());
                } else if ("customerDisplayName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.customerDisplayName = reader.getString();
                } else if ("customerName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.customerName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withDisplayName(reader.getString());
                } else if ("enrollmentAccountId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.enrollmentAccountId = reader.getString();
                } else if ("enrollmentAccountDisplayName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.enrollmentAccountDisplayName = reader.getString();
                } else if ("enrollmentAccountSubscriptionDetails".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.innerEnrollmentAccountSubscriptionDetails
                        = EnrollmentAccountSubscriptionDetails.fromJson(reader);
                } else if ("invoiceSectionId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withInvoiceSectionId(reader.getString());
                } else if ("invoiceSectionDisplayName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.invoiceSectionDisplayName = reader.getString();
                } else if ("invoiceSectionName".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.invoiceSectionName = reader.getString();
                } else if ("lastMonthCharges".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.lastMonthCharges = Amount.fromJson(reader);
                } else if ("monthToDateCharges".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.monthToDateCharges = Amount.fromJson(reader);
                } else if ("nextBillingCycleDetails".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.nextBillingCycleDetails
                        = NextBillingCycleDetails.fromJson(reader);
                } else if ("offerId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.offerId = reader.getString();
                } else if ("productCategory".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.productCategory = reader.getString();
                } else if ("productType".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.productType = reader.getString();
                } else if ("productTypeId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withProductTypeId(reader.getString());
                } else if ("purchaseDate".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.purchaseDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("quantity".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties
                        .withQuantity(reader.getNullable(JsonReader::getLong));
                } else if ("reseller".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.reseller = Reseller.fromJson(reader);
                } else if ("renewalTermDetails".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.renewalTermDetails
                        = RenewalTermDetails.fromJson(reader);
                } else if ("skuId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withSkuId(reader.getString());
                } else if ("skuDescription".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.skuDescription = reader.getString();
                } else if ("systemOverrides".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties
                        .withSystemOverrides(SystemOverrides.fromJson(reader));
                } else if ("resourceUri".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.resourceUri = reader.getString();
                } else if ("termDuration".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withTermDuration(reader.getString());
                } else if ("termStartDate".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.termStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("termEndDate".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.termEndDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningTenantId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.withProvisioningTenantId(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.status
                        = BillingSubscriptionStatus.fromString(reader.getString());
                } else if ("operationStatus".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.operationStatus
                        = BillingSubscriptionOperationStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.subscriptionId = reader.getString();
                } else if ("suspensionReasons".equals(fieldName)) {
                    List<String> suspensionReasons = reader.readArray(reader1 -> reader1.getString());
                    deserializedBillingSubscriptionAliasProperties.suspensionReasons = suspensionReasons;
                } else if ("suspensionReasonDetails".equals(fieldName)) {
                    List<BillingSubscriptionStatusDetails> suspensionReasonDetails
                        = reader.readArray(reader1 -> BillingSubscriptionStatusDetails.fromJson(reader1));
                    deserializedBillingSubscriptionAliasProperties.suspensionReasonDetails = suspensionReasonDetails;
                } else if ("billingSubscriptionId".equals(fieldName)) {
                    deserializedBillingSubscriptionAliasProperties.billingSubscriptionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingSubscriptionAliasProperties;
        });
    }
}
