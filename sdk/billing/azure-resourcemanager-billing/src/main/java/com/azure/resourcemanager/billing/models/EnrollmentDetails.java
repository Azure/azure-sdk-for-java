// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of an enrollment.
 */
@Fluent
public class EnrollmentDetails implements JsonSerializable<EnrollmentDetails> {
    /*
     * The start date of the enrollment.
     */
    private OffsetDateTime startDate;

    /*
     * The end date of the enrollment.
     */
    private OffsetDateTime endDate;

    /*
     * The billing currency for the enrollment.
     */
    private String currency;

    /*
     * The channel type of the enrollment.
     */
    private String channel;

    /*
     * The language for the enrollment.
     */
    private String language;

    /*
     * The country code of the enrollment.
     */
    private String countryCode;

    /*
     * The billing cycle for the enrollment.
     */
    private String billingCycle;

    /*
     * The billing account extension opted by the company.
     */
    private ExtendedTermOption extendedTermOption;

    /*
     * The support level offer associated with an enrollment.
     */
    private SupportLevel supportLevel;

    /*
     * The support coverage period for the enrollment.
     */
    private String supportCoverage;

    /*
     * The cloud of the enrollment.
     */
    private String cloud;

    /*
     * The purchase order number of the enrollment.
     */
    private String poNumber;

    /*
     * Markup status of enrollment, applicable only for indirect enrollments.
     */
    private MarkupStatus markupStatus;

    /*
     * The properties of an enrollment which are applicable only for indirect enrollments.
     */
    private EnrollmentDetailsIndirectRelationshipInfo indirectRelationshipInfo;

    /*
     * The contact who receives invoices of the enrollment.
     */
    private String invoiceRecipient;

    /**
     * Creates an instance of EnrollmentDetails class.
     */
    public EnrollmentDetails() {
    }

    /**
     * Get the startDate property: The start date of the enrollment.
     * 
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.startDate;
    }

    /**
     * Set the startDate property: The start date of the enrollment.
     * 
     * @param startDate the startDate value to set.
     * @return the EnrollmentDetails object itself.
     */
    public EnrollmentDetails withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }

    /**
     * Get the endDate property: The end date of the enrollment.
     * 
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.endDate;
    }

    /**
     * Set the endDate property: The end date of the enrollment.
     * 
     * @param endDate the endDate value to set.
     * @return the EnrollmentDetails object itself.
     */
    public EnrollmentDetails withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * Get the currency property: The billing currency for the enrollment.
     * 
     * @return the currency value.
     */
    public String currency() {
        return this.currency;
    }

    /**
     * Set the currency property: The billing currency for the enrollment.
     * 
     * @param currency the currency value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withCurrency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get the channel property: The channel type of the enrollment.
     * 
     * @return the channel value.
     */
    public String channel() {
        return this.channel;
    }

    /**
     * Set the channel property: The channel type of the enrollment.
     * 
     * @param channel the channel value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withChannel(String channel) {
        this.channel = channel;
        return this;
    }

    /**
     * Get the language property: The language for the enrollment.
     * 
     * @return the language value.
     */
    public String language() {
        return this.language;
    }

    /**
     * Set the language property: The language for the enrollment.
     * 
     * @param language the language value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the countryCode property: The country code of the enrollment.
     * 
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Set the countryCode property: The country code of the enrollment.
     * 
     * @param countryCode the countryCode value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Get the billingCycle property: The billing cycle for the enrollment.
     * 
     * @return the billingCycle value.
     */
    public String billingCycle() {
        return this.billingCycle;
    }

    /**
     * Set the billingCycle property: The billing cycle for the enrollment.
     * 
     * @param billingCycle the billingCycle value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withBillingCycle(String billingCycle) {
        this.billingCycle = billingCycle;
        return this;
    }

    /**
     * Get the extendedTermOption property: The billing account extension opted by the company.
     * 
     * @return the extendedTermOption value.
     */
    public ExtendedTermOption extendedTermOption() {
        return this.extendedTermOption;
    }

    /**
     * Set the extendedTermOption property: The billing account extension opted by the company.
     * 
     * @param extendedTermOption the extendedTermOption value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withExtendedTermOption(ExtendedTermOption extendedTermOption) {
        this.extendedTermOption = extendedTermOption;
        return this;
    }

    /**
     * Get the supportLevel property: The support level offer associated with an enrollment.
     * 
     * @return the supportLevel value.
     */
    public SupportLevel supportLevel() {
        return this.supportLevel;
    }

    /**
     * Set the supportLevel property: The support level offer associated with an enrollment.
     * 
     * @param supportLevel the supportLevel value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withSupportLevel(SupportLevel supportLevel) {
        this.supportLevel = supportLevel;
        return this;
    }

    /**
     * Get the supportCoverage property: The support coverage period for the enrollment.
     * 
     * @return the supportCoverage value.
     */
    public String supportCoverage() {
        return this.supportCoverage;
    }

    /**
     * Set the supportCoverage property: The support coverage period for the enrollment.
     * 
     * @param supportCoverage the supportCoverage value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withSupportCoverage(String supportCoverage) {
        this.supportCoverage = supportCoverage;
        return this;
    }

    /**
     * Get the cloud property: The cloud of the enrollment.
     * 
     * @return the cloud value.
     */
    public String cloud() {
        return this.cloud;
    }

    /**
     * Set the cloud property: The cloud of the enrollment.
     * 
     * @param cloud the cloud value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withCloud(String cloud) {
        this.cloud = cloud;
        return this;
    }

    /**
     * Get the poNumber property: The purchase order number of the enrollment.
     * 
     * @return the poNumber value.
     */
    public String poNumber() {
        return this.poNumber;
    }

    /**
     * Set the poNumber property: The purchase order number of the enrollment.
     * 
     * @param poNumber the poNumber value to set.
     * @return the EnrollmentDetails object itself.
     */
    public EnrollmentDetails withPoNumber(String poNumber) {
        this.poNumber = poNumber;
        return this;
    }

    /**
     * Get the markupStatus property: Markup status of enrollment, applicable only for indirect enrollments.
     * 
     * @return the markupStatus value.
     */
    public MarkupStatus markupStatus() {
        return this.markupStatus;
    }

    /**
     * Set the markupStatus property: Markup status of enrollment, applicable only for indirect enrollments.
     * 
     * @param markupStatus the markupStatus value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withMarkupStatus(MarkupStatus markupStatus) {
        this.markupStatus = markupStatus;
        return this;
    }

    /**
     * Get the indirectRelationshipInfo property: The properties of an enrollment which are applicable only for indirect
     * enrollments.
     * 
     * @return the indirectRelationshipInfo value.
     */
    public EnrollmentDetailsIndirectRelationshipInfo indirectRelationshipInfo() {
        return this.indirectRelationshipInfo;
    }

    /**
     * Set the indirectRelationshipInfo property: The properties of an enrollment which are applicable only for indirect
     * enrollments.
     * 
     * @param indirectRelationshipInfo the indirectRelationshipInfo value to set.
     * @return the EnrollmentDetails object itself.
     */
    public EnrollmentDetails
        withIndirectRelationshipInfo(EnrollmentDetailsIndirectRelationshipInfo indirectRelationshipInfo) {
        this.indirectRelationshipInfo = indirectRelationshipInfo;
        return this;
    }

    /**
     * Get the invoiceRecipient property: The contact who receives invoices of the enrollment.
     * 
     * @return the invoiceRecipient value.
     */
    public String invoiceRecipient() {
        return this.invoiceRecipient;
    }

    /**
     * Set the invoiceRecipient property: The contact who receives invoices of the enrollment.
     * 
     * @param invoiceRecipient the invoiceRecipient value to set.
     * @return the EnrollmentDetails object itself.
     */
    EnrollmentDetails withInvoiceRecipient(String invoiceRecipient) {
        this.invoiceRecipient = invoiceRecipient;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (indirectRelationshipInfo() != null) {
            indirectRelationshipInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startDate",
            this.startDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDate));
        jsonWriter.writeStringField("endDate",
            this.endDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDate));
        jsonWriter.writeStringField("poNumber", this.poNumber);
        jsonWriter.writeJsonField("indirectRelationshipInfo", this.indirectRelationshipInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnrollmentDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnrollmentDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnrollmentDetails.
     */
    public static EnrollmentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnrollmentDetails deserializedEnrollmentDetails = new EnrollmentDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startDate".equals(fieldName)) {
                    deserializedEnrollmentDetails.startDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDate".equals(fieldName)) {
                    deserializedEnrollmentDetails.endDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("currency".equals(fieldName)) {
                    deserializedEnrollmentDetails.currency = reader.getString();
                } else if ("channel".equals(fieldName)) {
                    deserializedEnrollmentDetails.channel = reader.getString();
                } else if ("language".equals(fieldName)) {
                    deserializedEnrollmentDetails.language = reader.getString();
                } else if ("countryCode".equals(fieldName)) {
                    deserializedEnrollmentDetails.countryCode = reader.getString();
                } else if ("billingCycle".equals(fieldName)) {
                    deserializedEnrollmentDetails.billingCycle = reader.getString();
                } else if ("extendedTermOption".equals(fieldName)) {
                    deserializedEnrollmentDetails.extendedTermOption
                        = ExtendedTermOption.fromString(reader.getString());
                } else if ("supportLevel".equals(fieldName)) {
                    deserializedEnrollmentDetails.supportLevel = SupportLevel.fromString(reader.getString());
                } else if ("supportCoverage".equals(fieldName)) {
                    deserializedEnrollmentDetails.supportCoverage = reader.getString();
                } else if ("cloud".equals(fieldName)) {
                    deserializedEnrollmentDetails.cloud = reader.getString();
                } else if ("poNumber".equals(fieldName)) {
                    deserializedEnrollmentDetails.poNumber = reader.getString();
                } else if ("markupStatus".equals(fieldName)) {
                    deserializedEnrollmentDetails.markupStatus = MarkupStatus.fromString(reader.getString());
                } else if ("indirectRelationshipInfo".equals(fieldName)) {
                    deserializedEnrollmentDetails.indirectRelationshipInfo
                        = EnrollmentDetailsIndirectRelationshipInfo.fromJson(reader);
                } else if ("invoiceRecipient".equals(fieldName)) {
                    deserializedEnrollmentDetails.invoiceRecipient = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnrollmentDetails;
        });
    }
}
