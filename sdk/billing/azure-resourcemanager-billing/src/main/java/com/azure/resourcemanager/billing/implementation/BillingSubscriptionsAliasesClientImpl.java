// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billing.fluent.BillingSubscriptionsAliasesClient;
import com.azure.resourcemanager.billing.fluent.models.BillingSubscriptionAliasInner;
import com.azure.resourcemanager.billing.models.BillingSubscriptionAliasListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BillingSubscriptionsAliasesClient.
 */
public final class BillingSubscriptionsAliasesClientImpl implements BillingSubscriptionsAliasesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BillingSubscriptionsAliasesService service;

    /**
     * The service client containing this operation class.
     */
    private final BillingManagementClientImpl client;

    /**
     * Initializes an instance of BillingSubscriptionsAliasesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BillingSubscriptionsAliasesClientImpl(BillingManagementClientImpl client) {
        this.service = RestProxy.create(BillingSubscriptionsAliasesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BillingManagementClientBillingSubscriptionsAliases to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BillingManagementCli")
    public interface BillingSubscriptionsAliasesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptionAliases/{aliasName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionAliasInner>> get(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName, @PathParam("aliasName") String aliasName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptionAliases/{aliasName}")
        @ExpectedResponses({ 200, 201, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName, @PathParam("aliasName") String aliasName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BillingSubscriptionAliasInner parameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptionAliases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionAliasListResult>> listByBillingAccount(@HostParam("$host") String endpoint,
            @PathParam("billingAccountName") String billingAccountName,
            @QueryParam("includeDeleted") Boolean includeDeleted, @QueryParam("api-version") String apiVersion,
            @QueryParam("filter") String filter, @QueryParam("orderBy") String orderBy, @QueryParam("top") Long top,
            @QueryParam("skip") Long skip, @QueryParam("count") Boolean count, @QueryParam("search") String search,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BillingSubscriptionAliasListResult>> listByBillingAccountNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets a subscription by its alias ID. The operation is supported for seat based billing subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its alias ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BillingSubscriptionAliasInner>> getWithResponseAsync(String billingAccountName,
        String aliasName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (aliasName == null) {
            return Mono.error(new IllegalArgumentException("Parameter aliasName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), billingAccountName, aliasName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a subscription by its alias ID. The operation is supported for seat based billing subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its alias ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BillingSubscriptionAliasInner>> getWithResponseAsync(String billingAccountName,
        String aliasName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (aliasName == null) {
            return Mono.error(new IllegalArgumentException("Parameter aliasName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), billingAccountName, aliasName, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Gets a subscription by its alias ID. The operation is supported for seat based billing subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its alias ID on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionAliasInner> getAsync(String billingAccountName, String aliasName) {
        return getWithResponseAsync(billingAccountName, aliasName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a subscription by its alias ID. The operation is supported for seat based billing subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its alias ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BillingSubscriptionAliasInner> getWithResponse(String billingAccountName, String aliasName,
        Context context) {
        return getWithResponseAsync(billingAccountName, aliasName, context).block();
    }

    /**
     * Gets a subscription by its alias ID. The operation is supported for seat based billing subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subscription by its alias ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionAliasInner get(String billingAccountName, String aliasName) {
        return getWithResponse(billingAccountName, aliasName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a billing subscription alias along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String billingAccountName,
        String aliasName, BillingSubscriptionAliasInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (aliasName == null) {
            return Mono.error(new IllegalArgumentException("Parameter aliasName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), billingAccountName, aliasName,
                this.client.getApiVersion(), parameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a billing subscription alias along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String billingAccountName,
        String aliasName, BillingSubscriptionAliasInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        if (aliasName == null) {
            return Mono.error(new IllegalArgumentException("Parameter aliasName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), billingAccountName, aliasName,
            this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a billing subscription alias.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BillingSubscriptionAliasInner>, BillingSubscriptionAliasInner>
        beginCreateOrUpdateAsync(String billingAccountName, String aliasName,
            BillingSubscriptionAliasInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(billingAccountName, aliasName, parameters);
        return this.client.<BillingSubscriptionAliasInner, BillingSubscriptionAliasInner>getLroResult(mono,
            this.client.getHttpPipeline(), BillingSubscriptionAliasInner.class, BillingSubscriptionAliasInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a billing subscription alias.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<BillingSubscriptionAliasInner>, BillingSubscriptionAliasInner>
        beginCreateOrUpdateAsync(String billingAccountName, String aliasName, BillingSubscriptionAliasInner parameters,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(billingAccountName, aliasName, parameters, context);
        return this.client.<BillingSubscriptionAliasInner, BillingSubscriptionAliasInner>getLroResult(mono,
            this.client.getHttpPipeline(), BillingSubscriptionAliasInner.class, BillingSubscriptionAliasInner.class,
            context);
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a billing subscription alias.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionAliasInner>, BillingSubscriptionAliasInner>
        beginCreateOrUpdate(String billingAccountName, String aliasName, BillingSubscriptionAliasInner parameters) {
        return this.beginCreateOrUpdateAsync(billingAccountName, aliasName, parameters).getSyncPoller();
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a billing subscription alias.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<BillingSubscriptionAliasInner>, BillingSubscriptionAliasInner> beginCreateOrUpdate(
        String billingAccountName, String aliasName, BillingSubscriptionAliasInner parameters, Context context) {
        return this.beginCreateOrUpdateAsync(billingAccountName, aliasName, parameters, context).getSyncPoller();
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a billing subscription alias on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionAliasInner> createOrUpdateAsync(String billingAccountName, String aliasName,
        BillingSubscriptionAliasInner parameters) {
        return beginCreateOrUpdateAsync(billingAccountName, aliasName, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a billing subscription alias on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BillingSubscriptionAliasInner> createOrUpdateAsync(String billingAccountName, String aliasName,
        BillingSubscriptionAliasInner parameters, Context context) {
        return beginCreateOrUpdateAsync(billingAccountName, aliasName, parameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a billing subscription alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionAliasInner createOrUpdate(String billingAccountName, String aliasName,
        BillingSubscriptionAliasInner parameters) {
        return createOrUpdateAsync(billingAccountName, aliasName, parameters).block();
    }

    /**
     * Creates or updates a billing subscription by its alias ID. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param aliasName The ID that uniquely identifies a subscription alias.
     * @param parameters A billing subscription alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a billing subscription alias.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BillingSubscriptionAliasInner createOrUpdate(String billingAccountName, String aliasName,
        BillingSubscriptionAliasInner parameters, Context context) {
        return createOrUpdateAsync(billingAccountName, aliasName, parameters, context).block();
    }

    /**
     * Lists the subscription aliases for a billing account. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionAliasInner>> listByBillingAccountSinglePageAsync(
        String billingAccountName, Boolean includeDeleted, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByBillingAccount(this.client.getEndpoint(), billingAccountName, includeDeleted,
                    this.client.getApiVersion(), filter, orderBy, top, skip, count, search, accept, context))
            .<PagedResponse<BillingSubscriptionAliasInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the subscription aliases for a billing account. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionAliasInner>> listByBillingAccountSinglePageAsync(
        String billingAccountName, Boolean includeDeleted, String filter, String orderBy, Long top, Long skip,
        Boolean count, String search, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (billingAccountName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter billingAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByBillingAccount(this.client.getEndpoint(), billingAccountName, includeDeleted,
                this.client.getApiVersion(), filter, orderBy, top, skip, count, search, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Lists the subscription aliases for a billing account. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionAliasInner> listByBillingAccountAsync(String billingAccountName,
        Boolean includeDeleted, String filter, String orderBy, Long top, Long skip, Boolean count, String search) {
        return new PagedFlux<>(() -> listByBillingAccountSinglePageAsync(billingAccountName, includeDeleted, filter,
            orderBy, top, skip, count, search), nextLink -> listByBillingAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscription aliases for a billing account. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionAliasInner> listByBillingAccountAsync(String billingAccountName) {
        final Boolean includeDeleted = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedFlux<>(() -> listByBillingAccountSinglePageAsync(billingAccountName, includeDeleted, filter,
            orderBy, top, skip, count, search), nextLink -> listByBillingAccountNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the subscription aliases for a billing account. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BillingSubscriptionAliasInner> listByBillingAccountAsync(String billingAccountName,
        Boolean includeDeleted, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        return new PagedFlux<>(() -> listByBillingAccountSinglePageAsync(billingAccountName, includeDeleted, filter,
            orderBy, top, skip, count, search, context),
            nextLink -> listByBillingAccountNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the subscription aliases for a billing account. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionAliasInner> listByBillingAccount(String billingAccountName) {
        final Boolean includeDeleted = null;
        final String filter = null;
        final String orderBy = null;
        final Long top = null;
        final Long skip = null;
        final Boolean count = null;
        final String search = null;
        return new PagedIterable<>(
            listByBillingAccountAsync(billingAccountName, includeDeleted, filter, orderBy, top, skip, count, search));
    }

    /**
     * Lists the subscription aliases for a billing account. The operation is supported for seat based billing
     * subscriptions.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param includeDeleted Can be used to get deleted billing subscriptions.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param count The count query option allows clients to request a count of the matching resources included with the
     * resources in the response.
     * @param search The search query option allows clients to request items within a collection matching a free-text
     * search expression. search is only supported for string fields.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BillingSubscriptionAliasInner> listByBillingAccount(String billingAccountName,
        Boolean includeDeleted, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        return new PagedIterable<>(listByBillingAccountAsync(billingAccountName, includeDeleted, filter, orderBy, top,
            skip, count, search, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionAliasInner>>
        listByBillingAccountNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByBillingAccountNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<BillingSubscriptionAliasInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BillingSubscriptionAliasInner>> listByBillingAccountNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByBillingAccountNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
