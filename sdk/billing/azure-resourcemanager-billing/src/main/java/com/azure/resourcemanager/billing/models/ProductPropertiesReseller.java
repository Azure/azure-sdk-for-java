// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Reseller for this product. The fields is not available for Microsoft Partner Agreement products.
 */
@Immutable
public final class ProductPropertiesReseller extends Reseller {
    /*
     * The name of the reseller.
     */
    private String description;

    /*
     * The MPN ID of the reseller.
     */
    private String resellerId;

    /**
     * Creates an instance of ProductPropertiesReseller class.
     */
    public ProductPropertiesReseller() {
    }

    /**
     * Get the description property: The name of the reseller.
     * 
     * @return the description value.
     */
    @Override
    public String description() {
        return this.description;
    }

    /**
     * Get the resellerId property: The MPN ID of the reseller.
     * 
     * @return the resellerId value.
     */
    @Override
    public String resellerId() {
        return this.resellerId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductPropertiesReseller from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductPropertiesReseller if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProductPropertiesReseller.
     */
    public static ProductPropertiesReseller fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductPropertiesReseller deserializedProductPropertiesReseller = new ProductPropertiesReseller();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resellerId".equals(fieldName)) {
                    deserializedProductPropertiesReseller.resellerId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedProductPropertiesReseller.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductPropertiesReseller;
        });
    }
}
