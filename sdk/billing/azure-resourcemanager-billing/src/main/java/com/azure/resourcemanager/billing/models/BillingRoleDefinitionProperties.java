// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.fluent.models.BillingPermissionInner;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a role definition.
 */
@Fluent
public final class BillingRoleDefinitionProperties implements JsonSerializable<BillingRoleDefinitionProperties> {
    /*
     * The role description.
     */
    private String description;

    /*
     * The billingPermissions the role has.
     */
    private List<BillingPermissionInner> permissions;

    /*
     * The name of the role.
     */
    private String roleName;

    /**
     * Creates an instance of BillingRoleDefinitionProperties class.
     */
    public BillingRoleDefinitionProperties() {
    }

    /**
     * Get the description property: The role description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the permissions property: The billingPermissions the role has.
     * 
     * @return the permissions value.
     */
    public List<BillingPermissionInner> permissions() {
        return this.permissions;
    }

    /**
     * Get the roleName property: The name of the role.
     * 
     * @return the roleName value.
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * Set the roleName property: The name of the role.
     * 
     * @param roleName the roleName value to set.
     * @return the BillingRoleDefinitionProperties object itself.
     */
    public BillingRoleDefinitionProperties withRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (permissions() != null) {
            permissions().forEach(e -> e.validate());
        }
        if (roleName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property roleName in model BillingRoleDefinitionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BillingRoleDefinitionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("roleName", this.roleName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingRoleDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingRoleDefinitionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BillingRoleDefinitionProperties.
     */
    public static BillingRoleDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingRoleDefinitionProperties deserializedBillingRoleDefinitionProperties
                = new BillingRoleDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("roleName".equals(fieldName)) {
                    deserializedBillingRoleDefinitionProperties.roleName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedBillingRoleDefinitionProperties.description = reader.getString();
                } else if ("permissions".equals(fieldName)) {
                    List<BillingPermissionInner> permissions
                        = reader.readArray(reader1 -> BillingPermissionInner.fromJson(reader1));
                    deserializedBillingRoleDefinitionProperties.permissions = permissions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingRoleDefinitionProperties;
        });
    }
}
