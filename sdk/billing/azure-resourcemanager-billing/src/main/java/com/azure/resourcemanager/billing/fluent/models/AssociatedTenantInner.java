// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.models.AssociatedTenantProperties;
import com.azure.resourcemanager.billing.models.ProxyResourceWithTags;
import java.io.IOException;
import java.util.Map;

/**
 * An associated tenant.
 */
@Fluent
public final class AssociatedTenantInner extends ProxyResourceWithTags {
    /*
     * An associated tenant.
     */
    private AssociatedTenantProperties properties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AssociatedTenantInner class.
     */
    public AssociatedTenantInner() {
    }

    /**
     * Get the properties property: An associated tenant.
     * 
     * @return the properties value.
     */
    public AssociatedTenantProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: An associated tenant.
     * 
     * @param properties the properties value to set.
     * @return the AssociatedTenantInner object itself.
     */
    public AssociatedTenantInner withProperties(AssociatedTenantProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssociatedTenantInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssociatedTenantInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssociatedTenantInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssociatedTenantInner.
     */
    public static AssociatedTenantInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssociatedTenantInner deserializedAssociatedTenantInner = new AssociatedTenantInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAssociatedTenantInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAssociatedTenantInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAssociatedTenantInner.type = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAssociatedTenantInner.withTags(tags);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAssociatedTenantInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedAssociatedTenantInner.properties = AssociatedTenantProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssociatedTenantInner;
        });
    }
}
