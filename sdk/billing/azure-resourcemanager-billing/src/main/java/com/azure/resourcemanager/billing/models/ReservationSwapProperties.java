// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of reservation swap.
 */
@Fluent
public final class ReservationSwapProperties implements JsonSerializable<ReservationSwapProperties> {
    /*
     * Resource id of the source reservation that gets swapped. Format of the resource id is
     * /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     */
    private String swapSource;

    /*
     * Reservation resource id that the original resource gets swapped to. Format of the resource id is
     * /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     */
    private String swapDestination;

    /**
     * Creates an instance of ReservationSwapProperties class.
     */
    public ReservationSwapProperties() {
    }

    /**
     * Get the swapSource property: Resource id of the source reservation that gets swapped. Format of the resource id
     * is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
     * 
     * @return the swapSource value.
     */
    public String swapSource() {
        return this.swapSource;
    }

    /**
     * Set the swapSource property: Resource id of the source reservation that gets swapped. Format of the resource id
     * is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
     * 
     * @param swapSource the swapSource value to set.
     * @return the ReservationSwapProperties object itself.
     */
    public ReservationSwapProperties withSwapSource(String swapSource) {
        this.swapSource = swapSource;
        return this;
    }

    /**
     * Get the swapDestination property: Reservation resource id that the original resource gets swapped to. Format of
     * the resource id is
     * /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
     * 
     * @return the swapDestination value.
     */
    public String swapDestination() {
        return this.swapDestination;
    }

    /**
     * Set the swapDestination property: Reservation resource id that the original resource gets swapped to. Format of
     * the resource id is
     * /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
     * 
     * @param swapDestination the swapDestination value to set.
     * @return the ReservationSwapProperties object itself.
     */
    public ReservationSwapProperties withSwapDestination(String swapDestination) {
        this.swapDestination = swapDestination;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("swapSource", this.swapSource);
        jsonWriter.writeStringField("swapDestination", this.swapDestination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationSwapProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationSwapProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationSwapProperties.
     */
    public static ReservationSwapProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationSwapProperties deserializedReservationSwapProperties = new ReservationSwapProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("swapSource".equals(fieldName)) {
                    deserializedReservationSwapProperties.swapSource = reader.getString();
                } else if ("swapDestination".equals(fieldName)) {
                    deserializedReservationSwapProperties.swapDestination = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationSwapProperties;
        });
    }
}
