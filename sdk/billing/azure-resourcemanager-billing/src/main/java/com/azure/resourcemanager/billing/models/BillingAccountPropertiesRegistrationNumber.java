// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes the registration number of the organization linked with the billing account.
 */
@Fluent
public final class BillingAccountPropertiesRegistrationNumber extends RegistrationNumber {
    /*
     * The types of registration number allowed based on the country of the billing account.
     */
    private List<String> type;

    /*
     * Identifies if the registration number is required for the billing account.
     */
    private Boolean required;

    /**
     * Creates an instance of BillingAccountPropertiesRegistrationNumber class.
     */
    public BillingAccountPropertiesRegistrationNumber() {
    }

    /**
     * Get the type property: The types of registration number allowed based on the country of the billing account.
     * 
     * @return the type value.
     */
    @Override
    public List<String> type() {
        return this.type;
    }

    /**
     * Get the required property: Identifies if the registration number is required for the billing account.
     * 
     * @return the required value.
     */
    @Override
    public Boolean required() {
        return this.required;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingAccountPropertiesRegistrationNumber withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", id());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingAccountPropertiesRegistrationNumber from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingAccountPropertiesRegistrationNumber if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingAccountPropertiesRegistrationNumber.
     */
    public static BillingAccountPropertiesRegistrationNumber fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingAccountPropertiesRegistrationNumber deserializedBillingAccountPropertiesRegistrationNumber
                = new BillingAccountPropertiesRegistrationNumber();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedBillingAccountPropertiesRegistrationNumber.withId(reader.getString());
                } else if ("required".equals(fieldName)) {
                    deserializedBillingAccountPropertiesRegistrationNumber.required
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("type".equals(fieldName)) {
                    List<String> type = reader.readArray(reader1 -> reader1.getString());
                    deserializedBillingAccountPropertiesRegistrationNumber.type = type;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingAccountPropertiesRegistrationNumber;
        });
    }
}
