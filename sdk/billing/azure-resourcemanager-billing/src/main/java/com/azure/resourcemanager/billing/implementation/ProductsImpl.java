// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billing.fluent.ProductsClient;
import com.azure.resourcemanager.billing.fluent.models.MoveProductEligibilityResultInner;
import com.azure.resourcemanager.billing.fluent.models.ProductInner;
import com.azure.resourcemanager.billing.models.MoveProductEligibilityResult;
import com.azure.resourcemanager.billing.models.MoveProductRequest;
import com.azure.resourcemanager.billing.models.Product;
import com.azure.resourcemanager.billing.models.ProductPatch;
import com.azure.resourcemanager.billing.models.Products;

public final class ProductsImpl implements Products {
    private static final ClientLogger LOGGER = new ClientLogger(ProductsImpl.class);

    private final ProductsClient innerClient;

    private final com.azure.resourcemanager.billing.BillingManager serviceManager;

    public ProductsImpl(ProductsClient innerClient, com.azure.resourcemanager.billing.BillingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Product> listByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName) {
        PagedIterable<ProductInner> inner
            = this.serviceClient().listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    public PagedIterable<Product> listByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        PagedIterable<ProductInner> inner = this.serviceClient()
            .listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, filter, orderBy, top,
                skip, count, search, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    public PagedIterable<Product> listByBillingProfile(String billingAccountName, String billingProfileName) {
        PagedIterable<ProductInner> inner
            = this.serviceClient().listByBillingProfile(billingAccountName, billingProfileName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    public PagedIterable<Product> listByBillingProfile(String billingAccountName, String billingProfileName,
        String filter, String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        PagedIterable<ProductInner> inner = this.serviceClient()
            .listByBillingProfile(billingAccountName, billingProfileName, filter, orderBy, top, skip, count, search,
                context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    public PagedIterable<Product> listByCustomer(String billingAccountName, String customerName) {
        PagedIterable<ProductInner> inner = this.serviceClient().listByCustomer(billingAccountName, customerName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    public PagedIterable<Product> listByCustomer(String billingAccountName, String customerName, String filter,
        String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        PagedIterable<ProductInner> inner = this.serviceClient()
            .listByCustomer(billingAccountName, customerName, filter, orderBy, top, skip, count, search, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    public Product move(String billingAccountName, String productName, MoveProductRequest parameters) {
        ProductInner inner = this.serviceClient().move(billingAccountName, productName, parameters);
        if (inner != null) {
            return new ProductImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Product move(String billingAccountName, String productName, MoveProductRequest parameters, Context context) {
        ProductInner inner = this.serviceClient().move(billingAccountName, productName, parameters, context);
        if (inner != null) {
            return new ProductImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MoveProductEligibilityResult> validateMoveEligibilityWithResponse(String billingAccountName,
        String productName, MoveProductRequest parameters, Context context) {
        Response<MoveProductEligibilityResultInner> inner = this.serviceClient()
            .validateMoveEligibilityWithResponse(billingAccountName, productName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MoveProductEligibilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MoveProductEligibilityResult validateMoveEligibility(String billingAccountName, String productName,
        MoveProductRequest parameters) {
        MoveProductEligibilityResultInner inner
            = this.serviceClient().validateMoveEligibility(billingAccountName, productName, parameters);
        if (inner != null) {
            return new MoveProductEligibilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Product> getWithResponse(String billingAccountName, String productName, Context context) {
        Response<ProductInner> inner = this.serviceClient().getWithResponse(billingAccountName, productName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProductImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Product get(String billingAccountName, String productName) {
        ProductInner inner = this.serviceClient().get(billingAccountName, productName);
        if (inner != null) {
            return new ProductImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Product> updateWithResponse(String billingAccountName, String productName, ProductPatch parameters,
        Context context) {
        Response<ProductInner> inner
            = this.serviceClient().updateWithResponse(billingAccountName, productName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProductImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Product update(String billingAccountName, String productName, ProductPatch parameters) {
        ProductInner inner = this.serviceClient().update(billingAccountName, productName, parameters);
        if (inner != null) {
            return new ProductImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Product> listByBillingAccount(String billingAccountName) {
        PagedIterable<ProductInner> inner = this.serviceClient().listByBillingAccount(billingAccountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    public PagedIterable<Product> listByBillingAccount(String billingAccountName, String filter, String orderBy,
        Long top, Long skip, Boolean count, String search, Context context) {
        PagedIterable<ProductInner> inner = this.serviceClient()
            .listByBillingAccount(billingAccountName, filter, orderBy, top, skip, count, search, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProductImpl(inner1, this.manager()));
    }

    private ProductsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.billing.BillingManager manager() {
        return this.serviceManager;
    }
}
