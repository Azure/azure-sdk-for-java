// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The details of refund request.
 */
@Fluent
public class RefundDetailsSummary implements JsonSerializable<RefundDetailsSummary> {
    /*
     * Date when the refund was requested.
     */
    private OffsetDateTime requestedOn;

    /*
     * Date when the refund was approved.
     */
    private OffsetDateTime approvedOn;

    /*
     * Date when the refund was completed.
     */
    private OffsetDateTime completedOn;

    /*
     * The amount of refund requested.
     */
    private RefundDetailsSummaryAmountRequested amountRequested;

    /*
     * The amount refunded.
     */
    private RefundDetailsSummaryAmountRefunded amountRefunded;

    /*
     * The invoice ID of the rebill invoice for a refund.
     */
    private String rebillInvoiceId;

    /*
     * The number of transactions refunded.
     */
    private Integer transactionCount;

    /*
     * The status of refund request.
     */
    private RefundStatus refundStatus;

    /*
     * The ID of refund operation.
     */
    private String refundOperationId;

    /*
     * The reason for refund.
     */
    private RefundReasonCode refundReason;

    /**
     * Creates an instance of RefundDetailsSummary class.
     */
    public RefundDetailsSummary() {
    }

    /**
     * Get the requestedOn property: Date when the refund was requested.
     * 
     * @return the requestedOn value.
     */
    public OffsetDateTime requestedOn() {
        return this.requestedOn;
    }

    /**
     * Set the requestedOn property: Date when the refund was requested.
     * 
     * @param requestedOn the requestedOn value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withRequestedOn(OffsetDateTime requestedOn) {
        this.requestedOn = requestedOn;
        return this;
    }

    /**
     * Get the approvedOn property: Date when the refund was approved.
     * 
     * @return the approvedOn value.
     */
    public OffsetDateTime approvedOn() {
        return this.approvedOn;
    }

    /**
     * Set the approvedOn property: Date when the refund was approved.
     * 
     * @param approvedOn the approvedOn value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withApprovedOn(OffsetDateTime approvedOn) {
        this.approvedOn = approvedOn;
        return this;
    }

    /**
     * Get the completedOn property: Date when the refund was completed.
     * 
     * @return the completedOn value.
     */
    public OffsetDateTime completedOn() {
        return this.completedOn;
    }

    /**
     * Set the completedOn property: Date when the refund was completed.
     * 
     * @param completedOn the completedOn value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withCompletedOn(OffsetDateTime completedOn) {
        this.completedOn = completedOn;
        return this;
    }

    /**
     * Get the amountRequested property: The amount of refund requested.
     * 
     * @return the amountRequested value.
     */
    public RefundDetailsSummaryAmountRequested amountRequested() {
        return this.amountRequested;
    }

    /**
     * Set the amountRequested property: The amount of refund requested.
     * 
     * @param amountRequested the amountRequested value to set.
     * @return the RefundDetailsSummary object itself.
     */
    public RefundDetailsSummary withAmountRequested(RefundDetailsSummaryAmountRequested amountRequested) {
        this.amountRequested = amountRequested;
        return this;
    }

    /**
     * Get the amountRefunded property: The amount refunded.
     * 
     * @return the amountRefunded value.
     */
    public RefundDetailsSummaryAmountRefunded amountRefunded() {
        return this.amountRefunded;
    }

    /**
     * Set the amountRefunded property: The amount refunded.
     * 
     * @param amountRefunded the amountRefunded value to set.
     * @return the RefundDetailsSummary object itself.
     */
    public RefundDetailsSummary withAmountRefunded(RefundDetailsSummaryAmountRefunded amountRefunded) {
        this.amountRefunded = amountRefunded;
        return this;
    }

    /**
     * Get the rebillInvoiceId property: The invoice ID of the rebill invoice for a refund.
     * 
     * @return the rebillInvoiceId value.
     */
    public String rebillInvoiceId() {
        return this.rebillInvoiceId;
    }

    /**
     * Set the rebillInvoiceId property: The invoice ID of the rebill invoice for a refund.
     * 
     * @param rebillInvoiceId the rebillInvoiceId value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withRebillInvoiceId(String rebillInvoiceId) {
        this.rebillInvoiceId = rebillInvoiceId;
        return this;
    }

    /**
     * Get the transactionCount property: The number of transactions refunded.
     * 
     * @return the transactionCount value.
     */
    public Integer transactionCount() {
        return this.transactionCount;
    }

    /**
     * Set the transactionCount property: The number of transactions refunded.
     * 
     * @param transactionCount the transactionCount value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withTransactionCount(Integer transactionCount) {
        this.transactionCount = transactionCount;
        return this;
    }

    /**
     * Get the refundStatus property: The status of refund request.
     * 
     * @return the refundStatus value.
     */
    public RefundStatus refundStatus() {
        return this.refundStatus;
    }

    /**
     * Set the refundStatus property: The status of refund request.
     * 
     * @param refundStatus the refundStatus value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withRefundStatus(RefundStatus refundStatus) {
        this.refundStatus = refundStatus;
        return this;
    }

    /**
     * Get the refundOperationId property: The ID of refund operation.
     * 
     * @return the refundOperationId value.
     */
    public String refundOperationId() {
        return this.refundOperationId;
    }

    /**
     * Set the refundOperationId property: The ID of refund operation.
     * 
     * @param refundOperationId the refundOperationId value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withRefundOperationId(String refundOperationId) {
        this.refundOperationId = refundOperationId;
        return this;
    }

    /**
     * Get the refundReason property: The reason for refund.
     * 
     * @return the refundReason value.
     */
    public RefundReasonCode refundReason() {
        return this.refundReason;
    }

    /**
     * Set the refundReason property: The reason for refund.
     * 
     * @param refundReason the refundReason value to set.
     * @return the RefundDetailsSummary object itself.
     */
    RefundDetailsSummary withRefundReason(RefundReasonCode refundReason) {
        this.refundReason = refundReason;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (amountRequested() != null) {
            amountRequested().validate();
        }
        if (amountRefunded() != null) {
            amountRefunded().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("amountRequested", this.amountRequested);
        jsonWriter.writeJsonField("amountRefunded", this.amountRefunded);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RefundDetailsSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RefundDetailsSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RefundDetailsSummary.
     */
    public static RefundDetailsSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RefundDetailsSummary deserializedRefundDetailsSummary = new RefundDetailsSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requestedOn".equals(fieldName)) {
                    deserializedRefundDetailsSummary.requestedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("approvedOn".equals(fieldName)) {
                    deserializedRefundDetailsSummary.approvedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("completedOn".equals(fieldName)) {
                    deserializedRefundDetailsSummary.completedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("amountRequested".equals(fieldName)) {
                    deserializedRefundDetailsSummary.amountRequested
                        = RefundDetailsSummaryAmountRequested.fromJson(reader);
                } else if ("amountRefunded".equals(fieldName)) {
                    deserializedRefundDetailsSummary.amountRefunded
                        = RefundDetailsSummaryAmountRefunded.fromJson(reader);
                } else if ("rebillInvoiceId".equals(fieldName)) {
                    deserializedRefundDetailsSummary.rebillInvoiceId = reader.getString();
                } else if ("transactionCount".equals(fieldName)) {
                    deserializedRefundDetailsSummary.transactionCount = reader.getNullable(JsonReader::getInt);
                } else if ("refundStatus".equals(fieldName)) {
                    deserializedRefundDetailsSummary.refundStatus = RefundStatus.fromString(reader.getString());
                } else if ("refundOperationId".equals(fieldName)) {
                    deserializedRefundDetailsSummary.refundOperationId = reader.getString();
                } else if ("refundReason".equals(fieldName)) {
                    deserializedRefundDetailsSummary.refundReason = RefundReasonCode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRefundDetailsSummary;
        });
    }
}
