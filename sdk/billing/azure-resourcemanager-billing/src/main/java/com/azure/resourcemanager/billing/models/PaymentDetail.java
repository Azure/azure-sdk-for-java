// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Objects;

/**
 * Information about payment related to a savings plan order.
 */
@Fluent
public final class PaymentDetail implements JsonSerializable<PaymentDetail> {
    /*
     * Date when the payment needs to be done.
     */
    private LocalDate dueDate;

    /*
     * Date when the transaction is completed. Null when it is scheduled.
     */
    private LocalDate paymentDate;

    /*
     * Amount in pricing currency. Tax not included.
     */
    private Price pricingCurrencyTotal;

    /*
     * Amount charged in Billing currency. Tax not included. Is null for future payments
     */
    private Price billingCurrencyTotal;

    /*
     * Describes whether the payment is completed, failed, pending, cancelled or scheduled in the future.
     */
    private PaymentStatus status;

    /*
     * Extended status information
     */
    private ExtendedStatusInfo extendedStatusInfo;

    /**
     * Creates an instance of PaymentDetail class.
     */
    public PaymentDetail() {
    }

    /**
     * Get the dueDate property: Date when the payment needs to be done.
     * 
     * @return the dueDate value.
     */
    public LocalDate dueDate() {
        return this.dueDate;
    }

    /**
     * Set the dueDate property: Date when the payment needs to be done.
     * 
     * @param dueDate the dueDate value to set.
     * @return the PaymentDetail object itself.
     */
    public PaymentDetail withDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
        return this;
    }

    /**
     * Get the paymentDate property: Date when the transaction is completed. Null when it is scheduled.
     * 
     * @return the paymentDate value.
     */
    public LocalDate paymentDate() {
        return this.paymentDate;
    }

    /**
     * Set the paymentDate property: Date when the transaction is completed. Null when it is scheduled.
     * 
     * @param paymentDate the paymentDate value to set.
     * @return the PaymentDetail object itself.
     */
    public PaymentDetail withPaymentDate(LocalDate paymentDate) {
        this.paymentDate = paymentDate;
        return this;
    }

    /**
     * Get the pricingCurrencyTotal property: Amount in pricing currency. Tax not included.
     * 
     * @return the pricingCurrencyTotal value.
     */
    public Price pricingCurrencyTotal() {
        return this.pricingCurrencyTotal;
    }

    /**
     * Set the pricingCurrencyTotal property: Amount in pricing currency. Tax not included.
     * 
     * @param pricingCurrencyTotal the pricingCurrencyTotal value to set.
     * @return the PaymentDetail object itself.
     */
    public PaymentDetail withPricingCurrencyTotal(Price pricingCurrencyTotal) {
        this.pricingCurrencyTotal = pricingCurrencyTotal;
        return this;
    }

    /**
     * Get the billingCurrencyTotal property: Amount charged in Billing currency. Tax not included. Is null for future
     * payments.
     * 
     * @return the billingCurrencyTotal value.
     */
    public Price billingCurrencyTotal() {
        return this.billingCurrencyTotal;
    }

    /**
     * Set the billingCurrencyTotal property: Amount charged in Billing currency. Tax not included. Is null for future
     * payments.
     * 
     * @param billingCurrencyTotal the billingCurrencyTotal value to set.
     * @return the PaymentDetail object itself.
     */
    public PaymentDetail withBillingCurrencyTotal(Price billingCurrencyTotal) {
        this.billingCurrencyTotal = billingCurrencyTotal;
        return this;
    }

    /**
     * Get the status property: Describes whether the payment is completed, failed, pending, cancelled or scheduled in
     * the future.
     * 
     * @return the status value.
     */
    public PaymentStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Describes whether the payment is completed, failed, pending, cancelled or scheduled in
     * the future.
     * 
     * @param status the status value to set.
     * @return the PaymentDetail object itself.
     */
    public PaymentDetail withStatus(PaymentStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the extendedStatusInfo property: Extended status information.
     * 
     * @return the extendedStatusInfo value.
     */
    public ExtendedStatusInfo extendedStatusInfo() {
        return this.extendedStatusInfo;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (pricingCurrencyTotal() != null) {
            pricingCurrencyTotal().validate();
        }
        if (billingCurrencyTotal() != null) {
            billingCurrencyTotal().validate();
        }
        if (extendedStatusInfo() != null) {
            extendedStatusInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dueDate", Objects.toString(this.dueDate, null));
        jsonWriter.writeStringField("paymentDate", Objects.toString(this.paymentDate, null));
        jsonWriter.writeJsonField("pricingCurrencyTotal", this.pricingCurrencyTotal);
        jsonWriter.writeJsonField("billingCurrencyTotal", this.billingCurrencyTotal);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PaymentDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PaymentDetail if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PaymentDetail.
     */
    public static PaymentDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PaymentDetail deserializedPaymentDetail = new PaymentDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dueDate".equals(fieldName)) {
                    deserializedPaymentDetail.dueDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("paymentDate".equals(fieldName)) {
                    deserializedPaymentDetail.paymentDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("pricingCurrencyTotal".equals(fieldName)) {
                    deserializedPaymentDetail.pricingCurrencyTotal = Price.fromJson(reader);
                } else if ("billingCurrencyTotal".equals(fieldName)) {
                    deserializedPaymentDetail.billingCurrencyTotal = Price.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedPaymentDetail.status = PaymentStatus.fromString(reader.getString());
                } else if ("extendedStatusInfo".equals(fieldName)) {
                    deserializedPaymentDetail.extendedStatusInfo = ExtendedStatusInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPaymentDetail;
        });
    }
}
