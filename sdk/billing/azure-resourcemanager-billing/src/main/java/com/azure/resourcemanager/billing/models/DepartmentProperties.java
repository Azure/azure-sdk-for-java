// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Optional grouping of enrollment accounts to segment costs into logical groupings and set budgets.
 */
@Fluent
public final class DepartmentProperties implements JsonSerializable<DepartmentProperties> {
    /*
     * The cost center associated with the department.
     */
    private String costCenter;

    /*
     * The name of the department.
     */
    private String displayName;

    /*
     * The ID that uniquely identifies the department.
     */
    private String id;

    /*
     * The status of the department.
     */
    private String status;

    /**
     * Creates an instance of DepartmentProperties class.
     */
    public DepartmentProperties() {
    }

    /**
     * Get the costCenter property: The cost center associated with the department.
     * 
     * @return the costCenter value.
     */
    public String costCenter() {
        return this.costCenter;
    }

    /**
     * Set the costCenter property: The cost center associated with the department.
     * 
     * @param costCenter the costCenter value to set.
     * @return the DepartmentProperties object itself.
     */
    public DepartmentProperties withCostCenter(String costCenter) {
        this.costCenter = costCenter;
        return this;
    }

    /**
     * Get the displayName property: The name of the department.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name of the department.
     * 
     * @param displayName the displayName value to set.
     * @return the DepartmentProperties object itself.
     */
    public DepartmentProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the id property: The ID that uniquely identifies the department.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the status property: The status of the department.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("costCenter", this.costCenter);
        jsonWriter.writeStringField("displayName", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DepartmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DepartmentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DepartmentProperties.
     */
    public static DepartmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DepartmentProperties deserializedDepartmentProperties = new DepartmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("costCenter".equals(fieldName)) {
                    deserializedDepartmentProperties.costCenter = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedDepartmentProperties.displayName = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedDepartmentProperties.id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDepartmentProperties.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDepartmentProperties;
        });
    }
}
