// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.models.AppliedScopeType;
import com.azure.resourcemanager.billing.models.InstanceFlexibility;
import com.azure.resourcemanager.billing.models.ReservationAppliedScopeProperties;
import com.azure.resourcemanager.billing.models.ReservationBillingPlan;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Properties of reservation purchase request.
 */
@Fluent
public final class ReservationPurchaseRequestProperties
    implements JsonSerializable<ReservationPurchaseRequestProperties> {
    /*
     * The reserved source type of the reservation, e.g. virtual machine.
     */
    private String reservedResourceType;

    /*
     * Subscription that will be charged for purchasing reservation or savings plan
     */
    private String billingScopeId;

    /*
     * The term of the reservation, e.g. P1Y
     */
    private String term;

    /*
     * Represent the billing plans.
     */
    private ReservationBillingPlan billingPlan;

    /*
     * Quantity of the skus that are part of the reservation. Must be greater than zero.
     */
    private Integer quantity;

    /*
     * Friendly name of the reservation
     */
    private String displayName;

    /*
     * Type of the Applied Scope.
     */
    private AppliedScopeType appliedScopeType;

    /*
     * List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.
     */
    private List<String> appliedScopes;

    /*
     * Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId
     * and managementGroupId if AppliedScopeType is ManagementGroup
     */
    private ReservationAppliedScopeProperties appliedScopeProperties;

    /*
     * Setting this to true will automatically purchase a new benefit on the expiration date time.
     */
    private Boolean renew;

    /*
     * Properties specific to each reserved resource type. Not required if not applicable.
     */
    private ReservationPurchaseRequestPropertiesReservedResourceProperties innerReservedResourceProperties;

    /*
     * Allows reservation discount to be applied across skus within the same auto fit group. Not all skus support
     * instance size flexibility.
     */
    private InstanceFlexibility instanceFlexibility;

    /*
     * This is the date-time when the Azure hybrid benefit needs to be reviewed.
     */
    private OffsetDateTime reviewDateTime;

    /**
     * Creates an instance of ReservationPurchaseRequestProperties class.
     */
    public ReservationPurchaseRequestProperties() {
    }

    /**
     * Get the reservedResourceType property: The reserved source type of the reservation, e.g. virtual machine.
     * 
     * @return the reservedResourceType value.
     */
    public String reservedResourceType() {
        return this.reservedResourceType;
    }

    /**
     * Get the billingScopeId property: Subscription that will be charged for purchasing reservation or savings plan.
     * 
     * @return the billingScopeId value.
     */
    public String billingScopeId() {
        return this.billingScopeId;
    }

    /**
     * Get the term property: The term of the reservation, e.g. P1Y.
     * 
     * @return the term value.
     */
    public String term() {
        return this.term;
    }

    /**
     * Get the billingPlan property: Represent the billing plans.
     * 
     * @return the billingPlan value.
     */
    public ReservationBillingPlan billingPlan() {
        return this.billingPlan;
    }

    /**
     * Set the billingPlan property: Represent the billing plans.
     * 
     * @param billingPlan the billingPlan value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withBillingPlan(ReservationBillingPlan billingPlan) {
        this.billingPlan = billingPlan;
        return this;
    }

    /**
     * Get the quantity property: Quantity of the skus that are part of the reservation. Must be greater than zero.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: Quantity of the skus that are part of the reservation. Must be greater than zero.
     * 
     * @param quantity the quantity value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the displayName property: Friendly name of the reservation.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Friendly name of the reservation.
     * 
     * @param displayName the displayName value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the appliedScopeType property: Type of the Applied Scope.
     * 
     * @return the appliedScopeType value.
     */
    public AppliedScopeType appliedScopeType() {
        return this.appliedScopeType;
    }

    /**
     * Set the appliedScopeType property: Type of the Applied Scope.
     * 
     * @param appliedScopeType the appliedScopeType value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withAppliedScopeType(AppliedScopeType appliedScopeType) {
        this.appliedScopeType = appliedScopeType;
        return this;
    }

    /**
     * Get the appliedScopes property: List of the subscriptions that the benefit will be applied. Do not specify if
     * AppliedScopeType is Shared.
     * 
     * @return the appliedScopes value.
     */
    public List<String> appliedScopes() {
        return this.appliedScopes;
    }

    /**
     * Set the appliedScopes property: List of the subscriptions that the benefit will be applied. Do not specify if
     * AppliedScopeType is Shared.
     * 
     * @param appliedScopes the appliedScopes value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withAppliedScopes(List<String> appliedScopes) {
        this.appliedScopes = appliedScopes;
        return this;
    }

    /**
     * Get the appliedScopeProperties property: Properties specific to applied scope type. Not required if not
     * applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup.
     * 
     * @return the appliedScopeProperties value.
     */
    public ReservationAppliedScopeProperties appliedScopeProperties() {
        return this.appliedScopeProperties;
    }

    /**
     * Set the appliedScopeProperties property: Properties specific to applied scope type. Not required if not
     * applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup.
     * 
     * @param appliedScopeProperties the appliedScopeProperties value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties
        withAppliedScopeProperties(ReservationAppliedScopeProperties appliedScopeProperties) {
        this.appliedScopeProperties = appliedScopeProperties;
        return this;
    }

    /**
     * Get the renew property: Setting this to true will automatically purchase a new benefit on the expiration date
     * time.
     * 
     * @return the renew value.
     */
    public Boolean renew() {
        return this.renew;
    }

    /**
     * Set the renew property: Setting this to true will automatically purchase a new benefit on the expiration date
     * time.
     * 
     * @param renew the renew value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withRenew(Boolean renew) {
        this.renew = renew;
        return this;
    }

    /**
     * Get the innerReservedResourceProperties property: Properties specific to each reserved resource type. Not
     * required if not applicable.
     * 
     * @return the innerReservedResourceProperties value.
     */
    private ReservationPurchaseRequestPropertiesReservedResourceProperties innerReservedResourceProperties() {
        return this.innerReservedResourceProperties;
    }

    /**
     * Get the instanceFlexibility property: Allows reservation discount to be applied across skus within the same auto
     * fit group. Not all skus support instance size flexibility.
     * 
     * @return the instanceFlexibility value.
     */
    public InstanceFlexibility instanceFlexibility() {
        return this.instanceFlexibility;
    }

    /**
     * Set the instanceFlexibility property: Allows reservation discount to be applied across skus within the same auto
     * fit group. Not all skus support instance size flexibility.
     * 
     * @param instanceFlexibility the instanceFlexibility value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withInstanceFlexibility(InstanceFlexibility instanceFlexibility) {
        this.instanceFlexibility = instanceFlexibility;
        return this;
    }

    /**
     * Get the reviewDateTime property: This is the date-time when the Azure hybrid benefit needs to be reviewed.
     * 
     * @return the reviewDateTime value.
     */
    public OffsetDateTime reviewDateTime() {
        return this.reviewDateTime;
    }

    /**
     * Set the reviewDateTime property: This is the date-time when the Azure hybrid benefit needs to be reviewed.
     * 
     * @param reviewDateTime the reviewDateTime value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties withReviewDateTime(OffsetDateTime reviewDateTime) {
        this.reviewDateTime = reviewDateTime;
        return this;
    }

    /**
     * Get the instanceFlexibility property: Turning this on will apply the reservation discount to other VMs in the
     * same VM size group. Only specify for VirtualMachines reserved resource type.
     * 
     * @return the instanceFlexibility value.
     */
    public InstanceFlexibility instanceFlexibilityReservedResourcePropertiesInstanceFlexibility() {
        return this.innerReservedResourceProperties() == null
            ? null
            : this.innerReservedResourceProperties().instanceFlexibility();
    }

    /**
     * Set the instanceFlexibility property: Turning this on will apply the reservation discount to other VMs in the
     * same VM size group. Only specify for VirtualMachines reserved resource type.
     * 
     * @param instanceFlexibility the instanceFlexibility value to set.
     * @return the ReservationPurchaseRequestProperties object itself.
     */
    public ReservationPurchaseRequestProperties
        withInstanceFlexibilityReservedResourcePropertiesInstanceFlexibility(InstanceFlexibility instanceFlexibility) {
        if (this.innerReservedResourceProperties() == null) {
            this.innerReservedResourceProperties = new ReservationPurchaseRequestPropertiesReservedResourceProperties();
        }
        this.innerReservedResourceProperties().withInstanceFlexibility(instanceFlexibility);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appliedScopeProperties() != null) {
            appliedScopeProperties().validate();
        }
        if (innerReservedResourceProperties() != null) {
            innerReservedResourceProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingPlan", this.billingPlan == null ? null : this.billingPlan.toString());
        jsonWriter.writeNumberField("quantity", this.quantity);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("appliedScopeType",
            this.appliedScopeType == null ? null : this.appliedScopeType.toString());
        jsonWriter.writeArrayField("appliedScopes", this.appliedScopes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("appliedScopeProperties", this.appliedScopeProperties);
        jsonWriter.writeBooleanField("renew", this.renew);
        jsonWriter.writeJsonField("reservedResourceProperties", this.innerReservedResourceProperties);
        jsonWriter.writeStringField("instanceFlexibility",
            this.instanceFlexibility == null ? null : this.instanceFlexibility.toString());
        jsonWriter.writeStringField("reviewDateTime",
            this.reviewDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.reviewDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationPurchaseRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationPurchaseRequestProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationPurchaseRequestProperties.
     */
    public static ReservationPurchaseRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationPurchaseRequestProperties deserializedReservationPurchaseRequestProperties
                = new ReservationPurchaseRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reservedResourceType".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.reservedResourceType = reader.getString();
                } else if ("billingScopeId".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.billingScopeId = reader.getString();
                } else if ("term".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.term = reader.getString();
                } else if ("billingPlan".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.billingPlan
                        = ReservationBillingPlan.fromString(reader.getString());
                } else if ("quantity".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.quantity = reader.getNullable(JsonReader::getInt);
                } else if ("displayName".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.displayName = reader.getString();
                } else if ("appliedScopeType".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.appliedScopeType
                        = AppliedScopeType.fromString(reader.getString());
                } else if ("appliedScopes".equals(fieldName)) {
                    List<String> appliedScopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedReservationPurchaseRequestProperties.appliedScopes = appliedScopes;
                } else if ("appliedScopeProperties".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.appliedScopeProperties
                        = ReservationAppliedScopeProperties.fromJson(reader);
                } else if ("renew".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.renew = reader.getNullable(JsonReader::getBoolean);
                } else if ("reservedResourceProperties".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.innerReservedResourceProperties
                        = ReservationPurchaseRequestPropertiesReservedResourceProperties.fromJson(reader);
                } else if ("instanceFlexibility".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.instanceFlexibility
                        = InstanceFlexibility.fromString(reader.getString());
                } else if ("reviewDateTime".equals(fieldName)) {
                    deserializedReservationPurchaseRequestProperties.reviewDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationPurchaseRequestProperties;
        });
    }
}
