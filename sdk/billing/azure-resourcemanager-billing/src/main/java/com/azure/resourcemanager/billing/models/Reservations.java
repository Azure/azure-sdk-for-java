// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Reservations.
 */
public interface Reservations {
    /**
     * Lists the reservations in the billing account and the roll up counts of reservations group by provisioning
     * states.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of reservations and summary of roll out count of reservations in each state as paginated
     * response with {@link PagedIterable}.
     */
    PagedIterable<Reservation> listByBillingAccount(String billingAccountName);

    /**
     * Lists the reservations in the billing account and the roll up counts of reservations group by provisioning
     * states.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param skiptoken The number of reservations to skip from the list before returning results.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the reservations group by provisioning
     * states.
     * @param selectedState The selected provisioning state.
     * @param take The number of reservations to return in API response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of reservations and summary of roll out count of reservations in each state as paginated
     * response with {@link PagedIterable}.
     */
    PagedIterable<Reservation> listByBillingAccount(String billingAccountName, String filter, String orderBy,
        Float skiptoken, String refreshSummary, String selectedState, Float take, Context context);

    /**
     * Lists the reservations for a billing profile and the roll up counts of reservations group by provisioning state.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of reservations and summary of roll out count of reservations in each state as paginated
     * response with {@link PagedIterable}.
     */
    PagedIterable<Reservation> listByBillingProfile(String billingAccountName, String billingProfileName);

    /**
     * Lists the reservations for a billing profile and the roll up counts of reservations group by provisioning state.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param skiptoken The number of reservations to skip from the list before returning results.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the reservations group by provisioning
     * states.
     * @param selectedState The selected provisioning state.
     * @param take The number of reservations to return in API response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of reservations and summary of roll out count of reservations in each state as paginated
     * response with {@link PagedIterable}.
     */
    PagedIterable<Reservation> listByBillingProfile(String billingAccountName, String billingProfileName, String filter,
        String orderBy, Float skiptoken, String refreshSummary, String selectedState, Float take, Context context);

    /**
     * Get Reservation details in the billing account.
     * 
     * Get specific Reservation details in the billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param reservationOrderId Order Id of the reservation.
     * @param reservationId Id of the reservation item.
     * @param expand May be used to expand the detail information of some properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific Reservation details in the billing account along with {@link Response}.
     */
    Response<Reservation> getByReservationOrderWithResponse(String billingAccountName, String reservationOrderId,
        String reservationId, String expand, Context context);

    /**
     * Get Reservation details in the billing account.
     * 
     * Get specific Reservation details in the billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param reservationOrderId Order Id of the reservation.
     * @param reservationId Id of the reservation item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific Reservation details in the billing account.
     */
    Reservation getByReservationOrder(String billingAccountName, String reservationOrderId, String reservationId);

    /**
     * Update reservation by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param reservationOrderId Order Id of the reservation.
     * @param reservationId Id of the reservation item.
     * @param body Request body for patching a reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definition of the reservation.
     */
    Reservation updateByBillingAccount(String billingAccountName, String reservationOrderId, String reservationId,
        PatchModel body);

    /**
     * Update reservation by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param reservationOrderId Order Id of the reservation.
     * @param reservationId Id of the reservation item.
     * @param body Request body for patching a reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definition of the reservation.
     */
    Reservation updateByBillingAccount(String billingAccountName, String reservationOrderId, String reservationId,
        PatchModel body, Context context);

    /**
     * Get Reservations in a given reservation Order in the billing account
     * 
     * List Reservations within a single ReservationOrder in the billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param reservationOrderId Order Id of the reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of `Reservations as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Reservation> listByReservationOrder(String billingAccountName, String reservationOrderId);

    /**
     * Get Reservations in a given reservation Order in the billing account
     * 
     * List Reservations within a single ReservationOrder in the billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param reservationOrderId Order Id of the reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of `Reservations as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Reservation> listByReservationOrder(String billingAccountName, String reservationOrderId,
        Context context);
}
