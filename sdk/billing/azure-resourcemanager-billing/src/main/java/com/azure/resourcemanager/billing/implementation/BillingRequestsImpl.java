// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billing.fluent.BillingRequestsClient;
import com.azure.resourcemanager.billing.fluent.models.BillingRequestInner;
import com.azure.resourcemanager.billing.models.BillingRequest;
import com.azure.resourcemanager.billing.models.BillingRequests;

public final class BillingRequestsImpl implements BillingRequests {
    private static final ClientLogger LOGGER = new ClientLogger(BillingRequestsImpl.class);

    private final BillingRequestsClient innerClient;

    private final com.azure.resourcemanager.billing.BillingManager serviceManager;

    public BillingRequestsImpl(BillingRequestsClient innerClient,
        com.azure.resourcemanager.billing.BillingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BillingRequest> listByBillingProfile(String billingAccountName, String billingProfileName) {
        PagedIterable<BillingRequestInner> inner
            = this.serviceClient().listByBillingProfile(billingAccountName, billingProfileName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByBillingProfile(String billingAccountName, String billingProfileName,
        String filter, String orderBy, Long top, Long skip, Boolean count, String search, Context context) {
        PagedIterable<BillingRequestInner> inner = this.serviceClient()
            .listByBillingProfile(billingAccountName, billingProfileName, filter, orderBy, top, skip, count, search,
                context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByCustomer(String billingAccountName, String billingProfileName,
        String customerName) {
        PagedIterable<BillingRequestInner> inner
            = this.serviceClient().listByCustomer(billingAccountName, billingProfileName, customerName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByCustomer(String billingAccountName, String billingProfileName,
        String customerName, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        PagedIterable<BillingRequestInner> inner = this.serviceClient()
            .listByCustomer(billingAccountName, billingProfileName, customerName, filter, orderBy, top, skip, count,
                search, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName) {
        PagedIterable<BillingRequestInner> inner
            = this.serviceClient().listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String filter, String orderBy, Long top, Long skip, Boolean count, String search,
        Context context) {
        PagedIterable<BillingRequestInner> inner = this.serviceClient()
            .listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, filter, orderBy, top,
                skip, count, search, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByBillingAccount(String billingAccountName) {
        PagedIterable<BillingRequestInner> inner = this.serviceClient().listByBillingAccount(billingAccountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByBillingAccount(String billingAccountName, String filter, String orderBy,
        Long top, Long skip, Boolean count, String search, Context context) {
        PagedIterable<BillingRequestInner> inner = this.serviceClient()
            .listByBillingAccount(billingAccountName, filter, orderBy, top, skip, count, search, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public Response<BillingRequest> getWithResponse(String billingRequestName, Context context) {
        Response<BillingRequestInner> inner = this.serviceClient().getWithResponse(billingRequestName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new BillingRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BillingRequest get(String billingRequestName) {
        BillingRequestInner inner = this.serviceClient().get(billingRequestName);
        if (inner != null) {
            return new BillingRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRequest createOrUpdate(String billingRequestName, BillingRequestInner parameters) {
        BillingRequestInner inner = this.serviceClient().createOrUpdate(billingRequestName, parameters);
        if (inner != null) {
            return new BillingRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BillingRequest createOrUpdate(String billingRequestName, BillingRequestInner parameters, Context context) {
        BillingRequestInner inner = this.serviceClient().createOrUpdate(billingRequestName, parameters, context);
        if (inner != null) {
            return new BillingRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<BillingRequest> listByUser() {
        PagedIterable<BillingRequestInner> inner = this.serviceClient().listByUser();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    public PagedIterable<BillingRequest> listByUser(String filter, String orderBy, Long top, Long skip, Boolean count,
        String search, Context context) {
        PagedIterable<BillingRequestInner> inner
            = this.serviceClient().listByUser(filter, orderBy, top, skip, count, search, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BillingRequestImpl(inner1, this.manager()));
    }

    private BillingRequestsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.billing.BillingManager manager() {
        return this.serviceManager;
    }
}
