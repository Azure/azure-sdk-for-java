// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The refund details of a transaction.
 */
@Fluent
public final class TransactionPropertiesRefundTransactionDetails extends RefundTransactionDetails {
    /**
     * Creates an instance of TransactionPropertiesRefundTransactionDetails class.
     */
    public TransactionPropertiesRefundTransactionDetails() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionPropertiesRefundTransactionDetails
        withAmountRequested(RefundTransactionDetailsAmountRequested amountRequested) {
        super.withAmountRequested(amountRequested);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionPropertiesRefundTransactionDetails
        withAmountRefunded(RefundTransactionDetailsAmountRefunded amountRefunded) {
        super.withAmountRefunded(amountRefunded);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionPropertiesRefundTransactionDetails withRefundOperationId(String refundOperationId) {
        super.withRefundOperationId(refundOperationId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (amountRequested() != null) {
            amountRequested().validate();
        }
        if (amountRefunded() != null) {
            amountRefunded().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("amountRequested", amountRequested());
        jsonWriter.writeJsonField("amountRefunded", amountRefunded());
        jsonWriter.writeStringField("refundOperationId", refundOperationId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransactionPropertiesRefundTransactionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransactionPropertiesRefundTransactionDetails if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TransactionPropertiesRefundTransactionDetails.
     */
    public static TransactionPropertiesRefundTransactionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransactionPropertiesRefundTransactionDetails deserializedTransactionPropertiesRefundTransactionDetails
                = new TransactionPropertiesRefundTransactionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amountRequested".equals(fieldName)) {
                    deserializedTransactionPropertiesRefundTransactionDetails
                        .withAmountRequested(RefundTransactionDetailsAmountRequested.fromJson(reader));
                } else if ("amountRefunded".equals(fieldName)) {
                    deserializedTransactionPropertiesRefundTransactionDetails
                        .withAmountRefunded(RefundTransactionDetailsAmountRefunded.fromJson(reader));
                } else if ("refundOperationId".equals(fieldName)) {
                    deserializedTransactionPropertiesRefundTransactionDetails.withRefundOperationId(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransactionPropertiesRefundTransactionDetails;
        });
    }
}
