// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.models.ReservationBillingPlan;
import com.azure.resourcemanager.billing.models.ReservationExtendedStatusInfo;
import com.azure.resourcemanager.billing.models.ReservationOrderBillingPlanInformation;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Objects;

/**
 * Properties of a reservation order.
 */
@Fluent
public final class ReservationOrderProperty implements JsonSerializable<ReservationOrderProperty> {
    /*
     * Friendly name for user to easily identified the reservation order.
     */
    private String displayName;

    /*
     * Enrollment id of the reservation order.
     */
    private String enrollmentId;

    /*
     * Fully-qualified identifier of the customerId where the benefit is applied. Present only for Enterprise Agreement
     * PartnerLed customers.
     */
    private String customerId;

    /*
     * Billing profile Id associated to this reservation order.
     */
    private String billingProfileId;

    /*
     * Billing account Id associated to this reservation order.
     */
    private String billingAccountId;

    /*
     * This is the DateTime when the reservation order was initially requested for purchase.
     */
    private OffsetDateTime requestDateTime;

    /*
     * This is the DateTime when the reservation order was created.
     */
    private OffsetDateTime createdDateTime;

    /*
     * This is the date when the reservation order will expire.
     */
    private LocalDate expiryDate;

    /*
     * This is the date-time when the reservation order will expire.
     */
    private OffsetDateTime expiryDateTime;

    /*
     * This is the DateTime when the reservation benefit started.
     */
    private OffsetDateTime benefitStartTime;

    /*
     * Total original quantity of the skus purchased in the reservation order.
     */
    private Integer originalQuantity;

    /*
     * The term of the reservation, e.g. P1Y
     */
    private String term;

    /*
     * The provisioning state of the reservation, e.g. Succeeded
     */
    private String provisioningState;

    /*
     * Represent the billing plans.
     */
    private ReservationBillingPlan billingPlan;

    /*
     * Information describing the type of billing plan for this reservation order.
     */
    private ReservationOrderBillingPlanInformation planInformation;

    /*
     * The reservations property.
     */
    private List<ReservationInner> reservations;

    /*
     * This is the date-time when the Azure Hybrid Benefit needs to be reviewed.
     */
    private OffsetDateTime reviewDateTime;

    /*
     * Extended status information for the reservation.
     */
    private ReservationExtendedStatusInfo extendedStatusInfo;

    /*
     * Represents UPN
     */
    private String productCode;

    /**
     * Creates an instance of ReservationOrderProperty class.
     */
    public ReservationOrderProperty() {
    }

    /**
     * Get the displayName property: Friendly name for user to easily identified the reservation order.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Friendly name for user to easily identified the reservation order.
     * 
     * @param displayName the displayName value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the enrollmentId property: Enrollment id of the reservation order.
     * 
     * @return the enrollmentId value.
     */
    public String enrollmentId() {
        return this.enrollmentId;
    }

    /**
     * Set the enrollmentId property: Enrollment id of the reservation order.
     * 
     * @param enrollmentId the enrollmentId value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withEnrollmentId(String enrollmentId) {
        this.enrollmentId = enrollmentId;
        return this;
    }

    /**
     * Get the customerId property: Fully-qualified identifier of the customerId where the benefit is applied. Present
     * only for Enterprise Agreement PartnerLed customers.
     * 
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Set the customerId property: Fully-qualified identifier of the customerId where the benefit is applied. Present
     * only for Enterprise Agreement PartnerLed customers.
     * 
     * @param customerId the customerId value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }

    /**
     * Get the billingProfileId property: Billing profile Id associated to this reservation order.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Set the billingProfileId property: Billing profile Id associated to this reservation order.
     * 
     * @param billingProfileId the billingProfileId value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withBillingProfileId(String billingProfileId) {
        this.billingProfileId = billingProfileId;
        return this;
    }

    /**
     * Get the billingAccountId property: Billing account Id associated to this reservation order.
     * 
     * @return the billingAccountId value.
     */
    public String billingAccountId() {
        return this.billingAccountId;
    }

    /**
     * Set the billingAccountId property: Billing account Id associated to this reservation order.
     * 
     * @param billingAccountId the billingAccountId value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withBillingAccountId(String billingAccountId) {
        this.billingAccountId = billingAccountId;
        return this;
    }

    /**
     * Get the requestDateTime property: This is the DateTime when the reservation order was initially requested for
     * purchase.
     * 
     * @return the requestDateTime value.
     */
    public OffsetDateTime requestDateTime() {
        return this.requestDateTime;
    }

    /**
     * Set the requestDateTime property: This is the DateTime when the reservation order was initially requested for
     * purchase.
     * 
     * @param requestDateTime the requestDateTime value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withRequestDateTime(OffsetDateTime requestDateTime) {
        this.requestDateTime = requestDateTime;
        return this;
    }

    /**
     * Get the createdDateTime property: This is the DateTime when the reservation order was created.
     * 
     * @return the createdDateTime value.
     */
    public OffsetDateTime createdDateTime() {
        return this.createdDateTime;
    }

    /**
     * Set the createdDateTime property: This is the DateTime when the reservation order was created.
     * 
     * @param createdDateTime the createdDateTime value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withCreatedDateTime(OffsetDateTime createdDateTime) {
        this.createdDateTime = createdDateTime;
        return this;
    }

    /**
     * Get the expiryDate property: This is the date when the reservation order will expire.
     * 
     * @return the expiryDate value.
     */
    public LocalDate expiryDate() {
        return this.expiryDate;
    }

    /**
     * Set the expiryDate property: This is the date when the reservation order will expire.
     * 
     * @param expiryDate the expiryDate value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withExpiryDate(LocalDate expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * Get the expiryDateTime property: This is the date-time when the reservation order will expire.
     * 
     * @return the expiryDateTime value.
     */
    public OffsetDateTime expiryDateTime() {
        return this.expiryDateTime;
    }

    /**
     * Set the expiryDateTime property: This is the date-time when the reservation order will expire.
     * 
     * @param expiryDateTime the expiryDateTime value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withExpiryDateTime(OffsetDateTime expiryDateTime) {
        this.expiryDateTime = expiryDateTime;
        return this;
    }

    /**
     * Get the benefitStartTime property: This is the DateTime when the reservation benefit started.
     * 
     * @return the benefitStartTime value.
     */
    public OffsetDateTime benefitStartTime() {
        return this.benefitStartTime;
    }

    /**
     * Set the benefitStartTime property: This is the DateTime when the reservation benefit started.
     * 
     * @param benefitStartTime the benefitStartTime value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withBenefitStartTime(OffsetDateTime benefitStartTime) {
        this.benefitStartTime = benefitStartTime;
        return this;
    }

    /**
     * Get the originalQuantity property: Total original quantity of the skus purchased in the reservation order.
     * 
     * @return the originalQuantity value.
     */
    public Integer originalQuantity() {
        return this.originalQuantity;
    }

    /**
     * Set the originalQuantity property: Total original quantity of the skus purchased in the reservation order.
     * 
     * @param originalQuantity the originalQuantity value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withOriginalQuantity(Integer originalQuantity) {
        this.originalQuantity = originalQuantity;
        return this;
    }

    /**
     * Get the term property: The term of the reservation, e.g. P1Y.
     * 
     * @return the term value.
     */
    public String term() {
        return this.term;
    }

    /**
     * Get the provisioningState property: The provisioning state of the reservation, e.g. Succeeded.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the billingPlan property: Represent the billing plans.
     * 
     * @return the billingPlan value.
     */
    public ReservationBillingPlan billingPlan() {
        return this.billingPlan;
    }

    /**
     * Set the billingPlan property: Represent the billing plans.
     * 
     * @param billingPlan the billingPlan value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withBillingPlan(ReservationBillingPlan billingPlan) {
        this.billingPlan = billingPlan;
        return this;
    }

    /**
     * Get the planInformation property: Information describing the type of billing plan for this reservation order.
     * 
     * @return the planInformation value.
     */
    public ReservationOrderBillingPlanInformation planInformation() {
        return this.planInformation;
    }

    /**
     * Set the planInformation property: Information describing the type of billing plan for this reservation order.
     * 
     * @param planInformation the planInformation value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withPlanInformation(ReservationOrderBillingPlanInformation planInformation) {
        this.planInformation = planInformation;
        return this;
    }

    /**
     * Get the reservations property: The reservations property.
     * 
     * @return the reservations value.
     */
    public List<ReservationInner> reservations() {
        return this.reservations;
    }

    /**
     * Set the reservations property: The reservations property.
     * 
     * @param reservations the reservations value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withReservations(List<ReservationInner> reservations) {
        this.reservations = reservations;
        return this;
    }

    /**
     * Get the reviewDateTime property: This is the date-time when the Azure Hybrid Benefit needs to be reviewed.
     * 
     * @return the reviewDateTime value.
     */
    public OffsetDateTime reviewDateTime() {
        return this.reviewDateTime;
    }

    /**
     * Set the reviewDateTime property: This is the date-time when the Azure Hybrid Benefit needs to be reviewed.
     * 
     * @param reviewDateTime the reviewDateTime value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withReviewDateTime(OffsetDateTime reviewDateTime) {
        this.reviewDateTime = reviewDateTime;
        return this;
    }

    /**
     * Get the extendedStatusInfo property: Extended status information for the reservation.
     * 
     * @return the extendedStatusInfo value.
     */
    public ReservationExtendedStatusInfo extendedStatusInfo() {
        return this.extendedStatusInfo;
    }

    /**
     * Set the extendedStatusInfo property: Extended status information for the reservation.
     * 
     * @param extendedStatusInfo the extendedStatusInfo value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withExtendedStatusInfo(ReservationExtendedStatusInfo extendedStatusInfo) {
        this.extendedStatusInfo = extendedStatusInfo;
        return this;
    }

    /**
     * Get the productCode property: Represents UPN.
     * 
     * @return the productCode value.
     */
    public String productCode() {
        return this.productCode;
    }

    /**
     * Set the productCode property: Represents UPN.
     * 
     * @param productCode the productCode value to set.
     * @return the ReservationOrderProperty object itself.
     */
    public ReservationOrderProperty withProductCode(String productCode) {
        this.productCode = productCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (planInformation() != null) {
            planInformation().validate();
        }
        if (reservations() != null) {
            reservations().forEach(e -> e.validate());
        }
        if (extendedStatusInfo() != null) {
            extendedStatusInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("enrollmentId", this.enrollmentId);
        jsonWriter.writeStringField("customerId", this.customerId);
        jsonWriter.writeStringField("billingProfileId", this.billingProfileId);
        jsonWriter.writeStringField("billingAccountId", this.billingAccountId);
        jsonWriter.writeStringField("requestDateTime",
            this.requestDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.requestDateTime));
        jsonWriter.writeStringField("createdDateTime",
            this.createdDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDateTime));
        jsonWriter.writeStringField("expiryDate", Objects.toString(this.expiryDate, null));
        jsonWriter.writeStringField("expiryDateTime",
            this.expiryDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryDateTime));
        jsonWriter.writeStringField("benefitStartTime",
            this.benefitStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.benefitStartTime));
        jsonWriter.writeNumberField("originalQuantity", this.originalQuantity);
        jsonWriter.writeStringField("billingPlan", this.billingPlan == null ? null : this.billingPlan.toString());
        jsonWriter.writeJsonField("planInformation", this.planInformation);
        jsonWriter.writeArrayField("reservations", this.reservations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("reviewDateTime",
            this.reviewDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.reviewDateTime));
        jsonWriter.writeJsonField("extendedStatusInfo", this.extendedStatusInfo);
        jsonWriter.writeStringField("productCode", this.productCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationOrderProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationOrderProperty if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationOrderProperty.
     */
    public static ReservationOrderProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationOrderProperty deserializedReservationOrderProperty = new ReservationOrderProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedReservationOrderProperty.displayName = reader.getString();
                } else if ("enrollmentId".equals(fieldName)) {
                    deserializedReservationOrderProperty.enrollmentId = reader.getString();
                } else if ("customerId".equals(fieldName)) {
                    deserializedReservationOrderProperty.customerId = reader.getString();
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedReservationOrderProperty.billingProfileId = reader.getString();
                } else if ("billingAccountId".equals(fieldName)) {
                    deserializedReservationOrderProperty.billingAccountId = reader.getString();
                } else if ("requestDateTime".equals(fieldName)) {
                    deserializedReservationOrderProperty.requestDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedReservationOrderProperty.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiryDate".equals(fieldName)) {
                    deserializedReservationOrderProperty.expiryDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("expiryDateTime".equals(fieldName)) {
                    deserializedReservationOrderProperty.expiryDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("benefitStartTime".equals(fieldName)) {
                    deserializedReservationOrderProperty.benefitStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("originalQuantity".equals(fieldName)) {
                    deserializedReservationOrderProperty.originalQuantity = reader.getNullable(JsonReader::getInt);
                } else if ("term".equals(fieldName)) {
                    deserializedReservationOrderProperty.term = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedReservationOrderProperty.provisioningState = reader.getString();
                } else if ("billingPlan".equals(fieldName)) {
                    deserializedReservationOrderProperty.billingPlan
                        = ReservationBillingPlan.fromString(reader.getString());
                } else if ("planInformation".equals(fieldName)) {
                    deserializedReservationOrderProperty.planInformation
                        = ReservationOrderBillingPlanInformation.fromJson(reader);
                } else if ("reservations".equals(fieldName)) {
                    List<ReservationInner> reservations
                        = reader.readArray(reader1 -> ReservationInner.fromJson(reader1));
                    deserializedReservationOrderProperty.reservations = reservations;
                } else if ("reviewDateTime".equals(fieldName)) {
                    deserializedReservationOrderProperty.reviewDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("extendedStatusInfo".equals(fieldName)) {
                    deserializedReservationOrderProperty.extendedStatusInfo
                        = ReservationExtendedStatusInfo.fromJson(reader);
                } else if ("productCode".equals(fieldName)) {
                    deserializedReservationOrderProperty.productCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationOrderProperty;
        });
    }
}
