// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * An invoice payment.
 */
@Fluent
public final class Payment implements JsonSerializable<Payment> {
    /*
     * The paid amount.
     */
    private PaymentAmount amount;

    /*
     * The date when the payment was made.
     */
    private OffsetDateTime date;

    /*
     * The ID that uniquely identifies the payment method used for the invoice.
     */
    private String paymentMethodId;

    /*
     * The family of payment method.
     */
    private PaymentMethodFamily paymentMethodFamily;

    /*
     * The type of payment method.
     */
    private String paymentMethodType;

    /*
     * The type of payment.
     */
    private String paymentType;

    /**
     * Creates an instance of Payment class.
     */
    public Payment() {
    }

    /**
     * Get the amount property: The paid amount.
     * 
     * @return the amount value.
     */
    public PaymentAmount amount() {
        return this.amount;
    }

    /**
     * Set the amount property: The paid amount.
     * 
     * @param amount the amount value to set.
     * @return the Payment object itself.
     */
    public Payment withAmount(PaymentAmount amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get the date property: The date when the payment was made.
     * 
     * @return the date value.
     */
    public OffsetDateTime date() {
        return this.date;
    }

    /**
     * Get the paymentMethodId property: The ID that uniquely identifies the payment method used for the invoice.
     * 
     * @return the paymentMethodId value.
     */
    public String paymentMethodId() {
        return this.paymentMethodId;
    }

    /**
     * Get the paymentMethodFamily property: The family of payment method.
     * 
     * @return the paymentMethodFamily value.
     */
    public PaymentMethodFamily paymentMethodFamily() {
        return this.paymentMethodFamily;
    }

    /**
     * Get the paymentMethodType property: The type of payment method.
     * 
     * @return the paymentMethodType value.
     */
    public String paymentMethodType() {
        return this.paymentMethodType;
    }

    /**
     * Get the paymentType property: The type of payment.
     * 
     * @return the paymentType value.
     */
    public String paymentType() {
        return this.paymentType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (amount() != null) {
            amount().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("amount", this.amount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Payment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Payment if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Payment.
     */
    public static Payment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Payment deserializedPayment = new Payment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amount".equals(fieldName)) {
                    deserializedPayment.amount = PaymentAmount.fromJson(reader);
                } else if ("date".equals(fieldName)) {
                    deserializedPayment.date = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("paymentMethodId".equals(fieldName)) {
                    deserializedPayment.paymentMethodId = reader.getString();
                } else if ("paymentMethodFamily".equals(fieldName)) {
                    deserializedPayment.paymentMethodFamily = PaymentMethodFamily.fromString(reader.getString());
                } else if ("paymentMethodType".equals(fieldName)) {
                    deserializedPayment.paymentMethodType = reader.getString();
                } else if ("paymentType".equals(fieldName)) {
                    deserializedPayment.paymentType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPayment;
        });
    }
}
