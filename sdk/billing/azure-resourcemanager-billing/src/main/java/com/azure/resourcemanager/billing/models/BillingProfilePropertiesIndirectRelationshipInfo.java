// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
 */
@Fluent
public final class BillingProfilePropertiesIndirectRelationshipInfo extends IndirectRelationshipInfo {
    /**
     * Creates an instance of BillingProfilePropertiesIndirectRelationshipInfo class.
     */
    public BillingProfilePropertiesIndirectRelationshipInfo() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingProfilePropertiesIndirectRelationshipInfo withBillingAccountName(String billingAccountName) {
        super.withBillingAccountName(billingAccountName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingProfilePropertiesIndirectRelationshipInfo withBillingProfileName(String billingProfileName) {
        super.withBillingProfileName(billingProfileName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingProfilePropertiesIndirectRelationshipInfo withDisplayName(String displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("billingAccountName", billingAccountName());
        jsonWriter.writeStringField("billingProfileName", billingProfileName());
        jsonWriter.writeStringField("displayName", displayName());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingProfilePropertiesIndirectRelationshipInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingProfilePropertiesIndirectRelationshipInfo if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingProfilePropertiesIndirectRelationshipInfo.
     */
    public static BillingProfilePropertiesIndirectRelationshipInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingProfilePropertiesIndirectRelationshipInfo deserializedBillingProfilePropertiesIndirectRelationshipInfo
                = new BillingProfilePropertiesIndirectRelationshipInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingAccountName".equals(fieldName)) {
                    deserializedBillingProfilePropertiesIndirectRelationshipInfo
                        .withBillingAccountName(reader.getString());
                } else if ("billingProfileName".equals(fieldName)) {
                    deserializedBillingProfilePropertiesIndirectRelationshipInfo
                        .withBillingProfileName(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedBillingProfilePropertiesIndirectRelationshipInfo.withDisplayName(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingProfilePropertiesIndirectRelationshipInfo;
        });
    }
}
