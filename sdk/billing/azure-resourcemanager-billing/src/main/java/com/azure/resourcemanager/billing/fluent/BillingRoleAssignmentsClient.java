// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billing.fluent.models.BillingRoleAssignmentInner;
import com.azure.resourcemanager.billing.fluent.models.BillingRoleAssignmentListResultInner;
import com.azure.resourcemanager.billing.models.BillingRoleAssignmentProperties;

/**
 * An instance of this class provides access to all the operations defined in BillingRoleAssignmentsClient.
 */
public interface BillingRoleAssignmentsClient {
    /**
     * Deletes a role assignment on a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteByBillingProfileWithResponse(String billingAccountName, String billingProfileName,
        String billingRoleAssignmentName, Context context);

    /**
     * Deletes a role assignment on a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteByBillingProfile(String billingAccountName, String billingProfileName, String billingRoleAssignmentName);

    /**
     * Gets a role assignment for the caller on a billing profile. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a billing profile along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BillingRoleAssignmentInner> getByBillingProfileWithResponse(String billingAccountName,
        String billingProfileName, String billingRoleAssignmentName, Context context);

    /**
     * Gets a role assignment for the caller on a billing profile. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a billing profile.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner getByBillingProfile(String billingAccountName, String billingProfileName,
        String billingRoleAssignmentName);

    /**
     * Lists the role assignments for the caller on a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByBillingProfile(String billingAccountName,
        String billingProfileName);

    /**
     * Lists the role assignments for the caller on a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByBillingProfile(String billingAccountName, String billingProfileName,
        String filter, Long top, Long skip, Context context);

    /**
     * Adds a role assignment on a billing profile. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateByBillingProfile(
        String billingAccountName, String billingProfileName, BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on a billing profile. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateByBillingProfile(
        String billingAccountName, String billingProfileName, BillingRoleAssignmentProperties parameters,
        Context context);

    /**
     * Adds a role assignment on a billing profile. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByBillingProfile(String billingAccountName, String billingProfileName,
        BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on a billing profile. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByBillingProfile(String billingAccountName, String billingProfileName,
        BillingRoleAssignmentProperties parameters, Context context);

    /**
     * Deletes a role assignment on a customer. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteByCustomerWithResponse(String billingAccountName, String billingProfileName,
        String customerName, String billingRoleAssignmentName, Context context);

    /**
     * Deletes a role assignment on a customer. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteByCustomer(String billingAccountName, String billingProfileName, String customerName,
        String billingRoleAssignmentName);

    /**
     * Gets a role assignment for the caller on a customer. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a customer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BillingRoleAssignmentInner> getByCustomerWithResponse(String billingAccountName, String billingProfileName,
        String customerName, String billingRoleAssignmentName, Context context);

    /**
     * Gets a role assignment for the caller on a customer. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a customer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner getByCustomer(String billingAccountName, String billingProfileName, String customerName,
        String billingRoleAssignmentName);

    /**
     * Lists the role assignments for the caller on customer. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByCustomer(String billingAccountName, String billingProfileName,
        String customerName);

    /**
     * Lists the role assignments for the caller on customer. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByCustomer(String billingAccountName, String billingProfileName,
        String customerName, String filter, Long top, Long skip, Context context);

    /**
     * Adds a role assignment on a customer. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateByCustomer(
        String billingAccountName, String billingProfileName, String customerName,
        BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on a customer. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateByCustomer(
        String billingAccountName, String billingProfileName, String customerName,
        BillingRoleAssignmentProperties parameters, Context context);

    /**
     * Adds a role assignment on a customer. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByCustomer(String billingAccountName, String billingProfileName,
        String customerName, BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on a customer. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByCustomer(String billingAccountName, String billingProfileName,
        String customerName, BillingRoleAssignmentProperties parameters, Context context);

    /**
     * Lists the role assignments for the caller on a customer while fetching user info for each role assignment. The
     * operation is supported for billing accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByCustomer(String billingAccountName, String billingProfileName, String customerName);

    /**
     * Lists the role assignments for the caller on a customer while fetching user info for each role assignment. The
     * operation is supported for billing accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByCustomer(String billingAccountName, String billingProfileName, String customerName,
            Boolean resolveScopeDisplayNames, String filter, Context context);

    /**
     * Lists the role assignments for the caller on a customer while fetching user info for each role assignment. The
     * operation is supported for billing accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByCustomer(String billingAccountName, String billingProfileName,
        String customerName);

    /**
     * Lists the role assignments for the caller on a customer while fetching user info for each role assignment. The
     * operation is supported for billing accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByCustomer(String billingAccountName, String billingProfileName,
        String customerName, Boolean resolveScopeDisplayNames, String filter, Context context);

    /**
     * Deletes a role assignment on an invoice section. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteByInvoiceSectionWithResponse(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String billingRoleAssignmentName, Context context);

    /**
     * Deletes a role assignment on an invoice section. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteByInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName,
        String billingRoleAssignmentName);

    /**
     * Gets a role assignment for the caller on an invoice section. The operation is supported for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on an invoice section along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BillingRoleAssignmentInner> getByInvoiceSectionWithResponse(String billingAccountName,
        String billingProfileName, String invoiceSectionName, String billingRoleAssignmentName, Context context);

    /**
     * Gets a role assignment for the caller on an invoice section. The operation is supported for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on an invoice section.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner getByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String billingRoleAssignmentName);

    /**
     * Lists the role assignments for the caller on an invoice section. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName);

    /**
     * Lists the role assignments for the caller on an invoice section. The operation is supported for billing accounts
     * with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String filter, Long top, Long skip, Context context);

    /**
     * Adds a role assignment on an invoice section. The operation is supported for billing accounts with agreement type
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateByInvoiceSection(
        String billingAccountName, String billingProfileName, String invoiceSectionName,
        BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on an invoice section. The operation is supported for billing accounts with agreement type
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateByInvoiceSection(
        String billingAccountName, String billingProfileName, String invoiceSectionName,
        BillingRoleAssignmentProperties parameters, Context context);

    /**
     * Adds a role assignment on an invoice section. The operation is supported for billing accounts with agreement type
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName, BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on an invoice section. The operation is supported for billing accounts with agreement type
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName, BillingRoleAssignmentProperties parameters, Context context);

    /**
     * Lists the role assignments for the caller on an invoice section while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName);

    /**
     * Lists the role assignments for the caller on an invoice section while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName,
            Boolean resolveScopeDisplayNames, String filter, Context context);

    /**
     * Lists the role assignments for the caller on an invoice section while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName);

    /**
     * Lists the role assignments for the caller on an invoice section while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByInvoiceSection(String billingAccountName, String billingProfileName,
        String invoiceSectionName, Boolean resolveScopeDisplayNames, String filter, Context context);

    /**
     * Lists the role assignments for the caller on an billing profile while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByBillingProfile(String billingAccountName, String billingProfileName);

    /**
     * Lists the role assignments for the caller on an billing profile while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByBillingProfile(String billingAccountName, String billingProfileName,
            Boolean resolveScopeDisplayNames, String filter, Context context);

    /**
     * Lists the role assignments for the caller on an billing profile while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByBillingProfile(String billingAccountName, String billingProfileName);

    /**
     * Lists the role assignments for the caller on an billing profile while fetching user info for each role
     * assignment. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or
     * Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByBillingProfile(String billingAccountName, String billingProfileName,
        Boolean resolveScopeDisplayNames, String filter, Context context);

    /**
     * Deletes a role assignment on a billing account. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteByBillingAccountWithResponse(String billingAccountName, String billingRoleAssignmentName,
        Context context);

    /**
     * Deletes a role assignment on a billing account. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteByBillingAccount(String billingAccountName, String billingRoleAssignmentName);

    /**
     * Gets a role assignment for the caller on a billing account. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a billing account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BillingRoleAssignmentInner> getByBillingAccountWithResponse(String billingAccountName,
        String billingRoleAssignmentName, Context context);

    /**
     * Gets a role assignment for the caller on a billing account. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a billing account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner getByBillingAccount(String billingAccountName, String billingRoleAssignmentName);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateOrUpdateByBillingAccount(
        String billingAccountName, String billingRoleAssignmentName, BillingRoleAssignmentInner parameters);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateOrUpdateByBillingAccount(
        String billingAccountName, String billingRoleAssignmentName, BillingRoleAssignmentInner parameters,
        Context context);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createOrUpdateByBillingAccount(String billingAccountName,
        String billingRoleAssignmentName, BillingRoleAssignmentInner parameters);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createOrUpdateByBillingAccount(String billingAccountName,
        String billingRoleAssignmentName, BillingRoleAssignmentInner parameters, Context context);

    /**
     * Lists the role assignments for the caller on a billing account. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByBillingAccount(String billingAccountName);

    /**
     * Lists the role assignments for the caller on a billing account. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param top The top query option requests the number of items in the queried collection to be included in the
     * result. The maximum supported value for top is 50.
     * @param skip The skip query option requests the number of items in the queried collection that are to be skipped
     * and not included in the result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByBillingAccount(String billingAccountName, String filter, Long top,
        Long skip, Context context);

    /**
     * Adds a role assignment on a billing account. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner>
        beginCreateByBillingAccount(String billingAccountName, BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on a billing account. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateByBillingAccount(
        String billingAccountName, BillingRoleAssignmentProperties parameters, Context context);

    /**
     * Adds a role assignment on a billing account. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByBillingAccount(String billingAccountName,
        BillingRoleAssignmentProperties parameters);

    /**
     * Adds a role assignment on a billing account. The operation is supported for billing accounts with agreement type
     * Microsoft Partner Agreement or Microsoft Customer Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createByBillingAccount(String billingAccountName,
        BillingRoleAssignmentProperties parameters, Context context);

    /**
     * Deletes a role assignment on a department. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteByDepartmentWithResponse(String billingAccountName, String departmentName,
        String billingRoleAssignmentName, Context context);

    /**
     * Deletes a role assignment on a department. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteByDepartment(String billingAccountName, String departmentName, String billingRoleAssignmentName);

    /**
     * Gets a role assignment for the caller on a department. The operation is supported only for billing accounts with
     * agreement type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a department along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BillingRoleAssignmentInner> getByDepartmentWithResponse(String billingAccountName, String departmentName,
        String billingRoleAssignmentName, Context context);

    /**
     * Gets a role assignment for the caller on a department. The operation is supported only for billing accounts with
     * agreement type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a department.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner getByDepartment(String billingAccountName, String departmentName,
        String billingRoleAssignmentName);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateOrUpdateByDepartment(
        String billingAccountName, String departmentName, String billingRoleAssignmentName,
        BillingRoleAssignmentInner parameters);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner> beginCreateOrUpdateByDepartment(
        String billingAccountName, String departmentName, String billingRoleAssignmentName,
        BillingRoleAssignmentInner parameters, Context context);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createOrUpdateByDepartment(String billingAccountName, String departmentName,
        String billingRoleAssignmentName, BillingRoleAssignmentInner parameters);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createOrUpdateByDepartment(String billingAccountName, String departmentName,
        String billingRoleAssignmentName, BillingRoleAssignmentInner parameters, Context context);

    /**
     * Lists the role assignments for the caller on a department. The operation is supported for billing accounts of
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByDepartment(String billingAccountName, String departmentName);

    /**
     * Lists the role assignments for the caller on a department. The operation is supported for billing accounts of
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param departmentName The name of the department.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByDepartment(String billingAccountName, String departmentName,
        Context context);

    /**
     * Deletes a role assignment on a enrollment Account. The operation is supported only for billing accounts with
     * agreement type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteByEnrollmentAccountWithResponse(String billingAccountName, String enrollmentAccountName,
        String billingRoleAssignmentName, Context context);

    /**
     * Deletes a role assignment on a enrollment Account. The operation is supported only for billing accounts with
     * agreement type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteByEnrollmentAccount(String billingAccountName, String enrollmentAccountName,
        String billingRoleAssignmentName);

    /**
     * Gets a role assignment for the caller on a enrollment Account. The operation is supported only for billing
     * accounts with agreement type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a enrollment Account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BillingRoleAssignmentInner> getByEnrollmentAccountWithResponse(String billingAccountName,
        String enrollmentAccountName, String billingRoleAssignmentName, Context context);

    /**
     * Gets a role assignment for the caller on a enrollment Account. The operation is supported only for billing
     * accounts with agreement type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a role assignment for the caller on a enrollment Account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner getByEnrollmentAccount(String billingAccountName, String enrollmentAccountName,
        String billingRoleAssignmentName);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner>
        beginCreateOrUpdateByEnrollmentAccount(String billingAccountName, String enrollmentAccountName,
            String billingRoleAssignmentName, BillingRoleAssignmentInner parameters);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentInner>, BillingRoleAssignmentInner>
        beginCreateOrUpdateByEnrollmentAccount(String billingAccountName, String enrollmentAccountName,
            String billingRoleAssignmentName, BillingRoleAssignmentInner parameters, Context context);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createOrUpdateByEnrollmentAccount(String billingAccountName,
        String enrollmentAccountName, String billingRoleAssignmentName, BillingRoleAssignmentInner parameters);

    /**
     * Create or update a billing role assignment. The operation is supported only for billing accounts with agreement
     * type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param parameters The properties of the billing role assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the billing role assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentInner createOrUpdateByEnrollmentAccount(String billingAccountName,
        String enrollmentAccountName, String billingRoleAssignmentName, BillingRoleAssignmentInner parameters,
        Context context);

    /**
     * Lists the role assignments for the caller on a enrollment account. The operation is supported for billing
     * accounts of type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByEnrollmentAccount(String billingAccountName,
        String enrollmentAccountName);

    /**
     * Lists the role assignments for the caller on a enrollment account. The operation is supported for billing
     * accounts of type Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param enrollmentAccountName The name of the enrollment account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BillingRoleAssignmentInner> listByEnrollmentAccount(String billingAccountName,
        String enrollmentAccountName, Context context);

    /**
     * Lists the role assignments for the caller on a billing account while fetching user info for each role assignment.
     * The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft
     * Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByBillingAccount(String billingAccountName);

    /**
     * Lists the role assignments for the caller on a billing account while fetching user info for each role assignment.
     * The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft
     * Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BillingRoleAssignmentListResultInner>, BillingRoleAssignmentListResultInner>
        beginResolveByBillingAccount(String billingAccountName, Boolean resolveScopeDisplayNames, String filter,
            Context context);

    /**
     * Lists the role assignments for the caller on a billing account while fetching user info for each role assignment.
     * The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft
     * Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByBillingAccount(String billingAccountName);

    /**
     * Lists the role assignments for the caller on a billing account while fetching user info for each role assignment.
     * The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft
     * Customer Agreement or Enterprise Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param resolveScopeDisplayNames Resolves the scope display name for each of the role assignments.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a container for a list of resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BillingRoleAssignmentListResultInner resolveByBillingAccount(String billingAccountName,
        Boolean resolveScopeDisplayNames, String filter, Context context);
}
