// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of an enrollment.
 */
@Fluent
public final class BillingAccountPropertiesEnrollmentDetails extends EnrollmentDetails {
    /*
     * The contact who receives invoices of the enrollment.
     */
    private String invoiceRecipient;

    /*
     * Markup status of enrollment, applicable only for indirect enrollments.
     */
    private MarkupStatus markupStatus;

    /*
     * The cloud of the enrollment.
     */
    private String cloud;

    /*
     * The support coverage period for the enrollment.
     */
    private String supportCoverage;

    /*
     * The support level offer associated with an enrollment.
     */
    private SupportLevel supportLevel;

    /*
     * The billing account extension opted by the company.
     */
    private ExtendedTermOption extendedTermOption;

    /*
     * The billing cycle for the enrollment.
     */
    private String billingCycle;

    /*
     * The country code of the enrollment.
     */
    private String countryCode;

    /*
     * The language for the enrollment.
     */
    private String language;

    /*
     * The channel type of the enrollment.
     */
    private String channel;

    /*
     * The billing currency for the enrollment.
     */
    private String currency;

    /**
     * Creates an instance of BillingAccountPropertiesEnrollmentDetails class.
     */
    public BillingAccountPropertiesEnrollmentDetails() {
    }

    /**
     * Get the invoiceRecipient property: The contact who receives invoices of the enrollment.
     * 
     * @return the invoiceRecipient value.
     */
    @Override
    public String invoiceRecipient() {
        return this.invoiceRecipient;
    }

    /**
     * Get the markupStatus property: Markup status of enrollment, applicable only for indirect enrollments.
     * 
     * @return the markupStatus value.
     */
    @Override
    public MarkupStatus markupStatus() {
        return this.markupStatus;
    }

    /**
     * Get the cloud property: The cloud of the enrollment.
     * 
     * @return the cloud value.
     */
    @Override
    public String cloud() {
        return this.cloud;
    }

    /**
     * Get the supportCoverage property: The support coverage period for the enrollment.
     * 
     * @return the supportCoverage value.
     */
    @Override
    public String supportCoverage() {
        return this.supportCoverage;
    }

    /**
     * Get the supportLevel property: The support level offer associated with an enrollment.
     * 
     * @return the supportLevel value.
     */
    @Override
    public SupportLevel supportLevel() {
        return this.supportLevel;
    }

    /**
     * Get the extendedTermOption property: The billing account extension opted by the company.
     * 
     * @return the extendedTermOption value.
     */
    @Override
    public ExtendedTermOption extendedTermOption() {
        return this.extendedTermOption;
    }

    /**
     * Get the billingCycle property: The billing cycle for the enrollment.
     * 
     * @return the billingCycle value.
     */
    @Override
    public String billingCycle() {
        return this.billingCycle;
    }

    /**
     * Get the countryCode property: The country code of the enrollment.
     * 
     * @return the countryCode value.
     */
    @Override
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Get the language property: The language for the enrollment.
     * 
     * @return the language value.
     */
    @Override
    public String language() {
        return this.language;
    }

    /**
     * Get the channel property: The channel type of the enrollment.
     * 
     * @return the channel value.
     */
    @Override
    public String channel() {
        return this.channel;
    }

    /**
     * Get the currency property: The billing currency for the enrollment.
     * 
     * @return the currency value.
     */
    @Override
    public String currency() {
        return this.currency;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingAccountPropertiesEnrollmentDetails withStartDate(OffsetDateTime startDate) {
        super.withStartDate(startDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingAccountPropertiesEnrollmentDetails withEndDate(OffsetDateTime endDate) {
        super.withEndDate(endDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingAccountPropertiesEnrollmentDetails withPoNumber(String poNumber) {
        super.withPoNumber(poNumber);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BillingAccountPropertiesEnrollmentDetails
        withIndirectRelationshipInfo(EnrollmentDetailsIndirectRelationshipInfo indirectRelationshipInfo) {
        super.withIndirectRelationshipInfo(indirectRelationshipInfo);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (indirectRelationshipInfo() != null) {
            indirectRelationshipInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startDate",
            startDate() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(startDate()));
        jsonWriter.writeStringField("endDate",
            endDate() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(endDate()));
        jsonWriter.writeStringField("poNumber", poNumber());
        jsonWriter.writeJsonField("indirectRelationshipInfo", indirectRelationshipInfo());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingAccountPropertiesEnrollmentDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingAccountPropertiesEnrollmentDetails if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingAccountPropertiesEnrollmentDetails.
     */
    public static BillingAccountPropertiesEnrollmentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingAccountPropertiesEnrollmentDetails deserializedBillingAccountPropertiesEnrollmentDetails
                = new BillingAccountPropertiesEnrollmentDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startDate".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.withStartDate(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endDate".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.withEndDate(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("currency".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.currency = reader.getString();
                } else if ("channel".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.channel = reader.getString();
                } else if ("language".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.language = reader.getString();
                } else if ("countryCode".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.countryCode = reader.getString();
                } else if ("billingCycle".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.billingCycle = reader.getString();
                } else if ("extendedTermOption".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.extendedTermOption
                        = ExtendedTermOption.fromString(reader.getString());
                } else if ("supportLevel".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.supportLevel
                        = SupportLevel.fromString(reader.getString());
                } else if ("supportCoverage".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.supportCoverage = reader.getString();
                } else if ("cloud".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.cloud = reader.getString();
                } else if ("poNumber".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.withPoNumber(reader.getString());
                } else if ("markupStatus".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.markupStatus
                        = MarkupStatus.fromString(reader.getString());
                } else if ("indirectRelationshipInfo".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails
                        .withIndirectRelationshipInfo(EnrollmentDetailsIndirectRelationshipInfo.fromJson(reader));
                } else if ("invoiceRecipient".equals(fieldName)) {
                    deserializedBillingAccountPropertiesEnrollmentDetails.invoiceRecipient = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingAccountPropertiesEnrollmentDetails;
        });
    }
}
