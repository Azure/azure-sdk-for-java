// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * An invoice.
 */
@Fluent
public final class InvoiceProperties implements JsonSerializable<InvoiceProperties> {
    /*
     * The amount due as of now.
     */
    private InvoicePropertiesAmountDue amountDue;

    /*
     * The amount of Azure prepayment applied to the charges. This field is applicable to billing accounts with
     * agreement type Microsoft Customer Agreement.
     */
    private InvoicePropertiesAzurePrepaymentApplied azurePrepaymentApplied;

    /*
     * The total charges for the invoice billing period.
     */
    private InvoicePropertiesBilledAmount billedAmount;

    /*
     * The Id of the active invoice which is originally billed after this invoice was voided. This field is applicable
     * to the void invoices only.
     */
    private String billedDocumentId;

    /*
     * The name of the billing profile for which the invoice is generated.
     */
    private String billingProfileDisplayName;

    /*
     * The ID of the billing profile for which the invoice is generated.
     */
    private String billingProfileId;

    /*
     * The total refund for returns and cancellations during the invoice billing period. This field is applicable to
     * billing accounts with agreement type Microsoft Customer Agreement.
     */
    private InvoicePropertiesCreditAmount creditAmount;

    /*
     * The Id of the invoice which got voided and this credit note was issued as a result. This field is applicable to
     * the credit notes only.
     */
    private String creditForDocumentId;

    /*
     * List of documents available to download and view such as invoice, credit note, or tax receipt.
     */
    private List<InvoiceDocument> documents;

    /*
     * The type of the document.
     */
    private InvoiceDocumentType documentType;

    /*
     * The due date for the invoice.
     */
    private OffsetDateTime dueDate;

    /*
     * List of failed payments.
     */
    private List<FailedPayment> failedPayments;

    /*
     * The amount of free Azure credits applied to the charges. This field is applicable to billing accounts with
     * agreement type Microsoft Customer Agreement.
     */
    private InvoicePropertiesFreeAzureCreditApplied freeAzureCreditApplied;

    /*
     * The date when the invoice was generated.
     */
    private OffsetDateTime invoiceDate;

    /*
     * The end date of the billing period for which the invoice is generated. The date is in MM-DD-YYYY format.
     */
    private OffsetDateTime invoicePeriodEndDate;

    /*
     * The start date of the billing period for which the invoice is generated. The date is in MM-DD-YYYY format.
     */
    private OffsetDateTime invoicePeriodStartDate;

    /*
     * Invoice type.
     */
    private InvoiceType invoiceType;

    /*
     * Specifies if the invoice is generated as part of monthly invoicing cycle or not. This field is applicable to
     * billing accounts with agreement type Microsoft Customer Agreement.
     */
    private Boolean isMonthlyInvoice;

    /*
     * List of payments.
     */
    private List<Payment> payments;

    /*
     * An optional purchase order number for the invoice.
     */
    private String purchaseOrderNumber;

    /*
     * Rebill details for an invoice.
     */
    private InvoicePropertiesRebillDetails rebillDetails;

    /*
     * The current status of the invoice.
     */
    private InvoiceStatus status;

    /*
     * The name of the billing subscription for which the invoice is generated.
     */
    private String subscriptionDisplayName;

    /*
     * The ID of the subscription for which the invoice is generated.
     */
    private String subscriptionId;

    /*
     * Identifies the type of tax calculation used for the invoice. The field is applicable only to invoices with
     * special tax calculation logic.
     */
    private SpecialTaxationType specialTaxationType;

    /*
     * The pre-tax amount due. This field is applicable to billing accounts with agreement type Microsoft Customer
     * Agreement.
     */
    private InvoicePropertiesSubTotal subTotal;

    /*
     * The amount of tax charged for the billing period. This field is applicable to billing accounts with agreement
     * type Microsoft Customer Agreement.
     */
    private InvoicePropertiesTaxAmount taxAmount;

    /*
     * The amount due when the invoice was generated. This field is applicable to billing accounts with agreement type
     * Microsoft Customer Agreement.
     */
    private InvoicePropertiesTotalAmount totalAmount;

    /*
     * The details of a refund request.
     */
    private InvoicePropertiesRefundDetails refundDetails;

    /**
     * Creates an instance of InvoiceProperties class.
     */
    public InvoiceProperties() {
    }

    /**
     * Get the amountDue property: The amount due as of now.
     * 
     * @return the amountDue value.
     */
    public InvoicePropertiesAmountDue amountDue() {
        return this.amountDue;
    }

    /**
     * Set the amountDue property: The amount due as of now.
     * 
     * @param amountDue the amountDue value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withAmountDue(InvoicePropertiesAmountDue amountDue) {
        this.amountDue = amountDue;
        return this;
    }

    /**
     * Get the azurePrepaymentApplied property: The amount of Azure prepayment applied to the charges. This field is
     * applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @return the azurePrepaymentApplied value.
     */
    public InvoicePropertiesAzurePrepaymentApplied azurePrepaymentApplied() {
        return this.azurePrepaymentApplied;
    }

    /**
     * Set the azurePrepaymentApplied property: The amount of Azure prepayment applied to the charges. This field is
     * applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param azurePrepaymentApplied the azurePrepaymentApplied value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties
        withAzurePrepaymentApplied(InvoicePropertiesAzurePrepaymentApplied azurePrepaymentApplied) {
        this.azurePrepaymentApplied = azurePrepaymentApplied;
        return this;
    }

    /**
     * Get the billedAmount property: The total charges for the invoice billing period.
     * 
     * @return the billedAmount value.
     */
    public InvoicePropertiesBilledAmount billedAmount() {
        return this.billedAmount;
    }

    /**
     * Set the billedAmount property: The total charges for the invoice billing period.
     * 
     * @param billedAmount the billedAmount value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withBilledAmount(InvoicePropertiesBilledAmount billedAmount) {
        this.billedAmount = billedAmount;
        return this;
    }

    /**
     * Get the billedDocumentId property: The Id of the active invoice which is originally billed after this invoice was
     * voided. This field is applicable to the void invoices only.
     * 
     * @return the billedDocumentId value.
     */
    public String billedDocumentId() {
        return this.billedDocumentId;
    }

    /**
     * Get the billingProfileDisplayName property: The name of the billing profile for which the invoice is generated.
     * 
     * @return the billingProfileDisplayName value.
     */
    public String billingProfileDisplayName() {
        return this.billingProfileDisplayName;
    }

    /**
     * Get the billingProfileId property: The ID of the billing profile for which the invoice is generated.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the creditAmount property: The total refund for returns and cancellations during the invoice billing period.
     * This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @return the creditAmount value.
     */
    public InvoicePropertiesCreditAmount creditAmount() {
        return this.creditAmount;
    }

    /**
     * Set the creditAmount property: The total refund for returns and cancellations during the invoice billing period.
     * This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param creditAmount the creditAmount value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withCreditAmount(InvoicePropertiesCreditAmount creditAmount) {
        this.creditAmount = creditAmount;
        return this;
    }

    /**
     * Get the creditForDocumentId property: The Id of the invoice which got voided and this credit note was issued as a
     * result. This field is applicable to the credit notes only.
     * 
     * @return the creditForDocumentId value.
     */
    public String creditForDocumentId() {
        return this.creditForDocumentId;
    }

    /**
     * Get the documents property: List of documents available to download and view such as invoice, credit note, or tax
     * receipt.
     * 
     * @return the documents value.
     */
    public List<InvoiceDocument> documents() {
        return this.documents;
    }

    /**
     * Get the documentType property: The type of the document.
     * 
     * @return the documentType value.
     */
    public InvoiceDocumentType documentType() {
        return this.documentType;
    }

    /**
     * Get the dueDate property: The due date for the invoice.
     * 
     * @return the dueDate value.
     */
    public OffsetDateTime dueDate() {
        return this.dueDate;
    }

    /**
     * Get the failedPayments property: List of failed payments.
     * 
     * @return the failedPayments value.
     */
    public List<FailedPayment> failedPayments() {
        return this.failedPayments;
    }

    /**
     * Get the freeAzureCreditApplied property: The amount of free Azure credits applied to the charges. This field is
     * applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @return the freeAzureCreditApplied value.
     */
    public InvoicePropertiesFreeAzureCreditApplied freeAzureCreditApplied() {
        return this.freeAzureCreditApplied;
    }

    /**
     * Set the freeAzureCreditApplied property: The amount of free Azure credits applied to the charges. This field is
     * applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param freeAzureCreditApplied the freeAzureCreditApplied value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties
        withFreeAzureCreditApplied(InvoicePropertiesFreeAzureCreditApplied freeAzureCreditApplied) {
        this.freeAzureCreditApplied = freeAzureCreditApplied;
        return this;
    }

    /**
     * Get the invoiceDate property: The date when the invoice was generated.
     * 
     * @return the invoiceDate value.
     */
    public OffsetDateTime invoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Get the invoicePeriodEndDate property: The end date of the billing period for which the invoice is generated. The
     * date is in MM-DD-YYYY format.
     * 
     * @return the invoicePeriodEndDate value.
     */
    public OffsetDateTime invoicePeriodEndDate() {
        return this.invoicePeriodEndDate;
    }

    /**
     * Get the invoicePeriodStartDate property: The start date of the billing period for which the invoice is generated.
     * The date is in MM-DD-YYYY format.
     * 
     * @return the invoicePeriodStartDate value.
     */
    public OffsetDateTime invoicePeriodStartDate() {
        return this.invoicePeriodStartDate;
    }

    /**
     * Get the invoiceType property: Invoice type.
     * 
     * @return the invoiceType value.
     */
    public InvoiceType invoiceType() {
        return this.invoiceType;
    }

    /**
     * Get the isMonthlyInvoice property: Specifies if the invoice is generated as part of monthly invoicing cycle or
     * not. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * 
     * @return the isMonthlyInvoice value.
     */
    public Boolean isMonthlyInvoice() {
        return this.isMonthlyInvoice;
    }

    /**
     * Get the payments property: List of payments.
     * 
     * @return the payments value.
     */
    public List<Payment> payments() {
        return this.payments;
    }

    /**
     * Get the purchaseOrderNumber property: An optional purchase order number for the invoice.
     * 
     * @return the purchaseOrderNumber value.
     */
    public String purchaseOrderNumber() {
        return this.purchaseOrderNumber;
    }

    /**
     * Get the rebillDetails property: Rebill details for an invoice.
     * 
     * @return the rebillDetails value.
     */
    public InvoicePropertiesRebillDetails rebillDetails() {
        return this.rebillDetails;
    }

    /**
     * Set the rebillDetails property: Rebill details for an invoice.
     * 
     * @param rebillDetails the rebillDetails value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withRebillDetails(InvoicePropertiesRebillDetails rebillDetails) {
        this.rebillDetails = rebillDetails;
        return this;
    }

    /**
     * Get the status property: The current status of the invoice.
     * 
     * @return the status value.
     */
    public InvoiceStatus status() {
        return this.status;
    }

    /**
     * Get the subscriptionDisplayName property: The name of the billing subscription for which the invoice is
     * generated.
     * 
     * @return the subscriptionDisplayName value.
     */
    public String subscriptionDisplayName() {
        return this.subscriptionDisplayName;
    }

    /**
     * Get the subscriptionId property: The ID of the subscription for which the invoice is generated.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the specialTaxationType property: Identifies the type of tax calculation used for the invoice. The field is
     * applicable only to invoices with special tax calculation logic.
     * 
     * @return the specialTaxationType value.
     */
    public SpecialTaxationType specialTaxationType() {
        return this.specialTaxationType;
    }

    /**
     * Get the subTotal property: The pre-tax amount due. This field is applicable to billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @return the subTotal value.
     */
    public InvoicePropertiesSubTotal subTotal() {
        return this.subTotal;
    }

    /**
     * Set the subTotal property: The pre-tax amount due. This field is applicable to billing accounts with agreement
     * type Microsoft Customer Agreement.
     * 
     * @param subTotal the subTotal value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withSubTotal(InvoicePropertiesSubTotal subTotal) {
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Get the taxAmount property: The amount of tax charged for the billing period. This field is applicable to billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @return the taxAmount value.
     */
    public InvoicePropertiesTaxAmount taxAmount() {
        return this.taxAmount;
    }

    /**
     * Set the taxAmount property: The amount of tax charged for the billing period. This field is applicable to billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param taxAmount the taxAmount value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withTaxAmount(InvoicePropertiesTaxAmount taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Get the totalAmount property: The amount due when the invoice was generated. This field is applicable to billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @return the totalAmount value.
     */
    public InvoicePropertiesTotalAmount totalAmount() {
        return this.totalAmount;
    }

    /**
     * Set the totalAmount property: The amount due when the invoice was generated. This field is applicable to billing
     * accounts with agreement type Microsoft Customer Agreement.
     * 
     * @param totalAmount the totalAmount value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withTotalAmount(InvoicePropertiesTotalAmount totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Get the refundDetails property: The details of a refund request.
     * 
     * @return the refundDetails value.
     */
    public InvoicePropertiesRefundDetails refundDetails() {
        return this.refundDetails;
    }

    /**
     * Set the refundDetails property: The details of a refund request.
     * 
     * @param refundDetails the refundDetails value to set.
     * @return the InvoiceProperties object itself.
     */
    public InvoiceProperties withRefundDetails(InvoicePropertiesRefundDetails refundDetails) {
        this.refundDetails = refundDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (amountDue() != null) {
            amountDue().validate();
        }
        if (azurePrepaymentApplied() != null) {
            azurePrepaymentApplied().validate();
        }
        if (billedAmount() != null) {
            billedAmount().validate();
        }
        if (creditAmount() != null) {
            creditAmount().validate();
        }
        if (documents() != null) {
            documents().forEach(e -> e.validate());
        }
        if (failedPayments() != null) {
            failedPayments().forEach(e -> e.validate());
        }
        if (freeAzureCreditApplied() != null) {
            freeAzureCreditApplied().validate();
        }
        if (payments() != null) {
            payments().forEach(e -> e.validate());
        }
        if (rebillDetails() != null) {
            rebillDetails().validate();
        }
        if (subTotal() != null) {
            subTotal().validate();
        }
        if (taxAmount() != null) {
            taxAmount().validate();
        }
        if (totalAmount() != null) {
            totalAmount().validate();
        }
        if (refundDetails() != null) {
            refundDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("amountDue", this.amountDue);
        jsonWriter.writeJsonField("azurePrepaymentApplied", this.azurePrepaymentApplied);
        jsonWriter.writeJsonField("billedAmount", this.billedAmount);
        jsonWriter.writeJsonField("creditAmount", this.creditAmount);
        jsonWriter.writeJsonField("freeAzureCreditApplied", this.freeAzureCreditApplied);
        jsonWriter.writeJsonField("rebillDetails", this.rebillDetails);
        jsonWriter.writeJsonField("subTotal", this.subTotal);
        jsonWriter.writeJsonField("taxAmount", this.taxAmount);
        jsonWriter.writeJsonField("totalAmount", this.totalAmount);
        jsonWriter.writeJsonField("refundDetails", this.refundDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InvoiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InvoiceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InvoiceProperties.
     */
    public static InvoiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InvoiceProperties deserializedInvoiceProperties = new InvoiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amountDue".equals(fieldName)) {
                    deserializedInvoiceProperties.amountDue = InvoicePropertiesAmountDue.fromJson(reader);
                } else if ("azurePrepaymentApplied".equals(fieldName)) {
                    deserializedInvoiceProperties.azurePrepaymentApplied
                        = InvoicePropertiesAzurePrepaymentApplied.fromJson(reader);
                } else if ("billedAmount".equals(fieldName)) {
                    deserializedInvoiceProperties.billedAmount = InvoicePropertiesBilledAmount.fromJson(reader);
                } else if ("billedDocumentId".equals(fieldName)) {
                    deserializedInvoiceProperties.billedDocumentId = reader.getString();
                } else if ("billingProfileDisplayName".equals(fieldName)) {
                    deserializedInvoiceProperties.billingProfileDisplayName = reader.getString();
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedInvoiceProperties.billingProfileId = reader.getString();
                } else if ("creditAmount".equals(fieldName)) {
                    deserializedInvoiceProperties.creditAmount = InvoicePropertiesCreditAmount.fromJson(reader);
                } else if ("creditForDocumentId".equals(fieldName)) {
                    deserializedInvoiceProperties.creditForDocumentId = reader.getString();
                } else if ("documents".equals(fieldName)) {
                    List<InvoiceDocument> documents = reader.readArray(reader1 -> InvoiceDocument.fromJson(reader1));
                    deserializedInvoiceProperties.documents = documents;
                } else if ("documentType".equals(fieldName)) {
                    deserializedInvoiceProperties.documentType = InvoiceDocumentType.fromString(reader.getString());
                } else if ("dueDate".equals(fieldName)) {
                    deserializedInvoiceProperties.dueDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("failedPayments".equals(fieldName)) {
                    List<FailedPayment> failedPayments = reader.readArray(reader1 -> FailedPayment.fromJson(reader1));
                    deserializedInvoiceProperties.failedPayments = failedPayments;
                } else if ("freeAzureCreditApplied".equals(fieldName)) {
                    deserializedInvoiceProperties.freeAzureCreditApplied
                        = InvoicePropertiesFreeAzureCreditApplied.fromJson(reader);
                } else if ("invoiceDate".equals(fieldName)) {
                    deserializedInvoiceProperties.invoiceDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("invoicePeriodEndDate".equals(fieldName)) {
                    deserializedInvoiceProperties.invoicePeriodEndDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("invoicePeriodStartDate".equals(fieldName)) {
                    deserializedInvoiceProperties.invoicePeriodStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("invoiceType".equals(fieldName)) {
                    deserializedInvoiceProperties.invoiceType = InvoiceType.fromString(reader.getString());
                } else if ("isMonthlyInvoice".equals(fieldName)) {
                    deserializedInvoiceProperties.isMonthlyInvoice = reader.getNullable(JsonReader::getBoolean);
                } else if ("payments".equals(fieldName)) {
                    List<Payment> payments = reader.readArray(reader1 -> Payment.fromJson(reader1));
                    deserializedInvoiceProperties.payments = payments;
                } else if ("purchaseOrderNumber".equals(fieldName)) {
                    deserializedInvoiceProperties.purchaseOrderNumber = reader.getString();
                } else if ("rebillDetails".equals(fieldName)) {
                    deserializedInvoiceProperties.rebillDetails = InvoicePropertiesRebillDetails.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedInvoiceProperties.status = InvoiceStatus.fromString(reader.getString());
                } else if ("subscriptionDisplayName".equals(fieldName)) {
                    deserializedInvoiceProperties.subscriptionDisplayName = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedInvoiceProperties.subscriptionId = reader.getString();
                } else if ("specialTaxationType".equals(fieldName)) {
                    deserializedInvoiceProperties.specialTaxationType
                        = SpecialTaxationType.fromString(reader.getString());
                } else if ("subTotal".equals(fieldName)) {
                    deserializedInvoiceProperties.subTotal = InvoicePropertiesSubTotal.fromJson(reader);
                } else if ("taxAmount".equals(fieldName)) {
                    deserializedInvoiceProperties.taxAmount = InvoicePropertiesTaxAmount.fromJson(reader);
                } else if ("totalAmount".equals(fieldName)) {
                    deserializedInvoiceProperties.totalAmount = InvoicePropertiesTotalAmount.fromJson(reader);
                } else if ("refundDetails".equals(fieldName)) {
                    deserializedInvoiceProperties.refundDetails = InvoicePropertiesRefundDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInvoiceProperties;
        });
    }
}
