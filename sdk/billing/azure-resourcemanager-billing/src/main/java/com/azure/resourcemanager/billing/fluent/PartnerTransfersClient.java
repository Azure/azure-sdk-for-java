// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.billing.fluent.models.PartnerTransferDetailsInner;
import com.azure.resourcemanager.billing.models.PartnerInitiateTransferRequest;

/**
 * An instance of this class provides access to all the operations defined in PartnerTransfersClient.
 */
public interface PartnerTransfersClient {
    /**
     * Gets a transfer request by ID. The operation is supported only for billing accounts with agreement type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param transferName The ID that uniquely identifies a transfer request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a transfer request by ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PartnerTransferDetailsInner> getWithResponse(String billingAccountName, String billingProfileName,
        String customerName, String transferName, Context context);

    /**
     * Gets a transfer request by ID. The operation is supported only for billing accounts with agreement type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param transferName The ID that uniquely identifies a transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a transfer request by ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PartnerTransferDetailsInner get(String billingAccountName, String billingProfileName, String customerName,
        String transferName);

    /**
     * Sends a request to a user in a customer's billing account to transfer billing ownership of their subscriptions.
     * The operation is supported only for billing accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param transferName The ID that uniquely identifies a transfer request.
     * @param parameters Request parameters that are provided to the initiate transfer operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the transfer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PartnerTransferDetailsInner> initiateWithResponse(String billingAccountName, String billingProfileName,
        String customerName, String transferName, PartnerInitiateTransferRequest parameters, Context context);

    /**
     * Sends a request to a user in a customer's billing account to transfer billing ownership of their subscriptions.
     * The operation is supported only for billing accounts with agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param transferName The ID that uniquely identifies a transfer request.
     * @param parameters Request parameters that are provided to the initiate transfer operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the transfer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PartnerTransferDetailsInner initiate(String billingAccountName, String billingProfileName, String customerName,
        String transferName, PartnerInitiateTransferRequest parameters);

    /**
     * Cancels a transfer request. The operation is supported only for billing accounts with agreement type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param transferName The ID that uniquely identifies a transfer request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the transfer along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PartnerTransferDetailsInner> cancelWithResponse(String billingAccountName, String billingProfileName,
        String customerName, String transferName, Context context);

    /**
     * Cancels a transfer request. The operation is supported only for billing accounts with agreement type Microsoft
     * Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param transferName The ID that uniquely identifies a transfer request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the transfer.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PartnerTransferDetailsInner cancel(String billingAccountName, String billingProfileName, String customerName,
        String transferName);

    /**
     * Lists the transfer requests sent to a customer. The operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of transfers initiated by partner as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PartnerTransferDetailsInner> list(String billingAccountName, String billingProfileName,
        String customerName);

    /**
     * Lists the transfer requests sent to a customer. The operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param customerName The ID that uniquely identifies a customer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of transfers initiated by partner as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PartnerTransferDetailsInner> list(String billingAccountName, String billingProfileName,
        String customerName, Context context);
}
