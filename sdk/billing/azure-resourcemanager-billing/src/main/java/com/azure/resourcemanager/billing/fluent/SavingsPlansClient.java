// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.billing.fluent.models.SavingsPlanModelInner;
import com.azure.resourcemanager.billing.fluent.models.SavingsPlanValidateResponseInner;
import com.azure.resourcemanager.billing.models.SavingsPlanUpdateRequest;
import com.azure.resourcemanager.billing.models.SavingsPlanUpdateValidateRequest;

/**
 * An instance of this class provides access to all the operations defined in SavingsPlansClient.
 */
public interface SavingsPlansClient {
    /**
     * List savings plans in an order by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of savings plans as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SavingsPlanModelInner> listBySavingsPlanOrder(String billingAccountName, String savingsPlanOrderId);

    /**
     * List savings plans in an order by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of savings plans as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SavingsPlanModelInner> listBySavingsPlanOrder(String billingAccountName, String savingsPlanOrderId,
        Context context);

    /**
     * List savings plans by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of savings plans as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SavingsPlanModelInner> listByBillingAccount(String billingAccountName);

    /**
     * List savings plans by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param filter The filter query option allows clients to filter a collection of resources that are addressed by a
     * request URL.
     * @param orderBy The orderby query option allows clients to request resources in a particular order.
     * @param skiptoken The number of savings plans to skip from the list before returning results.
     * @param take The number of savings plans to return.
     * @param selectedState The selected provisioning state.
     * @param refreshSummary To indicate whether to refresh the roll up counts of the savings plans group by
     * provisioning states.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of savings plans as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SavingsPlanModelInner> listByBillingAccount(String billingAccountName, String filter, String orderBy,
        Float skiptoken, Float take, String selectedState, String refreshSummary, Context context);

    /**
     * Get savings plan by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @param expand May be used to expand the planInformation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan by billing account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SavingsPlanModelInner> getByBillingAccountWithResponse(String billingAccountName,
        String savingsPlanOrderId, String savingsPlanId, String expand, Context context);

    /**
     * Get savings plan by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan by billing account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SavingsPlanModelInner getByBillingAccount(String billingAccountName, String savingsPlanOrderId,
        String savingsPlanId);

    /**
     * Update savings plan by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @param body Request body for patching a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of savings plan.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SavingsPlanModelInner>, SavingsPlanModelInner> beginUpdateByBillingAccount(
        String billingAccountName, String savingsPlanOrderId, String savingsPlanId, SavingsPlanUpdateRequest body);

    /**
     * Update savings plan by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @param body Request body for patching a savings plan order alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of savings plan.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SavingsPlanModelInner>, SavingsPlanModelInner> beginUpdateByBillingAccount(
        String billingAccountName, String savingsPlanOrderId, String savingsPlanId, SavingsPlanUpdateRequest body,
        Context context);

    /**
     * Update savings plan by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @param body Request body for patching a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SavingsPlanModelInner updateByBillingAccount(String billingAccountName, String savingsPlanOrderId,
        String savingsPlanId, SavingsPlanUpdateRequest body);

    /**
     * Update savings plan by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @param body Request body for patching a savings plan order alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SavingsPlanModelInner updateByBillingAccount(String billingAccountName, String savingsPlanOrderId,
        String savingsPlanId, SavingsPlanUpdateRequest body, Context context);

    /**
     * Validate savings plan patch by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @param body Request body for patching a savings plan order alias.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan update validate response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SavingsPlanValidateResponseInner> validateUpdateByBillingAccountWithResponse(String billingAccountName,
        String savingsPlanOrderId, String savingsPlanId, SavingsPlanUpdateValidateRequest body, Context context);

    /**
     * Validate savings plan patch by billing account.
     * 
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param savingsPlanOrderId Order ID of the savings plan.
     * @param savingsPlanId ID of the savings plan.
     * @param body Request body for patching a savings plan order alias.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return savings plan update validate response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SavingsPlanValidateResponseInner validateUpdateByBillingAccount(String billingAccountName,
        String savingsPlanOrderId, String savingsPlanId, SavingsPlanUpdateValidateRequest body);
}
