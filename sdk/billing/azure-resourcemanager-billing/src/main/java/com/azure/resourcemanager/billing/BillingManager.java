// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billing.fluent.BillingManagementClient;
import com.azure.resourcemanager.billing.implementation.AddressImpl;
import com.azure.resourcemanager.billing.implementation.AgreementsImpl;
import com.azure.resourcemanager.billing.implementation.AssociatedTenantsImpl;
import com.azure.resourcemanager.billing.implementation.AvailableBalancesImpl;
import com.azure.resourcemanager.billing.implementation.BillingAccountsImpl;
import com.azure.resourcemanager.billing.implementation.BillingManagementClientBuilder;
import com.azure.resourcemanager.billing.implementation.BillingPermissionsImpl;
import com.azure.resourcemanager.billing.implementation.BillingProfilesImpl;
import com.azure.resourcemanager.billing.implementation.BillingPropertiesImpl;
import com.azure.resourcemanager.billing.implementation.BillingRequestsImpl;
import com.azure.resourcemanager.billing.implementation.BillingRoleAssignmentsImpl;
import com.azure.resourcemanager.billing.implementation.BillingRoleDefinitionsImpl;
import com.azure.resourcemanager.billing.implementation.BillingSubscriptionsAliasesImpl;
import com.azure.resourcemanager.billing.implementation.BillingSubscriptionsImpl;
import com.azure.resourcemanager.billing.implementation.CustomersImpl;
import com.azure.resourcemanager.billing.implementation.DepartmentsImpl;
import com.azure.resourcemanager.billing.implementation.EnrollmentAccountsImpl;
import com.azure.resourcemanager.billing.implementation.InvoiceSectionsImpl;
import com.azure.resourcemanager.billing.implementation.InvoicesImpl;
import com.azure.resourcemanager.billing.implementation.OperationsImpl;
import com.azure.resourcemanager.billing.implementation.PartnerTransfersImpl;
import com.azure.resourcemanager.billing.implementation.PaymentMethodsImpl;
import com.azure.resourcemanager.billing.implementation.PoliciesImpl;
import com.azure.resourcemanager.billing.implementation.ProductsImpl;
import com.azure.resourcemanager.billing.implementation.RecipientTransfersImpl;
import com.azure.resourcemanager.billing.implementation.ReservationOrdersImpl;
import com.azure.resourcemanager.billing.implementation.ReservationsImpl;
import com.azure.resourcemanager.billing.implementation.SavingsPlanOrdersImpl;
import com.azure.resourcemanager.billing.implementation.SavingsPlansImpl;
import com.azure.resourcemanager.billing.implementation.TransactionsImpl;
import com.azure.resourcemanager.billing.implementation.TransfersImpl;
import com.azure.resourcemanager.billing.models.Address;
import com.azure.resourcemanager.billing.models.Agreements;
import com.azure.resourcemanager.billing.models.AssociatedTenants;
import com.azure.resourcemanager.billing.models.AvailableBalances;
import com.azure.resourcemanager.billing.models.BillingAccounts;
import com.azure.resourcemanager.billing.models.BillingPermissions;
import com.azure.resourcemanager.billing.models.BillingProfiles;
import com.azure.resourcemanager.billing.models.BillingProperties;
import com.azure.resourcemanager.billing.models.BillingRequests;
import com.azure.resourcemanager.billing.models.BillingRoleAssignments;
import com.azure.resourcemanager.billing.models.BillingRoleDefinitions;
import com.azure.resourcemanager.billing.models.BillingSubscriptions;
import com.azure.resourcemanager.billing.models.BillingSubscriptionsAliases;
import com.azure.resourcemanager.billing.models.Customers;
import com.azure.resourcemanager.billing.models.Departments;
import com.azure.resourcemanager.billing.models.EnrollmentAccounts;
import com.azure.resourcemanager.billing.models.Invoices;
import com.azure.resourcemanager.billing.models.InvoiceSections;
import com.azure.resourcemanager.billing.models.Operations;
import com.azure.resourcemanager.billing.models.PartnerTransfers;
import com.azure.resourcemanager.billing.models.PaymentMethods;
import com.azure.resourcemanager.billing.models.Policies;
import com.azure.resourcemanager.billing.models.Products;
import com.azure.resourcemanager.billing.models.RecipientTransfers;
import com.azure.resourcemanager.billing.models.ReservationOrders;
import com.azure.resourcemanager.billing.models.Reservations;
import com.azure.resourcemanager.billing.models.SavingsPlanOrders;
import com.azure.resourcemanager.billing.models.SavingsPlans;
import com.azure.resourcemanager.billing.models.Transactions;
import com.azure.resourcemanager.billing.models.Transfers;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to BillingManager.
 * Billing Client.
 */
public final class BillingManager {
    private Agreements agreements;

    private AssociatedTenants associatedTenants;

    private AvailableBalances availableBalances;

    private BillingAccounts billingAccounts;

    private Address address;

    private BillingPermissions billingPermissions;

    private BillingProfiles billingProfiles;

    private BillingProperties billingProperties;

    private BillingRequests billingRequests;

    private BillingRoleAssignments billingRoleAssignments;

    private BillingRoleDefinitions billingRoleDefinitions;

    private SavingsPlanOrders savingsPlanOrders;

    private SavingsPlans savingsPlans;

    private BillingSubscriptions billingSubscriptions;

    private BillingSubscriptionsAliases billingSubscriptionsAliases;

    private Customers customers;

    private Departments departments;

    private EnrollmentAccounts enrollmentAccounts;

    private Invoices invoices;

    private InvoiceSections invoiceSections;

    private Operations operations;

    private PaymentMethods paymentMethods;

    private Policies policies;

    private Products products;

    private Reservations reservations;

    private ReservationOrders reservationOrders;

    private Transactions transactions;

    private Transfers transfers;

    private PartnerTransfers partnerTransfers;

    private RecipientTransfers recipientTransfers;

    private final BillingManagementClient clientObject;

    private BillingManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new BillingManagementClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Billing service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Billing service API instance.
     */
    public static BillingManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Billing service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Billing service API instance.
     */
    public static BillingManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new BillingManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create BillingManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new BillingManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Billing service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Billing service API instance.
         */
        public BillingManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.billing")
                .append("/")
                .append("1.0.0");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new BillingManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Agreements.
     * 
     * @return Resource collection API of Agreements.
     */
    public Agreements agreements() {
        if (this.agreements == null) {
            this.agreements = new AgreementsImpl(clientObject.getAgreements(), this);
        }
        return agreements;
    }

    /**
     * Gets the resource collection API of AssociatedTenants.
     * 
     * @return Resource collection API of AssociatedTenants.
     */
    public AssociatedTenants associatedTenants() {
        if (this.associatedTenants == null) {
            this.associatedTenants = new AssociatedTenantsImpl(clientObject.getAssociatedTenants(), this);
        }
        return associatedTenants;
    }

    /**
     * Gets the resource collection API of AvailableBalances.
     * 
     * @return Resource collection API of AvailableBalances.
     */
    public AvailableBalances availableBalances() {
        if (this.availableBalances == null) {
            this.availableBalances = new AvailableBalancesImpl(clientObject.getAvailableBalances(), this);
        }
        return availableBalances;
    }

    /**
     * Gets the resource collection API of BillingAccounts.
     * 
     * @return Resource collection API of BillingAccounts.
     */
    public BillingAccounts billingAccounts() {
        if (this.billingAccounts == null) {
            this.billingAccounts = new BillingAccountsImpl(clientObject.getBillingAccounts(), this);
        }
        return billingAccounts;
    }

    /**
     * Gets the resource collection API of Address.
     * 
     * @return Resource collection API of Address.
     */
    public Address address() {
        if (this.address == null) {
            this.address = new AddressImpl(clientObject.getAddress(), this);
        }
        return address;
    }

    /**
     * Gets the resource collection API of BillingPermissions.
     * 
     * @return Resource collection API of BillingPermissions.
     */
    public BillingPermissions billingPermissions() {
        if (this.billingPermissions == null) {
            this.billingPermissions = new BillingPermissionsImpl(clientObject.getBillingPermissions(), this);
        }
        return billingPermissions;
    }

    /**
     * Gets the resource collection API of BillingProfiles.
     * 
     * @return Resource collection API of BillingProfiles.
     */
    public BillingProfiles billingProfiles() {
        if (this.billingProfiles == null) {
            this.billingProfiles = new BillingProfilesImpl(clientObject.getBillingProfiles(), this);
        }
        return billingProfiles;
    }

    /**
     * Gets the resource collection API of BillingProperties.
     * 
     * @return Resource collection API of BillingProperties.
     */
    public BillingProperties billingProperties() {
        if (this.billingProperties == null) {
            this.billingProperties = new BillingPropertiesImpl(clientObject.getBillingProperties(), this);
        }
        return billingProperties;
    }

    /**
     * Gets the resource collection API of BillingRequests.
     * 
     * @return Resource collection API of BillingRequests.
     */
    public BillingRequests billingRequests() {
        if (this.billingRequests == null) {
            this.billingRequests = new BillingRequestsImpl(clientObject.getBillingRequests(), this);
        }
        return billingRequests;
    }

    /**
     * Gets the resource collection API of BillingRoleAssignments.
     * 
     * @return Resource collection API of BillingRoleAssignments.
     */
    public BillingRoleAssignments billingRoleAssignments() {
        if (this.billingRoleAssignments == null) {
            this.billingRoleAssignments
                = new BillingRoleAssignmentsImpl(clientObject.getBillingRoleAssignments(), this);
        }
        return billingRoleAssignments;
    }

    /**
     * Gets the resource collection API of BillingRoleDefinitions.
     * 
     * @return Resource collection API of BillingRoleDefinitions.
     */
    public BillingRoleDefinitions billingRoleDefinitions() {
        if (this.billingRoleDefinitions == null) {
            this.billingRoleDefinitions
                = new BillingRoleDefinitionsImpl(clientObject.getBillingRoleDefinitions(), this);
        }
        return billingRoleDefinitions;
    }

    /**
     * Gets the resource collection API of SavingsPlanOrders.
     * 
     * @return Resource collection API of SavingsPlanOrders.
     */
    public SavingsPlanOrders savingsPlanOrders() {
        if (this.savingsPlanOrders == null) {
            this.savingsPlanOrders = new SavingsPlanOrdersImpl(clientObject.getSavingsPlanOrders(), this);
        }
        return savingsPlanOrders;
    }

    /**
     * Gets the resource collection API of SavingsPlans.
     * 
     * @return Resource collection API of SavingsPlans.
     */
    public SavingsPlans savingsPlans() {
        if (this.savingsPlans == null) {
            this.savingsPlans = new SavingsPlansImpl(clientObject.getSavingsPlans(), this);
        }
        return savingsPlans;
    }

    /**
     * Gets the resource collection API of BillingSubscriptions.
     * 
     * @return Resource collection API of BillingSubscriptions.
     */
    public BillingSubscriptions billingSubscriptions() {
        if (this.billingSubscriptions == null) {
            this.billingSubscriptions = new BillingSubscriptionsImpl(clientObject.getBillingSubscriptions(), this);
        }
        return billingSubscriptions;
    }

    /**
     * Gets the resource collection API of BillingSubscriptionsAliases.
     * 
     * @return Resource collection API of BillingSubscriptionsAliases.
     */
    public BillingSubscriptionsAliases billingSubscriptionsAliases() {
        if (this.billingSubscriptionsAliases == null) {
            this.billingSubscriptionsAliases
                = new BillingSubscriptionsAliasesImpl(clientObject.getBillingSubscriptionsAliases(), this);
        }
        return billingSubscriptionsAliases;
    }

    /**
     * Gets the resource collection API of Customers.
     * 
     * @return Resource collection API of Customers.
     */
    public Customers customers() {
        if (this.customers == null) {
            this.customers = new CustomersImpl(clientObject.getCustomers(), this);
        }
        return customers;
    }

    /**
     * Gets the resource collection API of Departments.
     * 
     * @return Resource collection API of Departments.
     */
    public Departments departments() {
        if (this.departments == null) {
            this.departments = new DepartmentsImpl(clientObject.getDepartments(), this);
        }
        return departments;
    }

    /**
     * Gets the resource collection API of EnrollmentAccounts.
     * 
     * @return Resource collection API of EnrollmentAccounts.
     */
    public EnrollmentAccounts enrollmentAccounts() {
        if (this.enrollmentAccounts == null) {
            this.enrollmentAccounts = new EnrollmentAccountsImpl(clientObject.getEnrollmentAccounts(), this);
        }
        return enrollmentAccounts;
    }

    /**
     * Gets the resource collection API of Invoices.
     * 
     * @return Resource collection API of Invoices.
     */
    public Invoices invoices() {
        if (this.invoices == null) {
            this.invoices = new InvoicesImpl(clientObject.getInvoices(), this);
        }
        return invoices;
    }

    /**
     * Gets the resource collection API of InvoiceSections.
     * 
     * @return Resource collection API of InvoiceSections.
     */
    public InvoiceSections invoiceSections() {
        if (this.invoiceSections == null) {
            this.invoiceSections = new InvoiceSectionsImpl(clientObject.getInvoiceSections(), this);
        }
        return invoiceSections;
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of PaymentMethods.
     * 
     * @return Resource collection API of PaymentMethods.
     */
    public PaymentMethods paymentMethods() {
        if (this.paymentMethods == null) {
            this.paymentMethods = new PaymentMethodsImpl(clientObject.getPaymentMethods(), this);
        }
        return paymentMethods;
    }

    /**
     * Gets the resource collection API of Policies.
     * 
     * @return Resource collection API of Policies.
     */
    public Policies policies() {
        if (this.policies == null) {
            this.policies = new PoliciesImpl(clientObject.getPolicies(), this);
        }
        return policies;
    }

    /**
     * Gets the resource collection API of Products.
     * 
     * @return Resource collection API of Products.
     */
    public Products products() {
        if (this.products == null) {
            this.products = new ProductsImpl(clientObject.getProducts(), this);
        }
        return products;
    }

    /**
     * Gets the resource collection API of Reservations.
     * 
     * @return Resource collection API of Reservations.
     */
    public Reservations reservations() {
        if (this.reservations == null) {
            this.reservations = new ReservationsImpl(clientObject.getReservations(), this);
        }
        return reservations;
    }

    /**
     * Gets the resource collection API of ReservationOrders.
     * 
     * @return Resource collection API of ReservationOrders.
     */
    public ReservationOrders reservationOrders() {
        if (this.reservationOrders == null) {
            this.reservationOrders = new ReservationOrdersImpl(clientObject.getReservationOrders(), this);
        }
        return reservationOrders;
    }

    /**
     * Gets the resource collection API of Transactions.
     * 
     * @return Resource collection API of Transactions.
     */
    public Transactions transactions() {
        if (this.transactions == null) {
            this.transactions = new TransactionsImpl(clientObject.getTransactions(), this);
        }
        return transactions;
    }

    /**
     * Gets the resource collection API of Transfers.
     * 
     * @return Resource collection API of Transfers.
     */
    public Transfers transfers() {
        if (this.transfers == null) {
            this.transfers = new TransfersImpl(clientObject.getTransfers(), this);
        }
        return transfers;
    }

    /**
     * Gets the resource collection API of PartnerTransfers.
     * 
     * @return Resource collection API of PartnerTransfers.
     */
    public PartnerTransfers partnerTransfers() {
        if (this.partnerTransfers == null) {
            this.partnerTransfers = new PartnerTransfersImpl(clientObject.getPartnerTransfers(), this);
        }
        return partnerTransfers;
    }

    /**
     * Gets the resource collection API of RecipientTransfers.
     * 
     * @return Resource collection API of RecipientTransfers.
     */
    public RecipientTransfers recipientTransfers() {
        if (this.recipientTransfers == null) {
            this.recipientTransfers = new RecipientTransfersImpl(clientObject.getRecipientTransfers(), this);
        }
        return recipientTransfers;
    }

    /**
     * Gets wrapped service client BillingManagementClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client BillingManagementClient.
     */
    public BillingManagementClient serviceClient() {
        return this.clientObject;
    }
}
