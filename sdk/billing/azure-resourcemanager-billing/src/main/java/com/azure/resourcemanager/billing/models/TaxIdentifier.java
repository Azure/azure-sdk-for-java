// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A tax identifier for the billing account.
 */
@Fluent
public final class TaxIdentifier implements JsonSerializable<TaxIdentifier> {
    /*
     * The id of the tax identifier.
     */
    private String id;

    /*
     * The type of the tax identifier.
     */
    private TaxIdentifierType type;

    /*
     * The scope of the tax identifier.
     */
    private String scope;

    /*
     * The country of the tax identifier.
     */
    private String country;

    /*
     * The status of the tax identifier.
     */
    private TaxIdentifierStatus status;

    /**
     * Creates an instance of TaxIdentifier class.
     */
    public TaxIdentifier() {
    }

    /**
     * Get the id property: The id of the tax identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The id of the tax identifier.
     * 
     * @param id the id value to set.
     * @return the TaxIdentifier object itself.
     */
    public TaxIdentifier withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the type property: The type of the tax identifier.
     * 
     * @return the type value.
     */
    public TaxIdentifierType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the tax identifier.
     * 
     * @param type the type value to set.
     * @return the TaxIdentifier object itself.
     */
    public TaxIdentifier withType(TaxIdentifierType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the scope property: The scope of the tax identifier.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope of the tax identifier.
     * 
     * @param scope the scope value to set.
     * @return the TaxIdentifier object itself.
     */
    public TaxIdentifier withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the country property: The country of the tax identifier.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: The country of the tax identifier.
     * 
     * @param country the country value to set.
     * @return the TaxIdentifier object itself.
     */
    public TaxIdentifier withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the status property: The status of the tax identifier.
     * 
     * @return the status value.
     */
    public TaxIdentifierStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the tax identifier.
     * 
     * @param status the status value to set.
     * @return the TaxIdentifier object itself.
     */
    public TaxIdentifier withStatus(TaxIdentifierStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("country", this.country);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TaxIdentifier from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TaxIdentifier if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TaxIdentifier.
     */
    public static TaxIdentifier fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TaxIdentifier deserializedTaxIdentifier = new TaxIdentifier();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTaxIdentifier.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTaxIdentifier.type = TaxIdentifierType.fromString(reader.getString());
                } else if ("scope".equals(fieldName)) {
                    deserializedTaxIdentifier.scope = reader.getString();
                } else if ("country".equals(fieldName)) {
                    deserializedTaxIdentifier.country = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedTaxIdentifier.status = TaxIdentifierStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTaxIdentifier;
        });
    }
}
