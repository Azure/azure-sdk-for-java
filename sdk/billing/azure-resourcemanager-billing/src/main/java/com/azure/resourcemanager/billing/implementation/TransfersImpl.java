// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.billing.fluent.TransfersClient;
import com.azure.resourcemanager.billing.fluent.models.TransferDetailsInner;
import com.azure.resourcemanager.billing.models.InitiateTransferRequest;
import com.azure.resourcemanager.billing.models.TransferDetails;
import com.azure.resourcemanager.billing.models.Transfers;

public final class TransfersImpl implements Transfers {
    private static final ClientLogger LOGGER = new ClientLogger(TransfersImpl.class);

    private final TransfersClient innerClient;

    private final com.azure.resourcemanager.billing.BillingManager serviceManager;

    public TransfersImpl(TransfersClient innerClient, com.azure.resourcemanager.billing.BillingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<TransferDetails> getWithResponse(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String transferName, Context context) {
        Response<TransferDetailsInner> inner = this.serviceClient()
            .getWithResponse(billingAccountName, billingProfileName, invoiceSectionName, transferName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TransferDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TransferDetails get(String billingAccountName, String billingProfileName, String invoiceSectionName,
        String transferName) {
        TransferDetailsInner inner
            = this.serviceClient().get(billingAccountName, billingProfileName, invoiceSectionName, transferName);
        if (inner != null) {
            return new TransferDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TransferDetails> initiateWithResponse(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String transferName, InitiateTransferRequest parameters, Context context) {
        Response<TransferDetailsInner> inner = this.serviceClient()
            .initiateWithResponse(billingAccountName, billingProfileName, invoiceSectionName, transferName, parameters,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TransferDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TransferDetails initiate(String billingAccountName, String billingProfileName, String invoiceSectionName,
        String transferName, InitiateTransferRequest parameters) {
        TransferDetailsInner inner = this.serviceClient()
            .initiate(billingAccountName, billingProfileName, invoiceSectionName, transferName, parameters);
        if (inner != null) {
            return new TransferDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TransferDetails> cancelWithResponse(String billingAccountName, String billingProfileName,
        String invoiceSectionName, String transferName, Context context) {
        Response<TransferDetailsInner> inner = this.serviceClient()
            .cancelWithResponse(billingAccountName, billingProfileName, invoiceSectionName, transferName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TransferDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TransferDetails cancel(String billingAccountName, String billingProfileName, String invoiceSectionName,
        String transferName) {
        TransferDetailsInner inner
            = this.serviceClient().cancel(billingAccountName, billingProfileName, invoiceSectionName, transferName);
        if (inner != null) {
            return new TransferDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<TransferDetails> list(String billingAccountName, String billingProfileName,
        String invoiceSectionName) {
        PagedIterable<TransferDetailsInner> inner
            = this.serviceClient().list(billingAccountName, billingProfileName, invoiceSectionName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TransferDetailsImpl(inner1, this.manager()));
    }

    public PagedIterable<TransferDetails> list(String billingAccountName, String billingProfileName,
        String invoiceSectionName, Context context) {
        PagedIterable<TransferDetailsInner> inner
            = this.serviceClient().list(billingAccountName, billingProfileName, invoiceSectionName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TransferDetailsImpl(inner1, this.manager()));
    }

    private TransfersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.billing.BillingManager manager() {
        return this.serviceManager;
    }
}
