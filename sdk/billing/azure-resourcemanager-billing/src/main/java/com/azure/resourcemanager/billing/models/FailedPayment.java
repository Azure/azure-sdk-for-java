// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A failed payment.
 */
@Immutable
public final class FailedPayment implements JsonSerializable<FailedPayment> {
    /*
     * The date when the payment was attempted.
     */
    private OffsetDateTime date;

    /*
     * The reason that the payment failed.
     */
    private FailedPaymentReason failedPaymentReason;

    /**
     * Creates an instance of FailedPayment class.
     */
    public FailedPayment() {
    }

    /**
     * Get the date property: The date when the payment was attempted.
     * 
     * @return the date value.
     */
    public OffsetDateTime date() {
        return this.date;
    }

    /**
     * Get the failedPaymentReason property: The reason that the payment failed.
     * 
     * @return the failedPaymentReason value.
     */
    public FailedPaymentReason failedPaymentReason() {
        return this.failedPaymentReason;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailedPayment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailedPayment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FailedPayment.
     */
    public static FailedPayment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailedPayment deserializedFailedPayment = new FailedPayment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("date".equals(fieldName)) {
                    deserializedFailedPayment.date = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("failedPaymentReason".equals(fieldName)) {
                    deserializedFailedPayment.failedPaymentReason = FailedPaymentReason.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailedPayment;
        });
    }
}
