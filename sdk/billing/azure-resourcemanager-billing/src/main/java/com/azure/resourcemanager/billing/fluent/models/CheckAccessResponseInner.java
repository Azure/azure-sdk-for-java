// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.models.AccessDecision;
import java.io.IOException;

/**
 * The properties of a check access response.
 */
@Immutable
public final class CheckAccessResponseInner implements JsonSerializable<CheckAccessResponseInner> {
    /*
     * Access Decision, specifies access is allowed or not.
     */
    private AccessDecision accessDecision;

    /*
     * Gets or sets an action.
     */
    private String action;

    /**
     * Creates an instance of CheckAccessResponseInner class.
     */
    public CheckAccessResponseInner() {
    }

    /**
     * Get the accessDecision property: Access Decision, specifies access is allowed or not.
     * 
     * @return the accessDecision value.
     */
    public AccessDecision accessDecision() {
        return this.accessDecision;
    }

    /**
     * Get the action property: Gets or sets an action.
     * 
     * @return the action value.
     */
    public String action() {
        return this.action;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckAccessResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckAccessResponseInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CheckAccessResponseInner.
     */
    public static CheckAccessResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckAccessResponseInner deserializedCheckAccessResponseInner = new CheckAccessResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessDecision".equals(fieldName)) {
                    deserializedCheckAccessResponseInner.accessDecision = AccessDecision.fromString(reader.getString());
                } else if ("action".equals(fieldName)) {
                    deserializedCheckAccessResponseInner.action = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckAccessResponseInner;
        });
    }
}
