// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A billing property.
 */
@Fluent
public final class BillingPropertyProperties implements JsonSerializable<BillingPropertyProperties> {
    /*
     * The type of agreement.
     */
    private AgreementType billingAccountAgreementType;

    /*
     * The name of the billing account.
     */
    private String billingAccountDisplayName;

    /*
     * The fully qualified ID that uniquely identifies a billing account.
     */
    private String billingAccountId;

    /*
     * Notification email address for legacy account. Available for agreement type Microsoft Online Services Program.
     */
    private String accountAdminNotificationEmailAddress;

    /*
     * The country of the individual or organization that is responsible for the billing account.
     */
    private String billingAccountSoldToCountry;

    /*
     * The current status of the billing account.
     */
    private AccountStatus billingAccountStatus;

    /*
     * Reason for the specified billing account status.
     */
    private BillingAccountStatusReasonCode billingAccountStatusReasonCode;

    /*
     * The type of customer.
     */
    private AccountType billingAccountType;

    /*
     * The tier of the account.
     */
    private AccountSubType billingAccountSubType;

    /*
     * The billing currency for the subscription. Available for billing accounts with agreement type Enterprise
     * Agreement
     */
    private String billingCurrency;

    /*
     * The name of the billing profile.
     */
    private String billingProfileDisplayName;

    /*
     * The fully qualified ID that uniquely identifies a billing profile.
     */
    private String billingProfileId;

    /*
     * The billing profile spending limit.
     */
    private SpendingLimit billingProfileSpendingLimit;

    /*
     * The details of billing profile spending limit.
     */
    private List<SpendingLimitDetails> billingProfileSpendingLimitDetails;

    /*
     * The status of the billing profile.
     */
    private BillingProfileStatus billingProfileStatus;

    /*
     * Reason for the specified billing profile status.
     */
    private BillingProfileStatusReasonCode billingProfileStatusReasonCode;

    /*
     * The payment method family of the primary payment method for the billing profile.
     */
    private PaymentMethodFamily billingProfilePaymentMethodFamily;

    /*
     * The payment method type of the primary payment method for the billing profile.
     */
    private String billingProfilePaymentMethodType;

    /*
     * The Azure AD tenant ID of the billing account for the subscription.
     */
    private String billingTenantId;

    /*
     * The cost center applied to the subscription. Available for agreement type Microsoft Customer Agreement and
     * Microsoft Partner Agreement. This property can be updated via patch.
     */
    private String costCenter;

    /*
     * The name of the customer.
     */
    private String customerDisplayName;

    /*
     * The fully qualified ID that uniquely identifies a customer.
     */
    private String customerId;

    /*
     * Identifies the status of an customer. This is an upcoming property that will be populated in the future.
     */
    private CustomerStatus customerStatus;

    /*
     * The name of the invoice section.
     */
    private String invoiceSectionDisplayName;

    /*
     * The fully qualified ID that uniquely identifies an invoice section.
     */
    private String invoiceSectionId;

    /*
     * Identifies the status of an invoice section.
     */
    private InvoiceSectionState invoiceSectionStatus;

    /*
     * Reason for the specified invoice section status.
     */
    private InvoiceSectionStateReasonCode invoiceSectionStatusReasonCode;

    /*
     * Specifies if the billing account for the subscription is transitioned from a Microsoft Online Service Program to
     * a Microsoft Customer Agreement (MCA) account. Will be present and value will be true if its a transitioned
     * billing account.
     */
    private Boolean isTransitionedBillingAccount;

    /*
     * The sku description.
     */
    private String skuDescription;

    /*
     * The ID that uniquely identifies a sku.
     */
    private String skuId;

    /*
     * The subscription status.
     */
    private BillingSubscriptionStatus subscriptionBillingStatus;

    /*
     * The reason codes for the subscription status.
     */
    private List<BillingSubscriptionStatusDetails> subscriptionBillingStatusDetails;

    /*
     * The type of billing subscription.
     */
    private SubscriptionBillingType subscriptionBillingType;

    /*
     * The address of the individual or organization where service subscription is being used. Available for agreement
     * type Microsoft Online Services Program. This property can be updated via patch.
     */
    private BillingPropertyPropertiesSubscriptionServiceUsageAddress subscriptionServiceUsageAddress;

    /*
     * The Azure workload type of the subscription.
     */
    private SubscriptionWorkloadType subscriptionWorkloadType;

    /*
     * The enrollment details for the subscription. Available for billing accounts with agreement type Enterprise
     * Agreement.
     */
    private BillingPropertyPropertiesEnrollmentDetails enrollmentDetails;

    /*
     * Indicates whether user is the account admin.
     */
    private Boolean isAccountAdmin;

    /*
     * The ID that uniquely identifies a product.
     */
    private String productId;

    /*
     * The ID that uniquely identifies a product.
     */
    private String productName;

    /**
     * Creates an instance of BillingPropertyProperties class.
     */
    public BillingPropertyProperties() {
    }

    /**
     * Get the billingAccountAgreementType property: The type of agreement.
     * 
     * @return the billingAccountAgreementType value.
     */
    public AgreementType billingAccountAgreementType() {
        return this.billingAccountAgreementType;
    }

    /**
     * Get the billingAccountDisplayName property: The name of the billing account.
     * 
     * @return the billingAccountDisplayName value.
     */
    public String billingAccountDisplayName() {
        return this.billingAccountDisplayName;
    }

    /**
     * Get the billingAccountId property: The fully qualified ID that uniquely identifies a billing account.
     * 
     * @return the billingAccountId value.
     */
    public String billingAccountId() {
        return this.billingAccountId;
    }

    /**
     * Get the accountAdminNotificationEmailAddress property: Notification email address for legacy account. Available
     * for agreement type Microsoft Online Services Program.
     * 
     * @return the accountAdminNotificationEmailAddress value.
     */
    public String accountAdminNotificationEmailAddress() {
        return this.accountAdminNotificationEmailAddress;
    }

    /**
     * Get the billingAccountSoldToCountry property: The country of the individual or organization that is responsible
     * for the billing account.
     * 
     * @return the billingAccountSoldToCountry value.
     */
    public String billingAccountSoldToCountry() {
        return this.billingAccountSoldToCountry;
    }

    /**
     * Get the billingAccountStatus property: The current status of the billing account.
     * 
     * @return the billingAccountStatus value.
     */
    public AccountStatus billingAccountStatus() {
        return this.billingAccountStatus;
    }

    /**
     * Get the billingAccountStatusReasonCode property: Reason for the specified billing account status.
     * 
     * @return the billingAccountStatusReasonCode value.
     */
    public BillingAccountStatusReasonCode billingAccountStatusReasonCode() {
        return this.billingAccountStatusReasonCode;
    }

    /**
     * Get the billingAccountType property: The type of customer.
     * 
     * @return the billingAccountType value.
     */
    public AccountType billingAccountType() {
        return this.billingAccountType;
    }

    /**
     * Get the billingAccountSubType property: The tier of the account.
     * 
     * @return the billingAccountSubType value.
     */
    public AccountSubType billingAccountSubType() {
        return this.billingAccountSubType;
    }

    /**
     * Get the billingCurrency property: The billing currency for the subscription. Available for billing accounts with
     * agreement type Enterprise Agreement.
     * 
     * @return the billingCurrency value.
     */
    public String billingCurrency() {
        return this.billingCurrency;
    }

    /**
     * Get the billingProfileDisplayName property: The name of the billing profile.
     * 
     * @return the billingProfileDisplayName value.
     */
    public String billingProfileDisplayName() {
        return this.billingProfileDisplayName;
    }

    /**
     * Get the billingProfileId property: The fully qualified ID that uniquely identifies a billing profile.
     * 
     * @return the billingProfileId value.
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get the billingProfileSpendingLimit property: The billing profile spending limit.
     * 
     * @return the billingProfileSpendingLimit value.
     */
    public SpendingLimit billingProfileSpendingLimit() {
        return this.billingProfileSpendingLimit;
    }

    /**
     * Get the billingProfileSpendingLimitDetails property: The details of billing profile spending limit.
     * 
     * @return the billingProfileSpendingLimitDetails value.
     */
    public List<SpendingLimitDetails> billingProfileSpendingLimitDetails() {
        return this.billingProfileSpendingLimitDetails;
    }

    /**
     * Get the billingProfileStatus property: The status of the billing profile.
     * 
     * @return the billingProfileStatus value.
     */
    public BillingProfileStatus billingProfileStatus() {
        return this.billingProfileStatus;
    }

    /**
     * Get the billingProfileStatusReasonCode property: Reason for the specified billing profile status.
     * 
     * @return the billingProfileStatusReasonCode value.
     */
    public BillingProfileStatusReasonCode billingProfileStatusReasonCode() {
        return this.billingProfileStatusReasonCode;
    }

    /**
     * Get the billingProfilePaymentMethodFamily property: The payment method family of the primary payment method for
     * the billing profile.
     * 
     * @return the billingProfilePaymentMethodFamily value.
     */
    public PaymentMethodFamily billingProfilePaymentMethodFamily() {
        return this.billingProfilePaymentMethodFamily;
    }

    /**
     * Get the billingProfilePaymentMethodType property: The payment method type of the primary payment method for the
     * billing profile.
     * 
     * @return the billingProfilePaymentMethodType value.
     */
    public String billingProfilePaymentMethodType() {
        return this.billingProfilePaymentMethodType;
    }

    /**
     * Get the billingTenantId property: The Azure AD tenant ID of the billing account for the subscription.
     * 
     * @return the billingTenantId value.
     */
    public String billingTenantId() {
        return this.billingTenantId;
    }

    /**
     * Get the costCenter property: The cost center applied to the subscription. Available for agreement type Microsoft
     * Customer Agreement and Microsoft Partner Agreement. This property can be updated via patch.
     * 
     * @return the costCenter value.
     */
    public String costCenter() {
        return this.costCenter;
    }

    /**
     * Set the costCenter property: The cost center applied to the subscription. Available for agreement type Microsoft
     * Customer Agreement and Microsoft Partner Agreement. This property can be updated via patch.
     * 
     * @param costCenter the costCenter value to set.
     * @return the BillingPropertyProperties object itself.
     */
    public BillingPropertyProperties withCostCenter(String costCenter) {
        this.costCenter = costCenter;
        return this;
    }

    /**
     * Get the customerDisplayName property: The name of the customer.
     * 
     * @return the customerDisplayName value.
     */
    public String customerDisplayName() {
        return this.customerDisplayName;
    }

    /**
     * Get the customerId property: The fully qualified ID that uniquely identifies a customer.
     * 
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get the customerStatus property: Identifies the status of an customer. This is an upcoming property that will be
     * populated in the future.
     * 
     * @return the customerStatus value.
     */
    public CustomerStatus customerStatus() {
        return this.customerStatus;
    }

    /**
     * Get the invoiceSectionDisplayName property: The name of the invoice section.
     * 
     * @return the invoiceSectionDisplayName value.
     */
    public String invoiceSectionDisplayName() {
        return this.invoiceSectionDisplayName;
    }

    /**
     * Get the invoiceSectionId property: The fully qualified ID that uniquely identifies an invoice section.
     * 
     * @return the invoiceSectionId value.
     */
    public String invoiceSectionId() {
        return this.invoiceSectionId;
    }

    /**
     * Get the invoiceSectionStatus property: Identifies the status of an invoice section.
     * 
     * @return the invoiceSectionStatus value.
     */
    public InvoiceSectionState invoiceSectionStatus() {
        return this.invoiceSectionStatus;
    }

    /**
     * Get the invoiceSectionStatusReasonCode property: Reason for the specified invoice section status.
     * 
     * @return the invoiceSectionStatusReasonCode value.
     */
    public InvoiceSectionStateReasonCode invoiceSectionStatusReasonCode() {
        return this.invoiceSectionStatusReasonCode;
    }

    /**
     * Get the isTransitionedBillingAccount property: Specifies if the billing account for the subscription is
     * transitioned from a Microsoft Online Service Program to a Microsoft Customer Agreement (MCA) account. Will be
     * present and value will be true if its a transitioned billing account.
     * 
     * @return the isTransitionedBillingAccount value.
     */
    public Boolean isTransitionedBillingAccount() {
        return this.isTransitionedBillingAccount;
    }

    /**
     * Get the skuDescription property: The sku description.
     * 
     * @return the skuDescription value.
     */
    public String skuDescription() {
        return this.skuDescription;
    }

    /**
     * Get the skuId property: The ID that uniquely identifies a sku.
     * 
     * @return the skuId value.
     */
    public String skuId() {
        return this.skuId;
    }

    /**
     * Get the subscriptionBillingStatus property: The subscription status.
     * 
     * @return the subscriptionBillingStatus value.
     */
    public BillingSubscriptionStatus subscriptionBillingStatus() {
        return this.subscriptionBillingStatus;
    }

    /**
     * Get the subscriptionBillingStatusDetails property: The reason codes for the subscription status.
     * 
     * @return the subscriptionBillingStatusDetails value.
     */
    public List<BillingSubscriptionStatusDetails> subscriptionBillingStatusDetails() {
        return this.subscriptionBillingStatusDetails;
    }

    /**
     * Get the subscriptionBillingType property: The type of billing subscription.
     * 
     * @return the subscriptionBillingType value.
     */
    public SubscriptionBillingType subscriptionBillingType() {
        return this.subscriptionBillingType;
    }

    /**
     * Get the subscriptionServiceUsageAddress property: The address of the individual or organization where service
     * subscription is being used. Available for agreement type Microsoft Online Services Program. This property can be
     * updated via patch.
     * 
     * @return the subscriptionServiceUsageAddress value.
     */
    public BillingPropertyPropertiesSubscriptionServiceUsageAddress subscriptionServiceUsageAddress() {
        return this.subscriptionServiceUsageAddress;
    }

    /**
     * Set the subscriptionServiceUsageAddress property: The address of the individual or organization where service
     * subscription is being used. Available for agreement type Microsoft Online Services Program. This property can be
     * updated via patch.
     * 
     * @param subscriptionServiceUsageAddress the subscriptionServiceUsageAddress value to set.
     * @return the BillingPropertyProperties object itself.
     */
    public BillingPropertyProperties withSubscriptionServiceUsageAddress(
        BillingPropertyPropertiesSubscriptionServiceUsageAddress subscriptionServiceUsageAddress) {
        this.subscriptionServiceUsageAddress = subscriptionServiceUsageAddress;
        return this;
    }

    /**
     * Get the subscriptionWorkloadType property: The Azure workload type of the subscription.
     * 
     * @return the subscriptionWorkloadType value.
     */
    public SubscriptionWorkloadType subscriptionWorkloadType() {
        return this.subscriptionWorkloadType;
    }

    /**
     * Get the enrollmentDetails property: The enrollment details for the subscription. Available for billing accounts
     * with agreement type Enterprise Agreement.
     * 
     * @return the enrollmentDetails value.
     */
    public BillingPropertyPropertiesEnrollmentDetails enrollmentDetails() {
        return this.enrollmentDetails;
    }

    /**
     * Set the enrollmentDetails property: The enrollment details for the subscription. Available for billing accounts
     * with agreement type Enterprise Agreement.
     * 
     * @param enrollmentDetails the enrollmentDetails value to set.
     * @return the BillingPropertyProperties object itself.
     */
    public BillingPropertyProperties
        withEnrollmentDetails(BillingPropertyPropertiesEnrollmentDetails enrollmentDetails) {
        this.enrollmentDetails = enrollmentDetails;
        return this;
    }

    /**
     * Get the isAccountAdmin property: Indicates whether user is the account admin.
     * 
     * @return the isAccountAdmin value.
     */
    public Boolean isAccountAdmin() {
        return this.isAccountAdmin;
    }

    /**
     * Get the productId property: The ID that uniquely identifies a product.
     * 
     * @return the productId value.
     */
    public String productId() {
        return this.productId;
    }

    /**
     * Get the productName property: The ID that uniquely identifies a product.
     * 
     * @return the productName value.
     */
    public String productName() {
        return this.productName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (billingProfileSpendingLimitDetails() != null) {
            billingProfileSpendingLimitDetails().forEach(e -> e.validate());
        }
        if (subscriptionBillingStatusDetails() != null) {
            subscriptionBillingStatusDetails().forEach(e -> e.validate());
        }
        if (subscriptionServiceUsageAddress() != null) {
            subscriptionServiceUsageAddress().validate();
        }
        if (enrollmentDetails() != null) {
            enrollmentDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("costCenter", this.costCenter);
        jsonWriter.writeJsonField("subscriptionServiceUsageAddress", this.subscriptionServiceUsageAddress);
        jsonWriter.writeJsonField("enrollmentDetails", this.enrollmentDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingPropertyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingPropertyProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingPropertyProperties.
     */
    public static BillingPropertyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingPropertyProperties deserializedBillingPropertyProperties = new BillingPropertyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingAccountAgreementType".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountAgreementType
                        = AgreementType.fromString(reader.getString());
                } else if ("billingAccountDisplayName".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountDisplayName = reader.getString();
                } else if ("billingAccountId".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountId = reader.getString();
                } else if ("accountAdminNotificationEmailAddress".equals(fieldName)) {
                    deserializedBillingPropertyProperties.accountAdminNotificationEmailAddress = reader.getString();
                } else if ("billingAccountSoldToCountry".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountSoldToCountry = reader.getString();
                } else if ("billingAccountStatus".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountStatus
                        = AccountStatus.fromString(reader.getString());
                } else if ("billingAccountStatusReasonCode".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountStatusReasonCode
                        = BillingAccountStatusReasonCode.fromString(reader.getString());
                } else if ("billingAccountType".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountType
                        = AccountType.fromString(reader.getString());
                } else if ("billingAccountSubType".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingAccountSubType
                        = AccountSubType.fromString(reader.getString());
                } else if ("billingCurrency".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingCurrency = reader.getString();
                } else if ("billingProfileDisplayName".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingProfileDisplayName = reader.getString();
                } else if ("billingProfileId".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingProfileId = reader.getString();
                } else if ("billingProfileSpendingLimit".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingProfileSpendingLimit
                        = SpendingLimit.fromString(reader.getString());
                } else if ("billingProfileSpendingLimitDetails".equals(fieldName)) {
                    List<SpendingLimitDetails> billingProfileSpendingLimitDetails
                        = reader.readArray(reader1 -> SpendingLimitDetails.fromJson(reader1));
                    deserializedBillingPropertyProperties.billingProfileSpendingLimitDetails
                        = billingProfileSpendingLimitDetails;
                } else if ("billingProfileStatus".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingProfileStatus
                        = BillingProfileStatus.fromString(reader.getString());
                } else if ("billingProfileStatusReasonCode".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingProfileStatusReasonCode
                        = BillingProfileStatusReasonCode.fromString(reader.getString());
                } else if ("billingProfilePaymentMethodFamily".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingProfilePaymentMethodFamily
                        = PaymentMethodFamily.fromString(reader.getString());
                } else if ("billingProfilePaymentMethodType".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingProfilePaymentMethodType = reader.getString();
                } else if ("billingTenantId".equals(fieldName)) {
                    deserializedBillingPropertyProperties.billingTenantId = reader.getString();
                } else if ("costCenter".equals(fieldName)) {
                    deserializedBillingPropertyProperties.costCenter = reader.getString();
                } else if ("customerDisplayName".equals(fieldName)) {
                    deserializedBillingPropertyProperties.customerDisplayName = reader.getString();
                } else if ("customerId".equals(fieldName)) {
                    deserializedBillingPropertyProperties.customerId = reader.getString();
                } else if ("customerStatus".equals(fieldName)) {
                    deserializedBillingPropertyProperties.customerStatus
                        = CustomerStatus.fromString(reader.getString());
                } else if ("invoiceSectionDisplayName".equals(fieldName)) {
                    deserializedBillingPropertyProperties.invoiceSectionDisplayName = reader.getString();
                } else if ("invoiceSectionId".equals(fieldName)) {
                    deserializedBillingPropertyProperties.invoiceSectionId = reader.getString();
                } else if ("invoiceSectionStatus".equals(fieldName)) {
                    deserializedBillingPropertyProperties.invoiceSectionStatus
                        = InvoiceSectionState.fromString(reader.getString());
                } else if ("invoiceSectionStatusReasonCode".equals(fieldName)) {
                    deserializedBillingPropertyProperties.invoiceSectionStatusReasonCode
                        = InvoiceSectionStateReasonCode.fromString(reader.getString());
                } else if ("isTransitionedBillingAccount".equals(fieldName)) {
                    deserializedBillingPropertyProperties.isTransitionedBillingAccount
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("skuDescription".equals(fieldName)) {
                    deserializedBillingPropertyProperties.skuDescription = reader.getString();
                } else if ("skuId".equals(fieldName)) {
                    deserializedBillingPropertyProperties.skuId = reader.getString();
                } else if ("subscriptionBillingStatus".equals(fieldName)) {
                    deserializedBillingPropertyProperties.subscriptionBillingStatus
                        = BillingSubscriptionStatus.fromString(reader.getString());
                } else if ("subscriptionBillingStatusDetails".equals(fieldName)) {
                    List<BillingSubscriptionStatusDetails> subscriptionBillingStatusDetails
                        = reader.readArray(reader1 -> BillingSubscriptionStatusDetails.fromJson(reader1));
                    deserializedBillingPropertyProperties.subscriptionBillingStatusDetails
                        = subscriptionBillingStatusDetails;
                } else if ("subscriptionBillingType".equals(fieldName)) {
                    deserializedBillingPropertyProperties.subscriptionBillingType
                        = SubscriptionBillingType.fromString(reader.getString());
                } else if ("subscriptionServiceUsageAddress".equals(fieldName)) {
                    deserializedBillingPropertyProperties.subscriptionServiceUsageAddress
                        = BillingPropertyPropertiesSubscriptionServiceUsageAddress.fromJson(reader);
                } else if ("subscriptionWorkloadType".equals(fieldName)) {
                    deserializedBillingPropertyProperties.subscriptionWorkloadType
                        = SubscriptionWorkloadType.fromString(reader.getString());
                } else if ("enrollmentDetails".equals(fieldName)) {
                    deserializedBillingPropertyProperties.enrollmentDetails
                        = BillingPropertyPropertiesEnrollmentDetails.fromJson(reader);
                } else if ("isAccountAdmin".equals(fieldName)) {
                    deserializedBillingPropertyProperties.isAccountAdmin = reader.getNullable(JsonReader::getBoolean);
                } else if ("productId".equals(fieldName)) {
                    deserializedBillingPropertyProperties.productId = reader.getString();
                } else if ("productName".equals(fieldName)) {
                    deserializedBillingPropertyProperties.productName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingPropertyProperties;
        });
    }
}
