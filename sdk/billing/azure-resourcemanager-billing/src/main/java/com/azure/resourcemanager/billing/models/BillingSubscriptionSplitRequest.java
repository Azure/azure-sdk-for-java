// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request parameters that are provided to split the billing subscription.
 */
@Fluent
public final class BillingSubscriptionSplitRequest implements JsonSerializable<BillingSubscriptionSplitRequest> {
    /*
     * The ID of the target product to which the subscription needs to be split into. This value is not same as the
     * value returned in Get API call and can be retrieved from Catalog API to know the product id to split into.
     */
    private String targetProductTypeId;

    /*
     * The ID of the target product to which the subscription needs to be split into. This value is not same as the
     * value returned in Get API call and can be retrieved from Catalog API to know the sku id to split into.
     */
    private String targetSkuId;

    /*
     * The quantity of the target product to which the subscription needs to be split into.
     */
    private Integer quantity;

    /*
     * The term duration of the target in ISO8601 format product to which the subscription needs to be split into.
     * Example: P1M, P1Y
     */
    private String termDuration;

    /*
     * The billing frequency of the target subscription in the ISO8601 format. Example: P1M, P3M, P1Y"
     */
    private String billingFrequency;

    /**
     * Creates an instance of BillingSubscriptionSplitRequest class.
     */
    public BillingSubscriptionSplitRequest() {
    }

    /**
     * Get the targetProductTypeId property: The ID of the target product to which the subscription needs to be split
     * into. This value is not same as the value returned in Get API call and can be retrieved from Catalog API to know
     * the product id to split into.
     * 
     * @return the targetProductTypeId value.
     */
    public String targetProductTypeId() {
        return this.targetProductTypeId;
    }

    /**
     * Set the targetProductTypeId property: The ID of the target product to which the subscription needs to be split
     * into. This value is not same as the value returned in Get API call and can be retrieved from Catalog API to know
     * the product id to split into.
     * 
     * @param targetProductTypeId the targetProductTypeId value to set.
     * @return the BillingSubscriptionSplitRequest object itself.
     */
    public BillingSubscriptionSplitRequest withTargetProductTypeId(String targetProductTypeId) {
        this.targetProductTypeId = targetProductTypeId;
        return this;
    }

    /**
     * Get the targetSkuId property: The ID of the target product to which the subscription needs to be split into. This
     * value is not same as the value returned in Get API call and can be retrieved from Catalog API to know the sku id
     * to split into.
     * 
     * @return the targetSkuId value.
     */
    public String targetSkuId() {
        return this.targetSkuId;
    }

    /**
     * Set the targetSkuId property: The ID of the target product to which the subscription needs to be split into. This
     * value is not same as the value returned in Get API call and can be retrieved from Catalog API to know the sku id
     * to split into.
     * 
     * @param targetSkuId the targetSkuId value to set.
     * @return the BillingSubscriptionSplitRequest object itself.
     */
    public BillingSubscriptionSplitRequest withTargetSkuId(String targetSkuId) {
        this.targetSkuId = targetSkuId;
        return this;
    }

    /**
     * Get the quantity property: The quantity of the target product to which the subscription needs to be split into.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: The quantity of the target product to which the subscription needs to be split into.
     * 
     * @param quantity the quantity value to set.
     * @return the BillingSubscriptionSplitRequest object itself.
     */
    public BillingSubscriptionSplitRequest withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the termDuration property: The term duration of the target in ISO8601 format product to which the
     * subscription needs to be split into. Example: P1M, P1Y.
     * 
     * @return the termDuration value.
     */
    public String termDuration() {
        return this.termDuration;
    }

    /**
     * Set the termDuration property: The term duration of the target in ISO8601 format product to which the
     * subscription needs to be split into. Example: P1M, P1Y.
     * 
     * @param termDuration the termDuration value to set.
     * @return the BillingSubscriptionSplitRequest object itself.
     */
    public BillingSubscriptionSplitRequest withTermDuration(String termDuration) {
        this.termDuration = termDuration;
        return this;
    }

    /**
     * Get the billingFrequency property: The billing frequency of the target subscription in the ISO8601 format.
     * Example: P1M, P3M, P1Y".
     * 
     * @return the billingFrequency value.
     */
    public String billingFrequency() {
        return this.billingFrequency;
    }

    /**
     * Set the billingFrequency property: The billing frequency of the target subscription in the ISO8601 format.
     * Example: P1M, P3M, P1Y".
     * 
     * @param billingFrequency the billingFrequency value to set.
     * @return the BillingSubscriptionSplitRequest object itself.
     */
    public BillingSubscriptionSplitRequest withBillingFrequency(String billingFrequency) {
        this.billingFrequency = billingFrequency;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetProductTypeId", this.targetProductTypeId);
        jsonWriter.writeStringField("targetSkuId", this.targetSkuId);
        jsonWriter.writeNumberField("quantity", this.quantity);
        jsonWriter.writeStringField("termDuration", this.termDuration);
        jsonWriter.writeStringField("billingFrequency", this.billingFrequency);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingSubscriptionSplitRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingSubscriptionSplitRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingSubscriptionSplitRequest.
     */
    public static BillingSubscriptionSplitRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingSubscriptionSplitRequest deserializedBillingSubscriptionSplitRequest
                = new BillingSubscriptionSplitRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetProductTypeId".equals(fieldName)) {
                    deserializedBillingSubscriptionSplitRequest.targetProductTypeId = reader.getString();
                } else if ("targetSkuId".equals(fieldName)) {
                    deserializedBillingSubscriptionSplitRequest.targetSkuId = reader.getString();
                } else if ("quantity".equals(fieldName)) {
                    deserializedBillingSubscriptionSplitRequest.quantity = reader.getNullable(JsonReader::getInt);
                } else if ("termDuration".equals(fieldName)) {
                    deserializedBillingSubscriptionSplitRequest.termDuration = reader.getString();
                } else if ("billingFrequency".equals(fieldName)) {
                    deserializedBillingSubscriptionSplitRequest.billingFrequency = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingSubscriptionSplitRequest;
        });
    }
}
