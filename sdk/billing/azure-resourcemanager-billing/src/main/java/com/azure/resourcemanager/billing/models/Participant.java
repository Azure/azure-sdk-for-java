// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Billing account name. Available for a specific type of agreement.
 */
@Immutable
public final class Participant implements JsonSerializable<Participant> {
    /*
     * The email address of the participant.
     */
    private String email;

    /*
     * The acceptance status of the participant.
     */
    private String status;

    /*
     * The date when the status got changed.
     */
    private OffsetDateTime statusDate;

    /**
     * Creates an instance of Participant class.
     */
    public Participant() {
    }

    /**
     * Get the email property: The email address of the participant.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Get the status property: The acceptance status of the participant.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the statusDate property: The date when the status got changed.
     * 
     * @return the statusDate value.
     */
    public OffsetDateTime statusDate() {
        return this.statusDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Participant from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Participant if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Participant.
     */
    public static Participant fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Participant deserializedParticipant = new Participant();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("email".equals(fieldName)) {
                    deserializedParticipant.email = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedParticipant.status = reader.getString();
                } else if ("statusDate".equals(fieldName)) {
                    deserializedParticipant.statusDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParticipant;
        });
    }
}
