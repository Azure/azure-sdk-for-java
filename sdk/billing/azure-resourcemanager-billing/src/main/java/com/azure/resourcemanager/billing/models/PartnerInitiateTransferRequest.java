// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.billing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.billing.fluent.models.PartnerInitiateTransferProperties;
import java.io.IOException;

/**
 * Request parameters to initiate partner transfer.
 */
@Fluent
public final class PartnerInitiateTransferRequest implements JsonSerializable<PartnerInitiateTransferRequest> {
    /*
     * Request parameters to initiate partner transfer.
     */
    private PartnerInitiateTransferProperties innerProperties;

    /**
     * Creates an instance of PartnerInitiateTransferRequest class.
     */
    public PartnerInitiateTransferRequest() {
    }

    /**
     * Get the innerProperties property: Request parameters to initiate partner transfer.
     * 
     * @return the innerProperties value.
     */
    private PartnerInitiateTransferProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the recipientEmailId property: The email ID of the recipient to whom the transfer request is sent.
     * 
     * @return the recipientEmailId value.
     */
    public String recipientEmailId() {
        return this.innerProperties() == null ? null : this.innerProperties().recipientEmailId();
    }

    /**
     * Set the recipientEmailId property: The email ID of the recipient to whom the transfer request is sent.
     * 
     * @param recipientEmailId the recipientEmailId value to set.
     * @return the PartnerInitiateTransferRequest object itself.
     */
    public PartnerInitiateTransferRequest withRecipientEmailId(String recipientEmailId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PartnerInitiateTransferProperties();
        }
        this.innerProperties().withRecipientEmailId(recipientEmailId);
        return this;
    }

    /**
     * Get the resellerId property: Optional MPN ID of the reseller for transfer requests that are sent from a Microsoft
     * Partner Agreement billing account.
     * 
     * @return the resellerId value.
     */
    public String resellerId() {
        return this.innerProperties() == null ? null : this.innerProperties().resellerId();
    }

    /**
     * Set the resellerId property: Optional MPN ID of the reseller for transfer requests that are sent from a Microsoft
     * Partner Agreement billing account.
     * 
     * @param resellerId the resellerId value to set.
     * @return the PartnerInitiateTransferRequest object itself.
     */
    public PartnerInitiateTransferRequest withResellerId(String resellerId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PartnerInitiateTransferProperties();
        }
        this.innerProperties().withResellerId(resellerId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartnerInitiateTransferRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartnerInitiateTransferRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PartnerInitiateTransferRequest.
     */
    public static PartnerInitiateTransferRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartnerInitiateTransferRequest deserializedPartnerInitiateTransferRequest
                = new PartnerInitiateTransferRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedPartnerInitiateTransferRequest.innerProperties
                        = PartnerInitiateTransferProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartnerInitiateTransferRequest;
        });
    }
}
