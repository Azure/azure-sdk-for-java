/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Departments;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.billing.v2019_10_01_preview.DepartmentListResult;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Department;

class DepartmentsImpl extends WrapperImpl<DepartmentsInner> implements Departments {
    private final BillingManager manager;

    DepartmentsImpl(BillingManager manager) {
        super(manager.inner().departments());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private DepartmentImpl wrapModel(DepartmentInner inner) {
        return  new DepartmentImpl(inner, manager());
    }

    @Override
    public Observable<DepartmentListResult> listByBillingAccountNameAsync(String billingAccountName) {
        DepartmentsInner client = this.inner();
        return client.listByBillingAccountNameAsync(billingAccountName)
        .map(new Func1<DepartmentListResultInner, DepartmentListResult>() {
            @Override
            public DepartmentListResult call(DepartmentListResultInner inner) {
                return new DepartmentListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Department> getAsync(String billingAccountName, String departmentName) {
        DepartmentsInner client = this.inner();
        return client.getAsync(billingAccountName, departmentName)
        .flatMap(new Func1<DepartmentInner, Observable<Department>>() {
            @Override
            public Observable<Department> call(DepartmentInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Department)wrapModel(inner));
                }
            }
       });
    }

}
