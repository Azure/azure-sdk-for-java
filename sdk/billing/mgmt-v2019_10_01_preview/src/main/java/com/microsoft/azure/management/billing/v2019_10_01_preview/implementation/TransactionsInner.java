/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Transactions.
 */
public class TransactionsInner {
    /** The Retrofit service to perform REST calls. */
    private TransactionsService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of TransactionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TransactionsInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(TransactionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Transactions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TransactionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByCustomer" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/transactions")
        Observable<Response<ResponseBody>> listByCustomer(@Path("billingAccountName") String billingAccountName, @Path("customerName") String customerName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/transactions")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByInvoiceSection" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transactions")
        Observable<Response<ResponseBody>> listByInvoiceSection(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceSectionName") String invoiceSectionName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Query("$filter") String filter, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByInvoice" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}/transactions")
        Observable<Response<ResponseBody>> listByInvoice(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions/{transactionName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("transactionName") String transactionName, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByCustomerNext" })
        @GET
        Observable<Response<ResponseBody>> listByCustomerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByBillingAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Transactions listByInvoiceNext" })
        @GET
        Observable<Response<ResponseBody>> listByInvoiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByCustomer(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<TransactionInner>> response = listByCustomerSinglePageAsync(billingAccountName, customerName, periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByCustomerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByCustomerAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByCustomerSinglePageAsync(billingAccountName, customerName, periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByCustomerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByCustomerAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate) {
        return listByCustomerWithServiceResponseAsync(billingAccountName, customerName, periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByCustomerWithServiceResponseAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate) {
        return listByCustomerSinglePageAsync(billingAccountName, customerName, periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByCustomerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByCustomerSinglePageAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        final String filter = null;
        return service.listByCustomer(billingAccountName, customerName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByCustomerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByCustomer(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate, final String filter) {
        ServiceResponse<Page<TransactionInner>> response = listByCustomerSinglePageAsync(billingAccountName, customerName, periodStartDate, periodEndDate, filter).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByCustomerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByCustomerAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate, final String filter, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByCustomerSinglePageAsync(billingAccountName, customerName, periodStartDate, periodEndDate, filter),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByCustomerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByCustomerAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate, final String filter) {
        return listByCustomerWithServiceResponseAsync(billingAccountName, customerName, periodStartDate, periodEndDate, filter)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByCustomerWithServiceResponseAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate, final String filter) {
        return listByCustomerSinglePageAsync(billingAccountName, customerName, periodStartDate, periodEndDate, filter)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByCustomerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<TransactionInner>> * @param customerName The ID that uniquely identifies a customer.
    ServiceResponse<PageImpl<TransactionInner>> * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<TransactionInner>> * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<TransactionInner>> * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByCustomerSinglePageAsync(final String billingAccountName, final String customerName, final String periodStartDate, final String periodEndDate, final String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByCustomer(billingAccountName, customerName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByCustomerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByCustomerDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByBillingAccount(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<TransactionInner>> response = listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByBillingAccountAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByBillingAccountAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        return listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        final String filter = null;
        return service.listByBillingAccount(billingAccountName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByBillingAccount(final String billingAccountName, final String periodStartDate, final String periodEndDate, final String filter) {
        ServiceResponse<Page<TransactionInner>> response = listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate, filter).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByBillingAccountAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate, final String filter, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate, filter),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByBillingAccountAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate, final String filter) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, periodStartDate, periodEndDate, filter)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate, final String filter) {
        return listByBillingAccountSinglePageAsync(billingAccountName, periodStartDate, periodEndDate, filter)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<TransactionInner>> * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<TransactionInner>> * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
    ServiceResponse<PageImpl<TransactionInner>> * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName, final String periodStartDate, final String periodEndDate, final String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByBillingAccount(billingAccountName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByBillingProfile(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate).toBlocking().single().body();
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByBillingProfileAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate), serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByBillingProfileAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByBillingProfileWithServiceResponseAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        final String filter = null;
        return service.listByBillingProfile(billingAccountName, billingProfileName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByBillingProfileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByBillingProfile(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate, String filter) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate, filter).toBlocking().single().body();
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByBillingProfileAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate, String filter, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate, filter), serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByBillingProfileAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate, String filter) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate, filter).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the billed and unbilled transactions by billing profile name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByBillingProfileWithServiceResponseAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate, String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByBillingProfile(billingAccountName, billingProfileName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByBillingProfileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionListResultInner> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate) {
        return listByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate).toBlocking().single().body();
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate), serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate) {
        return listByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByInvoiceSectionWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        final String filter = null;
        return service.listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByInvoiceSectionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionListResultInner object if successful.
     */
    public TransactionListResultInner listByInvoiceSection(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate, String filter) {
        return listByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate, filter).toBlocking().single().body();
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionListResultInner> listByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate, String filter, final ServiceCallback<TransactionListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate, filter), serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<TransactionListResultInner> listByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate, String filter) {
        return listByInvoiceSectionWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate, filter).map(new Func1<ServiceResponse<TransactionListResultInner>, TransactionListResultInner>() {
            @Override
            public TransactionListResultInner call(ServiceResponse<TransactionListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the billed and unbilled transactions by invoice section name for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param filter May be used to filter by transaction type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionListResultInner object
     */
    public Observable<ServiceResponse<TransactionListResultInner>> listByInvoiceSectionWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String periodStartDate, String periodEndDate, String filter) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceSectionName == null) {
            throw new IllegalArgumentException("Parameter invoiceSectionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, this.client.apiVersion(), periodStartDate, periodEndDate, filter, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionListResultInner> clientResponse = listByInvoiceSectionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionListResultInner> listByInvoiceSectionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByInvoice(final String billingAccountName, final String billingProfileName, final String invoiceName) {
        ServiceResponse<Page<TransactionInner>> response = listByInvoiceSinglePageAsync(billingAccountName, billingProfileName, invoiceName).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByInvoiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByInvoiceAsync(final String billingAccountName, final String billingProfileName, final String invoiceName, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceSinglePageAsync(billingAccountName, billingProfileName, invoiceName),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByInvoiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByInvoiceAsync(final String billingAccountName, final String billingProfileName, final String invoiceName) {
        return listByInvoiceWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceName)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByInvoiceWithServiceResponseAsync(final String billingAccountName, final String billingProfileName, final String invoiceName) {
        return listByInvoiceSinglePageAsync(billingAccountName, billingProfileName, invoiceName)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<TransactionInner>> * @param billingProfileName The ID that uniquely identifies a billing profile.
    ServiceResponse<PageImpl<TransactionInner>> * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByInvoiceSinglePageAsync(final String billingAccountName, final String billingProfileName, final String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByInvoice(billingAccountName, billingProfileName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByInvoiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByInvoiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a transaction by ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param transactionName The ID that uniquely identifies a transaction.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransactionInner object if successful.
     */
    public TransactionInner get(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate).toBlocking().single().body();
    }

    /**
     * Gets a transaction by ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param transactionName The ID that uniquely identifies a transaction.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransactionInner> getAsync(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate, final ServiceCallback<TransactionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate), serviceCallback);
    }

    /**
     * Gets a transaction by ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param transactionName The ID that uniquely identifies a transaction.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionInner object
     */
    public Observable<TransactionInner> getAsync(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate).map(new Func1<ServiceResponse<TransactionInner>, TransactionInner>() {
            @Override
            public TransactionInner call(ServiceResponse<TransactionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a transaction by ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param transactionName The ID that uniquely identifies a transaction.
     * @param periodStartDate The start date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the transactions. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransactionInner object
     */
    public Observable<ServiceResponse<TransactionInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String transactionName, String periodStartDate, String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (transactionName == null) {
            throw new IllegalArgumentException("Parameter transactionName is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransactionInner>>>() {
                @Override
                public Observable<ServiceResponse<TransactionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransactionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransactionInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransactionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransactionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByCustomerNext(final String nextPageLink) {
        ServiceResponse<Page<TransactionInner>> response = listByCustomerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByCustomerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByCustomerNextAsync(final String nextPageLink, final ServiceFuture<List<TransactionInner>> serviceFuture, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByCustomerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByCustomerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByCustomerNextAsync(final String nextPageLink) {
        return listByCustomerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByCustomerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByCustomerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByCustomerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by customer id for given start date and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice Id and do not include tax. Tax is added to the amount once an invoice is generated.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByCustomerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByCustomerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByCustomerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByCustomerNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByBillingAccountNext(final String nextPageLink) {
        ServiceResponse<Page<TransactionInner>> response = listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByBillingAccountNextAsync(final String nextPageLink, final ServiceFuture<List<TransactionInner>> serviceFuture, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByBillingAccountNextAsync(final String nextPageLink) {
        return listByBillingAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the billed and unbilled transactions by billing account name for given start and end date. Transactions include purchases, refunds and Azure usage charges. Unbilled transactions are listed under pending invoice ID and do not include tax. Tax is added to the amount once an invoice is generated.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByBillingAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByBillingAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByBillingAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TransactionInner&gt; object if successful.
     */
    public PagedList<TransactionInner> listByInvoiceNext(final String nextPageLink) {
        ServiceResponse<Page<TransactionInner>> response = listByInvoiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TransactionInner>(response.body()) {
            @Override
            public Page<TransactionInner> nextPage(String nextPageLink) {
                return listByInvoiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TransactionInner>> listByInvoiceNextAsync(final String nextPageLink, final ServiceFuture<List<TransactionInner>> serviceFuture, final ListOperationCallback<TransactionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByInvoiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(String nextPageLink) {
                    return listByInvoiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<Page<TransactionInner>> listByInvoiceNextAsync(final String nextPageLink) {
        return listByInvoiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TransactionInner>>, Page<TransactionInner>>() {
                @Override
                public Page<TransactionInner> call(ServiceResponse<Page<TransactionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TransactionInner&gt; object
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByInvoiceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByInvoiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TransactionInner>>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(ServiceResponse<Page<TransactionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByInvoiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
     *
    ServiceResponse<PageImpl<TransactionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TransactionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TransactionInner>>> listByInvoiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByInvoiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TransactionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TransactionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TransactionInner>> result = listByInvoiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TransactionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TransactionInner>> listByInvoiceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TransactionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TransactionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
