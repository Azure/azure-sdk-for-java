/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Products;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ProductsListResult;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Product;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ValidateProductTransferEligibilityResult;
import com.microsoft.azure.management.billing.v2019_10_01_preview.UpdateAutoRenewOperation;
import com.microsoft.azure.management.billing.v2019_10_01_preview.TransferProductRequestProperties;

class ProductsImpl extends WrapperImpl<ProductsInner> implements Products {
    private final BillingManager manager;

    ProductsImpl(BillingManager manager) {
        super(manager.inner().products());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private ProductImpl wrapModel(ProductInner inner) {
        return  new ProductImpl(inner, manager());
    }

    @Override
    public Observable<ProductsListResult> listByCustomerAsync(String billingAccountName, String customerName) {
        ProductsInner client = this.inner();
        return client.listByCustomerAsync(billingAccountName, customerName)
        .map(new Func1<ProductsListResultInner, ProductsListResult>() {
            @Override
            public ProductsListResult call(ProductsListResultInner inner) {
                return new ProductsListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> listByBillingAccountAsync(final String billingAccountName) {
        ProductsInner client = this.inner();
        return client.listByBillingAccountAsync(billingAccountName)
        .flatMapIterable(new Func1<Page<ProductInner>, Iterable<ProductInner>>() {
            @Override
            public Iterable<ProductInner> call(Page<ProductInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ProductsListResult> listByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        ProductsInner client = this.inner();
        return client.listByInvoiceSectionAsync(billingAccountName, billingProfileName, invoiceSectionName)
        .map(new Func1<ProductsListResultInner, ProductsListResult>() {
            @Override
            public ProductsListResult call(ProductsListResultInner inner) {
                return new ProductsListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> getAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName) {
        ProductsInner client = this.inner();
        return client.getAsync(billingAccountName, billingProfileName, invoiceSectionName, productName)
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> transferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        ProductsInner client = this.inner();
        return client.transferAsync(billingAccountName, billingProfileName, invoiceSectionName, productName, parameters)
        .map(new Func1<ProductInner, Product>() {
            @Override
            public Product call(ProductInner inner) {
                return new ProductImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ValidateProductTransferEligibilityResult> validateTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName, TransferProductRequestProperties parameters) {
        ProductsInner client = this.inner();
        return client.validateTransferAsync(billingAccountName, billingProfileName, invoiceSectionName, productName, parameters)
        .map(new Func1<ValidateProductTransferEligibilityResultInner, ValidateProductTransferEligibilityResult>() {
            @Override
            public ValidateProductTransferEligibilityResult call(ValidateProductTransferEligibilityResultInner inner) {
                return new ValidateProductTransferEligibilityResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<UpdateAutoRenewOperation> updateAutoRenewByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String productName) {
        ProductsInner client = this.inner();
        return client.updateAutoRenewByInvoiceSectionAsync(billingAccountName, billingProfileName, invoiceSectionName, productName)
        .map(new Func1<UpdateAutoRenewOperationInner, UpdateAutoRenewOperation>() {
            @Override
            public UpdateAutoRenewOperation call(UpdateAutoRenewOperationInner inner) {
                return new UpdateAutoRenewOperationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Product> getByCustomerAsync(String billingAccountName, String customerName, String productName) {
        ProductsInner client = this.inner();
        return client.getByCustomerAsync(billingAccountName, customerName, productName)
        .flatMap(new Func1<ProductInner, Observable<Product>>() {
            @Override
            public Observable<Product> call(ProductInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Product)wrapModel(inner));
                }
            }
       });
    }

}
