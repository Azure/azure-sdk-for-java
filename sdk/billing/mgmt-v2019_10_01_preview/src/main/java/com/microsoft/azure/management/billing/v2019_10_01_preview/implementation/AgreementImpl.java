/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.management.billing.v2019_10_01_preview.Agreement;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.billing.v2019_10_01_preview.AcceptanceMode;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Category;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Participants;

class AgreementImpl extends IndexableRefreshableWrapperImpl<Agreement, AgreementInner> implements Agreement {
    private final BillingManager manager;
    private String billingAccountName;
    private String agreementName;

    AgreementImpl(AgreementInner inner,  BillingManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.billingAccountName = IdParsingUtils.getValueFromIdByName(inner.id(), "billingAccounts");
        this.agreementName = IdParsingUtils.getValueFromIdByName(inner.id(), "agreements");
    }

    @Override
    public BillingManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<AgreementInner> getInnerAsync() {
        AgreementsInner client = this.manager().inner().agreements();
        return client.getAsync(this.billingAccountName, this.agreementName);
    }



    @Override
    public AcceptanceMode acceptanceMode() {
        return this.inner().acceptanceMode();
    }

    @Override
    public String agreementLink() {
        return this.inner().agreementLink();
    }

    @Override
    public Category category() {
        return this.inner().category();
    }

    @Override
    public DateTime effectiveDate() {
        return this.inner().effectiveDate();
    }

    @Override
    public DateTime expirationDate() {
        return this.inner().expirationDate();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<Participants> participants() {
        return this.inner().participants();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
