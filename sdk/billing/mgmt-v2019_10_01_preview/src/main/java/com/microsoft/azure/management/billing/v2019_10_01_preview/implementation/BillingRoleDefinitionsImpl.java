/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2019_10_01_preview.BillingRoleDefinitions;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.billing.v2019_10_01_preview.BillingRoleDefinition;
import com.microsoft.azure.management.billing.v2019_10_01_preview.BillingRoleDefinitionListResult;

class BillingRoleDefinitionsImpl extends WrapperImpl<BillingRoleDefinitionsInner> implements BillingRoleDefinitions {
    private final BillingManager manager;

    BillingRoleDefinitionsImpl(BillingManager manager) {
        super(manager.inner().billingRoleDefinitions());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    private BillingRoleDefinitionImpl wrapModel(BillingRoleDefinitionInner inner) {
        return  new BillingRoleDefinitionImpl(inner, manager());
    }

    @Override
    public Observable<BillingRoleDefinition> getByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingRoleDefinitionName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.getByInvoiceSectionAsync(billingAccountName, billingProfileName, invoiceSectionName, billingRoleDefinitionName)
        .map(new Func1<BillingRoleDefinitionInner, BillingRoleDefinition>() {
            @Override
            public BillingRoleDefinition call(BillingRoleDefinitionInner inner) {
                return new BillingRoleDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinition> getByBillingProfileAsync(String billingAccountName, String billingProfileName, String billingRoleDefinitionName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.getByBillingProfileAsync(billingAccountName, billingProfileName, billingRoleDefinitionName)
        .map(new Func1<BillingRoleDefinitionInner, BillingRoleDefinition>() {
            @Override
            public BillingRoleDefinition call(BillingRoleDefinitionInner inner) {
                return new BillingRoleDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinition> getByDepartmentAsync(String billingAccountName, String departmentName, String billingRoleDefinitionName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.getByDepartmentAsync(billingAccountName, departmentName, billingRoleDefinitionName)
        .map(new Func1<BillingRoleDefinitionInner, BillingRoleDefinition>() {
            @Override
            public BillingRoleDefinition call(BillingRoleDefinitionInner inner) {
                return new BillingRoleDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinition> getByEnrollmentAccountAsync(String billingAccountName, String enrollmentAccountName, String billingRoleDefinitionName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.getByEnrollmentAccountAsync(billingAccountName, enrollmentAccountName, billingRoleDefinitionName)
        .map(new Func1<BillingRoleDefinitionInner, BillingRoleDefinition>() {
            @Override
            public BillingRoleDefinition call(BillingRoleDefinitionInner inner) {
                return new BillingRoleDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinitionListResult> listByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.listByInvoiceSectionAsync(billingAccountName, billingProfileName, invoiceSectionName)
        .map(new Func1<BillingRoleDefinitionListResultInner, BillingRoleDefinitionListResult>() {
            @Override
            public BillingRoleDefinitionListResult call(BillingRoleDefinitionListResultInner inner) {
                return new BillingRoleDefinitionListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinitionListResult> listByBillingProfileAsync(String billingAccountName, String billingProfileName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.listByBillingProfileAsync(billingAccountName, billingProfileName)
        .map(new Func1<BillingRoleDefinitionListResultInner, BillingRoleDefinitionListResult>() {
            @Override
            public BillingRoleDefinitionListResult call(BillingRoleDefinitionListResultInner inner) {
                return new BillingRoleDefinitionListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinition> listByDepartmentAsync(final String billingAccountName, final String departmentName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.listByDepartmentAsync(billingAccountName, departmentName)
        .flatMapIterable(new Func1<Page<BillingRoleDefinitionInner>, Iterable<BillingRoleDefinitionInner>>() {
            @Override
            public Iterable<BillingRoleDefinitionInner> call(Page<BillingRoleDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingRoleDefinitionInner, BillingRoleDefinition>() {
            @Override
            public BillingRoleDefinition call(BillingRoleDefinitionInner inner) {
                return new BillingRoleDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinition> listByEnrollmentAccountAsync(final String billingAccountName, final String enrollmentAccountName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.listByEnrollmentAccountAsync(billingAccountName, enrollmentAccountName)
        .flatMapIterable(new Func1<Page<BillingRoleDefinitionInner>, Iterable<BillingRoleDefinitionInner>>() {
            @Override
            public Iterable<BillingRoleDefinitionInner> call(Page<BillingRoleDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingRoleDefinitionInner, BillingRoleDefinition>() {
            @Override
            public BillingRoleDefinition call(BillingRoleDefinitionInner inner) {
                return new BillingRoleDefinitionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinition> listByBillingAccountAsync(final String billingAccountName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.listByBillingAccountAsync(billingAccountName)
        .flatMapIterable(new Func1<Page<BillingRoleDefinitionInner>, Iterable<BillingRoleDefinitionInner>>() {
            @Override
            public Iterable<BillingRoleDefinitionInner> call(Page<BillingRoleDefinitionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<BillingRoleDefinitionInner, BillingRoleDefinition>() {
            @Override
            public BillingRoleDefinition call(BillingRoleDefinitionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<BillingRoleDefinition> getByBillingAccountAsync(String billingAccountName, String billingRoleDefinitionName) {
        BillingRoleDefinitionsInner client = this.inner();
        return client.getByBillingAccountAsync(billingAccountName, billingRoleDefinitionName)
        .flatMap(new Func1<BillingRoleDefinitionInner, Observable<BillingRoleDefinition>>() {
            @Override
            public Observable<BillingRoleDefinition> call(BillingRoleDefinitionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((BillingRoleDefinition)wrapModel(inner));
                }
            }
       });
    }

}
