/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview;

import rx.Observable;
import com.microsoft.azure.management.billing.v2019_10_01_preview.implementation.BillingSubscriptionsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing BillingSubscriptions.
 */
public interface BillingSubscriptions extends HasInner<BillingSubscriptionsInner> {
    /**
     * Lists billing subscriptions by billing account name.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BillingSubscription> listByBillingAccountAsync(final String billingAccountName);

    /**
     * Lists billing subscriptions by billing profile name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BillingSubscriptionsListResult> listByBillingProfileAsync(String billingAccountName, String billingProfileName);

    /**
     * Lists billing subscription by invoice section name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BillingSubscriptionsListResult> listByInvoiceSectionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName);

    /**
     * Get a single billing subscription by name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BillingSubscription> getAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName);

    /**
     * Transfers the subscription from one invoice section to another within a billing account.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Request parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TransferBillingSubscriptionResult> transferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters);

    /**
     * Validates the transfer of billing subscriptions across invoice sections.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param invoiceSectionName InvoiceSection Id.
     * @param billingSubscriptionName Billing Subscription Id.
     * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ValidateSubscriptionTransferEligibilityResult> validateTransferAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String billingSubscriptionName, TransferBillingSubscriptionRequestProperties parameters);

    /**
     * Get a single billing subscription by id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @param billingSubscriptionName Billing Subscription Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BillingSubscription> getByCustomerAsync(String billingAccountName, String customerName, String billingSubscriptionName);

    /**
     * Lists billing subscription by customer id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BillingSubscription> listByCustomerAsync(final String billingAccountName, final String customerName);

}
