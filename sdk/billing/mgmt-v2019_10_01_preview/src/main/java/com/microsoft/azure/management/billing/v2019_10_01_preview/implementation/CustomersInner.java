/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Customers.
 */
public class CustomersInner {
    /** The Retrofit service to perform REST calls. */
    private CustomersService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of CustomersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CustomersInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(CustomersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Customers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CustomersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Customers listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Customers listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Customers get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("customerName") String customerName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Customers listByBillingProfileNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingProfileNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Customers listByBillingAccountNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingAccountNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerInner&gt; object if successful.
     */
    public PagedList<CustomerInner> listByBillingProfile(final String billingAccountName, final String billingProfileName) {
        ServiceResponse<Page<CustomerInner>> response = listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName).toBlocking().single();
        return new PagedList<CustomerInner>(response.body()) {
            @Override
            public Page<CustomerInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final ListOperationCallback<CustomerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName),
            new Func1<String, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<Page<CustomerInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName)
            .map(new Func1<ServiceResponse<Page<CustomerInner>>, Page<CustomerInner>>() {
                @Override
                public Page<CustomerInner> call(ServiceResponse<Page<CustomerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingProfileWithServiceResponseAsync(final String billingAccountName, final String billingProfileName) {
        return listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName)
            .concatMap(new Func1<ServiceResponse<Page<CustomerInner>>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(ServiceResponse<Page<CustomerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingProfileSinglePageAsync(final String billingAccountName, final String billingProfileName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final String skiptoken = null;
        return service.listByBillingProfile(billingAccountName, billingProfileName, this.client.apiVersion(), filter, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerInner>> result = listByBillingProfileDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerInner&gt; object if successful.
     */
    public PagedList<CustomerInner> listByBillingProfile(final String billingAccountName, final String billingProfileName, final String filter, final String skiptoken) {
        ServiceResponse<Page<CustomerInner>> response = listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, filter, skiptoken).toBlocking().single();
        return new PagedList<CustomerInner>(response.body()) {
            @Override
            public Page<CustomerInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final String filter, final String skiptoken, final ListOperationCallback<CustomerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, filter, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<Page<CustomerInner>> listByBillingProfileAsync(final String billingAccountName, final String billingProfileName, final String filter, final String skiptoken) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, filter, skiptoken)
            .map(new Func1<ServiceResponse<Page<CustomerInner>>, Page<CustomerInner>>() {
                @Override
                public Page<CustomerInner> call(ServiceResponse<Page<CustomerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingProfileWithServiceResponseAsync(final String billingAccountName, final String billingProfileName, final String filter, final String skiptoken) {
        return listByBillingProfileSinglePageAsync(billingAccountName, billingProfileName, filter, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<CustomerInner>>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(ServiceResponse<Page<CustomerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
    ServiceResponse<PageImpl<CustomerInner>> * @param billingAccountName billing Account Id.
    ServiceResponse<PageImpl<CustomerInner>> * @param billingProfileName Billing Profile Id.
    ServiceResponse<PageImpl<CustomerInner>> * @param filter May be used to filter the list of customers.
    ServiceResponse<PageImpl<CustomerInner>> * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingProfileSinglePageAsync(final String billingAccountName, final String billingProfileName, final String filter, final String skiptoken) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingProfile(billingAccountName, billingProfileName, this.client.apiVersion(), filter, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerInner>> result = listByBillingProfileDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomerInner>> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomerInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomerInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerInner&gt; object if successful.
     */
    public PagedList<CustomerInner> listByBillingAccount(final String billingAccountName) {
        ServiceResponse<Page<CustomerInner>> response = listByBillingAccountSinglePageAsync(billingAccountName).toBlocking().single();
        return new PagedList<CustomerInner>(response.body()) {
            @Override
            public Page<CustomerInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerInner>> listByBillingAccountAsync(final String billingAccountName, final ListOperationCallback<CustomerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName),
            new Func1<String, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<Page<CustomerInner>> listByBillingAccountAsync(final String billingAccountName) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName)
            .map(new Func1<ServiceResponse<Page<CustomerInner>>, Page<CustomerInner>>() {
                @Override
                public Page<CustomerInner> call(ServiceResponse<Page<CustomerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName) {
        return listByBillingAccountSinglePageAsync(billingAccountName)
            .concatMap(new Func1<ServiceResponse<Page<CustomerInner>>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(ServiceResponse<Page<CustomerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final String skiptoken = null;
        return service.listByBillingAccount(billingAccountName, this.client.apiVersion(), filter, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerInner&gt; object if successful.
     */
    public PagedList<CustomerInner> listByBillingAccount(final String billingAccountName, final String filter, final String skiptoken) {
        ServiceResponse<Page<CustomerInner>> response = listByBillingAccountSinglePageAsync(billingAccountName, filter, skiptoken).toBlocking().single();
        return new PagedList<CustomerInner>(response.body()) {
            @Override
            public Page<CustomerInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerInner>> listByBillingAccountAsync(final String billingAccountName, final String filter, final String skiptoken, final ListOperationCallback<CustomerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountSinglePageAsync(billingAccountName, filter, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<Page<CustomerInner>> listByBillingAccountAsync(final String billingAccountName, final String filter, final String skiptoken) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, filter, skiptoken)
            .map(new Func1<ServiceResponse<Page<CustomerInner>>, Page<CustomerInner>>() {
                @Override
                public Page<CustomerInner> call(ServiceResponse<Page<CustomerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param billingAccountName billing Account Id.
     * @param filter May be used to filter the list of customers.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingAccountWithServiceResponseAsync(final String billingAccountName, final String filter, final String skiptoken) {
        return listByBillingAccountSinglePageAsync(billingAccountName, filter, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<CustomerInner>>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(ServiceResponse<Page<CustomerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
    ServiceResponse<PageImpl<CustomerInner>> * @param billingAccountName billing Account Id.
    ServiceResponse<PageImpl<CustomerInner>> * @param filter May be used to filter the list of customers.
    ServiceResponse<PageImpl<CustomerInner>> * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingAccountSinglePageAsync(final String billingAccountName, final String filter, final String skiptoken) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingAccount(billingAccountName, this.client.apiVersion(), filter, skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerInner>> result = listByBillingAccountDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomerInner>> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomerInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomerInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerInner object if successful.
     */
    public CustomerInner get(String billingAccountName, String customerName) {
        return getWithServiceResponseAsync(billingAccountName, customerName).toBlocking().single().body();
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerInner> getAsync(String billingAccountName, String customerName, final ServiceCallback<CustomerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, customerName), serviceCallback);
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<CustomerInner> getAsync(String billingAccountName, String customerName) {
        return getWithServiceResponseAsync(billingAccountName, customerName).map(new Func1<ServiceResponse<CustomerInner>, CustomerInner>() {
            @Override
            public CustomerInner call(ServiceResponse<CustomerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<ServiceResponse<CustomerInner>> getWithServiceResponseAsync(String billingAccountName, String customerName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.get(billingAccountName, customerName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @param expand May be used to expand enabledAzurePlans, resellers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CustomerInner object if successful.
     */
    public CustomerInner get(String billingAccountName, String customerName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, customerName, expand).toBlocking().single().body();
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @param expand May be used to expand enabledAzurePlans, resellers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CustomerInner> getAsync(String billingAccountName, String customerName, String expand, final ServiceCallback<CustomerInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, customerName, expand), serviceCallback);
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @param expand May be used to expand enabledAzurePlans, resellers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<CustomerInner> getAsync(String billingAccountName, String customerName, String expand) {
        return getWithServiceResponseAsync(billingAccountName, customerName, expand).map(new Func1<ServiceResponse<CustomerInner>, CustomerInner>() {
            @Override
            public CustomerInner call(ServiceResponse<CustomerInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a customer by its id.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @param expand May be used to expand enabledAzurePlans, resellers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CustomerInner object
     */
    public Observable<ServiceResponse<CustomerInner>> getWithServiceResponseAsync(String billingAccountName, String customerName, String expand) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, customerName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CustomerInner>>>() {
                @Override
                public Observable<ServiceResponse<CustomerInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CustomerInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CustomerInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CustomerInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CustomerInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerInner&gt; object if successful.
     */
    public PagedList<CustomerInner> listByBillingProfileNext(final String nextPageLink) {
        ServiceResponse<Page<CustomerInner>> response = listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CustomerInner>(response.body()) {
            @Override
            public Page<CustomerInner> nextPage(String nextPageLink) {
                return listByBillingProfileNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerInner>> listByBillingProfileNextAsync(final String nextPageLink, final ServiceFuture<List<CustomerInner>> serviceFuture, final ListOperationCallback<CustomerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingProfileNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(String nextPageLink) {
                    return listByBillingProfileNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<Page<CustomerInner>> listByBillingProfileNextAsync(final String nextPageLink) {
        return listByBillingProfileNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CustomerInner>>, Page<CustomerInner>>() {
                @Override
                public Page<CustomerInner> call(ServiceResponse<Page<CustomerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingProfileNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingProfileNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CustomerInner>>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(ServiceResponse<Page<CustomerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingProfileNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists customers by billing profile which the current user can work with on-behalf of a partner.
     *
    ServiceResponse<PageImpl<CustomerInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingProfileNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingProfileNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerInner>> result = listByBillingProfileNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomerInner>> listByBillingProfileNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomerInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomerInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CustomerInner&gt; object if successful.
     */
    public PagedList<CustomerInner> listByBillingAccountNext(final String nextPageLink) {
        ServiceResponse<Page<CustomerInner>> response = listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CustomerInner>(response.body()) {
            @Override
            public Page<CustomerInner> nextPage(String nextPageLink) {
                return listByBillingAccountNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CustomerInner>> listByBillingAccountNextAsync(final String nextPageLink, final ServiceFuture<List<CustomerInner>> serviceFuture, final ListOperationCallback<CustomerInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingAccountNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(String nextPageLink) {
                    return listByBillingAccountNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<Page<CustomerInner>> listByBillingAccountNextAsync(final String nextPageLink) {
        return listByBillingAccountNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CustomerInner>>, Page<CustomerInner>>() {
                @Override
                public Page<CustomerInner> call(ServiceResponse<Page<CustomerInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CustomerInner&gt; object
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingAccountNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingAccountNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CustomerInner>>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(ServiceResponse<Page<CustomerInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingAccountNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists customers which the current user can work with on-behalf of a partner.
     *
    ServiceResponse<PageImpl<CustomerInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CustomerInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CustomerInner>>> listByBillingAccountNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingAccountNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CustomerInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CustomerInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CustomerInner>> result = listByBillingAccountNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CustomerInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CustomerInner>> listByBillingAccountNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CustomerInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CustomerInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
