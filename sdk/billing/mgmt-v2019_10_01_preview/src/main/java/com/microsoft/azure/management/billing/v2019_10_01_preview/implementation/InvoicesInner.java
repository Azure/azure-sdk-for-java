/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.azure.management.billing.v2019_10_01_preview.InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders;
import com.microsoft.azure.management.billing.v2019_10_01_preview.InvoicesDownloadMultipleEAInvoiceHeaders;
import com.microsoft.azure.management.billing.v2019_10_01_preview.InvoicesDownloadMultipleModernInvoiceHeaders;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in Invoices.
 */
public class InvoicesInner {
    /** The Retrofit service to perform REST calls. */
    private InvoicesService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of InvoicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public InvoicesInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(InvoicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Invoices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface InvoicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices listByBillingAccount" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices")
        Observable<Response<ResponseBody>> listByBillingAccount(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices downloadMultipleEAInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/downloadDocuments")
        Observable<Response<ResponseBody>> downloadMultipleEAInvoice(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Body List<String> downloadUrls, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices beginDownloadMultipleEAInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/downloadDocuments")
        Observable<Response<ResponseBody>> beginDownloadMultipleEAInvoice(@Path("billingAccountName") String billingAccountName, @Query("api-version") String apiVersion, @Body List<String> downloadUrls, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices getBillingAccountInvoice" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> getBillingAccountInvoice(@Path("billingAccountName") String billingAccountName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices downloadMultipleBillingSubscriptionInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/downloadDocuments")
        Observable<Response<ResponseBody>> downloadMultipleBillingSubscriptionInvoice(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body List<String> downloadUrls, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices beginDownloadMultipleBillingSubscriptionInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/downloadDocuments")
        Observable<Response<ResponseBody>> beginDownloadMultipleBillingSubscriptionInvoice(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body List<String> downloadUrls, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices listByBillingProfile" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices")
        Observable<Response<ResponseBody>> listByBillingProfile(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices downloadMultipleModernInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/downloadDocuments")
        Observable<Response<ResponseBody>> downloadMultipleModernInvoice(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Body List<String> downloadUrls, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices beginDownloadMultipleModernInvoice" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/downloadDocuments")
        Observable<Response<ResponseBody>> beginDownloadMultipleModernInvoice(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Query("api-version") String apiVersion, @Body List<String> downloadUrls, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices listByBillingSubscription" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/invoices")
        Observable<Response<ResponseBody>> listByBillingSubscription(@Path("billingAccountName") String billingAccountName, @Path("billingSubscriptionName") String billingSubscriptionName, @Query("periodStartDate") String periodStartDate, @Query("periodEndDate") String periodEndDate, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices getById" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/invoices/{invoiceName}")
        Observable<Response<ResponseBody>> getById(@Path("billingAccountName") String billingAccountName, @Path("billingSubscriptionName") String billingSubscriptionName, @Path("invoiceName") String invoiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.Invoices listByBillingSubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listByBillingSubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceListResultInner object if successful.
     */
    public InvoiceListResultInner listByBillingAccount(String billingAccountName, String periodStartDate, String periodEndDate) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, periodStartDate, periodEndDate).toBlocking().single().body();
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceListResultInner> listByBillingAccountAsync(String billingAccountName, String periodStartDate, String periodEndDate, final ServiceCallback<InvoiceListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingAccountWithServiceResponseAsync(billingAccountName, periodStartDate, periodEndDate), serviceCallback);
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceListResultInner object
     */
    public Observable<InvoiceListResultInner> listByBillingAccountAsync(String billingAccountName, String periodStartDate, String periodEndDate) {
        return listByBillingAccountWithServiceResponseAsync(billingAccountName, periodStartDate, periodEndDate).map(new Func1<ServiceResponse<InvoiceListResultInner>, InvoiceListResultInner>() {
            @Override
            public InvoiceListResultInner call(ServiceResponse<InvoiceListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceListResultInner object
     */
    public Observable<ServiceResponse<InvoiceListResultInner>> listByBillingAccountWithServiceResponseAsync(String billingAccountName, String periodStartDate, String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByBillingAccount(billingAccountName, this.client.apiVersion(), periodStartDate, periodEndDate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceListResultInner> clientResponse = listByBillingAccountDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceListResultInner> listByBillingAccountDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner downloadMultipleEAInvoice(String billingAccountName, List<String> downloadUrls) {
        return downloadMultipleEAInvoiceWithServiceResponseAsync(billingAccountName, downloadUrls).toBlocking().last().body();
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> downloadMultipleEAInvoiceAsync(String billingAccountName, List<String> downloadUrls, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(downloadMultipleEAInvoiceWithServiceResponseAsync(billingAccountName, downloadUrls), serviceCallback);
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DownloadUrlInner> downloadMultipleEAInvoiceAsync(String billingAccountName, List<String> downloadUrls) {
        return downloadMultipleEAInvoiceWithServiceResponseAsync(billingAccountName, downloadUrls).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders>> downloadMultipleEAInvoiceWithServiceResponseAsync(String billingAccountName, List<String> downloadUrls) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (downloadUrls == null) {
            throw new IllegalArgumentException("Parameter downloadUrls is required and cannot be null.");
        }
        Validator.validate(downloadUrls);
        Observable<Response<ResponseBody>> observable = service.downloadMultipleEAInvoice(billingAccountName, this.client.apiVersion(), downloadUrls, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<DownloadUrlInner>() { }.getType(), InvoicesDownloadMultipleEAInvoiceHeaders.class);
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner beginDownloadMultipleEAInvoice(String billingAccountName, List<String> downloadUrls) {
        return beginDownloadMultipleEAInvoiceWithServiceResponseAsync(billingAccountName, downloadUrls).toBlocking().single().body();
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> beginDownloadMultipleEAInvoiceAsync(String billingAccountName, List<String> downloadUrls, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDownloadMultipleEAInvoiceWithServiceResponseAsync(billingAccountName, downloadUrls), serviceCallback);
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<DownloadUrlInner> beginDownloadMultipleEAInvoiceAsync(String billingAccountName, List<String> downloadUrls) {
        return beginDownloadMultipleEAInvoiceWithServiceResponseAsync(billingAccountName, downloadUrls).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download an multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders>> beginDownloadMultipleEAInvoiceWithServiceResponseAsync(String billingAccountName, List<String> downloadUrls) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (downloadUrls == null) {
            throw new IllegalArgumentException("Parameter downloadUrls is required and cannot be null.");
        }
        Validator.validate(downloadUrls);
        return service.beginDownloadMultipleEAInvoice(billingAccountName, this.client.apiVersion(), downloadUrls, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders> clientResponse = beginDownloadMultipleEAInvoiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleEAInvoiceHeaders> beginDownloadMultipleEAInvoiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadUrlInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadUrlInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, InvoicesDownloadMultipleEAInvoiceHeaders.class);
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceInner object if successful.
     */
    public InvoiceInner getBillingAccountInvoice(String billingAccountName, String invoiceName) {
        return getBillingAccountInvoiceWithServiceResponseAsync(billingAccountName, invoiceName).toBlocking().single().body();
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceInner> getBillingAccountInvoiceAsync(String billingAccountName, String invoiceName, final ServiceCallback<InvoiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getBillingAccountInvoiceWithServiceResponseAsync(billingAccountName, invoiceName), serviceCallback);
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<InvoiceInner> getBillingAccountInvoiceAsync(String billingAccountName, String invoiceName) {
        return getBillingAccountInvoiceWithServiceResponseAsync(billingAccountName, invoiceName).map(new Func1<ServiceResponse<InvoiceInner>, InvoiceInner>() {
            @Override
            public InvoiceInner call(ServiceResponse<InvoiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<ServiceResponse<InvoiceInner>> getBillingAccountInvoiceWithServiceResponseAsync(String billingAccountName, String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getBillingAccountInvoice(billingAccountName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceInner> clientResponse = getBillingAccountInvoiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceInner> getBillingAccountInvoiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner downloadMultipleBillingSubscriptionInvoice(List<String> downloadUrls) {
        return downloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(downloadUrls).toBlocking().last().body();
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> downloadMultipleBillingSubscriptionInvoiceAsync(List<String> downloadUrls, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(downloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(downloadUrls), serviceCallback);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DownloadUrlInner> downloadMultipleBillingSubscriptionInvoiceAsync(List<String> downloadUrls) {
        return downloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(downloadUrls).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders>> downloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(List<String> downloadUrls) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (downloadUrls == null) {
            throw new IllegalArgumentException("Parameter downloadUrls is required and cannot be null.");
        }
        Validator.validate(downloadUrls);
        Observable<Response<ResponseBody>> observable = service.downloadMultipleBillingSubscriptionInvoice(this.client.subscriptionId(), this.client.apiVersion(), downloadUrls, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<DownloadUrlInner>() { }.getType(), InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders.class);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner beginDownloadMultipleBillingSubscriptionInvoice(List<String> downloadUrls) {
        return beginDownloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(downloadUrls).toBlocking().single().body();
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> beginDownloadMultipleBillingSubscriptionInvoiceAsync(List<String> downloadUrls, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDownloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(downloadUrls), serviceCallback);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<DownloadUrlInner> beginDownloadMultipleBillingSubscriptionInvoiceAsync(List<String> downloadUrls) {
        return beginDownloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(downloadUrls).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders>> beginDownloadMultipleBillingSubscriptionInvoiceWithServiceResponseAsync(List<String> downloadUrls) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (downloadUrls == null) {
            throw new IllegalArgumentException("Parameter downloadUrls is required and cannot be null.");
        }
        Validator.validate(downloadUrls);
        return service.beginDownloadMultipleBillingSubscriptionInvoice(this.client.subscriptionId(), this.client.apiVersion(), downloadUrls, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders> clientResponse = beginDownloadMultipleBillingSubscriptionInvoiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders> beginDownloadMultipleBillingSubscriptionInvoiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadUrlInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadUrlInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, InvoicesDownloadMultipleBillingSubscriptionInvoiceHeaders.class);
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceListResultInner object if successful.
     */
    public InvoiceListResultInner listByBillingProfile(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate).toBlocking().single().body();
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceListResultInner> listByBillingProfileAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate, final ServiceCallback<InvoiceListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate), serviceCallback);
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceListResultInner object
     */
    public Observable<InvoiceListResultInner> listByBillingProfileAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate) {
        return listByBillingProfileWithServiceResponseAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate).map(new Func1<ServiceResponse<InvoiceListResultInner>, InvoiceListResultInner>() {
            @Override
            public InvoiceListResultInner call(ServiceResponse<InvoiceListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceListResultInner object
     */
    public Observable<ServiceResponse<InvoiceListResultInner>> listByBillingProfileWithServiceResponseAsync(String billingAccountName, String billingProfileName, String periodStartDate, String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        return service.listByBillingProfile(billingAccountName, billingProfileName, this.client.apiVersion(), periodStartDate, periodEndDate, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceListResultInner> clientResponse = listByBillingProfileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceListResultInner> listByBillingProfileDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceListResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceListResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner downloadMultipleModernInvoice(String billingAccountName, String billingProfileName, List<String> downloadUrls) {
        return downloadMultipleModernInvoiceWithServiceResponseAsync(billingAccountName, billingProfileName, downloadUrls).toBlocking().last().body();
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> downloadMultipleModernInvoiceAsync(String billingAccountName, String billingProfileName, List<String> downloadUrls, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(downloadMultipleModernInvoiceWithServiceResponseAsync(billingAccountName, billingProfileName, downloadUrls), serviceCallback);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DownloadUrlInner> downloadMultipleModernInvoiceAsync(String billingAccountName, String billingProfileName, List<String> downloadUrls) {
        return downloadMultipleModernInvoiceWithServiceResponseAsync(billingAccountName, billingProfileName, downloadUrls).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders>> downloadMultipleModernInvoiceWithServiceResponseAsync(String billingAccountName, String billingProfileName, List<String> downloadUrls) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (downloadUrls == null) {
            throw new IllegalArgumentException("Parameter downloadUrls is required and cannot be null.");
        }
        Validator.validate(downloadUrls);
        Observable<Response<ResponseBody>> observable = service.downloadMultipleModernInvoice(billingAccountName, billingProfileName, this.client.apiVersion(), downloadUrls, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<DownloadUrlInner>() { }.getType(), InvoicesDownloadMultipleModernInvoiceHeaders.class);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DownloadUrlInner object if successful.
     */
    public DownloadUrlInner beginDownloadMultipleModernInvoice(String billingAccountName, String billingProfileName, List<String> downloadUrls) {
        return beginDownloadMultipleModernInvoiceWithServiceResponseAsync(billingAccountName, billingProfileName, downloadUrls).toBlocking().single().body();
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DownloadUrlInner> beginDownloadMultipleModernInvoiceAsync(String billingAccountName, String billingProfileName, List<String> downloadUrls, final ServiceCallback<DownloadUrlInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDownloadMultipleModernInvoiceWithServiceResponseAsync(billingAccountName, billingProfileName, downloadUrls), serviceCallback);
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<DownloadUrlInner> beginDownloadMultipleModernInvoiceAsync(String billingAccountName, String billingProfileName, List<String> downloadUrls) {
        return beginDownloadMultipleModernInvoiceWithServiceResponseAsync(billingAccountName, billingProfileName, downloadUrls).map(new Func1<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders>, DownloadUrlInner>() {
            @Override
            public DownloadUrlInner call(ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a URL to download multiple invoices documents (invoice pdf, tax receipts, credit notes) as a zip file.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param downloadUrls An array of download urls for individual documents. The download url paths in the request body should match the path of the original request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DownloadUrlInner object
     */
    public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders>> beginDownloadMultipleModernInvoiceWithServiceResponseAsync(String billingAccountName, String billingProfileName, List<String> downloadUrls) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (downloadUrls == null) {
            throw new IllegalArgumentException("Parameter downloadUrls is required and cannot be null.");
        }
        Validator.validate(downloadUrls);
        return service.beginDownloadMultipleModernInvoice(billingAccountName, billingProfileName, this.client.apiVersion(), downloadUrls, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders> clientResponse = beginDownloadMultipleModernInvoiceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DownloadUrlInner, InvoicesDownloadMultipleModernInvoiceHeaders> beginDownloadMultipleModernInvoiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DownloadUrlInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DownloadUrlInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, InvoicesDownloadMultipleModernInvoiceHeaders.class);
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceInner object if successful.
     */
    public InvoiceInner get(String billingAccountName, String billingProfileName, String invoiceName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceName).toBlocking().single().body();
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceInner> getAsync(String billingAccountName, String billingProfileName, String invoiceName, final ServiceCallback<InvoiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceName), serviceCallback);
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<InvoiceInner> getAsync(String billingAccountName, String billingProfileName, String invoiceName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, invoiceName).map(new Func1<ServiceResponse<InvoiceInner>, InvoiceInner>() {
            @Override
            public InvoiceInner call(ServiceResponse<InvoiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<ServiceResponse<InvoiceInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(billingAccountName, billingProfileName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingSubscription(final String billingAccountName, final String billingSubscriptionName, final String periodStartDate, final String periodEndDate) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingSubscriptionSinglePageAsync(billingAccountName, billingSubscriptionName, periodStartDate, periodEndDate).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingSubscriptionAsync(final String billingAccountName, final String billingSubscriptionName, final String periodStartDate, final String periodEndDate, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingSubscriptionSinglePageAsync(billingAccountName, billingSubscriptionName, periodStartDate, periodEndDate),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingSubscriptionAsync(final String billingAccountName, final String billingSubscriptionName, final String periodStartDate, final String periodEndDate) {
        return listByBillingSubscriptionWithServiceResponseAsync(billingAccountName, billingSubscriptionName, periodStartDate, periodEndDate)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionWithServiceResponseAsync(final String billingAccountName, final String billingSubscriptionName, final String periodStartDate, final String periodEndDate) {
        return listByBillingSubscriptionSinglePageAsync(billingAccountName, billingSubscriptionName, periodStartDate, periodEndDate)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param billingAccountName The ID that uniquely identifies a billing account.
    ServiceResponse<PageImpl<InvoiceInner>> * @param billingSubscriptionName The ID that uniquely identifies a subscription.
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodStartDate Invoice period start date.
    ServiceResponse<PageImpl<InvoiceInner>> * @param periodEndDate Invoice period end date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionSinglePageAsync(final String billingAccountName, final String billingSubscriptionName, final String periodStartDate, final String periodEndDate) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (periodStartDate == null) {
            throw new IllegalArgumentException("Parameter periodStartDate is required and cannot be null.");
        }
        if (periodEndDate == null) {
            throw new IllegalArgumentException("Parameter periodEndDate is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByBillingSubscription(billingAccountName, billingSubscriptionName, periodStartDate, periodEndDate, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoiceInner object if successful.
     */
    public InvoiceInner getById(String billingAccountName, String billingSubscriptionName, String invoiceName) {
        return getByIdWithServiceResponseAsync(billingAccountName, billingSubscriptionName, invoiceName).toBlocking().single().body();
    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InvoiceInner> getByIdAsync(String billingAccountName, String billingSubscriptionName, String invoiceName, final ServiceCallback<InvoiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(billingAccountName, billingSubscriptionName, invoiceName), serviceCallback);
    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<InvoiceInner> getByIdAsync(String billingAccountName, String billingSubscriptionName, String invoiceName) {
        return getByIdWithServiceResponseAsync(billingAccountName, billingSubscriptionName, invoiceName).map(new Func1<ServiceResponse<InvoiceInner>, InvoiceInner>() {
            @Override
            public InvoiceInner call(ServiceResponse<InvoiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an invoice by ID.
     *
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingSubscriptionName The ID that uniquely identifies a subscription.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoiceInner object
     */
    public Observable<ServiceResponse<InvoiceInner>> getByIdWithServiceResponseAsync(String billingAccountName, String billingSubscriptionName, String invoiceName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingSubscriptionName == null) {
            throw new IllegalArgumentException("Parameter billingSubscriptionName is required and cannot be null.");
        }
        if (invoiceName == null) {
            throw new IllegalArgumentException("Parameter invoiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getById(billingAccountName, billingSubscriptionName, invoiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InvoiceInner>>>() {
                @Override
                public Observable<ServiceResponse<InvoiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InvoiceInner> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InvoiceInner> getByIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InvoiceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InvoiceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;InvoiceInner&gt; object if successful.
     */
    public PagedList<InvoiceInner> listByBillingSubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<InvoiceInner>> response = listByBillingSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<InvoiceInner>(response.body()) {
            @Override
            public Page<InvoiceInner> nextPage(String nextPageLink) {
                return listByBillingSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<InvoiceInner>> listByBillingSubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<InvoiceInner>> serviceFuture, final ListOperationCallback<InvoiceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByBillingSubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(String nextPageLink) {
                    return listByBillingSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<Page<InvoiceInner>> listByBillingSubscriptionNextAsync(final String nextPageLink) {
        return listByBillingSubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<InvoiceInner>>, Page<InvoiceInner>>() {
                @Override
                public Page<InvoiceInner> call(ServiceResponse<Page<InvoiceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;InvoiceInner&gt; object
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listByBillingSubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<InvoiceInner>>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(ServiceResponse<Page<InvoiceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByBillingSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the invoices for a subscription.
     *
    ServiceResponse<PageImpl<InvoiceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;InvoiceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<InvoiceInner>>> listByBillingSubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByBillingSubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<InvoiceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<InvoiceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<InvoiceInner>> result = listByBillingSubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<InvoiceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<InvoiceInner>> listByBillingSubscriptionNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<InvoiceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<InvoiceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
