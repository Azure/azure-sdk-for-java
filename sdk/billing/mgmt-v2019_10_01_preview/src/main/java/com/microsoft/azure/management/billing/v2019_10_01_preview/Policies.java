/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview;

import rx.Observable;
import com.microsoft.azure.management.billing.v2019_10_01_preview.implementation.PolicyInner;
import com.microsoft.azure.management.billing.v2019_10_01_preview.implementation.PoliciesInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Policies.
 */
public interface Policies extends HasInner<PoliciesInner> {
    /**
     * The policy for a given billing account name and billing profile name.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Policy> getByBillingProfileAsync(String billingAccountName, String billingProfileName);

    /**
     * The operation to update a policy.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param parameters Parameters supplied to the update policy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Policy> updateAsync(String billingAccountName, String billingProfileName, PolicyInner parameters);

    /**
     * The policy for a given billing account name and customer name.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CustomerPolicy> getByCustomerAsync(String billingAccountName, String customerName);

    /**
     * The operation to update a Customer policy.
     *
     * @param billingAccountName billing Account Id.
     * @param customerName Customer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CustomerPolicy> updateCustomerAsync(String billingAccountName, String customerName);

}
