/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.billing.v2019_10_01_preview.InvoiceSections;
import rx.Observable;
import rx.functions.Func1;
import rx.Completable;
import com.microsoft.azure.management.billing.v2019_10_01_preview.InvoiceSectionListResult;
import com.microsoft.azure.management.billing.v2019_10_01_preview.InvoiceSection;

class InvoiceSectionsImpl extends WrapperImpl<InvoiceSectionsInner> implements InvoiceSections {
    private final BillingManager manager;

    InvoiceSectionsImpl(BillingManager manager) {
        super(manager.inner().invoiceSections());
        this.manager = manager;
    }

    public BillingManager manager() {
        return this.manager;
    }

    @Override
    public InvoiceSectionImpl define(String name) {
        return wrapModel(name);
    }

    private InvoiceSectionImpl wrapModel(InvoiceSectionInner inner) {
        return  new InvoiceSectionImpl(inner, manager());
    }

    private InvoiceSectionImpl wrapModel(String name) {
        return new InvoiceSectionImpl(name, this.manager());
    }

    @Override
    public Observable<InvoiceSectionListResult> listByBillingProfileAsync(String billingAccountName, String billingProfileName) {
        InvoiceSectionsInner client = this.inner();
        return client.listByBillingProfileAsync(billingAccountName, billingProfileName)
        .map(new Func1<InvoiceSectionListResultInner, InvoiceSectionListResult>() {
            @Override
            public InvoiceSectionListResult call(InvoiceSectionListResultInner inner) {
                return new InvoiceSectionListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable elevateToBillingProfileAsync(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        InvoiceSectionsInner client = this.inner();
        return client.elevateToBillingProfileAsync(billingAccountName, billingProfileName, invoiceSectionName).toCompletable();
    }

    @Override
    public Observable<InvoiceSection> getAsync(String billingAccountName, String billingProfileName, String invoiceSectionName) {
        InvoiceSectionsInner client = this.inner();
        return client.getAsync(billingAccountName, billingProfileName, invoiceSectionName)
        .flatMap(new Func1<InvoiceSectionInner, Observable<InvoiceSection>>() {
            @Override
            public Observable<InvoiceSection> call(InvoiceSectionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((InvoiceSection)wrapModel(inner));
                }
            }
       });
    }

}
