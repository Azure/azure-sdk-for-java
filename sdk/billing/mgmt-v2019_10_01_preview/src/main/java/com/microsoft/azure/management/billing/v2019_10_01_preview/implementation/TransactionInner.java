/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import com.microsoft.azure.management.billing.v2019_10_01_preview.TransactionTypeKind;
import org.joda.time.DateTime;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ReservationType;
import com.microsoft.azure.management.billing.v2019_10_01_preview.Amount;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * A reservation transaction resource.
 */
@JsonFlatten
public class TransactionInner extends ProxyResource {
    /**
     * The kind of transaction. Choices are all and reservation. Possible
     * values include: 'all', 'reservation'.
     */
    @JsonProperty(value = "properties.kind")
    private TransactionTypeKind kind;

    /**
     * The date of reservation transaction.
     */
    @JsonProperty(value = "properties.date", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime dateProperty;

    /**
     * Invoice number or 'pending' if not invoiced.
     */
    @JsonProperty(value = "properties.invoice", access = JsonProperty.Access.WRITE_ONLY)
    private String invoice;

    /**
     * The reservation order id.
     */
    @JsonProperty(value = "properties.orderId", access = JsonProperty.Access.WRITE_ONLY)
    private String orderId;

    /**
     * The reservation order name.
     */
    @JsonProperty(value = "properties.orderName", access = JsonProperty.Access.WRITE_ONLY)
    private String orderName;

    /**
     * The product family.
     */
    @JsonProperty(value = "properties.productFamily", access = JsonProperty.Access.WRITE_ONLY)
    private String productFamily;

    /**
     * The product type id.
     */
    @JsonProperty(value = "properties.productTypeId", access = JsonProperty.Access.WRITE_ONLY)
    private String productTypeId;

    /**
     * The type of product.
     */
    @JsonProperty(value = "properties.productType", access = JsonProperty.Access.WRITE_ONLY)
    private String productType;

    /**
     * Product description.
     */
    @JsonProperty(value = "properties.productDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String productDescription;

    /**
     * Transaction types. Possible values include: 'Purchase', 'Usage Charge'.
     */
    @JsonProperty(value = "properties.transactionType")
    private ReservationType transactionType;

    /**
     * Last charge associated with the purchase.
     */
    @JsonProperty(value = "properties.transactionAmount", access = JsonProperty.Access.WRITE_ONLY)
    private Amount transactionAmount;

    /**
     * Purchase quantity.
     */
    @JsonProperty(value = "properties.quantity", access = JsonProperty.Access.WRITE_ONLY)
    private Integer quantity;

    /**
     * Invoice section id to which this product belongs.
     */
    @JsonProperty(value = "properties.invoiceSectionId", access = JsonProperty.Access.WRITE_ONLY)
    private String invoiceSectionId;

    /**
     * Invoice section display name to which this product belongs.
     */
    @JsonProperty(value = "properties.invoiceSectionDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String invoiceSectionDisplayName;

    /**
     * Billing Profile id to which this product belongs.
     */
    @JsonProperty(value = "properties.billingProfileId", access = JsonProperty.Access.WRITE_ONLY)
    private String billingProfileId;

    /**
     * Billing Profile display name to which this product belongs.
     */
    @JsonProperty(value = "properties.billingProfileDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String billingProfileDisplayName;

    /**
     * Customer id to which this product belongs.
     */
    @JsonProperty(value = "properties.customerId", access = JsonProperty.Access.WRITE_ONLY)
    private String customerId;

    /**
     * Display name of customer to which this product belongs.
     */
    @JsonProperty(value = "properties.customerDisplayName", access = JsonProperty.Access.WRITE_ONLY)
    private String customerDisplayName;

    /**
     * The subscription id.
     */
    @JsonProperty(value = "properties.subscriptionId", access = JsonProperty.Access.WRITE_ONLY)
    private String subscriptionId;

    /**
     * The subscription name.
     */
    @JsonProperty(value = "properties.subscriptionName", access = JsonProperty.Access.WRITE_ONLY)
    private String subscriptionName;

    /**
     * The amount of any Azure credits automatically applied to this
     * transaction.
     */
    @JsonProperty(value = "properties.azureCreditApplied", access = JsonProperty.Access.WRITE_ONLY)
    private Amount azureCreditApplied;

    /**
     * The ISO 4217 code for the currency in which this transaction is billed.
     */
    @JsonProperty(value = "properties.billingCurrency", access = JsonProperty.Access.WRITE_ONLY)
    private String billingCurrency;

    /**
     * The percentage discount, if any, applied to this transaction.
     */
    @JsonProperty(value = "properties.discount", access = JsonProperty.Access.WRITE_ONLY)
    private Double discount;

    /**
     * The price of the product after applying any discounts.
     */
    @JsonProperty(value = "properties.effectivePrice", access = JsonProperty.Access.WRITE_ONLY)
    private Amount effectivePrice;

    /**
     * The exchange rate used to convert charged amount to billing currency, if
     * applicable.
     */
    @JsonProperty(value = "properties.exchangeRate", access = JsonProperty.Access.WRITE_ONLY)
    private Double exchangeRate;

    /**
     * The retail price of the product.
     */
    @JsonProperty(value = "properties.marketPrice", access = JsonProperty.Access.WRITE_ONLY)
    private Amount marketPrice;

    /**
     * The ISO 4217 code for the currency in which the product is priced.
     */
    @JsonProperty(value = "properties.pricingCurrency", access = JsonProperty.Access.WRITE_ONLY)
    private String pricingCurrency;

    /**
     * The date of the purchase of the product, or the start date of the month
     * in which usage started.
     */
    @JsonProperty(value = "properties.servicePeriodStartDate", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime servicePeriodStartDate;

    /**
     * The end date of the product term, or the end date of the month in which
     * usage ended.
     */
    @JsonProperty(value = "properties.servicePeriodEndDate", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime servicePeriodEndDate;

    /**
     * The pre-tax charged amount for the transaction.
     */
    @JsonProperty(value = "properties.subTotal", access = JsonProperty.Access.WRITE_ONLY)
    private Amount subTotal;

    /**
     * The tax amount applied to the transaction.
     */
    @JsonProperty(value = "properties.tax", access = JsonProperty.Access.WRITE_ONLY)
    private Amount tax;

    /**
     * The unit of measure used to bill for the product. For example, compute
     * services are billed per hour.
     */
    @JsonProperty(value = "properties.unitOfMeasure", access = JsonProperty.Access.WRITE_ONLY)
    private String unitOfMeasure;

    /**
     * The number of units used for a given product.
     */
    @JsonProperty(value = "properties.units", access = JsonProperty.Access.WRITE_ONLY)
    private Double units;

    /**
     * The description for the unit of measure for a given product.
     */
    @JsonProperty(value = "properties.unitType", access = JsonProperty.Access.WRITE_ONLY)
    private String unitType;

    /**
     * Get the kind of transaction. Choices are all and reservation. Possible values include: 'all', 'reservation'.
     *
     * @return the kind value
     */
    public TransactionTypeKind kind() {
        return this.kind;
    }

    /**
     * Set the kind of transaction. Choices are all and reservation. Possible values include: 'all', 'reservation'.
     *
     * @param kind the kind value to set
     * @return the TransactionInner object itself.
     */
    public TransactionInner withKind(TransactionTypeKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the date of reservation transaction.
     *
     * @return the dateProperty value
     */
    public DateTime dateProperty() {
        return this.dateProperty;
    }

    /**
     * Get invoice number or 'pending' if not invoiced.
     *
     * @return the invoice value
     */
    public String invoice() {
        return this.invoice;
    }

    /**
     * Get the reservation order id.
     *
     * @return the orderId value
     */
    public String orderId() {
        return this.orderId;
    }

    /**
     * Get the reservation order name.
     *
     * @return the orderName value
     */
    public String orderName() {
        return this.orderName;
    }

    /**
     * Get the product family.
     *
     * @return the productFamily value
     */
    public String productFamily() {
        return this.productFamily;
    }

    /**
     * Get the product type id.
     *
     * @return the productTypeId value
     */
    public String productTypeId() {
        return this.productTypeId;
    }

    /**
     * Get the type of product.
     *
     * @return the productType value
     */
    public String productType() {
        return this.productType;
    }

    /**
     * Get product description.
     *
     * @return the productDescription value
     */
    public String productDescription() {
        return this.productDescription;
    }

    /**
     * Get transaction types. Possible values include: 'Purchase', 'Usage Charge'.
     *
     * @return the transactionType value
     */
    public ReservationType transactionType() {
        return this.transactionType;
    }

    /**
     * Set transaction types. Possible values include: 'Purchase', 'Usage Charge'.
     *
     * @param transactionType the transactionType value to set
     * @return the TransactionInner object itself.
     */
    public TransactionInner withTransactionType(ReservationType transactionType) {
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Get last charge associated with the purchase.
     *
     * @return the transactionAmount value
     */
    public Amount transactionAmount() {
        return this.transactionAmount;
    }

    /**
     * Get purchase quantity.
     *
     * @return the quantity value
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Get invoice section id to which this product belongs.
     *
     * @return the invoiceSectionId value
     */
    public String invoiceSectionId() {
        return this.invoiceSectionId;
    }

    /**
     * Get invoice section display name to which this product belongs.
     *
     * @return the invoiceSectionDisplayName value
     */
    public String invoiceSectionDisplayName() {
        return this.invoiceSectionDisplayName;
    }

    /**
     * Get billing Profile id to which this product belongs.
     *
     * @return the billingProfileId value
     */
    public String billingProfileId() {
        return this.billingProfileId;
    }

    /**
     * Get billing Profile display name to which this product belongs.
     *
     * @return the billingProfileDisplayName value
     */
    public String billingProfileDisplayName() {
        return this.billingProfileDisplayName;
    }

    /**
     * Get customer id to which this product belongs.
     *
     * @return the customerId value
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get display name of customer to which this product belongs.
     *
     * @return the customerDisplayName value
     */
    public String customerDisplayName() {
        return this.customerDisplayName;
    }

    /**
     * Get the subscription id.
     *
     * @return the subscriptionId value
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the subscription name.
     *
     * @return the subscriptionName value
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * Get the amount of any Azure credits automatically applied to this transaction.
     *
     * @return the azureCreditApplied value
     */
    public Amount azureCreditApplied() {
        return this.azureCreditApplied;
    }

    /**
     * Get the ISO 4217 code for the currency in which this transaction is billed.
     *
     * @return the billingCurrency value
     */
    public String billingCurrency() {
        return this.billingCurrency;
    }

    /**
     * Get the percentage discount, if any, applied to this transaction.
     *
     * @return the discount value
     */
    public Double discount() {
        return this.discount;
    }

    /**
     * Get the price of the product after applying any discounts.
     *
     * @return the effectivePrice value
     */
    public Amount effectivePrice() {
        return this.effectivePrice;
    }

    /**
     * Get the exchange rate used to convert charged amount to billing currency, if applicable.
     *
     * @return the exchangeRate value
     */
    public Double exchangeRate() {
        return this.exchangeRate;
    }

    /**
     * Get the retail price of the product.
     *
     * @return the marketPrice value
     */
    public Amount marketPrice() {
        return this.marketPrice;
    }

    /**
     * Get the ISO 4217 code for the currency in which the product is priced.
     *
     * @return the pricingCurrency value
     */
    public String pricingCurrency() {
        return this.pricingCurrency;
    }

    /**
     * Get the date of the purchase of the product, or the start date of the month in which usage started.
     *
     * @return the servicePeriodStartDate value
     */
    public DateTime servicePeriodStartDate() {
        return this.servicePeriodStartDate;
    }

    /**
     * Get the end date of the product term, or the end date of the month in which usage ended.
     *
     * @return the servicePeriodEndDate value
     */
    public DateTime servicePeriodEndDate() {
        return this.servicePeriodEndDate;
    }

    /**
     * Get the pre-tax charged amount for the transaction.
     *
     * @return the subTotal value
     */
    public Amount subTotal() {
        return this.subTotal;
    }

    /**
     * Get the tax amount applied to the transaction.
     *
     * @return the tax value
     */
    public Amount tax() {
        return this.tax;
    }

    /**
     * Get the unit of measure used to bill for the product. For example, compute services are billed per hour.
     *
     * @return the unitOfMeasure value
     */
    public String unitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Get the number of units used for a given product.
     *
     * @return the units value
     */
    public Double units() {
        return this.units;
    }

    /**
     * Get the description for the unit of measure for a given product.
     *
     * @return the unitType value
     */
    public String unitType() {
        return this.unitType;
    }

}
