/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurgeBody;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurgePurgeHeaders;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in WorkspacePurges.
 */
public class WorkspacePurgesInner {
    /** The Retrofit service to perform REST calls. */
    private WorkspacePurgesService service;
    /** The service client containing this operation class. */
    private OperationalInsightsManagementClientImpl client;

    /**
     * Initializes an instance of WorkspacePurgesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WorkspacePurgesInner(Retrofit retrofit, OperationalInsightsManagementClientImpl client) {
        this.service = retrofit.create(WorkspacePurgesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkspacePurges to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WorkspacePurgesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurges purge" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge")
        Observable<Response<ResponseBody>> purge(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("workspaceName") String workspaceName, @Query("api-version") String apiVersion, @Body WorkspacePurgeBody body, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurges getPurgeStatus" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}")
        Observable<Response<ResponseBody>> getPurgeStatus(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("workspaceName") String workspaceName, @Path("purgeId") String purgeId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkspacePurgeResponseInner object if successful.
     */
    public WorkspacePurgeResponseInner purge(String resourceGroupName, String workspaceName, WorkspacePurgeBody body) {
        return purgeWithServiceResponseAsync(resourceGroupName, workspaceName, body).toBlocking().single().body();
    }

    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkspacePurgeResponseInner> purgeAsync(String resourceGroupName, String workspaceName, WorkspacePurgeBody body, final ServiceCallback<WorkspacePurgeResponseInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(purgeWithServiceResponseAsync(resourceGroupName, workspaceName, body), serviceCallback);
    }

    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkspacePurgeResponseInner object
     */
    public Observable<WorkspacePurgeResponseInner> purgeAsync(String resourceGroupName, String workspaceName, WorkspacePurgeBody body) {
        return purgeWithServiceResponseAsync(resourceGroupName, workspaceName, body).map(new Func1<ServiceResponseWithHeaders<WorkspacePurgeResponseInner, WorkspacePurgePurgeHeaders>, WorkspacePurgeResponseInner>() {
            @Override
            public WorkspacePurgeResponseInner call(ServiceResponseWithHeaders<WorkspacePurgeResponseInner, WorkspacePurgePurgeHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkspacePurgeResponseInner object
     */
    public Observable<ServiceResponseWithHeaders<WorkspacePurgeResponseInner, WorkspacePurgePurgeHeaders>> purgeWithServiceResponseAsync(String resourceGroupName, String workspaceName, WorkspacePurgeBody body) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.purge(resourceGroupName, this.client.subscriptionId(), workspaceName, this.client.apiVersion(), body, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<WorkspacePurgeResponseInner, WorkspacePurgePurgeHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<WorkspacePurgeResponseInner, WorkspacePurgePurgeHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<WorkspacePurgeResponseInner, WorkspacePurgePurgeHeaders> clientResponse = purgeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<WorkspacePurgeResponseInner, WorkspacePurgePurgeHeaders> purgeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkspacePurgeResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<WorkspacePurgeResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .buildWithHeaders(response, WorkspacePurgePurgeHeaders.class);
    }

    /**
     * Gets status of an ongoing purge operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkspacePurgeStatusResponseInner object if successful.
     */
    public WorkspacePurgeStatusResponseInner getPurgeStatus(String resourceGroupName, String workspaceName, String purgeId) {
        return getPurgeStatusWithServiceResponseAsync(resourceGroupName, workspaceName, purgeId).toBlocking().single().body();
    }

    /**
     * Gets status of an ongoing purge operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkspacePurgeStatusResponseInner> getPurgeStatusAsync(String resourceGroupName, String workspaceName, String purgeId, final ServiceCallback<WorkspacePurgeStatusResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getPurgeStatusWithServiceResponseAsync(resourceGroupName, workspaceName, purgeId), serviceCallback);
    }

    /**
     * Gets status of an ongoing purge operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkspacePurgeStatusResponseInner object
     */
    public Observable<WorkspacePurgeStatusResponseInner> getPurgeStatusAsync(String resourceGroupName, String workspaceName, String purgeId) {
        return getPurgeStatusWithServiceResponseAsync(resourceGroupName, workspaceName, purgeId).map(new Func1<ServiceResponse<WorkspacePurgeStatusResponseInner>, WorkspacePurgeStatusResponseInner>() {
            @Override
            public WorkspacePurgeStatusResponseInner call(ServiceResponse<WorkspacePurgeStatusResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets status of an ongoing purge operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkspacePurgeStatusResponseInner object
     */
    public Observable<ServiceResponse<WorkspacePurgeStatusResponseInner>> getPurgeStatusWithServiceResponseAsync(String resourceGroupName, String workspaceName, String purgeId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (purgeId == null) {
            throw new IllegalArgumentException("Parameter purgeId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getPurgeStatus(resourceGroupName, this.client.subscriptionId(), workspaceName, purgeId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkspacePurgeStatusResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<WorkspacePurgeStatusResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkspacePurgeStatusResponseInner> clientResponse = getPurgeStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkspacePurgeStatusResponseInner> getPurgeStatusDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkspacePurgeStatusResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkspacePurgeStatusResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
