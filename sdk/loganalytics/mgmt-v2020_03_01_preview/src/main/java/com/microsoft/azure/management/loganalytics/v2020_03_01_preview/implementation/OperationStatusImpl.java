/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.OperationStatus;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.ErrorResponse;

class OperationStatusImpl extends IndexableRefreshableWrapperImpl<OperationStatus, OperationStatusInner> implements OperationStatus {
    private final LogAnalyticsManager manager;
    private String location;
    private String asyncOperationId;

    OperationStatusImpl(OperationStatusInner inner,  LogAnalyticsManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.location = IdParsingUtils.getValueFromIdByName(inner.id(), "locations");
        this.asyncOperationId = IdParsingUtils.getValueFromIdByName(inner.id(), "operationStatuses");
    }

    @Override
    public LogAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<OperationStatusInner> getInnerAsync() {
        OperationStatusesInner client = this.manager().inner().operationStatuses();
        return client.getAsync(this.location, this.asyncOperationId);
    }



    @Override
    public String endTime() {
        return this.inner().endTime();
    }

    @Override
    public ErrorResponse error() {
        return this.inner().error();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String startTime() {
        return this.inner().startTime();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

}
