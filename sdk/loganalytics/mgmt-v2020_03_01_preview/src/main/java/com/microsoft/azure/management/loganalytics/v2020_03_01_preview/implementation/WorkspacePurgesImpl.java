/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurges;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurgeStatusResponse;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurgeResponse;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.WorkspacePurgeBody;

class WorkspacePurgesImpl extends WrapperImpl<WorkspacePurgesInner> implements WorkspacePurges {
    private final LogAnalyticsManager manager;

    WorkspacePurgesImpl(LogAnalyticsManager manager) {
        super(manager.inner().workspacePurges());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    private WorkspacePurgeStatusResponseImpl wrapModel(WorkspacePurgeStatusResponseInner inner) {
        return  new WorkspacePurgeStatusResponseImpl(inner, manager());
    }

    @Override
    public Observable<WorkspacePurgeStatusResponse> getPurgeStatusAsync(String resourceGroupName, String workspaceName, String purgeId) {
        WorkspacePurgesInner client = this.inner();
        return client.getPurgeStatusAsync(resourceGroupName, workspaceName, purgeId)
        .flatMap(new Func1<WorkspacePurgeStatusResponseInner, Observable<WorkspacePurgeStatusResponse>>() {
            @Override
            public Observable<WorkspacePurgeStatusResponse> call(WorkspacePurgeStatusResponseInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((WorkspacePurgeStatusResponse)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<WorkspacePurgeResponse> purgeAsync(String resourceGroupName, String workspaceName, WorkspacePurgeBody body) {
        WorkspacePurgesInner client = this.inner();
        return client.purgeAsync(resourceGroupName, workspaceName, body)
        .map(new Func1<WorkspacePurgeResponseInner, WorkspacePurgeResponse>() {
            @Override
            public WorkspacePurgeResponse call(WorkspacePurgeResponseInner inner) {
                return new WorkspacePurgeResponseImpl(inner, manager());
            }
        });
    }

}
