/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.Tables;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.Table;

class TablesImpl extends WrapperImpl<TablesInner> implements Tables {
    private final LogAnalyticsManager manager;

    TablesImpl(LogAnalyticsManager manager) {
        super(manager.inner().tables());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    private TableImpl wrapModel(TableInner inner) {
        return  new TableImpl(inner, manager());
    }

    @Override
    public Observable<Table> listByWorkspaceAsync(String resourceGroupName, String workspaceName) {
        TablesInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<TableInner>, Observable<TableInner>>() {
            @Override
            public Observable<TableInner> call(List<TableInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<TableInner, Table>() {
            @Override
            public Table call(TableInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Table> getAsync(String resourceGroupName, String workspaceName, String tableName) {
        TablesInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, tableName)
        .flatMap(new Func1<TableInner, Observable<Table>>() {
            @Override
            public Observable<Table> call(TableInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Table)wrapModel(inner));
                }
            }
       });
    }

}
