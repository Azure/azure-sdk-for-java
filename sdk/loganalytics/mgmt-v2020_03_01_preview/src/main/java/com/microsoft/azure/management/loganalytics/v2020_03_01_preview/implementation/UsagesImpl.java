/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.Usages;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.UsageMetric;

class UsagesImpl extends WrapperImpl<UsagesInner> implements Usages {
    private final LogAnalyticsManager manager;

    UsagesImpl(LogAnalyticsManager manager) {
        super(manager.inner().usages());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    private UsageMetricImpl wrapModel(UsageMetricInner inner) {
        return  new UsageMetricImpl(inner, manager());
    }

    @Override
    public Observable<UsageMetric> listAsync(String resourceGroupName, String workspaceName) {
        UsagesInner client = this.inner();
        return client.listAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<UsageMetricInner>, Observable<UsageMetricInner>>() {
            @Override
            public Observable<UsageMetricInner> call(List<UsageMetricInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<UsageMetricInner, UsageMetric>() {
            @Override
            public UsageMetric call(UsageMetricInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
