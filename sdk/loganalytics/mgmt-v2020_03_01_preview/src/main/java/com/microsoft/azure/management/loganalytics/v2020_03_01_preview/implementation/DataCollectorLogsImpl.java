/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.DataCollectorLogs;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.DataCollectorLog;

class DataCollectorLogsImpl extends WrapperImpl<DataCollectorLogsInner> implements DataCollectorLogs {
    private final LogAnalyticsManager manager;

    DataCollectorLogsImpl(LogAnalyticsManager manager) {
        super(manager.inner().dataCollectorLogs());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    private DataCollectorLogImpl wrapModel(DataCollectorLogInner inner) {
        return  new DataCollectorLogImpl(inner, manager());
    }

    @Override
    public Observable<DataCollectorLog> listByWorkspaceAsync(String resourceGroupName, String workspaceName) {
        DataCollectorLogsInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<DataCollectorLogInner>, Observable<DataCollectorLogInner>>() {
            @Override
            public Observable<DataCollectorLogInner> call(List<DataCollectorLogInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<DataCollectorLogInner, DataCollectorLog>() {
            @Override
            public DataCollectorLog call(DataCollectorLogInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DataCollectorLog> getAsync(String resourceGroupName, String workspaceName, String tableName) {
        DataCollectorLogsInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, tableName)
        .flatMap(new Func1<DataCollectorLogInner, Observable<DataCollectorLog>>() {
            @Override
            public Observable<DataCollectorLog> call(DataCollectorLogInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DataCollectorLog)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String tableName) {
        DataCollectorLogsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, tableName).toCompletable();
    }

}
