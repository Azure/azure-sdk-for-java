/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation.LinkedServiceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation.LogAnalyticsManager;
import java.util.Map;

/**
 * Type representing LinkedService.
 */
public interface LinkedService extends HasInner<LinkedServiceInner>, Indexable, Refreshable<LinkedService>, Updatable<LinkedService.Update>, HasManager<LogAnalyticsManager> {
    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the provisioningState value.
     */
    LinkedServiceEntityStatus provisioningState();

    /**
     * @return the resourceId value.
     */
    String resourceId();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the writeAccessResourceId value.
     */
    String writeAccessResourceId();

    /**
     * The entirety of the LinkedService definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithWorkspace, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of LinkedService definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a LinkedService definition.
         */
        interface Blank extends WithWorkspace {
        }

        /**
         * The stage of the linkedservice definition allowing to specify Workspace.
         */
        interface WithWorkspace {
           /**
            * Specifies resourceGroupName, workspaceName.
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @param workspaceName The name of the workspace
            * @return the next definition stage
            */
            WithCreate withExistingWorkspace(String resourceGroupName, String workspaceName);
        }

        /**
         * The stage of the linkedservice definition allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState The provisioning state of the linked service. Possible values include: 'Succeeded', 'Deleting', 'ProvisioningAccount', 'Updating'
             * @return the next definition stage
             */
            WithCreate withProvisioningState(LinkedServiceEntityStatus provisioningState);
        }

        /**
         * The stage of the linkedservice definition allowing to specify ResourceId.
         */
        interface WithResourceId {
            /**
             * Specifies resourceId.
             * @param resourceId The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
             * @return the next definition stage
             */
            WithCreate withResourceId(String resourceId);
        }

        /**
         * The stage of the linkedservice definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the linkedservice definition allowing to specify WriteAccessResourceId.
         */
        interface WithWriteAccessResourceId {
            /**
             * Specifies writeAccessResourceId.
             * @param writeAccessResourceId The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
             * @return the next definition stage
             */
            WithCreate withWriteAccessResourceId(String writeAccessResourceId);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<LinkedService>, DefinitionStages.WithProvisioningState, DefinitionStages.WithResourceId, DefinitionStages.WithTags, DefinitionStages.WithWriteAccessResourceId {
        }
    }
    /**
     * The template for a LinkedService update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<LinkedService>, UpdateStages.WithProvisioningState, UpdateStages.WithResourceId, UpdateStages.WithTags, UpdateStages.WithWriteAccessResourceId {
    }

    /**
     * Grouping of LinkedService update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the linkedservice update allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState The provisioning state of the linked service. Possible values include: 'Succeeded', 'Deleting', 'ProvisioningAccount', 'Updating'
             * @return the next update stage
             */
            Update withProvisioningState(LinkedServiceEntityStatus provisioningState);
        }

        /**
         * The stage of the linkedservice update allowing to specify ResourceId.
         */
        interface WithResourceId {
            /**
             * Specifies resourceId.
             * @param resourceId The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
             * @return the next update stage
             */
            Update withResourceId(String resourceId);
        }

        /**
         * The stage of the linkedservice update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the linkedservice update allowing to specify WriteAccessResourceId.
         */
        interface WithWriteAccessResourceId {
            /**
             * Specifies writeAccessResourceId.
             * @param writeAccessResourceId The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
             * @return the next update stage
             */
            Update withWriteAccessResourceId(String writeAccessResourceId);
        }

    }
}
