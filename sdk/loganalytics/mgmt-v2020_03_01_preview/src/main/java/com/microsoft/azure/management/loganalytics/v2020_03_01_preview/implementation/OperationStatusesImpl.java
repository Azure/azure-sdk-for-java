/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.loganalytics.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.OperationStatuses;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.loganalytics.v2020_03_01_preview.OperationStatus;

class OperationStatusesImpl extends WrapperImpl<OperationStatusesInner> implements OperationStatuses {
    private final LogAnalyticsManager manager;

    OperationStatusesImpl(LogAnalyticsManager manager) {
        super(manager.inner().operationStatuses());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    private OperationStatusImpl wrapModel(OperationStatusInner inner) {
        return  new OperationStatusImpl(inner, manager());
    }

    @Override
    public Observable<OperationStatus> getAsync(String location, String asyncOperationId) {
        OperationStatusesInner client = this.inner();
        return client.getAsync(location, asyncOperationId)
        .flatMap(new Func1<OperationStatusInner, Observable<OperationStatus>>() {
            @Override
            public Observable<OperationStatus> call(OperationStatusInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((OperationStatus)wrapModel(inner));
                }
            }
       });
    }

}
