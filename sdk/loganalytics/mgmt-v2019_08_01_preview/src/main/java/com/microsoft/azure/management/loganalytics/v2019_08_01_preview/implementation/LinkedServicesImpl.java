/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.loganalytics.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2019_08_01_preview.LinkedServices;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2019_08_01_preview.LinkedService;

class LinkedServicesImpl extends WrapperImpl<LinkedServicesInner> implements LinkedServices {
    private final LogAnalyticsManager manager;

    LinkedServicesImpl(LogAnalyticsManager manager) {
        super(manager.inner().linkedServices());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public LinkedServiceImpl define(String name) {
        return wrapModel(name);
    }

    private LinkedServiceImpl wrapModel(LinkedServiceInner inner) {
        return  new LinkedServiceImpl(inner, manager());
    }

    private LinkedServiceImpl wrapModel(String name) {
        return new LinkedServiceImpl(name, this.manager());
    }

    @Override
    public Observable<LinkedService> listByWorkspaceAsync(String resourceGroupName, String workspaceName) {
        LinkedServicesInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<LinkedServiceInner>, Observable<LinkedServiceInner>>() {
            @Override
            public Observable<LinkedServiceInner> call(List<LinkedServiceInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<LinkedServiceInner, LinkedService>() {
            @Override
            public LinkedService call(LinkedServiceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<LinkedService> getAsync(String resourceGroupName, String workspaceName, String linkedServiceName) {
        LinkedServicesInner client = this.inner();
        return client.getAsync(resourceGroupName, workspaceName, linkedServiceName)
        .flatMap(new Func1<LinkedServiceInner, Observable<LinkedService>>() {
            @Override
            public Observable<LinkedService> call(LinkedServiceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((LinkedService)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String workspaceName, String linkedServiceName) {
        LinkedServicesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, workspaceName, linkedServiceName).toCompletable();
    }

}
