// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.loganalytics.LogAnalyticsManager;
import com.azure.resourcemanager.loganalytics.models.Column;
import com.azure.resourcemanager.loganalytics.models.ColumnDataTypeHintEnum;
import com.azure.resourcemanager.loganalytics.models.ColumnTypeEnum;
import com.azure.resourcemanager.loganalytics.models.RestoredLogs;
import com.azure.resourcemanager.loganalytics.models.Schema;
import com.azure.resourcemanager.loganalytics.models.SearchResults;
import com.azure.resourcemanager.loganalytics.models.Table;
import com.azure.resourcemanager.loganalytics.models.TablePlanEnum;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TablesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"retentionInDays\":480341295,\"totalRetentionInDays\":27190578,\"archiveRetentionInDays\":1086111273,\"searchResults\":{\"query\":\"lidftujwjj\",\"description\":\"wbeqrkuor\",\"limit\":1870712650,\"startSearchTime\":\"2021-06-02T06:21:30Z\",\"endSearchTime\":\"2021-02-07T15:13:54Z\",\"sourceTable\":\"mdvhazcvjy\",\"azureAsyncOperationId\":\"qswbqerzwx\"},\"restoredLogs\":{\"startRestoreTime\":\"2021-02-23T19:01:43Z\",\"endRestoreTime\":\"2021-05-09T17:49:27Z\",\"sourceTable\":\"ukvlb\",\"azureAsyncOperationId\":\"tgdstyouambe\"},\"resultStatistics\":{\"progress\":89.09465,\"ingestedRecords\":1285281809,\"scannedGb\":14.380062},\"plan\":\"Analytics\",\"lastPlanModifiedDate\":\"mut\",\"schema\":{\"name\":\"eyguq\",\"displayName\":\"ijiitns\",\"description\":\"lz\",\"columns\":[{\"name\":\"grijwaiufanrayb\",\"type\":\"real\",\"dataTypeHint\":\"armPath\",\"displayName\":\"oj\",\"description\":\"dgrhydkygywezs\",\"isDefaultDisplay\":false,\"isHidden\":true},{\"name\":\"ygzmxieqvdsmak\",\"type\":\"string\",\"dataTypeHint\":\"guid\",\"displayName\":\"hyhxa\",\"description\":\"bx\",\"isDefaultDisplay\":false,\"isHidden\":false}],\"standardColumns\":[{\"name\":\"tblxpkkwjdjodqhy\",\"type\":\"int\",\"dataTypeHint\":\"uri\",\"displayName\":\"emehllizh\",\"description\":\"umoqodkad\",\"isDefaultDisplay\":true,\"isHidden\":true}],\"categories\":[\"qladywrxwhydtlu\",\"vadswzs\",\"uyem\",\"owuowh\"],\"labels\":[\"nwyrmouv\"],\"source\":\"customer\",\"tableType\":\"CustomLog\",\"tableSubType\":\"Classic\",\"solutions\":[\"trfowtdvr\",\"mvlihcvjdrqcrjid\",\"ftukvhd\"]},\"provisioningState\":\"Succeeded\",\"retentionInDaysAsDefault\":false,\"totalRetentionInDaysAsDefault\":false},\"systemData\":{\"createdBy\":\"zd\",\"createdByType\":\"Application\",\"createdAt\":\"2021-03-22T04:05:19Z\",\"lastModifiedBy\":\"xhafratqx\",\"lastModifiedByType\":\"Application\",\"lastModifiedAt\":\"2021-11-30T03:06:43Z\"},\"id\":\"umzznvalqjrhuz\",\"name\":\"fxonjtpusllywp\",\"type\":\"tiotzb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogAnalyticsManager manager = LogAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Table response = manager.tables()
            .define("oytzpose")
            .withExistingWorkspace("xa", "n")
            .withRetentionInDays(1606592668)
            .withTotalRetentionInDays(1200171262)
            .withSearchResults(new SearchResults().withQuery("aupxvpi")
                .withDescription("f")
                .withLimit(479705193)
                .withStartSearchTime(OffsetDateTime.parse("2021-06-27T21:10:54Z"))
                .withEndSearchTime(OffsetDateTime.parse("2021-06-24T09:11:48Z")))
            .withRestoredLogs(new RestoredLogs().withStartRestoreTime(OffsetDateTime.parse("2021-07-31T20:24:08Z"))
                .withEndRestoreTime(OffsetDateTime.parse("2021-02-02T20:49:05Z"))
                .withSourceTable("xwetwkdrcyrucpc"))
            .withPlan(TablePlanEnum.BASIC)
            .withSchema(new Schema().withName("dnelqkaad")
                .withDisplayName("nwf")
                .withDescription("nniyopetxi")
                .withColumns(Arrays.asList(
                    new Column().withName("lyxnucaephb")
                        .withType(ColumnTypeEnum.GUID)
                        .withDataTypeHint(ColumnDataTypeHintEnum.URI)
                        .withDisplayName("tv")
                        .withDescription("sdtcjbctvivuzqym"),
                    new Column().withName("tgitsqhzvbrzc")
                        .withType(ColumnTypeEnum.DYNAMIC)
                        .withDataTypeHint(ColumnDataTypeHintEnum.IP)
                        .withDisplayName("ndscxmxeatk")
                        .withDescription("mwnrdj"))))
            .create();

        Assertions.assertEquals(480341295, response.retentionInDays());
        Assertions.assertEquals(27190578, response.totalRetentionInDays());
        Assertions.assertEquals("lidftujwjj", response.searchResults().query());
        Assertions.assertEquals("wbeqrkuor", response.searchResults().description());
        Assertions.assertEquals(1870712650, response.searchResults().limit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-02T06:21:30Z"),
            response.searchResults().startSearchTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-07T15:13:54Z"), response.searchResults().endSearchTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T19:01:43Z"),
            response.restoredLogs().startRestoreTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-09T17:49:27Z"), response.restoredLogs().endRestoreTime());
        Assertions.assertEquals("ukvlb", response.restoredLogs().sourceTable());
        Assertions.assertEquals(TablePlanEnum.ANALYTICS, response.plan());
        Assertions.assertEquals("eyguq", response.schema().name());
        Assertions.assertEquals("ijiitns", response.schema().displayName());
        Assertions.assertEquals("lz", response.schema().description());
        Assertions.assertEquals("grijwaiufanrayb", response.schema().columns().get(0).name());
        Assertions.assertEquals(ColumnTypeEnum.REAL, response.schema().columns().get(0).type());
        Assertions.assertEquals(ColumnDataTypeHintEnum.ARM_PATH, response.schema().columns().get(0).dataTypeHint());
        Assertions.assertEquals("oj", response.schema().columns().get(0).displayName());
        Assertions.assertEquals("dgrhydkygywezs", response.schema().columns().get(0).description());
    }
}
