// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.loganalytics.LogAnalyticsManager;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQuery;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQueryPropertiesRelated;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class QueriesPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"id\":\"fgvxirpghriypoqe\",\"displayName\":\"hlqhykprlpy\",\"timeCreated\":\"2021-01-24T16:28:55Z\",\"timeModified\":\"2021-04-10T23:45:20Z\",\"author\":\"dsmexiitdfux\",\"description\":\"asiibmiybnnust\",\"body\":\"nlj\",\"related\":{\"categories\":[\"ixhcmavmqfoudor\"],\"resourceTypes\":[\"yyprotwyp\",\"ndm\",\"xhugcm\"],\"solutions\":[\"vlgo\"]},\"tags\":{\"qgqqihedsvqwthmk\":[\"tp\",\"dtzfjltfvnzcy\",\"t\",\"tpvopvpbdb\"],\"cohdx\":[\"bcysih\",\"gqcwdhohsdtmc\",\"zsu\"]},\"properties\":\"datalm\"},\"id\":\"uapcvhdbevwqqxe\",\"name\":\"ko\",\"type\":\"zinkfkbgbzbowxeq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogAnalyticsManager manager =
            LogAnalyticsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        LogAnalyticsQueryPackQuery response =
            manager
                .queries()
                .define("unqndyfpchrqb")
                .withExistingQueryPack("uncuw", "qspkcdqzhlctd")
                .withTags(
                    mapOf(
                        "omfgbeglqgleohib",
                        Arrays.asList("geyzihgrkyuiz", "bsnmfpph", "jee", "yhyhsgzfczb"),
                        "mq",
                        Arrays.asList("nlu", "nkrrf", "eeebtijvacv")))
                .withDisplayName("qqoli")
                .withDescription("oq")
                .withBody("fuojrngif")
                .withRelated(
                    new LogAnalyticsQueryPackQueryPropertiesRelated()
                        .withCategories(Arrays.asList("asccbiui", "zdlyjdfqw"))
                        .withResourceTypes(Arrays.asList("oq", "fdvruz", "lzo"))
                        .withSolutions(Arrays.asList("ctfnmdxotng")))
                .withProperties("dataqqxlajr")
                .create();

        Assertions.assertEquals("hlqhykprlpy", response.displayName());
        Assertions.assertEquals("asiibmiybnnust", response.description());
        Assertions.assertEquals("nlj", response.body());
        Assertions.assertEquals("ixhcmavmqfoudor", response.related().categories().get(0));
        Assertions.assertEquals("yyprotwyp", response.related().resourceTypes().get(0));
        Assertions.assertEquals("vlgo", response.related().solutions().get(0));
        Assertions.assertEquals("tp", response.tags().get("qgqqihedsvqwthmk").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
