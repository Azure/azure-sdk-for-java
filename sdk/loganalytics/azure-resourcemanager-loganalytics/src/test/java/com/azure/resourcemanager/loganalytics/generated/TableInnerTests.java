// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.TableInner;
import com.azure.resourcemanager.loganalytics.models.Column;
import com.azure.resourcemanager.loganalytics.models.ColumnDataTypeHintEnum;
import com.azure.resourcemanager.loganalytics.models.ColumnTypeEnum;
import com.azure.resourcemanager.loganalytics.models.RestoredLogs;
import com.azure.resourcemanager.loganalytics.models.Schema;
import com.azure.resourcemanager.loganalytics.models.SearchResults;
import com.azure.resourcemanager.loganalytics.models.TablePlanEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TableInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TableInner model = BinaryData.fromString(
            "{\"properties\":{\"retentionInDays\":744996388,\"totalRetentionInDays\":1739983778,\"archiveRetentionInDays\":1797695866,\"searchResults\":{\"query\":\"vjlfrqtt\",\"description\":\"jlkatnwxy\",\"limit\":2086170636,\"startSearchTime\":\"2021-07-06T16:40:26Z\",\"endSearchTime\":\"2021-05-28T18:08:40Z\",\"sourceTable\":\"fku\",\"azureAsyncOperationId\":\"cxkdmligovi\"},\"restoredLogs\":{\"startRestoreTime\":\"2021-07-15T21:34:15Z\",\"endRestoreTime\":\"2021-12-03T21:08:29Z\",\"sourceTable\":\"oaz\",\"azureAsyncOperationId\":\"u\"},\"resultStatistics\":{\"progress\":46.173687,\"ingestedRecords\":1776042141,\"scannedGb\":38.299255},\"plan\":\"Analytics\",\"lastPlanModifiedDate\":\"ybfhjxa\",\"schema\":{\"name\":\"jgslordilmyww\",\"displayName\":\"gkxnyedabg\",\"description\":\"udtjuewbc\",\"columns\":[{\"name\":\"uwhcjyxccybv\",\"type\":\"int\",\"dataTypeHint\":\"guid\",\"displayName\":\"udzpxgwjplmagstc\",\"description\":\"hpfkyrkdbdgi\",\"isDefaultDisplay\":false,\"isHidden\":true},{\"name\":\"nwqjnoba\",\"type\":\"int\",\"dataTypeHint\":\"uri\",\"displayName\":\"iacegfnmn\",\"description\":\"pmvmemfnczdwvv\",\"isDefaultDisplay\":true,\"isHidden\":true}],\"standardColumns\":[{\"name\":\"hpodbzev\",\"type\":\"long\",\"dataTypeHint\":\"uri\",\"displayName\":\"ukuv\",\"description\":\"cswsmystul\",\"isDefaultDisplay\":true,\"isHidden\":false},{\"name\":\"vlerchpqbmfpjba\",\"type\":\"dynamic\",\"dataTypeHint\":\"ip\",\"displayName\":\"xsspuunnoxyhk\",\"description\":\"qddrihpfhoqcaae\",\"isDefaultDisplay\":true,\"isHidden\":false},{\"name\":\"jvlpjxxkzbr\",\"type\":\"guid\",\"dataTypeHint\":\"guid\",\"displayName\":\"siykzkdncjdxonbz\",\"description\":\"gculap\",\"isDefaultDisplay\":false,\"isHidden\":true},{\"name\":\"ogtqxepnylbf\",\"type\":\"boolean\",\"dataTypeHint\":\"uri\",\"displayName\":\"tlvofq\",\"description\":\"vfcibyfmowux\",\"isDefaultDisplay\":false,\"isHidden\":false}],\"categories\":[\"xfzwi\"],\"labels\":[\"zjb\",\"yzsxjrkambtrne\"],\"source\":\"microsoft\",\"tableType\":\"SearchResults\",\"tableSubType\":\"Classic\",\"solutions\":[\"vldspa\",\"tjb\",\"kdmflvestmjlx\",\"ril\"]},\"provisioningState\":\"Succeeded\",\"retentionInDaysAsDefault\":true,\"totalRetentionInDaysAsDefault\":false},\"systemData\":{\"createdBy\":\"pxlktwkuziycsl\",\"createdByType\":\"Key\",\"createdAt\":\"2021-08-14T04:43:23Z\",\"lastModifiedBy\":\"tcktyhjtqedcgzu\",\"lastModifiedByType\":\"Application\",\"lastModifiedAt\":\"2021-03-09T05:15:02Z\"},\"id\":\"qzz\",\"name\":\"rjvpglydzgkrvqee\",\"type\":\"toepryu\"}")
            .toObject(TableInner.class);
        Assertions.assertEquals(744996388, model.retentionInDays());
        Assertions.assertEquals(1739983778, model.totalRetentionInDays());
        Assertions.assertEquals("vjlfrqtt", model.searchResults().query());
        Assertions.assertEquals("jlkatnwxy", model.searchResults().description());
        Assertions.assertEquals(2086170636, model.searchResults().limit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T16:40:26Z"), model.searchResults().startSearchTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-28T18:08:40Z"), model.searchResults().endSearchTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T21:34:15Z"), model.restoredLogs().startRestoreTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T21:08:29Z"), model.restoredLogs().endRestoreTime());
        Assertions.assertEquals("oaz", model.restoredLogs().sourceTable());
        Assertions.assertEquals(TablePlanEnum.ANALYTICS, model.plan());
        Assertions.assertEquals("jgslordilmyww", model.schema().name());
        Assertions.assertEquals("gkxnyedabg", model.schema().displayName());
        Assertions.assertEquals("udtjuewbc", model.schema().description());
        Assertions.assertEquals("uwhcjyxccybv", model.schema().columns().get(0).name());
        Assertions.assertEquals(ColumnTypeEnum.INT, model.schema().columns().get(0).type());
        Assertions.assertEquals(ColumnDataTypeHintEnum.GUID, model.schema().columns().get(0).dataTypeHint());
        Assertions.assertEquals("udzpxgwjplmagstc", model.schema().columns().get(0).displayName());
        Assertions.assertEquals("hpfkyrkdbdgi", model.schema().columns().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TableInner model = new TableInner().withRetentionInDays(744996388)
            .withTotalRetentionInDays(1739983778)
            .withSearchResults(new SearchResults().withQuery("vjlfrqtt")
                .withDescription("jlkatnwxy")
                .withLimit(2086170636)
                .withStartSearchTime(OffsetDateTime.parse("2021-07-06T16:40:26Z"))
                .withEndSearchTime(OffsetDateTime.parse("2021-05-28T18:08:40Z")))
            .withRestoredLogs(new RestoredLogs().withStartRestoreTime(OffsetDateTime.parse("2021-07-15T21:34:15Z"))
                .withEndRestoreTime(OffsetDateTime.parse("2021-12-03T21:08:29Z"))
                .withSourceTable("oaz"))
            .withPlan(TablePlanEnum.ANALYTICS)
            .withSchema(new Schema().withName("jgslordilmyww")
                .withDisplayName("gkxnyedabg")
                .withDescription("udtjuewbc")
                .withColumns(Arrays.asList(
                    new Column().withName("uwhcjyxccybv")
                        .withType(ColumnTypeEnum.INT)
                        .withDataTypeHint(ColumnDataTypeHintEnum.GUID)
                        .withDisplayName("udzpxgwjplmagstc")
                        .withDescription("hpfkyrkdbdgi"),
                    new Column().withName("nwqjnoba")
                        .withType(ColumnTypeEnum.INT)
                        .withDataTypeHint(ColumnDataTypeHintEnum.URI)
                        .withDisplayName("iacegfnmn")
                        .withDescription("pmvmemfnczdwvv"))));
        model = BinaryData.fromObject(model).toObject(TableInner.class);
        Assertions.assertEquals(744996388, model.retentionInDays());
        Assertions.assertEquals(1739983778, model.totalRetentionInDays());
        Assertions.assertEquals("vjlfrqtt", model.searchResults().query());
        Assertions.assertEquals("jlkatnwxy", model.searchResults().description());
        Assertions.assertEquals(2086170636, model.searchResults().limit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T16:40:26Z"), model.searchResults().startSearchTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-28T18:08:40Z"), model.searchResults().endSearchTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T21:34:15Z"), model.restoredLogs().startRestoreTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T21:08:29Z"), model.restoredLogs().endRestoreTime());
        Assertions.assertEquals("oaz", model.restoredLogs().sourceTable());
        Assertions.assertEquals(TablePlanEnum.ANALYTICS, model.plan());
        Assertions.assertEquals("jgslordilmyww", model.schema().name());
        Assertions.assertEquals("gkxnyedabg", model.schema().displayName());
        Assertions.assertEquals("udtjuewbc", model.schema().description());
        Assertions.assertEquals("uwhcjyxccybv", model.schema().columns().get(0).name());
        Assertions.assertEquals(ColumnTypeEnum.INT, model.schema().columns().get(0).type());
        Assertions.assertEquals(ColumnDataTypeHintEnum.GUID, model.schema().columns().get(0).dataTypeHint());
        Assertions.assertEquals("udzpxgwjplmagstc", model.schema().columns().get(0).displayName());
        Assertions.assertEquals("hpfkyrkdbdgi", model.schema().columns().get(0).description());
    }
}
