// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.UsageMetricInner;
import com.azure.resourcemanager.loganalytics.models.MetricName;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class UsageMetricInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UsageMetricInner model =
            BinaryData
                .fromString(
                    "{\"name\":{\"value\":\"xknalaulppg\",\"localizedValue\":\"tpnapnyiropuhpig\"},\"unit\":\"gylgqgitxmedjvcs\",\"currentValue\":1.7087985829917218,\"limit\":85.38784112555038,\"nextResetTime\":\"2021-09-17T17:00:46Z\",\"quotaPeriod\":\"zhxgktrmgucn\"}")
                .toObject(UsageMetricInner.class);
        Assertions.assertEquals("xknalaulppg", model.name().value());
        Assertions.assertEquals("tpnapnyiropuhpig", model.name().localizedValue());
        Assertions.assertEquals("gylgqgitxmedjvcs", model.unit());
        Assertions.assertEquals(1.7087985829917218D, model.currentValue());
        Assertions.assertEquals(85.38784112555038D, model.limit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-17T17:00:46Z"), model.nextResetTime());
        Assertions.assertEquals("zhxgktrmgucn", model.quotaPeriod());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UsageMetricInner model =
            new UsageMetricInner()
                .withName(new MetricName().withValue("xknalaulppg").withLocalizedValue("tpnapnyiropuhpig"))
                .withUnit("gylgqgitxmedjvcs")
                .withCurrentValue(1.7087985829917218D)
                .withLimit(85.38784112555038D)
                .withNextResetTime(OffsetDateTime.parse("2021-09-17T17:00:46Z"))
                .withQuotaPeriod("zhxgktrmgucn");
        model = BinaryData.fromObject(model).toObject(UsageMetricInner.class);
        Assertions.assertEquals("xknalaulppg", model.name().value());
        Assertions.assertEquals("tpnapnyiropuhpig", model.name().localizedValue());
        Assertions.assertEquals("gylgqgitxmedjvcs", model.unit());
        Assertions.assertEquals(1.7087985829917218D, model.currentValue());
        Assertions.assertEquals(85.38784112555038D, model.limit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-17T17:00:46Z"), model.nextResetTime());
        Assertions.assertEquals("zhxgktrmgucn", model.quotaPeriod());
    }
}
