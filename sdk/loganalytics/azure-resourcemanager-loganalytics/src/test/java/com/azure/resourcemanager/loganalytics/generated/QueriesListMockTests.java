// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.loganalytics.LogAnalyticsManager;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQuery;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class QueriesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"id\":\"hnakzyb\",\"displayName\":\"jjidjk\",\"timeCreated\":\"2021-08-02T20:33:36Z\",\"timeModified\":\"2021-04-16T16:08:50Z\",\"author\":\"vxevblb\",\"description\":\"dnlj\",\"body\":\"age\",\"related\":{\"categories\":[\"xuns\",\"jbnkpp\",\"ynenlsvxeizz\",\"wklnsrmffeyc\"],\"resourceTypes\":[\"tpiymerteea\"],\"solutions\":[\"qiekkkzddrt\",\"g\",\"ojbmxv\",\"vrefdeesv\"]},\"tags\":{\"itvtzeexavo\":[\"jpxtxsuwprtuj\",\"sawddjibabxvi\"]},\"properties\":\"datafglecdmdqbwp\"},\"id\":\"q\",\"name\":\"sfj\",\"type\":\"b\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogAnalyticsManager manager =
            LogAnalyticsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LogAnalyticsQueryPackQuery> response =
            manager
                .queries()
                .list("ddyvvjskgfmo", "wa", 2321804030717404351L, false, "atjeaahh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jjidjk", response.iterator().next().displayName());
        Assertions.assertEquals("dnlj", response.iterator().next().description());
        Assertions.assertEquals("age", response.iterator().next().body());
        Assertions.assertEquals("xuns", response.iterator().next().related().categories().get(0));
        Assertions.assertEquals("tpiymerteea", response.iterator().next().related().resourceTypes().get(0));
        Assertions.assertEquals("qiekkkzddrt", response.iterator().next().related().solutions().get(0));
        Assertions.assertEquals("jpxtxsuwprtuj", response.iterator().next().tags().get("itvtzeexavo").get(0));
    }
}
