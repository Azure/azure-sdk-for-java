// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.loganalytics.LogAnalyticsManager;
import com.azure.resourcemanager.loganalytics.models.DataExport;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataExportsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"dataExportId\":\"iljhahz\",\"tableNames\":[\"chndbnwie\",\"olewjwi\",\"ubwefqs\",\"ap\"],\"destination\":{\"resourceId\":\"tf\",\"type\":\"EventHub\",\"metaData\":{\"eventHubName\":\"ex\"}},\"enable\":true,\"createdDate\":\"xap\",\"lastModifiedDate\":\"og\"},\"id\":\"qnobp\",\"name\":\"dcdab\",\"type\":\"qwpwyawbzasqbuc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        LogAnalyticsManager manager = LogAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DataExport> response
            = manager.dataExports().listByWorkspace("zejnhl", "kpbz", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("iljhahz", response.iterator().next().dataExportId());
        Assertions.assertEquals("chndbnwie", response.iterator().next().tableNames().get(0));
        Assertions.assertEquals(true, response.iterator().next().enable());
        Assertions.assertEquals("xap", response.iterator().next().createdDate());
        Assertions.assertEquals("og", response.iterator().next().lastModifiedDate());
        Assertions.assertEquals("tf", response.iterator().next().resourceId());
        Assertions.assertEquals("ex", response.iterator().next().eventHubName());
    }
}
