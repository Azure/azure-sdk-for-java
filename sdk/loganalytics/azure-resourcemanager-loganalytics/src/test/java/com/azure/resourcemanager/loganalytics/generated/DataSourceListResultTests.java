// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.DataSourceInner;
import com.azure.resourcemanager.loganalytics.models.DataSourceKind;
import com.azure.resourcemanager.loganalytics.models.DataSourceListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DataSourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataSourceListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":\"dataeamdp\",\"etag\":\"g\",\"kind\":\"CustomLog\",\"tags\":{\"ow\":\"uxwgipwho\",\"injep\":\"gshwankixz\"},\"id\":\"ttmrywnuzoqf\",\"name\":\"iyqzrnk\",\"type\":\"qvyxlwhzlsicoho\"},{\"properties\":\"dataqnwvlrya\",\"etag\":\"hheunmmqhgyx\",\"kind\":\"ChangeTrackingDataTypeConfiguration\",\"tags\":{\"conuqszfkbeype\":\"ocukoklyax\"},\"id\":\"rmjmwvvjektc\",\"name\":\"senhwlrs\",\"type\":\"frzpwvlqdqgb\"},{\"properties\":\"dataqylihkaetckt\",\"etag\":\"civfsnkymuctq\",\"kind\":\"SqlDataClassification\",\"tags\":{\"fuwutttxf\":\"ebrjcxe\",\"hfnljkyq\":\"jrbirphxepcyv\",\"uujqgidokgjljyo\":\"j\",\"bgsncghkjeszzhb\":\"gvcl\"},\"id\":\"jhtxfvgxbfsmxne\",\"name\":\"mpvecxgodebfqk\",\"type\":\"rbmpukgri\"},{\"properties\":\"dataflz\",\"etag\":\"bxzpuzycisp\",\"kind\":\"CustomLogCollection\",\"tags\":{\"hibnuqqkpika\":\"hmgkbrpyy\",\"buynhijggm\":\"rgvtqag\"},\"id\":\"bfs\",\"name\":\"arbu\",\"type\":\"rcvpnazzmhjrunmp\"}],\"nextLink\":\"tdbhrbnla\"}")
                .toObject(DataSourceListResult.class);
        Assertions.assertEquals("g", model.value().get(0).etag());
        Assertions.assertEquals(DataSourceKind.CUSTOM_LOG, model.value().get(0).kind());
        Assertions.assertEquals("uxwgipwho", model.value().get(0).tags().get("ow"));
        Assertions.assertEquals("tdbhrbnla", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataSourceListResult model =
            new DataSourceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new DataSourceInner()
                                .withProperties("dataeamdp")
                                .withEtag("g")
                                .withKind(DataSourceKind.CUSTOM_LOG)
                                .withTags(mapOf("ow", "uxwgipwho", "injep", "gshwankixz")),
                            new DataSourceInner()
                                .withProperties("dataqnwvlrya")
                                .withEtag("hheunmmqhgyx")
                                .withKind(DataSourceKind.CHANGE_TRACKING_DATA_TYPE_CONFIGURATION)
                                .withTags(mapOf("conuqszfkbeype", "ocukoklyax")),
                            new DataSourceInner()
                                .withProperties("dataqylihkaetckt")
                                .withEtag("civfsnkymuctq")
                                .withKind(DataSourceKind.SQL_DATA_CLASSIFICATION)
                                .withTags(
                                    mapOf(
                                        "fuwutttxf",
                                        "ebrjcxe",
                                        "hfnljkyq",
                                        "jrbirphxepcyv",
                                        "uujqgidokgjljyo",
                                        "j",
                                        "bgsncghkjeszzhb",
                                        "gvcl")),
                            new DataSourceInner()
                                .withProperties("dataflz")
                                .withEtag("bxzpuzycisp")
                                .withKind(DataSourceKind.CUSTOM_LOG_COLLECTION)
                                .withTags(mapOf("hibnuqqkpika", "hmgkbrpyy", "buynhijggm", "rgvtqag"))))
                .withNextLink("tdbhrbnla");
        model = BinaryData.fromObject(model).toObject(DataSourceListResult.class);
        Assertions.assertEquals("g", model.value().get(0).etag());
        Assertions.assertEquals(DataSourceKind.CUSTOM_LOG, model.value().get(0).kind());
        Assertions.assertEquals("uxwgipwho", model.value().get(0).tags().get("ow"));
        Assertions.assertEquals("tdbhrbnla", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
