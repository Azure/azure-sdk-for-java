// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.LogAnalyticsQueryPackQueryInner;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQueryPropertiesRelated;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LogAnalyticsQueryPackQueryInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogAnalyticsQueryPackQueryInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"id\":\"qwpgrjbzn\",\"displayName\":\"rcjxvsnbyxqabn\",\"timeCreated\":\"2021-06-16T16:14:14Z\",\"timeModified\":\"2020-12-28T20:56:17Z\",\"author\":\"shurzafbljjgpbto\",\"description\":\"jmkljavbqidtqajz\",\"body\":\"ulpkudjkrl\",\"related\":{\"categories\":[\"hfepgzgqex\"],\"resourceTypes\":[\"c\",\"scpai\",\"rhhbcs\",\"l\"],\"solutions\":[\"a\",\"tjaodxobnb\"]},\"tags\":{\"mexgstxgcp\":[\"pxokajionp\"]},\"properties\":\"datagmaajrm\"},\"id\":\"jwzrl\",\"name\":\"mcl\",\"type\":\"ijcoejctb\"}")
                .toObject(LogAnalyticsQueryPackQueryInner.class);
        Assertions.assertEquals("rcjxvsnbyxqabn", model.displayName());
        Assertions.assertEquals("jmkljavbqidtqajz", model.description());
        Assertions.assertEquals("ulpkudjkrl", model.body());
        Assertions.assertEquals("hfepgzgqex", model.related().categories().get(0));
        Assertions.assertEquals("c", model.related().resourceTypes().get(0));
        Assertions.assertEquals("a", model.related().solutions().get(0));
        Assertions.assertEquals("pxokajionp", model.tags().get("mexgstxgcp").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogAnalyticsQueryPackQueryInner model =
            new LogAnalyticsQueryPackQueryInner()
                .withDisplayName("rcjxvsnbyxqabn")
                .withDescription("jmkljavbqidtqajz")
                .withBody("ulpkudjkrl")
                .withRelated(
                    new LogAnalyticsQueryPackQueryPropertiesRelated()
                        .withCategories(Arrays.asList("hfepgzgqex"))
                        .withResourceTypes(Arrays.asList("c", "scpai", "rhhbcs", "l"))
                        .withSolutions(Arrays.asList("a", "tjaodxobnb")))
                .withTags(mapOf("mexgstxgcp", Arrays.asList("pxokajionp")))
                .withProperties("datagmaajrm");
        model = BinaryData.fromObject(model).toObject(LogAnalyticsQueryPackQueryInner.class);
        Assertions.assertEquals("rcjxvsnbyxqabn", model.displayName());
        Assertions.assertEquals("jmkljavbqidtqajz", model.description());
        Assertions.assertEquals("ulpkudjkrl", model.body());
        Assertions.assertEquals("hfepgzgqex", model.related().categories().get(0));
        Assertions.assertEquals("c", model.related().resourceTypes().get(0));
        Assertions.assertEquals("a", model.related().solutions().get(0));
        Assertions.assertEquals("pxokajionp", model.tags().get("mexgstxgcp").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
