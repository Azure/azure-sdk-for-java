// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.LogAnalyticsQueryPackInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LogAnalyticsQueryPackInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogAnalyticsQueryPackInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"queryPackId\":\"ijbpzvgnwzsymgl\",\"timeCreated\":\"2021-09-05T16:59:27Z\",\"timeModified\":\"2021-02-27T08:20:44Z\",\"provisioningState\":\"ohdbihanufh\"},\"location\":\"cbjy\",\"tags\":{\"xwczbyscnp\":\"ithxqhabifpi\"},\"id\":\"x\",\"name\":\"hiv\",\"type\":\"qniwbybrkxvdumj\"}")
                .toObject(LogAnalyticsQueryPackInner.class);
        Assertions.assertEquals("cbjy", model.location());
        Assertions.assertEquals("ithxqhabifpi", model.tags().get("xwczbyscnp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogAnalyticsQueryPackInner model =
            new LogAnalyticsQueryPackInner().withLocation("cbjy").withTags(mapOf("xwczbyscnp", "ithxqhabifpi"));
        model = BinaryData.fromObject(model).toObject(LogAnalyticsQueryPackInner.class);
        Assertions.assertEquals("cbjy", model.location());
        Assertions.assertEquals("ithxqhabifpi", model.tags().get("xwczbyscnp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
