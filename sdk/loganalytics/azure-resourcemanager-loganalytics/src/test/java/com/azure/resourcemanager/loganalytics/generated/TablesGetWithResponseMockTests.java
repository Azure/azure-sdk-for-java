// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.loganalytics.LogAnalyticsManager;
import com.azure.resourcemanager.loganalytics.models.ColumnDataTypeHintEnum;
import com.azure.resourcemanager.loganalytics.models.ColumnTypeEnum;
import com.azure.resourcemanager.loganalytics.models.Table;
import com.azure.resourcemanager.loganalytics.models.TablePlanEnum;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TablesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"retentionInDays\":1435976070,\"totalRetentionInDays\":1686367778,\"archiveRetentionInDays\":1716765996,\"searchResults\":{\"query\":\"wynqxaekqsykvwj\",\"description\":\"pkevmylt\",\"limit\":2026701044,\"startSearchTime\":\"2021-10-29T22:46:22Z\",\"endSearchTime\":\"2021-04-08T09:27:59Z\",\"sourceTable\":\"urcclfgxannn\",\"azureAsyncOperationId\":\"t\"},\"restoredLogs\":{\"startRestoreTime\":\"2021-03-29T11:03:44Z\",\"endRestoreTime\":\"2021-11-29T05:38:50Z\",\"sourceTable\":\"igpxvkq\",\"azureAsyncOperationId\":\"upxvpifd\"},\"resultStatistics\":{\"progress\":61.169006,\"ingestedRecords\":1330268860,\"scannedGb\":72.36485},\"plan\":\"Analytics\",\"lastPlanModifiedDate\":\"ubeids\",\"schema\":{\"name\":\"ytoithgygvfl\",\"displayName\":\"vdihoynkrx\",\"description\":\"twk\",\"columns\":[{\"name\":\"rucpcunnuz\",\"type\":\"dateTime\",\"dataTypeHint\":\"armPath\",\"displayName\":\"nod\",\"description\":\"ienhqhskndnelq\",\"isDefaultDisplay\":true,\"isHidden\":true}],\"standardColumns\":[{\"name\":\"foanniyopetx\",\"type\":\"long\",\"dataTypeHint\":\"uri\",\"displayName\":\"yxnu\",\"description\":\"ephblkwqpatvbqs\",\"isDefaultDisplay\":false,\"isHidden\":true}],\"categories\":[\"vivuzqymtuowo\",\"tgitsqhzvbrzc\",\"banf\"],\"labels\":[\"scxmxeat\"],\"source\":\"customer\",\"tableType\":\"SearchResults\",\"tableSubType\":\"Classic\",\"solutions\":[\"yibqbnao\",\"hjrmkuhmaxl\"]},\"provisioningState\":\"InProgress\",\"retentionInDaysAsDefault\":false,\"totalRetentionInDaysAsDefault\":true},\"systemData\":{\"createdBy\":\"obcancdexxqcw\",\"createdByType\":\"User\",\"createdAt\":\"2021-10-18T23:22:13Z\",\"lastModifiedBy\":\"aknokzwjjzrl\",\"lastModifiedByType\":\"Key\",\"lastModifiedAt\":\"2021-06-15T15:42:35Z\"},\"id\":\"zyyfy\",\"name\":\"pqsixymmp\",\"type\":\"jivyqlkjuv\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogAnalyticsManager manager =
            LogAnalyticsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Table response =
            manager
                .tables()
                .getWithResponse("rkgwltxeqip", "gzdyimsfayorp", "avkjog", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(1435976070, response.retentionInDays());
        Assertions.assertEquals(1686367778, response.totalRetentionInDays());
        Assertions.assertEquals("wynqxaekqsykvwj", response.searchResults().query());
        Assertions.assertEquals("pkevmylt", response.searchResults().description());
        Assertions.assertEquals(2026701044, response.searchResults().limit());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-10-29T22:46:22Z"), response.searchResults().startSearchTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-08T09:27:59Z"), response.searchResults().endSearchTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-03-29T11:03:44Z"), response.restoredLogs().startRestoreTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-29T05:38:50Z"), response.restoredLogs().endRestoreTime());
        Assertions.assertEquals("igpxvkq", response.restoredLogs().sourceTable());
        Assertions.assertEquals(TablePlanEnum.ANALYTICS, response.plan());
        Assertions.assertEquals("ytoithgygvfl", response.schema().name());
        Assertions.assertEquals("vdihoynkrx", response.schema().displayName());
        Assertions.assertEquals("twk", response.schema().description());
        Assertions.assertEquals("rucpcunnuz", response.schema().columns().get(0).name());
        Assertions.assertEquals(ColumnTypeEnum.DATE_TIME, response.schema().columns().get(0).type());
        Assertions.assertEquals(ColumnDataTypeHintEnum.ARM_PATH, response.schema().columns().get(0).dataTypeHint());
        Assertions.assertEquals("nod", response.schema().columns().get(0).displayName());
        Assertions.assertEquals("ienhqhskndnelq", response.schema().columns().get(0).description());
    }
}
