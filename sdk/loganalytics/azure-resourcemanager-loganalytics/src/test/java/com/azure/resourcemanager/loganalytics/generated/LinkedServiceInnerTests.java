// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.LinkedServiceInner;
import com.azure.resourcemanager.loganalytics.models.LinkedServiceEntityStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedServiceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"resourceId\":\"idybyxczf\",\"writeAccessResourceId\":\"haaxdbabphl\",\"provisioningState\":\"ProvisioningAccount\"},\"tags\":{\"azt\":\"ktsthsucocmny\"},\"id\":\"bt\",\"name\":\"wrqpue\",\"type\":\"ckzywbiexzfeyue\"}")
                .toObject(LinkedServiceInner.class);
        Assertions.assertEquals("ktsthsucocmny", model.tags().get("azt"));
        Assertions.assertEquals("idybyxczf", model.resourceId());
        Assertions.assertEquals("haaxdbabphl", model.writeAccessResourceId());
        Assertions.assertEquals(LinkedServiceEntityStatus.PROVISIONING_ACCOUNT, model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedServiceInner model =
            new LinkedServiceInner()
                .withTags(mapOf("azt", "ktsthsucocmny"))
                .withResourceId("idybyxczf")
                .withWriteAccessResourceId("haaxdbabphl")
                .withProvisioningState(LinkedServiceEntityStatus.PROVISIONING_ACCOUNT);
        model = BinaryData.fromObject(model).toObject(LinkedServiceInner.class);
        Assertions.assertEquals("ktsthsucocmny", model.tags().get("azt"));
        Assertions.assertEquals("idybyxczf", model.resourceId());
        Assertions.assertEquals("haaxdbabphl", model.writeAccessResourceId());
        Assertions.assertEquals(LinkedServiceEntityStatus.PROVISIONING_ACCOUNT, model.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
