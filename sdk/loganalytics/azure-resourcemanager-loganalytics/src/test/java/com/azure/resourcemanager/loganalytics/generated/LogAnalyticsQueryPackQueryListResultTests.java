// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.LogAnalyticsQueryPackQueryInner;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQueryListResult;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQueryPropertiesRelated;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LogAnalyticsQueryPackQueryListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogAnalyticsQueryPackQueryListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"id\":\"yhuybbkpod\",\"displayName\":\"po\",\"timeCreated\":\"2021-05-29T14:24:22Z\",\"timeModified\":\"2021-09-25T10:25:19Z\",\"author\":\"amiheognarxz\",\"description\":\"heotusiv\",\"body\":\"evcciqihnhun\",\"related\":{\"categories\":[\"zrnf\",\"gxg\"],\"resourceTypes\":[\"emv\",\"zfkufubljofx\",\"eofjaeqjh\",\"jbasvmsmjqulngs\"],\"solutions\":[\"bybkzgcwrwclxx\",\"rljdouskcqv\",\"ocrcjdk\",\"tnhxbn\"]},\"tags\":{\"yqduujit\":[\"sqrglssainq\",\"jwnzlljfmp\",\"eebvmgxsab\"],\"nhutjeltmrldhugj\":[\"czdzev\",\"dhkrwpdappdsbdk\",\"wrwjfeu\"]},\"properties\":\"datadatqxhocdgeabl\"},\"id\":\"huticndvkao\",\"name\":\"yiftyhxhuro\",\"type\":\"tyxolniwpwc\"},{\"properties\":{\"id\":\"kgiawxklryplwck\",\"displayName\":\"asy\",\"timeCreated\":\"2021-10-21T22:29:11Z\",\"timeModified\":\"2021-07-26T02:42:45Z\",\"author\":\"sgcbac\",\"description\":\"ejk\",\"body\":\"tynqgoul\",\"related\":{\"categories\":[\"i\",\"wyqkgfgibm\",\"dgak\"],\"resourceTypes\":[\"rxybz\"],\"solutions\":[\"dqytbciqfouflmm\"]},\"tags\":{\"spwgcuertumkdosv\":[\"modmglougpb\",\"wtmutduq\",\"ta\"]},\"properties\":\"datahbmdgbbjfdd\"},\"id\":\"bmbexppbhtqqro\",\"name\":\"p\",\"type\":\"s\"},{\"properties\":{\"id\":\"qux\",\"displayName\":\"gjyjgzjaoyfhrtxi\",\"timeCreated\":\"2021-04-23T04:18:15Z\",\"timeModified\":\"2021-08-05T02:52:01Z\",\"author\":\"jysvl\",\"description\":\"uvfqawrlyxwj\",\"body\":\"cpr\",\"related\":{\"categories\":[\"xgjvtbv\"],\"resourceTypes\":[\"szdnr\",\"jq\"],\"solutions\":[\"muouqfp\",\"wzwbnguitn\",\"uizga\",\"x\"]},\"tags\":{\"idf\":[\"uckyf\",\"hr\"],\"pvkmijcmmxdcuf\":[\"wdzuhtymwisd\",\"fthwxmnteiwa\"],\"dwzjeiach\":[\"srp\",\"mzidnsezcxtb\",\"sgfyccsnew\"],\"pyqr\":[\"osfln\",\"osfqpteehzzv\"]},\"properties\":\"dataz\"},\"id\":\"pvswjdkirso\",\"name\":\"qxhcrmn\",\"type\":\"jtckwhdso\"}],\"nextLink\":\"yip\"}")
                .toObject(LogAnalyticsQueryPackQueryListResult.class);
        Assertions.assertEquals("po", model.value().get(0).displayName());
        Assertions.assertEquals("heotusiv", model.value().get(0).description());
        Assertions.assertEquals("evcciqihnhun", model.value().get(0).body());
        Assertions.assertEquals("zrnf", model.value().get(0).related().categories().get(0));
        Assertions.assertEquals("emv", model.value().get(0).related().resourceTypes().get(0));
        Assertions.assertEquals("bybkzgcwrwclxx", model.value().get(0).related().solutions().get(0));
        Assertions.assertEquals("sqrglssainq", model.value().get(0).tags().get("yqduujit").get(0));
        Assertions.assertEquals("yip", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogAnalyticsQueryPackQueryListResult model =
            new LogAnalyticsQueryPackQueryListResult()
                .withValue(
                    Arrays
                        .asList(
                            new LogAnalyticsQueryPackQueryInner()
                                .withDisplayName("po")
                                .withDescription("heotusiv")
                                .withBody("evcciqihnhun")
                                .withRelated(
                                    new LogAnalyticsQueryPackQueryPropertiesRelated()
                                        .withCategories(Arrays.asList("zrnf", "gxg"))
                                        .withResourceTypes(
                                            Arrays.asList("emv", "zfkufubljofx", "eofjaeqjh", "jbasvmsmjqulngs"))
                                        .withSolutions(
                                            Arrays.asList("bybkzgcwrwclxx", "rljdouskcqv", "ocrcjdk", "tnhxbn")))
                                .withTags(
                                    mapOf(
                                        "yqduujit",
                                        Arrays.asList("sqrglssainq", "jwnzlljfmp", "eebvmgxsab"),
                                        "nhutjeltmrldhugj",
                                        Arrays.asList("czdzev", "dhkrwpdappdsbdk", "wrwjfeu")))
                                .withProperties("datadatqxhocdgeabl"),
                            new LogAnalyticsQueryPackQueryInner()
                                .withDisplayName("asy")
                                .withDescription("ejk")
                                .withBody("tynqgoul")
                                .withRelated(
                                    new LogAnalyticsQueryPackQueryPropertiesRelated()
                                        .withCategories(Arrays.asList("i", "wyqkgfgibm", "dgak"))
                                        .withResourceTypes(Arrays.asList("rxybz"))
                                        .withSolutions(Arrays.asList("dqytbciqfouflmm")))
                                .withTags(mapOf("spwgcuertumkdosv", Arrays.asList("modmglougpb", "wtmutduq", "ta")))
                                .withProperties("datahbmdgbbjfdd"),
                            new LogAnalyticsQueryPackQueryInner()
                                .withDisplayName("gjyjgzjaoyfhrtxi")
                                .withDescription("uvfqawrlyxwj")
                                .withBody("cpr")
                                .withRelated(
                                    new LogAnalyticsQueryPackQueryPropertiesRelated()
                                        .withCategories(Arrays.asList("xgjvtbv"))
                                        .withResourceTypes(Arrays.asList("szdnr", "jq"))
                                        .withSolutions(Arrays.asList("muouqfp", "wzwbnguitn", "uizga", "x")))
                                .withTags(
                                    mapOf(
                                        "idf",
                                        Arrays.asList("uckyf", "hr"),
                                        "pvkmijcmmxdcuf",
                                        Arrays.asList("wdzuhtymwisd", "fthwxmnteiwa"),
                                        "dwzjeiach",
                                        Arrays.asList("srp", "mzidnsezcxtb", "sgfyccsnew"),
                                        "pyqr",
                                        Arrays.asList("osfln", "osfqpteehzzv")))
                                .withProperties("dataz")))
                .withNextLink("yip");
        model = BinaryData.fromObject(model).toObject(LogAnalyticsQueryPackQueryListResult.class);
        Assertions.assertEquals("po", model.value().get(0).displayName());
        Assertions.assertEquals("heotusiv", model.value().get(0).description());
        Assertions.assertEquals("evcciqihnhun", model.value().get(0).body());
        Assertions.assertEquals("zrnf", model.value().get(0).related().categories().get(0));
        Assertions.assertEquals("emv", model.value().get(0).related().resourceTypes().get(0));
        Assertions.assertEquals("bybkzgcwrwclxx", model.value().get(0).related().solutions().get(0));
        Assertions.assertEquals("sqrglssainq", model.value().get(0).tags().get("yqduujit").get(0));
        Assertions.assertEquals("yip", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
