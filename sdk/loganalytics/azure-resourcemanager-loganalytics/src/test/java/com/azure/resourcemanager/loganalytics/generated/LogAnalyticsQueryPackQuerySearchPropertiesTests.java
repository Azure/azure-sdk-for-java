// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQuerySearchProperties;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQuerySearchPropertiesRelated;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LogAnalyticsQueryPackQuerySearchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LogAnalyticsQueryPackQuerySearchProperties model =
            BinaryData
                .fromString(
                    "{\"related\":{\"categories\":[\"c\",\"wnfnbacf\",\"onlebxetqgtzxdpn\",\"bqqwxrj\"],\"resourceTypes\":[\"llnwsubi\"],\"solutions\":[\"ampmngnz\",\"c\",\"aqw\",\"ochcbonqvpkvl\"]},\"tags\":{\"enjbdlwtgrhp\":[\"ea\",\"eipheoflokeyy\"],\"masxazjpqyegu\":[\"pj\"],\"cftadeh\":[\"hb\",\"xhejjzzvdud\",\"wdslfhotwmcy\",\"pwlbjnpg\"],\"xdn\":[\"ltyfsop\",\"usue\",\"nzwdejba\",\"orxzdmohctbqvud\"]}}")
                .toObject(LogAnalyticsQueryPackQuerySearchProperties.class);
        Assertions.assertEquals("c", model.related().categories().get(0));
        Assertions.assertEquals("llnwsubi", model.related().resourceTypes().get(0));
        Assertions.assertEquals("ampmngnz", model.related().solutions().get(0));
        Assertions.assertEquals("ea", model.tags().get("enjbdlwtgrhp").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LogAnalyticsQueryPackQuerySearchProperties model =
            new LogAnalyticsQueryPackQuerySearchProperties()
                .withRelated(
                    new LogAnalyticsQueryPackQuerySearchPropertiesRelated()
                        .withCategories(Arrays.asList("c", "wnfnbacf", "onlebxetqgtzxdpn", "bqqwxrj"))
                        .withResourceTypes(Arrays.asList("llnwsubi"))
                        .withSolutions(Arrays.asList("ampmngnz", "c", "aqw", "ochcbonqvpkvl")))
                .withTags(
                    mapOf(
                        "enjbdlwtgrhp",
                        Arrays.asList("ea", "eipheoflokeyy"),
                        "masxazjpqyegu",
                        Arrays.asList("pj"),
                        "cftadeh",
                        Arrays.asList("hb", "xhejjzzvdud", "wdslfhotwmcy", "pwlbjnpg"),
                        "xdn",
                        Arrays.asList("ltyfsop", "usue", "nzwdejba", "orxzdmohctbqvud")));
        model = BinaryData.fromObject(model).toObject(LogAnalyticsQueryPackQuerySearchProperties.class);
        Assertions.assertEquals("c", model.related().categories().get(0));
        Assertions.assertEquals("llnwsubi", model.related().resourceTypes().get(0));
        Assertions.assertEquals("ampmngnz", model.related().solutions().get(0));
        Assertions.assertEquals("ea", model.tags().get("enjbdlwtgrhp").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
