// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.SearchGetSchemaResponseInner;
import com.azure.resourcemanager.loganalytics.models.CoreSummary;
import com.azure.resourcemanager.loganalytics.models.SearchMetadata;
import com.azure.resourcemanager.loganalytics.models.SearchMetadataSchema;
import com.azure.resourcemanager.loganalytics.models.SearchSchemaValue;
import com.azure.resourcemanager.loganalytics.models.SearchSort;
import com.azure.resourcemanager.loganalytics.models.SearchSortEnum;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SearchGetSchemaResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SearchGetSchemaResponseInner model = BinaryData.fromString(
            "{\"metadata\":{\"requestId\":\"enwash\",\"resultType\":\"dtkcnqxwbpokulp\",\"total\":4256703090352932350,\"top\":8748295195867506861,\"id\":\"pqiiobyuqe\",\"coreSummaries\":[{\"status\":\"pqwcciuqgbdbutau\",\"numberOfDocuments\":4381546425309848486},{\"status\":\"kuwhh\",\"numberOfDocuments\":8532271889690426142},{\"status\":\"ojoxafnndlp\",\"numberOfDocuments\":3311442512942014453}],\"status\":\"o\",\"startTime\":\"2021-07-02T22:41:48Z\",\"lastUpdated\":\"2021-10-22T11:40:28Z\",\"eTag\":\"h\",\"sort\":[{\"name\":\"pwdreqnovvqf\",\"order\":\"asc\"},{\"name\":\"xywsuws\",\"order\":\"asc\"},{\"name\":\"dsytgadgvr\",\"order\":\"desc\"},{\"name\":\"neqn\",\"order\":\"desc\"}],\"requestTime\":5080605539580294993,\"aggregatedValueField\":\"uu\",\"aggregatedGroupingFields\":\"fqka\",\"sum\":8183486072070109381,\"max\":1237347078053939435,\"schema\":{\"name\":\"bjibwwiftohq\",\"version\":1205462118}},\"value\":[{\"name\":\"sgplsakn\",\"displayName\":\"fsynljphuop\",\"type\":\"dlqiyntorzih\",\"indexed\":false,\"stored\":false,\"facet\":false,\"ownerType\":[\"w\",\"rmslyzrpzbchckqq\"]},{\"name\":\"ioxiysuiizyn\",\"displayName\":\"dy\",\"type\":\"rwyhqmibzyhwitsm\",\"indexed\":false,\"stored\":true,\"facet\":true,\"ownerType\":[\"cdpu\",\"nzgmwznmabik\"]},{\"name\":\"orgjhxbldt\",\"displayName\":\"wrlkdmtn\",\"type\":\"ok\",\"indexed\":true,\"stored\":false,\"facet\":false,\"ownerType\":[\"yhgsy\"]},{\"name\":\"ogjltdtbnnhad\",\"displayName\":\"crkvcikhnv\",\"type\":\"mqg\",\"indexed\":false,\"stored\":false,\"facet\":false,\"ownerType\":[\"ik\",\"wggxkallat\"]}]}")
            .toObject(SearchGetSchemaResponseInner.class);
        Assertions.assertEquals("enwash", model.metadata().searchId());
        Assertions.assertEquals("dtkcnqxwbpokulp", model.metadata().resultType());
        Assertions.assertEquals(4256703090352932350L, model.metadata().total());
        Assertions.assertEquals(8748295195867506861L, model.metadata().top());
        Assertions.assertEquals("pqiiobyuqe", model.metadata().id());
        Assertions.assertEquals("pqwcciuqgbdbutau", model.metadata().coreSummaries().get(0).status());
        Assertions.assertEquals(4381546425309848486L, model.metadata().coreSummaries().get(0).numberOfDocuments());
        Assertions.assertEquals("o", model.metadata().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-02T22:41:48Z"), model.metadata().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-22T11:40:28Z"), model.metadata().lastUpdated());
        Assertions.assertEquals("h", model.metadata().etag());
        Assertions.assertEquals("pwdreqnovvqf", model.metadata().sort().get(0).name());
        Assertions.assertEquals(SearchSortEnum.ASC, model.metadata().sort().get(0).order());
        Assertions.assertEquals(5080605539580294993L, model.metadata().requestTime());
        Assertions.assertEquals("uu", model.metadata().aggregatedValueField());
        Assertions.assertEquals("fqka", model.metadata().aggregatedGroupingFields());
        Assertions.assertEquals(8183486072070109381L, model.metadata().sum());
        Assertions.assertEquals(1237347078053939435L, model.metadata().max());
        Assertions.assertEquals("bjibwwiftohq", model.metadata().schema().name());
        Assertions.assertEquals(1205462118, model.metadata().schema().version());
        Assertions.assertEquals("sgplsakn", model.value().get(0).name());
        Assertions.assertEquals("fsynljphuop", model.value().get(0).displayName());
        Assertions.assertEquals("dlqiyntorzih", model.value().get(0).type());
        Assertions.assertEquals(false, model.value().get(0).indexed());
        Assertions.assertEquals(false, model.value().get(0).stored());
        Assertions.assertEquals(false, model.value().get(0).facet());
        Assertions.assertEquals("w", model.value().get(0).ownerType().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SearchGetSchemaResponseInner model = new SearchGetSchemaResponseInner()
            .withMetadata(new SearchMetadata().withSearchId("enwash")
                .withResultType("dtkcnqxwbpokulp")
                .withTotal(4256703090352932350L)
                .withTop(8748295195867506861L)
                .withId("pqiiobyuqe")
                .withCoreSummaries(Arrays.asList(
                    new CoreSummary().withStatus("pqwcciuqgbdbutau").withNumberOfDocuments(4381546425309848486L),
                    new CoreSummary().withStatus("kuwhh").withNumberOfDocuments(8532271889690426142L),
                    new CoreSummary().withStatus("ojoxafnndlp").withNumberOfDocuments(3311442512942014453L)))
                .withStatus("o")
                .withStartTime(OffsetDateTime.parse("2021-07-02T22:41:48Z"))
                .withLastUpdated(OffsetDateTime.parse("2021-10-22T11:40:28Z"))
                .withEtag("h")
                .withSort(Arrays.asList(new SearchSort().withName("pwdreqnovvqf").withOrder(SearchSortEnum.ASC),
                    new SearchSort().withName("xywsuws").withOrder(SearchSortEnum.ASC),
                    new SearchSort().withName("dsytgadgvr").withOrder(SearchSortEnum.DESC),
                    new SearchSort().withName("neqn").withOrder(SearchSortEnum.DESC)))
                .withRequestTime(5080605539580294993L)
                .withAggregatedValueField("uu")
                .withAggregatedGroupingFields("fqka")
                .withSum(8183486072070109381L)
                .withMax(1237347078053939435L)
                .withSchema(new SearchMetadataSchema().withName("bjibwwiftohq").withVersion(1205462118)))
            .withValue(Arrays.asList(
                new SearchSchemaValue().withName("sgplsakn")
                    .withDisplayName("fsynljphuop")
                    .withType("dlqiyntorzih")
                    .withIndexed(false)
                    .withStored(false)
                    .withFacet(false)
                    .withOwnerType(Arrays.asList("w", "rmslyzrpzbchckqq")),
                new SearchSchemaValue().withName("ioxiysuiizyn")
                    .withDisplayName("dy")
                    .withType("rwyhqmibzyhwitsm")
                    .withIndexed(false)
                    .withStored(true)
                    .withFacet(true)
                    .withOwnerType(Arrays.asList("cdpu", "nzgmwznmabik")),
                new SearchSchemaValue().withName("orgjhxbldt")
                    .withDisplayName("wrlkdmtn")
                    .withType("ok")
                    .withIndexed(true)
                    .withStored(false)
                    .withFacet(false)
                    .withOwnerType(Arrays.asList("yhgsy")),
                new SearchSchemaValue().withName("ogjltdtbnnhad")
                    .withDisplayName("crkvcikhnv")
                    .withType("mqg")
                    .withIndexed(false)
                    .withStored(false)
                    .withFacet(false)
                    .withOwnerType(Arrays.asList("ik", "wggxkallat"))));
        model = BinaryData.fromObject(model).toObject(SearchGetSchemaResponseInner.class);
        Assertions.assertEquals("enwash", model.metadata().searchId());
        Assertions.assertEquals("dtkcnqxwbpokulp", model.metadata().resultType());
        Assertions.assertEquals(4256703090352932350L, model.metadata().total());
        Assertions.assertEquals(8748295195867506861L, model.metadata().top());
        Assertions.assertEquals("pqiiobyuqe", model.metadata().id());
        Assertions.assertEquals("pqwcciuqgbdbutau", model.metadata().coreSummaries().get(0).status());
        Assertions.assertEquals(4381546425309848486L, model.metadata().coreSummaries().get(0).numberOfDocuments());
        Assertions.assertEquals("o", model.metadata().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-02T22:41:48Z"), model.metadata().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-22T11:40:28Z"), model.metadata().lastUpdated());
        Assertions.assertEquals("h", model.metadata().etag());
        Assertions.assertEquals("pwdreqnovvqf", model.metadata().sort().get(0).name());
        Assertions.assertEquals(SearchSortEnum.ASC, model.metadata().sort().get(0).order());
        Assertions.assertEquals(5080605539580294993L, model.metadata().requestTime());
        Assertions.assertEquals("uu", model.metadata().aggregatedValueField());
        Assertions.assertEquals("fqka", model.metadata().aggregatedGroupingFields());
        Assertions.assertEquals(8183486072070109381L, model.metadata().sum());
        Assertions.assertEquals(1237347078053939435L, model.metadata().max());
        Assertions.assertEquals("bjibwwiftohq", model.metadata().schema().name());
        Assertions.assertEquals(1205462118, model.metadata().schema().version());
        Assertions.assertEquals("sgplsakn", model.value().get(0).name());
        Assertions.assertEquals("fsynljphuop", model.value().get(0).displayName());
        Assertions.assertEquals("dlqiyntorzih", model.value().get(0).type());
        Assertions.assertEquals(false, model.value().get(0).indexed());
        Assertions.assertEquals(false, model.value().get(0).stored());
        Assertions.assertEquals(false, model.value().get(0).facet());
        Assertions.assertEquals("w", model.value().get(0).ownerType().get(0));
    }
}
