// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.models.CapacityReservationLevel;
import com.azure.resourcemanager.loganalytics.models.Identity;
import com.azure.resourcemanager.loganalytics.models.IdentityType;
import com.azure.resourcemanager.loganalytics.models.PublicNetworkAccessType;
import com.azure.resourcemanager.loganalytics.models.UserIdentityProperties;
import com.azure.resourcemanager.loganalytics.models.WorkspaceCapping;
import com.azure.resourcemanager.loganalytics.models.WorkspaceFeatures;
import com.azure.resourcemanager.loganalytics.models.WorkspacePatch;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSku;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSkuNameEnum;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspacePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspacePatch model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Succeeded\",\"customerId\":\"totxhojujb\",\"sku\":{\"name\":\"LACluster\",\"capacityReservationLevel\":100,\"lastSkuUpdate\":\"uvhixbjxyfwn\"},\"retentionInDays\":156258046,\"workspaceCapping\":{\"dailyQuotaGb\":4.7709209282274845,\"quotaNextResetTime\":\"ttpkiwkkbnujrywv\",\"dataIngestionStatus\":\"ForceOff\"},\"createdDate\":\"fpncurdo\",\"modifiedDate\":\"iithtywu\",\"publicNetworkAccessForIngestion\":\"Enabled\",\"publicNetworkAccessForQuery\":\"Disabled\",\"forceCmkForQuery\":false,\"privateLinkScopedResources\":[{\"resourceId\":\"fdntwjchrdgoih\",\"scopeId\":\"mwctondzjluudfd\"}],\"features\":{\"enableDataExport\":true,\"immediatePurgeDataOn30Days\":true,\"enableLogAccessUsingOnlyResourcePermissions\":true,\"clusterResourceId\":\"tov\",\"disableLocalAuth\":false,\"\":{\"pttwqmsn\":\"datainqfiufxqknpirgn\",\"ijnkrxfrdd\":\"dataffcdmqnrojl\"}},\"defaultDataCollectionRuleResourceId\":\"ratiz\"},\"identity\":{\"principalId\":\"nasx\",\"tenantId\":\"tozqyzhftwesgo\",\"type\":\"application\",\"userAssignedIdentities\":{\"h\":{\"principalId\":\"nnxk\",\"clientId\":\"gnyhmossxkkg\"},\"pdso\":{\"principalId\":\"gh\",\"clientId\":\"bdhqxvcxgf\"},\"wnopqgikyzirtx\":{\"principalId\":\"shrnsvbuswdvz\",\"clientId\":\"bycnunvjsrtkf\"},\"qukrydxt\":{\"principalId\":\"uxzejntpsew\",\"clientId\":\"oi\"}}},\"tags\":{\"tbghhavgrvkf\":\"eoxorggufhyao\",\"mv\":\"ovjzhpjbibgjmfx\",\"zzxscyhwzdgiruj\":\"cluyovwxnbkf\",\"ujviylwdshfs\":\"zbomvzzbtdcqvpni\"},\"etag\":\"rbgyefry\",\"id\":\"sgaojfmwncot\",\"name\":\"rfh\",\"type\":\"rctym\"}")
                .toObject(WorkspacePatch.class);
        Assertions.assertEquals(IdentityType.APPLICATION, model.identity().type());
        Assertions.assertEquals("eoxorggufhyao", model.tags().get("tbghhavgrvkf"));
        Assertions.assertEquals(WorkspaceSkuNameEnum.LACLUSTER, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.ONE_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(156258046, model.retentionInDays());
        Assertions.assertEquals(4.7709209282274845D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(false, model.forceCmkForQuery());
        Assertions.assertEquals(true, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("tov", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("ratiz", model.defaultDataCollectionRuleResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspacePatch model =
            new WorkspacePatch()
                .withIdentity(
                    new Identity()
                        .withType(IdentityType.APPLICATION)
                        .withUserAssignedIdentities(
                            mapOf(
                                "h",
                                new UserIdentityProperties(),
                                "pdso",
                                new UserIdentityProperties(),
                                "wnopqgikyzirtx",
                                new UserIdentityProperties(),
                                "qukrydxt",
                                new UserIdentityProperties())))
                .withTags(
                    mapOf(
                        "tbghhavgrvkf",
                        "eoxorggufhyao",
                        "mv",
                        "ovjzhpjbibgjmfx",
                        "zzxscyhwzdgiruj",
                        "cluyovwxnbkf",
                        "ujviylwdshfs",
                        "zbomvzzbtdcqvpni"))
                .withSku(
                    new WorkspaceSku()
                        .withName(WorkspaceSkuNameEnum.LACLUSTER)
                        .withCapacityReservationLevel(CapacityReservationLevel.ONE_ZERO_ZERO))
                .withRetentionInDays(156258046)
                .withWorkspaceCapping(new WorkspaceCapping().withDailyQuotaGb(4.7709209282274845D))
                .withPublicNetworkAccessForIngestion(PublicNetworkAccessType.ENABLED)
                .withPublicNetworkAccessForQuery(PublicNetworkAccessType.DISABLED)
                .withForceCmkForQuery(false)
                .withFeatures(
                    new WorkspaceFeatures()
                        .withEnableDataExport(true)
                        .withImmediatePurgeDataOn30Days(true)
                        .withEnableLogAccessUsingOnlyResourcePermissions(true)
                        .withClusterResourceId("tov")
                        .withDisableLocalAuth(false)
                        .withAdditionalProperties(mapOf()))
                .withDefaultDataCollectionRuleResourceId("ratiz");
        model = BinaryData.fromObject(model).toObject(WorkspacePatch.class);
        Assertions.assertEquals(IdentityType.APPLICATION, model.identity().type());
        Assertions.assertEquals("eoxorggufhyao", model.tags().get("tbghhavgrvkf"));
        Assertions.assertEquals(WorkspaceSkuNameEnum.LACLUSTER, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.ONE_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(156258046, model.retentionInDays());
        Assertions.assertEquals(4.7709209282274845D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(false, model.forceCmkForQuery());
        Assertions.assertEquals(true, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("tov", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("ratiz", model.defaultDataCollectionRuleResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
