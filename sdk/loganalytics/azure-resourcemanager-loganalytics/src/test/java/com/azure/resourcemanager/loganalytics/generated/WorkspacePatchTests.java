// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.models.CapacityReservationLevel;
import com.azure.resourcemanager.loganalytics.models.Identity;
import com.azure.resourcemanager.loganalytics.models.IdentityType;
import com.azure.resourcemanager.loganalytics.models.PublicNetworkAccessType;
import com.azure.resourcemanager.loganalytics.models.UserIdentityProperties;
import com.azure.resourcemanager.loganalytics.models.WorkspaceCapping;
import com.azure.resourcemanager.loganalytics.models.WorkspaceFeatures;
import com.azure.resourcemanager.loganalytics.models.WorkspacePatch;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSku;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSkuNameEnum;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspacePatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspacePatch model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"customerId\":\"gg\",\"sku\":{\"name\":\"Free\",\"capacityReservationLevel\":1000,\"lastSkuUpdate\":\"ovvtgseinqfiu\"},\"retentionInDays\":846707727,\"workspaceCapping\":{\"dailyQuotaGb\":67.63985202806066,\"quotaNextResetTime\":\"gnepttwqmsni\",\"dataIngestionStatus\":\"OverQuota\"},\"createdDate\":\"mqnrojlpijnkr\",\"modifiedDate\":\"rddh\",\"publicNetworkAccessForIngestion\":\"Enabled\",\"publicNetworkAccessForQuery\":\"Disabled\",\"forceCmkForQuery\":true,\"privateLinkScopedResources\":[{\"resourceId\":\"asxifto\",\"scopeId\":\"yzhftwesgogczh\"},{\"resourceId\":\"nxkrlgnyhmossxkk\",\"scopeId\":\"h\"},{\"resourceId\":\"gh\",\"scopeId\":\"bdhqxvcxgf\"}],\"features\":{\"enableDataExport\":false,\"immediatePurgeDataOn30Days\":true,\"enableLogAccessUsingOnlyResourcePermissions\":true,\"clusterResourceId\":\"rnsvbuswd\",\"disableLocalAuth\":false,\"\":{\"awnopqgikyzirtxd\":\"dataycnunvjsrtk\",\"ioilqukrydxtq\":\"datauxzejntpsew\",\"ghhavgrvkffo\":\"dataieoxorggufhyaomt\",\"mv\":\"datajzhpjbibgjmfx\"}},\"defaultDataCollectionRuleResourceId\":\"luyovwxnbkfezzx\"},\"identity\":{\"principalId\":\"hwzdgirujbz\",\"tenantId\":\"mvzzbtdcqvp\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"cotmr\":{\"principalId\":\"viylwdshfssnrbgy\",\"clientId\":\"rymsgaojfmw\"},\"cpqjlihhyu\":{\"principalId\":\"irctymoxoftpipiw\",\"clientId\":\"zuhx\"},\"rsre\":{\"principalId\":\"skasdvlmfwdgzxu\",\"clientId\":\"cvpa\"}}},\"tags\":{\"ifqjz\":\"xurisjnhnyt\",\"lw\":\"xmrhu\",\"woqhihe\":\"cesutrgjupauut\",\"zpnfqntcypsxj\":\"qg\"},\"etag\":\"oimwkslirc\",\"id\":\"zjxvydfcea\",\"name\":\"vlhv\",\"type\":\"gdyftumrtwna\"}")
            .toObject(WorkspacePatch.class);
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xurisjnhnyt", model.tags().get("ifqjz"));
        Assertions.assertEquals(WorkspaceSkuNameEnum.FREE, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.ONE_ZERO_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(846707727, model.retentionInDays());
        Assertions.assertEquals(67.63985202806066D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(true, model.forceCmkForQuery());
        Assertions.assertEquals(false, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("rnsvbuswd", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("luyovwxnbkfezzx", model.defaultDataCollectionRuleResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspacePatch model = new WorkspacePatch()
            .withIdentity(new Identity().withType(IdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("cotmr", new UserIdentityProperties(), "cpqjlihhyu",
                    new UserIdentityProperties(), "rsre", new UserIdentityProperties())))
            .withTags(mapOf("ifqjz", "xurisjnhnyt", "lw", "xmrhu", "woqhihe", "cesutrgjupauut", "zpnfqntcypsxj", "qg"))
            .withSku(new WorkspaceSku().withName(WorkspaceSkuNameEnum.FREE)
                .withCapacityReservationLevel(CapacityReservationLevel.ONE_ZERO_ZERO_ZERO))
            .withRetentionInDays(846707727)
            .withWorkspaceCapping(new WorkspaceCapping().withDailyQuotaGb(67.63985202806066D))
            .withPublicNetworkAccessForIngestion(PublicNetworkAccessType.ENABLED)
            .withPublicNetworkAccessForQuery(PublicNetworkAccessType.DISABLED)
            .withForceCmkForQuery(true)
            .withFeatures(new WorkspaceFeatures().withEnableDataExport(false)
                .withImmediatePurgeDataOn30Days(true)
                .withEnableLogAccessUsingOnlyResourcePermissions(true)
                .withClusterResourceId("rnsvbuswd")
                .withDisableLocalAuth(false)
                .withAdditionalProperties(mapOf()))
            .withDefaultDataCollectionRuleResourceId("luyovwxnbkfezzx");
        model = BinaryData.fromObject(model).toObject(WorkspacePatch.class);
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xurisjnhnyt", model.tags().get("ifqjz"));
        Assertions.assertEquals(WorkspaceSkuNameEnum.FREE, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.ONE_ZERO_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(846707727, model.retentionInDays());
        Assertions.assertEquals(67.63985202806066D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(true, model.forceCmkForQuery());
        Assertions.assertEquals(false, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("rnsvbuswd", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("luyovwxnbkfezzx", model.defaultDataCollectionRuleResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
