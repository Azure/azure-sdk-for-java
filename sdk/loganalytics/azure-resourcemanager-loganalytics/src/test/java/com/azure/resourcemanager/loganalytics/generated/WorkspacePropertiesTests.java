// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.WorkspaceProperties;
import com.azure.resourcemanager.loganalytics.models.CapacityReservationLevel;
import com.azure.resourcemanager.loganalytics.models.PublicNetworkAccessType;
import com.azure.resourcemanager.loganalytics.models.WorkspaceCapping;
import com.azure.resourcemanager.loganalytics.models.WorkspaceFeatures;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSku;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSkuNameEnum;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspacePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceProperties model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Creating\",\"customerId\":\"gvjayvblmh\",\"sku\":{\"name\":\"CapacityReservation\",\"capacityReservationLevel\":5000,\"lastSkuUpdate\":\"xvvy\"},\"retentionInDays\":103927992,\"workspaceCapping\":{\"dailyQuotaGb\":49.40524801938477,\"quotaNextResetTime\":\"qufegxuvwzfbn\",\"dataIngestionStatus\":\"ForceOn\"},\"createdDate\":\"tlpdn\",\"modifiedDate\":\"tvgbmhrixkwmy\",\"publicNetworkAccessForIngestion\":\"Disabled\",\"publicNetworkAccessForQuery\":\"Enabled\",\"forceCmkForQuery\":false,\"privateLinkScopedResources\":[{\"resourceId\":\"pna\",\"scopeId\":\"exccbdreaxhcexd\"},{\"resourceId\":\"vqahqkghtpwi\",\"scopeId\":\"hyjsvfycx\"},{\"resourceId\":\"fvoow\",\"scopeId\":\"vmtgjqppy\"},{\"resourceId\":\"tronzmyhgfi\",\"scopeId\":\"sxkm\"}],\"features\":{\"enableDataExport\":false,\"immediatePurgeDataOn30Days\":true,\"enableLogAccessUsingOnlyResourcePermissions\":true,\"clusterResourceId\":\"eafxtsgumhjglikk\",\"disableLocalAuth\":false,\"\":{\"tgp\":\"datalbqpvuzlmvfelf\"}},\"defaultDataCollectionRuleResourceId\":\"rpw\"}")
                .toObject(WorkspaceProperties.class);
        Assertions.assertEquals(WorkspaceSkuNameEnum.CAPACITY_RESERVATION, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.FIVE_ZERO_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(103927992, model.retentionInDays());
        Assertions.assertEquals(49.40524801938477D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(false, model.forceCmkForQuery());
        Assertions.assertEquals(false, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("eafxtsgumhjglikk", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("rpw", model.defaultDataCollectionRuleResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceProperties model =
            new WorkspaceProperties()
                .withSku(
                    new WorkspaceSku()
                        .withName(WorkspaceSkuNameEnum.CAPACITY_RESERVATION)
                        .withCapacityReservationLevel(CapacityReservationLevel.FIVE_ZERO_ZERO_ZERO))
                .withRetentionInDays(103927992)
                .withWorkspaceCapping(new WorkspaceCapping().withDailyQuotaGb(49.40524801938477D))
                .withPublicNetworkAccessForIngestion(PublicNetworkAccessType.DISABLED)
                .withPublicNetworkAccessForQuery(PublicNetworkAccessType.ENABLED)
                .withForceCmkForQuery(false)
                .withFeatures(
                    new WorkspaceFeatures()
                        .withEnableDataExport(false)
                        .withImmediatePurgeDataOn30Days(true)
                        .withEnableLogAccessUsingOnlyResourcePermissions(true)
                        .withClusterResourceId("eafxtsgumhjglikk")
                        .withDisableLocalAuth(false)
                        .withAdditionalProperties(mapOf()))
                .withDefaultDataCollectionRuleResourceId("rpw");
        model = BinaryData.fromObject(model).toObject(WorkspaceProperties.class);
        Assertions.assertEquals(WorkspaceSkuNameEnum.CAPACITY_RESERVATION, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.FIVE_ZERO_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(103927992, model.retentionInDays());
        Assertions.assertEquals(49.40524801938477D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(false, model.forceCmkForQuery());
        Assertions.assertEquals(false, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("eafxtsgumhjglikk", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("rpw", model.defaultDataCollectionRuleResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
