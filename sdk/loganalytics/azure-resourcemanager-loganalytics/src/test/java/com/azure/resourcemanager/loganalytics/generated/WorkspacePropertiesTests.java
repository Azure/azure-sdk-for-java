// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.WorkspaceProperties;
import com.azure.resourcemanager.loganalytics.models.CapacityReservationLevel;
import com.azure.resourcemanager.loganalytics.models.PublicNetworkAccessType;
import com.azure.resourcemanager.loganalytics.models.WorkspaceCapping;
import com.azure.resourcemanager.loganalytics.models.WorkspaceFeatures;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSku;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSkuNameEnum;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspacePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"ProvisioningAccount\",\"customerId\":\"ijnhyjsvfycxzbf\",\"sku\":{\"name\":\"LACluster\",\"capacityReservationLevel\":2000,\"lastSkuUpdate\":\"vmtgjqppy\"},\"retentionInDays\":768184156,\"workspaceCapping\":{\"dailyQuotaGb\":15.525265144439715,\"quotaNextResetTime\":\"yhgfipnsx\",\"dataIngestionStatus\":\"ForceOff\"},\"createdDate\":\"a\",\"modifiedDate\":\"rrjreafxtsgu\",\"publicNetworkAccessForIngestion\":\"Disabled\",\"publicNetworkAccessForQuery\":\"Enabled\",\"forceCmkForQuery\":false,\"privateLinkScopedResources\":[{\"resourceId\":\"slol\",\"scopeId\":\"pvuzlmv\"},{\"resourceId\":\"lfktgplcrpwjxe\",\"scopeId\":\"oi\"},{\"resourceId\":\"rnjwmw\",\"scopeId\":\"nbsazejjoqkag\"}],\"features\":{\"enableDataExport\":true,\"immediatePurgeDataOn30Days\":true,\"enableLogAccessUsingOnlyResourcePermissions\":false,\"clusterResourceId\":\"zxnfaaz\",\"disableLocalAuth\":false,\"\":{\"ou\":\"datakdmkqjjlwuenvrkp\"}},\"defaultDataCollectionRuleResourceId\":\"bre\"}")
            .toObject(WorkspaceProperties.class);
        Assertions.assertEquals(WorkspaceSkuNameEnum.LACLUSTER, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.TWO_ZERO_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(768184156, model.retentionInDays());
        Assertions.assertEquals(15.525265144439715D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(false, model.forceCmkForQuery());
        Assertions.assertEquals(true, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(false, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("zxnfaaz", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("bre", model.defaultDataCollectionRuleResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceProperties model = new WorkspaceProperties()
            .withSku(new WorkspaceSku().withName(WorkspaceSkuNameEnum.LACLUSTER)
                .withCapacityReservationLevel(CapacityReservationLevel.TWO_ZERO_ZERO_ZERO))
            .withRetentionInDays(768184156)
            .withWorkspaceCapping(new WorkspaceCapping().withDailyQuotaGb(15.525265144439715D))
            .withPublicNetworkAccessForIngestion(PublicNetworkAccessType.DISABLED)
            .withPublicNetworkAccessForQuery(PublicNetworkAccessType.ENABLED)
            .withForceCmkForQuery(false)
            .withFeatures(new WorkspaceFeatures().withEnableDataExport(true)
                .withImmediatePurgeDataOn30Days(true)
                .withEnableLogAccessUsingOnlyResourcePermissions(false)
                .withClusterResourceId("zxnfaaz")
                .withDisableLocalAuth(false)
                .withAdditionalProperties(mapOf()))
            .withDefaultDataCollectionRuleResourceId("bre");
        model = BinaryData.fromObject(model).toObject(WorkspaceProperties.class);
        Assertions.assertEquals(WorkspaceSkuNameEnum.LACLUSTER, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.TWO_ZERO_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(768184156, model.retentionInDays());
        Assertions.assertEquals(15.525265144439715D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(false, model.forceCmkForQuery());
        Assertions.assertEquals(true, model.features().enableDataExport());
        Assertions.assertEquals(true, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(false, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("zxnfaaz", model.features().clusterResourceId());
        Assertions.assertEquals(false, model.features().disableLocalAuth());
        Assertions.assertEquals("bre", model.defaultDataCollectionRuleResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
