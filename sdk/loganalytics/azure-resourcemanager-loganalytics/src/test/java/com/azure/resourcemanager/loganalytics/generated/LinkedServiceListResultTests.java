// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.LinkedServiceInner;
import com.azure.resourcemanager.loganalytics.models.LinkedServiceEntityStatus;
import com.azure.resourcemanager.loganalytics.models.LinkedServiceListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkedServiceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkedServiceListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"resourceId\":\"aepdkzjanc\",\"writeAccessResourceId\":\"rhdwbavxbniw\",\"provisioningState\":\"Deleting\"},\"tags\":{\"ytxhp\":\"tsdbpgn\"},\"id\":\"xbzpfzab\",\"name\":\"lcuhxwtctyqiklb\",\"type\":\"ovplw\"},{\"properties\":{\"resourceId\":\"hvgyuguosvmk\",\"writeAccessResourceId\":\"sxqu\",\"provisioningState\":\"Succeeded\"},\"tags\":{\"lpvlopw\":\"gmgsxnkjzkde\"},\"id\":\"yighxpk\",\"name\":\"wzbaiue\",\"type\":\"baumnyqupedeoj\"}]}")
                .toObject(LinkedServiceListResult.class);
        Assertions.assertEquals("tsdbpgn", model.value().get(0).tags().get("ytxhp"));
        Assertions.assertEquals("aepdkzjanc", model.value().get(0).resourceId());
        Assertions.assertEquals("rhdwbavxbniw", model.value().get(0).writeAccessResourceId());
        Assertions.assertEquals(LinkedServiceEntityStatus.DELETING, model.value().get(0).provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkedServiceListResult model =
            new LinkedServiceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new LinkedServiceInner()
                                .withTags(mapOf("ytxhp", "tsdbpgn"))
                                .withResourceId("aepdkzjanc")
                                .withWriteAccessResourceId("rhdwbavxbniw")
                                .withProvisioningState(LinkedServiceEntityStatus.DELETING),
                            new LinkedServiceInner()
                                .withTags(mapOf("lpvlopw", "gmgsxnkjzkde"))
                                .withResourceId("hvgyuguosvmk")
                                .withWriteAccessResourceId("sxqu")
                                .withProvisioningState(LinkedServiceEntityStatus.SUCCEEDED)));
        model = BinaryData.fromObject(model).toObject(LinkedServiceListResult.class);
        Assertions.assertEquals("tsdbpgn", model.value().get(0).tags().get("ytxhp"));
        Assertions.assertEquals("aepdkzjanc", model.value().get(0).resourceId());
        Assertions.assertEquals("rhdwbavxbniw", model.value().get(0).writeAccessResourceId());
        Assertions.assertEquals(LinkedServiceEntityStatus.DELETING, model.value().get(0).provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
