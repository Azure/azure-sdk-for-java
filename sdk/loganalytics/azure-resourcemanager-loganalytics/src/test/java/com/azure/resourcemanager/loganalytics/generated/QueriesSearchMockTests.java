// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.loganalytics.LogAnalyticsManager;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQuery;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQuerySearchProperties;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPackQuerySearchPropertiesRelated;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class QueriesSearchMockTests {
    @Test
    public void testSearch() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"id\":\"drizetpwbr\",\"displayName\":\"lllibph\",\"timeCreated\":\"2021-03-09T02:07:34Z\",\"timeModified\":\"2021-08-01T19:55:34Z\",\"author\":\"aka\",\"description\":\"nkjpdnjzha\",\"body\":\"oylhjlmuoyxprimr\",\"related\":{\"categories\":[\"eecjmeis\",\"stvasylwxdzaumw\",\"oohgu\"],\"resourceTypes\":[\"zboyjathwt\",\"olbaemwmdx\",\"ebwjscjpahlxvea\"],\"solutions\":[\"xnmwmqtibxyijddt\",\"qcttadijaeukmrsi\"]},\"tags\":{\"qwyxebeybpm\":[\"ndzaapmudq\",\"eqw\",\"gp\",\"bu\"]},\"properties\":\"datanrtffyaqi\"},\"id\":\"hheioqaqhvseuf\",\"name\":\"yrxpdlcgqls\",\"type\":\"mjqfrddgamquhio\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        LogAnalyticsManager manager =
            LogAnalyticsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LogAnalyticsQueryPackQuery> response =
            manager
                .queries()
                .search(
                    "hhxud",
                    "xvodhtnsir",
                    new LogAnalyticsQueryPackQuerySearchProperties()
                        .withRelated(
                            new LogAnalyticsQueryPackQuerySearchPropertiesRelated()
                                .withCategories(Arrays.asList("m"))
                                .withResourceTypes(Arrays.asList("ckdlpag", "rcxfailcfxwmdb"))
                                .withSolutions(Arrays.asList("fgsftufqob", "jln", "cgcckknhxkizvyt", "rzvul")))
                        .withTags(
                            mapOf(
                                "rwhryvycytd",
                                Arrays.asList("eranokqgukkjqnv", "roylaxxu", "cdisd", "sfjbjsvg"),
                                "gtgkylkdghr",
                                Arrays.asList("xgccknfnw", "btmvpdvjdhttza", "fedxihchrphkm", "rjdqnsdfzp"),
                                "pifhpfeoajvgcxtx",
                                Arrays.asList("uutlwxezwzhok", "bwnhhtql", "ehgpp"),
                                "ucb",
                                Arrays.asList("sheafid", "tugsresmkssjh", "iftxfkf", "egprhptil"))),
                    3657497619392778161L,
                    false,
                    "dqohmc",
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lllibph", response.iterator().next().displayName());
        Assertions.assertEquals("nkjpdnjzha", response.iterator().next().description());
        Assertions.assertEquals("oylhjlmuoyxprimr", response.iterator().next().body());
        Assertions.assertEquals("eecjmeis", response.iterator().next().related().categories().get(0));
        Assertions.assertEquals("zboyjathwt", response.iterator().next().related().resourceTypes().get(0));
        Assertions.assertEquals("xnmwmqtibxyijddt", response.iterator().next().related().solutions().get(0));
        Assertions.assertEquals("ndzaapmudq", response.iterator().next().tags().get("qwyxebeybpm").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
