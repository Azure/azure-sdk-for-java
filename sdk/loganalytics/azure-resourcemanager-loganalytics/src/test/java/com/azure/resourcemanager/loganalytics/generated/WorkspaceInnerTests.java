// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.WorkspaceInner;
import com.azure.resourcemanager.loganalytics.models.CapacityReservationLevel;
import com.azure.resourcemanager.loganalytics.models.Identity;
import com.azure.resourcemanager.loganalytics.models.IdentityType;
import com.azure.resourcemanager.loganalytics.models.PublicNetworkAccessType;
import com.azure.resourcemanager.loganalytics.models.UserIdentityProperties;
import com.azure.resourcemanager.loganalytics.models.WorkspaceCapping;
import com.azure.resourcemanager.loganalytics.models.WorkspaceFeatures;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSku;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSkuNameEnum;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Updating\",\"customerId\":\"ldvriiiojnalghfk\",\"sku\":{\"name\":\"Standalone\",\"capacityReservationLevel\":100,\"lastSkuUpdate\":\"sowueluqhhahhx\"},\"retentionInDays\":1049422590,\"workspaceCapping\":{\"dailyQuotaGb\":99.72101812973094,\"quotaNextResetTime\":\"jgwwspughftq\",\"dataIngestionStatus\":\"ApproachingQuota\"},\"createdDate\":\"xujxuknd\",\"modifiedDate\":\"igrjguufzdm\",\"publicNetworkAccessForIngestion\":\"Disabled\",\"publicNetworkAccessForQuery\":\"Enabled\",\"forceCmkForQuery\":true,\"privateLinkScopedResources\":[{\"resourceId\":\"otzi\",\"scopeId\":\"amvpphoszqzudph\"},{\"resourceId\":\"mvdk\",\"scopeId\":\"ynwcvtbv\"},{\"resourceId\":\"yhmtnvyqiat\",\"scopeId\":\"wp\"},{\"resourceId\":\"p\",\"scopeId\":\"cjaesgvvs\"}],\"features\":{\"enableDataExport\":false,\"immediatePurgeDataOn30Days\":false,\"enableLogAccessUsingOnlyResourcePermissions\":false,\"clusterResourceId\":\"hwyg\",\"disableLocalAuth\":true,\"\":{\"emdwzrmuhapfc\":\"datakfxu\"}},\"defaultDataCollectionRuleResourceId\":\"psqxq\"},\"identity\":{\"principalId\":\"vuoy\",\"tenantId\":\"ccelve\",\"type\":\"None\",\"userAssignedIdentities\":{\"opgxedkowepb\":{\"principalId\":\"lmfeokerq\",\"clientId\":\"yhko\"},\"ftnkhtj\":{\"principalId\":\"cr\",\"clientId\":\"bwccsnjvcdwxlpqe\"}}},\"systemData\":{\"createdBy\":\"ngwfqatm\",\"createdByType\":\"Application\",\"createdAt\":\"2021-01-16T13:50:23Z\",\"lastModifiedBy\":\"vypgikdg\",\"lastModifiedByType\":\"Key\",\"lastModifiedAt\":\"2021-09-09T14:02:20Z\"},\"etag\":\"irryuzhlh\",\"location\":\"joqrvqqaatj\",\"tags\":{\"fiibfggjioolvr\":\"vgoup\"},\"id\":\"x\",\"name\":\"v\",\"type\":\"kkgll\"}")
                .toObject(WorkspaceInner.class);
        Assertions.assertEquals("joqrvqqaatj", model.location());
        Assertions.assertEquals("vgoup", model.tags().get("fiibfggjioolvr"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("irryuzhlh", model.etag());
        Assertions.assertEquals(WorkspaceSkuNameEnum.STANDALONE, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.ONE_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(1049422590, model.retentionInDays());
        Assertions.assertEquals(99.72101812973094D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(true, model.forceCmkForQuery());
        Assertions.assertEquals(false, model.features().enableDataExport());
        Assertions.assertEquals(false, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(false, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("hwyg", model.features().clusterResourceId());
        Assertions.assertEquals(true, model.features().disableLocalAuth());
        Assertions.assertEquals("psqxq", model.defaultDataCollectionRuleResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceInner model =
            new WorkspaceInner()
                .withLocation("joqrvqqaatj")
                .withTags(mapOf("fiibfggjioolvr", "vgoup"))
                .withIdentity(
                    new Identity()
                        .withType(IdentityType.NONE)
                        .withUserAssignedIdentities(
                            mapOf(
                                "opgxedkowepb", new UserIdentityProperties(), "ftnkhtj", new UserIdentityProperties())))
                .withEtag("irryuzhlh")
                .withSku(
                    new WorkspaceSku()
                        .withName(WorkspaceSkuNameEnum.STANDALONE)
                        .withCapacityReservationLevel(CapacityReservationLevel.ONE_ZERO_ZERO))
                .withRetentionInDays(1049422590)
                .withWorkspaceCapping(new WorkspaceCapping().withDailyQuotaGb(99.72101812973094D))
                .withPublicNetworkAccessForIngestion(PublicNetworkAccessType.DISABLED)
                .withPublicNetworkAccessForQuery(PublicNetworkAccessType.ENABLED)
                .withForceCmkForQuery(true)
                .withFeatures(
                    new WorkspaceFeatures()
                        .withEnableDataExport(false)
                        .withImmediatePurgeDataOn30Days(false)
                        .withEnableLogAccessUsingOnlyResourcePermissions(false)
                        .withClusterResourceId("hwyg")
                        .withDisableLocalAuth(true)
                        .withAdditionalProperties(mapOf()))
                .withDefaultDataCollectionRuleResourceId("psqxq");
        model = BinaryData.fromObject(model).toObject(WorkspaceInner.class);
        Assertions.assertEquals("joqrvqqaatj", model.location());
        Assertions.assertEquals("vgoup", model.tags().get("fiibfggjioolvr"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("irryuzhlh", model.etag());
        Assertions.assertEquals(WorkspaceSkuNameEnum.STANDALONE, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.ONE_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(1049422590, model.retentionInDays());
        Assertions.assertEquals(99.72101812973094D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(true, model.forceCmkForQuery());
        Assertions.assertEquals(false, model.features().enableDataExport());
        Assertions.assertEquals(false, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(false, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("hwyg", model.features().clusterResourceId());
        Assertions.assertEquals(true, model.features().disableLocalAuth());
        Assertions.assertEquals("psqxq", model.defaultDataCollectionRuleResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
