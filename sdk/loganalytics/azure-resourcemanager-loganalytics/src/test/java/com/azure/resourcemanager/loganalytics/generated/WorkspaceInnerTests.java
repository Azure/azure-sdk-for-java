// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.loganalytics.fluent.models.WorkspaceInner;
import com.azure.resourcemanager.loganalytics.models.CapacityReservationLevel;
import com.azure.resourcemanager.loganalytics.models.Identity;
import com.azure.resourcemanager.loganalytics.models.IdentityType;
import com.azure.resourcemanager.loganalytics.models.PublicNetworkAccessType;
import com.azure.resourcemanager.loganalytics.models.UserIdentityProperties;
import com.azure.resourcemanager.loganalytics.models.WorkspaceCapping;
import com.azure.resourcemanager.loganalytics.models.WorkspaceFeatures;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSku;
import com.azure.resourcemanager.loganalytics.models.WorkspaceSkuNameEnum;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"customerId\":\"jylwbtlhflsj\",\"sku\":{\"name\":\"PerNode\",\"capacityReservationLevel\":500,\"lastSkuUpdate\":\"jvfbgofelja\"},\"retentionInDays\":728576378,\"workspaceCapping\":{\"dailyQuotaGb\":44.315075801765715,\"quotaNextResetTime\":\"vriiio\",\"dataIngestionStatus\":\"ApproachingQuota\"},\"createdDate\":\"ghfkvtvsexs\",\"modifiedDate\":\"ueluqhhahhxvrhmz\",\"publicNetworkAccessForIngestion\":\"Disabled\",\"publicNetworkAccessForQuery\":\"Enabled\",\"forceCmkForQuery\":true,\"privateLinkScopedResources\":[{\"resourceId\":\"ghftqsxhqxujxuk\",\"scopeId\":\"xdigrjg\"},{\"resourceId\":\"fzdm\",\"scopeId\":\"qtfihwhbotzinga\"},{\"resourceId\":\"pph\",\"scopeId\":\"zqzudph\"}],\"features\":{\"enableDataExport\":true,\"immediatePurgeDataOn30Days\":false,\"enableLogAccessUsingOnlyResourcePermissions\":true,\"clusterResourceId\":\"nwcvtbvkayhmtnv\",\"disableLocalAuth\":true,\"\":{\"cjaesgvvs\":\"datakzwpcnpw\",\"wygzlvdnkfxusem\":\"datacyajguqf\",\"pfcqdp\":\"datawzrmuh\"}},\"defaultDataCollectionRuleResourceId\":\"xqv\"},\"identity\":{\"principalId\":\"uoymgccelvezry\",\"tenantId\":\"lmfeokerq\",\"type\":\"managedIdentity\",\"userAssignedIdentities\":{\"pbqpcrfkbwccsn\":{\"principalId\":\"ob\",\"clientId\":\"gxedkow\"},\"y\":{\"principalId\":\"cdwxlpq\",\"clientId\":\"ftnkhtj\"},\"ywkbirryuzhlhkjo\":{\"principalId\":\"gwfqatmt\",\"clientId\":\"tmdvypgikdgs\"}}},\"systemData\":{\"createdBy\":\"qqaatjinrvgou\",\"createdByType\":\"Key\",\"createdAt\":\"2021-11-16T07:49:22Z\",\"lastModifiedBy\":\"fggjioolvr\",\"lastModifiedByType\":\"Application\",\"lastModifiedAt\":\"2021-10-02T02:42:21Z\"},\"etag\":\"k\",\"location\":\"llqwjygvjayvblmh\",\"tags\":{\"gsopbyrqufegxu\":\"uhbxvvy\",\"bnhlmc\":\"wz\",\"dn\":\"l\",\"ijejvegrhbpn\":\"itvgbmhrixkwm\"},\"id\":\"ixexcc\",\"name\":\"dreaxh\",\"type\":\"exdrrvqahqkg\"}")
            .toObject(WorkspaceInner.class);
        Assertions.assertEquals("llqwjygvjayvblmh", model.location());
        Assertions.assertEquals("uhbxvvy", model.tags().get("gsopbyrqufegxu"));
        Assertions.assertEquals(IdentityType.MANAGED_IDENTITY, model.identity().type());
        Assertions.assertEquals("k", model.etag());
        Assertions.assertEquals(WorkspaceSkuNameEnum.PER_NODE, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.FIVE_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(728576378, model.retentionInDays());
        Assertions.assertEquals(44.315075801765715D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(true, model.forceCmkForQuery());
        Assertions.assertEquals(true, model.features().enableDataExport());
        Assertions.assertEquals(false, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("nwcvtbvkayhmtnv", model.features().clusterResourceId());
        Assertions.assertEquals(true, model.features().disableLocalAuth());
        Assertions.assertEquals("xqv", model.defaultDataCollectionRuleResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceInner model = new WorkspaceInner().withLocation("llqwjygvjayvblmh")
            .withTags(mapOf("gsopbyrqufegxu", "uhbxvvy", "bnhlmc", "wz", "dn", "l", "ijejvegrhbpn", "itvgbmhrixkwm"))
            .withIdentity(new Identity().withType(IdentityType.MANAGED_IDENTITY)
                .withUserAssignedIdentities(mapOf("pbqpcrfkbwccsn", new UserIdentityProperties(), "y",
                    new UserIdentityProperties(), "ywkbirryuzhlhkjo", new UserIdentityProperties())))
            .withEtag("k")
            .withSku(new WorkspaceSku().withName(WorkspaceSkuNameEnum.PER_NODE)
                .withCapacityReservationLevel(CapacityReservationLevel.FIVE_ZERO_ZERO))
            .withRetentionInDays(728576378)
            .withWorkspaceCapping(new WorkspaceCapping().withDailyQuotaGb(44.315075801765715D))
            .withPublicNetworkAccessForIngestion(PublicNetworkAccessType.DISABLED)
            .withPublicNetworkAccessForQuery(PublicNetworkAccessType.ENABLED)
            .withForceCmkForQuery(true)
            .withFeatures(new WorkspaceFeatures().withEnableDataExport(true)
                .withImmediatePurgeDataOn30Days(false)
                .withEnableLogAccessUsingOnlyResourcePermissions(true)
                .withClusterResourceId("nwcvtbvkayhmtnv")
                .withDisableLocalAuth(true)
                .withAdditionalProperties(mapOf()))
            .withDefaultDataCollectionRuleResourceId("xqv");
        model = BinaryData.fromObject(model).toObject(WorkspaceInner.class);
        Assertions.assertEquals("llqwjygvjayvblmh", model.location());
        Assertions.assertEquals("uhbxvvy", model.tags().get("gsopbyrqufegxu"));
        Assertions.assertEquals(IdentityType.MANAGED_IDENTITY, model.identity().type());
        Assertions.assertEquals("k", model.etag());
        Assertions.assertEquals(WorkspaceSkuNameEnum.PER_NODE, model.sku().name());
        Assertions.assertEquals(CapacityReservationLevel.FIVE_ZERO_ZERO, model.sku().capacityReservationLevel());
        Assertions.assertEquals(728576378, model.retentionInDays());
        Assertions.assertEquals(44.315075801765715D, model.workspaceCapping().dailyQuotaGb());
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, model.publicNetworkAccessForIngestion());
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, model.publicNetworkAccessForQuery());
        Assertions.assertEquals(true, model.forceCmkForQuery());
        Assertions.assertEquals(true, model.features().enableDataExport());
        Assertions.assertEquals(false, model.features().immediatePurgeDataOn30Days());
        Assertions.assertEquals(true, model.features().enableLogAccessUsingOnlyResourcePermissions());
        Assertions.assertEquals("nwcvtbvkayhmtnv", model.features().clusterResourceId());
        Assertions.assertEquals(true, model.features().disableLocalAuth());
        Assertions.assertEquals("xqv", model.defaultDataCollectionRuleResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
