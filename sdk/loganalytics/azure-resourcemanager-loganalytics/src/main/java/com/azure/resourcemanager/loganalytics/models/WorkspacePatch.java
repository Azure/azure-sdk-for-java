// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The top level Workspace resource container. */
@JsonFlatten
@Fluent
public class WorkspacePatch extends AzureEntityResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WorkspacePatch.class);

    /*
     * Resource tags. Optional.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * The provisioning state of the workspace.
     */
    @JsonProperty(value = "properties.provisioningState")
    private WorkspaceEntityStatus provisioningState;

    /*
     * This is a read-only property. Represents the ID associated with the
     * workspace.
     */
    @JsonProperty(value = "properties.customerId", access = JsonProperty.Access.WRITE_ONLY)
    private String customerId;

    /*
     * The SKU of the workspace.
     */
    @JsonProperty(value = "properties.sku")
    private WorkspaceSku sku;

    /*
     * The workspace data retention in days. Allowed values are per pricing
     * plan. See pricing tiers documentation for details.
     */
    @JsonProperty(value = "properties.retentionInDays")
    private Integer retentionInDays;

    /*
     * The daily volume cap for ingestion.
     */
    @JsonProperty(value = "properties.workspaceCapping")
    private WorkspaceCapping workspaceCapping;

    /*
     * Workspace creation date.
     */
    @JsonProperty(value = "properties.createdDate", access = JsonProperty.Access.WRITE_ONLY)
    private String createdDate;

    /*
     * Workspace modification date.
     */
    @JsonProperty(value = "properties.modifiedDate", access = JsonProperty.Access.WRITE_ONLY)
    private String modifiedDate;

    /*
     * The network access type for accessing Log Analytics ingestion.
     */
    @JsonProperty(value = "properties.publicNetworkAccessForIngestion")
    private PublicNetworkAccessType publicNetworkAccessForIngestion;

    /*
     * The network access type for accessing Log Analytics query.
     */
    @JsonProperty(value = "properties.publicNetworkAccessForQuery")
    private PublicNetworkAccessType publicNetworkAccessForQuery;

    /*
     * Indicates whether customer managed storage is mandatory for query
     * management.
     */
    @JsonProperty(value = "properties.forceCmkForQuery")
    private Boolean forceCmkForQuery;

    /*
     * List of linked private link scope resources.
     */
    @JsonProperty(value = "properties.privateLinkScopedResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<PrivateLinkScopedResource> privateLinkScopedResources;

    /*
     * Flag that indicate if data should be exported.
     */
    @JsonProperty(value = "properties.features.enableDataExport")
    private Boolean enableDataExport;

    /*
     * Flag that describes if we want to remove the data after 30 days.
     */
    @JsonProperty(value = "properties.features.immediatePurgeDataOn30Days")
    private Boolean immediatePurgeDataOn30Days;

    /*
     * Flag that indicate which permission to use - resource or workspace or
     * both.
     */
    @JsonProperty(value = "properties.features.enableLogAccessUsingOnlyResourcePermissions")
    private Boolean enableLogAccessUsingOnlyResourcePermissions;

    /*
     * Dedicated LA cluster resourceId that is linked to the workspaces.
     */
    @JsonProperty(value = "properties.features.clusterResourceId")
    private String clusterResourceId;

    /*
     * Disable Non-AAD based Auth.
     */
    @JsonProperty(value = "properties.features.disableLocalAuth")
    private Boolean disableLocalAuth;

    /**
     * Get the tags property: Resource tags. Optional.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags. Optional.
     *
     * @param tags the tags value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the workspace.
     *
     * @return the provisioningState value.
     */
    public WorkspaceEntityStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning state of the workspace.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withProvisioningState(WorkspaceEntityStatus provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the customerId property: This is a read-only property. Represents the ID associated with the workspace.
     *
     * @return the customerId value.
     */
    public String customerId() {
        return this.customerId;
    }

    /**
     * Get the sku property: The SKU of the workspace.
     *
     * @return the sku value.
     */
    public WorkspaceSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU of the workspace.
     *
     * @param sku the sku value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withSku(WorkspaceSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the retentionInDays property: The workspace data retention in days. Allowed values are per pricing plan. See
     * pricing tiers documentation for details.
     *
     * @return the retentionInDays value.
     */
    public Integer retentionInDays() {
        return this.retentionInDays;
    }

    /**
     * Set the retentionInDays property: The workspace data retention in days. Allowed values are per pricing plan. See
     * pricing tiers documentation for details.
     *
     * @param retentionInDays the retentionInDays value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withRetentionInDays(Integer retentionInDays) {
        this.retentionInDays = retentionInDays;
        return this;
    }

    /**
     * Get the workspaceCapping property: The daily volume cap for ingestion.
     *
     * @return the workspaceCapping value.
     */
    public WorkspaceCapping workspaceCapping() {
        return this.workspaceCapping;
    }

    /**
     * Set the workspaceCapping property: The daily volume cap for ingestion.
     *
     * @param workspaceCapping the workspaceCapping value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withWorkspaceCapping(WorkspaceCapping workspaceCapping) {
        this.workspaceCapping = workspaceCapping;
        return this;
    }

    /**
     * Get the createdDate property: Workspace creation date.
     *
     * @return the createdDate value.
     */
    public String createdDate() {
        return this.createdDate;
    }

    /**
     * Get the modifiedDate property: Workspace modification date.
     *
     * @return the modifiedDate value.
     */
    public String modifiedDate() {
        return this.modifiedDate;
    }

    /**
     * Get the publicNetworkAccessForIngestion property: The network access type for accessing Log Analytics ingestion.
     *
     * @return the publicNetworkAccessForIngestion value.
     */
    public PublicNetworkAccessType publicNetworkAccessForIngestion() {
        return this.publicNetworkAccessForIngestion;
    }

    /**
     * Set the publicNetworkAccessForIngestion property: The network access type for accessing Log Analytics ingestion.
     *
     * @param publicNetworkAccessForIngestion the publicNetworkAccessForIngestion value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withPublicNetworkAccessForIngestion(PublicNetworkAccessType publicNetworkAccessForIngestion) {
        this.publicNetworkAccessForIngestion = publicNetworkAccessForIngestion;
        return this;
    }

    /**
     * Get the publicNetworkAccessForQuery property: The network access type for accessing Log Analytics query.
     *
     * @return the publicNetworkAccessForQuery value.
     */
    public PublicNetworkAccessType publicNetworkAccessForQuery() {
        return this.publicNetworkAccessForQuery;
    }

    /**
     * Set the publicNetworkAccessForQuery property: The network access type for accessing Log Analytics query.
     *
     * @param publicNetworkAccessForQuery the publicNetworkAccessForQuery value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withPublicNetworkAccessForQuery(PublicNetworkAccessType publicNetworkAccessForQuery) {
        this.publicNetworkAccessForQuery = publicNetworkAccessForQuery;
        return this;
    }

    /**
     * Get the forceCmkForQuery property: Indicates whether customer managed storage is mandatory for query management.
     *
     * @return the forceCmkForQuery value.
     */
    public Boolean forceCmkForQuery() {
        return this.forceCmkForQuery;
    }

    /**
     * Set the forceCmkForQuery property: Indicates whether customer managed storage is mandatory for query management.
     *
     * @param forceCmkForQuery the forceCmkForQuery value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withForceCmkForQuery(Boolean forceCmkForQuery) {
        this.forceCmkForQuery = forceCmkForQuery;
        return this;
    }

    /**
     * Get the privateLinkScopedResources property: List of linked private link scope resources.
     *
     * @return the privateLinkScopedResources value.
     */
    public List<PrivateLinkScopedResource> privateLinkScopedResources() {
        return this.privateLinkScopedResources;
    }

    /**
     * Get the enableDataExport property: Flag that indicate if data should be exported.
     *
     * @return the enableDataExport value.
     */
    public Boolean enableDataExport() {
        return this.enableDataExport;
    }

    /**
     * Set the enableDataExport property: Flag that indicate if data should be exported.
     *
     * @param enableDataExport the enableDataExport value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withEnableDataExport(Boolean enableDataExport) {
        this.enableDataExport = enableDataExport;
        return this;
    }

    /**
     * Get the immediatePurgeDataOn30Days property: Flag that describes if we want to remove the data after 30 days.
     *
     * @return the immediatePurgeDataOn30Days value.
     */
    public Boolean immediatePurgeDataOn30Days() {
        return this.immediatePurgeDataOn30Days;
    }

    /**
     * Set the immediatePurgeDataOn30Days property: Flag that describes if we want to remove the data after 30 days.
     *
     * @param immediatePurgeDataOn30Days the immediatePurgeDataOn30Days value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withImmediatePurgeDataOn30Days(Boolean immediatePurgeDataOn30Days) {
        this.immediatePurgeDataOn30Days = immediatePurgeDataOn30Days;
        return this;
    }

    /**
     * Get the enableLogAccessUsingOnlyResourcePermissions property: Flag that indicate which permission to use -
     * resource or workspace or both.
     *
     * @return the enableLogAccessUsingOnlyResourcePermissions value.
     */
    public Boolean enableLogAccessUsingOnlyResourcePermissions() {
        return this.enableLogAccessUsingOnlyResourcePermissions;
    }

    /**
     * Set the enableLogAccessUsingOnlyResourcePermissions property: Flag that indicate which permission to use -
     * resource or workspace or both.
     *
     * @param enableLogAccessUsingOnlyResourcePermissions the enableLogAccessUsingOnlyResourcePermissions value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withEnableLogAccessUsingOnlyResourcePermissions(
        Boolean enableLogAccessUsingOnlyResourcePermissions) {
        this.enableLogAccessUsingOnlyResourcePermissions = enableLogAccessUsingOnlyResourcePermissions;
        return this;
    }

    /**
     * Get the clusterResourceId property: Dedicated LA cluster resourceId that is linked to the workspaces.
     *
     * @return the clusterResourceId value.
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * Set the clusterResourceId property: Dedicated LA cluster resourceId that is linked to the workspaces.
     *
     * @param clusterResourceId the clusterResourceId value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withClusterResourceId(String clusterResourceId) {
        this.clusterResourceId = clusterResourceId;
        return this;
    }

    /**
     * Get the disableLocalAuth property: Disable Non-AAD based Auth.
     *
     * @return the disableLocalAuth value.
     */
    public Boolean disableLocalAuth() {
        return this.disableLocalAuth;
    }

    /**
     * Set the disableLocalAuth property: Disable Non-AAD based Auth.
     *
     * @param disableLocalAuth the disableLocalAuth value to set.
     * @return the WorkspacePatch object itself.
     */
    public WorkspacePatch withDisableLocalAuth(Boolean disableLocalAuth) {
        this.disableLocalAuth = disableLocalAuth;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sku() != null) {
            sku().validate();
        }
        if (workspaceCapping() != null) {
            workspaceCapping().validate();
        }
        if (privateLinkScopedResources() != null) {
            privateLinkScopedResources().forEach(e -> e.validate());
        }
    }
}
