// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.loganalytics.models.ProvisioningStateEnum;
import com.azure.resourcemanager.loganalytics.models.RestoredLogs;
import com.azure.resourcemanager.loganalytics.models.ResultStatistics;
import com.azure.resourcemanager.loganalytics.models.Schema;
import com.azure.resourcemanager.loganalytics.models.SearchResults;
import com.azure.resourcemanager.loganalytics.models.TablePlanEnum;
import java.io.IOException;

/**
 * Table properties.
 */
@Fluent
public final class TableProperties implements JsonSerializable<TableProperties> {
    /*
     * The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace
     * retention.
     */
    private Integer retentionInDays;

    /*
     * The table total retention in days, between 4 and 4383. Setting this property to -1 will default to table
     * retention.
     */
    private Integer totalRetentionInDays;

    /*
     * The table data archive retention in days. Calculated as (totalRetentionInDays-retentionInDays)
     */
    private Integer archiveRetentionInDays;

    /*
     * Parameters of the search job that initiated this table.
     */
    private SearchResults searchResults;

    /*
     * Parameters of the restore operation that initiated this table.
     */
    private RestoredLogs restoredLogs;

    /*
     * Search job execution statistics.
     */
    private ResultStatistics resultStatistics;

    /*
     * Instruct the system how to handle and charge the logs ingested to this table.
     */
    private TablePlanEnum plan;

    /*
     * The timestamp that table plan was last modified (UTC).
     */
    private String lastPlanModifiedDate;

    /*
     * Table schema.
     */
    private Schema schema;

    /*
     * Table's current provisioning state. If set to 'updating', indicates a resource lock due to ongoing operation,
     * forbidding any update to the table until the ongoing operation is concluded.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * True - Value originates from workspace retention in days, False - Customer specific.
     */
    private Boolean retentionInDaysAsDefault;

    /*
     * True - Value originates from retention in days, False - Customer specific.
     */
    private Boolean totalRetentionInDaysAsDefault;

    /**
     * Creates an instance of TableProperties class.
     */
    public TableProperties() {
    }

    /**
     * Get the retentionInDays property: The table retention in days, between 4 and 730. Setting this property to -1
     * will default to the workspace retention.
     * 
     * @return the retentionInDays value.
     */
    public Integer retentionInDays() {
        return this.retentionInDays;
    }

    /**
     * Set the retentionInDays property: The table retention in days, between 4 and 730. Setting this property to -1
     * will default to the workspace retention.
     * 
     * @param retentionInDays the retentionInDays value to set.
     * @return the TableProperties object itself.
     */
    public TableProperties withRetentionInDays(Integer retentionInDays) {
        this.retentionInDays = retentionInDays;
        return this;
    }

    /**
     * Get the totalRetentionInDays property: The table total retention in days, between 4 and 4383. Setting this
     * property to -1 will default to table retention.
     * 
     * @return the totalRetentionInDays value.
     */
    public Integer totalRetentionInDays() {
        return this.totalRetentionInDays;
    }

    /**
     * Set the totalRetentionInDays property: The table total retention in days, between 4 and 4383. Setting this
     * property to -1 will default to table retention.
     * 
     * @param totalRetentionInDays the totalRetentionInDays value to set.
     * @return the TableProperties object itself.
     */
    public TableProperties withTotalRetentionInDays(Integer totalRetentionInDays) {
        this.totalRetentionInDays = totalRetentionInDays;
        return this;
    }

    /**
     * Get the archiveRetentionInDays property: The table data archive retention in days. Calculated as
     * (totalRetentionInDays-retentionInDays).
     * 
     * @return the archiveRetentionInDays value.
     */
    public Integer archiveRetentionInDays() {
        return this.archiveRetentionInDays;
    }

    /**
     * Get the searchResults property: Parameters of the search job that initiated this table.
     * 
     * @return the searchResults value.
     */
    public SearchResults searchResults() {
        return this.searchResults;
    }

    /**
     * Set the searchResults property: Parameters of the search job that initiated this table.
     * 
     * @param searchResults the searchResults value to set.
     * @return the TableProperties object itself.
     */
    public TableProperties withSearchResults(SearchResults searchResults) {
        this.searchResults = searchResults;
        return this;
    }

    /**
     * Get the restoredLogs property: Parameters of the restore operation that initiated this table.
     * 
     * @return the restoredLogs value.
     */
    public RestoredLogs restoredLogs() {
        return this.restoredLogs;
    }

    /**
     * Set the restoredLogs property: Parameters of the restore operation that initiated this table.
     * 
     * @param restoredLogs the restoredLogs value to set.
     * @return the TableProperties object itself.
     */
    public TableProperties withRestoredLogs(RestoredLogs restoredLogs) {
        this.restoredLogs = restoredLogs;
        return this;
    }

    /**
     * Get the resultStatistics property: Search job execution statistics.
     * 
     * @return the resultStatistics value.
     */
    public ResultStatistics resultStatistics() {
        return this.resultStatistics;
    }

    /**
     * Get the plan property: Instruct the system how to handle and charge the logs ingested to this table.
     * 
     * @return the plan value.
     */
    public TablePlanEnum plan() {
        return this.plan;
    }

    /**
     * Set the plan property: Instruct the system how to handle and charge the logs ingested to this table.
     * 
     * @param plan the plan value to set.
     * @return the TableProperties object itself.
     */
    public TableProperties withPlan(TablePlanEnum plan) {
        this.plan = plan;
        return this;
    }

    /**
     * Get the lastPlanModifiedDate property: The timestamp that table plan was last modified (UTC).
     * 
     * @return the lastPlanModifiedDate value.
     */
    public String lastPlanModifiedDate() {
        return this.lastPlanModifiedDate;
    }

    /**
     * Get the schema property: Table schema.
     * 
     * @return the schema value.
     */
    public Schema schema() {
        return this.schema;
    }

    /**
     * Set the schema property: Table schema.
     * 
     * @param schema the schema value to set.
     * @return the TableProperties object itself.
     */
    public TableProperties withSchema(Schema schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the provisioningState property: Table's current provisioning state. If set to 'updating', indicates a
     * resource lock due to ongoing operation, forbidding any update to the table until the ongoing operation is
     * concluded.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the retentionInDaysAsDefault property: True - Value originates from workspace retention in days, False -
     * Customer specific.
     * 
     * @return the retentionInDaysAsDefault value.
     */
    public Boolean retentionInDaysAsDefault() {
        return this.retentionInDaysAsDefault;
    }

    /**
     * Get the totalRetentionInDaysAsDefault property: True - Value originates from retention in days, False - Customer
     * specific.
     * 
     * @return the totalRetentionInDaysAsDefault value.
     */
    public Boolean totalRetentionInDaysAsDefault() {
        return this.totalRetentionInDaysAsDefault;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (searchResults() != null) {
            searchResults().validate();
        }
        if (restoredLogs() != null) {
            restoredLogs().validate();
        }
        if (resultStatistics() != null) {
            resultStatistics().validate();
        }
        if (schema() != null) {
            schema().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("retentionInDays", this.retentionInDays);
        jsonWriter.writeNumberField("totalRetentionInDays", this.totalRetentionInDays);
        jsonWriter.writeJsonField("searchResults", this.searchResults);
        jsonWriter.writeJsonField("restoredLogs", this.restoredLogs);
        jsonWriter.writeStringField("plan", this.plan == null ? null : this.plan.toString());
        jsonWriter.writeJsonField("schema", this.schema);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TableProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TableProperties.
     */
    public static TableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TableProperties deserializedTableProperties = new TableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionInDays".equals(fieldName)) {
                    deserializedTableProperties.retentionInDays = reader.getNullable(JsonReader::getInt);
                } else if ("totalRetentionInDays".equals(fieldName)) {
                    deserializedTableProperties.totalRetentionInDays = reader.getNullable(JsonReader::getInt);
                } else if ("archiveRetentionInDays".equals(fieldName)) {
                    deserializedTableProperties.archiveRetentionInDays = reader.getNullable(JsonReader::getInt);
                } else if ("searchResults".equals(fieldName)) {
                    deserializedTableProperties.searchResults = SearchResults.fromJson(reader);
                } else if ("restoredLogs".equals(fieldName)) {
                    deserializedTableProperties.restoredLogs = RestoredLogs.fromJson(reader);
                } else if ("resultStatistics".equals(fieldName)) {
                    deserializedTableProperties.resultStatistics = ResultStatistics.fromJson(reader);
                } else if ("plan".equals(fieldName)) {
                    deserializedTableProperties.plan = TablePlanEnum.fromString(reader.getString());
                } else if ("lastPlanModifiedDate".equals(fieldName)) {
                    deserializedTableProperties.lastPlanModifiedDate = reader.getString();
                } else if ("schema".equals(fieldName)) {
                    deserializedTableProperties.schema = Schema.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedTableProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("retentionInDaysAsDefault".equals(fieldName)) {
                    deserializedTableProperties.retentionInDaysAsDefault = reader.getNullable(JsonReader::getBoolean);
                } else if ("totalRetentionInDaysAsDefault".equals(fieldName)) {
                    deserializedTableProperties.totalRetentionInDaysAsDefault
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTableProperties;
        });
    }
}
