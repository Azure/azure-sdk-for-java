// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.loganalytics.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.loganalytics.fluent.QueryPacksClient;
import com.azure.resourcemanager.loganalytics.fluent.models.LogAnalyticsQueryPackInner;
import com.azure.resourcemanager.loganalytics.models.LogAnalyticsQueryPack;
import com.azure.resourcemanager.loganalytics.models.QueryPacks;

public final class QueryPacksImpl implements QueryPacks {
    private static final ClientLogger LOGGER = new ClientLogger(QueryPacksImpl.class);

    private final QueryPacksClient innerClient;

    private final com.azure.resourcemanager.loganalytics.LogAnalyticsManager serviceManager;

    public QueryPacksImpl(
        QueryPacksClient innerClient, com.azure.resourcemanager.loganalytics.LogAnalyticsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LogAnalyticsQueryPack> list() {
        PagedIterable<LogAnalyticsQueryPackInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new LogAnalyticsQueryPackImpl(inner1, this.manager()));
    }

    public PagedIterable<LogAnalyticsQueryPack> list(Context context) {
        PagedIterable<LogAnalyticsQueryPackInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new LogAnalyticsQueryPackImpl(inner1, this.manager()));
    }

    public PagedIterable<LogAnalyticsQueryPack> listByResourceGroup(String resourceGroupName) {
        PagedIterable<LogAnalyticsQueryPackInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new LogAnalyticsQueryPackImpl(inner1, this.manager()));
    }

    public PagedIterable<LogAnalyticsQueryPack> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<LogAnalyticsQueryPackInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new LogAnalyticsQueryPackImpl(inner1, this.manager()));
    }

    public void deleteByResourceGroup(String resourceGroupName, String queryPackName) {
        this.serviceClient().delete(resourceGroupName, queryPackName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String queryPackName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, queryPackName, context);
    }

    public LogAnalyticsQueryPack getByResourceGroup(String resourceGroupName, String queryPackName) {
        LogAnalyticsQueryPackInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, queryPackName);
        if (inner != null) {
            return new LogAnalyticsQueryPackImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LogAnalyticsQueryPack> getByResourceGroupWithResponse(
        String resourceGroupName, String queryPackName, Context context) {
        Response<LogAnalyticsQueryPackInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, queryPackName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LogAnalyticsQueryPackImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LogAnalyticsQueryPack getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String queryPackName = Utils.getValueFromIdByName(id, "queryPacks");
        if (queryPackName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'queryPacks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, queryPackName, Context.NONE).getValue();
    }

    public Response<LogAnalyticsQueryPack> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String queryPackName = Utils.getValueFromIdByName(id, "queryPacks");
        if (queryPackName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'queryPacks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, queryPackName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String queryPackName = Utils.getValueFromIdByName(id, "queryPacks");
        if (queryPackName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'queryPacks'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, queryPackName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String queryPackName = Utils.getValueFromIdByName(id, "queryPacks");
        if (queryPackName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'queryPacks'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, queryPackName, context);
    }

    private QueryPacksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.loganalytics.LogAnalyticsManager manager() {
        return this.serviceManager;
    }

    public LogAnalyticsQueryPackImpl define(String name) {
        return new LogAnalyticsQueryPackImpl(name, this.manager());
    }
}
