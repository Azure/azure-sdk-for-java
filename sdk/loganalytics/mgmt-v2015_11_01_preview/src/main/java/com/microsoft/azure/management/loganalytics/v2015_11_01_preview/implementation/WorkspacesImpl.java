/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.loganalytics.v2015_11_01_preview.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.Workspaces;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.Workspace;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.SharedKeys;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.IntelligencePack;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.UsageMetric;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.ManagementGroup;

class WorkspacesImpl extends GroupableResourcesCoreImpl<Workspace, WorkspaceImpl, WorkspaceInner, WorkspacesInner, LogAnalyticsManager>  implements Workspaces {
    protected WorkspacesImpl(LogAnalyticsManager manager) {
        super(manager.inner().workspaces(), manager);
    }

    @Override
    protected Observable<WorkspaceInner> getInnerAsync(String resourceGroupName, String name) {
        WorkspacesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        WorkspacesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<Workspace> listByResourceGroup(String resourceGroupName) {
        WorkspacesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<Workspace> listByResourceGroupAsync(String resourceGroupName) {
        WorkspacesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<WorkspaceInner>, Observable<WorkspaceInner>>() {
            @Override
            public Observable<WorkspaceInner> call(Page<WorkspaceInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<WorkspaceInner, Workspace>() {
            @Override
            public Workspace call(WorkspaceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<Workspace> list() {
        WorkspacesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<Workspace> listAsync() {
        WorkspacesInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<WorkspaceInner>, Observable<WorkspaceInner>>() {
            @Override
            public Observable<WorkspaceInner> call(Page<WorkspaceInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<WorkspaceInner, Workspace>() {
            @Override
            public Workspace call(WorkspaceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public WorkspaceImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<SharedKeys> getSharedKeysAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.getSharedKeysAsync(resourceGroupName, workspaceName)
        .map(new Func1<SharedKeysInner, SharedKeys>() {
            @Override
            public SharedKeys call(SharedKeysInner inner) {
                return new SharedKeysImpl(inner, manager());
            }
        });
    }

    @Override
    protected WorkspaceImpl wrapModel(WorkspaceInner inner) {
        return  new WorkspaceImpl(inner.name(), inner, manager());
    }

    @Override
    protected WorkspaceImpl wrapModel(String name) {
        return new WorkspaceImpl(name, new WorkspaceInner(), this.manager());
    }

    private IntelligencePackImpl wrapIntelligencePackModel(IntelligencePackInner inner) {
        return  new IntelligencePackImpl(inner, manager());
    }

    private UsageMetricImpl wrapUsageMetricModel(UsageMetricInner inner) {
        return  new UsageMetricImpl(inner, manager());
    }

    private ManagementGroupImpl wrapManagementGroupModel(ManagementGroupInner inner) {
        return  new ManagementGroupImpl(inner, manager());
    }

    @Override
    public Observable<IntelligencePack> listIntelligencePacksAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.listIntelligencePacksAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<IntelligencePackInner>, Observable<IntelligencePackInner>>() {
            @Override
            public Observable<IntelligencePackInner> call(List<IntelligencePackInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<IntelligencePackInner, IntelligencePack>() {
            @Override
            public IntelligencePack call(IntelligencePackInner inner) {
                return wrapIntelligencePackModel(inner);
            }
        });
    }

    @Override
    public Completable disableIntelligencePackAsync(String resourceGroupName, String workspaceName, String intelligencePackName) {
        WorkspacesInner client = this.inner();
        return client.disableIntelligencePackAsync(resourceGroupName, workspaceName, intelligencePackName).toCompletable();
    }

    @Override
    public Completable enableIntelligencePackAsync(String resourceGroupName, String workspaceName, String intelligencePackName) {
        WorkspacesInner client = this.inner();
        return client.enableIntelligencePackAsync(resourceGroupName, workspaceName, intelligencePackName).toCompletable();
    }

    @Override
    public Observable<UsageMetric> listUsagesAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.listUsagesAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<UsageMetricInner>, Observable<UsageMetricInner>>() {
            @Override
            public Observable<UsageMetricInner> call(List<UsageMetricInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<UsageMetricInner, UsageMetric>() {
            @Override
            public UsageMetric call(UsageMetricInner inner) {
                return wrapUsageMetricModel(inner);
            }
        });
    }

    @Override
    public Observable<ManagementGroup> listManagementGroupsAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.listManagementGroupsAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<ManagementGroupInner>, Observable<ManagementGroupInner>>() {
            @Override
            public Observable<ManagementGroupInner> call(List<ManagementGroupInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ManagementGroupInner, ManagementGroup>() {
            @Override
            public ManagementGroup call(ManagementGroupInner inner) {
                return wrapManagementGroupModel(inner);
            }
        });
    }

}
