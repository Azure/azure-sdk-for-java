/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2015_11_01_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.implementation.WorkspacesInner;
import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.IntelligencePack;
import rx.Completable;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.UsageMetric;
import com.microsoft.azure.management.loganalytics.v2015_11_01_preview.ManagementGroup;

/**
 * Type representing Workspaces.
 */
public interface Workspaces extends SupportsCreating<Workspace.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<Workspace>, SupportsListingByResourceGroup<Workspace>, SupportsListing<Workspace>, HasInner<WorkspacesInner> {
    /**
     * Gets the shared keys for a workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Name of the Log Analytics Workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SharedKeys> getSharedKeysAsync(String resourceGroupName, String workspaceName);

    /**
     * Lists all the intelligence packs possible and whether they are enabled or disabled for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Name of the Log Analytics Workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<IntelligencePack> listIntelligencePacksAsync(String resourceGroupName, String workspaceName);

    /**
     * Disables an intelligence pack for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Name of the Log Analytics Workspace.
     * @param intelligencePackName The name of the intelligence pack to be disabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable disableIntelligencePackAsync(String resourceGroupName, String workspaceName, String intelligencePackName);

    /**
     * Enables an intelligence pack for a given workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName Name of the Log Analytics Workspace.
     * @param intelligencePackName The name of the intelligence pack to be enabled.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable enableIntelligencePackAsync(String resourceGroupName, String workspaceName, String intelligencePackName);

    /**
     * Gets a list of usage metrics for a workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<UsageMetric> listUsagesAsync(String resourceGroupName, String workspaceName);

    /**
     * Gets a list of management groups connected to a workspace.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ManagementGroup> listManagementGroupsAsync(String resourceGroupName, String workspaceName);

}
