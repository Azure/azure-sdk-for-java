/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2020_08_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.loganalytics.v2020_08_01.Workspace;
import rx.Observable;
import com.microsoft.azure.management.loganalytics.v2020_08_01.WorkspacePatch;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_08_01.WorkspaceEntityStatus;
import com.microsoft.azure.management.loganalytics.v2020_08_01.WorkspaceSku;
import com.microsoft.azure.management.loganalytics.v2020_08_01.WorkspaceCapping;
import com.microsoft.azure.management.loganalytics.v2020_08_01.PublicNetworkAccessType;
import com.microsoft.azure.management.loganalytics.v2020_08_01.PrivateLinkScopedResource;
import rx.functions.Func1;

class WorkspaceImpl extends GroupableResourceCoreImpl<Workspace, WorkspaceInner, WorkspaceImpl, LogAnalyticsManager> implements Workspace, Workspace.Definition, Workspace.Update {
    private WorkspacePatch updateParameter;
    WorkspaceImpl(String name, WorkspaceInner inner, LogAnalyticsManager manager) {
        super(name, inner, manager);
        this.updateParameter = new WorkspacePatch();
    }

    @Override
    public Observable<Workspace> createResourceAsync() {
        WorkspacesInner client = this.manager().inner().workspaces();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<WorkspaceInner, WorkspaceInner>() {
               @Override
               public WorkspaceInner call(WorkspaceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Workspace> updateResourceAsync() {
        WorkspacesInner client = this.manager().inner().workspaces();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<WorkspaceInner, WorkspaceInner>() {
               @Override
               public WorkspaceInner call(WorkspaceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<WorkspaceInner> getInnerAsync() {
        WorkspacesInner client = this.manager().inner().workspaces();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new WorkspacePatch();
    }

    @Override
    public String customerId() {
        return this.inner().customerId();
    }

    @Override
    public String eTag() {
        return this.inner().eTag();
    }

    @Override
    public List<PrivateLinkScopedResource> privateLinkScopedResources() {
        return this.inner().privateLinkScopedResources();
    }

    @Override
    public WorkspaceEntityStatus provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public PublicNetworkAccessType publicNetworkAccessForIngestion() {
        return this.inner().publicNetworkAccessForIngestion();
    }

    @Override
    public PublicNetworkAccessType publicNetworkAccessForQuery() {
        return this.inner().publicNetworkAccessForQuery();
    }

    @Override
    public Integer retentionInDays() {
        return this.inner().retentionInDays();
    }

    @Override
    public WorkspaceSku sku() {
        return this.inner().sku();
    }

    @Override
    public WorkspaceCapping workspaceCapping() {
        return this.inner().workspaceCapping();
    }

    @Override
    public WorkspaceImpl withETag(String eTag) {
        this.inner().withETag(eTag);
        return this;
    }

    @Override
    public WorkspaceImpl withProvisioningState(WorkspaceEntityStatus provisioningState) {
        if (isInCreateMode()) {
            this.inner().withProvisioningState(provisioningState);
        } else {
            this.updateParameter.withProvisioningState(provisioningState);
        }
        return this;
    }

    @Override
    public WorkspaceImpl withPublicNetworkAccessForIngestion(PublicNetworkAccessType publicNetworkAccessForIngestion) {
        if (isInCreateMode()) {
            this.inner().withPublicNetworkAccessForIngestion(publicNetworkAccessForIngestion);
        } else {
            this.updateParameter.withPublicNetworkAccessForIngestion(publicNetworkAccessForIngestion);
        }
        return this;
    }

    @Override
    public WorkspaceImpl withPublicNetworkAccessForQuery(PublicNetworkAccessType publicNetworkAccessForQuery) {
        if (isInCreateMode()) {
            this.inner().withPublicNetworkAccessForQuery(publicNetworkAccessForQuery);
        } else {
            this.updateParameter.withPublicNetworkAccessForQuery(publicNetworkAccessForQuery);
        }
        return this;
    }

    @Override
    public WorkspaceImpl withRetentionInDays(Integer retentionInDays) {
        if (isInCreateMode()) {
            this.inner().withRetentionInDays(retentionInDays);
        } else {
            this.updateParameter.withRetentionInDays(retentionInDays);
        }
        return this;
    }

    @Override
    public WorkspaceImpl withSku(WorkspaceSku sku) {
        if (isInCreateMode()) {
            this.inner().withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

    @Override
    public WorkspaceImpl withWorkspaceCapping(WorkspaceCapping workspaceCapping) {
        if (isInCreateMode()) {
            this.inner().withWorkspaceCapping(workspaceCapping);
        } else {
            this.updateParameter.withWorkspaceCapping(workspaceCapping);
        }
        return this;
    }

}
