/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2020_08_01.implementation;

import com.microsoft.azure.management.loganalytics.v2020_08_01.DataExport;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_08_01.Type;

class DataExportImpl extends CreatableUpdatableImpl<DataExport, DataExportInner, DataExportImpl> implements DataExport, DataExport.Definition, DataExport.Update {
    private final LogAnalyticsManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private String dataExportName;

    DataExportImpl(String name, LogAnalyticsManager manager) {
        super(name, new DataExportInner());
        this.manager = manager;
        // Set resource name
        this.dataExportName = name;
        //
    }

    DataExportImpl(DataExportInner inner, LogAnalyticsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.dataExportName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourcegroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.dataExportName = IdParsingUtils.getValueFromIdByName(inner.id(), "dataExports");
        //
    }

    @Override
    public LogAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DataExport> createResourceAsync() {
        DataExportsInner client = this.manager().inner().dataExports();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.dataExportName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DataExport> updateResourceAsync() {
        DataExportsInner client = this.manager().inner().dataExports();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.dataExportName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DataExportInner> getInnerAsync() {
        DataExportsInner client = this.manager().inner().dataExports();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.dataExportName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Boolean allTables() {
        return this.inner().allTables();
    }

    @Override
    public String createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String dataExportId() {
        return this.inner().dataExportId();
    }

    @Override
    public Type dataExportType() {
        return this.inner().dataExportType();
    }

    @Override
    public Boolean enable() {
        return this.inner().enable();
    }

    @Override
    public String eventHubName() {
        return this.inner().eventHubName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String lastModifiedDate() {
        return this.inner().lastModifiedDate();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String resourceId() {
        return this.inner().resourceId();
    }

    @Override
    public List<String> tableNames() {
        return this.inner().tableNames();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DataExportImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    @Override
    public DataExportImpl withResourceId(String resourceId) {
        this.inner().withResourceId(resourceId);
        return this;
    }

    @Override
    public DataExportImpl withAllTables(Boolean allTables) {
        this.inner().withAllTables(allTables);
        return this;
    }

    @Override
    public DataExportImpl withCreatedDate(String createdDate) {
        this.inner().withCreatedDate(createdDate);
        return this;
    }

    @Override
    public DataExportImpl withDataExportId(String dataExportId) {
        this.inner().withDataExportId(dataExportId);
        return this;
    }

    @Override
    public DataExportImpl withEnable(Boolean enable) {
        this.inner().withEnable(enable);
        return this;
    }

    @Override
    public DataExportImpl withEventHubName(String eventHubName) {
        this.inner().withEventHubName(eventHubName);
        return this;
    }

    @Override
    public DataExportImpl withLastModifiedDate(String lastModifiedDate) {
        this.inner().withLastModifiedDate(lastModifiedDate);
        return this;
    }

    @Override
    public DataExportImpl withTableNames(List<String> tableNames) {
        this.inner().withTableNames(tableNames);
        return this;
    }

}
