/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2020_08_01.implementation;

import com.microsoft.azure.management.loganalytics.v2020_08_01.LinkedStorageAccountsResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_08_01.DataSourceType;

class LinkedStorageAccountsResourceImpl extends CreatableUpdatableImpl<LinkedStorageAccountsResource, LinkedStorageAccountsResourceInner, LinkedStorageAccountsResourceImpl> implements LinkedStorageAccountsResource, LinkedStorageAccountsResource.Definition, LinkedStorageAccountsResource.Update {
    private final LogAnalyticsManager manager;
    private String resourceGroupName;
    private String workspaceName;
    private DataSourceType dataSourceType;
    private List<String> cstorageAccountIds;
    private List<String> ustorageAccountIds;

    LinkedStorageAccountsResourceImpl(String name, LogAnalyticsManager manager) {
        super(name, new LinkedStorageAccountsResourceInner());
        this.manager = manager;
        // Set resource name
        this.dataSourceType = DataSourceType.fromString(name);
        //
    }

    LinkedStorageAccountsResourceImpl(LinkedStorageAccountsResourceInner inner, LogAnalyticsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.dataSourceType = DataSourceType.fromString(inner.name());
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourcegroups");
        this.workspaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "workspaces");
        this.dataSourceType = DataSourceType.valueOf(IdParsingUtils.getValueFromIdByName(inner.id(), "linkedStorageAccounts"));
        //
    }

    @Override
    public LogAnalyticsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<LinkedStorageAccountsResource> createResourceAsync() {
        LinkedStorageAccountsInner client = this.manager().inner().linkedStorageAccounts();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.dataSourceType, this.cstorageAccountIds)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<LinkedStorageAccountsResource> updateResourceAsync() {
        LinkedStorageAccountsInner client = this.manager().inner().linkedStorageAccounts();
        return client.createOrUpdateAsync(this.resourceGroupName, this.workspaceName, this.dataSourceType, this.ustorageAccountIds)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<LinkedStorageAccountsResourceInner> getInnerAsync() {
        LinkedStorageAccountsInner client = this.manager().inner().linkedStorageAccounts();
        return client.getAsync(this.resourceGroupName, this.workspaceName, this.dataSourceType);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DataSourceType dataSourceType() {
        return this.inner().dataSourceType();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<String> storageAccountIds() {
        return this.inner().storageAccountIds();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public LinkedStorageAccountsResourceImpl withExistingWorkspace(String resourceGroupName, String workspaceName) {
        this.resourceGroupName = resourceGroupName;
        this.workspaceName = workspaceName;
        return this;
    }

    @Override
    public LinkedStorageAccountsResourceImpl withStorageAccountIds(List<String> storageAccountIds) {
        if (isInCreateMode()) {
            this.cstorageAccountIds = storageAccountIds;
        } else {
            this.ustorageAccountIds = storageAccountIds;
        }
        return this;
    }

}
