/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.loganalytics.v2020_08_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2020_08_01.AvailableServiceTiers;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.loganalytics.v2020_08_01.AvailableServiceTier;

class AvailableServiceTiersImpl extends WrapperImpl<AvailableServiceTiersInner> implements AvailableServiceTiers {
    private final LogAnalyticsManager manager;

    AvailableServiceTiersImpl(LogAnalyticsManager manager) {
        super(manager.inner().availableServiceTiers());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    private AvailableServiceTierImpl wrapModel(AvailableServiceTierInner inner) {
        return  new AvailableServiceTierImpl(inner, manager());
    }

    @Override
    public Observable<AvailableServiceTier> listByWorkspaceAsync(String resourceGroupName, String workspaceName) {
        AvailableServiceTiersInner client = this.inner();
        return client.listByWorkspaceAsync(resourceGroupName, workspaceName)
        .flatMap(new Func1<List<AvailableServiceTierInner>, Observable<AvailableServiceTierInner>>() {
            @Override
            public Observable<AvailableServiceTierInner> call(List<AvailableServiceTierInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<AvailableServiceTierInner, AvailableServiceTier>() {
            @Override
            public AvailableServiceTier call(AvailableServiceTierInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
