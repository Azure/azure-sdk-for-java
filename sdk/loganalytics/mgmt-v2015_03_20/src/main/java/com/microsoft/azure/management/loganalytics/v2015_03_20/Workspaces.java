/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.loganalytics.v2015_03_20;

import rx.Observable;
import com.microsoft.azure.management.loganalytics.v2015_03_20.implementation.WorkspacesInner;
import com.microsoft.azure.arm.model.HasInner;
import rx.Completable;

/**
 * Type representing Workspaces.
 */
public interface Workspaces extends HasInner<WorkspacesInner> {
    /**
     * Gets the available service tiers for the workspace.
     *
     * @param resourceGroupName The Resource Group name.
     * @param workspaceName The Log Analytics Workspace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AvailableServiceTier> availableServiceTiersAsync(String resourceGroupName, String workspaceName);

    /**
     * Gets status of an ongoing purge operation.
     *
     * @param resourceGroupName The Resource Group name.
     * @param workspaceName The Log Analytics Workspace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WorkspacePurgeStatusResponse> getPurgeStatusAsync(String resourceGroupName, String workspaceName);

    /**
     * Gets the schema for a given workspace.
     *
     * @param resourceGroupName The Resource Group name.
     * @param workspaceName The Log Analytics Workspace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SearchGetSchemaResponse> getSchemaAsync(String resourceGroupName, String workspaceName);

    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
    In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
     *
     * @param resourceGroupName The Resource Group name.
     * @param workspaceName The Log Analytics Workspace name.
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics Workspace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WorkspacePurgeResponse> purgeAsync(String resourceGroupName, String workspaceName, WorkspacePurgeBody body);

    /**
     * Gets the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     *
     * @param resourceGroupName The Resource Group name.
     * @param workspaceName The Log Analytics Workspace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SharedKeys> listKeysAsync(String resourceGroupName, String workspaceName);

    /**
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
     *
     * @param resourceGroupName The Resource Group name.
     * @param workspaceName The Log Analytics Workspace name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SharedKeys> regenerateSharedKeysAsync(String resourceGroupName, String workspaceName);

    /**
     * Get a list of workspaces which the current user has administrator privileges and are not associated with an Azure Subscription. The subscriptionId parameter in the Url is ignored.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<LinkTarget> listAsync();

    /**
     * Delete a Log Analytics gateway.
     *
     * @param resourceGroupName The Resource Group name.
     * @param workspaceName The Log Analytics Workspace name.
     * @param gatewayId The Log Analytics gateway Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteGatewaysAsync(String resourceGroupName, String workspaceName, String gatewayId);

}
