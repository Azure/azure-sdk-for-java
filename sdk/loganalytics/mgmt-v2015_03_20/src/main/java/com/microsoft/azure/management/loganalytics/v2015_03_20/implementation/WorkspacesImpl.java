/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.loganalytics.v2015_03_20.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.loganalytics.v2015_03_20.Workspaces;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.loganalytics.v2015_03_20.WorkspacePurgeStatusResponse;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.loganalytics.v2015_03_20.SearchGetSchemaResponse;
import com.microsoft.azure.management.loganalytics.v2015_03_20.SearchResultsResponse;
import com.microsoft.azure.management.loganalytics.v2015_03_20.WorkspacePurgeResponse;
import com.microsoft.azure.management.loganalytics.v2015_03_20.SharedKeys;
import com.microsoft.azure.management.loganalytics.v2015_03_20.LinkTarget;
import com.microsoft.azure.management.loganalytics.v2015_03_20.SearchParameters;
import com.microsoft.azure.management.loganalytics.v2015_03_20.WorkspacePurgeBody;
import rx.Completable;

class WorkspacesImpl extends WrapperImpl<WorkspacesInner> implements Workspaces {
    private final LogAnalyticsManager manager;

    WorkspacesImpl(LogAnalyticsManager manager) {
        super(manager.inner().workspaces());
        this.manager = manager;
    }

    public LogAnalyticsManager manager() {
        return this.manager;
    }

    private WorkspacePurgeStatusResponseImpl wrapWorkspacePurgeStatusResponseModel(WorkspacePurgeStatusResponseInner inner) {
        return  new WorkspacePurgeStatusResponseImpl(inner, manager());
    }

    private Observable<WorkspacePurgeStatusResponseInner> getWorkspacePurgeStatusResponseInnerUsingWorkspacesInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String workspaceName = IdParsingUtils.getValueFromIdByName(id, "workspaces");
        WorkspacesInner client = this.inner();
        return client.getPurgeStatusAsync(resourceGroupName, workspaceName);
    }

    @Override
    public Observable<WorkspacePurgeStatusResponse> getPurgeStatusAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.getPurgeStatusAsync(resourceGroupName, workspaceName)
        .map(new Func1<WorkspacePurgeStatusResponseInner, WorkspacePurgeStatusResponse>() {
            @Override
            public WorkspacePurgeStatusResponse call(WorkspacePurgeStatusResponseInner inner) {
                return wrapWorkspacePurgeStatusResponseModel(inner);
            }
       });
    }

    @Override
    public Observable<SearchGetSchemaResponse> getSchemaAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.getSchemaAsync(resourceGroupName, workspaceName)
        .map(new Func1<SearchGetSchemaResponseInner, SearchGetSchemaResponse>() {
            @Override
            public SearchGetSchemaResponse call(SearchGetSchemaResponseInner inner) {
                return new SearchGetSchemaResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SearchResultsResponse> getSearchResultsAsync(String resourceGroupName, String workspaceName, SearchParameters parameters) {
        WorkspacesInner client = this.inner();
        return client.getSearchResultsAsync(resourceGroupName, workspaceName, parameters)
        .map(new Func1<SearchResultsResponseInner, SearchResultsResponse>() {
            @Override
            public SearchResultsResponse call(SearchResultsResponseInner inner) {
                return new SearchResultsResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SearchResultsResponse> updateSearchResultsAsync(String resourceGroupName, String workspaceName, String id) {
        WorkspacesInner client = this.inner();
        return client.updateSearchResultsAsync(resourceGroupName, workspaceName, id)
        .map(new Func1<SearchResultsResponseInner, SearchResultsResponse>() {
            @Override
            public SearchResultsResponse call(SearchResultsResponseInner inner) {
                return new SearchResultsResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<WorkspacePurgeResponse> purgeAsync(String resourceGroupName, String workspaceName, WorkspacePurgeBody body) {
        WorkspacesInner client = this.inner();
        return client.purgeAsync(resourceGroupName, workspaceName, body)
        .map(new Func1<WorkspacePurgeResponseInner, WorkspacePurgeResponse>() {
            @Override
            public WorkspacePurgeResponse call(WorkspacePurgeResponseInner inner) {
                return new WorkspacePurgeResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SharedKeys> listKeysAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.listKeysAsync(resourceGroupName, workspaceName)
        .map(new Func1<SharedKeysInner, SharedKeys>() {
            @Override
            public SharedKeys call(SharedKeysInner inner) {
                return new SharedKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SharedKeys> regenerateSharedKeysAsync(String resourceGroupName, String workspaceName) {
        WorkspacesInner client = this.inner();
        return client.regenerateSharedKeysAsync(resourceGroupName, workspaceName)
        .map(new Func1<SharedKeysInner, SharedKeys>() {
            @Override
            public SharedKeys call(SharedKeysInner inner) {
                return new SharedKeysImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<LinkTarget> listAsync() {
        WorkspacesInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<LinkTargetInner>, Observable<LinkTargetInner>>() {
            @Override
            public Observable<LinkTargetInner> call(Page<LinkTargetInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<LinkTargetInner, LinkTarget>() {
            @Override
            public LinkTarget call(LinkTargetInner inner) {
                return new LinkTargetImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteGatewaysAsync(String resourceGroupName, String workspaceName, String gatewayId) {
        WorkspacesInner client = this.inner();
        return client.deleteGatewaysAsync(resourceGroupName, workspaceName, gatewayId).toCompletable();
    }

}
