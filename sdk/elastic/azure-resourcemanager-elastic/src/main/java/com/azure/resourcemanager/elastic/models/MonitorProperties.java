// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties specific to the monitor resource.
 */
@Fluent
public final class MonitorProperties implements JsonSerializable<MonitorProperties> {
    /*
     * Provisioning state of the monitor resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Flag specifying if the resource monitoring is enabled or disabled.
     */
    private MonitoringStatus monitoringStatus;

    /*
     * Elastic cloud properties.
     */
    private ElasticProperties elasticProperties;

    /*
     * User information.
     */
    private UserInfo userInfo;

    /*
     * Plan details of the monitor resource.
     */
    private PlanDetails planDetails;

    /*
     * Version of elastic of the monitor resource
     */
    private String version;

    /*
     * State of the Azure Subscription containing the monitor resource
     */
    private String subscriptionState;

    /*
     * Status of Azure Subscription where Marketplace SaaS is located.
     */
    private String saaSAzureSubscriptionStatus;

    /*
     * Name of the marketing campaign.
     */
    private String sourceCampaignName;

    /*
     * A unique identifier associated with the campaign.
     */
    private String sourceCampaignId;

    /*
     * The liftrResourceCategory property.
     */
    private LiftrResourceCategories liftrResourceCategory;

    /*
     * The priority of the resource.
     */
    private Integer liftrResourcePreference;

    /*
     * Flag to determine if User API Key has to be generated and shared.
     */
    private Boolean generateApiKey;

    /**
     * Creates an instance of MonitorProperties class.
     */
    public MonitorProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of the monitor resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state of the monitor resource.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the monitoringStatus property: Flag specifying if the resource monitoring is enabled or disabled.
     * 
     * @return the monitoringStatus value.
     */
    public MonitoringStatus monitoringStatus() {
        return this.monitoringStatus;
    }

    /**
     * Set the monitoringStatus property: Flag specifying if the resource monitoring is enabled or disabled.
     * 
     * @param monitoringStatus the monitoringStatus value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withMonitoringStatus(MonitoringStatus monitoringStatus) {
        this.monitoringStatus = monitoringStatus;
        return this;
    }

    /**
     * Get the elasticProperties property: Elastic cloud properties.
     * 
     * @return the elasticProperties value.
     */
    public ElasticProperties elasticProperties() {
        return this.elasticProperties;
    }

    /**
     * Set the elasticProperties property: Elastic cloud properties.
     * 
     * @param elasticProperties the elasticProperties value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withElasticProperties(ElasticProperties elasticProperties) {
        this.elasticProperties = elasticProperties;
        return this;
    }

    /**
     * Get the userInfo property: User information.
     * 
     * @return the userInfo value.
     */
    public UserInfo userInfo() {
        return this.userInfo;
    }

    /**
     * Set the userInfo property: User information.
     * 
     * @param userInfo the userInfo value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withUserInfo(UserInfo userInfo) {
        this.userInfo = userInfo;
        return this;
    }

    /**
     * Get the planDetails property: Plan details of the monitor resource.
     * 
     * @return the planDetails value.
     */
    public PlanDetails planDetails() {
        return this.planDetails;
    }

    /**
     * Set the planDetails property: Plan details of the monitor resource.
     * 
     * @param planDetails the planDetails value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withPlanDetails(PlanDetails planDetails) {
        this.planDetails = planDetails;
        return this;
    }

    /**
     * Get the version property: Version of elastic of the monitor resource.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of elastic of the monitor resource.
     * 
     * @param version the version value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the subscriptionState property: State of the Azure Subscription containing the monitor resource.
     * 
     * @return the subscriptionState value.
     */
    public String subscriptionState() {
        return this.subscriptionState;
    }

    /**
     * Set the subscriptionState property: State of the Azure Subscription containing the monitor resource.
     * 
     * @param subscriptionState the subscriptionState value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withSubscriptionState(String subscriptionState) {
        this.subscriptionState = subscriptionState;
        return this;
    }

    /**
     * Get the saaSAzureSubscriptionStatus property: Status of Azure Subscription where Marketplace SaaS is located.
     * 
     * @return the saaSAzureSubscriptionStatus value.
     */
    public String saaSAzureSubscriptionStatus() {
        return this.saaSAzureSubscriptionStatus;
    }

    /**
     * Set the saaSAzureSubscriptionStatus property: Status of Azure Subscription where Marketplace SaaS is located.
     * 
     * @param saaSAzureSubscriptionStatus the saaSAzureSubscriptionStatus value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withSaaSAzureSubscriptionStatus(String saaSAzureSubscriptionStatus) {
        this.saaSAzureSubscriptionStatus = saaSAzureSubscriptionStatus;
        return this;
    }

    /**
     * Get the sourceCampaignName property: Name of the marketing campaign.
     * 
     * @return the sourceCampaignName value.
     */
    public String sourceCampaignName() {
        return this.sourceCampaignName;
    }

    /**
     * Set the sourceCampaignName property: Name of the marketing campaign.
     * 
     * @param sourceCampaignName the sourceCampaignName value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withSourceCampaignName(String sourceCampaignName) {
        this.sourceCampaignName = sourceCampaignName;
        return this;
    }

    /**
     * Get the sourceCampaignId property: A unique identifier associated with the campaign.
     * 
     * @return the sourceCampaignId value.
     */
    public String sourceCampaignId() {
        return this.sourceCampaignId;
    }

    /**
     * Set the sourceCampaignId property: A unique identifier associated with the campaign.
     * 
     * @param sourceCampaignId the sourceCampaignId value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withSourceCampaignId(String sourceCampaignId) {
        this.sourceCampaignId = sourceCampaignId;
        return this;
    }

    /**
     * Get the liftrResourceCategory property: The liftrResourceCategory property.
     * 
     * @return the liftrResourceCategory value.
     */
    public LiftrResourceCategories liftrResourceCategory() {
        return this.liftrResourceCategory;
    }

    /**
     * Get the liftrResourcePreference property: The priority of the resource.
     * 
     * @return the liftrResourcePreference value.
     */
    public Integer liftrResourcePreference() {
        return this.liftrResourcePreference;
    }

    /**
     * Get the generateApiKey property: Flag to determine if User API Key has to be generated and shared.
     * 
     * @return the generateApiKey value.
     */
    public Boolean generateApiKey() {
        return this.generateApiKey;
    }

    /**
     * Set the generateApiKey property: Flag to determine if User API Key has to be generated and shared.
     * 
     * @param generateApiKey the generateApiKey value to set.
     * @return the MonitorProperties object itself.
     */
    public MonitorProperties withGenerateApiKey(Boolean generateApiKey) {
        this.generateApiKey = generateApiKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (elasticProperties() != null) {
            elasticProperties().validate();
        }
        if (userInfo() != null) {
            userInfo().validate();
        }
        if (planDetails() != null) {
            planDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeStringField("monitoringStatus",
            this.monitoringStatus == null ? null : this.monitoringStatus.toString());
        jsonWriter.writeJsonField("elasticProperties", this.elasticProperties);
        jsonWriter.writeJsonField("userInfo", this.userInfo);
        jsonWriter.writeJsonField("planDetails", this.planDetails);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("subscriptionState", this.subscriptionState);
        jsonWriter.writeStringField("saaSAzureSubscriptionStatus", this.saaSAzureSubscriptionStatus);
        jsonWriter.writeStringField("sourceCampaignName", this.sourceCampaignName);
        jsonWriter.writeStringField("sourceCampaignId", this.sourceCampaignId);
        jsonWriter.writeBooleanField("generateApiKey", this.generateApiKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitorProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MonitorProperties.
     */
    public static MonitorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitorProperties deserializedMonitorProperties = new MonitorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedMonitorProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("monitoringStatus".equals(fieldName)) {
                    deserializedMonitorProperties.monitoringStatus = MonitoringStatus.fromString(reader.getString());
                } else if ("elasticProperties".equals(fieldName)) {
                    deserializedMonitorProperties.elasticProperties = ElasticProperties.fromJson(reader);
                } else if ("userInfo".equals(fieldName)) {
                    deserializedMonitorProperties.userInfo = UserInfo.fromJson(reader);
                } else if ("planDetails".equals(fieldName)) {
                    deserializedMonitorProperties.planDetails = PlanDetails.fromJson(reader);
                } else if ("version".equals(fieldName)) {
                    deserializedMonitorProperties.version = reader.getString();
                } else if ("subscriptionState".equals(fieldName)) {
                    deserializedMonitorProperties.subscriptionState = reader.getString();
                } else if ("saaSAzureSubscriptionStatus".equals(fieldName)) {
                    deserializedMonitorProperties.saaSAzureSubscriptionStatus = reader.getString();
                } else if ("sourceCampaignName".equals(fieldName)) {
                    deserializedMonitorProperties.sourceCampaignName = reader.getString();
                } else if ("sourceCampaignId".equals(fieldName)) {
                    deserializedMonitorProperties.sourceCampaignId = reader.getString();
                } else if ("liftrResourceCategory".equals(fieldName)) {
                    deserializedMonitorProperties.liftrResourceCategory
                        = LiftrResourceCategories.fromString(reader.getString());
                } else if ("liftrResourcePreference".equals(fieldName)) {
                    deserializedMonitorProperties.liftrResourcePreference = reader.getNullable(JsonReader::getInt);
                } else if ("generateApiKey".equals(fieldName)) {
                    deserializedMonitorProperties.generateApiKey = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitorProperties;
        });
    }
}
