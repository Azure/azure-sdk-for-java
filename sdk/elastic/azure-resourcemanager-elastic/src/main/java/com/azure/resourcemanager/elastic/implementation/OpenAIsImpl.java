// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.elastic.fluent.OpenAIsClient;
import com.azure.resourcemanager.elastic.fluent.models.OpenAIIntegrationRPModelInner;
import com.azure.resourcemanager.elastic.fluent.models.OpenAIIntegrationStatusResponseInner;
import com.azure.resourcemanager.elastic.models.OpenAIIntegrationRPModel;
import com.azure.resourcemanager.elastic.models.OpenAIIntegrationStatusResponse;
import com.azure.resourcemanager.elastic.models.OpenAIs;

public final class OpenAIsImpl implements OpenAIs {
    private static final ClientLogger LOGGER = new ClientLogger(OpenAIsImpl.class);

    private final OpenAIsClient innerClient;

    private final com.azure.resourcemanager.elastic.ElasticManager serviceManager;

    public OpenAIsImpl(OpenAIsClient innerClient, com.azure.resourcemanager.elastic.ElasticManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<OpenAIIntegrationRPModel> list(String resourceGroupName, String monitorName) {
        PagedIterable<OpenAIIntegrationRPModelInner> inner = this.serviceClient().list(resourceGroupName, monitorName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OpenAIIntegrationRPModelImpl(inner1, this.manager()));
    }

    public PagedIterable<OpenAIIntegrationRPModel> list(String resourceGroupName, String monitorName, Context context) {
        PagedIterable<OpenAIIntegrationRPModelInner> inner
            = this.serviceClient().list(resourceGroupName, monitorName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OpenAIIntegrationRPModelImpl(inner1, this.manager()));
    }

    public Response<OpenAIIntegrationRPModel> getWithResponse(String resourceGroupName, String monitorName,
        String integrationName, Context context) {
        Response<OpenAIIntegrationRPModelInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, monitorName, integrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OpenAIIntegrationRPModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OpenAIIntegrationRPModel get(String resourceGroupName, String monitorName, String integrationName) {
        OpenAIIntegrationRPModelInner inner = this.serviceClient().get(resourceGroupName, monitorName, integrationName);
        if (inner != null) {
            return new OpenAIIntegrationRPModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String monitorName, String integrationName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, monitorName, integrationName, context);
    }

    public void delete(String resourceGroupName, String monitorName, String integrationName) {
        this.serviceClient().delete(resourceGroupName, monitorName, integrationName);
    }

    public Response<OpenAIIntegrationStatusResponse> getStatusWithResponse(String resourceGroupName, String monitorName,
        String integrationName, Context context) {
        Response<OpenAIIntegrationStatusResponseInner> inner
            = this.serviceClient().getStatusWithResponse(resourceGroupName, monitorName, integrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OpenAIIntegrationStatusResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OpenAIIntegrationStatusResponse getStatus(String resourceGroupName, String monitorName,
        String integrationName) {
        OpenAIIntegrationStatusResponseInner inner
            = this.serviceClient().getStatus(resourceGroupName, monitorName, integrationName);
        if (inner != null) {
            return new OpenAIIntegrationStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OpenAIIntegrationRPModel getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String integrationName = ResourceManagerUtils.getValueFromIdByName(id, "openAIIntegrations");
        if (integrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openAIIntegrations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, monitorName, integrationName, Context.NONE).getValue();
    }

    public Response<OpenAIIntegrationRPModel> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String integrationName = ResourceManagerUtils.getValueFromIdByName(id, "openAIIntegrations");
        if (integrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openAIIntegrations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, monitorName, integrationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String integrationName = ResourceManagerUtils.getValueFromIdByName(id, "openAIIntegrations");
        if (integrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openAIIntegrations'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, monitorName, integrationName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String monitorName = ResourceManagerUtils.getValueFromIdByName(id, "monitors");
        if (monitorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'monitors'.", id)));
        }
        String integrationName = ResourceManagerUtils.getValueFromIdByName(id, "openAIIntegrations");
        if (integrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'openAIIntegrations'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, monitorName, integrationName, context);
    }

    private OpenAIsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.elastic.ElasticManager manager() {
        return this.serviceManager;
    }

    public OpenAIIntegrationRPModelImpl define(String name) {
        return new OpenAIIntegrationRPModelImpl(name, this.manager());
    }
}
