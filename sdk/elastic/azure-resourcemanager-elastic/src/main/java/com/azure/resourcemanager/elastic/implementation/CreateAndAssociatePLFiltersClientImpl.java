// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.elastic.fluent.CreateAndAssociatePLFiltersClient;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CreateAndAssociatePLFiltersClient.
 */
public final class CreateAndAssociatePLFiltersClientImpl implements CreateAndAssociatePLFiltersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CreateAndAssociatePLFiltersService service;

    /**
     * The service client containing this operation class.
     */
    private final ElasticManagementClientImpl client;

    /**
     * Initializes an instance of CreateAndAssociatePLFiltersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CreateAndAssociatePLFiltersClientImpl(ElasticManagementClientImpl client) {
        this.service = RestProxy.create(CreateAndAssociatePLFiltersService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ElasticManagementClientCreateAndAssociatePLFilters to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ElasticManagementClientCreateAndAssociatePLFilters")
    public interface CreateAndAssociatePLFiltersService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}/createAndAssociatePLFilter")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("monitorName") String monitorName,
            @QueryParam("name") String name, @QueryParam("privateEndpointGuid") String privateEndpointGuid,
            @QueryParam("privateEndpointName") String privateEndpointName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}/createAndAssociatePLFilter")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createSync(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("monitorName") String monitorName,
            @QueryParam("name") String name, @QueryParam("privateEndpointGuid") String privateEndpointGuid,
            @QueryParam("privateEndpointName") String privateEndpointName, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String monitorName,
        String name, String privateEndpointGuid, String privateEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (monitorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter monitorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, monitorName, name, privateEndpointGuid,
                privateEndpointName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String monitorName, String name,
        String privateEndpointGuid, String privateEndpointName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (monitorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter monitorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, monitorName, name, privateEndpointGuid,
            privateEndpointName, accept, Context.NONE);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createWithResponse(String resourceGroupName, String monitorName, String name,
        String privateEndpointGuid, String privateEndpointName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (monitorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter monitorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, monitorName, name, privateEndpointGuid,
            privateEndpointName, accept, context);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCreateAsync(String resourceGroupName, String monitorName,
        String name, String privateEndpointGuid, String privateEndpointName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCreateAsync(String resourceGroupName, String monitorName) {
        final String name = null;
        final String privateEndpointGuid = null;
        final String privateEndpointName = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCreate(String resourceGroupName, String monitorName, String name,
        String privateEndpointGuid, String privateEndpointName) {
        Response<BinaryData> response
            = createWithResponse(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCreate(String resourceGroupName, String monitorName) {
        final String name = null;
        final String privateEndpointGuid = null;
        final String privateEndpointName = null;
        Response<BinaryData> response
            = createWithResponse(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCreate(String resourceGroupName, String monitorName, String name,
        String privateEndpointGuid, String privateEndpointName, Context context) {
        Response<BinaryData> response = createWithResponse(resourceGroupName, monitorName, name, privateEndpointGuid,
            privateEndpointName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> createAsync(String resourceGroupName, String monitorName, String name,
        String privateEndpointGuid, String privateEndpointName) {
        return beginCreateAsync(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> createAsync(String resourceGroupName, String monitorName) {
        final String name = null;
        final String privateEndpointGuid = null;
        final String privateEndpointName = null;
        return beginCreateAsync(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String resourceGroupName, String monitorName) {
        final String name = null;
        final String privateEndpointGuid = null;
        final String privateEndpointName = null;
        beginCreate(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName).getFinalResult();
    }

    /**
     * Create and associate a PL filter with your Elastic monitor resource to control and manage network traffic.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name.
     * @param name Name of the traffic filter.
     * @param privateEndpointGuid Guid of the private endpoint.
     * @param privateEndpointName Name of the private endpoint.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void create(String resourceGroupName, String monitorName, String name, String privateEndpointGuid,
        String privateEndpointName, Context context) {
        beginCreate(resourceGroupName, monitorName, name, privateEndpointGuid, privateEndpointName, context)
            .getFinalResult();
    }

    private static final ClientLogger LOGGER = new ClientLogger(CreateAndAssociatePLFiltersClientImpl.class);
}
