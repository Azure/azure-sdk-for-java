// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User Information to be passed to partners.
 */
@Fluent
public final class UserInfo implements JsonSerializable<UserInfo> {
    /*
     * First name of the user
     */
    private String firstName;

    /*
     * Last name of the user
     */
    private String lastName;

    /*
     * Company name of the user
     */
    private String companyName;

    /*
     * Email of the user used by Elastic for contacting them if needed
     */
    private String emailAddress;

    /*
     * Company information of the user to be passed to partners.
     */
    private CompanyInfo companyInfo;

    /**
     * Creates an instance of UserInfo class.
     */
    public UserInfo() {
    }

    /**
     * Get the firstName property: First name of the user.
     * 
     * @return the firstName value.
     */
    public String firstName() {
        return this.firstName;
    }

    /**
     * Set the firstName property: First name of the user.
     * 
     * @param firstName the firstName value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Get the lastName property: Last name of the user.
     * 
     * @return the lastName value.
     */
    public String lastName() {
        return this.lastName;
    }

    /**
     * Set the lastName property: Last name of the user.
     * 
     * @param lastName the lastName value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Get the companyName property: Company name of the user.
     * 
     * @return the companyName value.
     */
    public String companyName() {
        return this.companyName;
    }

    /**
     * Set the companyName property: Company name of the user.
     * 
     * @param companyName the companyName value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }

    /**
     * Get the emailAddress property: Email of the user used by Elastic for contacting them if needed.
     * 
     * @return the emailAddress value.
     */
    public String emailAddress() {
        return this.emailAddress;
    }

    /**
     * Set the emailAddress property: Email of the user used by Elastic for contacting them if needed.
     * 
     * @param emailAddress the emailAddress value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Get the companyInfo property: Company information of the user to be passed to partners.
     * 
     * @return the companyInfo value.
     */
    public CompanyInfo companyInfo() {
        return this.companyInfo;
    }

    /**
     * Set the companyInfo property: Company information of the user to be passed to partners.
     * 
     * @param companyInfo the companyInfo value to set.
     * @return the UserInfo object itself.
     */
    public UserInfo withCompanyInfo(CompanyInfo companyInfo) {
        this.companyInfo = companyInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (companyInfo() != null) {
            companyInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("firstName", this.firstName);
        jsonWriter.writeStringField("lastName", this.lastName);
        jsonWriter.writeStringField("companyName", this.companyName);
        jsonWriter.writeStringField("emailAddress", this.emailAddress);
        jsonWriter.writeJsonField("companyInfo", this.companyInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the UserInfo.
     */
    public static UserInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserInfo deserializedUserInfo = new UserInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstName".equals(fieldName)) {
                    deserializedUserInfo.firstName = reader.getString();
                } else if ("lastName".equals(fieldName)) {
                    deserializedUserInfo.lastName = reader.getString();
                } else if ("companyName".equals(fieldName)) {
                    deserializedUserInfo.companyName = reader.getString();
                } else if ("emailAddress".equals(fieldName)) {
                    deserializedUserInfo.emailAddress = reader.getString();
                } else if ("companyInfo".equals(fieldName)) {
                    deserializedUserInfo.companyInfo = CompanyInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserInfo;
        });
    }
}
