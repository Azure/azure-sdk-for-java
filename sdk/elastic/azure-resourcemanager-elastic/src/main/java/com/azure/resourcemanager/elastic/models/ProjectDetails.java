// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Project details of the monitor resource IF it belongs to Serverless offer kind.
 */
@Fluent
public final class ProjectDetails implements JsonSerializable<ProjectDetails> {
    /*
     * Project type; ex: Elasticsearch / Observability / Security
     */
    private ProjectType projectType;

    /*
     * Configuration type of the Elasticsearch project
     */
    private ConfigurationType configurationType;

    /**
     * Creates an instance of ProjectDetails class.
     */
    public ProjectDetails() {
    }

    /**
     * Get the projectType property: Project type; ex: Elasticsearch / Observability / Security.
     * 
     * @return the projectType value.
     */
    public ProjectType projectType() {
        return this.projectType;
    }

    /**
     * Set the projectType property: Project type; ex: Elasticsearch / Observability / Security.
     * 
     * @param projectType the projectType value to set.
     * @return the ProjectDetails object itself.
     */
    public ProjectDetails withProjectType(ProjectType projectType) {
        this.projectType = projectType;
        return this;
    }

    /**
     * Get the configurationType property: Configuration type of the Elasticsearch project.
     * 
     * @return the configurationType value.
     */
    public ConfigurationType configurationType() {
        return this.configurationType;
    }

    /**
     * Set the configurationType property: Configuration type of the Elasticsearch project.
     * 
     * @param configurationType the configurationType value to set.
     * @return the ProjectDetails object itself.
     */
    public ProjectDetails withConfigurationType(ConfigurationType configurationType) {
        this.configurationType = configurationType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectType", this.projectType == null ? null : this.projectType.toString());
        jsonWriter.writeStringField("configurationType",
            this.configurationType == null ? null : this.configurationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectDetails.
     */
    public static ProjectDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectDetails deserializedProjectDetails = new ProjectDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectType".equals(fieldName)) {
                    deserializedProjectDetails.projectType = ProjectType.fromString(reader.getString());
                } else if ("configurationType".equals(fieldName)) {
                    deserializedProjectDetails.configurationType = ConfigurationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectDetails;
        });
    }
}
