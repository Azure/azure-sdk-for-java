// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.elastic.models.SendingLogs;
import java.io.IOException;

/**
 * The properties of a resource currently being monitored by the Elastic monitor resource.
 */
@Fluent
public final class MonitoredResourceInner implements JsonSerializable<MonitoredResourceInner> {
    /*
     * The ARM id of the resource.
     */
    private String id;

    /*
     * Flag indicating the status of the resource for sending logs operation to Elastic.
     */
    private SendingLogs sendingLogs;

    /*
     * Reason for why the resource is sending logs (or why it is not sending).
     */
    private String reasonForLogsStatus;

    /**
     * Creates an instance of MonitoredResourceInner class.
     */
    public MonitoredResourceInner() {
    }

    /**
     * Get the id property: The ARM id of the resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ARM id of the resource.
     * 
     * @param id the id value to set.
     * @return the MonitoredResourceInner object itself.
     */
    public MonitoredResourceInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the sendingLogs property: Flag indicating the status of the resource for sending logs operation to Elastic.
     * 
     * @return the sendingLogs value.
     */
    public SendingLogs sendingLogs() {
        return this.sendingLogs;
    }

    /**
     * Set the sendingLogs property: Flag indicating the status of the resource for sending logs operation to Elastic.
     * 
     * @param sendingLogs the sendingLogs value to set.
     * @return the MonitoredResourceInner object itself.
     */
    public MonitoredResourceInner withSendingLogs(SendingLogs sendingLogs) {
        this.sendingLogs = sendingLogs;
        return this;
    }

    /**
     * Get the reasonForLogsStatus property: Reason for why the resource is sending logs (or why it is not sending).
     * 
     * @return the reasonForLogsStatus value.
     */
    public String reasonForLogsStatus() {
        return this.reasonForLogsStatus;
    }

    /**
     * Set the reasonForLogsStatus property: Reason for why the resource is sending logs (or why it is not sending).
     * 
     * @param reasonForLogsStatus the reasonForLogsStatus value to set.
     * @return the MonitoredResourceInner object itself.
     */
    public MonitoredResourceInner withReasonForLogsStatus(String reasonForLogsStatus) {
        this.reasonForLogsStatus = reasonForLogsStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("sendingLogs", this.sendingLogs == null ? null : this.sendingLogs.toString());
        jsonWriter.writeStringField("reasonForLogsStatus", this.reasonForLogsStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitoredResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitoredResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MonitoredResourceInner.
     */
    public static MonitoredResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitoredResourceInner deserializedMonitoredResourceInner = new MonitoredResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMonitoredResourceInner.id = reader.getString();
                } else if ("sendingLogs".equals(fieldName)) {
                    deserializedMonitoredResourceInner.sendingLogs = SendingLogs.fromString(reader.getString());
                } else if ("reasonForLogsStatus".equals(fieldName)) {
                    deserializedMonitoredResourceInner.reasonForLogsStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitoredResourceInner;
        });
    }
}
