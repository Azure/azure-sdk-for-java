// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Company information of the user to be passed to partners.
 */
@Fluent
public final class CompanyInfo implements JsonSerializable<CompanyInfo> {
    /*
     * Domain of the company
     */
    private String domain;

    /*
     * Business of the company
     */
    private String business;

    /*
     * Number of employees in the company
     */
    private String employeesNumber;

    /*
     * State of the company location.
     */
    private String state;

    /*
     * Country of the company location.
     */
    private String country;

    /**
     * Creates an instance of CompanyInfo class.
     */
    public CompanyInfo() {
    }

    /**
     * Get the domain property: Domain of the company.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Domain of the company.
     * 
     * @param domain the domain value to set.
     * @return the CompanyInfo object itself.
     */
    public CompanyInfo withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the business property: Business of the company.
     * 
     * @return the business value.
     */
    public String business() {
        return this.business;
    }

    /**
     * Set the business property: Business of the company.
     * 
     * @param business the business value to set.
     * @return the CompanyInfo object itself.
     */
    public CompanyInfo withBusiness(String business) {
        this.business = business;
        return this;
    }

    /**
     * Get the employeesNumber property: Number of employees in the company.
     * 
     * @return the employeesNumber value.
     */
    public String employeesNumber() {
        return this.employeesNumber;
    }

    /**
     * Set the employeesNumber property: Number of employees in the company.
     * 
     * @param employeesNumber the employeesNumber value to set.
     * @return the CompanyInfo object itself.
     */
    public CompanyInfo withEmployeesNumber(String employeesNumber) {
        this.employeesNumber = employeesNumber;
        return this;
    }

    /**
     * Get the state property: State of the company location.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: State of the company location.
     * 
     * @param state the state value to set.
     * @return the CompanyInfo object itself.
     */
    public CompanyInfo withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the country property: Country of the company location.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: Country of the company location.
     * 
     * @param country the country value to set.
     * @return the CompanyInfo object itself.
     */
    public CompanyInfo withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeStringField("business", this.business);
        jsonWriter.writeStringField("employeesNumber", this.employeesNumber);
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("country", this.country);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CompanyInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CompanyInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CompanyInfo.
     */
    public static CompanyInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CompanyInfo deserializedCompanyInfo = new CompanyInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("domain".equals(fieldName)) {
                    deserializedCompanyInfo.domain = reader.getString();
                } else if ("business".equals(fieldName)) {
                    deserializedCompanyInfo.business = reader.getString();
                } else if ("employeesNumber".equals(fieldName)) {
                    deserializedCompanyInfo.employeesNumber = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedCompanyInfo.state = reader.getString();
                } else if ("country".equals(fieldName)) {
                    deserializedCompanyInfo.country = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCompanyInfo;
        });
    }
}
