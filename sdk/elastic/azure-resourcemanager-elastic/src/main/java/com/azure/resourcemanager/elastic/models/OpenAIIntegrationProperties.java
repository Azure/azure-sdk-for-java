// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Open AI Integration details.
 */
@Fluent
public final class OpenAIIntegrationProperties implements JsonSerializable<OpenAIIntegrationProperties> {
    /*
     * The resource name of Open AI resource
     */
    private String openAIResourceId;

    /*
     * The API endpoint for Open AI resource
     */
    private String openAIResourceEndpoint;

    /*
     * Value of API key for Open AI resource
     */
    private String key;

    /*
     * Last Update Timestamp for key updation
     */
    private OffsetDateTime lastRefreshAt;

    /**
     * Creates an instance of OpenAIIntegrationProperties class.
     */
    public OpenAIIntegrationProperties() {
    }

    /**
     * Get the openAIResourceId property: The resource name of Open AI resource.
     * 
     * @return the openAIResourceId value.
     */
    public String openAIResourceId() {
        return this.openAIResourceId;
    }

    /**
     * Set the openAIResourceId property: The resource name of Open AI resource.
     * 
     * @param openAIResourceId the openAIResourceId value to set.
     * @return the OpenAIIntegrationProperties object itself.
     */
    public OpenAIIntegrationProperties withOpenAIResourceId(String openAIResourceId) {
        this.openAIResourceId = openAIResourceId;
        return this;
    }

    /**
     * Get the openAIResourceEndpoint property: The API endpoint for Open AI resource.
     * 
     * @return the openAIResourceEndpoint value.
     */
    public String openAIResourceEndpoint() {
        return this.openAIResourceEndpoint;
    }

    /**
     * Set the openAIResourceEndpoint property: The API endpoint for Open AI resource.
     * 
     * @param openAIResourceEndpoint the openAIResourceEndpoint value to set.
     * @return the OpenAIIntegrationProperties object itself.
     */
    public OpenAIIntegrationProperties withOpenAIResourceEndpoint(String openAIResourceEndpoint) {
        this.openAIResourceEndpoint = openAIResourceEndpoint;
        return this;
    }

    /**
     * Get the key property: Value of API key for Open AI resource.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: Value of API key for Open AI resource.
     * 
     * @param key the key value to set.
     * @return the OpenAIIntegrationProperties object itself.
     */
    public OpenAIIntegrationProperties withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the lastRefreshAt property: Last Update Timestamp for key updation.
     * 
     * @return the lastRefreshAt value.
     */
    public OffsetDateTime lastRefreshAt() {
        return this.lastRefreshAt;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("openAIResourceId", this.openAIResourceId);
        jsonWriter.writeStringField("openAIResourceEndpoint", this.openAIResourceEndpoint);
        jsonWriter.writeStringField("key", this.key);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OpenAIIntegrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OpenAIIntegrationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OpenAIIntegrationProperties.
     */
    public static OpenAIIntegrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OpenAIIntegrationProperties deserializedOpenAIIntegrationProperties = new OpenAIIntegrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("openAIResourceId".equals(fieldName)) {
                    deserializedOpenAIIntegrationProperties.openAIResourceId = reader.getString();
                } else if ("openAIResourceEndpoint".equals(fieldName)) {
                    deserializedOpenAIIntegrationProperties.openAIResourceEndpoint = reader.getString();
                } else if ("key".equals(fieldName)) {
                    deserializedOpenAIIntegrationProperties.key = reader.getString();
                } else if ("lastRefreshAt".equals(fieldName)) {
                    deserializedOpenAIIntegrationProperties.lastRefreshAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOpenAIIntegrationProperties;
        });
    }
}
