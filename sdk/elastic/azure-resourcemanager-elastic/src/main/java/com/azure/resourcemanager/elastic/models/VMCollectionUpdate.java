// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Update VM resource collection.
 */
@Fluent
public final class VMCollectionUpdate implements JsonSerializable<VMCollectionUpdate> {
    /*
     * ARM id of the VM resource.
     */
    private String vmResourceId;

    /*
     * Operation to be performed for given VM.
     */
    private OperationName operationName;

    /**
     * Creates an instance of VMCollectionUpdate class.
     */
    public VMCollectionUpdate() {
    }

    /**
     * Get the vmResourceId property: ARM id of the VM resource.
     * 
     * @return the vmResourceId value.
     */
    public String vmResourceId() {
        return this.vmResourceId;
    }

    /**
     * Set the vmResourceId property: ARM id of the VM resource.
     * 
     * @param vmResourceId the vmResourceId value to set.
     * @return the VMCollectionUpdate object itself.
     */
    public VMCollectionUpdate withVmResourceId(String vmResourceId) {
        this.vmResourceId = vmResourceId;
        return this;
    }

    /**
     * Get the operationName property: Operation to be performed for given VM.
     * 
     * @return the operationName value.
     */
    public OperationName operationName() {
        return this.operationName;
    }

    /**
     * Set the operationName property: Operation to be performed for given VM.
     * 
     * @param operationName the operationName value to set.
     * @return the VMCollectionUpdate object itself.
     */
    public VMCollectionUpdate withOperationName(OperationName operationName) {
        this.operationName = operationName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmResourceId", this.vmResourceId);
        jsonWriter.writeStringField("operationName", this.operationName == null ? null : this.operationName.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMCollectionUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMCollectionUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMCollectionUpdate.
     */
    public static VMCollectionUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMCollectionUpdate deserializedVMCollectionUpdate = new VMCollectionUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmResourceId".equals(fieldName)) {
                    deserializedVMCollectionUpdate.vmResourceId = reader.getString();
                } else if ("operationName".equals(fieldName)) {
                    deserializedVMCollectionUpdate.operationName = OperationName.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMCollectionUpdate;
        });
    }
}
