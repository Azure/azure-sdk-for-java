// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.elastic.models.ElasticTrafficFilter;
import java.io.IOException;
import java.util.List;

/**
 * List of elastic traffic filters in the account.
 */
@Fluent
public final class ElasticTrafficFilterResponseInner implements JsonSerializable<ElasticTrafficFilterResponseInner> {
    /*
     * List of elastic traffic filters in the account
     */
    private List<ElasticTrafficFilter> rulesets;

    /**
     * Creates an instance of ElasticTrafficFilterResponseInner class.
     */
    public ElasticTrafficFilterResponseInner() {
    }

    /**
     * Get the rulesets property: List of elastic traffic filters in the account.
     * 
     * @return the rulesets value.
     */
    public List<ElasticTrafficFilter> rulesets() {
        return this.rulesets;
    }

    /**
     * Set the rulesets property: List of elastic traffic filters in the account.
     * 
     * @param rulesets the rulesets value to set.
     * @return the ElasticTrafficFilterResponseInner object itself.
     */
    public ElasticTrafficFilterResponseInner withRulesets(List<ElasticTrafficFilter> rulesets) {
        this.rulesets = rulesets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rulesets() != null) {
            rulesets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("rulesets", this.rulesets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElasticTrafficFilterResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElasticTrafficFilterResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ElasticTrafficFilterResponseInner.
     */
    public static ElasticTrafficFilterResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElasticTrafficFilterResponseInner deserializedElasticTrafficFilterResponseInner
                = new ElasticTrafficFilterResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rulesets".equals(fieldName)) {
                    List<ElasticTrafficFilter> rulesets
                        = reader.readArray(reader1 -> ElasticTrafficFilter.fromJson(reader1));
                    deserializedElasticTrafficFilterResponseInner.rulesets = rulesets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElasticTrafficFilterResponseInner;
        });
    }
}
