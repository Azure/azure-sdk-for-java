// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Stack Versions that this version can upgrade to.
 */
@Fluent
public final class UpgradableVersionsListInner implements JsonSerializable<UpgradableVersionsListInner> {
    /*
     * Current version of the elastic monitor
     */
    private String currentVersion;

    /*
     * Stack Versions that this version can upgrade to
     */
    private List<String> upgradableVersions;

    /**
     * Creates an instance of UpgradableVersionsListInner class.
     */
    public UpgradableVersionsListInner() {
    }

    /**
     * Get the currentVersion property: Current version of the elastic monitor.
     * 
     * @return the currentVersion value.
     */
    public String currentVersion() {
        return this.currentVersion;
    }

    /**
     * Set the currentVersion property: Current version of the elastic monitor.
     * 
     * @param currentVersion the currentVersion value to set.
     * @return the UpgradableVersionsListInner object itself.
     */
    public UpgradableVersionsListInner withCurrentVersion(String currentVersion) {
        this.currentVersion = currentVersion;
        return this;
    }

    /**
     * Get the upgradableVersions property: Stack Versions that this version can upgrade to.
     * 
     * @return the upgradableVersions value.
     */
    public List<String> upgradableVersions() {
        return this.upgradableVersions;
    }

    /**
     * Set the upgradableVersions property: Stack Versions that this version can upgrade to.
     * 
     * @param upgradableVersions the upgradableVersions value to set.
     * @return the UpgradableVersionsListInner object itself.
     */
    public UpgradableVersionsListInner withUpgradableVersions(List<String> upgradableVersions) {
        this.upgradableVersions = upgradableVersions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("currentVersion", this.currentVersion);
        jsonWriter.writeArrayField("upgradableVersions", this.upgradableVersions,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpgradableVersionsListInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpgradableVersionsListInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpgradableVersionsListInner.
     */
    public static UpgradableVersionsListInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpgradableVersionsListInner deserializedUpgradableVersionsListInner = new UpgradableVersionsListInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("currentVersion".equals(fieldName)) {
                    deserializedUpgradableVersionsListInner.currentVersion = reader.getString();
                } else if ("upgradableVersions".equals(fieldName)) {
                    List<String> upgradableVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedUpgradableVersionsListInner.upgradableVersions = upgradableVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpgradableVersionsListInner;
        });
    }
}
