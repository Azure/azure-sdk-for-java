// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Plan details of the monitor resource.
 */
@Fluent
public final class PlanDetails implements JsonSerializable<PlanDetails> {
    /*
     * Offer ID of the plan
     */
    private String offerId;

    /*
     * Publisher ID of the plan
     */
    private String publisherId;

    /*
     * Term ID of the plan
     */
    private String termId;

    /*
     * Plan ID
     */
    private String planId;

    /*
     * Plan Name
     */
    private String planName;

    /**
     * Creates an instance of PlanDetails class.
     */
    public PlanDetails() {
    }

    /**
     * Get the offerId property: Offer ID of the plan.
     * 
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Set the offerId property: Offer ID of the plan.
     * 
     * @param offerId the offerId value to set.
     * @return the PlanDetails object itself.
     */
    public PlanDetails withOfferId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Get the publisherId property: Publisher ID of the plan.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: Publisher ID of the plan.
     * 
     * @param publisherId the publisherId value to set.
     * @return the PlanDetails object itself.
     */
    public PlanDetails withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the termId property: Term ID of the plan.
     * 
     * @return the termId value.
     */
    public String termId() {
        return this.termId;
    }

    /**
     * Set the termId property: Term ID of the plan.
     * 
     * @param termId the termId value to set.
     * @return the PlanDetails object itself.
     */
    public PlanDetails withTermId(String termId) {
        this.termId = termId;
        return this;
    }

    /**
     * Get the planId property: Plan ID.
     * 
     * @return the planId value.
     */
    public String planId() {
        return this.planId;
    }

    /**
     * Set the planId property: Plan ID.
     * 
     * @param planId the planId value to set.
     * @return the PlanDetails object itself.
     */
    public PlanDetails withPlanId(String planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get the planName property: Plan Name.
     * 
     * @return the planName value.
     */
    public String planName() {
        return this.planName;
    }

    /**
     * Set the planName property: Plan Name.
     * 
     * @param planName the planName value to set.
     * @return the PlanDetails object itself.
     */
    public PlanDetails withPlanName(String planName) {
        this.planName = planName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("offerID", this.offerId);
        jsonWriter.writeStringField("publisherID", this.publisherId);
        jsonWriter.writeStringField("termID", this.termId);
        jsonWriter.writeStringField("planID", this.planId);
        jsonWriter.writeStringField("planName", this.planName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlanDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlanDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlanDetails.
     */
    public static PlanDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlanDetails deserializedPlanDetails = new PlanDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("offerID".equals(fieldName)) {
                    deserializedPlanDetails.offerId = reader.getString();
                } else if ("publisherID".equals(fieldName)) {
                    deserializedPlanDetails.publisherId = reader.getString();
                } else if ("termID".equals(fieldName)) {
                    deserializedPlanDetails.termId = reader.getString();
                } else if ("planID".equals(fieldName)) {
                    deserializedPlanDetails.planId = reader.getString();
                } else if ("planName".equals(fieldName)) {
                    deserializedPlanDetails.planName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlanDetails;
        });
    }
}
