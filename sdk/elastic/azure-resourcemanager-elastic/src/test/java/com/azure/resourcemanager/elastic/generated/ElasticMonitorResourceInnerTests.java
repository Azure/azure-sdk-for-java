// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elastic.fluent.models.ElasticMonitorResourceInner;
import com.azure.resourcemanager.elastic.models.ElasticProperties;
import com.azure.resourcemanager.elastic.models.IdentityProperties;
import com.azure.resourcemanager.elastic.models.ManagedIdentityTypes;
import com.azure.resourcemanager.elastic.models.MonitorProperties;
import com.azure.resourcemanager.elastic.models.MonitoringStatus;
import com.azure.resourcemanager.elastic.models.ProvisioningState;
import com.azure.resourcemanager.elastic.models.ResourceSku;
import com.azure.resourcemanager.elastic.models.UserInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ElasticMonitorResourceInnerTests {
    @Test
    public void testDeserialize() {
        ElasticMonitorResourceInner model =
            BinaryData
                .fromString(
                    "{\"sku\":{\"name\":\"lthqtrgqjbp\"},\"properties\":{\"provisioningState\":\"Deleting\",\"monitoringStatus\":\"Enabled\",\"elasticProperties\":{},\"userInfo\":{\"firstName\":\"jrwzox\",\"lastName\":\"tfell\",\"companyName\":\"fziton\",\"emailAddress\":\"qfpjk\"},\"version\":\"ofpdvh\",\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":1680353059},\"identity\":{\"principalId\":\"ninmayhuyb\",\"tenantId\":\"podepoo\",\"type\":\"SystemAssigned\"},\"location\":\"vamih\",\"tags\":{\"vyevcciqi\":\"narxzxtheotus\",\"zrnf\":\"nhungbw\",\"spemvtzfk\":\"gxg\"},\"id\":\"fublj\",\"name\":\"fxqeof\",\"type\":\"aeqjhqjbasvms\"}")
                .toObject(ElasticMonitorResourceInner.class);
        Assertions.assertEquals("vamih", model.location());
        Assertions.assertEquals("narxzxtheotus", model.tags().get("vyevcciqi"));
        Assertions.assertEquals("lthqtrgqjbp", model.sku().name());
        Assertions.assertEquals(ProvisioningState.DELETING, model.properties().provisioningState());
        Assertions.assertEquals(MonitoringStatus.ENABLED, model.properties().monitoringStatus());
        Assertions.assertEquals("jrwzox", model.properties().userInfo().firstName());
        Assertions.assertEquals("tfell", model.properties().userInfo().lastName());
        Assertions.assertEquals("fziton", model.properties().userInfo().companyName());
        Assertions.assertEquals("qfpjk", model.properties().userInfo().emailAddress());
        Assertions.assertEquals("ofpdvh", model.properties().version());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, model.identity().type());
    }

    @Test
    public void testSerialize() {
        ElasticMonitorResourceInner model =
            new ElasticMonitorResourceInner()
                .withLocation("vamih")
                .withTags(mapOf("vyevcciqi", "narxzxtheotus", "zrnf", "nhungbw", "spemvtzfk", "gxg"))
                .withSku(new ResourceSku().withName("lthqtrgqjbp"))
                .withProperties(
                    new MonitorProperties()
                        .withProvisioningState(ProvisioningState.DELETING)
                        .withMonitoringStatus(MonitoringStatus.ENABLED)
                        .withElasticProperties(new ElasticProperties())
                        .withUserInfo(
                            new UserInfo()
                                .withFirstName("jrwzox")
                                .withLastName("tfell")
                                .withCompanyName("fziton")
                                .withEmailAddress("qfpjk"))
                        .withVersion("ofpdvh"))
                .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.SYSTEM_ASSIGNED));
        model = BinaryData.fromObject(model).toObject(ElasticMonitorResourceInner.class);
        Assertions.assertEquals("vamih", model.location());
        Assertions.assertEquals("narxzxtheotus", model.tags().get("vyevcciqi"));
        Assertions.assertEquals("lthqtrgqjbp", model.sku().name());
        Assertions.assertEquals(ProvisioningState.DELETING, model.properties().provisioningState());
        Assertions.assertEquals(MonitoringStatus.ENABLED, model.properties().monitoringStatus());
        Assertions.assertEquals("jrwzox", model.properties().userInfo().firstName());
        Assertions.assertEquals("tfell", model.properties().userInfo().lastName());
        Assertions.assertEquals("fziton", model.properties().userInfo().companyName());
        Assertions.assertEquals("qfpjk", model.properties().userInfo().emailAddress());
        Assertions.assertEquals("ofpdvh", model.properties().version());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, model.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
