// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elastic.fluent.models.MonitoredSubscriptionPropertiesInner;
import com.azure.resourcemanager.elastic.models.FilteringTag;
import com.azure.resourcemanager.elastic.models.LogRules;
import com.azure.resourcemanager.elastic.models.MonitoredSubscription;
import com.azure.resourcemanager.elastic.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.elastic.models.Operation;
import com.azure.resourcemanager.elastic.models.Status;
import com.azure.resourcemanager.elastic.models.SubscriptionList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoredSubscriptionPropertiesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoredSubscriptionPropertiesInner model = BinaryData.fromString(
            "{\"properties\":{\"operation\":\"DeleteComplete\",\"monitoredSubscriptionList\":[{\"subscriptionId\":\"onq\",\"status\":\"Active\",\"error\":\"lrxnjeaseiphe\",\"tagRules\":{\"provisioningState\":\"Updating\",\"logRules\":{\"sendAadLogs\":false,\"sendSubscriptionLogs\":true,\"sendActivityLogs\":false,\"filteringTags\":[{},{},{},{}]}}},{\"subscriptionId\":\"lwtgrhpdj\",\"status\":\"Failed\",\"error\":\"asxazjpqyegualhb\",\"tagRules\":{\"provisioningState\":\"NotSpecified\",\"logRules\":{\"sendAadLogs\":true,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":true,\"filteringTags\":[{},{},{}]}}}],\"provisioningState\":\"NotSpecified\"},\"id\":\"slfhotwm\",\"name\":\"ynpwlbj\",\"type\":\"pgacftadehxnlty\"}")
            .toObject(MonitoredSubscriptionPropertiesInner.class);
        Assertions.assertEquals(Operation.DELETE_COMPLETE, model.properties().operation());
        Assertions.assertEquals("onq", model.properties().monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.ACTIVE, model.properties().monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("lrxnjeaseiphe", model.properties().monitoredSubscriptionList().get(0).error());
        Assertions
            .assertFalse(model.properties().monitoredSubscriptionList().get(0).tagRules().logRules().sendAadLogs());
        Assertions.assertTrue(
            model.properties().monitoredSubscriptionList().get(0).tagRules().logRules().sendSubscriptionLogs());
        Assertions.assertFalse(
            model.properties().monitoredSubscriptionList().get(0).tagRules().logRules().sendActivityLogs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoredSubscriptionPropertiesInner model
            = new MonitoredSubscriptionPropertiesInner()
                .withProperties(
                    new SubscriptionList().withOperation(Operation.DELETE_COMPLETE)
                        .withMonitoredSubscriptionList(Arrays.asList(
                            new MonitoredSubscription().withSubscriptionId("onq")
                                .withStatus(Status.ACTIVE)
                                .withError("lrxnjeaseiphe")
                                .withTagRules(new MonitoringTagRulesProperties().withLogRules(
                                    new LogRules().withSendAadLogs(false)
                                        .withSendSubscriptionLogs(true)
                                        .withSendActivityLogs(false)
                                        .withFilteringTags(Arrays.asList(new FilteringTag(), new FilteringTag(),
                                            new FilteringTag(), new FilteringTag())))),
                            new MonitoredSubscription().withSubscriptionId("lwtgrhpdj")
                                .withStatus(Status.FAILED)
                                .withError("asxazjpqyegualhb")
                                .withTagRules(new MonitoringTagRulesProperties().withLogRules(new LogRules()
                                    .withSendAadLogs(true)
                                    .withSendSubscriptionLogs(false)
                                    .withSendActivityLogs(true)
                                    .withFilteringTags(
                                        Arrays.asList(new FilteringTag(), new FilteringTag(), new FilteringTag())))))));
        model = BinaryData.fromObject(model).toObject(MonitoredSubscriptionPropertiesInner.class);
        Assertions.assertEquals(Operation.DELETE_COMPLETE, model.properties().operation());
        Assertions.assertEquals("onq", model.properties().monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.ACTIVE, model.properties().monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("lrxnjeaseiphe", model.properties().monitoredSubscriptionList().get(0).error());
        Assertions
            .assertFalse(model.properties().monitoredSubscriptionList().get(0).tagRules().logRules().sendAadLogs());
        Assertions.assertTrue(
            model.properties().monitoredSubscriptionList().get(0).tagRules().logRules().sendSubscriptionLogs());
        Assertions.assertFalse(
            model.properties().monitoredSubscriptionList().get(0).tagRules().logRules().sendActivityLogs());
    }
}
