// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elastic.fluent.models.MonitoredSubscriptionPropertiesInner;
import com.azure.resourcemanager.elastic.models.MonitoredSubscription;
import com.azure.resourcemanager.elastic.models.MonitoredSubscriptionPropertiesList;
import com.azure.resourcemanager.elastic.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.elastic.models.Operation;
import com.azure.resourcemanager.elastic.models.Status;
import com.azure.resourcemanager.elastic.models.SubscriptionList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoredSubscriptionPropertiesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoredSubscriptionPropertiesList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"operation\":\"DeleteBegin\",\"monitoredSubscriptionList\":[{\"subscriptionId\":\"kftutqxlngxlefg\",\"status\":\"Active\",\"error\":\"krxd\",\"tagRules\":{}},{\"subscriptionId\":\"dt\",\"status\":\"Active\",\"error\":\"vqdra\",\"tagRules\":{}},{\"subscriptionId\":\"yb\",\"status\":\"Failed\",\"error\":\"oqfbowskanyk\",\"tagRules\":{}},{\"subscriptionId\":\"cuiywgqyw\",\"status\":\"Active\",\"error\":\"vynhzgpphrcg\",\"tagRules\":{}}],\"provisioningState\":\"Canceled\"},\"id\":\"cpecfvmmcoofs\",\"name\":\"lzevgbmqjqab\",\"type\":\"y\"},{\"properties\":{\"operation\":\"DeleteBegin\",\"monitoredSubscriptionList\":[{\"subscriptionId\":\"zuvccfwnfnbacfio\",\"status\":\"Failed\",\"error\":\"x\",\"tagRules\":{}}],\"provisioningState\":\"Deleted\"},\"id\":\"tzxdpnqbqqwx\",\"name\":\"jfeallnwsub\",\"type\":\"snjampmng\"}],\"nextLink\":\"scxaq\"}")
            .toObject(MonitoredSubscriptionPropertiesList.class);
        Assertions.assertEquals(Operation.DELETE_BEGIN, model.value().get(0).properties().operation());
        Assertions.assertEquals("kftutqxlngxlefg",
            model.value().get(0).properties().monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.ACTIVE,
            model.value().get(0).properties().monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("krxd", model.value().get(0).properties().monitoredSubscriptionList().get(0).error());
        Assertions.assertEquals("scxaq", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoredSubscriptionPropertiesList model = new MonitoredSubscriptionPropertiesList().withValue(Arrays.asList(
            new MonitoredSubscriptionPropertiesInner()
                .withProperties(new SubscriptionList().withOperation(Operation.DELETE_BEGIN)
                    .withMonitoredSubscriptionList(Arrays.asList(
                        new MonitoredSubscription().withSubscriptionId("kftutqxlngxlefg")
                            .withStatus(Status.ACTIVE)
                            .withError("krxd")
                            .withTagRules(new MonitoringTagRulesProperties()),
                        new MonitoredSubscription().withSubscriptionId("dt")
                            .withStatus(Status.ACTIVE)
                            .withError("vqdra")
                            .withTagRules(new MonitoringTagRulesProperties()),
                        new MonitoredSubscription().withSubscriptionId("yb")
                            .withStatus(Status.FAILED)
                            .withError("oqfbowskanyk")
                            .withTagRules(new MonitoringTagRulesProperties()),
                        new MonitoredSubscription().withSubscriptionId("cuiywgqyw")
                            .withStatus(Status.ACTIVE)
                            .withError("vynhzgpphrcg")
                            .withTagRules(new MonitoringTagRulesProperties())))),
            new MonitoredSubscriptionPropertiesInner()
                .withProperties(new SubscriptionList().withOperation(Operation.DELETE_BEGIN)
                    .withMonitoredSubscriptionList(
                        Arrays.asList(new MonitoredSubscription().withSubscriptionId("zuvccfwnfnbacfio")
                            .withStatus(Status.FAILED)
                            .withError("x")
                            .withTagRules(new MonitoringTagRulesProperties()))))))
            .withNextLink("scxaq");
        model = BinaryData.fromObject(model).toObject(MonitoredSubscriptionPropertiesList.class);
        Assertions.assertEquals(Operation.DELETE_BEGIN, model.value().get(0).properties().operation());
        Assertions.assertEquals("kftutqxlngxlefg",
            model.value().get(0).properties().monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.ACTIVE,
            model.value().get(0).properties().monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("krxd", model.value().get(0).properties().monitoredSubscriptionList().get(0).error());
        Assertions.assertEquals("scxaq", model.nextLink());
    }
}
