// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elastic.models.FilteringTag;
import com.azure.resourcemanager.elastic.models.LogRules;
import com.azure.resourcemanager.elastic.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.elastic.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoringTagRulesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoringTagRulesProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"logRules\":{\"sendAadLogs\":true,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":false,\"filteringTags\":[{\"name\":\"vhezrkgqhcj\",\"value\":\"fovgmkqsleyyvxy\",\"action\":\"Include\"},{\"name\":\"cattpngjcrcczsq\",\"value\":\"hvmdajvnysounq\",\"action\":\"Include\"},{\"name\":\"oaeupfhyhltrpmo\",\"value\":\"mcmatuokthfuiu\",\"action\":\"Exclude\"}]}}")
            .toObject(MonitoringTagRulesProperties.class);
        Assertions.assertTrue(model.logRules().sendAadLogs());
        Assertions.assertFalse(model.logRules().sendSubscriptionLogs());
        Assertions.assertFalse(model.logRules().sendActivityLogs());
        Assertions.assertEquals("vhezrkgqhcj", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("fovgmkqsleyyvxy", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoringTagRulesProperties model = new MonitoringTagRulesProperties().withLogRules(new LogRules()
            .withSendAadLogs(true)
            .withSendSubscriptionLogs(false)
            .withSendActivityLogs(false)
            .withFilteringTags(Arrays.asList(
                new FilteringTag().withName("vhezrkgqhcj").withValue("fovgmkqsleyyvxy").withAction(TagAction.INCLUDE),
                new FilteringTag().withName("cattpngjcrcczsq")
                    .withValue("hvmdajvnysounq")
                    .withAction(TagAction.INCLUDE),
                new FilteringTag().withName("oaeupfhyhltrpmo")
                    .withValue("mcmatuokthfuiu")
                    .withAction(TagAction.EXCLUDE))));
        model = BinaryData.fromObject(model).toObject(MonitoringTagRulesProperties.class);
        Assertions.assertTrue(model.logRules().sendAadLogs());
        Assertions.assertFalse(model.logRules().sendSubscriptionLogs());
        Assertions.assertFalse(model.logRules().sendActivityLogs());
        Assertions.assertEquals("vhezrkgqhcj", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("fovgmkqsleyyvxy", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
    }
}
