// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elastic.models.FilteringTag;
import com.azure.resourcemanager.elastic.models.LogRules;
import com.azure.resourcemanager.elastic.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.elastic.models.ProvisioningState;
import com.azure.resourcemanager.elastic.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MonitoringTagRulesPropertiesTests {
    @Test
    public void testDeserialize() {
        MonitoringTagRulesProperties model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Canceled\",\"logRules\":{\"sendAadLogs\":false,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":true,\"filteringTags\":[{\"name\":\"xhvpmoue\",\"value\":\"dzxibqeojnxqbzvd\",\"action\":\"Include\"},{\"name\":\"ndei\",\"value\":\"twnpzaoqvuhrhcf\",\"action\":\"Include\"}]}}")
                .toObject(MonitoringTagRulesProperties.class);
        Assertions.assertEquals(ProvisioningState.CANCELED, model.provisioningState());
        Assertions.assertEquals(false, model.logRules().sendAadLogs());
        Assertions.assertEquals(false, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(true, model.logRules().sendActivityLogs());
        Assertions.assertEquals("xhvpmoue", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("dzxibqeojnxqbzvd", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
    }

    @Test
    public void testSerialize() {
        MonitoringTagRulesProperties model =
            new MonitoringTagRulesProperties()
                .withProvisioningState(ProvisioningState.CANCELED)
                .withLogRules(
                    new LogRules()
                        .withSendAadLogs(false)
                        .withSendSubscriptionLogs(false)
                        .withSendActivityLogs(true)
                        .withFilteringTags(
                            Arrays
                                .asList(
                                    new FilteringTag()
                                        .withName("xhvpmoue")
                                        .withValue("dzxibqeojnxqbzvd")
                                        .withAction(TagAction.INCLUDE),
                                    new FilteringTag()
                                        .withName("ndei")
                                        .withValue("twnpzaoqvuhrhcf")
                                        .withAction(TagAction.INCLUDE))));
        model = BinaryData.fromObject(model).toObject(MonitoringTagRulesProperties.class);
        Assertions.assertEquals(ProvisioningState.CANCELED, model.provisioningState());
        Assertions.assertEquals(false, model.logRules().sendAadLogs());
        Assertions.assertEquals(false, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(true, model.logRules().sendActivityLogs());
        Assertions.assertEquals("xhvpmoue", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("dzxibqeojnxqbzvd", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
    }
}
