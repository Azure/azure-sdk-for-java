// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.elastic.ElasticManager;
import com.azure.resourcemanager.elastic.models.ElasticTrafficFilterResponse;
import com.azure.resourcemanager.elastic.models.Type;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AllTrafficFiltersListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"rulesets\":[{\"id\":\"bh\",\"name\":\"nlankxmyskpb\",\"description\":\"nbtkcxywnytnr\",\"region\":\"nlqidybyxczf\",\"type\":\"azure_private_endpoint\",\"includeByDefault\":false,\"rules\":[]},{\"id\":\"abphlw\",\"name\":\"lfktsths\",\"description\":\"ocmnyyazttbtwwrq\",\"region\":\"edckzywbiexzfey\",\"type\":\"ip\",\"includeByDefault\":false,\"rules\":[]},{\"id\":\"jwbhqwalmuz\",\"name\":\"xaepdkzjancuxr\",\"description\":\"wbavxbniwdj\",\"region\":\"zt\",\"type\":\"ip\",\"includeByDefault\":true,\"rules\":[]}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ElasticManager manager =
            ElasticManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ElasticTrafficFilterResponse response =
            manager
                .allTrafficFilters()
                .listWithResponse("na", "zmhjrunmp", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("bh", response.rulesets().get(0).id());
        Assertions.assertEquals("nlankxmyskpb", response.rulesets().get(0).name());
        Assertions.assertEquals("nbtkcxywnytnr", response.rulesets().get(0).description());
        Assertions.assertEquals("nlqidybyxczf", response.rulesets().get(0).region());
        Assertions.assertEquals(Type.AZURE_PRIVATE_ENDPOINT, response.rulesets().get(0).type());
        Assertions.assertEquals(false, response.rulesets().get(0).includeByDefault());
    }
}
