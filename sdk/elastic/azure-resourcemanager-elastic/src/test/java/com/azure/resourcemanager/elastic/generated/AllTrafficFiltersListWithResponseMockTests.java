// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elastic.ElasticManager;
import com.azure.resourcemanager.elastic.models.ElasticTrafficFilterResponse;
import com.azure.resourcemanager.elastic.models.Type;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AllTrafficFiltersListWithResponseMockTests {
    @Test
    public void testListWithResponse() throws Exception {
        String responseStr
            = "{\"rulesets\":[{\"id\":\"h\",\"name\":\"knfd\",\"description\":\"wjchrdg\",\"region\":\"hxumwctondzj\",\"type\":\"ip\",\"includeByDefault\":false,\"rules\":[{\"source\":\"gg\",\"description\":\"sb\",\"azureEndpointGuid\":\"ovvtgseinqfiu\",\"azureEndpointName\":\"qknp\",\"id\":\"gnepttwqmsni\"}]},{\"id\":\"cdm\",\"name\":\"r\",\"description\":\"lpijnkrxfrd\",\"region\":\"c\",\"type\":\"azure_private_endpoint\",\"includeByDefault\":false,\"rules\":[{\"source\":\"nasx\",\"description\":\"tozqyzhftwesgo\",\"azureEndpointGuid\":\"zhonnxkrlgnyhmo\",\"azureEndpointName\":\"xkk\",\"id\":\"h\"},{\"source\":\"gh\",\"description\":\"bdhqxvcxgf\",\"azureEndpointGuid\":\"dsofbshrns\",\"azureEndpointName\":\"uswdv\",\"id\":\"ybycnunvj\"},{\"source\":\"tkfa\",\"description\":\"opqgikyzirtxdyux\",\"azureEndpointGuid\":\"jntpsewgioilqu\",\"azureEndpointName\":\"ydxtqm\",\"id\":\"ox\"}]},{\"id\":\"ggufhyaomtb\",\"name\":\"havgrvk\",\"description\":\"ovjzhpjbibgjmfx\",\"region\":\"vfcluyovwxnbkfe\",\"type\":\"azure_private_endpoint\",\"includeByDefault\":false,\"rules\":[{\"source\":\"zdgiruj\",\"description\":\"bomvzzbtdcqv\",\"azureEndpointGuid\":\"iyujviylwdshfs\",\"azureEndpointName\":\"rbgyefry\",\"id\":\"gaojf\"},{\"source\":\"nc\",\"description\":\"mrfhirctymox\",\"azureEndpointGuid\":\"tpipiwyczuhx\",\"azureEndpointName\":\"pqjlihhyusps\",\"id\":\"sdvlmfwdgzxulucv\"},{\"source\":\"mrsreuzvxurisjnh\",\"description\":\"txifqj\",\"azureEndpointGuid\":\"xmrhu\",\"azureEndpointName\":\"wp\",\"id\":\"sutrgjup\"}]}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticManager manager = ElasticManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ElasticTrafficFilterResponse response = manager.allTrafficFilters()
            .listWithResponse("doiwi", "thtywub", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("h", response.rulesets().get(0).id());
        Assertions.assertEquals("knfd", response.rulesets().get(0).name());
        Assertions.assertEquals("wjchrdg", response.rulesets().get(0).description());
        Assertions.assertEquals("hxumwctondzj", response.rulesets().get(0).region());
        Assertions.assertEquals(Type.IP, response.rulesets().get(0).type());
        Assertions.assertFalse(response.rulesets().get(0).includeByDefault());
        Assertions.assertEquals("gg", response.rulesets().get(0).rules().get(0).source());
        Assertions.assertEquals("sb", response.rulesets().get(0).rules().get(0).description());
        Assertions.assertEquals("ovvtgseinqfiu", response.rulesets().get(0).rules().get(0).azureEndpointGuid());
        Assertions.assertEquals("qknp", response.rulesets().get(0).rules().get(0).azureEndpointName());
        Assertions.assertEquals("gnepttwqmsni", response.rulesets().get(0).rules().get(0).id());
    }
}
