// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.elastic.ElasticManager;
import com.azure.resourcemanager.elastic.models.ElasticMonitorResource;
import com.azure.resourcemanager.elastic.models.ManagedIdentityTypes;
import com.azure.resourcemanager.elastic.models.MonitoringStatus;
import com.azure.resourcemanager.elastic.models.ProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MonitorsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"sku\":{\"name\":\"wqsmbsur\"},\"properties\":{\"provisioningState\":\"NotSpecified\",\"monitoringStatus\":\"Disabled\",\"elasticProperties\":{},\"userInfo\":{\"firstName\":\"fksymddystki\",\"lastName\":\"xhqyudxorrqnb\",\"companyName\":\"czvyifq\",\"emailAddress\":\"kdvjsll\"},\"version\":\"vdfwatkpn\",\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":1948903121},\"identity\":{\"principalId\":\"czwtruwiqzbqjv\",\"tenantId\":\"vmyokacspkwl\",\"type\":\"SystemAssigned\"},\"location\":\"bpxjmfl\",\"tags\":{\"juqk\":\"nchrkcciww\",\"iwkuofos\":\"rsa\",\"ugidyjrr\":\"ghsauuimjmvxied\"},\"id\":\"byao\",\"name\":\"v\",\"type\":\"xc\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ElasticManager manager =
            ElasticManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ElasticMonitorResource> response = manager.monitors().list(Context.NONE);

        Assertions.assertEquals("bpxjmfl", response.iterator().next().location());
        Assertions.assertEquals("nchrkcciww", response.iterator().next().tags().get("juqk"));
        Assertions.assertEquals("wqsmbsur", response.iterator().next().sku().name());
        Assertions
            .assertEquals(ProvisioningState.NOT_SPECIFIED, response.iterator().next().properties().provisioningState());
        Assertions.assertEquals(MonitoringStatus.DISABLED, response.iterator().next().properties().monitoringStatus());
        Assertions.assertEquals("fksymddystki", response.iterator().next().properties().userInfo().firstName());
        Assertions.assertEquals("xhqyudxorrqnb", response.iterator().next().properties().userInfo().lastName());
        Assertions.assertEquals("czvyifq", response.iterator().next().properties().userInfo().companyName());
        Assertions.assertEquals("kdvjsll", response.iterator().next().properties().userInfo().emailAddress());
        Assertions.assertEquals("vdfwatkpn", response.iterator().next().properties().version());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
    }
}
