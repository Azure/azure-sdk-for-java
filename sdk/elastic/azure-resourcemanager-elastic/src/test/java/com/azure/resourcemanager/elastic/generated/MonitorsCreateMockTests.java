// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.elastic.ElasticManager;
import com.azure.resourcemanager.elastic.models.ElasticMonitorResource;
import com.azure.resourcemanager.elastic.models.ElasticProperties;
import com.azure.resourcemanager.elastic.models.IdentityProperties;
import com.azure.resourcemanager.elastic.models.ManagedIdentityTypes;
import com.azure.resourcemanager.elastic.models.MonitorProperties;
import com.azure.resourcemanager.elastic.models.MonitoringStatus;
import com.azure.resourcemanager.elastic.models.ProvisioningState;
import com.azure.resourcemanager.elastic.models.ResourceSku;
import com.azure.resourcemanager.elastic.models.UserInfo;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MonitorsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"name\":\"xrhdwbavxbniwdjs\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"monitoringStatus\":\"Enabled\",\"elasticProperties\":{},\"userInfo\":{\"firstName\":\"txhp\",\"lastName\":\"bzpfzab\",\"companyName\":\"cuh\",\"emailAddress\":\"tcty\"},\"version\":\"lbbovplw\",\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":487628587},\"identity\":{\"principalId\":\"gu\",\"tenantId\":\"vmkfssxqu\",\"type\":\"SystemAssigned\"},\"location\":\"l\",\"tags\":{\"wiyighxpkdw\":\"sxnkjzkdeslpvlo\",\"upedeojnabckhs\":\"baiuebbaumny\",\"ie\":\"txp\",\"jdhtldwkyzxu\":\"tfhvpesapskrdqmh\"},\"id\":\"tkncwsc\",\"name\":\"svlxotogtwrup\",\"type\":\"sx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ElasticManager manager =
            ElasticManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ElasticMonitorResource response =
            manager
                .monitors()
                .define("y")
                .withRegion("yn")
                .withExistingResourceGroup("ispnqzahmgkbrp")
                .withTags(mapOf("dbabp", "dybyxczfclhaa", "fkts", "lwrq", "nyyazttbtwwrqpue", "hsucoc"))
                .withSku(new ResourceSku().withName("ibnuqqkpik"))
                .withProperties(
                    new MonitorProperties()
                        .withProvisioningState(ProvisioningState.UPDATING)
                        .withMonitoringStatus(MonitoringStatus.DISABLED)
                        .withElasticProperties(new ElasticProperties())
                        .withUserInfo(
                            new UserInfo()
                                .withFirstName("uynhijg")
                                .withLastName("ebf")
                                .withCompanyName("arbu")
                                .withEmailAddress("cvpnazzmhjrunmpx"))
                        .withVersion("bh"))
                .withIdentity(new IdentityProperties().withType(ManagedIdentityTypes.SYSTEM_ASSIGNED))
                .create();

        Assertions.assertEquals("l", response.location());
        Assertions.assertEquals("sxnkjzkdeslpvlo", response.tags().get("wiyighxpkdw"));
        Assertions.assertEquals("xrhdwbavxbniwdjs", response.sku().name());
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals(MonitoringStatus.ENABLED, response.properties().monitoringStatus());
        Assertions.assertEquals("txhp", response.properties().userInfo().firstName());
        Assertions.assertEquals("bzpfzab", response.properties().userInfo().lastName());
        Assertions.assertEquals("cuh", response.properties().userInfo().companyName());
        Assertions.assertEquals("tcty", response.properties().userInfo().emailAddress());
        Assertions.assertEquals("lbbovplw", response.properties().version());
        Assertions.assertEquals(ManagedIdentityTypes.SYSTEM_ASSIGNED, response.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
