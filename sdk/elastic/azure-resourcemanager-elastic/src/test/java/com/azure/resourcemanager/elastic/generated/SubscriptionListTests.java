// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elastic.models.FilteringTag;
import com.azure.resourcemanager.elastic.models.LogRules;
import com.azure.resourcemanager.elastic.models.MonitoredSubscription;
import com.azure.resourcemanager.elastic.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.elastic.models.Operation;
import com.azure.resourcemanager.elastic.models.Status;
import com.azure.resourcemanager.elastic.models.SubscriptionList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubscriptionListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubscriptionList model = BinaryData.fromString(
            "{\"operation\":\"Active\",\"monitoredSubscriptionList\":[{\"subscriptionId\":\"suesnzw\",\"status\":\"Failed\",\"error\":\"avo\",\"tagRules\":{\"provisioningState\":\"Succeeded\",\"logRules\":{\"sendAadLogs\":true,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":true,\"filteringTags\":[{},{},{},{}]}}},{\"subscriptionId\":\"wxdndnvowgujjug\",\"status\":\"Failed\",\"error\":\"glhslazj\",\"tagRules\":{\"provisioningState\":\"Canceled\",\"logRules\":{\"sendAadLogs\":false,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":false,\"filteringTags\":[{},{}]}}}],\"provisioningState\":\"Accepted\"}")
            .toObject(SubscriptionList.class);
        Assertions.assertEquals(Operation.ACTIVE, model.operation());
        Assertions.assertEquals("suesnzw", model.monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.FAILED, model.monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("avo", model.monitoredSubscriptionList().get(0).error());
        Assertions.assertTrue(model.monitoredSubscriptionList().get(0).tagRules().logRules().sendAadLogs());
        Assertions.assertFalse(model.monitoredSubscriptionList().get(0).tagRules().logRules().sendSubscriptionLogs());
        Assertions.assertTrue(model.monitoredSubscriptionList().get(0).tagRules().logRules().sendActivityLogs());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubscriptionList model = new SubscriptionList().withOperation(Operation.ACTIVE)
            .withMonitoredSubscriptionList(Arrays.asList(
                new MonitoredSubscription()
                    .withSubscriptionId("suesnzw")
                    .withStatus(Status.FAILED)
                    .withError("avo")
                    .withTagRules(
                        new MonitoringTagRulesProperties().withLogRules(new LogRules().withSendAadLogs(true)
                            .withSendSubscriptionLogs(false)
                            .withSendActivityLogs(true)
                            .withFilteringTags(Arrays.asList(new FilteringTag(), new FilteringTag(), new FilteringTag(),
                                new FilteringTag())))),
                new MonitoredSubscription().withSubscriptionId("wxdndnvowgujjug")
                    .withStatus(Status.FAILED)
                    .withError("glhslazj")
                    .withTagRules(new MonitoringTagRulesProperties().withLogRules(new LogRules().withSendAadLogs(false)
                        .withSendSubscriptionLogs(false)
                        .withSendActivityLogs(false)
                        .withFilteringTags(Arrays.asList(new FilteringTag(), new FilteringTag()))))));
        model = BinaryData.fromObject(model).toObject(SubscriptionList.class);
        Assertions.assertEquals(Operation.ACTIVE, model.operation());
        Assertions.assertEquals("suesnzw", model.monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.FAILED, model.monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("avo", model.monitoredSubscriptionList().get(0).error());
        Assertions.assertTrue(model.monitoredSubscriptionList().get(0).tagRules().logRules().sendAadLogs());
        Assertions.assertFalse(model.monitoredSubscriptionList().get(0).tagRules().logRules().sendSubscriptionLogs());
        Assertions.assertTrue(model.monitoredSubscriptionList().get(0).tagRules().logRules().sendActivityLogs());
    }
}
