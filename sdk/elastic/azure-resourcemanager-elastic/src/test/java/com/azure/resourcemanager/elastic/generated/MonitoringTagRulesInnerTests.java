// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elastic.fluent.models.MonitoringTagRulesInner;
import com.azure.resourcemanager.elastic.models.FilteringTag;
import com.azure.resourcemanager.elastic.models.LogRules;
import com.azure.resourcemanager.elastic.models.MonitoringTagRulesProperties;
import com.azure.resourcemanager.elastic.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MonitoringTagRulesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MonitoringTagRulesInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"logRules\":{\"sendAadLogs\":true,\"sendSubscriptionLogs\":false,\"sendActivityLogs\":true,\"filteringTags\":[{\"name\":\"oyrxvwfudwpzntxh\",\"value\":\"hl\",\"action\":\"Exclude\"},{\"name\":\"hckfrlhrx\",\"value\":\"kyv\",\"action\":\"Include\"}]}},\"id\":\"n\",\"name\":\"z\",\"type\":\"p\"}")
            .toObject(MonitoringTagRulesInner.class);
        Assertions.assertTrue(model.properties().logRules().sendAadLogs());
        Assertions.assertFalse(model.properties().logRules().sendSubscriptionLogs());
        Assertions.assertTrue(model.properties().logRules().sendActivityLogs());
        Assertions.assertEquals("oyrxvwfudwpzntxh", model.properties().logRules().filteringTags().get(0).name());
        Assertions.assertEquals("hl", model.properties().logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.properties().logRules().filteringTags().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MonitoringTagRulesInner model = new MonitoringTagRulesInner()
            .withProperties(new MonitoringTagRulesProperties().withLogRules(new LogRules().withSendAadLogs(true)
                .withSendSubscriptionLogs(false)
                .withSendActivityLogs(true)
                .withFilteringTags(Arrays.asList(
                    new FilteringTag().withName("oyrxvwfudwpzntxh").withValue("hl").withAction(TagAction.EXCLUDE),
                    new FilteringTag().withName("hckfrlhrx").withValue("kyv").withAction(TagAction.INCLUDE)))));
        model = BinaryData.fromObject(model).toObject(MonitoringTagRulesInner.class);
        Assertions.assertTrue(model.properties().logRules().sendAadLogs());
        Assertions.assertFalse(model.properties().logRules().sendSubscriptionLogs());
        Assertions.assertTrue(model.properties().logRules().sendActivityLogs());
        Assertions.assertEquals("oyrxvwfudwpzntxh", model.properties().logRules().filteringTags().get(0).name());
        Assertions.assertEquals("hl", model.properties().logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.properties().logRules().filteringTags().get(0).action());
    }
}
