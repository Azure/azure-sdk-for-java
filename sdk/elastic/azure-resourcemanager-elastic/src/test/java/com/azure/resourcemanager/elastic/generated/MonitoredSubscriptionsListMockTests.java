// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elastic.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elastic.ElasticManager;
import com.azure.resourcemanager.elastic.models.MonitoredSubscriptionProperties;
import com.azure.resourcemanager.elastic.models.Operation;
import com.azure.resourcemanager.elastic.models.Status;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MonitoredSubscriptionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"operation\":\"Active\",\"monitoredSubscriptionList\":[{\"subscriptionId\":\"aztz\",\"status\":\"InProgress\",\"error\":\"cckwyfzqwhxxbu\",\"tagRules\":{\"provisioningState\":\"Updating\",\"logRules\":{}}}],\"provisioningState\":\"Succeeded\"},\"id\":\"qztpp\",\"name\":\"iolxor\",\"type\":\"altol\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticManager manager = ElasticManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<MonitoredSubscriptionProperties> response = manager.monitoredSubscriptions()
            .list("beyvpnqicvinvkjj", "dxrbuukzcle", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(Operation.ACTIVE, response.iterator().next().properties().operation());
        Assertions.assertEquals("aztz",
            response.iterator().next().properties().monitoredSubscriptionList().get(0).subscriptionId());
        Assertions.assertEquals(Status.IN_PROGRESS,
            response.iterator().next().properties().monitoredSubscriptionList().get(0).status());
        Assertions.assertEquals("cckwyfzqwhxxbu",
            response.iterator().next().properties().monitoredSubscriptionList().get(0).error());
    }
}
