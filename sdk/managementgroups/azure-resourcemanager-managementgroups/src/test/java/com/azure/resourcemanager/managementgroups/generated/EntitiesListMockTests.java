// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managementgroups.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managementgroups.ManagementGroupsManager;
import com.azure.resourcemanager.managementgroups.models.EntityInfo;
import com.azure.resourcemanager.managementgroups.models.EntitySearchType;
import com.azure.resourcemanager.managementgroups.models.EntityViewParameterType;
import com.azure.resourcemanager.managementgroups.models.Permissions;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class EntitiesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"id\":\"ievseotgqrllt\",\"type\":\"wlauwzizxbmpg\",\"name\":\"efuzmuvpbttd\",\"properties\":{\"tenantId\":\"rp\",\"displayName\":\"ebmnzbtbhjpglk\",\"parent\":{\"id\":\"hdneuelfph\"},\"permissions\":\"delete\",\"inheritedPermissions\":\"noaccess\",\"numberOfDescendants\":1295837012,\"numberOfChildren\":743689634,\"numberOfChildGroups\":1930922340,\"parentDisplayNameChain\":[\"wq\",\"uvxzxclvi\",\"hhqzonosgg\",\"hcohfwdsjnk\"],\"parentNameChain\":[\"utiiswacf\",\"gdkz\",\"ewkfvhqcrai\"]}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ManagementGroupsManager manager =
            ManagementGroupsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<EntityInfo> response =
            manager
                .entities()
                .list(
                    "xmhhvhgureo",
                    860424274,
                    1245356368,
                    "obdagxtibqdxb",
                    EntitySearchType.PARENT_ONLY,
                    "akbogqxndlkzgxh",
                    EntityViewParameterType.FULL_HIERARCHY,
                    "iplbpodxunkbebxm",
                    "byyntwlrbqt",
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rp", response.iterator().next().tenantId());
        Assertions.assertEquals("ebmnzbtbhjpglk", response.iterator().next().displayName());
        Assertions.assertEquals("hdneuelfph", response.iterator().next().parent().id());
        Assertions.assertEquals(Permissions.DELETE, response.iterator().next().permissions());
        Assertions.assertEquals(Permissions.NOACCESS, response.iterator().next().inheritedPermissions());
        Assertions.assertEquals(1295837012, response.iterator().next().numberOfDescendants());
        Assertions.assertEquals(743689634, response.iterator().next().numberOfChildren());
        Assertions.assertEquals(1930922340, response.iterator().next().numberOfChildGroups());
        Assertions.assertEquals("wq", response.iterator().next().parentDisplayNameChain().get(0));
        Assertions.assertEquals("utiiswacf", response.iterator().next().parentNameChain().get(0));
    }
}
