// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managementgroups.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managementgroups.models.ManagementGroupChildInfo;
import com.azure.resourcemanager.managementgroups.models.ManagementGroupDetails;
import java.io.IOException;
import java.util.List;

/**
 * The generic properties of a management group.
 */
@Fluent
public final class ManagementGroupProperties implements JsonSerializable<ManagementGroupProperties> {
    /*
     * The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000
     */
    private String tenantId;

    /*
     * The friendly name of the management group.
     */
    private String displayName;

    /*
     * The details of a management group.
     */
    private ManagementGroupDetails details;

    /*
     * The list of children.
     */
    private List<ManagementGroupChildInfo> children;

    /**
     * Creates an instance of ManagementGroupProperties class.
     */
    public ManagementGroupProperties() {
    }

    /**
     * Get the tenantId property: The AAD Tenant ID associated with the management group. For example,
     * 00000000-0000-0000-0000-000000000000.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The AAD Tenant ID associated with the management group. For example,
     * 00000000-0000-0000-0000-000000000000.
     * 
     * @param tenantId the tenantId value to set.
     * @return the ManagementGroupProperties object itself.
     */
    public ManagementGroupProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the displayName property: The friendly name of the management group.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The friendly name of the management group.
     * 
     * @param displayName the displayName value to set.
     * @return the ManagementGroupProperties object itself.
     */
    public ManagementGroupProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the details property: The details of a management group.
     * 
     * @return the details value.
     */
    public ManagementGroupDetails details() {
        return this.details;
    }

    /**
     * Set the details property: The details of a management group.
     * 
     * @param details the details value to set.
     * @return the ManagementGroupProperties object itself.
     */
    public ManagementGroupProperties withDetails(ManagementGroupDetails details) {
        this.details = details;
        return this;
    }

    /**
     * Get the children property: The list of children.
     * 
     * @return the children value.
     */
    public List<ManagementGroupChildInfo> children() {
        return this.children;
    }

    /**
     * Set the children property: The list of children.
     * 
     * @param children the children value to set.
     * @return the ManagementGroupProperties object itself.
     */
    public ManagementGroupProperties withChildren(List<ManagementGroupChildInfo> children) {
        this.children = children;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (details() != null) {
            details().validate();
        }
        if (children() != null) {
            children().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("details", this.details);
        jsonWriter.writeArrayField("children", this.children, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagementGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagementGroupProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagementGroupProperties.
     */
    public static ManagementGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagementGroupProperties deserializedManagementGroupProperties = new ManagementGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedManagementGroupProperties.tenantId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedManagementGroupProperties.displayName = reader.getString();
                } else if ("details".equals(fieldName)) {
                    deserializedManagementGroupProperties.details = ManagementGroupDetails.fromJson(reader);
                } else if ("children".equals(fieldName)) {
                    List<ManagementGroupChildInfo> children
                        = reader.readArray(reader1 -> ManagementGroupChildInfo.fromJson(reader1));
                    deserializedManagementGroupProperties.children = children;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagementGroupProperties;
        });
    }
}
