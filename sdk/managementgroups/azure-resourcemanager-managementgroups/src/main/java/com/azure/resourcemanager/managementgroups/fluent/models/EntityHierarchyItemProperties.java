// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managementgroups.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managementgroups.models.EntityHierarchyItem;
import com.azure.resourcemanager.managementgroups.models.Permissions;
import java.io.IOException;
import java.util.List;

/**
 * The generic properties of a management group.
 */
@Fluent
public final class EntityHierarchyItemProperties implements JsonSerializable<EntityHierarchyItemProperties> {
    /*
     * The friendly name of the management group.
     */
    private String displayName;

    /*
     * The users specific permissions to this item.
     */
    private Permissions permissions;

    /*
     * The list of children.
     */
    private List<EntityHierarchyItem> children;

    /**
     * Creates an instance of EntityHierarchyItemProperties class.
     */
    public EntityHierarchyItemProperties() {
    }

    /**
     * Get the displayName property: The friendly name of the management group.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The friendly name of the management group.
     * 
     * @param displayName the displayName value to set.
     * @return the EntityHierarchyItemProperties object itself.
     */
    public EntityHierarchyItemProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the permissions property: The users specific permissions to this item.
     * 
     * @return the permissions value.
     */
    public Permissions permissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: The users specific permissions to this item.
     * 
     * @param permissions the permissions value to set.
     * @return the EntityHierarchyItemProperties object itself.
     */
    public EntityHierarchyItemProperties withPermissions(Permissions permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the children property: The list of children.
     * 
     * @return the children value.
     */
    public List<EntityHierarchyItem> children() {
        return this.children;
    }

    /**
     * Set the children property: The list of children.
     * 
     * @param children the children value to set.
     * @return the EntityHierarchyItemProperties object itself.
     */
    public EntityHierarchyItemProperties withChildren(List<EntityHierarchyItem> children) {
        this.children = children;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (children() != null) {
            children().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("permissions", this.permissions == null ? null : this.permissions.toString());
        jsonWriter.writeArrayField("children", this.children, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityHierarchyItemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityHierarchyItemProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntityHierarchyItemProperties.
     */
    public static EntityHierarchyItemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityHierarchyItemProperties deserializedEntityHierarchyItemProperties
                = new EntityHierarchyItemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedEntityHierarchyItemProperties.displayName = reader.getString();
                } else if ("permissions".equals(fieldName)) {
                    deserializedEntityHierarchyItemProperties.permissions = Permissions.fromString(reader.getString());
                } else if ("children".equals(fieldName)) {
                    List<EntityHierarchyItem> children
                        = reader.readArray(reader1 -> EntityHierarchyItem.fromJson(reader1));
                    deserializedEntityHierarchyItemProperties.children = children;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityHierarchyItemProperties;
        });
    }
}
