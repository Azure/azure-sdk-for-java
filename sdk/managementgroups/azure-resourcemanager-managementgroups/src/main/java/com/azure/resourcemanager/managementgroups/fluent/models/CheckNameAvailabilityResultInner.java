// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managementgroups.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managementgroups.models.Reason;
import java.io.IOException;

/**
 * Describes the result of the request to check management group name availability.
 */
@Immutable
public final class CheckNameAvailabilityResultInner implements JsonSerializable<CheckNameAvailabilityResultInner> {
    /*
     * Required. True indicates name is valid and available. False indicates the name is invalid, unavailable, or both.
     */
    private Boolean nameAvailable;

    /*
     * Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's
     * naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is
     * already in use and is therefore unavailable.
     */
    private Reason reason;

    /*
     * Required if nameAvailable == false. Localized. If reason == invalid, provide the user with the reason why the
     * given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If
     * reason == AlreadyExists, explain that is already in use, and direct them to select a different name.
     */
    private String message;

    /**
     * Creates an instance of CheckNameAvailabilityResultInner class.
     */
    public CheckNameAvailabilityResultInner() {
    }

    /**
     * Get the nameAvailable property: Required. True indicates name is valid and available. False indicates the name is
     * invalid, unavailable, or both.
     * 
     * @return the nameAvailable value.
     */
    public Boolean nameAvailable() {
        return this.nameAvailable;
    }

    /**
     * Get the reason property: Required if nameAvailable == false. Invalid indicates the name provided does not match
     * the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists
     * indicates that the name is already in use and is therefore unavailable.
     * 
     * @return the reason value.
     */
    public Reason reason() {
        return this.reason;
    }

    /**
     * Get the message property: Required if nameAvailable == false. Localized. If reason == invalid, provide the user
     * with the reason why the given name is invalid, and provide the resource naming requirements so that the user can
     * select a valid name. If reason == AlreadyExists, explain that is already in use, and direct them to select a
     * different name.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckNameAvailabilityResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckNameAvailabilityResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CheckNameAvailabilityResultInner.
     */
    public static CheckNameAvailabilityResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckNameAvailabilityResultInner deserializedCheckNameAvailabilityResultInner
                = new CheckNameAvailabilityResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nameAvailable".equals(fieldName)) {
                    deserializedCheckNameAvailabilityResultInner.nameAvailable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("reason".equals(fieldName)) {
                    deserializedCheckNameAvailabilityResultInner.reason = Reason.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedCheckNameAvailabilityResultInner.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckNameAvailabilityResultInner;
        });
    }
}
