// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managementgroups.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managementgroups.models.EntityParentGroupInfo;
import com.azure.resourcemanager.managementgroups.models.Permissions;
import java.io.IOException;
import java.util.List;

/**
 * The generic properties of an entity.
 */
@Fluent
public final class EntityInfoProperties implements JsonSerializable<EntityInfoProperties> {
    /*
     * The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
     */
    private String tenantId;

    /*
     * The friendly name of the management group.
     */
    private String displayName;

    /*
     * (Optional) The ID of the parent management group.
     */
    private EntityParentGroupInfo parent;

    /*
     * The users specific permissions to this item.
     */
    private Permissions permissions;

    /*
     * The users specific permissions to this item.
     */
    private Permissions inheritedPermissions;

    /*
     * Number of Descendants
     */
    private Integer numberOfDescendants;

    /*
     * Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current
     * Group.
     */
    private Integer numberOfChildren;

    /*
     * Number of children is the number of Groups that are exactly one level underneath the current Group.
     */
    private Integer numberOfChildGroups;

    /*
     * The parent display name chain from the root group to the immediate parent
     */
    private List<String> parentDisplayNameChain;

    /*
     * The parent name chain from the root group to the immediate parent
     */
    private List<String> parentNameChain;

    /**
     * Creates an instance of EntityInfoProperties class.
     */
    public EntityInfoProperties() {
    }

    /**
     * Get the tenantId property: The AAD Tenant ID associated with the entity. For example,
     * 00000000-0000-0000-0000-000000000000.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The AAD Tenant ID associated with the entity. For example,
     * 00000000-0000-0000-0000-000000000000.
     * 
     * @param tenantId the tenantId value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the displayName property: The friendly name of the management group.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The friendly name of the management group.
     * 
     * @param displayName the displayName value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the parent property: (Optional) The ID of the parent management group.
     * 
     * @return the parent value.
     */
    public EntityParentGroupInfo parent() {
        return this.parent;
    }

    /**
     * Set the parent property: (Optional) The ID of the parent management group.
     * 
     * @param parent the parent value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withParent(EntityParentGroupInfo parent) {
        this.parent = parent;
        return this;
    }

    /**
     * Get the permissions property: The users specific permissions to this item.
     * 
     * @return the permissions value.
     */
    public Permissions permissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: The users specific permissions to this item.
     * 
     * @param permissions the permissions value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withPermissions(Permissions permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the inheritedPermissions property: The users specific permissions to this item.
     * 
     * @return the inheritedPermissions value.
     */
    public Permissions inheritedPermissions() {
        return this.inheritedPermissions;
    }

    /**
     * Set the inheritedPermissions property: The users specific permissions to this item.
     * 
     * @param inheritedPermissions the inheritedPermissions value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withInheritedPermissions(Permissions inheritedPermissions) {
        this.inheritedPermissions = inheritedPermissions;
        return this;
    }

    /**
     * Get the numberOfDescendants property: Number of Descendants.
     * 
     * @return the numberOfDescendants value.
     */
    public Integer numberOfDescendants() {
        return this.numberOfDescendants;
    }

    /**
     * Set the numberOfDescendants property: Number of Descendants.
     * 
     * @param numberOfDescendants the numberOfDescendants value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withNumberOfDescendants(Integer numberOfDescendants) {
        this.numberOfDescendants = numberOfDescendants;
        return this;
    }

    /**
     * Get the numberOfChildren property: Number of children is the number of Groups and Subscriptions that are exactly
     * one level underneath the current Group.
     * 
     * @return the numberOfChildren value.
     */
    public Integer numberOfChildren() {
        return this.numberOfChildren;
    }

    /**
     * Set the numberOfChildren property: Number of children is the number of Groups and Subscriptions that are exactly
     * one level underneath the current Group.
     * 
     * @param numberOfChildren the numberOfChildren value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withNumberOfChildren(Integer numberOfChildren) {
        this.numberOfChildren = numberOfChildren;
        return this;
    }

    /**
     * Get the numberOfChildGroups property: Number of children is the number of Groups that are exactly one level
     * underneath the current Group.
     * 
     * @return the numberOfChildGroups value.
     */
    public Integer numberOfChildGroups() {
        return this.numberOfChildGroups;
    }

    /**
     * Set the numberOfChildGroups property: Number of children is the number of Groups that are exactly one level
     * underneath the current Group.
     * 
     * @param numberOfChildGroups the numberOfChildGroups value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withNumberOfChildGroups(Integer numberOfChildGroups) {
        this.numberOfChildGroups = numberOfChildGroups;
        return this;
    }

    /**
     * Get the parentDisplayNameChain property: The parent display name chain from the root group to the immediate
     * parent.
     * 
     * @return the parentDisplayNameChain value.
     */
    public List<String> parentDisplayNameChain() {
        return this.parentDisplayNameChain;
    }

    /**
     * Set the parentDisplayNameChain property: The parent display name chain from the root group to the immediate
     * parent.
     * 
     * @param parentDisplayNameChain the parentDisplayNameChain value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withParentDisplayNameChain(List<String> parentDisplayNameChain) {
        this.parentDisplayNameChain = parentDisplayNameChain;
        return this;
    }

    /**
     * Get the parentNameChain property: The parent name chain from the root group to the immediate parent.
     * 
     * @return the parentNameChain value.
     */
    public List<String> parentNameChain() {
        return this.parentNameChain;
    }

    /**
     * Set the parentNameChain property: The parent name chain from the root group to the immediate parent.
     * 
     * @param parentNameChain the parentNameChain value to set.
     * @return the EntityInfoProperties object itself.
     */
    public EntityInfoProperties withParentNameChain(List<String> parentNameChain) {
        this.parentNameChain = parentNameChain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parent() != null) {
            parent().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("parent", this.parent);
        jsonWriter.writeStringField("permissions", this.permissions == null ? null : this.permissions.toString());
        jsonWriter.writeStringField("inheritedPermissions",
            this.inheritedPermissions == null ? null : this.inheritedPermissions.toString());
        jsonWriter.writeNumberField("numberOfDescendants", this.numberOfDescendants);
        jsonWriter.writeNumberField("numberOfChildren", this.numberOfChildren);
        jsonWriter.writeNumberField("numberOfChildGroups", this.numberOfChildGroups);
        jsonWriter.writeArrayField("parentDisplayNameChain", this.parentDisplayNameChain,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("parentNameChain", this.parentNameChain,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityInfoProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntityInfoProperties.
     */
    public static EntityInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityInfoProperties deserializedEntityInfoProperties = new EntityInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedEntityInfoProperties.tenantId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedEntityInfoProperties.displayName = reader.getString();
                } else if ("parent".equals(fieldName)) {
                    deserializedEntityInfoProperties.parent = EntityParentGroupInfo.fromJson(reader);
                } else if ("permissions".equals(fieldName)) {
                    deserializedEntityInfoProperties.permissions = Permissions.fromString(reader.getString());
                } else if ("inheritedPermissions".equals(fieldName)) {
                    deserializedEntityInfoProperties.inheritedPermissions = Permissions.fromString(reader.getString());
                } else if ("numberOfDescendants".equals(fieldName)) {
                    deserializedEntityInfoProperties.numberOfDescendants = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfChildren".equals(fieldName)) {
                    deserializedEntityInfoProperties.numberOfChildren = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfChildGroups".equals(fieldName)) {
                    deserializedEntityInfoProperties.numberOfChildGroups = reader.getNullable(JsonReader::getInt);
                } else if ("parentDisplayNameChain".equals(fieldName)) {
                    List<String> parentDisplayNameChain = reader.readArray(reader1 -> reader1.getString());
                    deserializedEntityInfoProperties.parentDisplayNameChain = parentDisplayNameChain;
                } else if ("parentNameChain".equals(fieldName)) {
                    List<String> parentNameChain = reader.readArray(reader1 -> reader1.getString());
                    deserializedEntityInfoProperties.parentNameChain = parentNameChain;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityInfoProperties;
        });
    }
}
