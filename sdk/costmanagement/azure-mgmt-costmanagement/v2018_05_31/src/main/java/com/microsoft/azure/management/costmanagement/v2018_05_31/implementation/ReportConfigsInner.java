/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.costmanagement.v2018_05_31.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.costmanagement.v2018_05_31.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReportConfigs.
 */
public class ReportConfigsInner implements InnerSupportsGet<ReportConfigInner>, InnerSupportsListing<ReportConfigInner> {
    /** The Retrofit service to perform REST calls. */
    private ReportConfigsService service;
    /** The service client containing this operation class. */
    private CostManagementClientImpl client;

    /**
     * Initializes an instance of ReportConfigsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReportConfigsInner(Retrofit retrofit, CostManagementClientImpl client) {
        this.service = retrofit.create(ReportConfigsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReportConfigs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReportConfigsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/reportconfigs")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CostManagement/reportconfigs")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs get" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/reportconfigs/{reportConfigName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("reportConfigName") String reportConfigName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/reportconfigs/{reportConfigName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("reportConfigName") String reportConfigName, @Query("api-version") String apiVersion, @Body ReportConfigInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/providers/Microsoft.CostManagement/reportconfigs/{reportConfigName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("reportConfigName") String reportConfigName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CostManagement/reportconfigs/{reportConfigName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("reportConfigName") String reportConfigName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs createOrUpdateByResourceGroupName" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CostManagement/reportconfigs/{reportConfigName}")
        Observable<Response<ResponseBody>> createOrUpdateByResourceGroupName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("reportConfigName") String reportConfigName, @Query("api-version") String apiVersion, @Body ReportConfigInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.costmanagement.v2018_05_31.ReportConfigs deleteByResourceGroupName" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CostManagement/reportconfigs/{reportConfigName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteByResourceGroupName(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("reportConfigName") String reportConfigName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all report configs for a subscription.
     *
     * @return the PagedList<ReportConfigInner> object if successful.
     */
    public PagedList<ReportConfigInner> list() {
        PageImpl<ReportConfigInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<ReportConfigInner>(page) {
            @Override
            public Page<ReportConfigInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all report configs for a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportConfigInner>> listAsync(final ServiceCallback<List<ReportConfigInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all report configs for a subscription.
     *
     * @return the observable to the List&lt;ReportConfigInner&gt; object
     */
    public Observable<Page<ReportConfigInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<ReportConfigInner>>, Page<ReportConfigInner>>() {
            @Override
            public Page<ReportConfigInner> call(ServiceResponse<List<ReportConfigInner>> response) {
                PageImpl<ReportConfigInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all report configs for a subscription.
     *
     * @return the observable to the List&lt;ReportConfigInner&gt; object
     */
    public Observable<ServiceResponse<List<ReportConfigInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ReportConfigInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ReportConfigInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportConfigInner>> result = listDelegate(response);
                        List<ReportConfigInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ReportConfigInner>> clientResponse = new ServiceResponse<List<ReportConfigInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportConfigInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportConfigInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportConfigInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all report configs for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @return the PagedList<ReportConfigInner> object if successful.
     */
    public PagedList<ReportConfigInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<ReportConfigInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<ReportConfigInner>(page) {
            @Override
            public Page<ReportConfigInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all report configs for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportConfigInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<ReportConfigInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Lists all report configs for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @return the observable to the List&lt;ReportConfigInner&gt; object
     */
    public Observable<Page<ReportConfigInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<ReportConfigInner>>, Page<ReportConfigInner>>() {
            @Override
            public Page<ReportConfigInner> call(ServiceResponse<List<ReportConfigInner>> response) {
                PageImpl<ReportConfigInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all report configs for a resource group under a subscription.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @return the observable to the List&lt;ReportConfigInner&gt; object
     */
    public Observable<ServiceResponse<List<ReportConfigInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<ReportConfigInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<ReportConfigInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportConfigInner>> result = listByResourceGroupDelegate(response);
                        List<ReportConfigInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<ReportConfigInner>> clientResponse = new ServiceResponse<List<ReportConfigInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportConfigInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportConfigInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportConfigInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the report config for a subscription by report config name.
     *
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReportConfigInner object if successful.
     */
    public ReportConfigInner get(String reportConfigName) {
        return getWithServiceResponseAsync(reportConfigName).toBlocking().single().body();
    }

    /**
     * Gets the report config for a subscription by report config name.
     *
     * @param reportConfigName Report Config Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReportConfigInner> getAsync(String reportConfigName, final ServiceCallback<ReportConfigInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(reportConfigName), serviceCallback);
    }

    /**
     * Gets the report config for a subscription by report config name.
     *
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ReportConfigInner> getAsync(String reportConfigName) {
        return getWithServiceResponseAsync(reportConfigName).map(new Func1<ServiceResponse<ReportConfigInner>, ReportConfigInner>() {
            @Override
            public ReportConfigInner call(ServiceResponse<ReportConfigInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the report config for a subscription by report config name.
     *
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ServiceResponse<ReportConfigInner>> getWithServiceResponseAsync(String reportConfigName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (reportConfigName == null) {
            throw new IllegalArgumentException("Parameter reportConfigName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), reportConfigName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReportConfigInner>>>() {
                @Override
                public Observable<ServiceResponse<ReportConfigInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReportConfigInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReportConfigInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReportConfigInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReportConfigInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReportConfigInner object if successful.
     */
    public ReportConfigInner createOrUpdate(String reportConfigName, ReportConfigInner parameters) {
        return createOrUpdateWithServiceResponseAsync(reportConfigName, parameters).toBlocking().single().body();
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReportConfigInner> createOrUpdateAsync(String reportConfigName, ReportConfigInner parameters, final ServiceCallback<ReportConfigInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(reportConfigName, parameters), serviceCallback);
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ReportConfigInner> createOrUpdateAsync(String reportConfigName, ReportConfigInner parameters) {
        return createOrUpdateWithServiceResponseAsync(reportConfigName, parameters).map(new Func1<ServiceResponse<ReportConfigInner>, ReportConfigInner>() {
            @Override
            public ReportConfigInner call(ServiceResponse<ReportConfigInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ServiceResponse<ReportConfigInner>> createOrUpdateWithServiceResponseAsync(String reportConfigName, ReportConfigInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (reportConfigName == null) {
            throw new IllegalArgumentException("Parameter reportConfigName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(this.client.subscriptionId(), reportConfigName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReportConfigInner>>>() {
                @Override
                public Observable<ServiceResponse<ReportConfigInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReportConfigInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReportConfigInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReportConfigInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReportConfigInner>() { }.getType())
                .register(201, new TypeToken<ReportConfigInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to delete a report.
     *
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String reportConfigName) {
        deleteWithServiceResponseAsync(reportConfigName).toBlocking().single().body();
    }

    /**
     * The operation to delete a report.
     *
     * @param reportConfigName Report Config Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String reportConfigName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(reportConfigName), serviceCallback);
    }

    /**
     * The operation to delete a report.
     *
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String reportConfigName) {
        return deleteWithServiceResponseAsync(reportConfigName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to delete a report.
     *
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String reportConfigName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (reportConfigName == null) {
            throw new IllegalArgumentException("Parameter reportConfigName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), reportConfigName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the report config for a resource group under a subscription by report config name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReportConfigInner object if successful.
     */
    public ReportConfigInner getByResourceGroup(String resourceGroupName, String reportConfigName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, reportConfigName).toBlocking().single().body();
    }

    /**
     * Gets the report config for a resource group under a subscription by report config name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReportConfigInner> getByResourceGroupAsync(String resourceGroupName, String reportConfigName, final ServiceCallback<ReportConfigInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, reportConfigName), serviceCallback);
    }

    /**
     * Gets the report config for a resource group under a subscription by report config name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ReportConfigInner> getByResourceGroupAsync(String resourceGroupName, String reportConfigName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, reportConfigName).map(new Func1<ServiceResponse<ReportConfigInner>, ReportConfigInner>() {
            @Override
            public ReportConfigInner call(ServiceResponse<ReportConfigInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the report config for a resource group under a subscription by report config name.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ServiceResponse<ReportConfigInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String reportConfigName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (reportConfigName == null) {
            throw new IllegalArgumentException("Parameter reportConfigName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, reportConfigName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReportConfigInner>>>() {
                @Override
                public Observable<ServiceResponse<ReportConfigInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReportConfigInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReportConfigInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReportConfigInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReportConfigInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReportConfigInner object if successful.
     */
    public ReportConfigInner createOrUpdateByResourceGroupName(String resourceGroupName, String reportConfigName, ReportConfigInner parameters) {
        return createOrUpdateByResourceGroupNameWithServiceResponseAsync(resourceGroupName, reportConfigName, parameters).toBlocking().single().body();
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReportConfigInner> createOrUpdateByResourceGroupNameAsync(String resourceGroupName, String reportConfigName, ReportConfigInner parameters, final ServiceCallback<ReportConfigInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateByResourceGroupNameWithServiceResponseAsync(resourceGroupName, reportConfigName, parameters), serviceCallback);
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ReportConfigInner> createOrUpdateByResourceGroupNameAsync(String resourceGroupName, String reportConfigName, ReportConfigInner parameters) {
        return createOrUpdateByResourceGroupNameWithServiceResponseAsync(resourceGroupName, reportConfigName, parameters).map(new Func1<ServiceResponse<ReportConfigInner>, ReportConfigInner>() {
            @Override
            public ReportConfigInner call(ServiceResponse<ReportConfigInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update a report config. Update operation requires latest eTag to be set in the request mandatorily. You may obtain the latest eTag by performing a get operation. Create operation does not require eTag.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @param parameters Parameters supplied to the CreateOrUpdate Report Config operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReportConfigInner object
     */
    public Observable<ServiceResponse<ReportConfigInner>> createOrUpdateByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String reportConfigName, ReportConfigInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (reportConfigName == null) {
            throw new IllegalArgumentException("Parameter reportConfigName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdateByResourceGroupName(this.client.subscriptionId(), resourceGroupName, reportConfigName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReportConfigInner>>>() {
                @Override
                public Observable<ServiceResponse<ReportConfigInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReportConfigInner> clientResponse = createOrUpdateByResourceGroupNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReportConfigInner> createOrUpdateByResourceGroupNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReportConfigInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ReportConfigInner>() { }.getType())
                .register(201, new TypeToken<ReportConfigInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * The operation to delete a report config.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteByResourceGroupName(String resourceGroupName, String reportConfigName) {
        deleteByResourceGroupNameWithServiceResponseAsync(resourceGroupName, reportConfigName).toBlocking().single().body();
    }

    /**
     * The operation to delete a report config.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteByResourceGroupNameAsync(String resourceGroupName, String reportConfigName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteByResourceGroupNameWithServiceResponseAsync(resourceGroupName, reportConfigName), serviceCallback);
    }

    /**
     * The operation to delete a report config.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteByResourceGroupNameAsync(String resourceGroupName, String reportConfigName) {
        return deleteByResourceGroupNameWithServiceResponseAsync(resourceGroupName, reportConfigName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to delete a report config.
     *
     * @param resourceGroupName Azure Resource Group Name.
     * @param reportConfigName Report Config Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteByResourceGroupNameWithServiceResponseAsync(String resourceGroupName, String reportConfigName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (reportConfigName == null) {
            throw new IllegalArgumentException("Parameter reportConfigName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteByResourceGroupName(this.client.subscriptionId(), resourceGroupName, reportConfigName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteByResourceGroupNameDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteByResourceGroupNameDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
