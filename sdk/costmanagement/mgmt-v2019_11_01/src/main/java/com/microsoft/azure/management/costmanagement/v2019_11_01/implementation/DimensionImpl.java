/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.costmanagement.v2019_11_01.implementation;

import com.microsoft.azure.management.costmanagement.v2019_11_01.Dimension;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;

class DimensionImpl extends WrapperImpl<DimensionInner> implements Dimension {
    private final CostManagementManager manager;
    DimensionImpl(DimensionInner inner, CostManagementManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public CostManagementManager manager() {
        return this.manager;
    }

    @Override
    public String category() {
        return this.inner().category();
    }

    @Override
    public List<String> data() {
        return this.inner().data();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public Boolean filterEnabled() {
        return this.inner().filterEnabled();
    }

    @Override
    public Boolean groupingEnabled() {
        return this.inner().groupingEnabled();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String nextLink() {
        return this.inner().nextLink();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public Integer total() {
        return this.inner().total();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DateTime usageEnd() {
        return this.inner().usageEnd();
    }

    @Override
    public DateTime usageStart() {
        return this.inner().usageStart();
    }

}
