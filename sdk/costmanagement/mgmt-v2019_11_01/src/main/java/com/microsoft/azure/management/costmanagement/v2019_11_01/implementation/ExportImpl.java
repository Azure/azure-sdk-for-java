/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.costmanagement.v2019_11_01.implementation;

import com.microsoft.azure.management.costmanagement.v2019_11_01.Export;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.costmanagement.v2019_11_01.FormatType;
import com.microsoft.azure.management.costmanagement.v2019_11_01.ExportDeliveryInfo;
import com.microsoft.azure.management.costmanagement.v2019_11_01.QueryDefinition;
import com.microsoft.azure.management.costmanagement.v2019_11_01.ExportSchedule;

class ExportImpl extends CreatableUpdatableImpl<Export, ExportInner, ExportImpl> implements Export, Export.Definition, Export.Update {
    private String scope;
    private String exportName;
    private final CostManagementManager manager;

    ExportImpl(String name, CostManagementManager manager) {
        super(name, new ExportInner());
        this.manager = manager;
        // Set resource name
        this.exportName = name;
        //
    }

    ExportImpl(ExportInner inner, CostManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.exportName = inner.name();
        // set resource ancestor and positional variables
        this.exportName = IdParsingUtils.getValueFromIdByName(inner.id(), "exports");
        this.scope = IdParsingUtils.getValueFromIdByPosition(inner.id(), 0);
        // set other parameters for create and update
    }

    @Override
    public CostManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Export> createResourceAsync() {
        ExportsInner client = this.manager().inner().exports();
        return client.createOrUpdateAsync(this.scope, this.exportName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Export> updateResourceAsync() {
        ExportsInner client = this.manager().inner().exports();
        return client.createOrUpdateAsync(this.scope, this.exportName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ExportInner> getInnerAsync() {
        ExportsInner client = this.manager().inner().exports();
        return client.getAsync(this.scope, this.exportName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public QueryDefinition definition() {
        return this.inner().definition();
    }

    @Override
    public ExportDeliveryInfo deliveryInfo() {
        return this.inner().deliveryInfo();
    }

    @Override
    public FormatType format() {
        return this.inner().format();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ExportSchedule schedule() {
        return this.inner().schedule();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ExportImpl withScope(String scope) {
        this.scope = scope;
        return this;
    }

    @Override
    public ExportImpl withDefinition(QueryDefinition definition) {
        this.inner().withDefinition(definition);
        return this;
    }

    @Override
    public ExportImpl withDeliveryInfo(ExportDeliveryInfo deliveryInfo) {
        this.inner().withDeliveryInfo(deliveryInfo);
        return this;
    }

    @Override
    public ExportImpl withFormat(FormatType format) {
        this.inner().withFormat(format);
        return this;
    }

    @Override
    public ExportImpl withSchedule(ExportSchedule schedule) {
        this.inner().withSchedule(schedule);
        return this;
    }

}
