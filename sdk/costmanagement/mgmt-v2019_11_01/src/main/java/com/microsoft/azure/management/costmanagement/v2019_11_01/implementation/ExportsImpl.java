/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.costmanagement.v2019_11_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.costmanagement.v2019_11_01.Exports;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.costmanagement.v2019_11_01.Export;
import com.microsoft.azure.management.costmanagement.v2019_11_01.ExportExecutionListResult;
import com.microsoft.azure.management.costmanagement.v2019_11_01.ExportListResult;

class ExportsImpl extends WrapperImpl<ExportsInner> implements Exports {
    private final CostManagementManager manager;

    ExportsImpl(CostManagementManager manager) {
        super(manager.inner().exports());
        this.manager = manager;
    }

    public CostManagementManager manager() {
        return this.manager;
    }

    @Override
    public ExportImpl define(String name) {
        return wrapModel(name);
    }

    private ExportImpl wrapModel(ExportInner inner) {
        return  new ExportImpl(inner, manager());
    }

    private ExportImpl wrapModel(String name) {
        return new ExportImpl(name, this.manager());
    }

    @Override
    public Observable<Export> getAsync(String scope, String exportName) {
        ExportsInner client = this.inner();
        return client.getAsync(scope, exportName)
        .map(new Func1<ExportInner, Export>() {
            @Override
            public Export call(ExportInner inner) {
                return new ExportImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String scope, String exportName) {
        ExportsInner client = this.inner();
        return client.deleteAsync(scope, exportName).toCompletable();
    }

    @Override
    public Completable executeAsync(String scope, String exportName) {
        ExportsInner client = this.inner();
        return client.executeAsync(scope, exportName).toCompletable();
    }

    @Override
    public Observable<ExportExecutionListResult> getExecutionHistoryAsync(String scope, String exportName) {
        ExportsInner client = this.inner();
        return client.getExecutionHistoryAsync(scope, exportName)
        .map(new Func1<ExportExecutionListResultInner, ExportExecutionListResult>() {
            @Override
            public ExportExecutionListResult call(ExportExecutionListResultInner inner) {
                return new ExportExecutionListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ExportListResult> listAsync(String scope) {
        ExportsInner client = this.inner();
        return client.listAsync(scope)
        .map(new Func1<ExportListResultInner, ExportListResult>() {
            @Override
            public ExportListResult call(ExportListResultInner inner) {
                return new ExportListResultImpl(inner, manager());
            }
        });
    }

}
