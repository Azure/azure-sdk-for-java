/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.costmanagement.v2019_11_01;

import java.util.Map;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The definition of data present in the query.
 */
public class QueryDataset {
    /**
     * The granularity of rows in the query. Possible values include: 'Daily'.
     */
    @JsonProperty(value = "granularity")
    private GranularityType granularity;

    /**
     * Has configuration information for the data in the export. The
     * configuration will be ignored if aggregation and grouping are provided.
     */
    @JsonProperty(value = "configuration")
    private QueryDatasetConfiguration configuration;

    /**
     * Dictionary of aggregation expression to use in the query. The key of
     * each item in the dictionary is the alias for the aggregated column.
     * Query can have up to 2 aggregation clauses.
     */
    @JsonProperty(value = "aggregation")
    private Map<String, QueryAggregation> aggregation;

    /**
     * Array of group by expression to use in the query. Query can have up to 2
     * group by clauses.
     */
    @JsonProperty(value = "grouping")
    private List<QueryGrouping> grouping;

    /**
     * Has filter expression to use in the query.
     */
    @JsonProperty(value = "filter")
    private QueryFilter filter;

    /**
     * Get the granularity of rows in the query. Possible values include: 'Daily'.
     *
     * @return the granularity value
     */
    public GranularityType granularity() {
        return this.granularity;
    }

    /**
     * Set the granularity of rows in the query. Possible values include: 'Daily'.
     *
     * @param granularity the granularity value to set
     * @return the QueryDataset object itself.
     */
    public QueryDataset withGranularity(GranularityType granularity) {
        this.granularity = granularity;
        return this;
    }

    /**
     * Get has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
     *
     * @return the configuration value
     */
    public QueryDatasetConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
     *
     * @param configuration the configuration value to set
     * @return the QueryDataset object itself.
     */
    public QueryDataset withConfiguration(QueryDatasetConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
     *
     * @return the aggregation value
     */
    public Map<String, QueryAggregation> aggregation() {
        return this.aggregation;
    }

    /**
     * Set dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
     *
     * @param aggregation the aggregation value to set
     * @return the QueryDataset object itself.
     */
    public QueryDataset withAggregation(Map<String, QueryAggregation> aggregation) {
        this.aggregation = aggregation;
        return this;
    }

    /**
     * Get array of group by expression to use in the query. Query can have up to 2 group by clauses.
     *
     * @return the grouping value
     */
    public List<QueryGrouping> grouping() {
        return this.grouping;
    }

    /**
     * Set array of group by expression to use in the query. Query can have up to 2 group by clauses.
     *
     * @param grouping the grouping value to set
     * @return the QueryDataset object itself.
     */
    public QueryDataset withGrouping(List<QueryGrouping> grouping) {
        this.grouping = grouping;
        return this;
    }

    /**
     * Get has filter expression to use in the query.
     *
     * @return the filter value
     */
    public QueryFilter filter() {
        return this.filter;
    }

    /**
     * Set has filter expression to use in the query.
     *
     * @param filter the filter value to set
     * @return the QueryDataset object itself.
     */
    public QueryDataset withFilter(QueryFilter filter) {
        this.filter = filter;
        return this;
    }

}
