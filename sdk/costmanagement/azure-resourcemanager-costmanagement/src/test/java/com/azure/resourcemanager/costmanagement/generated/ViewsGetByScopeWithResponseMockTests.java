// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.AccumulatedType;
import com.azure.resourcemanager.costmanagement.models.ChartType;
import com.azure.resourcemanager.costmanagement.models.FunctionType;
import com.azure.resourcemanager.costmanagement.models.KpiType;
import com.azure.resourcemanager.costmanagement.models.MetricType;
import com.azure.resourcemanager.costmanagement.models.OperatorType;
import com.azure.resourcemanager.costmanagement.models.PivotType;
import com.azure.resourcemanager.costmanagement.models.QueryColumnType;
import com.azure.resourcemanager.costmanagement.models.ReportGranularityType;
import com.azure.resourcemanager.costmanagement.models.ReportTimeframeType;
import com.azure.resourcemanager.costmanagement.models.ReportType;
import com.azure.resourcemanager.costmanagement.models.View;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ViewsGetByScopeWithResponseMockTests {
    @Test
    public void testGetByScopeWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"n\",\"scope\":\"op\",\"createdOn\":\"2021-12-05T00:29:05Z\",\"modifiedOn\":\"2021-10-31T16:01:30Z\",\"dateRange\":\"nrlyxnuc\",\"currency\":\"p\",\"query\":{\"type\":\"Usage\",\"timeframe\":\"MonthToDate\",\"timePeriod\":{\"from\":\"2021-04-05T15:21:36Z\",\"to\":\"2021-02-13T05:49:56Z\"},\"dataSet\":{\"granularity\":\"Daily\",\"configuration\":{\"columns\":[\"dtcjbctv\",\"vuzqymt\",\"owog\",\"gitsqh\"]},\"aggregation\":{\"ds\":{\"name\":\"rzcdbanf\",\"function\":\"Sum\"}},\"grouping\":[{\"type\":\"TagKey\",\"name\":\"eatkdbmwnrdj\"},{\"type\":\"Dimension\",\"name\":\"bqbnaomhjrmkuh\"},{\"type\":\"TagKey\",\"name\":\"xljalfihc\"},{\"type\":\"TagKey\",\"name\":\"obcancdexxqcw\"}],\"sorting\":[{\"name\":\"fgvaknokzwj\"}],\"filter\":{\"and\":[{},{},{},{}],\"or\":[{},{},{}],\"dimensions\":{\"name\":\"l\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"yfytpq\",\"operator\":\"Contains\",\"values\":[]}}},\"includeMonetaryCommitment\":true},\"chart\":\"Table\",\"accumulated\":\"false\",\"metric\":\"ActualCost\",\"kpis\":[{\"type\":\"Budget\",\"id\":\"juvsmbmslzoyovw\",\"enabled\":true},{\"type\":\"Forecast\",\"id\":\"ybe\",\"enabled\":false}],\"pivots\":[{\"type\":\"TagKey\",\"name\":\"cvtlubseskvc\"}]},\"eTag\":\"rtrh\",\"id\":\"nlp\",\"name\":\"rykycndzfqivjr\",\"type\":\"uykbbmn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        View response = manager.views()
            .getByScopeWithResponse("odnaienhqhskndn", "lqkaadlknwf", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("rtrh", response.etag());
        Assertions.assertEquals("n", response.displayName());
        Assertions.assertEquals("op", response.scope());
        Assertions.assertEquals("nrlyxnuc", response.dateRange());
        Assertions.assertEquals(ChartType.TABLE, response.chart());
        Assertions.assertEquals(AccumulatedType.FALSE, response.accumulated());
        Assertions.assertEquals(MetricType.ACTUAL_COST, response.metric());
        Assertions.assertEquals(KpiType.BUDGET, response.kpis().get(0).type());
        Assertions.assertEquals("juvsmbmslzoyovw", response.kpis().get(0).id());
        Assertions.assertEquals(true, response.kpis().get(0).enabled());
        Assertions.assertEquals(PivotType.TAG_KEY, response.pivots().get(0).type());
        Assertions.assertEquals("cvtlubseskvc", response.pivots().get(0).name());
        Assertions.assertEquals(ReportType.USAGE, response.typePropertiesType());
        Assertions.assertEquals(ReportTimeframeType.MONTH_TO_DATE, response.timeframe());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-05T15:21:36Z"), response.timePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-13T05:49:56Z"), response.timePeriod().to());
        Assertions.assertEquals(ReportGranularityType.DAILY, response.dataSet().granularity());
        Assertions.assertEquals("dtcjbctv", response.dataSet().configuration().columns().get(0));
        Assertions.assertEquals("rzcdbanf", response.dataSet().aggregation().get("ds").name());
        Assertions.assertEquals(FunctionType.SUM, response.dataSet().aggregation().get("ds").function());
        Assertions.assertEquals(QueryColumnType.TAG_KEY, response.dataSet().grouping().get(0).type());
        Assertions.assertEquals("eatkdbmwnrdj", response.dataSet().grouping().get(0).name());
        Assertions.assertEquals("fgvaknokzwj", response.dataSet().sorting().get(0).name());
        Assertions.assertEquals("l", response.dataSet().filter().dimensions().name());
        Assertions.assertEquals(OperatorType.IN, response.dataSet().filter().dimensions().operator());
        Assertions.assertEquals("yfytpq", response.dataSet().filter().tags().name());
        Assertions.assertEquals(OperatorType.CONTAINS, response.dataSet().filter().tags().operator());
        Assertions.assertEquals(true, response.includeMonetaryCommitment());
    }
}
