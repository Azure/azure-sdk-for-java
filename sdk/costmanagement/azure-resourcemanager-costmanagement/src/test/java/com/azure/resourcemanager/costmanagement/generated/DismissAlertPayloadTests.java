// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.models.AlertCategory;
import com.azure.resourcemanager.costmanagement.models.AlertCriteria;
import com.azure.resourcemanager.costmanagement.models.AlertOperator;
import com.azure.resourcemanager.costmanagement.models.AlertPropertiesDefinition;
import com.azure.resourcemanager.costmanagement.models.AlertPropertiesDetails;
import com.azure.resourcemanager.costmanagement.models.AlertSource;
import com.azure.resourcemanager.costmanagement.models.AlertStatus;
import com.azure.resourcemanager.costmanagement.models.AlertTimeGrainType;
import com.azure.resourcemanager.costmanagement.models.AlertType;
import com.azure.resourcemanager.costmanagement.models.DismissAlertPayload;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DismissAlertPayloadTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DismissAlertPayload model = BinaryData.fromString(
            "{\"properties\":{\"definition\":{\"type\":\"Budget\",\"category\":\"Usage\",\"criteria\":\"ForecastUsageThresholdExceeded\"},\"description\":\"vdkfwynwcvtbvk\",\"source\":\"Preset\",\"details\":{\"timeGrainType\":\"Quarterly\",\"periodStartDate\":\"yqiatkzwp\",\"triggeredBy\":\"p\",\"resourceGroupFilter\":[\"datajaesgvvsccya\",\"datag\",\"dataqfhwyg\"],\"resourceFilter\":[\"datadnkfx\",\"datasemdwzrmu\",\"dataapfcqdpsq\"],\"meterFilter\":[\"datapsvuoymgc\",\"dataelvezrypq\",\"datamfe\"],\"tagFilter\":\"dataerqwkyhkobopg\",\"operator\":\"EqualTo\",\"unit\":\"epbqpcrfkbw\",\"contactEmails\":[\"jvcdwxlpqekf\"],\"contactGroups\":[\"htjsying\"],\"contactRoles\":[\"atmtdhtmdvy\",\"gikdgsz\",\"w\"],\"overridingAlert\":\"irryuzhlh\",\"departmentName\":\"oqrvqqaatjin\",\"companyName\":\"goupmfiibfg\",\"enrollmentNumber\":\"ioolvrwxkvtkkgll\",\"enrollmentStartDate\":\"jygvjayvbl\",\"enrollmentEndDate\":\"vkzuhbxvvyhgso\"},\"costEntityId\":\"rqufegxuvwz\",\"status\":\"None\",\"creationTime\":\"lmctlpd\",\"closeTime\":\"itvgbmhrixkwm\",\"modificationTime\":\"jejveg\",\"statusModificationUserName\":\"bpnaixexccbdre\",\"statusModificationTime\":\"hcexdrrvqa\"}}")
            .toObject(DismissAlertPayload.class);
        Assertions.assertEquals(AlertType.BUDGET, model.definition().type());
        Assertions.assertEquals(AlertCategory.USAGE, model.definition().category());
        Assertions.assertEquals(AlertCriteria.FORECAST_USAGE_THRESHOLD_EXCEEDED, model.definition().criteria());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.description());
        Assertions.assertEquals(AlertSource.PRESET, model.source());
        Assertions.assertEquals(AlertTimeGrainType.QUARTERLY, model.details().timeGrainType());
        Assertions.assertEquals("yqiatkzwp", model.details().periodStartDate());
        Assertions.assertEquals("p", model.details().triggeredBy());
        Assertions.assertEquals(AlertOperator.EQUAL_TO, model.details().operator());
        Assertions.assertEquals("epbqpcrfkbw", model.details().unit());
        Assertions.assertEquals("jvcdwxlpqekf", model.details().contactEmails().get(0));
        Assertions.assertEquals("htjsying", model.details().contactGroups().get(0));
        Assertions.assertEquals("atmtdhtmdvy", model.details().contactRoles().get(0));
        Assertions.assertEquals("irryuzhlh", model.details().overridingAlert());
        Assertions.assertEquals("oqrvqqaatjin", model.details().departmentName());
        Assertions.assertEquals("goupmfiibfg", model.details().companyName());
        Assertions.assertEquals("ioolvrwxkvtkkgll", model.details().enrollmentNumber());
        Assertions.assertEquals("jygvjayvbl", model.details().enrollmentStartDate());
        Assertions.assertEquals("vkzuhbxvvyhgso", model.details().enrollmentEndDate());
        Assertions.assertEquals("rqufegxuvwz", model.costEntityId());
        Assertions.assertEquals(AlertStatus.NONE, model.status());
        Assertions.assertEquals("lmctlpd", model.creationTime());
        Assertions.assertEquals("itvgbmhrixkwm", model.closeTime());
        Assertions.assertEquals("jejveg", model.modificationTime());
        Assertions.assertEquals("bpnaixexccbdre", model.statusModificationUsername());
        Assertions.assertEquals("hcexdrrvqa", model.statusModificationTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DismissAlertPayload model = new DismissAlertPayload()
            .withDefinition(new AlertPropertiesDefinition().withType(AlertType.BUDGET)
                .withCategory(AlertCategory.USAGE)
                .withCriteria(AlertCriteria.FORECAST_USAGE_THRESHOLD_EXCEEDED))
            .withDescription("vdkfwynwcvtbvk")
            .withSource(AlertSource.PRESET)
            .withDetails(new AlertPropertiesDetails().withTimeGrainType(AlertTimeGrainType.QUARTERLY)
                .withPeriodStartDate("yqiatkzwp")
                .withTriggeredBy("p")
                .withResourceGroupFilter(Arrays.asList("datajaesgvvsccya", "datag", "dataqfhwyg"))
                .withResourceFilter(Arrays.asList("datadnkfx", "datasemdwzrmu", "dataapfcqdpsq"))
                .withMeterFilter(Arrays.asList("datapsvuoymgc", "dataelvezrypq", "datamfe"))
                .withTagFilter("dataerqwkyhkobopg")
                .withOperator(AlertOperator.EQUAL_TO)
                .withUnit("epbqpcrfkbw")
                .withContactEmails(Arrays.asList("jvcdwxlpqekf"))
                .withContactGroups(Arrays.asList("htjsying"))
                .withContactRoles(Arrays.asList("atmtdhtmdvy", "gikdgsz", "w"))
                .withOverridingAlert("irryuzhlh")
                .withDepartmentName("oqrvqqaatjin")
                .withCompanyName("goupmfiibfg")
                .withEnrollmentNumber("ioolvrwxkvtkkgll")
                .withEnrollmentStartDate("jygvjayvbl")
                .withEnrollmentEndDate("vkzuhbxvvyhgso"))
            .withCostEntityId("rqufegxuvwz")
            .withStatus(AlertStatus.NONE)
            .withCreationTime("lmctlpd")
            .withCloseTime("itvgbmhrixkwm")
            .withModificationTime("jejveg")
            .withStatusModificationUsername("bpnaixexccbdre")
            .withStatusModificationTime("hcexdrrvqa");
        model = BinaryData.fromObject(model).toObject(DismissAlertPayload.class);
        Assertions.assertEquals(AlertType.BUDGET, model.definition().type());
        Assertions.assertEquals(AlertCategory.USAGE, model.definition().category());
        Assertions.assertEquals(AlertCriteria.FORECAST_USAGE_THRESHOLD_EXCEEDED, model.definition().criteria());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.description());
        Assertions.assertEquals(AlertSource.PRESET, model.source());
        Assertions.assertEquals(AlertTimeGrainType.QUARTERLY, model.details().timeGrainType());
        Assertions.assertEquals("yqiatkzwp", model.details().periodStartDate());
        Assertions.assertEquals("p", model.details().triggeredBy());
        Assertions.assertEquals(AlertOperator.EQUAL_TO, model.details().operator());
        Assertions.assertEquals("epbqpcrfkbw", model.details().unit());
        Assertions.assertEquals("jvcdwxlpqekf", model.details().contactEmails().get(0));
        Assertions.assertEquals("htjsying", model.details().contactGroups().get(0));
        Assertions.assertEquals("atmtdhtmdvy", model.details().contactRoles().get(0));
        Assertions.assertEquals("irryuzhlh", model.details().overridingAlert());
        Assertions.assertEquals("oqrvqqaatjin", model.details().departmentName());
        Assertions.assertEquals("goupmfiibfg", model.details().companyName());
        Assertions.assertEquals("ioolvrwxkvtkkgll", model.details().enrollmentNumber());
        Assertions.assertEquals("jygvjayvbl", model.details().enrollmentStartDate());
        Assertions.assertEquals("vkzuhbxvvyhgso", model.details().enrollmentEndDate());
        Assertions.assertEquals("rqufegxuvwz", model.costEntityId());
        Assertions.assertEquals(AlertStatus.NONE, model.status());
        Assertions.assertEquals("lmctlpd", model.creationTime());
        Assertions.assertEquals("itvgbmhrixkwm", model.closeTime());
        Assertions.assertEquals("jejveg", model.modificationTime());
        Assertions.assertEquals("bpnaixexccbdre", model.statusModificationUsername());
        Assertions.assertEquals("hcexdrrvqa", model.statusModificationTime());
    }
}
