// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.AccumulatedType;
import com.azure.resourcemanager.costmanagement.models.ChartType;
import com.azure.resourcemanager.costmanagement.models.MetricType;
import com.azure.resourcemanager.costmanagement.models.ReportTimeframeType;
import com.azure.resourcemanager.costmanagement.models.ReportType;
import com.azure.resourcemanager.costmanagement.models.View;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ViewsListByScopeMockTests {
    @Test
    public void testListByScope() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"displayName\":\"hnjivo\",\"scope\":\"tnovqfzgemjdftul\",\"createdOn\":\"2021-07-31T07:20:21Z\",\"modifiedOn\":\"2021-03-06T23:14:05Z\",\"dateRange\":\"eamtmcz\",\"currency\":\"m\",\"query\":{\"type\":\"Usage\",\"timeframe\":\"MonthToDate\",\"includeMonetaryCommitment\":true},\"chart\":\"Line\",\"accumulated\":\"true\",\"metric\":\"AmortizedCost\",\"kpis\":[],\"pivots\":[]},\"eTag\":\"vpkjpr\",\"id\":\"kwcf\",\"name\":\"ql\",\"type\":\"yxgtczh\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CostManagementManager manager =
            CostManagementManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<View> response = manager.views().listByScope("xcv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("vpkjpr", response.iterator().next().etag());
        Assertions.assertEquals("hnjivo", response.iterator().next().displayName());
        Assertions.assertEquals("tnovqfzgemjdftul", response.iterator().next().scope());
        Assertions.assertEquals(ChartType.LINE, response.iterator().next().chart());
        Assertions.assertEquals(AccumulatedType.TRUE, response.iterator().next().accumulated());
        Assertions.assertEquals(MetricType.AMORTIZED_COST, response.iterator().next().metric());
        Assertions.assertEquals(ReportType.USAGE, response.iterator().next().typePropertiesType());
        Assertions.assertEquals(ReportTimeframeType.MONTH_TO_DATE, response.iterator().next().timeframe());
        Assertions.assertEquals(true, response.iterator().next().includeMonetaryCommitment());
    }
}
