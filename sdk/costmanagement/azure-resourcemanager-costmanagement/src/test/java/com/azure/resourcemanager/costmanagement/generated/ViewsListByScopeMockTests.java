// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.AccumulatedType;
import com.azure.resourcemanager.costmanagement.models.ChartType;
import com.azure.resourcemanager.costmanagement.models.FunctionType;
import com.azure.resourcemanager.costmanagement.models.KpiType;
import com.azure.resourcemanager.costmanagement.models.MetricType;
import com.azure.resourcemanager.costmanagement.models.OperatorType;
import com.azure.resourcemanager.costmanagement.models.PivotType;
import com.azure.resourcemanager.costmanagement.models.QueryColumnType;
import com.azure.resourcemanager.costmanagement.models.ReportGranularityType;
import com.azure.resourcemanager.costmanagement.models.ReportTimeframeType;
import com.azure.resourcemanager.costmanagement.models.ReportType;
import com.azure.resourcemanager.costmanagement.models.View;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ViewsListByScopeMockTests {
    @Test
    public void testListByScope() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"c\",\"scope\":\"iqyhgfse\",\"createdOn\":\"2021-11-02T16:29:47Z\",\"modifiedOn\":\"2020-12-25T20:56:32Z\",\"dateRange\":\"sfledyn\",\"currency\":\"pziuwfbzkkdtnh\",\"query\":{\"type\":\"Usage\",\"timeframe\":\"MonthToDate\",\"timePeriod\":{\"from\":\"2021-06-09T09:04:15Z\",\"to\":\"2021-04-17T05:36:17Z\"},\"dataSet\":{\"granularity\":\"Monthly\",\"configuration\":{\"columns\":[\"afvafh\",\"by\",\"ccbevxrhyzdf\",\"rsofpltdbmairrh\"]},\"aggregation\":{\"qigtuujwouhdaws\":{\"name\":\"nracw\",\"function\":\"Sum\"},\"az\":{\"name\":\"grbjbxsjybvitvqk\",\"function\":\"Sum\"}},\"grouping\":[{\"type\":\"Dimension\",\"name\":\"ggmuwdcho\"},{\"type\":\"TagKey\",\"name\":\"nkf\"}],\"sorting\":[{\"name\":\"v\"}],\"filter\":{\"and\":[{},{},{}],\"or\":[{},{},{},{}],\"dimensions\":{\"name\":\"voaiknaqlnuw\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"yxl\",\"operator\":\"In\",\"values\":[]}}},\"includeMonetaryCommitment\":false},\"chart\":\"Line\",\"accumulated\":\"true\",\"metric\":\"AmortizedCost\",\"kpis\":[{\"type\":\"Forecast\",\"id\":\"jtlkexaonwivkcqh\",\"enabled\":true},{\"type\":\"Budget\",\"id\":\"lccrmmkyupi\",\"enabled\":true},{\"type\":\"Budget\",\"id\":\"fkak\",\"enabled\":true},{\"type\":\"Forecast\",\"id\":\"myildudxjasc\",\"enabled\":true}],\"pivots\":[{\"type\":\"Dimension\",\"name\":\"dxphlk\"},{\"type\":\"TagKey\",\"name\":\"gzv\"}]},\"eTag\":\"ij\",\"id\":\"kzuqnwsith\",\"name\":\"q\",\"type\":\"ly\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<View> response = manager.views().listByScope("jxsqwjhqkbiwetp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ij", response.iterator().next().etag());
        Assertions.assertEquals("c", response.iterator().next().displayName());
        Assertions.assertEquals("iqyhgfse", response.iterator().next().scope());
        Assertions.assertEquals("sfledyn", response.iterator().next().dateRange());
        Assertions.assertEquals(ChartType.LINE, response.iterator().next().chart());
        Assertions.assertEquals(AccumulatedType.TRUE, response.iterator().next().accumulated());
        Assertions.assertEquals(MetricType.AMORTIZED_COST, response.iterator().next().metric());
        Assertions.assertEquals(KpiType.FORECAST, response.iterator().next().kpis().get(0).type());
        Assertions.assertEquals("jtlkexaonwivkcqh", response.iterator().next().kpis().get(0).id());
        Assertions.assertEquals(true, response.iterator().next().kpis().get(0).enabled());
        Assertions.assertEquals(PivotType.DIMENSION, response.iterator().next().pivots().get(0).type());
        Assertions.assertEquals("dxphlk", response.iterator().next().pivots().get(0).name());
        Assertions.assertEquals(ReportType.USAGE, response.iterator().next().typePropertiesType());
        Assertions.assertEquals(ReportTimeframeType.MONTH_TO_DATE, response.iterator().next().timeframe());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-09T09:04:15Z"),
            response.iterator().next().timePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-17T05:36:17Z"),
            response.iterator().next().timePeriod().to());
        Assertions.assertEquals(ReportGranularityType.MONTHLY, response.iterator().next().dataSet().granularity());
        Assertions.assertEquals("afvafh", response.iterator().next().dataSet().configuration().columns().get(0));
        Assertions.assertEquals("nracw",
            response.iterator().next().dataSet().aggregation().get("qigtuujwouhdaws").name());
        Assertions.assertEquals(FunctionType.SUM,
            response.iterator().next().dataSet().aggregation().get("qigtuujwouhdaws").function());
        Assertions.assertEquals(QueryColumnType.DIMENSION,
            response.iterator().next().dataSet().grouping().get(0).type());
        Assertions.assertEquals("ggmuwdcho", response.iterator().next().dataSet().grouping().get(0).name());
        Assertions.assertEquals("v", response.iterator().next().dataSet().sorting().get(0).name());
        Assertions.assertEquals("voaiknaqlnuw", response.iterator().next().dataSet().filter().dimensions().name());
        Assertions.assertEquals(OperatorType.IN, response.iterator().next().dataSet().filter().dimensions().operator());
        Assertions.assertEquals("yxl", response.iterator().next().dataSet().filter().tags().name());
        Assertions.assertEquals(OperatorType.IN, response.iterator().next().dataSet().filter().tags().operator());
        Assertions.assertEquals(false, response.iterator().next().includeMonetaryCommitment());
    }
}
