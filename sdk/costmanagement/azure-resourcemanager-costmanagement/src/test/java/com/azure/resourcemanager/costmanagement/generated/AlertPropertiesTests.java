// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.fluent.models.AlertProperties;
import com.azure.resourcemanager.costmanagement.models.AlertCategory;
import com.azure.resourcemanager.costmanagement.models.AlertCriteria;
import com.azure.resourcemanager.costmanagement.models.AlertOperator;
import com.azure.resourcemanager.costmanagement.models.AlertPropertiesDefinition;
import com.azure.resourcemanager.costmanagement.models.AlertPropertiesDetails;
import com.azure.resourcemanager.costmanagement.models.AlertSource;
import com.azure.resourcemanager.costmanagement.models.AlertStatus;
import com.azure.resourcemanager.costmanagement.models.AlertTimeGrainType;
import com.azure.resourcemanager.costmanagement.models.AlertType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AlertPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertProperties model = BinaryData.fromString(
            "{\"definition\":{\"type\":\"General\",\"category\":\"Usage\",\"criteria\":\"CostThresholdExceeded\"},\"description\":\"zis\",\"source\":\"Preset\",\"details\":{\"timeGrainType\":\"BillingMonth\",\"periodStartDate\":\"lppvksrpq\",\"triggeredBy\":\"jzraehtwdwrf\",\"resourceGroupFilter\":[\"dataiby\"],\"resourceFilter\":[\"datal\"],\"meterFilter\":[\"datahfwpracstwit\",\"datakhevxccedc\",\"datanmdyodnwzxl\",\"datajc\"],\"tagFilter\":\"datahlt\",\"operator\":\"GreaterThan\",\"unit\":\"avvwxqi\",\"contactEmails\":[\"nyowxwlmdjrkvfg\",\"vfvpdbodaciz\"],\"contactGroups\":[\"lhkrribdeibqipqk\"],\"contactRoles\":[\"xndzwm\",\"refajpjorwkqnyh\"],\"overridingAlert\":\"ij\",\"departmentName\":\"ivfxzsjabibsyst\",\"companyName\":\"fsdjpvkvp\",\"enrollmentNumber\":\"xbkzbzkdvncj\",\"enrollmentStartDate\":\"udurgkakmokz\",\"enrollmentEndDate\":\"jk\"},\"costEntityId\":\"hmouwqlgzrfze\",\"status\":\"Dismissed\",\"creationTime\":\"izikayuhq\",\"closeTime\":\"jbsybbqw\",\"modificationTime\":\"t\",\"statusModificationUserName\":\"gmfpgvmp\",\"statusModificationTime\":\"as\"}")
            .toObject(AlertProperties.class);
        Assertions.assertEquals(AlertType.GENERAL, model.definition().type());
        Assertions.assertEquals(AlertCategory.USAGE, model.definition().category());
        Assertions.assertEquals(AlertCriteria.COST_THRESHOLD_EXCEEDED, model.definition().criteria());
        Assertions.assertEquals("zis", model.description());
        Assertions.assertEquals(AlertSource.PRESET, model.source());
        Assertions.assertEquals(AlertTimeGrainType.BILLING_MONTH, model.details().timeGrainType());
        Assertions.assertEquals("lppvksrpq", model.details().periodStartDate());
        Assertions.assertEquals("jzraehtwdwrf", model.details().triggeredBy());
        Assertions.assertEquals(AlertOperator.GREATER_THAN, model.details().operator());
        Assertions.assertEquals("avvwxqi", model.details().unit());
        Assertions.assertEquals("nyowxwlmdjrkvfg", model.details().contactEmails().get(0));
        Assertions.assertEquals("lhkrribdeibqipqk", model.details().contactGroups().get(0));
        Assertions.assertEquals("xndzwm", model.details().contactRoles().get(0));
        Assertions.assertEquals("ij", model.details().overridingAlert());
        Assertions.assertEquals("ivfxzsjabibsyst", model.details().departmentName());
        Assertions.assertEquals("fsdjpvkvp", model.details().companyName());
        Assertions.assertEquals("xbkzbzkdvncj", model.details().enrollmentNumber());
        Assertions.assertEquals("udurgkakmokz", model.details().enrollmentStartDate());
        Assertions.assertEquals("jk", model.details().enrollmentEndDate());
        Assertions.assertEquals("hmouwqlgzrfze", model.costEntityId());
        Assertions.assertEquals(AlertStatus.DISMISSED, model.status());
        Assertions.assertEquals("izikayuhq", model.creationTime());
        Assertions.assertEquals("jbsybbqw", model.closeTime());
        Assertions.assertEquals("t", model.modificationTime());
        Assertions.assertEquals("gmfpgvmp", model.statusModificationUsername());
        Assertions.assertEquals("as", model.statusModificationTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertProperties model = new AlertProperties()
            .withDefinition(new AlertPropertiesDefinition().withType(AlertType.GENERAL)
                .withCategory(AlertCategory.USAGE)
                .withCriteria(AlertCriteria.COST_THRESHOLD_EXCEEDED))
            .withDescription("zis")
            .withSource(AlertSource.PRESET)
            .withDetails(new AlertPropertiesDetails().withTimeGrainType(AlertTimeGrainType.BILLING_MONTH)
                .withPeriodStartDate("lppvksrpq")
                .withTriggeredBy("jzraehtwdwrf")
                .withResourceGroupFilter(Arrays.asList("dataiby"))
                .withResourceFilter(Arrays.asList("datal"))
                .withMeterFilter(Arrays.asList("datahfwpracstwit", "datakhevxccedc", "datanmdyodnwzxl", "datajc"))
                .withTagFilter("datahlt")
                .withOperator(AlertOperator.GREATER_THAN)
                .withUnit("avvwxqi")
                .withContactEmails(Arrays.asList("nyowxwlmdjrkvfg", "vfvpdbodaciz"))
                .withContactGroups(Arrays.asList("lhkrribdeibqipqk"))
                .withContactRoles(Arrays.asList("xndzwm", "refajpjorwkqnyh"))
                .withOverridingAlert("ij")
                .withDepartmentName("ivfxzsjabibsyst")
                .withCompanyName("fsdjpvkvp")
                .withEnrollmentNumber("xbkzbzkdvncj")
                .withEnrollmentStartDate("udurgkakmokz")
                .withEnrollmentEndDate("jk"))
            .withCostEntityId("hmouwqlgzrfze")
            .withStatus(AlertStatus.DISMISSED)
            .withCreationTime("izikayuhq")
            .withCloseTime("jbsybbqw")
            .withModificationTime("t")
            .withStatusModificationUsername("gmfpgvmp")
            .withStatusModificationTime("as");
        model = BinaryData.fromObject(model).toObject(AlertProperties.class);
        Assertions.assertEquals(AlertType.GENERAL, model.definition().type());
        Assertions.assertEquals(AlertCategory.USAGE, model.definition().category());
        Assertions.assertEquals(AlertCriteria.COST_THRESHOLD_EXCEEDED, model.definition().criteria());
        Assertions.assertEquals("zis", model.description());
        Assertions.assertEquals(AlertSource.PRESET, model.source());
        Assertions.assertEquals(AlertTimeGrainType.BILLING_MONTH, model.details().timeGrainType());
        Assertions.assertEquals("lppvksrpq", model.details().periodStartDate());
        Assertions.assertEquals("jzraehtwdwrf", model.details().triggeredBy());
        Assertions.assertEquals(AlertOperator.GREATER_THAN, model.details().operator());
        Assertions.assertEquals("avvwxqi", model.details().unit());
        Assertions.assertEquals("nyowxwlmdjrkvfg", model.details().contactEmails().get(0));
        Assertions.assertEquals("lhkrribdeibqipqk", model.details().contactGroups().get(0));
        Assertions.assertEquals("xndzwm", model.details().contactRoles().get(0));
        Assertions.assertEquals("ij", model.details().overridingAlert());
        Assertions.assertEquals("ivfxzsjabibsyst", model.details().departmentName());
        Assertions.assertEquals("fsdjpvkvp", model.details().companyName());
        Assertions.assertEquals("xbkzbzkdvncj", model.details().enrollmentNumber());
        Assertions.assertEquals("udurgkakmokz", model.details().enrollmentStartDate());
        Assertions.assertEquals("jk", model.details().enrollmentEndDate());
        Assertions.assertEquals("hmouwqlgzrfze", model.costEntityId());
        Assertions.assertEquals(AlertStatus.DISMISSED, model.status());
        Assertions.assertEquals("izikayuhq", model.creationTime());
        Assertions.assertEquals("jbsybbqw", model.closeTime());
        Assertions.assertEquals("t", model.modificationTime());
        Assertions.assertEquals("gmfpgvmp", model.statusModificationUsername());
        Assertions.assertEquals("as", model.statusModificationTime());
    }
}
