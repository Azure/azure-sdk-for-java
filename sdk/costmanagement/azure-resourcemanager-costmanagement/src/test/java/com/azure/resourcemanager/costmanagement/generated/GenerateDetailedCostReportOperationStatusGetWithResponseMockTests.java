// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.GenerateDetailedCostReportOperationStatuses;
import com.azure.resourcemanager.costmanagement.models.ReportOperationStatusType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GenerateDetailedCostReportOperationStatusGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"ibn\",\"name\":\"ysux\",\"status\":{\"status\":\"TimedOut\"},\"startTime\":\"tvlwijpsttexoq\",\"endTime\":\"wcyyufmhruncu\",\"type\":\"qspkcdqzhlctd\",\"properties\":{\"expiryTime\":\"2021-09-15T20:34:04Z\",\"validTill\":\"2020-12-28T19:31:05Z\",\"downloadUrl\":\"pchrqbn\"}}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CostManagementManager manager =
            CostManagementManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        GenerateDetailedCostReportOperationStatuses response =
            manager
                .generateDetailedCostReportOperationStatus()
                .getWithResponse("wpgdak", "hzyvlixqnrkcx", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ibn", response.id());
        Assertions.assertEquals("ysux", response.name());
        Assertions.assertEquals(ReportOperationStatusType.TIMED_OUT, response.status().status());
        Assertions.assertEquals("tvlwijpsttexoq", response.startTime());
        Assertions.assertEquals("wcyyufmhruncu", response.endTime());
        Assertions.assertEquals("qspkcdqzhlctd", response.type());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-28T19:31:05Z"), response.validTill());
        Assertions.assertEquals("pchrqbn", response.downloadUrl());
    }
}
