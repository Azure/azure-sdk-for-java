// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.fluent.models.DimensionInner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DimensionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DimensionInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"bb\",\"filterEnabled\":true,\"groupingEnabled\":true,\"data\":[\"chzyvlixqnrk\"],\"total\":2002873882,\"category\":\"ibn\",\"usageStart\":\"2021-01-19T00:22Z\",\"usageEnd\":\"2021-10-29T13:36:36Z\",\"nextLink\":\"swqrntvlwijp\"},\"sku\":\"texoqqpwc\",\"eTag\":\"ufmhrunc\",\"location\":\"wmqs\",\"tags\":{\"ctddun\":\"dqzh\",\"pchrqbn\":\"ndy\",\"gydcw\":\"jrcg\"},\"id\":\"oxjumvqqo\",\"name\":\"ihrraiouaub\",\"type\":\"jtlo\"}")
            .toObject(DimensionInner.class);
        Assertions.assertEquals("wmqs", model.location());
        Assertions.assertEquals("dqzh", model.tags().get("ctddun"));
        Assertions.assertEquals("chzyvlixqnrk", model.data().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DimensionInner model = new DimensionInner().withLocation("wmqs")
            .withTags(mapOf("ctddun", "dqzh", "pchrqbn", "ndy", "gydcw", "jrcg"))
            .withData(Arrays.asList("chzyvlixqnrk"));
        model = BinaryData.fromObject(model).toObject(DimensionInner.class);
        Assertions.assertEquals("wmqs", model.location());
        Assertions.assertEquals("dqzh", model.tags().get("ctddun"));
        Assertions.assertEquals("chzyvlixqnrk", model.data().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
