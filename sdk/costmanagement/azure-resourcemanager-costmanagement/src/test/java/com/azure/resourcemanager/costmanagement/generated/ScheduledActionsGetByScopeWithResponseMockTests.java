// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.DaysOfWeek;
import com.azure.resourcemanager.costmanagement.models.FileFormat;
import com.azure.resourcemanager.costmanagement.models.ScheduleFrequency;
import com.azure.resourcemanager.costmanagement.models.ScheduledAction;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionKind;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionStatus;
import com.azure.resourcemanager.costmanagement.models.WeeksOfMonth;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsGetByScopeWithResponseMockTests {
    @Test
    public void testGetByScopeWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"oejgoiutgwrmkah\",\"fileDestination\":{\"fileFormats\":[\"Csv\",\"Csv\",\"Csv\",\"Csv\"]},\"notification\":{\"to\":[\"cihn\"],\"language\":\"gmipnmliqmvlbhik\",\"message\":\"qgrvg\",\"regionalFormat\":\"mxpu\",\"subject\":\"dtsdfjy\"},\"notificationEmail\":\"socwiqbuout\",\"schedule\":{\"frequency\":\"Daily\",\"hourOfDay\":367292457,\"daysOfWeek\":[\"Thursday\",\"Friday\"],\"weeksOfMonth\":[\"First\"],\"dayOfMonth\":829558706,\"startDate\":\"2020-12-29T14:18:24Z\",\"endDate\":\"2021-10-22T11:00:33Z\"},\"scope\":\"zvdajfwnncf\",\"status\":\"Expired\",\"viewId\":\"ciqgjjrlhiqlwixv\"},\"eTag\":\"ougu\",\"kind\":\"Email\",\"id\":\"opgjttba\",\"name\":\"ualapdl\",\"type\":\"db\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScheduledAction response = manager.scheduledActions()
            .getByScopeWithResponse("ctgkppgkqzkcyzmf", "ngdyfcixrhlcq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(ScheduledActionKind.EMAIL, response.kind());
        Assertions.assertEquals("oejgoiutgwrmkah", response.displayName());
        Assertions.assertEquals(FileFormat.CSV, response.fileDestination().fileFormats().get(0));
        Assertions.assertEquals("cihn", response.notification().to().get(0));
        Assertions.assertEquals("gmipnmliqmvlbhik", response.notification().language());
        Assertions.assertEquals("qgrvg", response.notification().message());
        Assertions.assertEquals("mxpu", response.notification().regionalFormat());
        Assertions.assertEquals("dtsdfjy", response.notification().subject());
        Assertions.assertEquals("socwiqbuout", response.notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.DAILY, response.schedule().frequency());
        Assertions.assertEquals(367292457, response.schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.THURSDAY, response.schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FIRST, response.schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(829558706, response.schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T14:18:24Z"), response.schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-22T11:00:33Z"), response.schedule().endDate());
        Assertions.assertEquals("zvdajfwnncf", response.scope());
        Assertions.assertEquals(ScheduledActionStatus.EXPIRED, response.status());
        Assertions.assertEquals("ciqgjjrlhiqlwixv", response.viewId());
    }
}
