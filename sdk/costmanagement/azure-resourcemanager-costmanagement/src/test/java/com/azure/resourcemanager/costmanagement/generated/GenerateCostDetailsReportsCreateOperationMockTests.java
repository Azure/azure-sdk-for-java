// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.CostDetailsDataFormat;
import com.azure.resourcemanager.costmanagement.models.CostDetailsMetricType;
import com.azure.resourcemanager.costmanagement.models.CostDetailsOperationResults;
import com.azure.resourcemanager.costmanagement.models.CostDetailsStatusType;
import com.azure.resourcemanager.costmanagement.models.CostDetailsTimePeriod;
import com.azure.resourcemanager.costmanagement.models.GenerateCostDetailsReportRequestDefinition;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GenerateCostDetailsReportsCreateOperationMockTests {
    @Test
    public void testCreateOperation() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"jerbdkelvidizozs\",\"name\":\"ccxjm\",\"type\":\"fdgnwncypuuwwlt\",\"status\":\"Completed\",\"manifest\":{\"manifestVersion\":\"tzenk\",\"dataFormat\":\"Csv\",\"byteCount\":3883485074610487115,\"blobCount\":2067869753,\"compressData\":false,\"requestContext\":{\"requestScope\":\"flyh\"},\"blobs\":[]},\"validTill\":\"2021-01-15T10:18:43Z\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CostManagementManager manager =
            CostManagementManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        CostDetailsOperationResults response =
            manager
                .generateCostDetailsReports()
                .createOperation(
                    "gnl",
                    new GenerateCostDetailsReportRequestDefinition()
                        .withMetric(CostDetailsMetricType.ACTUAL_COST)
                        .withTimePeriod(new CostDetailsTimePeriod().withStart("zlrpiqywncvj").withEnd("szcofizeht"))
                        .withBillingPeriod("gbjkvreljeamur")
                        .withInvoiceId("mlovuanashcxl"),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jerbdkelvidizozs", response.id());
        Assertions.assertEquals("ccxjm", response.name());
        Assertions.assertEquals("fdgnwncypuuwwlt", response.type());
        Assertions.assertEquals(CostDetailsStatusType.COMPLETED, response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-15T10:18:43Z"), response.validTill());
        Assertions.assertEquals("tzenk", response.manifestVersion());
        Assertions.assertEquals(CostDetailsDataFormat.CSV, response.dataFormat());
        Assertions.assertEquals(3883485074610487115L, response.byteCount());
        Assertions.assertEquals(2067869753, response.blobCount());
        Assertions.assertEquals(false, response.compressData());
        Assertions.assertEquals("flyh", response.requestScope());
    }
}
