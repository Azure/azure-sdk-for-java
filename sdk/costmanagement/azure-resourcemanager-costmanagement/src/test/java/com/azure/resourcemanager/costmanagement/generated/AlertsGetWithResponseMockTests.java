// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.Alert;
import com.azure.resourcemanager.costmanagement.models.AlertCategory;
import com.azure.resourcemanager.costmanagement.models.AlertCriteria;
import com.azure.resourcemanager.costmanagement.models.AlertOperator;
import com.azure.resourcemanager.costmanagement.models.AlertSource;
import com.azure.resourcemanager.costmanagement.models.AlertStatus;
import com.azure.resourcemanager.costmanagement.models.AlertTimeGrainType;
import com.azure.resourcemanager.costmanagement.models.AlertType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AlertsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"definition\":{\"type\":\"Credit\",\"category\":\"Cost\",\"criteria\":\"QuotaThresholdApproaching\"},\"description\":\"llhdyzm\",\"source\":\"Preset\",\"details\":{\"timeGrainType\":\"Annually\",\"periodStartDate\":\"xak\",\"triggeredBy\":\"ywymxgaabj\",\"resourceGroupFilter\":[\"datafohfaogzvki\",\"datarsiwdyjqur\"],\"resourceFilter\":[\"datarra\",\"dataeek\",\"datas\"],\"meterFilter\":[\"dataogd\"],\"tagFilter\":\"datacbcbgydlqidy\",\"operator\":\"GreaterThanOrEqualTo\",\"unit\":\"yrilkfb\",\"contactEmails\":[\"xvztpbnfnqtxj\",\"omals\",\"bnfddep\",\"dwq\"],\"contactGroups\":[\"f\",\"ygleexa\",\"vmywhsbrcarycsjj\"],\"contactRoles\":[\"oaqa\",\"uvehzptd\",\"krrbhmpful\",\"be\"],\"overridingAlert\":\"ybpmf\",\"departmentName\":\"ununm\",\"companyName\":\"krvfyifkdschl\",\"enrollmentNumber\":\"fict\",\"enrollmentStartDate\":\"jjwgcwnp\",\"enrollmentEndDate\":\"kgf\"},\"costEntityId\":\"ogmhmjpj\",\"status\":\"Dismissed\",\"creationTime\":\"pdqwtygevgwmse\",\"closeTime\":\"rxifvqnrx\",\"modificationTime\":\"bpjptnvwjhrsi\",\"statusModificationUserName\":\"pxlbtpakftngat\",\"statusModificationTime\":\"ykyutrymdwmfj\"},\"eTag\":\"y\",\"id\":\"vjqdvdwkq\",\"name\":\"ldrlefgnaavua\",\"type\":\"n\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Alert response
            = manager.alerts().getWithResponse("oolzqocarkuzl", "cnn", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("y", response.etag());
        Assertions.assertEquals(AlertType.CREDIT, response.definition().type());
        Assertions.assertEquals(AlertCategory.COST, response.definition().category());
        Assertions.assertEquals(AlertCriteria.QUOTA_THRESHOLD_APPROACHING, response.definition().criteria());
        Assertions.assertEquals("llhdyzm", response.description());
        Assertions.assertEquals(AlertSource.PRESET, response.source());
        Assertions.assertEquals(AlertTimeGrainType.ANNUALLY, response.details().timeGrainType());
        Assertions.assertEquals("xak", response.details().periodStartDate());
        Assertions.assertEquals("ywymxgaabj", response.details().triggeredBy());
        Assertions.assertEquals(AlertOperator.GREATER_THAN_OR_EQUAL_TO, response.details().operator());
        Assertions.assertEquals("yrilkfb", response.details().unit());
        Assertions.assertEquals("xvztpbnfnqtxj", response.details().contactEmails().get(0));
        Assertions.assertEquals("f", response.details().contactGroups().get(0));
        Assertions.assertEquals("oaqa", response.details().contactRoles().get(0));
        Assertions.assertEquals("ybpmf", response.details().overridingAlert());
        Assertions.assertEquals("ununm", response.details().departmentName());
        Assertions.assertEquals("krvfyifkdschl", response.details().companyName());
        Assertions.assertEquals("fict", response.details().enrollmentNumber());
        Assertions.assertEquals("jjwgcwnp", response.details().enrollmentStartDate());
        Assertions.assertEquals("kgf", response.details().enrollmentEndDate());
        Assertions.assertEquals("ogmhmjpj", response.costEntityId());
        Assertions.assertEquals(AlertStatus.DISMISSED, response.status());
        Assertions.assertEquals("pdqwtygevgwmse", response.creationTime());
        Assertions.assertEquals("rxifvqnrx", response.closeTime());
        Assertions.assertEquals("bpjptnvwjhrsi", response.modificationTime());
        Assertions.assertEquals("pxlbtpakftngat", response.statusModificationUsername());
        Assertions.assertEquals("ykyutrymdwmfj", response.statusModificationTime());
    }
}
