// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.DaysOfWeek;
import com.azure.resourcemanager.costmanagement.models.FileFormat;
import com.azure.resourcemanager.costmanagement.models.ScheduleFrequency;
import com.azure.resourcemanager.costmanagement.models.ScheduledAction;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionKind;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionStatus;
import com.azure.resourcemanager.costmanagement.models.WeeksOfMonth;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsListByScopeMockTests {
    @Test
    public void testListByScope() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"xivcbkutpumlt\",\"fileDestination\":{\"fileFormats\":[\"Csv\"]},\"notification\":{\"to\":[\"ynbpvzlqywauy\",\"njc\",\"hmocgjshg\"],\"language\":\"a\",\"message\":\"wvixq\",\"regionalFormat\":\"gljkybsj\",\"subject\":\"clrvtzqnrbctbh\"},\"notificationEmail\":\"hxpcvrdnyeita\",\"schedule\":{\"frequency\":\"Weekly\",\"hourOfDay\":297181437,\"daysOfWeek\":[\"Tuesday\"],\"weeksOfMonth\":[\"Fourth\",\"Third\",\"Third\",\"First\"],\"dayOfMonth\":41519341,\"startDate\":\"2021-02-25T15:02:36Z\",\"endDate\":\"2021-03-27T13:49:42Z\"},\"scope\":\"cz\",\"status\":\"Expired\",\"viewId\":\"iceevsaaxwspca\"},\"eTag\":\"khfjqebglcxkx\",\"kind\":\"InsightAlert\",\"id\":\"omv\",\"name\":\"g\",\"type\":\"sem\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ScheduledAction> response
            = manager.scheduledActions().listByScope("wilzzhnijmriprlk", "neyttl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ScheduledActionKind.INSIGHT_ALERT, response.iterator().next().kind());
        Assertions.assertEquals("xivcbkutpumlt", response.iterator().next().displayName());
        Assertions.assertEquals(FileFormat.CSV, response.iterator().next().fileDestination().fileFormats().get(0));
        Assertions.assertEquals("ynbpvzlqywauy", response.iterator().next().notification().to().get(0));
        Assertions.assertEquals("a", response.iterator().next().notification().language());
        Assertions.assertEquals("wvixq", response.iterator().next().notification().message());
        Assertions.assertEquals("gljkybsj", response.iterator().next().notification().regionalFormat());
        Assertions.assertEquals("clrvtzqnrbctbh", response.iterator().next().notification().subject());
        Assertions.assertEquals("hxpcvrdnyeita", response.iterator().next().notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.WEEKLY, response.iterator().next().schedule().frequency());
        Assertions.assertEquals(297181437, response.iterator().next().schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.TUESDAY, response.iterator().next().schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FOURTH, response.iterator().next().schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(41519341, response.iterator().next().schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T15:02:36Z"),
            response.iterator().next().schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-27T13:49:42Z"),
            response.iterator().next().schedule().endDate());
        Assertions.assertEquals("cz", response.iterator().next().scope());
        Assertions.assertEquals(ScheduledActionStatus.EXPIRED, response.iterator().next().status());
        Assertions.assertEquals("iceevsaaxwspca", response.iterator().next().viewId());
    }
}
