// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.models.ExportDataset;
import com.azure.resourcemanager.costmanagement.models.ExportDatasetConfiguration;
import com.azure.resourcemanager.costmanagement.models.ExportDefinition;
import com.azure.resourcemanager.costmanagement.models.ExportTimePeriod;
import com.azure.resourcemanager.costmanagement.models.ExportType;
import com.azure.resourcemanager.costmanagement.models.GranularityType;
import com.azure.resourcemanager.costmanagement.models.TimeframeType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ExportDefinitionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExportDefinition model = BinaryData.fromString(
            "{\"type\":\"ActualCost\",\"timeframe\":\"Custom\",\"timePeriod\":{\"from\":\"2021-11-25T13:45:13Z\",\"to\":\"2021-04-13T05:47:21Z\"},\"dataSet\":{\"granularity\":\"Daily\",\"configuration\":{\"columns\":[\"nssqyzqed\",\"kdfrdbiqmrjgeihf\",\"lg\"]}}}")
            .toObject(ExportDefinition.class);
        Assertions.assertEquals(ExportType.ACTUAL_COST, model.type());
        Assertions.assertEquals(TimeframeType.CUSTOM, model.timeframe());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T13:45:13Z"), model.timePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T05:47:21Z"), model.timePeriod().to());
        Assertions.assertEquals(GranularityType.DAILY, model.dataSet().granularity());
        Assertions.assertEquals("nssqyzqed", model.dataSet().configuration().columns().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExportDefinition model = new ExportDefinition().withType(ExportType.ACTUAL_COST)
            .withTimeframe(TimeframeType.CUSTOM)
            .withTimePeriod(new ExportTimePeriod().withFrom(OffsetDateTime.parse("2021-11-25T13:45:13Z"))
                .withTo(OffsetDateTime.parse("2021-04-13T05:47:21Z")))
            .withDataSet(new ExportDataset().withGranularity(GranularityType.DAILY)
                .withConfiguration(new ExportDatasetConfiguration()
                    .withColumns(Arrays.asList("nssqyzqed", "kdfrdbiqmrjgeihf", "lg"))));
        model = BinaryData.fromObject(model).toObject(ExportDefinition.class);
        Assertions.assertEquals(ExportType.ACTUAL_COST, model.type());
        Assertions.assertEquals(TimeframeType.CUSTOM, model.timeframe());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T13:45:13Z"), model.timePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-13T05:47:21Z"), model.timePeriod().to());
        Assertions.assertEquals(GranularityType.DAILY, model.dataSet().granularity());
        Assertions.assertEquals("nssqyzqed", model.dataSet().configuration().columns().get(0));
    }
}
