// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.AccumulatedType;
import com.azure.resourcemanager.costmanagement.models.ChartType;
import com.azure.resourcemanager.costmanagement.models.FunctionType;
import com.azure.resourcemanager.costmanagement.models.KpiType;
import com.azure.resourcemanager.costmanagement.models.MetricType;
import com.azure.resourcemanager.costmanagement.models.OperatorType;
import com.azure.resourcemanager.costmanagement.models.PivotType;
import com.azure.resourcemanager.costmanagement.models.QueryColumnType;
import com.azure.resourcemanager.costmanagement.models.ReportGranularityType;
import com.azure.resourcemanager.costmanagement.models.ReportTimeframeType;
import com.azure.resourcemanager.costmanagement.models.ReportType;
import com.azure.resourcemanager.costmanagement.models.View;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ViewsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"jb\",\"scope\":\"ykfhyqezvqqugdrf\",\"createdOn\":\"2021-07-24T11:55:41Z\",\"modifiedOn\":\"2021-09-19T09:08:43Z\",\"dateRange\":\"reuquowtljvf\",\"currency\":\"reagkhyxvrqt\",\"query\":{\"type\":\"Usage\",\"timeframe\":\"YearToDate\",\"timePeriod\":{\"from\":\"2021-06-12T01:43:34Z\",\"to\":\"2021-05-11T17:13:28Z\"},\"dataSet\":{\"granularity\":\"Monthly\",\"configuration\":{\"columns\":[\"epjpfs\",\"ykgsangpszng\"]},\"aggregation\":{\"kvec\":{\"name\":\"g\",\"function\":\"Sum\"}},\"grouping\":[{\"type\":\"Dimension\",\"name\":\"ngoadyedmzr\"},{\"type\":\"Dimension\",\"name\":\"foknubnoitp\"},{\"type\":\"TagKey\",\"name\":\"ztrgdgxvcoq\"}],\"sorting\":[{\"name\":\"wugyx\"}],\"filter\":{\"and\":[{},{},{},{}],\"or\":[{},{},{}],\"dimensions\":{\"name\":\"alwvskbu\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"caqt\",\"operator\":\"In\",\"values\":[]}}},\"includeMonetaryCommitment\":false},\"chart\":\"GroupedColumn\",\"accumulated\":\"false\",\"metric\":\"AHUB\",\"kpis\":[{\"type\":\"Forecast\",\"id\":\"kuejk\",\"enabled\":false},{\"type\":\"Budget\",\"id\":\"jofqcvovjufycs\",\"enabled\":false},{\"type\":\"Forecast\",\"id\":\"yeji\",\"enabled\":true}],\"pivots\":[{\"type\":\"Dimension\",\"name\":\"ortudawlpjfel\"},{\"type\":\"TagKey\",\"name\":\"ptcbgqnzmnh\"},{\"type\":\"TagKey\",\"name\":\"alwcjgckbb\"}]},\"eTag\":\"cgzpraoxnyu\",\"id\":\"fa\",\"name\":\"sgftipwc\",\"type\":\"byubhiqdxyurnpn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        View response = manager.views().getWithResponse("hluqwquls", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("cgzpraoxnyu", response.etag());
        Assertions.assertEquals("jb", response.displayName());
        Assertions.assertEquals("ykfhyqezvqqugdrf", response.scope());
        Assertions.assertEquals("reuquowtljvf", response.dateRange());
        Assertions.assertEquals(ChartType.GROUPED_COLUMN, response.chart());
        Assertions.assertEquals(AccumulatedType.FALSE, response.accumulated());
        Assertions.assertEquals(MetricType.AHUB, response.metric());
        Assertions.assertEquals(KpiType.FORECAST, response.kpis().get(0).type());
        Assertions.assertEquals("kuejk", response.kpis().get(0).id());
        Assertions.assertEquals(false, response.kpis().get(0).enabled());
        Assertions.assertEquals(PivotType.DIMENSION, response.pivots().get(0).type());
        Assertions.assertEquals("ortudawlpjfel", response.pivots().get(0).name());
        Assertions.assertEquals(ReportType.USAGE, response.typePropertiesType());
        Assertions.assertEquals(ReportTimeframeType.YEAR_TO_DATE, response.timeframe());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-12T01:43:34Z"), response.timePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T17:13:28Z"), response.timePeriod().to());
        Assertions.assertEquals(ReportGranularityType.MONTHLY, response.dataSet().granularity());
        Assertions.assertEquals("epjpfs", response.dataSet().configuration().columns().get(0));
        Assertions.assertEquals("g", response.dataSet().aggregation().get("kvec").name());
        Assertions.assertEquals(FunctionType.SUM, response.dataSet().aggregation().get("kvec").function());
        Assertions.assertEquals(QueryColumnType.DIMENSION, response.dataSet().grouping().get(0).type());
        Assertions.assertEquals("ngoadyedmzr", response.dataSet().grouping().get(0).name());
        Assertions.assertEquals("wugyx", response.dataSet().sorting().get(0).name());
        Assertions.assertEquals("alwvskbu", response.dataSet().filter().dimensions().name());
        Assertions.assertEquals(OperatorType.IN, response.dataSet().filter().dimensions().operator());
        Assertions.assertEquals("caqt", response.dataSet().filter().tags().name());
        Assertions.assertEquals(OperatorType.IN, response.dataSet().filter().tags().operator());
        Assertions.assertEquals(false, response.includeMonetaryCommitment());
    }
}
