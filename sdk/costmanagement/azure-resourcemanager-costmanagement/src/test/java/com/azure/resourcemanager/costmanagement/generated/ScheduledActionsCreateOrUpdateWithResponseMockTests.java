// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.fluent.models.ScheduledActionInner;
import com.azure.resourcemanager.costmanagement.models.DaysOfWeek;
import com.azure.resourcemanager.costmanagement.models.FileDestination;
import com.azure.resourcemanager.costmanagement.models.FileFormat;
import com.azure.resourcemanager.costmanagement.models.NotificationProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduleFrequency;
import com.azure.resourcemanager.costmanagement.models.ScheduleProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduledAction;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionKind;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionStatus;
import com.azure.resourcemanager.costmanagement.models.WeeksOfMonth;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"its\",\"fileDestination\":{\"fileFormats\":[\"Csv\",\"Csv\"]},\"notification\":{\"to\":[\"m\",\"k\",\"cauwazcgwdfriwg\"],\"language\":\"jpozoksc\",\"message\":\"llixdgbyfgw\",\"regionalFormat\":\"qkjvxprwpxsoohu\",\"subject\":\"xlcskltez\"},\"notificationEmail\":\"ggg\",\"schedule\":{\"frequency\":\"Daily\",\"hourOfDay\":1713794043,\"daysOfWeek\":[\"Sunday\",\"Tuesday\"],\"weeksOfMonth\":[\"First\",\"First\",\"First\",\"Second\"],\"dayOfMonth\":1703241541,\"startDate\":\"2020-12-23T22:36:03Z\",\"endDate\":\"2021-08-21T23:31:32Z\"},\"scope\":\"erpi\",\"status\":\"Expired\",\"viewId\":\"tjzgczfcm\"},\"eTag\":\"fbodetresrgvts\",\"kind\":\"Email\",\"id\":\"t\",\"name\":\"ai\",\"type\":\"muqkevzgjypanhx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScheduledAction response
            = manager.scheduledActions()
                .createOrUpdateWithResponse("mesrfsvpi", new ScheduledActionInner().withKind(ScheduledActionKind.EMAIL)
                    .withDisplayName("zpatqtd")
                    .withFileDestination(new FileDestination()
                        .withFileFormats(Arrays.asList(FileFormat.CSV, FileFormat.CSV, FileFormat.CSV)))
                    .withNotification(new NotificationProperties().withTo(Arrays.asList("koj"))
                        .withLanguage("bbg")
                        .withMessage("ft")
                        .withRegionalFormat("ubz")
                        .withSubject("vpvdylytcovqse"))
                    .withNotificationEmail("rf")
                    .withSchedule(new ScheduleProperties().withFrequency(ScheduleFrequency.WEEKLY)
                        .withHourOfDay(1139866422)
                        .withDaysOfWeek(Arrays.asList(DaysOfWeek.SUNDAY, DaysOfWeek.MONDAY))
                        .withWeeksOfMonth(Arrays.asList(WeeksOfMonth.SECOND, WeeksOfMonth.SECOND, WeeksOfMonth.THIRD))
                        .withDayOfMonth(2144106709)
                        .withStartDate(OffsetDateTime.parse("2021-03-13T07:11:16Z"))
                        .withEndDate(OffsetDateTime.parse("2021-04-23T22:54:28Z")))
                    .withScope("jmdihdcyyyzlw")
                    .withStatus(ScheduledActionStatus.EXPIRED)
                    .withViewId("wzjnufz"), "tdp", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(ScheduledActionKind.EMAIL, response.kind());
        Assertions.assertEquals("its", response.displayName());
        Assertions.assertEquals(FileFormat.CSV, response.fileDestination().fileFormats().get(0));
        Assertions.assertEquals("m", response.notification().to().get(0));
        Assertions.assertEquals("jpozoksc", response.notification().language());
        Assertions.assertEquals("llixdgbyfgw", response.notification().message());
        Assertions.assertEquals("qkjvxprwpxsoohu", response.notification().regionalFormat());
        Assertions.assertEquals("xlcskltez", response.notification().subject());
        Assertions.assertEquals("ggg", response.notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.DAILY, response.schedule().frequency());
        Assertions.assertEquals(1713794043, response.schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.SUNDAY, response.schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FIRST, response.schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(1703241541, response.schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T22:36:03Z"), response.schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T23:31:32Z"), response.schedule().endDate());
        Assertions.assertEquals("erpi", response.scope());
        Assertions.assertEquals(ScheduledActionStatus.EXPIRED, response.status());
        Assertions.assertEquals("tjzgczfcm", response.viewId());
    }
}
