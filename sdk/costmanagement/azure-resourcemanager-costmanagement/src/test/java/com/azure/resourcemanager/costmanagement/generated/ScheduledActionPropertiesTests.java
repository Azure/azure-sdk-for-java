// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.fluent.models.ScheduledActionProperties;
import com.azure.resourcemanager.costmanagement.models.DaysOfWeek;
import com.azure.resourcemanager.costmanagement.models.FileDestination;
import com.azure.resourcemanager.costmanagement.models.FileFormat;
import com.azure.resourcemanager.costmanagement.models.NotificationProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduleFrequency;
import com.azure.resourcemanager.costmanagement.models.ScheduleProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionStatus;
import com.azure.resourcemanager.costmanagement.models.WeeksOfMonth;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduledActionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledActionProperties model = BinaryData.fromString(
            "{\"displayName\":\"ids\",\"fileDestination\":{\"fileFormats\":[\"Csv\"]},\"notification\":{\"to\":[\"uffgllukkutvlx\",\"rpq\",\"vmblcouqe\"],\"language\":\"hbcdsziry\",\"message\":\"ndo\",\"regionalFormat\":\"mbltoo\",\"subject\":\"mkfqlwxldy\"},\"notificationEmail\":\"lsygaol\",\"schedule\":{\"frequency\":\"Weekly\",\"hourOfDay\":1481014502,\"daysOfWeek\":[\"Monday\"],\"weeksOfMonth\":[\"First\",\"Second\",\"Last\"],\"dayOfMonth\":923883370,\"startDate\":\"2021-05-08T04:16:06Z\",\"endDate\":\"2021-06-16T22:07:38Z\"},\"scope\":\"xxahmrnadzyqegxy\",\"status\":\"Expired\",\"viewId\":\"pinbmhwbjijkgqxn\"}")
            .toObject(ScheduledActionProperties.class);
        Assertions.assertEquals("ids", model.displayName());
        Assertions.assertEquals(FileFormat.CSV, model.fileDestination().fileFormats().get(0));
        Assertions.assertEquals("uffgllukkutvlx", model.notification().to().get(0));
        Assertions.assertEquals("hbcdsziry", model.notification().language());
        Assertions.assertEquals("ndo", model.notification().message());
        Assertions.assertEquals("mbltoo", model.notification().regionalFormat());
        Assertions.assertEquals("mkfqlwxldy", model.notification().subject());
        Assertions.assertEquals("lsygaol", model.notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.WEEKLY, model.schedule().frequency());
        Assertions.assertEquals(1481014502, model.schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FIRST, model.schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(923883370, model.schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-08T04:16:06Z"), model.schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-16T22:07:38Z"), model.schedule().endDate());
        Assertions.assertEquals("xxahmrnadzyqegxy", model.scope());
        Assertions.assertEquals(ScheduledActionStatus.EXPIRED, model.status());
        Assertions.assertEquals("pinbmhwbjijkgqxn", model.viewId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledActionProperties model = new ScheduledActionProperties().withDisplayName("ids")
            .withFileDestination(new FileDestination().withFileFormats(Arrays.asList(FileFormat.CSV)))
            .withNotification(new NotificationProperties().withTo(Arrays.asList("uffgllukkutvlx", "rpq", "vmblcouqe"))
                .withLanguage("hbcdsziry")
                .withMessage("ndo")
                .withRegionalFormat("mbltoo")
                .withSubject("mkfqlwxldy"))
            .withNotificationEmail("lsygaol")
            .withSchedule(new ScheduleProperties().withFrequency(ScheduleFrequency.WEEKLY)
                .withHourOfDay(1481014502)
                .withDaysOfWeek(Arrays.asList(DaysOfWeek.MONDAY))
                .withWeeksOfMonth(Arrays.asList(WeeksOfMonth.FIRST, WeeksOfMonth.SECOND, WeeksOfMonth.LAST))
                .withDayOfMonth(923883370)
                .withStartDate(OffsetDateTime.parse("2021-05-08T04:16:06Z"))
                .withEndDate(OffsetDateTime.parse("2021-06-16T22:07:38Z")))
            .withScope("xxahmrnadzyqegxy")
            .withStatus(ScheduledActionStatus.EXPIRED)
            .withViewId("pinbmhwbjijkgqxn");
        model = BinaryData.fromObject(model).toObject(ScheduledActionProperties.class);
        Assertions.assertEquals("ids", model.displayName());
        Assertions.assertEquals(FileFormat.CSV, model.fileDestination().fileFormats().get(0));
        Assertions.assertEquals("uffgllukkutvlx", model.notification().to().get(0));
        Assertions.assertEquals("hbcdsziry", model.notification().language());
        Assertions.assertEquals("ndo", model.notification().message());
        Assertions.assertEquals("mbltoo", model.notification().regionalFormat());
        Assertions.assertEquals("mkfqlwxldy", model.notification().subject());
        Assertions.assertEquals("lsygaol", model.notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.WEEKLY, model.schedule().frequency());
        Assertions.assertEquals(1481014502, model.schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FIRST, model.schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(923883370, model.schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-08T04:16:06Z"), model.schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-16T22:07:38Z"), model.schedule().endDate());
        Assertions.assertEquals("xxahmrnadzyqegxy", model.scope());
        Assertions.assertEquals(ScheduledActionStatus.EXPIRED, model.status());
        Assertions.assertEquals("pinbmhwbjijkgqxn", model.viewId());
    }
}
