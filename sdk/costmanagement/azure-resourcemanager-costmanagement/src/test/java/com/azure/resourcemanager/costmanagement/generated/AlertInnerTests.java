// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.fluent.models.AlertInner;
import com.azure.resourcemanager.costmanagement.models.AlertCategory;
import com.azure.resourcemanager.costmanagement.models.AlertCriteria;
import com.azure.resourcemanager.costmanagement.models.AlertOperator;
import com.azure.resourcemanager.costmanagement.models.AlertPropertiesDefinition;
import com.azure.resourcemanager.costmanagement.models.AlertPropertiesDetails;
import com.azure.resourcemanager.costmanagement.models.AlertSource;
import com.azure.resourcemanager.costmanagement.models.AlertStatus;
import com.azure.resourcemanager.costmanagement.models.AlertTimeGrainType;
import com.azure.resourcemanager.costmanagement.models.AlertType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AlertInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertInner model = BinaryData.fromString(
            "{\"properties\":{\"definition\":{\"type\":\"Quota\",\"category\":\"Billing\",\"criteria\":\"MultiCurrency\"},\"description\":\"tndoaongbjc\",\"source\":\"User\",\"details\":{\"timeGrainType\":\"BillingAnnual\",\"periodStartDate\":\"jed\",\"triggeredBy\":\"wwa\",\"resourceGroupFilter\":[\"dataojvdcpzfoqo\",\"datai\"],\"resourceFilter\":[\"dataxarzgszufoxciq\",\"datap\",\"datadoamciodhkha\",\"dataxkhnzbonlwnto\"],\"meterFilter\":[\"datakdwbwhkszz\",\"datamrv\"],\"tagFilter\":\"dataztvbtqgsfr\",\"operator\":\"GreaterThan\",\"unit\":\"owtlmnguxawqald\",\"contactEmails\":[\"ximerqfobwyznk\",\"ykutwpf\",\"pagmhrskdsnf\"],\"contactGroups\":[\"oakgtdlmkkzev\",\"l\",\"ewpusdsttwvogvb\",\"ejdcngqqmoakuf\"],\"contactRoles\":[\"zr\",\"rdgrtw\",\"enuuzkopbm\"],\"overridingAlert\":\"rfdwoyu\",\"departmentName\":\"ziuiefozbhdm\",\"companyName\":\"l\",\"enrollmentNumber\":\"qhoftrmaequiah\",\"enrollmentStartDate\":\"cslfaoqzpiyylha\",\"enrollmentEndDate\":\"swhccsphk\"},\"costEntityId\":\"witqscywuggwoluh\",\"status\":\"None\",\"creationTime\":\"emh\",\"closeTime\":\"rsbrgzdwm\",\"modificationTime\":\"eypqwdxggicccn\",\"statusModificationUserName\":\"huexmk\",\"statusModificationTime\":\"lstvlzywe\"},\"eTag\":\"zrncsdt\",\"id\":\"lusiy\",\"name\":\"bsfgytguslfea\",\"type\":\"cy\"}")
            .toObject(AlertInner.class);
        Assertions.assertEquals("zrncsdt", model.etag());
        Assertions.assertEquals(AlertType.QUOTA, model.definition().type());
        Assertions.assertEquals(AlertCategory.BILLING, model.definition().category());
        Assertions.assertEquals(AlertCriteria.MULTI_CURRENCY, model.definition().criteria());
        Assertions.assertEquals("tndoaongbjc", model.description());
        Assertions.assertEquals(AlertSource.USER, model.source());
        Assertions.assertEquals(AlertTimeGrainType.BILLING_ANNUAL, model.details().timeGrainType());
        Assertions.assertEquals("jed", model.details().periodStartDate());
        Assertions.assertEquals("wwa", model.details().triggeredBy());
        Assertions.assertEquals(AlertOperator.GREATER_THAN, model.details().operator());
        Assertions.assertEquals("owtlmnguxawqald", model.details().unit());
        Assertions.assertEquals("ximerqfobwyznk", model.details().contactEmails().get(0));
        Assertions.assertEquals("oakgtdlmkkzev", model.details().contactGroups().get(0));
        Assertions.assertEquals("zr", model.details().contactRoles().get(0));
        Assertions.assertEquals("rfdwoyu", model.details().overridingAlert());
        Assertions.assertEquals("ziuiefozbhdm", model.details().departmentName());
        Assertions.assertEquals("l", model.details().companyName());
        Assertions.assertEquals("qhoftrmaequiah", model.details().enrollmentNumber());
        Assertions.assertEquals("cslfaoqzpiyylha", model.details().enrollmentStartDate());
        Assertions.assertEquals("swhccsphk", model.details().enrollmentEndDate());
        Assertions.assertEquals("witqscywuggwoluh", model.costEntityId());
        Assertions.assertEquals(AlertStatus.NONE, model.status());
        Assertions.assertEquals("emh", model.creationTime());
        Assertions.assertEquals("rsbrgzdwm", model.closeTime());
        Assertions.assertEquals("eypqwdxggicccn", model.modificationTime());
        Assertions.assertEquals("huexmk", model.statusModificationUsername());
        Assertions.assertEquals("lstvlzywe", model.statusModificationTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertInner model = new AlertInner().withEtag("zrncsdt")
            .withDefinition(new AlertPropertiesDefinition().withType(AlertType.QUOTA)
                .withCategory(AlertCategory.BILLING)
                .withCriteria(AlertCriteria.MULTI_CURRENCY))
            .withDescription("tndoaongbjc")
            .withSource(AlertSource.USER)
            .withDetails(new AlertPropertiesDetails().withTimeGrainType(AlertTimeGrainType.BILLING_ANNUAL)
                .withPeriodStartDate("jed")
                .withTriggeredBy("wwa")
                .withResourceGroupFilter(Arrays.asList("dataojvdcpzfoqo", "datai"))
                .withResourceFilter(
                    Arrays.asList("dataxarzgszufoxciq", "datap", "datadoamciodhkha", "dataxkhnzbonlwnto"))
                .withMeterFilter(Arrays.asList("datakdwbwhkszz", "datamrv"))
                .withTagFilter("dataztvbtqgsfr")
                .withOperator(AlertOperator.GREATER_THAN)
                .withUnit("owtlmnguxawqald")
                .withContactEmails(Arrays.asList("ximerqfobwyznk", "ykutwpf", "pagmhrskdsnf"))
                .withContactGroups(Arrays.asList("oakgtdlmkkzev", "l", "ewpusdsttwvogvb", "ejdcngqqmoakuf"))
                .withContactRoles(Arrays.asList("zr", "rdgrtw", "enuuzkopbm"))
                .withOverridingAlert("rfdwoyu")
                .withDepartmentName("ziuiefozbhdm")
                .withCompanyName("l")
                .withEnrollmentNumber("qhoftrmaequiah")
                .withEnrollmentStartDate("cslfaoqzpiyylha")
                .withEnrollmentEndDate("swhccsphk"))
            .withCostEntityId("witqscywuggwoluh")
            .withStatus(AlertStatus.NONE)
            .withCreationTime("emh")
            .withCloseTime("rsbrgzdwm")
            .withModificationTime("eypqwdxggicccn")
            .withStatusModificationUsername("huexmk")
            .withStatusModificationTime("lstvlzywe");
        model = BinaryData.fromObject(model).toObject(AlertInner.class);
        Assertions.assertEquals("zrncsdt", model.etag());
        Assertions.assertEquals(AlertType.QUOTA, model.definition().type());
        Assertions.assertEquals(AlertCategory.BILLING, model.definition().category());
        Assertions.assertEquals(AlertCriteria.MULTI_CURRENCY, model.definition().criteria());
        Assertions.assertEquals("tndoaongbjc", model.description());
        Assertions.assertEquals(AlertSource.USER, model.source());
        Assertions.assertEquals(AlertTimeGrainType.BILLING_ANNUAL, model.details().timeGrainType());
        Assertions.assertEquals("jed", model.details().periodStartDate());
        Assertions.assertEquals("wwa", model.details().triggeredBy());
        Assertions.assertEquals(AlertOperator.GREATER_THAN, model.details().operator());
        Assertions.assertEquals("owtlmnguxawqald", model.details().unit());
        Assertions.assertEquals("ximerqfobwyznk", model.details().contactEmails().get(0));
        Assertions.assertEquals("oakgtdlmkkzev", model.details().contactGroups().get(0));
        Assertions.assertEquals("zr", model.details().contactRoles().get(0));
        Assertions.assertEquals("rfdwoyu", model.details().overridingAlert());
        Assertions.assertEquals("ziuiefozbhdm", model.details().departmentName());
        Assertions.assertEquals("l", model.details().companyName());
        Assertions.assertEquals("qhoftrmaequiah", model.details().enrollmentNumber());
        Assertions.assertEquals("cslfaoqzpiyylha", model.details().enrollmentStartDate());
        Assertions.assertEquals("swhccsphk", model.details().enrollmentEndDate());
        Assertions.assertEquals("witqscywuggwoluh", model.costEntityId());
        Assertions.assertEquals(AlertStatus.NONE, model.status());
        Assertions.assertEquals("emh", model.creationTime());
        Assertions.assertEquals("rsbrgzdwm", model.closeTime());
        Assertions.assertEquals("eypqwdxggicccn", model.modificationTime());
        Assertions.assertEquals("huexmk", model.statusModificationUsername());
        Assertions.assertEquals("lstvlzywe", model.statusModificationTime());
    }
}
