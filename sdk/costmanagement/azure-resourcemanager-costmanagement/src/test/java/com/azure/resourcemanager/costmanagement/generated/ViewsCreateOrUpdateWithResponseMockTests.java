// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.fluent.models.ViewInner;
import com.azure.resourcemanager.costmanagement.models.AccumulatedType;
import com.azure.resourcemanager.costmanagement.models.ChartType;
import com.azure.resourcemanager.costmanagement.models.FunctionType;
import com.azure.resourcemanager.costmanagement.models.KpiProperties;
import com.azure.resourcemanager.costmanagement.models.KpiType;
import com.azure.resourcemanager.costmanagement.models.MetricType;
import com.azure.resourcemanager.costmanagement.models.OperatorType;
import com.azure.resourcemanager.costmanagement.models.PivotProperties;
import com.azure.resourcemanager.costmanagement.models.PivotType;
import com.azure.resourcemanager.costmanagement.models.QueryColumnType;
import com.azure.resourcemanager.costmanagement.models.ReportConfigAggregation;
import com.azure.resourcemanager.costmanagement.models.ReportConfigComparisonExpression;
import com.azure.resourcemanager.costmanagement.models.ReportConfigDataset;
import com.azure.resourcemanager.costmanagement.models.ReportConfigDatasetConfiguration;
import com.azure.resourcemanager.costmanagement.models.ReportConfigFilter;
import com.azure.resourcemanager.costmanagement.models.ReportConfigGrouping;
import com.azure.resourcemanager.costmanagement.models.ReportConfigSorting;
import com.azure.resourcemanager.costmanagement.models.ReportConfigTimePeriod;
import com.azure.resourcemanager.costmanagement.models.ReportGranularityType;
import com.azure.resourcemanager.costmanagement.models.ReportTimeframeType;
import com.azure.resourcemanager.costmanagement.models.ReportType;
import com.azure.resourcemanager.costmanagement.models.View;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ViewsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"nxrwzawnvs\",\"scope\":\"fhzag\",\"createdOn\":\"2021-09-16T04:20:05Z\",\"modifiedOn\":\"2021-07-23T03:18:32Z\",\"dateRange\":\"dimwrzregzgyu\",\"currency\":\"trwpw\",\"query\":{\"type\":\"Usage\",\"timeframe\":\"Custom\",\"timePeriod\":{\"from\":\"2021-10-17T22:34:22Z\",\"to\":\"2021-02-10T19:44:01Z\"},\"dataSet\":{\"granularity\":\"Daily\",\"configuration\":{\"columns\":[\"tawjyosx\"]},\"aggregation\":{\"n\":{\"name\":\"nhjtf\",\"function\":\"Sum\"},\"nwynudq\":{\"name\":\"pmil\",\"function\":\"Sum\"},\"auzpjlx\":{\"name\":\"l\",\"function\":\"Sum\"},\"xls\":{\"name\":\"ehuxiqhzlraym\",\"function\":\"Sum\"}},\"grouping\":[{\"type\":\"TagKey\",\"name\":\"xrfdsajre\"}],\"sorting\":[{\"name\":\"yyshtuwgmevua\"},{\"name\":\"pwzyi\"},{\"name\":\"rkgwltxeqip\"}],\"filter\":{\"and\":[{},{}],\"or\":[{},{},{}],\"dimensions\":{\"name\":\"sfayorpravkjoges\",\"operator\":\"In\",\"values\":[]},\"tags\":{\"name\":\"nsmjkwynqxaekqs\",\"operator\":\"Contains\",\"values\":[]}}},\"includeMonetaryCommitment\":false},\"chart\":\"GroupedColumn\",\"accumulated\":\"true\",\"metric\":\"AmortizedCost\",\"kpis\":[{\"type\":\"Budget\",\"id\":\"jcrspxklurcclfgx\",\"enabled\":false},{\"type\":\"Forecast\",\"id\":\"t\",\"enabled\":false}],\"pivots\":[{\"type\":\"TagKey\",\"name\":\"gpxvkqmaupxvpi\"},{\"type\":\"Dimension\",\"name\":\"ify\"},{\"type\":\"TagKey\",\"name\":\"yuubeidszlfyto\"}]},\"eTag\":\"hgygvfltgvd\",\"id\":\"hoynk\",\"name\":\"xwetwkdrcyrucpc\",\"type\":\"nn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        View response
            = manager.views()
                .createOrUpdateWithResponse("hza", new ViewInner().withEtag("ormcqmic")
                    .withDisplayName("nuhiig")
                    .withScope("lbuigv")
                    .withDateRange("rkdlb")
                    .withChart(ChartType.LINE)
                    .withAccumulated(AccumulatedType.TRUE)
                    .withMetric(MetricType.AMORTIZED_COST)
                    .withKpis(Arrays.asList(
                        new KpiProperties().withType(KpiType.FORECAST).withId("lxiutgjcyzyzjdnr").withEnabled(true)))
                    .withPivots(Arrays.asList(new PivotProperties().withType(PivotType.TAG_KEY).withName("oqa"),
                        new PivotProperties().withType(PivotType.DIMENSION).withName("yh"),
                        new PivotProperties().withType(PivotType.DIMENSION).withName("uatbwbqamteuliy"),
                        new PivotProperties().withType(PivotType.DIMENSION).withName("cvmwfauxxepmy")))
                    .withTypePropertiesType(ReportType.USAGE)
                    .withTimeframe(ReportTimeframeType.MONTH_TO_DATE)
                    .withTimePeriod(new ReportConfigTimePeriod().withFrom(OffsetDateTime.parse("2021-05-18T07:30Z"))
                        .withTo(OffsetDateTime.parse("2021-07-10T01:02:29Z")))
                    .withDataSet(new ReportConfigDataset().withGranularity(ReportGranularityType.DAILY)
                        .withConfiguration(
                            new ReportConfigDatasetConfiguration().withColumns(Arrays.asList("dwead", "rzmwn")))
                        .withAggregation(mapOf("magoaqylkjz",
                            new ReportConfigAggregation().withName("agttm").withFunction(FunctionType.SUM)))
                        .withGrouping(Arrays.asList(
                            new ReportConfigGrouping().withType(QueryColumnType.DIMENSION).withName("azjcgmxitpfin")))
                        .withSorting(Arrays.asList(new ReportConfigSorting().withName("dltkrlg"),
                            new ReportConfigSorting().withName("mtbdrvcqgu")))
                        .withFilter(new ReportConfigFilter()
                            .withAnd(Arrays.asList(new ReportConfigFilter(), new ReportConfigFilter(),
                                new ReportConfigFilter(), new ReportConfigFilter()))
                            .withOr(Arrays.asList(new ReportConfigFilter(), new ReportConfigFilter()))
                            .withDimensions(new ReportConfigComparisonExpression().withName("heqdurelyujlfyou")
                                .withOperator(OperatorType.IN)
                                .withValues(Arrays.asList()))
                            .withTags(new ReportConfigComparisonExpression().withName("kyeclcdigpta")
                                .withOperator(OperatorType.CONTAINS)
                                .withValues(Arrays.asList()))))
                    .withIncludeMonetaryCommitment(true), com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("hgygvfltgvd", response.etag());
        Assertions.assertEquals("nxrwzawnvs", response.displayName());
        Assertions.assertEquals("fhzag", response.scope());
        Assertions.assertEquals("dimwrzregzgyu", response.dateRange());
        Assertions.assertEquals(ChartType.GROUPED_COLUMN, response.chart());
        Assertions.assertEquals(AccumulatedType.TRUE, response.accumulated());
        Assertions.assertEquals(MetricType.AMORTIZED_COST, response.metric());
        Assertions.assertEquals(KpiType.BUDGET, response.kpis().get(0).type());
        Assertions.assertEquals("jcrspxklurcclfgx", response.kpis().get(0).id());
        Assertions.assertEquals(false, response.kpis().get(0).enabled());
        Assertions.assertEquals(PivotType.TAG_KEY, response.pivots().get(0).type());
        Assertions.assertEquals("gpxvkqmaupxvpi", response.pivots().get(0).name());
        Assertions.assertEquals(ReportType.USAGE, response.typePropertiesType());
        Assertions.assertEquals(ReportTimeframeType.CUSTOM, response.timeframe());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T22:34:22Z"), response.timePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-10T19:44:01Z"), response.timePeriod().to());
        Assertions.assertEquals(ReportGranularityType.DAILY, response.dataSet().granularity());
        Assertions.assertEquals("tawjyosx", response.dataSet().configuration().columns().get(0));
        Assertions.assertEquals("nhjtf", response.dataSet().aggregation().get("n").name());
        Assertions.assertEquals(FunctionType.SUM, response.dataSet().aggregation().get("n").function());
        Assertions.assertEquals(QueryColumnType.TAG_KEY, response.dataSet().grouping().get(0).type());
        Assertions.assertEquals("xrfdsajre", response.dataSet().grouping().get(0).name());
        Assertions.assertEquals("yyshtuwgmevua", response.dataSet().sorting().get(0).name());
        Assertions.assertEquals("sfayorpravkjoges", response.dataSet().filter().dimensions().name());
        Assertions.assertEquals(OperatorType.IN, response.dataSet().filter().dimensions().operator());
        Assertions.assertEquals("nsmjkwynqxaekqs", response.dataSet().filter().tags().name());
        Assertions.assertEquals(OperatorType.CONTAINS, response.dataSet().filter().tags().operator());
        Assertions.assertEquals(false, response.includeMonetaryCommitment());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
