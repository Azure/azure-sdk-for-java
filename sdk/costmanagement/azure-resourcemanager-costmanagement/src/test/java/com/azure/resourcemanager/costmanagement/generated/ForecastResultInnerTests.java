// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.fluent.models.ForecastResultInner;
import com.azure.resourcemanager.costmanagement.models.ForecastColumn;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ForecastResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ForecastResultInner model = BinaryData.fromString(
            "{\"properties\":{\"nextLink\":\"klnsrmffey\",\"columns\":[{\"name\":\"tpiymerteea\",\"type\":\"xqiekkkzddrtk\"}],\"rows\":[[\"databmxva\",\"datarefdee\",\"datavecuijpx\"],[\"datas\"]]},\"sku\":\"prtujwsawdd\",\"eTag\":\"babxvitit\",\"location\":\"tzeexav\",\"tags\":{\"pqtgsfjac\":\"fglecdmdqbwp\",\"d\":\"slhhxudbxv\"},\"id\":\"tnsi\",\"name\":\"ud\",\"type\":\"z\"}")
            .toObject(ForecastResultInner.class);
        Assertions.assertEquals("tzeexav", model.location());
        Assertions.assertEquals("fglecdmdqbwp", model.tags().get("pqtgsfjac"));
        Assertions.assertEquals("klnsrmffey", model.nextLink());
        Assertions.assertEquals("tpiymerteea", model.columns().get(0).name());
        Assertions.assertEquals("xqiekkkzddrtk", model.columns().get(0).type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ForecastResultInner model = new ForecastResultInner().withLocation("tzeexav")
            .withTags(mapOf("pqtgsfjac", "fglecdmdqbwp", "d", "slhhxudbxv"))
            .withNextLink("klnsrmffey")
            .withColumns(Arrays.asList(new ForecastColumn().withName("tpiymerteea").withType("xqiekkkzddrtk")))
            .withRows(Arrays.asList(Arrays.asList("databmxva", "datarefdee", "datavecuijpx"), Arrays.asList("datas")));
        model = BinaryData.fromObject(model).toObject(ForecastResultInner.class);
        Assertions.assertEquals("tzeexav", model.location());
        Assertions.assertEquals("fglecdmdqbwp", model.tags().get("pqtgsfjac"));
        Assertions.assertEquals("klnsrmffey", model.nextLink());
        Assertions.assertEquals("tpiymerteea", model.columns().get(0).name());
        Assertions.assertEquals("xqiekkkzddrtk", model.columns().get(0).type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
