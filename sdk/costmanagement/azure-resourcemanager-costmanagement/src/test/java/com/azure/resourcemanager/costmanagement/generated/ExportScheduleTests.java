// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.models.ExportRecurrencePeriod;
import com.azure.resourcemanager.costmanagement.models.ExportSchedule;
import com.azure.resourcemanager.costmanagement.models.RecurrenceType;
import com.azure.resourcemanager.costmanagement.models.StatusType;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ExportScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExportSchedule model = BinaryData.fromString(
            "{\"status\":\"Active\",\"recurrence\":\"Daily\",\"recurrencePeriod\":{\"from\":\"2021-07-05T12:47:55Z\",\"to\":\"2021-05-06T00:06:36Z\"}}")
            .toObject(ExportSchedule.class);
        Assertions.assertEquals(StatusType.ACTIVE, model.status());
        Assertions.assertEquals(RecurrenceType.DAILY, model.recurrence());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T12:47:55Z"), model.recurrencePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T00:06:36Z"), model.recurrencePeriod().to());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExportSchedule model = new ExportSchedule().withStatus(StatusType.ACTIVE)
            .withRecurrence(RecurrenceType.DAILY)
            .withRecurrencePeriod(new ExportRecurrencePeriod().withFrom(OffsetDateTime.parse("2021-07-05T12:47:55Z"))
                .withTo(OffsetDateTime.parse("2021-05-06T00:06:36Z")));
        model = BinaryData.fromObject(model).toObject(ExportSchedule.class);
        Assertions.assertEquals(StatusType.ACTIVE, model.status());
        Assertions.assertEquals(RecurrenceType.DAILY, model.recurrence());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T12:47:55Z"), model.recurrencePeriod().from());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-06T00:06:36Z"), model.recurrencePeriod().to());
    }
}
