// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.fluent.models.ScheduledActionInner;
import com.azure.resourcemanager.costmanagement.models.DaysOfWeek;
import com.azure.resourcemanager.costmanagement.models.FileDestination;
import com.azure.resourcemanager.costmanagement.models.FileFormat;
import com.azure.resourcemanager.costmanagement.models.NotificationProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduleFrequency;
import com.azure.resourcemanager.costmanagement.models.ScheduleProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionKind;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionStatus;
import com.azure.resourcemanager.costmanagement.models.WeeksOfMonth;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ScheduledActionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledActionInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"akuflgbhgauacdix\",\"fileDestination\":{\"fileFormats\":[\"Csv\"]},\"notification\":{\"to\":[\"ryjqgdkf\",\"ozo\",\"oqbvjhvefgwbmqj\"],\"language\":\"ntasfaymxbu\",\"message\":\"zealbmqkyo\",\"regionalFormat\":\"yvfkmbts\",\"subject\":\"ahxsgxjcmm\"},\"notificationEmail\":\"rsc\",\"schedule\":{\"frequency\":\"Monthly\",\"hourOfDay\":1315033089,\"daysOfWeek\":[\"Monday\",\"Friday\",\"Friday\"],\"weeksOfMonth\":[\"Fourth\",\"Third\",\"Last\"],\"dayOfMonth\":1635152629,\"startDate\":\"2021-07-15T05:36:07Z\",\"endDate\":\"2021-09-20T06:50:41Z\"},\"scope\":\"cjrmmua\",\"status\":\"Enabled\",\"viewId\":\"ibvjogjonmcy\"},\"eTag\":\"oyzbamwineofvf\",\"kind\":\"InsightAlert\",\"id\":\"oldtvevboclzhz\",\"name\":\"knyuxgvttxpn\",\"type\":\"upzaamrdixtre\"}")
            .toObject(ScheduledActionInner.class);
        Assertions.assertEquals(ScheduledActionKind.INSIGHT_ALERT, model.kind());
        Assertions.assertEquals("akuflgbhgauacdix", model.displayName());
        Assertions.assertEquals(FileFormat.CSV, model.fileDestination().fileFormats().get(0));
        Assertions.assertEquals("ryjqgdkf", model.notification().to().get(0));
        Assertions.assertEquals("ntasfaymxbu", model.notification().language());
        Assertions.assertEquals("zealbmqkyo", model.notification().message());
        Assertions.assertEquals("yvfkmbts", model.notification().regionalFormat());
        Assertions.assertEquals("ahxsgxjcmm", model.notification().subject());
        Assertions.assertEquals("rsc", model.notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.MONTHLY, model.schedule().frequency());
        Assertions.assertEquals(1315033089, model.schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FOURTH, model.schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(1635152629, model.schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T05:36:07Z"), model.schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-20T06:50:41Z"), model.schedule().endDate());
        Assertions.assertEquals("cjrmmua", model.scope());
        Assertions.assertEquals(ScheduledActionStatus.ENABLED, model.status());
        Assertions.assertEquals("ibvjogjonmcy", model.viewId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledActionInner model = new ScheduledActionInner().withKind(ScheduledActionKind.INSIGHT_ALERT)
            .withDisplayName("akuflgbhgauacdix")
            .withFileDestination(new FileDestination().withFileFormats(Arrays.asList(FileFormat.CSV)))
            .withNotification(new NotificationProperties().withTo(Arrays.asList("ryjqgdkf", "ozo", "oqbvjhvefgwbmqj"))
                .withLanguage("ntasfaymxbu")
                .withMessage("zealbmqkyo")
                .withRegionalFormat("yvfkmbts")
                .withSubject("ahxsgxjcmm"))
            .withNotificationEmail("rsc")
            .withSchedule(new ScheduleProperties().withFrequency(ScheduleFrequency.MONTHLY)
                .withHourOfDay(1315033089)
                .withDaysOfWeek(Arrays.asList(DaysOfWeek.MONDAY, DaysOfWeek.FRIDAY, DaysOfWeek.FRIDAY))
                .withWeeksOfMonth(Arrays.asList(WeeksOfMonth.FOURTH, WeeksOfMonth.THIRD, WeeksOfMonth.LAST))
                .withDayOfMonth(1635152629)
                .withStartDate(OffsetDateTime.parse("2021-07-15T05:36:07Z"))
                .withEndDate(OffsetDateTime.parse("2021-09-20T06:50:41Z")))
            .withScope("cjrmmua")
            .withStatus(ScheduledActionStatus.ENABLED)
            .withViewId("ibvjogjonmcy");
        model = BinaryData.fromObject(model).toObject(ScheduledActionInner.class);
        Assertions.assertEquals(ScheduledActionKind.INSIGHT_ALERT, model.kind());
        Assertions.assertEquals("akuflgbhgauacdix", model.displayName());
        Assertions.assertEquals(FileFormat.CSV, model.fileDestination().fileFormats().get(0));
        Assertions.assertEquals("ryjqgdkf", model.notification().to().get(0));
        Assertions.assertEquals("ntasfaymxbu", model.notification().language());
        Assertions.assertEquals("zealbmqkyo", model.notification().message());
        Assertions.assertEquals("yvfkmbts", model.notification().regionalFormat());
        Assertions.assertEquals("ahxsgxjcmm", model.notification().subject());
        Assertions.assertEquals("rsc", model.notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.MONTHLY, model.schedule().frequency());
        Assertions.assertEquals(1315033089, model.schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.MONDAY, model.schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FOURTH, model.schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(1635152629, model.schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-15T05:36:07Z"), model.schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-20T06:50:41Z"), model.schedule().endDate());
        Assertions.assertEquals("cjrmmua", model.scope());
        Assertions.assertEquals(ScheduledActionStatus.ENABLED, model.status());
        Assertions.assertEquals("ibvjogjonmcy", model.viewId());
    }
}
