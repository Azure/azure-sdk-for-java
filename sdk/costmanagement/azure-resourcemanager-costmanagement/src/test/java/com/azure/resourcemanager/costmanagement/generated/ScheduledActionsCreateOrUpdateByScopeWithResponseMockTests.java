// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.DaysOfWeek;
import com.azure.resourcemanager.costmanagement.models.FileDestination;
import com.azure.resourcemanager.costmanagement.models.FileFormat;
import com.azure.resourcemanager.costmanagement.models.NotificationProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduleFrequency;
import com.azure.resourcemanager.costmanagement.models.ScheduleProperties;
import com.azure.resourcemanager.costmanagement.models.ScheduledAction;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionKind;
import com.azure.resourcemanager.costmanagement.models.ScheduledActionStatus;
import com.azure.resourcemanager.costmanagement.models.WeeksOfMonth;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsCreateOrUpdateByScopeWithResponseMockTests {
    @Test
    public void testCreateOrUpdateByScopeWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"yynvskpa\",\"fileDestination\":{\"fileFormats\":[\"Csv\",\"Csv\"]},\"notification\":{\"to\":[\"exmj\"],\"language\":\"cbccwkqmt\",\"message\":\"p\",\"regionalFormat\":\"iscr\",\"subject\":\"ilg\"},\"notificationEmail\":\"rqre\",\"schedule\":{\"frequency\":\"Weekly\",\"hourOfDay\":1150000852,\"daysOfWeek\":[\"Monday\",\"Wednesday\",\"Saturday\"],\"weeksOfMonth\":[\"Fourth\",\"First\",\"Fourth\",\"First\"],\"dayOfMonth\":1999100319,\"startDate\":\"2021-05-28T21:51:17Z\",\"endDate\":\"2021-07-13T17:26:04Z\"},\"scope\":\"fmuad\",\"status\":\"Enabled\",\"viewId\":\"fsn\"},\"eTag\":\"kiioshj\",\"kind\":\"Email\",\"id\":\"tybnxgztlcgctj\",\"name\":\"hfjv\",\"type\":\"ywjzebecuvlbefvw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScheduledAction response = manager.scheduledActions()
            .define("xxtclhuulri")
            .withExistingScope("i")
            .withKind(ScheduledActionKind.EMAIL)
            .withDisplayName("yokvjgbzsxebr")
            .withFileDestination(
                new FileDestination().withFileFormats(Arrays.asList(FileFormat.CSV, FileFormat.CSV, FileFormat.CSV)))
            .withNotification(new NotificationProperties().withTo(Arrays.asList("djws", "oardnagttpu"))
                .withLanguage("bpgnrholhujbf")
                .withMessage("iplkysolsyjprxs")
                .withRegionalFormat("hdmcvht")
                .withSubject("bzjhfvhuwzb"))
            .withNotificationEmail("cqzgihotjecohmx")
            .withSchedule(new ScheduleProperties().withFrequency(ScheduleFrequency.WEEKLY)
                .withHourOfDay(1848793230)
                .withDaysOfWeek(Arrays.asList(DaysOfWeek.FRIDAY, DaysOfWeek.THURSDAY, DaysOfWeek.SATURDAY))
                .withWeeksOfMonth(Arrays.asList(WeeksOfMonth.LAST, WeeksOfMonth.FOURTH, WeeksOfMonth.FIRST))
                .withDayOfMonth(743085313)
                .withStartDate(OffsetDateTime.parse("2021-11-10T00:21:41Z"))
                .withEndDate(OffsetDateTime.parse("2021-05-15T02:04:22Z")))
            .withScope("derltfokyksyim")
            .withStatus(ScheduledActionStatus.DISABLED)
            .withViewId("cgrvkcxzznnuifer")
            .withIfMatch("qfkyfhiwvjaqu")
            .create();

        Assertions.assertEquals(ScheduledActionKind.EMAIL, response.kind());
        Assertions.assertEquals("yynvskpa", response.displayName());
        Assertions.assertEquals(FileFormat.CSV, response.fileDestination().fileFormats().get(0));
        Assertions.assertEquals("exmj", response.notification().to().get(0));
        Assertions.assertEquals("cbccwkqmt", response.notification().language());
        Assertions.assertEquals("p", response.notification().message());
        Assertions.assertEquals("iscr", response.notification().regionalFormat());
        Assertions.assertEquals("ilg", response.notification().subject());
        Assertions.assertEquals("rqre", response.notificationEmail());
        Assertions.assertEquals(ScheduleFrequency.WEEKLY, response.schedule().frequency());
        Assertions.assertEquals(1150000852, response.schedule().hourOfDay());
        Assertions.assertEquals(DaysOfWeek.MONDAY, response.schedule().daysOfWeek().get(0));
        Assertions.assertEquals(WeeksOfMonth.FOURTH, response.schedule().weeksOfMonth().get(0));
        Assertions.assertEquals(1999100319, response.schedule().dayOfMonth());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-28T21:51:17Z"), response.schedule().startDate());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T17:26:04Z"), response.schedule().endDate());
        Assertions.assertEquals("fmuad", response.scope());
        Assertions.assertEquals(ScheduledActionStatus.ENABLED, response.status());
        Assertions.assertEquals("fsn", response.viewId());
    }
}
