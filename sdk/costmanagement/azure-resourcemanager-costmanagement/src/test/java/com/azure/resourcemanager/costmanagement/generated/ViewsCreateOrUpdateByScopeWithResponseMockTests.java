// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.AccumulatedType;
import com.azure.resourcemanager.costmanagement.models.ChartType;
import com.azure.resourcemanager.costmanagement.models.MetricType;
import com.azure.resourcemanager.costmanagement.models.ReportTimeframeType;
import com.azure.resourcemanager.costmanagement.models.ReportType;
import com.azure.resourcemanager.costmanagement.models.View;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ViewsCreateOrUpdateByScopeWithResponseMockTests {
    @Test
    public void testCreateOrUpdateByScopeWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"displayName\":\"owbb\",\"scope\":\"yavutpthjoxois\",\"createdOn\":\"2021-09-20T02:33:28Z\",\"modifiedOn\":\"2021-01-03T07:30:36Z\",\"dateRange\":\"iml\",\"currency\":\"ljxkcgxxlx\",\"query\":{\"type\":\"Usage\",\"timeframe\":\"Custom\",\"includeMonetaryCommitment\":false},\"chart\":\"Area\",\"accumulated\":\"false\",\"metric\":\"ActualCost\",\"kpis\":[],\"pivots\":[]},\"eTag\":\"pfgfbkjub\",\"id\":\"yhgk\",\"name\":\"minsgowzf\",\"type\":\"tsttktlahbq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CostManagementManager manager =
            CostManagementManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        View response =
            manager
                .views()
                .define("miloxggdufiqndie")
                .withExistingScope("wjhhgdnhxmsivf")
                .withEtag("lbywdxsm")
                .withDisplayName("ofjchvcyyysf")
                .withScope("otcubi")
                .withChart(ChartType.AREA)
                .withAccumulated(AccumulatedType.FALSE)
                .withMetric(MetricType.AHUB)
                .withKpis(Arrays.asList())
                .withPivots(Arrays.asList())
                .withTypePropertiesType(ReportType.USAGE)
                .withTimeframe(ReportTimeframeType.WEEK_TO_DATE)
                .withIncludeMonetaryCommitment(false)
                .create();

        Assertions.assertEquals("pfgfbkjub", response.etag());
        Assertions.assertEquals("owbb", response.displayName());
        Assertions.assertEquals("yavutpthjoxois", response.scope());
        Assertions.assertEquals(ChartType.AREA, response.chart());
        Assertions.assertEquals(AccumulatedType.FALSE, response.accumulated());
        Assertions.assertEquals(MetricType.ACTUAL_COST, response.metric());
        Assertions.assertEquals(ReportType.USAGE, response.typePropertiesType());
        Assertions.assertEquals(ReportTimeframeType.CUSTOM, response.timeframe());
        Assertions.assertEquals(false, response.includeMonetaryCommitment());
    }
}
