// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.ExternalCloudProviderType;
import com.azure.resourcemanager.costmanagement.models.ForecastDataset;
import com.azure.resourcemanager.costmanagement.models.ForecastDatasetConfiguration;
import com.azure.resourcemanager.costmanagement.models.ForecastDefinition;
import com.azure.resourcemanager.costmanagement.models.ForecastFilter;
import com.azure.resourcemanager.costmanagement.models.ForecastResult;
import com.azure.resourcemanager.costmanagement.models.ForecastTimePeriod;
import com.azure.resourcemanager.costmanagement.models.ForecastTimeframe;
import com.azure.resourcemanager.costmanagement.models.ForecastType;
import com.azure.resourcemanager.costmanagement.models.GranularityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ForecastsExternalCloudProviderUsageWithResponseMockTests {
    @Test
    public void testExternalCloudProviderUsageWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"nextLink\":\"mfblcqcuubg\",\"columns\":[],\"rows\":[[\"datalmetttwgdslqxi\"],[\"datarmooizqse\",\"datapxiutc\"]]},\"sku\":\"pzhyr\",\"eTag\":\"togebjoxsl\",\"location\":\"vnh\",\"tags\":{\"aehvvibrxjjstoq\":\"rqnkkzjcjbtr\",\"bklftidgfcwqmpim\":\"eitpkxztmo\",\"yhohujswtwkozzwc\":\"qxzhem\"},\"id\":\"lkb\",\"name\":\"wpfaj\",\"type\":\"jwltlwtjjgu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CostManagementManager manager =
            CostManagementManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ForecastResult response =
            manager
                .forecasts()
                .externalCloudProviderUsageWithResponse(
                    ExternalCloudProviderType.EXTERNAL_SUBSCRIPTIONS,
                    "kfxcvhrfs",
                    new ForecastDefinition()
                        .withType(ForecastType.ACTUAL_COST)
                        .withTimeframe(ForecastTimeframe.CUSTOM)
                        .withTimePeriod(
                            new ForecastTimePeriod()
                                .withFrom(OffsetDateTime.parse("2021-03-25T12:01:24Z"))
                                .withTo(OffsetDateTime.parse("2021-11-15T07:50:14Z")))
                        .withDataset(
                            new ForecastDataset()
                                .withGranularity(GranularityType.DAILY)
                                .withConfiguration(new ForecastDatasetConfiguration().withColumns(Arrays.asList()))
                                .withAggregation(mapOf())
                                .withFilter(new ForecastFilter().withAnd(Arrays.asList()).withOr(Arrays.asList())))
                        .withIncludeActualCost(true)
                        .withIncludeFreshPartialCost(true),
                    "klxubyja",
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("vnh", response.location());
        Assertions.assertEquals("rqnkkzjcjbtr", response.tags().get("aehvvibrxjjstoq"));
        Assertions.assertEquals("mfblcqcuubg", response.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
