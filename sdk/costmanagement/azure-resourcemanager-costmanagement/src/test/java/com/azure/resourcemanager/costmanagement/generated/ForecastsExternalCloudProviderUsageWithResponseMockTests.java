// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.costmanagement.CostManagementManager;
import com.azure.resourcemanager.costmanagement.models.ExternalCloudProviderType;
import com.azure.resourcemanager.costmanagement.models.ForecastAggregation;
import com.azure.resourcemanager.costmanagement.models.ForecastComparisonExpression;
import com.azure.resourcemanager.costmanagement.models.ForecastDataset;
import com.azure.resourcemanager.costmanagement.models.ForecastDatasetConfiguration;
import com.azure.resourcemanager.costmanagement.models.ForecastDefinition;
import com.azure.resourcemanager.costmanagement.models.ForecastFilter;
import com.azure.resourcemanager.costmanagement.models.ForecastOperatorType;
import com.azure.resourcemanager.costmanagement.models.ForecastResult;
import com.azure.resourcemanager.costmanagement.models.ForecastTimePeriod;
import com.azure.resourcemanager.costmanagement.models.ForecastTimeframe;
import com.azure.resourcemanager.costmanagement.models.ForecastType;
import com.azure.resourcemanager.costmanagement.models.FunctionName;
import com.azure.resourcemanager.costmanagement.models.FunctionType;
import com.azure.resourcemanager.costmanagement.models.GranularityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ForecastsExternalCloudProviderUsageWithResponseMockTests {
    @Test
    public void testExternalCloudProviderUsageWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"nextLink\":\"psimsf\",\"columns\":[{\"name\":\"fqpmbhyqgsdrmm\",\"type\":\"jxoph\"},{\"name\":\"rhsmvgohtwzmqilr\",\"type\":\"ysfn\"},{\"name\":\"sqywwwmhkru\",\"type\":\"edrympmlqo\"}],\"rows\":[[\"dataduewihapfj\",\"dataiknj\",\"dataiqfl\",\"dataejhpclbiedfsbwc\"],[\"datavbvzipbwxgo\",\"dataoxzpr\"]]},\"sku\":\"mskxknp\",\"eTag\":\"zigjsugswhgsaodk\",\"location\":\"wnbaf\",\"tags\":{\"uvwsxbgnvk\":\"ohzha\"},\"id\":\"rvqchoadhrsxqvzv\",\"name\":\"pabdsrg\",\"type\":\"ajglzrsubklr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CostManagementManager manager = CostManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ForecastResult response = manager.forecasts()
            .externalCloudProviderUsageWithResponse(ExternalCloudProviderType.EXTERNAL_BILLING_ACCOUNTS, "ljuxl",
                new ForecastDefinition().withType(ForecastType.USAGE)
                    .withTimeframe(ForecastTimeframe.CUSTOM)
                    .withTimePeriod(new ForecastTimePeriod().withFrom(OffsetDateTime.parse("2021-11-14T12:41:58Z"))
                        .withTo(OffsetDateTime.parse("2021-04-13T08:54:29Z")))
                    .withDataset(new ForecastDataset().withGranularity(GranularityType.DAILY)
                        .withConfiguration(new ForecastDatasetConfiguration()
                            .withColumns(Arrays.asList("kdch", "aiubavlzwpvgmfa", "kzaz", "gokedgjqafkm")))
                        .withAggregation(mapOf("zrthqet",
                            new ForecastAggregation().withName(FunctionName.COST).withFunction(FunctionType.SUM),
                            "rtvaoznqni",
                            new ForecastAggregation().withName(FunctionName.COST_USD).withFunction(FunctionType.SUM),
                            "zeagmceituuge",
                            new ForecastAggregation().withName(FunctionName.COST).withFunction(FunctionType.SUM), "pj",
                            new ForecastAggregation().withName(FunctionName.COST_USD).withFunction(FunctionType.SUM)))
                        .withFilter(
                            new ForecastFilter()
                                .withAnd(Arrays.asList(
                                    new ForecastFilter()
                                        .withAnd(Arrays.asList(new ForecastFilter(), new ForecastFilter()))
                                        .withOr(Arrays.asList(new ForecastFilter(), new ForecastFilter(),
                                            new ForecastFilter()))
                                        .withDimensions(new ForecastComparisonExpression().withName("jdeolctae")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))
                                        .withTags(new ForecastComparisonExpression()
                                            .withName("yrle")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList())),
                                    new ForecastFilter()
                                        .withAnd(Arrays.asList(new ForecastFilter(), new ForecastFilter(),
                                            new ForecastFilter()))
                                        .withOr(Arrays.asList(new ForecastFilter()))
                                        .withDimensions(new ForecastComparisonExpression().withName("vtqigdxzvsgeafg")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))
                                        .withTags(new ForecastComparisonExpression()
                                            .withName("ehxlzsxezppk")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList())),
                                    new ForecastFilter()
                                        .withAnd(Arrays.asList(new ForecastFilter(), new ForecastFilter()))
                                        .withOr(Arrays.asList(new ForecastFilter(), new ForecastFilter(),
                                            new ForecastFilter()))
                                        .withDimensions(new ForecastComparisonExpression().withName("yfjlpzeqto")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))
                                        .withTags(new ForecastComparisonExpression().withName("lixlajmllpque")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))))
                                .withOr(Arrays.asList(
                                    new ForecastFilter().withAnd(Arrays.asList(new ForecastFilter()))
                                        .withOr(Arrays.asList(new ForecastFilter()))
                                        .withDimensions(new ForecastComparisonExpression().withName("btmkekxpkzwaq")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))
                                        .withTags(new ForecastComparisonExpression().withName("qovchiqbp")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList())),
                                    new ForecastFilter().withAnd(Arrays.asList(new ForecastFilter()))
                                        .withOr(Arrays.asList(new ForecastFilter(), new ForecastFilter()))
                                        .withDimensions(new ForecastComparisonExpression().withName("ztekxbyjgmsfep")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))
                                        .withTags(new ForecastComparisonExpression().withName("hpqadagrhrdicxdw")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList())),
                                    new ForecastFilter()
                                        .withAnd(Arrays.asList(new ForecastFilter(), new ForecastFilter(),
                                            new ForecastFilter(), new ForecastFilter()))
                                        .withOr(Arrays.asList(new ForecastFilter(), new ForecastFilter(),
                                            new ForecastFilter(), new ForecastFilter()))
                                        .withDimensions(new ForecastComparisonExpression().withName("yovcxjsgbi")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))
                                        .withTags(new ForecastComparisonExpression().withName("kdveksb")
                                            .withOperator(ForecastOperatorType.IN)
                                            .withValues(Arrays.asList()))))
                                .withDimensions(new ForecastComparisonExpression().withName("duchvls")
                                    .withOperator(ForecastOperatorType.IN)
                                    .withValues(Arrays.asList("pibfdy")))
                                .withTags(new ForecastComparisonExpression().withName("usspyszekbh")
                                    .withOperator(ForecastOperatorType.IN)
                                    .withValues(Arrays.asList("aaggkre", "bfrnuybffljfii", "reoagsqtaadus")))))
                    .withIncludeActualCost(true)
                    .withIncludeFreshPartialCost(false),
                "avsqwudohzilfmn", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("wnbaf", response.location());
        Assertions.assertEquals("ohzha", response.tags().get("uvwsxbgnvk"));
        Assertions.assertEquals("psimsf", response.nextLink());
        Assertions.assertEquals("fqpmbhyqgsdrmm", response.columns().get(0).name());
        Assertions.assertEquals("jxoph", response.columns().get(0).type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
