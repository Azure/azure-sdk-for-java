// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.costmanagement.fluent.models.QueryResultInner;
import com.azure.resourcemanager.costmanagement.models.QueryColumn;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class QueryResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QueryResultInner model = BinaryData.fromString(
            "{\"properties\":{\"nextLink\":\"dw\",\"columns\":[{\"name\":\"zegjonfhjirwgdn\",\"type\":\"brfkspz\"},{\"name\":\"mtksjcitdigsx\",\"type\":\"gljplkeuachtomfl\"}],\"rows\":[[\"datawfpfmdgycx\",\"datamskwhqjjysl\"],[\"datalpshhkvpedwqslsr\",\"datampqvwwsk\"],[\"datadcbrwimuvq\",\"datajosovyrrl\"],[\"dataesi\"]]},\"sku\":\"qtljqobbpihehc\",\"eTag\":\"ybmrqbrjbbmp\",\"location\":\"dlvykfrex\",\"tags\":{\"dgzhxogj\":\"eqwjksgh\"},\"id\":\"gsv\",\"name\":\"u\",\"type\":\"kxibdafh\"}")
            .toObject(QueryResultInner.class);
        Assertions.assertEquals("dlvykfrex", model.location());
        Assertions.assertEquals("eqwjksgh", model.tags().get("dgzhxogj"));
        Assertions.assertEquals("dw", model.nextLink());
        Assertions.assertEquals("zegjonfhjirwgdn", model.columns().get(0).name());
        Assertions.assertEquals("brfkspz", model.columns().get(0).type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QueryResultInner model = new QueryResultInner().withLocation("dlvykfrex")
            .withTags(mapOf("dgzhxogj", "eqwjksgh"))
            .withNextLink("dw")
            .withColumns(Arrays.asList(new QueryColumn().withName("zegjonfhjirwgdn").withType("brfkspz"),
                new QueryColumn().withName("mtksjcitdigsx").withType("gljplkeuachtomfl")))
            .withRows(Arrays.asList(Arrays.asList("datawfpfmdgycx", "datamskwhqjjysl"),
                Arrays.asList("datalpshhkvpedwqslsr", "datampqvwwsk"), Arrays.asList("datadcbrwimuvq", "datajosovyrrl"),
                Arrays.asList("dataesi")));
        model = BinaryData.fromObject(model).toObject(QueryResultInner.class);
        Assertions.assertEquals("dlvykfrex", model.location());
        Assertions.assertEquals("eqwjksgh", model.tags().get("dgzhxogj"));
        Assertions.assertEquals("dw", model.nextLink());
        Assertions.assertEquals("zegjonfhjirwgdn", model.columns().get(0).name());
        Assertions.assertEquals("brfkspz", model.columns().get(0).type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
