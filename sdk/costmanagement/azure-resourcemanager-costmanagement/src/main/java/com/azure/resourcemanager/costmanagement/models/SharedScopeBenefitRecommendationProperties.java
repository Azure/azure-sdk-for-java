// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

/**
 * The properties of the benefit recommendation when scope is 'Shared'.
 */
@Fluent
public final class SharedScopeBenefitRecommendationProperties extends BenefitRecommendationProperties {
    /*
     * Benefit scope. For example, Single or Shared.
     */
    private Scope scope = Scope.SHARED;

    /*
     * The list of all benefit recommendations with the recommendation details.
     */
    private AllSavingsList allRecommendationDetails;

    /*
     * The current cost without benefit, corresponds to 'totalHours' in the look-back period.
     */
    private BigDecimal costWithoutBenefit;

    /*
     * An ISO 4217 currency code identifier for the costs and savings amounts.
     */
    private String currencyCode;

    /*
     * ARM SKU name. 'Compute_Savings_Plan' for SavingsPlan.
     */
    private String armSkuName;

    /*
     * The total hours for which the cost is covered. Its equal to number of records in a property
     * 'properties/usage/charges'.
     */
    private Integer totalHours;

    /*
     * The last usage date used for looking back for computing the recommendations.
     */
    private OffsetDateTime lastConsumptionDate;

    /*
     * The first usage date used for looking back for computing the recommendations.
     */
    private OffsetDateTime firstConsumptionDate;

    /**
     * Creates an instance of SharedScopeBenefitRecommendationProperties class.
     */
    public SharedScopeBenefitRecommendationProperties() {
    }

    /**
     * Get the scope property: Benefit scope. For example, Single or Shared.
     * 
     * @return the scope value.
     */
    @Override
    public Scope scope() {
        return this.scope;
    }

    /**
     * Get the allRecommendationDetails property: The list of all benefit recommendations with the recommendation
     * details.
     * 
     * @return the allRecommendationDetails value.
     */
    @Override
    public AllSavingsList allRecommendationDetails() {
        return this.allRecommendationDetails;
    }

    /**
     * Get the costWithoutBenefit property: The current cost without benefit, corresponds to 'totalHours' in the
     * look-back period.
     * 
     * @return the costWithoutBenefit value.
     */
    @Override
    public BigDecimal costWithoutBenefit() {
        return this.costWithoutBenefit;
    }

    /**
     * Get the currencyCode property: An ISO 4217 currency code identifier for the costs and savings amounts.
     * 
     * @return the currencyCode value.
     */
    @Override
    public String currencyCode() {
        return this.currencyCode;
    }

    /**
     * Get the armSkuName property: ARM SKU name. 'Compute_Savings_Plan' for SavingsPlan.
     * 
     * @return the armSkuName value.
     */
    @Override
    public String armSkuName() {
        return this.armSkuName;
    }

    /**
     * Get the totalHours property: The total hours for which the cost is covered. Its equal to number of records in a
     * property 'properties/usage/charges'.
     * 
     * @return the totalHours value.
     */
    @Override
    public Integer totalHours() {
        return this.totalHours;
    }

    /**
     * Get the lastConsumptionDate property: The last usage date used for looking back for computing the
     * recommendations.
     * 
     * @return the lastConsumptionDate value.
     */
    @Override
    public OffsetDateTime lastConsumptionDate() {
        return this.lastConsumptionDate;
    }

    /**
     * Get the firstConsumptionDate property: The first usage date used for looking back for computing the
     * recommendations.
     * 
     * @return the firstConsumptionDate value.
     */
    @Override
    public OffsetDateTime firstConsumptionDate() {
        return this.firstConsumptionDate;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedScopeBenefitRecommendationProperties withLookBackPeriod(LookBackPeriod lookBackPeriod) {
        super.withLookBackPeriod(lookBackPeriod);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedScopeBenefitRecommendationProperties withUsage(RecommendationUsageDetails usage) {
        super.withUsage(usage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedScopeBenefitRecommendationProperties withTerm(Term term) {
        super.withTerm(term);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedScopeBenefitRecommendationProperties withCommitmentGranularity(Grain commitmentGranularity) {
        super.withCommitmentGranularity(commitmentGranularity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SharedScopeBenefitRecommendationProperties
        withRecommendationDetails(AllSavingsBenefitDetails recommendationDetails) {
        super.withRecommendationDetails(recommendationDetails);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (usage() != null) {
            usage().validate();
        }
        if (recommendationDetails() != null) {
            recommendationDetails().validate();
        }
        if (allRecommendationDetails() != null) {
            allRecommendationDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lookBackPeriod", lookBackPeriod() == null ? null : lookBackPeriod().toString());
        jsonWriter.writeJsonField("usage", usage());
        jsonWriter.writeStringField("term", term() == null ? null : term().toString());
        jsonWriter.writeStringField("commitmentGranularity",
            commitmentGranularity() == null ? null : commitmentGranularity().toString());
        jsonWriter.writeJsonField("recommendationDetails", recommendationDetails());
        jsonWriter.writeStringField("scope", this.scope == null ? null : this.scope.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedScopeBenefitRecommendationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedScopeBenefitRecommendationProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SharedScopeBenefitRecommendationProperties.
     */
    public static SharedScopeBenefitRecommendationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SharedScopeBenefitRecommendationProperties deserializedSharedScopeBenefitRecommendationProperties
                = new SharedScopeBenefitRecommendationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstConsumptionDate".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.firstConsumptionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastConsumptionDate".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.lastConsumptionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lookBackPeriod".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties
                        .withLookBackPeriod(LookBackPeriod.fromString(reader.getString()));
                } else if ("totalHours".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.totalHours
                        = reader.getNullable(JsonReader::getInt);
                } else if ("usage".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties
                        .withUsage(RecommendationUsageDetails.fromJson(reader));
                } else if ("armSkuName".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.armSkuName = reader.getString();
                } else if ("term".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties
                        .withTerm(Term.fromString(reader.getString()));
                } else if ("commitmentGranularity".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties
                        .withCommitmentGranularity(Grain.fromString(reader.getString()));
                } else if ("currencyCode".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.currencyCode = reader.getString();
                } else if ("costWithoutBenefit".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.costWithoutBenefit
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("recommendationDetails".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties
                        .withRecommendationDetails(AllSavingsBenefitDetails.fromJson(reader));
                } else if ("allRecommendationDetails".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.allRecommendationDetails
                        = AllSavingsList.fromJson(reader);
                } else if ("scope".equals(fieldName)) {
                    deserializedSharedScopeBenefitRecommendationProperties.scope = Scope.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSharedScopeBenefitRecommendationProperties;
        });
    }
}
