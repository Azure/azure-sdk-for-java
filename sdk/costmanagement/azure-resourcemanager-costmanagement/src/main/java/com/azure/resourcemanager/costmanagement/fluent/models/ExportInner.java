// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.costmanagement.models.ExportDefinition;
import com.azure.resourcemanager.costmanagement.models.ExportDeliveryInfo;
import com.azure.resourcemanager.costmanagement.models.ExportSchedule;
import com.azure.resourcemanager.costmanagement.models.FormatType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A export resource. */
@JsonFlatten
@Fluent
public class ExportInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ExportInner.class);

    /*
     * The format of the export being delivered.
     */
    @JsonProperty(value = "properties.format")
    private FormatType format;

    /*
     * Has delivery information for the export.
     */
    @JsonProperty(value = "properties.deliveryInfo")
    private ExportDeliveryInfo deliveryInfo;

    /*
     * Has definition for the export.
     */
    @JsonProperty(value = "properties.definition")
    private ExportDefinition definition;

    /*
     * Has schedule information for the export.
     */
    @JsonProperty(value = "properties.schedule")
    private ExportSchedule schedule;

    /*
     * eTag of the resource. To handle concurrent update scenario, this field
     * will be used to determine whether the user is updating the latest
     * version or not.
     */
    @JsonProperty(value = "eTag")
    private String etag;

    /**
     * Get the format property: The format of the export being delivered.
     *
     * @return the format value.
     */
    public FormatType format() {
        return this.format;
    }

    /**
     * Set the format property: The format of the export being delivered.
     *
     * @param format the format value to set.
     * @return the ExportInner object itself.
     */
    public ExportInner withFormat(FormatType format) {
        this.format = format;
        return this;
    }

    /**
     * Get the deliveryInfo property: Has delivery information for the export.
     *
     * @return the deliveryInfo value.
     */
    public ExportDeliveryInfo deliveryInfo() {
        return this.deliveryInfo;
    }

    /**
     * Set the deliveryInfo property: Has delivery information for the export.
     *
     * @param deliveryInfo the deliveryInfo value to set.
     * @return the ExportInner object itself.
     */
    public ExportInner withDeliveryInfo(ExportDeliveryInfo deliveryInfo) {
        this.deliveryInfo = deliveryInfo;
        return this;
    }

    /**
     * Get the definition property: Has definition for the export.
     *
     * @return the definition value.
     */
    public ExportDefinition definition() {
        return this.definition;
    }

    /**
     * Set the definition property: Has definition for the export.
     *
     * @param definition the definition value to set.
     * @return the ExportInner object itself.
     */
    public ExportInner withDefinition(ExportDefinition definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Get the schedule property: Has schedule information for the export.
     *
     * @return the schedule value.
     */
    public ExportSchedule schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: Has schedule information for the export.
     *
     * @param schedule the schedule value to set.
     * @return the ExportInner object itself.
     */
    public ExportInner withSchedule(ExportSchedule schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the etag property: eTag of the resource. To handle concurrent update scenario, this field will be used to
     * determine whether the user is updating the latest version or not.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: eTag of the resource. To handle concurrent update scenario, this field will be used to
     * determine whether the user is updating the latest version or not.
     *
     * @param etag the etag value to set.
     * @return the ExportInner object itself.
     */
    public ExportInner withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deliveryInfo() != null) {
            deliveryInfo().validate();
        }
        if (definition() != null) {
            definition().validate();
        }
        if (schedule() != null) {
            schedule().validate();
        }
    }
}
