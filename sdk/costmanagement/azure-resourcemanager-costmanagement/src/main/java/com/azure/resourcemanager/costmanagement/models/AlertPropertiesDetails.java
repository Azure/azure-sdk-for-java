// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;
import java.util.List;

/** Alert details. */
@Fluent
public final class AlertPropertiesDetails {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AlertPropertiesDetails.class);

    /*
     * Type of timegrain cadence
     */
    @JsonProperty(value = "timeGrainType")
    private AlertTimeGrainType timeGrainType;

    /*
     * datetime of periodStartDate
     */
    @JsonProperty(value = "periodStartDate")
    private String periodStartDate;

    /*
     * notificationId that triggered this alert
     */
    @JsonProperty(value = "triggeredBy")
    private String triggeredBy;

    /*
     * array of resourceGroups to filter by
     */
    @JsonProperty(value = "resourceGroupFilter")
    private List<Object> resourceGroupFilter;

    /*
     * array of resources to filter by
     */
    @JsonProperty(value = "resourceFilter")
    private List<Object> resourceFilter;

    /*
     * array of meters to filter by
     */
    @JsonProperty(value = "meterFilter")
    private List<Object> meterFilter;

    /*
     * tags to filter by
     */
    @JsonProperty(value = "tagFilter")
    private Object tagFilter;

    /*
     * notification threshold percentage as a decimal which activated this
     * alert
     */
    @JsonProperty(value = "threshold")
    private BigDecimal threshold;

    /*
     * operator used to compare currentSpend with amount
     */
    @JsonProperty(value = "operator")
    private AlertOperator operator;

    /*
     * budget threshold amount
     */
    @JsonProperty(value = "amount")
    private BigDecimal amount;

    /*
     * unit of currency being used
     */
    @JsonProperty(value = "unit")
    private String unit;

    /*
     * current spend
     */
    @JsonProperty(value = "currentSpend")
    private BigDecimal currentSpend;

    /*
     * list of emails to contact
     */
    @JsonProperty(value = "contactEmails")
    private List<String> contactEmails;

    /*
     * list of action groups to broadcast to
     */
    @JsonProperty(value = "contactGroups")
    private List<String> contactGroups;

    /*
     * list of contact roles
     */
    @JsonProperty(value = "contactRoles")
    private List<String> contactRoles;

    /*
     * overriding alert
     */
    @JsonProperty(value = "overridingAlert")
    private String overridingAlert;

    /**
     * Get the timeGrainType property: Type of timegrain cadence.
     *
     * @return the timeGrainType value.
     */
    public AlertTimeGrainType timeGrainType() {
        return this.timeGrainType;
    }

    /**
     * Set the timeGrainType property: Type of timegrain cadence.
     *
     * @param timeGrainType the timeGrainType value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withTimeGrainType(AlertTimeGrainType timeGrainType) {
        this.timeGrainType = timeGrainType;
        return this;
    }

    /**
     * Get the periodStartDate property: datetime of periodStartDate.
     *
     * @return the periodStartDate value.
     */
    public String periodStartDate() {
        return this.periodStartDate;
    }

    /**
     * Set the periodStartDate property: datetime of periodStartDate.
     *
     * @param periodStartDate the periodStartDate value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withPeriodStartDate(String periodStartDate) {
        this.periodStartDate = periodStartDate;
        return this;
    }

    /**
     * Get the triggeredBy property: notificationId that triggered this alert.
     *
     * @return the triggeredBy value.
     */
    public String triggeredBy() {
        return this.triggeredBy;
    }

    /**
     * Set the triggeredBy property: notificationId that triggered this alert.
     *
     * @param triggeredBy the triggeredBy value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withTriggeredBy(String triggeredBy) {
        this.triggeredBy = triggeredBy;
        return this;
    }

    /**
     * Get the resourceGroupFilter property: array of resourceGroups to filter by.
     *
     * @return the resourceGroupFilter value.
     */
    public List<Object> resourceGroupFilter() {
        return this.resourceGroupFilter;
    }

    /**
     * Set the resourceGroupFilter property: array of resourceGroups to filter by.
     *
     * @param resourceGroupFilter the resourceGroupFilter value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withResourceGroupFilter(List<Object> resourceGroupFilter) {
        this.resourceGroupFilter = resourceGroupFilter;
        return this;
    }

    /**
     * Get the resourceFilter property: array of resources to filter by.
     *
     * @return the resourceFilter value.
     */
    public List<Object> resourceFilter() {
        return this.resourceFilter;
    }

    /**
     * Set the resourceFilter property: array of resources to filter by.
     *
     * @param resourceFilter the resourceFilter value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withResourceFilter(List<Object> resourceFilter) {
        this.resourceFilter = resourceFilter;
        return this;
    }

    /**
     * Get the meterFilter property: array of meters to filter by.
     *
     * @return the meterFilter value.
     */
    public List<Object> meterFilter() {
        return this.meterFilter;
    }

    /**
     * Set the meterFilter property: array of meters to filter by.
     *
     * @param meterFilter the meterFilter value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withMeterFilter(List<Object> meterFilter) {
        this.meterFilter = meterFilter;
        return this;
    }

    /**
     * Get the tagFilter property: tags to filter by.
     *
     * @return the tagFilter value.
     */
    public Object tagFilter() {
        return this.tagFilter;
    }

    /**
     * Set the tagFilter property: tags to filter by.
     *
     * @param tagFilter the tagFilter value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withTagFilter(Object tagFilter) {
        this.tagFilter = tagFilter;
        return this;
    }

    /**
     * Get the threshold property: notification threshold percentage as a decimal which activated this alert.
     *
     * @return the threshold value.
     */
    public BigDecimal threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: notification threshold percentage as a decimal which activated this alert.
     *
     * @param threshold the threshold value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withThreshold(BigDecimal threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the operator property: operator used to compare currentSpend with amount.
     *
     * @return the operator value.
     */
    public AlertOperator operator() {
        return this.operator;
    }

    /**
     * Set the operator property: operator used to compare currentSpend with amount.
     *
     * @param operator the operator value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withOperator(AlertOperator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the amount property: budget threshold amount.
     *
     * @return the amount value.
     */
    public BigDecimal amount() {
        return this.amount;
    }

    /**
     * Set the amount property: budget threshold amount.
     *
     * @param amount the amount value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withAmount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get the unit property: unit of currency being used.
     *
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: unit of currency being used.
     *
     * @param unit the unit value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the currentSpend property: current spend.
     *
     * @return the currentSpend value.
     */
    public BigDecimal currentSpend() {
        return this.currentSpend;
    }

    /**
     * Set the currentSpend property: current spend.
     *
     * @param currentSpend the currentSpend value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withCurrentSpend(BigDecimal currentSpend) {
        this.currentSpend = currentSpend;
        return this;
    }

    /**
     * Get the contactEmails property: list of emails to contact.
     *
     * @return the contactEmails value.
     */
    public List<String> contactEmails() {
        return this.contactEmails;
    }

    /**
     * Set the contactEmails property: list of emails to contact.
     *
     * @param contactEmails the contactEmails value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withContactEmails(List<String> contactEmails) {
        this.contactEmails = contactEmails;
        return this;
    }

    /**
     * Get the contactGroups property: list of action groups to broadcast to.
     *
     * @return the contactGroups value.
     */
    public List<String> contactGroups() {
        return this.contactGroups;
    }

    /**
     * Set the contactGroups property: list of action groups to broadcast to.
     *
     * @param contactGroups the contactGroups value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withContactGroups(List<String> contactGroups) {
        this.contactGroups = contactGroups;
        return this;
    }

    /**
     * Get the contactRoles property: list of contact roles.
     *
     * @return the contactRoles value.
     */
    public List<String> contactRoles() {
        return this.contactRoles;
    }

    /**
     * Set the contactRoles property: list of contact roles.
     *
     * @param contactRoles the contactRoles value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withContactRoles(List<String> contactRoles) {
        this.contactRoles = contactRoles;
        return this;
    }

    /**
     * Get the overridingAlert property: overriding alert.
     *
     * @return the overridingAlert value.
     */
    public String overridingAlert() {
        return this.overridingAlert;
    }

    /**
     * Set the overridingAlert property: overriding alert.
     *
     * @param overridingAlert the overridingAlert value to set.
     * @return the AlertPropertiesDetails object itself.
     */
    public AlertPropertiesDetails withOverridingAlert(String overridingAlert) {
        this.overridingAlert = overridingAlert;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
