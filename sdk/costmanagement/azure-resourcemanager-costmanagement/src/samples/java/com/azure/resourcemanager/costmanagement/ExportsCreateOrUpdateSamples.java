// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement;

import com.azure.resourcemanager.costmanagement.models.ExportDefinition;
import com.azure.resourcemanager.costmanagement.models.ExportDeliveryDestination;
import com.azure.resourcemanager.costmanagement.models.ExportDeliveryInfo;
import com.azure.resourcemanager.costmanagement.models.ExportRecurrencePeriod;
import com.azure.resourcemanager.costmanagement.models.ExportSchedule;
import com.azure.resourcemanager.costmanagement.models.ExportType;
import com.azure.resourcemanager.costmanagement.models.FormatType;
import com.azure.resourcemanager.costmanagement.models.FunctionType;
import com.azure.resourcemanager.costmanagement.models.GranularityType;
import com.azure.resourcemanager.costmanagement.models.OperatorType;
import com.azure.resourcemanager.costmanagement.models.QueryAggregation;
import com.azure.resourcemanager.costmanagement.models.QueryColumnType;
import com.azure.resourcemanager.costmanagement.models.QueryComparisonExpression;
import com.azure.resourcemanager.costmanagement.models.QueryDatasetAutoGenerated;
import com.azure.resourcemanager.costmanagement.models.QueryDatasetConfiguration;
import com.azure.resourcemanager.costmanagement.models.QueryFilterAutoGenerated;
import com.azure.resourcemanager.costmanagement.models.QueryGrouping;
import com.azure.resourcemanager.costmanagement.models.RecurrenceType;
import com.azure.resourcemanager.costmanagement.models.StatusType;
import com.azure.resourcemanager.costmanagement.models.TimeframeType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Exports CreateOrUpdate. */
public final class ExportsCreateOrUpdateSamples {
    /**
     * Sample code: SubscriptionCreateOrUpdateExport.
     *
     * @param costManagementManager Entry point to CostManagementManager.
     */
    public static void subscriptionCreateOrUpdateExport(
        com.azure.resourcemanager.costmanagement.CostManagementManager costManagementManager) {
        costManagementManager
            .exports()
            .define("TestExport")
            .withExistingScope("subscriptions/00000000-0000-0000-0000-000000000000")
            .withSchedule(
                new ExportSchedule()
                    .withStatus(StatusType.ACTIVE)
                    .withRecurrence(RecurrenceType.WEEKLY)
                    .withRecurrencePeriod(
                        new ExportRecurrencePeriod()
                            .withFrom(OffsetDateTime.parse("2018-06-01T00:00:00Z"))
                            .withTo(OffsetDateTime.parse("2018-10-31T00:00:00Z"))))
            .withFormat(FormatType.CSV)
            .withDeliveryInfo(
                new ExportDeliveryInfo()
                    .withDestination(
                        new ExportDeliveryDestination()
                            .withResourceId(
                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182")
                            .withContainer("exports")
                            .withRootFolderPath("ad-hoc")))
            .withDefinition(
                new ExportDefinition()
                    .withType(ExportType.USAGE)
                    .withTimeframe(TimeframeType.MONTH_TO_DATE)
                    .withDataSet(
                        new QueryDatasetAutoGenerated()
                            .withGranularity(GranularityType.DAILY)
                            .withConfiguration(
                                new QueryDatasetConfiguration()
                                    .withColumns(
                                        Arrays
                                            .asList("Date", "MeterId", "InstanceId", "ResourceLocation", "PreTaxCost")))
                            .withAggregation(
                                mapOf(
                                    "costSum",
                                    new QueryAggregation().withName("PreTaxCost").withFunction(FunctionType.SUM)))
                            .withGrouping(
                                Arrays
                                    .asList(
                                        new QueryGrouping()
                                            .withType(QueryColumnType.DIMENSION)
                                            .withName("SubscriptionName"),
                                        new QueryGrouping().withType(QueryColumnType.TAG).withName("Environment")))
                            .withFilter(
                                new QueryFilterAutoGenerated()
                                    .withAnd(
                                        Arrays
                                            .asList(
                                                new QueryFilterAutoGenerated()
                                                    .withOr(
                                                        Arrays
                                                            .asList(
                                                                new QueryFilterAutoGenerated()
                                                                    .withDimensions(
                                                                        new QueryComparisonExpression()
                                                                            .withName("ResourceLocation")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays
                                                                                    .asList("East US", "West Europe"))),
                                                                new QueryFilterAutoGenerated()
                                                                    .withTags(
                                                                        new QueryComparisonExpression()
                                                                            .withName("Environment")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays.asList("UAT", "Prod"))))),
                                                new QueryFilterAutoGenerated()
                                                    .withDimensions(
                                                        new QueryComparisonExpression()
                                                            .withName("ResourceGroup")
                                                            .withOperator(OperatorType.IN)
                                                            .withValues(Arrays.asList("API"))))))))
            .create();
    }

    /**
     * Sample code: ManagementGroupCreateOrUpdateExport.
     *
     * @param costManagementManager Entry point to CostManagementManager.
     */
    public static void managementGroupCreateOrUpdateExport(
        com.azure.resourcemanager.costmanagement.CostManagementManager costManagementManager) {
        costManagementManager
            .exports()
            .define("TestExport")
            .withExistingScope("providers/Microsoft.Management/managementGroups/TestMG")
            .withSchedule(
                new ExportSchedule()
                    .withStatus(StatusType.ACTIVE)
                    .withRecurrence(RecurrenceType.WEEKLY)
                    .withRecurrencePeriod(
                        new ExportRecurrencePeriod()
                            .withFrom(OffsetDateTime.parse("2018-06-01T00:00:00Z"))
                            .withTo(OffsetDateTime.parse("2018-10-31T00:00:00Z"))))
            .withFormat(FormatType.CSV)
            .withDeliveryInfo(
                new ExportDeliveryInfo()
                    .withDestination(
                        new ExportDeliveryDestination()
                            .withResourceId(
                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182")
                            .withContainer("exports")
                            .withRootFolderPath("ad-hoc")))
            .withDefinition(
                new ExportDefinition()
                    .withType(ExportType.USAGE)
                    .withTimeframe(TimeframeType.MONTH_TO_DATE)
                    .withDataSet(
                        new QueryDatasetAutoGenerated()
                            .withGranularity(GranularityType.DAILY)
                            .withConfiguration(
                                new QueryDatasetConfiguration()
                                    .withColumns(
                                        Arrays
                                            .asList("Date", "MeterId", "InstanceId", "ResourceLocation", "PreTaxCost")))
                            .withAggregation(
                                mapOf(
                                    "costSum",
                                    new QueryAggregation().withName("PreTaxCost").withFunction(FunctionType.SUM)))
                            .withGrouping(
                                Arrays
                                    .asList(
                                        new QueryGrouping()
                                            .withType(QueryColumnType.DIMENSION)
                                            .withName("SubscriptionName"),
                                        new QueryGrouping().withType(QueryColumnType.TAG).withName("Environment")))
                            .withFilter(
                                new QueryFilterAutoGenerated()
                                    .withAnd(
                                        Arrays
                                            .asList(
                                                new QueryFilterAutoGenerated()
                                                    .withOr(
                                                        Arrays
                                                            .asList(
                                                                new QueryFilterAutoGenerated()
                                                                    .withDimensions(
                                                                        new QueryComparisonExpression()
                                                                            .withName("ResourceLocation")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays
                                                                                    .asList("East US", "West Europe"))),
                                                                new QueryFilterAutoGenerated()
                                                                    .withTags(
                                                                        new QueryComparisonExpression()
                                                                            .withName("Environment")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays.asList("UAT", "Prod"))))),
                                                new QueryFilterAutoGenerated()
                                                    .withDimensions(
                                                        new QueryComparisonExpression()
                                                            .withName("ResourceGroup")
                                                            .withOperator(OperatorType.IN)
                                                            .withValues(Arrays.asList("API"))))))))
            .create();
    }

    /**
     * Sample code: EnrollmentAccountCreateOrUpdateExport.
     *
     * @param costManagementManager Entry point to CostManagementManager.
     */
    public static void enrollmentAccountCreateOrUpdateExport(
        com.azure.resourcemanager.costmanagement.CostManagementManager costManagementManager) {
        costManagementManager
            .exports()
            .define("TestExport")
            .withExistingScope("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456")
            .withSchedule(
                new ExportSchedule()
                    .withStatus(StatusType.ACTIVE)
                    .withRecurrence(RecurrenceType.WEEKLY)
                    .withRecurrencePeriod(
                        new ExportRecurrencePeriod()
                            .withFrom(OffsetDateTime.parse("2018-06-01T00:00:00Z"))
                            .withTo(OffsetDateTime.parse("2018-10-31T00:00:00Z"))))
            .withFormat(FormatType.CSV)
            .withDeliveryInfo(
                new ExportDeliveryInfo()
                    .withDestination(
                        new ExportDeliveryDestination()
                            .withResourceId(
                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182")
                            .withContainer("exports")
                            .withRootFolderPath("ad-hoc")))
            .withDefinition(
                new ExportDefinition()
                    .withType(ExportType.USAGE)
                    .withTimeframe(TimeframeType.MONTH_TO_DATE)
                    .withDataSet(
                        new QueryDatasetAutoGenerated()
                            .withGranularity(GranularityType.DAILY)
                            .withConfiguration(
                                new QueryDatasetConfiguration()
                                    .withColumns(
                                        Arrays
                                            .asList("Date", "MeterId", "InstanceId", "ResourceLocation", "PreTaxCost")))
                            .withAggregation(
                                mapOf(
                                    "costSum",
                                    new QueryAggregation().withName("PreTaxCost").withFunction(FunctionType.SUM)))
                            .withGrouping(
                                Arrays
                                    .asList(
                                        new QueryGrouping()
                                            .withType(QueryColumnType.DIMENSION)
                                            .withName("SubscriptionName"),
                                        new QueryGrouping().withType(QueryColumnType.TAG).withName("Environment")))
                            .withFilter(
                                new QueryFilterAutoGenerated()
                                    .withAnd(
                                        Arrays
                                            .asList(
                                                new QueryFilterAutoGenerated()
                                                    .withOr(
                                                        Arrays
                                                            .asList(
                                                                new QueryFilterAutoGenerated()
                                                                    .withDimensions(
                                                                        new QueryComparisonExpression()
                                                                            .withName("ResourceLocation")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays
                                                                                    .asList("East US", "West Europe"))),
                                                                new QueryFilterAutoGenerated()
                                                                    .withTags(
                                                                        new QueryComparisonExpression()
                                                                            .withName("Environment")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays.asList("UAT", "Prod"))))),
                                                new QueryFilterAutoGenerated()
                                                    .withDimensions(
                                                        new QueryComparisonExpression()
                                                            .withName("ResourceGroup")
                                                            .withOperator(OperatorType.IN)
                                                            .withValues(Arrays.asList("API"))))))))
            .create();
    }

    /**
     * Sample code: BillingAccountCreateOrUpdateExport.
     *
     * @param costManagementManager Entry point to CostManagementManager.
     */
    public static void billingAccountCreateOrUpdateExport(
        com.azure.resourcemanager.costmanagement.CostManagementManager costManagementManager) {
        costManagementManager
            .exports()
            .define("TestExport")
            .withExistingScope("providers/Microsoft.Billing/billingAccounts/123456")
            .withSchedule(
                new ExportSchedule()
                    .withStatus(StatusType.ACTIVE)
                    .withRecurrence(RecurrenceType.WEEKLY)
                    .withRecurrencePeriod(
                        new ExportRecurrencePeriod()
                            .withFrom(OffsetDateTime.parse("2018-06-01T00:00:00Z"))
                            .withTo(OffsetDateTime.parse("2018-10-31T00:00:00Z"))))
            .withFormat(FormatType.CSV)
            .withDeliveryInfo(
                new ExportDeliveryInfo()
                    .withDestination(
                        new ExportDeliveryDestination()
                            .withResourceId(
                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182")
                            .withContainer("exports")
                            .withRootFolderPath("ad-hoc")))
            .withDefinition(
                new ExportDefinition()
                    .withType(ExportType.USAGE)
                    .withTimeframe(TimeframeType.MONTH_TO_DATE)
                    .withDataSet(
                        new QueryDatasetAutoGenerated()
                            .withGranularity(GranularityType.DAILY)
                            .withConfiguration(
                                new QueryDatasetConfiguration()
                                    .withColumns(
                                        Arrays
                                            .asList("Date", "MeterId", "InstanceId", "ResourceLocation", "PreTaxCost")))
                            .withAggregation(
                                mapOf(
                                    "costSum",
                                    new QueryAggregation().withName("PreTaxCost").withFunction(FunctionType.SUM)))
                            .withGrouping(
                                Arrays
                                    .asList(
                                        new QueryGrouping()
                                            .withType(QueryColumnType.DIMENSION)
                                            .withName("SubscriptionName"),
                                        new QueryGrouping().withType(QueryColumnType.TAG).withName("Environment")))
                            .withFilter(
                                new QueryFilterAutoGenerated()
                                    .withAnd(
                                        Arrays
                                            .asList(
                                                new QueryFilterAutoGenerated()
                                                    .withOr(
                                                        Arrays
                                                            .asList(
                                                                new QueryFilterAutoGenerated()
                                                                    .withDimensions(
                                                                        new QueryComparisonExpression()
                                                                            .withName("ResourceLocation")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays
                                                                                    .asList("East US", "West Europe"))),
                                                                new QueryFilterAutoGenerated()
                                                                    .withTags(
                                                                        new QueryComparisonExpression()
                                                                            .withName("Environment")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays.asList("UAT", "Prod"))))),
                                                new QueryFilterAutoGenerated()
                                                    .withDimensions(
                                                        new QueryComparisonExpression()
                                                            .withName("ResourceGroup")
                                                            .withOperator(OperatorType.IN)
                                                            .withValues(Arrays.asList("API"))))))))
            .create();
    }

    /**
     * Sample code: DepartmentCreateOrUpdateExport.
     *
     * @param costManagementManager Entry point to CostManagementManager.
     */
    public static void departmentCreateOrUpdateExport(
        com.azure.resourcemanager.costmanagement.CostManagementManager costManagementManager) {
        costManagementManager
            .exports()
            .define("TestExport")
            .withExistingScope("providers/Microsoft.Billing/billingAccounts/12/departments/1234")
            .withSchedule(
                new ExportSchedule()
                    .withStatus(StatusType.ACTIVE)
                    .withRecurrence(RecurrenceType.WEEKLY)
                    .withRecurrencePeriod(
                        new ExportRecurrencePeriod()
                            .withFrom(OffsetDateTime.parse("2018-06-01T00:00:00Z"))
                            .withTo(OffsetDateTime.parse("2018-10-31T00:00:00Z"))))
            .withFormat(FormatType.CSV)
            .withDeliveryInfo(
                new ExportDeliveryInfo()
                    .withDestination(
                        new ExportDeliveryDestination()
                            .withResourceId(
                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182")
                            .withContainer("exports")
                            .withRootFolderPath("ad-hoc")))
            .withDefinition(
                new ExportDefinition()
                    .withType(ExportType.USAGE)
                    .withTimeframe(TimeframeType.MONTH_TO_DATE)
                    .withDataSet(
                        new QueryDatasetAutoGenerated()
                            .withGranularity(GranularityType.DAILY)
                            .withConfiguration(
                                new QueryDatasetConfiguration()
                                    .withColumns(
                                        Arrays
                                            .asList("Date", "MeterId", "InstanceId", "ResourceLocation", "PreTaxCost")))
                            .withAggregation(
                                mapOf(
                                    "costSum",
                                    new QueryAggregation().withName("PreTaxCost").withFunction(FunctionType.SUM)))
                            .withGrouping(
                                Arrays
                                    .asList(
                                        new QueryGrouping()
                                            .withType(QueryColumnType.DIMENSION)
                                            .withName("SubscriptionName"),
                                        new QueryGrouping().withType(QueryColumnType.TAG).withName("Environment")))
                            .withFilter(
                                new QueryFilterAutoGenerated()
                                    .withAnd(
                                        Arrays
                                            .asList(
                                                new QueryFilterAutoGenerated()
                                                    .withOr(
                                                        Arrays
                                                            .asList(
                                                                new QueryFilterAutoGenerated()
                                                                    .withDimensions(
                                                                        new QueryComparisonExpression()
                                                                            .withName("ResourceLocation")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays
                                                                                    .asList("East US", "West Europe"))),
                                                                new QueryFilterAutoGenerated()
                                                                    .withTags(
                                                                        new QueryComparisonExpression()
                                                                            .withName("Environment")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays.asList("UAT", "Prod"))))),
                                                new QueryFilterAutoGenerated()
                                                    .withDimensions(
                                                        new QueryComparisonExpression()
                                                            .withName("ResourceGroup")
                                                            .withOperator(OperatorType.IN)
                                                            .withValues(Arrays.asList("API"))))))))
            .create();
    }

    /**
     * Sample code: ResourceGroupCreateOrUpdateExport.
     *
     * @param costManagementManager Entry point to CostManagementManager.
     */
    public static void resourceGroupCreateOrUpdateExport(
        com.azure.resourcemanager.costmanagement.CostManagementManager costManagementManager) {
        costManagementManager
            .exports()
            .define("TestExport")
            .withExistingScope("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG")
            .withSchedule(
                new ExportSchedule()
                    .withStatus(StatusType.ACTIVE)
                    .withRecurrence(RecurrenceType.WEEKLY)
                    .withRecurrencePeriod(
                        new ExportRecurrencePeriod()
                            .withFrom(OffsetDateTime.parse("2018-06-01T00:00:00Z"))
                            .withTo(OffsetDateTime.parse("2018-10-31T00:00:00Z"))))
            .withFormat(FormatType.CSV)
            .withDeliveryInfo(
                new ExportDeliveryInfo()
                    .withDestination(
                        new ExportDeliveryDestination()
                            .withResourceId(
                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182")
                            .withContainer("exports")
                            .withRootFolderPath("ad-hoc")))
            .withDefinition(
                new ExportDefinition()
                    .withType(ExportType.USAGE)
                    .withTimeframe(TimeframeType.MONTH_TO_DATE)
                    .withDataSet(
                        new QueryDatasetAutoGenerated()
                            .withGranularity(GranularityType.DAILY)
                            .withConfiguration(
                                new QueryDatasetConfiguration()
                                    .withColumns(
                                        Arrays
                                            .asList("Date", "MeterId", "InstanceId", "ResourceLocation", "PreTaxCost")))
                            .withAggregation(
                                mapOf(
                                    "costSum",
                                    new QueryAggregation().withName("PreTaxCost").withFunction(FunctionType.SUM)))
                            .withGrouping(
                                Arrays
                                    .asList(
                                        new QueryGrouping()
                                            .withType(QueryColumnType.DIMENSION)
                                            .withName("SubscriptionName"),
                                        new QueryGrouping().withType(QueryColumnType.TAG).withName("Environment")))
                            .withFilter(
                                new QueryFilterAutoGenerated()
                                    .withAnd(
                                        Arrays
                                            .asList(
                                                new QueryFilterAutoGenerated()
                                                    .withOr(
                                                        Arrays
                                                            .asList(
                                                                new QueryFilterAutoGenerated()
                                                                    .withDimensions(
                                                                        new QueryComparisonExpression()
                                                                            .withName("ResourceLocation")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays
                                                                                    .asList("East US", "West Europe"))),
                                                                new QueryFilterAutoGenerated()
                                                                    .withTags(
                                                                        new QueryComparisonExpression()
                                                                            .withName("Environment")
                                                                            .withOperator(OperatorType.IN)
                                                                            .withValues(
                                                                                Arrays.asList("UAT", "Prod"))))),
                                                new QueryFilterAutoGenerated()
                                                    .withDimensions(
                                                        new QueryComparisonExpression()
                                                            .withName("ResourceGroup")
                                                            .withOperator(OperatorType.IN)
                                                            .withValues(Arrays.asList("API"))))))))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
