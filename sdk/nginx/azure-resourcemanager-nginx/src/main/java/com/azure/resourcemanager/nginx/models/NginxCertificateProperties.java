// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The NginxCertificateProperties model.
 */
@Fluent
public final class NginxCertificateProperties implements JsonSerializable<NginxCertificateProperties> {
    /*
     * The provisioningState property.
     */
    private ProvisioningState provisioningState;

    /*
     * The keyVirtualPath property.
     */
    private String keyVirtualPath;

    /*
     * The certificateVirtualPath property.
     */
    private String certificateVirtualPath;

    /*
     * The keyVaultSecretId property.
     */
    private String keyVaultSecretId;

    /*
     * The sha1Thumbprint property.
     */
    private String sha1Thumbprint;

    /*
     * The keyVaultSecretVersion property.
     */
    private String keyVaultSecretVersion;

    /*
     * The keyVaultSecretCreated property.
     */
    private OffsetDateTime keyVaultSecretCreated;

    /*
     * The certificateError property.
     */
    private NginxCertificateErrorResponseBody certificateError;

    /**
     * Creates an instance of NginxCertificateProperties class.
     */
    public NginxCertificateProperties() {
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the keyVirtualPath property: The keyVirtualPath property.
     * 
     * @return the keyVirtualPath value.
     */
    public String keyVirtualPath() {
        return this.keyVirtualPath;
    }

    /**
     * Set the keyVirtualPath property: The keyVirtualPath property.
     * 
     * @param keyVirtualPath the keyVirtualPath value to set.
     * @return the NginxCertificateProperties object itself.
     */
    public NginxCertificateProperties withKeyVirtualPath(String keyVirtualPath) {
        this.keyVirtualPath = keyVirtualPath;
        return this;
    }

    /**
     * Get the certificateVirtualPath property: The certificateVirtualPath property.
     * 
     * @return the certificateVirtualPath value.
     */
    public String certificateVirtualPath() {
        return this.certificateVirtualPath;
    }

    /**
     * Set the certificateVirtualPath property: The certificateVirtualPath property.
     * 
     * @param certificateVirtualPath the certificateVirtualPath value to set.
     * @return the NginxCertificateProperties object itself.
     */
    public NginxCertificateProperties withCertificateVirtualPath(String certificateVirtualPath) {
        this.certificateVirtualPath = certificateVirtualPath;
        return this;
    }

    /**
     * Get the keyVaultSecretId property: The keyVaultSecretId property.
     * 
     * @return the keyVaultSecretId value.
     */
    public String keyVaultSecretId() {
        return this.keyVaultSecretId;
    }

    /**
     * Set the keyVaultSecretId property: The keyVaultSecretId property.
     * 
     * @param keyVaultSecretId the keyVaultSecretId value to set.
     * @return the NginxCertificateProperties object itself.
     */
    public NginxCertificateProperties withKeyVaultSecretId(String keyVaultSecretId) {
        this.keyVaultSecretId = keyVaultSecretId;
        return this;
    }

    /**
     * Get the sha1Thumbprint property: The sha1Thumbprint property.
     * 
     * @return the sha1Thumbprint value.
     */
    public String sha1Thumbprint() {
        return this.sha1Thumbprint;
    }

    /**
     * Get the keyVaultSecretVersion property: The keyVaultSecretVersion property.
     * 
     * @return the keyVaultSecretVersion value.
     */
    public String keyVaultSecretVersion() {
        return this.keyVaultSecretVersion;
    }

    /**
     * Get the keyVaultSecretCreated property: The keyVaultSecretCreated property.
     * 
     * @return the keyVaultSecretCreated value.
     */
    public OffsetDateTime keyVaultSecretCreated() {
        return this.keyVaultSecretCreated;
    }

    /**
     * Get the certificateError property: The certificateError property.
     * 
     * @return the certificateError value.
     */
    public NginxCertificateErrorResponseBody certificateError() {
        return this.certificateError;
    }

    /**
     * Set the certificateError property: The certificateError property.
     * 
     * @param certificateError the certificateError value to set.
     * @return the NginxCertificateProperties object itself.
     */
    public NginxCertificateProperties withCertificateError(NginxCertificateErrorResponseBody certificateError) {
        this.certificateError = certificateError;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (certificateError() != null) {
            certificateError().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVirtualPath", this.keyVirtualPath);
        jsonWriter.writeStringField("certificateVirtualPath", this.certificateVirtualPath);
        jsonWriter.writeStringField("keyVaultSecretId", this.keyVaultSecretId);
        jsonWriter.writeJsonField("certificateError", this.certificateError);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxCertificateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxCertificateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxCertificateProperties.
     */
    public static NginxCertificateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxCertificateProperties deserializedNginxCertificateProperties = new NginxCertificateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedNginxCertificateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("keyVirtualPath".equals(fieldName)) {
                    deserializedNginxCertificateProperties.keyVirtualPath = reader.getString();
                } else if ("certificateVirtualPath".equals(fieldName)) {
                    deserializedNginxCertificateProperties.certificateVirtualPath = reader.getString();
                } else if ("keyVaultSecretId".equals(fieldName)) {
                    deserializedNginxCertificateProperties.keyVaultSecretId = reader.getString();
                } else if ("sha1Thumbprint".equals(fieldName)) {
                    deserializedNginxCertificateProperties.sha1Thumbprint = reader.getString();
                } else if ("keyVaultSecretVersion".equals(fieldName)) {
                    deserializedNginxCertificateProperties.keyVaultSecretVersion = reader.getString();
                } else if ("keyVaultSecretCreated".equals(fieldName)) {
                    deserializedNginxCertificateProperties.keyVaultSecretCreated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("certificateError".equals(fieldName)) {
                    deserializedNginxCertificateProperties.certificateError
                        = NginxCertificateErrorResponseBody.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxCertificateProperties;
        });
    }
}
