// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The NginxConfigurationRequestProperties model.
 */
@Fluent
public final class NginxConfigurationRequestProperties
    implements JsonSerializable<NginxConfigurationRequestProperties> {
    /*
     * The provisioningState property.
     */
    private ProvisioningState provisioningState;

    /*
     * The files property.
     */
    private List<NginxConfigurationFile> files;

    /*
     * The protectedFiles property.
     */
    private List<NginxConfigurationProtectedFileRequest> protectedFiles;

    /*
     * The package property.
     */
    private NginxConfigurationPackage packageProperty;

    /*
     * The rootFile property.
     */
    private String rootFile;

    /**
     * Creates an instance of NginxConfigurationRequestProperties class.
     */
    public NginxConfigurationRequestProperties() {
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the files property: The files property.
     * 
     * @return the files value.
     */
    public List<NginxConfigurationFile> files() {
        return this.files;
    }

    /**
     * Set the files property: The files property.
     * 
     * @param files the files value to set.
     * @return the NginxConfigurationRequestProperties object itself.
     */
    public NginxConfigurationRequestProperties withFiles(List<NginxConfigurationFile> files) {
        this.files = files;
        return this;
    }

    /**
     * Get the protectedFiles property: The protectedFiles property.
     * 
     * @return the protectedFiles value.
     */
    public List<NginxConfigurationProtectedFileRequest> protectedFiles() {
        return this.protectedFiles;
    }

    /**
     * Set the protectedFiles property: The protectedFiles property.
     * 
     * @param protectedFiles the protectedFiles value to set.
     * @return the NginxConfigurationRequestProperties object itself.
     */
    public NginxConfigurationRequestProperties
        withProtectedFiles(List<NginxConfigurationProtectedFileRequest> protectedFiles) {
        this.protectedFiles = protectedFiles;
        return this;
    }

    /**
     * Get the packageProperty property: The package property.
     * 
     * @return the packageProperty value.
     */
    public NginxConfigurationPackage packageProperty() {
        return this.packageProperty;
    }

    /**
     * Set the packageProperty property: The package property.
     * 
     * @param packageProperty the packageProperty value to set.
     * @return the NginxConfigurationRequestProperties object itself.
     */
    public NginxConfigurationRequestProperties withPackageProperty(NginxConfigurationPackage packageProperty) {
        this.packageProperty = packageProperty;
        return this;
    }

    /**
     * Get the rootFile property: The rootFile property.
     * 
     * @return the rootFile value.
     */
    public String rootFile() {
        return this.rootFile;
    }

    /**
     * Set the rootFile property: The rootFile property.
     * 
     * @param rootFile the rootFile value to set.
     * @return the NginxConfigurationRequestProperties object itself.
     */
    public NginxConfigurationRequestProperties withRootFile(String rootFile) {
        this.rootFile = rootFile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (files() != null) {
            files().forEach(e -> e.validate());
        }
        if (protectedFiles() != null) {
            protectedFiles().forEach(e -> e.validate());
        }
        if (packageProperty() != null) {
            packageProperty().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("files", this.files, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("protectedFiles", this.protectedFiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("package", this.packageProperty);
        jsonWriter.writeStringField("rootFile", this.rootFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationRequestProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxConfigurationRequestProperties.
     */
    public static NginxConfigurationRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationRequestProperties deserializedNginxConfigurationRequestProperties
                = new NginxConfigurationRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedNginxConfigurationRequestProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("files".equals(fieldName)) {
                    List<NginxConfigurationFile> files
                        = reader.readArray(reader1 -> NginxConfigurationFile.fromJson(reader1));
                    deserializedNginxConfigurationRequestProperties.files = files;
                } else if ("protectedFiles".equals(fieldName)) {
                    List<NginxConfigurationProtectedFileRequest> protectedFiles
                        = reader.readArray(reader1 -> NginxConfigurationProtectedFileRequest.fromJson(reader1));
                    deserializedNginxConfigurationRequestProperties.protectedFiles = protectedFiles;
                } else if ("package".equals(fieldName)) {
                    deserializedNginxConfigurationRequestProperties.packageProperty
                        = NginxConfigurationPackage.fromJson(reader);
                } else if ("rootFile".equals(fieldName)) {
                    deserializedNginxConfigurationRequestProperties.rootFile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationRequestProperties;
        });
    }
}
