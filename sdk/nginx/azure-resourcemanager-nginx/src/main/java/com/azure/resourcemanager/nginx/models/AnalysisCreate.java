// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The request body for creating an analysis for an NGINX configuration.
 */
@Fluent
public final class AnalysisCreate implements JsonSerializable<AnalysisCreate> {
    /*
     * The config property.
     */
    private AnalysisCreateConfig config;

    /**
     * Creates an instance of AnalysisCreate class.
     */
    public AnalysisCreate() {
    }

    /**
     * Get the config property: The config property.
     * 
     * @return the config value.
     */
    public AnalysisCreateConfig config() {
        return this.config;
    }

    /**
     * Set the config property: The config property.
     * 
     * @param config the config value to set.
     * @return the AnalysisCreate object itself.
     */
    public AnalysisCreate withConfig(AnalysisCreateConfig config) {
        this.config = config;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (config() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property config in model AnalysisCreate"));
        } else {
            config().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AnalysisCreate.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("config", this.config);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalysisCreate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalysisCreate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalysisCreate.
     */
    public static AnalysisCreate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalysisCreate deserializedAnalysisCreate = new AnalysisCreate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("config".equals(fieldName)) {
                    deserializedAnalysisCreate.config = AnalysisCreateConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalysisCreate;
        });
    }
}
