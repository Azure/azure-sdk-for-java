// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.nginx.fluent.models.NginxConfigurationInner;

/**
 * An immutable client-side representation of NginxConfiguration.
 */
public interface NginxConfiguration {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: The properties property.
     * 
     * @return the properties value.
     */
    NginxConfigurationProperties properties();

    /**
     * Gets the location property: The location property.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.nginx.fluent.models.NginxConfigurationInner object.
     * 
     * @return the inner object.
     */
    NginxConfigurationInner innerModel();

    /**
     * The entirety of the NginxConfiguration definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The NginxConfiguration definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the NginxConfiguration definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the NginxConfiguration definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, deploymentName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param deploymentName The name of targeted NGINX deployment.
             * @return the next definition stage.
             */
            WithCreate withExistingNginxDeployment(String resourceGroupName, String deploymentName);
        }

        /**
         * The stage of the NginxConfiguration definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithLocation, DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            NginxConfiguration create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            NginxConfiguration create(Context context);
        }

        /**
         * The stage of the NginxConfiguration definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The location property.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The location property.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }

        /**
         * The stage of the NginxConfiguration definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: The properties property..
             * 
             * @param properties The properties property.
             * @return the next definition stage.
             */
            WithCreate withProperties(NginxConfigurationProperties properties);
        }
    }

    /**
     * Begins update for the NginxConfiguration resource.
     * 
     * @return the stage of resource update.
     */
    NginxConfiguration.Update update();

    /**
     * The template for NginxConfiguration update.
     */
    interface Update extends UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        NginxConfiguration apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        NginxConfiguration apply(Context context);
    }

    /**
     * The NginxConfiguration update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the NginxConfiguration update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: The properties property..
             * 
             * @param properties The properties property.
             * @return the next definition stage.
             */
            Update withProperties(NginxConfigurationProperties properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    NginxConfiguration refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    NginxConfiguration refresh(Context context);

    /**
     * Analyze an NGINX configuration without applying it to the NGINXaaS deployment.
     * 
     * @param body The NGINX configuration to analyze.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body for an analysis request along with {@link Response}.
     */
    Response<AnalysisResult> analysisWithResponse(AnalysisCreate body, Context context);

    /**
     * Analyze an NGINX configuration without applying it to the NGINXaaS deployment.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body for an analysis request.
     */
    AnalysisResult analysis();
}
