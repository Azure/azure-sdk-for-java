// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NginxConfigurationFile model.
 */
@Fluent
public final class NginxConfigurationFile implements JsonSerializable<NginxConfigurationFile> {
    /*
     * The content property.
     */
    private String content;

    /*
     * The virtualPath property.
     */
    private String virtualPath;

    /**
     * Creates an instance of NginxConfigurationFile class.
     */
    public NginxConfigurationFile() {
    }

    /**
     * Get the content property: The content property.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: The content property.
     * 
     * @param content the content value to set.
     * @return the NginxConfigurationFile object itself.
     */
    public NginxConfigurationFile withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the virtualPath property: The virtualPath property.
     * 
     * @return the virtualPath value.
     */
    public String virtualPath() {
        return this.virtualPath;
    }

    /**
     * Set the virtualPath property: The virtualPath property.
     * 
     * @param virtualPath the virtualPath value to set.
     * @return the NginxConfigurationFile object itself.
     */
    public NginxConfigurationFile withVirtualPath(String virtualPath) {
        this.virtualPath = virtualPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("virtualPath", this.virtualPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationFile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationFile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxConfigurationFile.
     */
    public static NginxConfigurationFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationFile deserializedNginxConfigurationFile = new NginxConfigurationFile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("content".equals(fieldName)) {
                    deserializedNginxConfigurationFile.content = reader.getString();
                } else if ("virtualPath".equals(fieldName)) {
                    deserializedNginxConfigurationFile.virtualPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationFile;
        });
    }
}
