// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Nginx Network Profile.
 */
@Fluent
public final class NginxNetworkProfile implements JsonSerializable<NginxNetworkProfile> {
    /*
     * Nginx Frontend IP Configuration
     */
    private NginxFrontendIpConfiguration frontEndIpConfiguration;

    /*
     * Nginx Network Interface Configuration
     */
    private NginxNetworkInterfaceConfiguration networkInterfaceConfiguration;

    /**
     * Creates an instance of NginxNetworkProfile class.
     */
    public NginxNetworkProfile() {
    }

    /**
     * Get the frontEndIpConfiguration property: Nginx Frontend IP Configuration.
     * 
     * @return the frontEndIpConfiguration value.
     */
    public NginxFrontendIpConfiguration frontEndIpConfiguration() {
        return this.frontEndIpConfiguration;
    }

    /**
     * Set the frontEndIpConfiguration property: Nginx Frontend IP Configuration.
     * 
     * @param frontEndIpConfiguration the frontEndIpConfiguration value to set.
     * @return the NginxNetworkProfile object itself.
     */
    public NginxNetworkProfile withFrontEndIpConfiguration(NginxFrontendIpConfiguration frontEndIpConfiguration) {
        this.frontEndIpConfiguration = frontEndIpConfiguration;
        return this;
    }

    /**
     * Get the networkInterfaceConfiguration property: Nginx Network Interface Configuration.
     * 
     * @return the networkInterfaceConfiguration value.
     */
    public NginxNetworkInterfaceConfiguration networkInterfaceConfiguration() {
        return this.networkInterfaceConfiguration;
    }

    /**
     * Set the networkInterfaceConfiguration property: Nginx Network Interface Configuration.
     * 
     * @param networkInterfaceConfiguration the networkInterfaceConfiguration value to set.
     * @return the NginxNetworkProfile object itself.
     */
    public NginxNetworkProfile
        withNetworkInterfaceConfiguration(NginxNetworkInterfaceConfiguration networkInterfaceConfiguration) {
        this.networkInterfaceConfiguration = networkInterfaceConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("frontEndIPConfiguration", this.frontEndIpConfiguration);
        jsonWriter.writeJsonField("networkInterfaceConfiguration", this.networkInterfaceConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxNetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxNetworkProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxNetworkProfile.
     */
    public static NginxNetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxNetworkProfile deserializedNginxNetworkProfile = new NginxNetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frontEndIPConfiguration".equals(fieldName)) {
                    deserializedNginxNetworkProfile.frontEndIpConfiguration
                        = NginxFrontendIpConfiguration.fromJson(reader);
                } else if ("networkInterfaceConfiguration".equals(fieldName)) {
                    deserializedNginxNetworkProfile.networkInterfaceConfiguration
                        = NginxNetworkInterfaceConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxNetworkProfile;
        });
    }
}
