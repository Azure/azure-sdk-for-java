// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NginxConfigurationProtectedFileResponse model.
 */
@Fluent
public final class NginxConfigurationProtectedFileResponse
    implements JsonSerializable<NginxConfigurationProtectedFileResponse> {
    /*
     * The virtual path of the protected file.
     */
    private String virtualPath;

    /*
     * The hash of the content of the file. This value is used to determine if the file has changed.
     */
    private String contentHash;

    /**
     * Creates an instance of NginxConfigurationProtectedFileResponse class.
     */
    public NginxConfigurationProtectedFileResponse() {
    }

    /**
     * Get the virtualPath property: The virtual path of the protected file.
     * 
     * @return the virtualPath value.
     */
    public String virtualPath() {
        return this.virtualPath;
    }

    /**
     * Set the virtualPath property: The virtual path of the protected file.
     * 
     * @param virtualPath the virtualPath value to set.
     * @return the NginxConfigurationProtectedFileResponse object itself.
     */
    public NginxConfigurationProtectedFileResponse withVirtualPath(String virtualPath) {
        this.virtualPath = virtualPath;
        return this;
    }

    /**
     * Get the contentHash property: The hash of the content of the file. This value is used to determine if the file
     * has changed.
     * 
     * @return the contentHash value.
     */
    public String contentHash() {
        return this.contentHash;
    }

    /**
     * Set the contentHash property: The hash of the content of the file. This value is used to determine if the file
     * has changed.
     * 
     * @param contentHash the contentHash value to set.
     * @return the NginxConfigurationProtectedFileResponse object itself.
     */
    public NginxConfigurationProtectedFileResponse withContentHash(String contentHash) {
        this.contentHash = contentHash;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("virtualPath", this.virtualPath);
        jsonWriter.writeStringField("contentHash", this.contentHash);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationProtectedFileResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationProtectedFileResponse if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxConfigurationProtectedFileResponse.
     */
    public static NginxConfigurationProtectedFileResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationProtectedFileResponse deserializedNginxConfigurationProtectedFileResponse
                = new NginxConfigurationProtectedFileResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualPath".equals(fieldName)) {
                    deserializedNginxConfigurationProtectedFileResponse.virtualPath = reader.getString();
                } else if ("contentHash".equals(fieldName)) {
                    deserializedNginxConfigurationProtectedFileResponse.contentHash = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationProtectedFileResponse;
        });
    }
}
