// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.nginx.models.AnalysisResultData;
import java.io.IOException;

/**
 * The response body for an analysis request. Contains the status of the analysis and any errors.
 */
@Immutable
public final class AnalysisResultInner implements JsonSerializable<AnalysisResultInner> {
    /*
     * The status of the analysis.
     */
    private String status;

    /*
     * The data property.
     */
    private AnalysisResultData data;

    /**
     * Creates an instance of AnalysisResultInner class.
     */
    private AnalysisResultInner() {
    }

    /**
     * Get the status property: The status of the analysis.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    public AnalysisResultData data() {
        return this.data;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeJsonField("data", this.data);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalysisResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalysisResultInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalysisResultInner.
     */
    public static AnalysisResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalysisResultInner deserializedAnalysisResultInner = new AnalysisResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedAnalysisResultInner.status = reader.getString();
                } else if ("data".equals(fieldName)) {
                    deserializedAnalysisResultInner.data = AnalysisResultData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalysisResultInner;
        });
    }
}
