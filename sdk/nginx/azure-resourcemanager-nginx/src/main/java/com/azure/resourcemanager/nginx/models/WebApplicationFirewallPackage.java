// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * NGINX App Protect Web Application Firewall (WAF) Package. Contains the version and revision date of the package.
 */
@Immutable
public final class WebApplicationFirewallPackage implements JsonSerializable<WebApplicationFirewallPackage> {
    /*
     * The version of the NGINX App Protect Web Application Firewall (WAF) package.
     */
    private String version;

    /*
     * The date and time of the package revision.
     */
    private OffsetDateTime revisionDatetime;

    /**
     * Creates an instance of WebApplicationFirewallPackage class.
     */
    private WebApplicationFirewallPackage() {
    }

    /**
     * Get the version property: The version of the NGINX App Protect Web Application Firewall (WAF) package.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the revisionDatetime property: The date and time of the package revision.
     * 
     * @return the revisionDatetime value.
     */
    public OffsetDateTime revisionDatetime() {
        return this.revisionDatetime;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("revisionDatetime",
            this.revisionDatetime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.revisionDatetime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebApplicationFirewallPackage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebApplicationFirewallPackage if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebApplicationFirewallPackage.
     */
    public static WebApplicationFirewallPackage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebApplicationFirewallPackage deserializedWebApplicationFirewallPackage
                = new WebApplicationFirewallPackage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedWebApplicationFirewallPackage.version = reader.getString();
                } else if ("revisionDatetime".equals(fieldName)) {
                    deserializedWebApplicationFirewallPackage.revisionDatetime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebApplicationFirewallPackage;
        });
    }
}
