// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Nginx Deployment Waf Policy Properties.
 */
@Fluent
public final class NginxDeploymentWafPolicyProperties implements JsonSerializable<NginxDeploymentWafPolicyProperties> {
    /*
     * Provisioning State
     */
    private ProvisioningState provisioningState;

    /*
     * The byte content of the Policy
     */
    private byte[] content;

    /*
     * The file path where the Policy is to be saved
     */
    private String filepath;

    /*
     * Nginx Deployment Waf Policy Compiling Status
     */
    private NginxDeploymentWafPolicyCompilingStatus compilingState;

    /*
     * Nginx Deployment Waf Policy Applying Status
     */
    private NginxDeploymentWafPolicyApplyingStatus applyingState;

    /**
     * Creates an instance of NginxDeploymentWafPolicyProperties class.
     */
    public NginxDeploymentWafPolicyProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the content property: The byte content of the Policy.
     * 
     * @return the content value.
     */
    public byte[] content() {
        return CoreUtils.clone(this.content);
    }

    /**
     * Set the content property: The byte content of the Policy.
     * 
     * @param content the content value to set.
     * @return the NginxDeploymentWafPolicyProperties object itself.
     */
    public NginxDeploymentWafPolicyProperties withContent(byte[] content) {
        this.content = CoreUtils.clone(content);
        return this;
    }

    /**
     * Get the filepath property: The file path where the Policy is to be saved.
     * 
     * @return the filepath value.
     */
    public String filepath() {
        return this.filepath;
    }

    /**
     * Set the filepath property: The file path where the Policy is to be saved.
     * 
     * @param filepath the filepath value to set.
     * @return the NginxDeploymentWafPolicyProperties object itself.
     */
    public NginxDeploymentWafPolicyProperties withFilepath(String filepath) {
        this.filepath = filepath;
        return this;
    }

    /**
     * Get the compilingState property: Nginx Deployment Waf Policy Compiling Status.
     * 
     * @return the compilingState value.
     */
    public NginxDeploymentWafPolicyCompilingStatus compilingState() {
        return this.compilingState;
    }

    /**
     * Get the applyingState property: Nginx Deployment Waf Policy Applying Status.
     * 
     * @return the applyingState value.
     */
    public NginxDeploymentWafPolicyApplyingStatus applyingState() {
        return this.applyingState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("content", this.content);
        jsonWriter.writeStringField("filepath", this.filepath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxDeploymentWafPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxDeploymentWafPolicyProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxDeploymentWafPolicyProperties.
     */
    public static NginxDeploymentWafPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxDeploymentWafPolicyProperties deserializedNginxDeploymentWafPolicyProperties
                = new NginxDeploymentWafPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedNginxDeploymentWafPolicyProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("content".equals(fieldName)) {
                    deserializedNginxDeploymentWafPolicyProperties.content = reader.getBinary();
                } else if ("filepath".equals(fieldName)) {
                    deserializedNginxDeploymentWafPolicyProperties.filepath = reader.getString();
                } else if ("compilingState".equals(fieldName)) {
                    deserializedNginxDeploymentWafPolicyProperties.compilingState
                        = NginxDeploymentWafPolicyCompilingStatus.fromJson(reader);
                } else if ("applyingState".equals(fieldName)) {
                    deserializedNginxDeploymentWafPolicyProperties.applyingState
                        = NginxDeploymentWafPolicyApplyingStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxDeploymentWafPolicyProperties;
        });
    }
}
