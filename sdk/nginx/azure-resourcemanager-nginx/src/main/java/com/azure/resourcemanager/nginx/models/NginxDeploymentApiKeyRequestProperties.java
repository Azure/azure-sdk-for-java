// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The NginxDeploymentApiKeyRequestProperties model.
 */
@Fluent
public final class NginxDeploymentApiKeyRequestProperties
    implements JsonSerializable<NginxDeploymentApiKeyRequestProperties> {
    /*
     * Secret text to be used as a Dataplane API Key. This is a write only property that can never be read back, but the
     * first three characters will be returned in the 'hint' property.
     */
    private String secretText;

    /*
     * The time after which this Dataplane API Key is no longer valid.
     */
    private OffsetDateTime endDateTime;

    /**
     * Creates an instance of NginxDeploymentApiKeyRequestProperties class.
     */
    public NginxDeploymentApiKeyRequestProperties() {
    }

    /**
     * Get the secretText property: Secret text to be used as a Dataplane API Key. This is a write only property that
     * can never be read back, but the first three characters will be returned in the 'hint' property.
     * 
     * @return the secretText value.
     */
    public String secretText() {
        return this.secretText;
    }

    /**
     * Set the secretText property: Secret text to be used as a Dataplane API Key. This is a write only property that
     * can never be read back, but the first three characters will be returned in the 'hint' property.
     * 
     * @param secretText the secretText value to set.
     * @return the NginxDeploymentApiKeyRequestProperties object itself.
     */
    public NginxDeploymentApiKeyRequestProperties withSecretText(String secretText) {
        this.secretText = secretText;
        return this;
    }

    /**
     * Get the endDateTime property: The time after which this Dataplane API Key is no longer valid.
     * 
     * @return the endDateTime value.
     */
    public OffsetDateTime endDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: The time after which this Dataplane API Key is no longer valid.
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the NginxDeploymentApiKeyRequestProperties object itself.
     */
    public NginxDeploymentApiKeyRequestProperties withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretText", this.secretText);
        jsonWriter.writeStringField("endDateTime",
            this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxDeploymentApiKeyRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxDeploymentApiKeyRequestProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxDeploymentApiKeyRequestProperties.
     */
    public static NginxDeploymentApiKeyRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxDeploymentApiKeyRequestProperties deserializedNginxDeploymentApiKeyRequestProperties
                = new NginxDeploymentApiKeyRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretText".equals(fieldName)) {
                    deserializedNginxDeploymentApiKeyRequestProperties.secretText = reader.getString();
                } else if ("endDateTime".equals(fieldName)) {
                    deserializedNginxDeploymentApiKeyRequestProperties.endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxDeploymentApiKeyRequestProperties;
        });
    }
}
