// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Versions of the NGINX App Protect Web Application Firewall (WAF) components.
 */
@Fluent
public final class WebApplicationFirewallComponentVersions
    implements JsonSerializable<WebApplicationFirewallComponentVersions> {
    /*
     * The version of the NGINX App Protect Web Application Firewall (WAF) engine.
     */
    private String wafEngineVersion;

    /*
     * The version of the NGINX App Protect Web Application Firewall (WAF) module for NGINX.
     */
    private String wafNginxVersion;

    /**
     * Creates an instance of WebApplicationFirewallComponentVersions class.
     */
    public WebApplicationFirewallComponentVersions() {
    }

    /**
     * Get the wafEngineVersion property: The version of the NGINX App Protect Web Application Firewall (WAF) engine.
     * 
     * @return the wafEngineVersion value.
     */
    public String wafEngineVersion() {
        return this.wafEngineVersion;
    }

    /**
     * Set the wafEngineVersion property: The version of the NGINX App Protect Web Application Firewall (WAF) engine.
     * 
     * @param wafEngineVersion the wafEngineVersion value to set.
     * @return the WebApplicationFirewallComponentVersions object itself.
     */
    public WebApplicationFirewallComponentVersions withWafEngineVersion(String wafEngineVersion) {
        this.wafEngineVersion = wafEngineVersion;
        return this;
    }

    /**
     * Get the wafNginxVersion property: The version of the NGINX App Protect Web Application Firewall (WAF) module for
     * NGINX.
     * 
     * @return the wafNginxVersion value.
     */
    public String wafNginxVersion() {
        return this.wafNginxVersion;
    }

    /**
     * Set the wafNginxVersion property: The version of the NGINX App Protect Web Application Firewall (WAF) module for
     * NGINX.
     * 
     * @param wafNginxVersion the wafNginxVersion value to set.
     * @return the WebApplicationFirewallComponentVersions object itself.
     */
    public WebApplicationFirewallComponentVersions withWafNginxVersion(String wafNginxVersion) {
        this.wafNginxVersion = wafNginxVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (wafEngineVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property wafEngineVersion in model WebApplicationFirewallComponentVersions"));
        }
        if (wafNginxVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property wafNginxVersion in model WebApplicationFirewallComponentVersions"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebApplicationFirewallComponentVersions.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("wafEngineVersion", this.wafEngineVersion);
        jsonWriter.writeStringField("wafNginxVersion", this.wafNginxVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebApplicationFirewallComponentVersions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebApplicationFirewallComponentVersions if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebApplicationFirewallComponentVersions.
     */
    public static WebApplicationFirewallComponentVersions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebApplicationFirewallComponentVersions deserializedWebApplicationFirewallComponentVersions
                = new WebApplicationFirewallComponentVersions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("wafEngineVersion".equals(fieldName)) {
                    deserializedWebApplicationFirewallComponentVersions.wafEngineVersion = reader.getString();
                } else if ("wafNginxVersion".equals(fieldName)) {
                    deserializedWebApplicationFirewallComponentVersions.wafNginxVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebApplicationFirewallComponentVersions;
        });
    }
}
