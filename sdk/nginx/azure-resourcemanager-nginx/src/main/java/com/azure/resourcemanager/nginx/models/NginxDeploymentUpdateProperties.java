// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NginxDeploymentUpdateProperties model.
 */
@Fluent
public final class NginxDeploymentUpdateProperties implements JsonSerializable<NginxDeploymentUpdateProperties> {
    /*
     * The enableDiagnosticsSupport property.
     */
    private Boolean enableDiagnosticsSupport;

    /*
     * The logging property.
     */
    private NginxLogging logging;

    /*
     * Information on how the deployment will be scaled.
     */
    private NginxDeploymentScalingProperties scalingProperties;

    /*
     * The userProfile property.
     */
    private NginxDeploymentUserProfile userProfile;

    /*
     * Autoupgrade settings of a deployment.
     */
    private AutoUpgradeProfile autoUpgradeProfile;

    /**
     * Creates an instance of NginxDeploymentUpdateProperties class.
     */
    public NginxDeploymentUpdateProperties() {
    }

    /**
     * Get the enableDiagnosticsSupport property: The enableDiagnosticsSupport property.
     * 
     * @return the enableDiagnosticsSupport value.
     */
    public Boolean enableDiagnosticsSupport() {
        return this.enableDiagnosticsSupport;
    }

    /**
     * Set the enableDiagnosticsSupport property: The enableDiagnosticsSupport property.
     * 
     * @param enableDiagnosticsSupport the enableDiagnosticsSupport value to set.
     * @return the NginxDeploymentUpdateProperties object itself.
     */
    public NginxDeploymentUpdateProperties withEnableDiagnosticsSupport(Boolean enableDiagnosticsSupport) {
        this.enableDiagnosticsSupport = enableDiagnosticsSupport;
        return this;
    }

    /**
     * Get the logging property: The logging property.
     * 
     * @return the logging value.
     */
    public NginxLogging logging() {
        return this.logging;
    }

    /**
     * Set the logging property: The logging property.
     * 
     * @param logging the logging value to set.
     * @return the NginxDeploymentUpdateProperties object itself.
     */
    public NginxDeploymentUpdateProperties withLogging(NginxLogging logging) {
        this.logging = logging;
        return this;
    }

    /**
     * Get the scalingProperties property: Information on how the deployment will be scaled.
     * 
     * @return the scalingProperties value.
     */
    public NginxDeploymentScalingProperties scalingProperties() {
        return this.scalingProperties;
    }

    /**
     * Set the scalingProperties property: Information on how the deployment will be scaled.
     * 
     * @param scalingProperties the scalingProperties value to set.
     * @return the NginxDeploymentUpdateProperties object itself.
     */
    public NginxDeploymentUpdateProperties withScalingProperties(NginxDeploymentScalingProperties scalingProperties) {
        this.scalingProperties = scalingProperties;
        return this;
    }

    /**
     * Get the userProfile property: The userProfile property.
     * 
     * @return the userProfile value.
     */
    public NginxDeploymentUserProfile userProfile() {
        return this.userProfile;
    }

    /**
     * Set the userProfile property: The userProfile property.
     * 
     * @param userProfile the userProfile value to set.
     * @return the NginxDeploymentUpdateProperties object itself.
     */
    public NginxDeploymentUpdateProperties withUserProfile(NginxDeploymentUserProfile userProfile) {
        this.userProfile = userProfile;
        return this;
    }

    /**
     * Get the autoUpgradeProfile property: Autoupgrade settings of a deployment.
     * 
     * @return the autoUpgradeProfile value.
     */
    public AutoUpgradeProfile autoUpgradeProfile() {
        return this.autoUpgradeProfile;
    }

    /**
     * Set the autoUpgradeProfile property: Autoupgrade settings of a deployment.
     * 
     * @param autoUpgradeProfile the autoUpgradeProfile value to set.
     * @return the NginxDeploymentUpdateProperties object itself.
     */
    public NginxDeploymentUpdateProperties withAutoUpgradeProfile(AutoUpgradeProfile autoUpgradeProfile) {
        this.autoUpgradeProfile = autoUpgradeProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logging() != null) {
            logging().validate();
        }
        if (scalingProperties() != null) {
            scalingProperties().validate();
        }
        if (userProfile() != null) {
            userProfile().validate();
        }
        if (autoUpgradeProfile() != null) {
            autoUpgradeProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableDiagnosticsSupport", this.enableDiagnosticsSupport);
        jsonWriter.writeJsonField("logging", this.logging);
        jsonWriter.writeJsonField("scalingProperties", this.scalingProperties);
        jsonWriter.writeJsonField("userProfile", this.userProfile);
        jsonWriter.writeJsonField("autoUpgradeProfile", this.autoUpgradeProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxDeploymentUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxDeploymentUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxDeploymentUpdateProperties.
     */
    public static NginxDeploymentUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxDeploymentUpdateProperties deserializedNginxDeploymentUpdateProperties
                = new NginxDeploymentUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableDiagnosticsSupport".equals(fieldName)) {
                    deserializedNginxDeploymentUpdateProperties.enableDiagnosticsSupport
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("logging".equals(fieldName)) {
                    deserializedNginxDeploymentUpdateProperties.logging = NginxLogging.fromJson(reader);
                } else if ("scalingProperties".equals(fieldName)) {
                    deserializedNginxDeploymentUpdateProperties.scalingProperties
                        = NginxDeploymentScalingProperties.fromJson(reader);
                } else if ("userProfile".equals(fieldName)) {
                    deserializedNginxDeploymentUpdateProperties.userProfile
                        = NginxDeploymentUserProfile.fromJson(reader);
                } else if ("autoUpgradeProfile".equals(fieldName)) {
                    deserializedNginxDeploymentUpdateProperties.autoUpgradeProfile
                        = AutoUpgradeProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxDeploymentUpdateProperties;
        });
    }
}
