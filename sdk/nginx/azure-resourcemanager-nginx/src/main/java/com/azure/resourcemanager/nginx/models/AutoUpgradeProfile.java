// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Autoupgrade settings of a deployment.
 */
@Fluent
public final class AutoUpgradeProfile implements JsonSerializable<AutoUpgradeProfile> {
    /*
     * Channel used for autoupgrade.
     */
    private String upgradeChannel;

    /**
     * Creates an instance of AutoUpgradeProfile class.
     */
    public AutoUpgradeProfile() {
    }

    /**
     * Get the upgradeChannel property: Channel used for autoupgrade.
     * 
     * @return the upgradeChannel value.
     */
    public String upgradeChannel() {
        return this.upgradeChannel;
    }

    /**
     * Set the upgradeChannel property: Channel used for autoupgrade.
     * 
     * @param upgradeChannel the upgradeChannel value to set.
     * @return the AutoUpgradeProfile object itself.
     */
    public AutoUpgradeProfile withUpgradeChannel(String upgradeChannel) {
        this.upgradeChannel = upgradeChannel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (upgradeChannel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property upgradeChannel in model AutoUpgradeProfile"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutoUpgradeProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("upgradeChannel", this.upgradeChannel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoUpgradeProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoUpgradeProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutoUpgradeProfile.
     */
    public static AutoUpgradeProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoUpgradeProfile deserializedAutoUpgradeProfile = new AutoUpgradeProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("upgradeChannel".equals(fieldName)) {
                    deserializedAutoUpgradeProfile.upgradeChannel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoUpgradeProfile;
        });
    }
}
