// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.nginx.fluent.WafPoliciesClient;
import com.azure.resourcemanager.nginx.fluent.models.NginxDeploymentWafPolicyInner;
import com.azure.resourcemanager.nginx.fluent.models.NginxDeploymentWafPolicyMetadataInner;
import com.azure.resourcemanager.nginx.models.NginxDeploymentWafPolicy;
import com.azure.resourcemanager.nginx.models.NginxDeploymentWafPolicyMetadata;
import com.azure.resourcemanager.nginx.models.WafPolicies;

public final class WafPoliciesImpl implements WafPolicies {
    private static final ClientLogger LOGGER = new ClientLogger(WafPoliciesImpl.class);

    private final WafPoliciesClient innerClient;

    private final com.azure.resourcemanager.nginx.NginxManager serviceManager;

    public WafPoliciesImpl(WafPoliciesClient innerClient, com.azure.resourcemanager.nginx.NginxManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<NginxDeploymentWafPolicyMetadata> list(String resourceGroupName, String deploymentName) {
        PagedIterable<NginxDeploymentWafPolicyMetadataInner> inner
            = this.serviceClient().list(resourceGroupName, deploymentName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new NginxDeploymentWafPolicyMetadataImpl(inner1, this.manager()));
    }

    public PagedIterable<NginxDeploymentWafPolicyMetadata> list(String resourceGroupName, String deploymentName,
        Context context) {
        PagedIterable<NginxDeploymentWafPolicyMetadataInner> inner
            = this.serviceClient().list(resourceGroupName, deploymentName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new NginxDeploymentWafPolicyMetadataImpl(inner1, this.manager()));
    }

    public Response<NginxDeploymentWafPolicy> getWithResponse(String resourceGroupName, String deploymentName,
        String wafPolicyName, Context context) {
        Response<NginxDeploymentWafPolicyInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, deploymentName, wafPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NginxDeploymentWafPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NginxDeploymentWafPolicy get(String resourceGroupName, String deploymentName, String wafPolicyName) {
        NginxDeploymentWafPolicyInner inner
            = this.serviceClient().get(resourceGroupName, deploymentName, wafPolicyName);
        if (inner != null) {
            return new NginxDeploymentWafPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String deploymentName, String wafPolicyName) {
        this.serviceClient().delete(resourceGroupName, deploymentName, wafPolicyName);
    }

    public void delete(String resourceGroupName, String deploymentName, String wafPolicyName, Context context) {
        this.serviceClient().delete(resourceGroupName, deploymentName, wafPolicyName, context);
    }

    public NginxDeploymentWafPolicy getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "nginxDeployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nginxDeployments'.", id)));
        }
        String wafPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "wafPolicies");
        if (wafPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'wafPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, deploymentName, wafPolicyName, Context.NONE).getValue();
    }

    public Response<NginxDeploymentWafPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "nginxDeployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nginxDeployments'.", id)));
        }
        String wafPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "wafPolicies");
        if (wafPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'wafPolicies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, deploymentName, wafPolicyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "nginxDeployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nginxDeployments'.", id)));
        }
        String wafPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "wafPolicies");
        if (wafPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'wafPolicies'.", id)));
        }
        this.delete(resourceGroupName, deploymentName, wafPolicyName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String deploymentName = ResourceManagerUtils.getValueFromIdByName(id, "nginxDeployments");
        if (deploymentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nginxDeployments'.", id)));
        }
        String wafPolicyName = ResourceManagerUtils.getValueFromIdByName(id, "wafPolicies");
        if (wafPolicyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'wafPolicies'.", id)));
        }
        this.delete(resourceGroupName, deploymentName, wafPolicyName, context);
    }

    private WafPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.nginx.NginxManager manager() {
        return this.serviceManager;
    }

    public NginxDeploymentWafPolicyImpl define(String name) {
        return new NginxDeploymentWafPolicyImpl(name, this.manager());
    }
}
