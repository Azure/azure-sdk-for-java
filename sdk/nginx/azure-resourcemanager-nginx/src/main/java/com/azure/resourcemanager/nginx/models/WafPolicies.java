// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of WafPolicies.
 */
public interface WafPolicies {
    /**
     * List Waf Policies of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return nginx Deployment Waf Policy List Response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NginxDeploymentWafPolicyMetadata> list(String resourceGroupName, String deploymentName);

    /**
     * List Waf Policies of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return nginx Deployment Waf Policy List Response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NginxDeploymentWafPolicyMetadata> list(String resourceGroupName, String deploymentName,
        Context context);

    /**
     * Get the Nginx Waf Policy of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Nginx Waf Policy of given Nginx deployment along with {@link Response}.
     */
    Response<NginxDeploymentWafPolicy> getWithResponse(String resourceGroupName, String deploymentName,
        String wafPolicyName, Context context);

    /**
     * Get the Nginx Waf Policy of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Nginx Waf Policy of given Nginx deployment.
     */
    NginxDeploymentWafPolicy get(String resourceGroupName, String deploymentName, String wafPolicyName);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String deploymentName, String wafPolicyName);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String deploymentName, String wafPolicyName, Context context);

    /**
     * Get the Nginx Waf Policy of given Nginx deployment.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Nginx Waf Policy of given Nginx deployment along with {@link Response}.
     */
    NginxDeploymentWafPolicy getById(String id);

    /**
     * Get the Nginx Waf Policy of given Nginx deployment.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Nginx Waf Policy of given Nginx deployment along with {@link Response}.
     */
    Response<NginxDeploymentWafPolicy> getByIdWithResponse(String id, Context context);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new NginxDeploymentWafPolicy resource.
     * 
     * @param name resource name.
     * @return the first stage of the new NginxDeploymentWafPolicy definition.
     */
    NginxDeploymentWafPolicy.DefinitionStages.Blank define(String name);
}
