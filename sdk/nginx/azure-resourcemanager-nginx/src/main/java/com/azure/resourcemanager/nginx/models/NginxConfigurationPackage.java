// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The NginxConfigurationPackage model.
 */
@Fluent
public final class NginxConfigurationPackage implements JsonSerializable<NginxConfigurationPackage> {
    /*
     * The data property.
     */
    private String data;

    /*
     * The protectedFiles property.
     */
    private List<String> protectedFiles;

    /**
     * Creates an instance of NginxConfigurationPackage class.
     */
    public NginxConfigurationPackage() {
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    public String data() {
        return this.data;
    }

    /**
     * Set the data property: The data property.
     * 
     * @param data the data value to set.
     * @return the NginxConfigurationPackage object itself.
     */
    public NginxConfigurationPackage withData(String data) {
        this.data = data;
        return this;
    }

    /**
     * Get the protectedFiles property: The protectedFiles property.
     * 
     * @return the protectedFiles value.
     */
    public List<String> protectedFiles() {
        return this.protectedFiles;
    }

    /**
     * Set the protectedFiles property: The protectedFiles property.
     * 
     * @param protectedFiles the protectedFiles value to set.
     * @return the NginxConfigurationPackage object itself.
     */
    public NginxConfigurationPackage withProtectedFiles(List<String> protectedFiles) {
        this.protectedFiles = protectedFiles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("data", this.data);
        jsonWriter.writeArrayField("protectedFiles", this.protectedFiles,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationPackage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationPackage if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxConfigurationPackage.
     */
    public static NginxConfigurationPackage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationPackage deserializedNginxConfigurationPackage = new NginxConfigurationPackage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    deserializedNginxConfigurationPackage.data = reader.getString();
                } else if ("protectedFiles".equals(fieldName)) {
                    List<String> protectedFiles = reader.readArray(reader1 -> reader1.getString());
                    deserializedNginxConfigurationPackage.protectedFiles = protectedFiles;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationPackage;
        });
    }
}
