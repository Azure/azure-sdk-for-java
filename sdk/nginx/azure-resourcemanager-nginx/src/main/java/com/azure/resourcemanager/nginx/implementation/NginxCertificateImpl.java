// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.nginx.fluent.models.NginxCertificateInner;
import com.azure.resourcemanager.nginx.models.NginxCertificate;
import com.azure.resourcemanager.nginx.models.NginxCertificateProperties;
import java.util.Collections;
import java.util.Map;

public final class NginxCertificateImpl
    implements NginxCertificate, NginxCertificate.Definition, NginxCertificate.Update {
    private NginxCertificateInner innerObject;

    private final com.azure.resourcemanager.nginx.NginxManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public NginxCertificateProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NginxCertificateInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.nginx.NginxManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String deploymentName;

    private String certificateName;

    public NginxCertificateImpl withExistingNginxDeployment(String resourceGroupName, String deploymentName) {
        this.resourceGroupName = resourceGroupName;
        this.deploymentName = deploymentName;
        return this;
    }

    public NginxCertificate create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), Context.NONE);
        return this;
    }

    public NginxCertificate create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), context);
        return this;
    }

    NginxCertificateImpl(String name, com.azure.resourcemanager.nginx.NginxManager serviceManager) {
        this.innerObject = new NginxCertificateInner();
        this.serviceManager = serviceManager;
        this.certificateName = name;
    }

    public NginxCertificateImpl update() {
        return this;
    }

    public NginxCertificate apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), Context.NONE);
        return this;
    }

    public NginxCertificate apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), context);
        return this;
    }

    NginxCertificateImpl(
        NginxCertificateInner innerObject, com.azure.resourcemanager.nginx.NginxManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.deploymentName = Utils.getValueFromIdByName(innerObject.id(), "nginxDeployments");
        this.certificateName = Utils.getValueFromIdByName(innerObject.id(), "certificates");
    }

    public NginxCertificate refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .getWithResponse(resourceGroupName, deploymentName, certificateName, Context.NONE)
                .getValue();
        return this;
    }

    public NginxCertificate refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCertificates()
                .getWithResponse(resourceGroupName, deploymentName, certificateName, context)
                .getValue();
        return this;
    }

    public NginxCertificateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NginxCertificateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NginxCertificateImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public NginxCertificateImpl withProperties(NginxCertificateProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
