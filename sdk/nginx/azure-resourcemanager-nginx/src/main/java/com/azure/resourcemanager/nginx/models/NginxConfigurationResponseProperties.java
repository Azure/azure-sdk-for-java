// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Nginx Configuration Response Properties.
 */
@Immutable
public final class NginxConfigurationResponseProperties
    implements JsonSerializable<NginxConfigurationResponseProperties> {
    /*
     * Provisioning State
     */
    private ProvisioningState provisioningState;

    /*
     * The files property.
     */
    private List<NginxConfigurationFile> files;

    /*
     * The protectedFiles property.
     */
    private List<NginxConfigurationProtectedFileResponse> protectedFiles;

    /*
     * Nginx Configuration Package
     */
    private NginxConfigurationPackage packageProperty;

    /*
     * The rootFile property.
     */
    private String rootFile;

    /**
     * Creates an instance of NginxConfigurationResponseProperties class.
     */
    private NginxConfigurationResponseProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the files property: The files property.
     * 
     * @return the files value.
     */
    public List<NginxConfigurationFile> files() {
        return this.files;
    }

    /**
     * Get the protectedFiles property: The protectedFiles property.
     * 
     * @return the protectedFiles value.
     */
    public List<NginxConfigurationProtectedFileResponse> protectedFiles() {
        return this.protectedFiles;
    }

    /**
     * Get the packageProperty property: Nginx Configuration Package.
     * 
     * @return the packageProperty value.
     */
    public NginxConfigurationPackage packageProperty() {
        return this.packageProperty;
    }

    /**
     * Get the rootFile property: The rootFile property.
     * 
     * @return the rootFile value.
     */
    public String rootFile() {
        return this.rootFile;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("files", this.files, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("protectedFiles", this.protectedFiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("package", this.packageProperty);
        jsonWriter.writeStringField("rootFile", this.rootFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationResponseProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxConfigurationResponseProperties.
     */
    public static NginxConfigurationResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationResponseProperties deserializedNginxConfigurationResponseProperties
                = new NginxConfigurationResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedNginxConfigurationResponseProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("files".equals(fieldName)) {
                    List<NginxConfigurationFile> files
                        = reader.readArray(reader1 -> NginxConfigurationFile.fromJson(reader1));
                    deserializedNginxConfigurationResponseProperties.files = files;
                } else if ("protectedFiles".equals(fieldName)) {
                    List<NginxConfigurationProtectedFileResponse> protectedFiles
                        = reader.readArray(reader1 -> NginxConfigurationProtectedFileResponse.fromJson(reader1));
                    deserializedNginxConfigurationResponseProperties.protectedFiles = protectedFiles;
                } else if ("package".equals(fieldName)) {
                    deserializedNginxConfigurationResponseProperties.packageProperty
                        = NginxConfigurationPackage.fromJson(reader);
                } else if ("rootFile".equals(fieldName)) {
                    deserializedNginxConfigurationResponseProperties.rootFile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationResponseProperties;
        });
    }
}
