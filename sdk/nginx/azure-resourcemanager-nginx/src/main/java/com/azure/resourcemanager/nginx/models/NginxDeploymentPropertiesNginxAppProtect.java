// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings for NGINX App Protect (NAP).
 */
@Fluent
public final class NginxDeploymentPropertiesNginxAppProtect
    implements JsonSerializable<NginxDeploymentPropertiesNginxAppProtect> {
    /*
     * Settings for the NGINX App Protect Web Application Firewall (WAF)
     */
    private WebApplicationFirewallSettings webApplicationFirewallSettings;

    /*
     * The status of the NGINX App Protect Web Application Firewall
     */
    private WebApplicationFirewallStatus webApplicationFirewallStatus;

    /**
     * Creates an instance of NginxDeploymentPropertiesNginxAppProtect class.
     */
    public NginxDeploymentPropertiesNginxAppProtect() {
    }

    /**
     * Get the webApplicationFirewallSettings property: Settings for the NGINX App Protect Web Application Firewall
     * (WAF).
     * 
     * @return the webApplicationFirewallSettings value.
     */
    public WebApplicationFirewallSettings webApplicationFirewallSettings() {
        return this.webApplicationFirewallSettings;
    }

    /**
     * Set the webApplicationFirewallSettings property: Settings for the NGINX App Protect Web Application Firewall
     * (WAF).
     * 
     * @param webApplicationFirewallSettings the webApplicationFirewallSettings value to set.
     * @return the NginxDeploymentPropertiesNginxAppProtect object itself.
     */
    public NginxDeploymentPropertiesNginxAppProtect
        withWebApplicationFirewallSettings(WebApplicationFirewallSettings webApplicationFirewallSettings) {
        this.webApplicationFirewallSettings = webApplicationFirewallSettings;
        return this;
    }

    /**
     * Get the webApplicationFirewallStatus property: The status of the NGINX App Protect Web Application Firewall.
     * 
     * @return the webApplicationFirewallStatus value.
     */
    public WebApplicationFirewallStatus webApplicationFirewallStatus() {
        return this.webApplicationFirewallStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (webApplicationFirewallSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property webApplicationFirewallSettings in model NginxDeploymentPropertiesNginxAppProtect"));
        } else {
            webApplicationFirewallSettings().validate();
        }
        if (webApplicationFirewallStatus() != null) {
            webApplicationFirewallStatus().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NginxDeploymentPropertiesNginxAppProtect.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("webApplicationFirewallSettings", this.webApplicationFirewallSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxDeploymentPropertiesNginxAppProtect from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxDeploymentPropertiesNginxAppProtect if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NginxDeploymentPropertiesNginxAppProtect.
     */
    public static NginxDeploymentPropertiesNginxAppProtect fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxDeploymentPropertiesNginxAppProtect deserializedNginxDeploymentPropertiesNginxAppProtect
                = new NginxDeploymentPropertiesNginxAppProtect();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webApplicationFirewallSettings".equals(fieldName)) {
                    deserializedNginxDeploymentPropertiesNginxAppProtect.webApplicationFirewallSettings
                        = WebApplicationFirewallSettings.fromJson(reader);
                } else if ("webApplicationFirewallStatus".equals(fieldName)) {
                    deserializedNginxDeploymentPropertiesNginxAppProtect.webApplicationFirewallStatus
                        = WebApplicationFirewallStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxDeploymentPropertiesNginxAppProtect;
        });
    }
}
