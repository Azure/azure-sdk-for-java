// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.nginx.fluent.models.NginxDeploymentWafPolicyInner;
import com.azure.resourcemanager.nginx.fluent.models.NginxDeploymentWafPolicyMetadataInner;

/**
 * An instance of this class provides access to all the operations defined in WafPoliciesClient.
 */
public interface WafPoliciesClient {
    /**
     * List Waf Policies of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return nginx Deployment Waf Policy List Response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NginxDeploymentWafPolicyMetadataInner> list(String resourceGroupName, String deploymentName);

    /**
     * List Waf Policies of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return nginx Deployment Waf Policy List Response as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NginxDeploymentWafPolicyMetadataInner> list(String resourceGroupName, String deploymentName,
        Context context);

    /**
     * Get the Nginx Waf Policy of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Nginx Waf Policy of given Nginx deployment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NginxDeploymentWafPolicyInner> getWithResponse(String resourceGroupName, String deploymentName,
        String wafPolicyName, Context context);

    /**
     * Get the Nginx Waf Policy of given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Nginx Waf Policy of given Nginx deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NginxDeploymentWafPolicyInner get(String resourceGroupName, String deploymentName, String wafPolicyName);

    /**
     * Create or update the Nginx Waf Policy for given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of nginx Deployment Waf Policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NginxDeploymentWafPolicyInner>, NginxDeploymentWafPolicyInner>
        beginCreate(String resourceGroupName, String deploymentName, String wafPolicyName);

    /**
     * Create or update the Nginx Waf Policy for given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @param body The Nginx Deployment Waf Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of nginx Deployment Waf Policy.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NginxDeploymentWafPolicyInner>, NginxDeploymentWafPolicyInner> beginCreate(
        String resourceGroupName, String deploymentName, String wafPolicyName, NginxDeploymentWafPolicyInner body,
        Context context);

    /**
     * Create or update the Nginx Waf Policy for given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return nginx Deployment Waf Policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NginxDeploymentWafPolicyInner create(String resourceGroupName, String deploymentName, String wafPolicyName);

    /**
     * Create or update the Nginx Waf Policy for given Nginx deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @param body The Nginx Deployment Waf Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return nginx Deployment Waf Policy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NginxDeploymentWafPolicyInner create(String resourceGroupName, String deploymentName, String wafPolicyName,
        NginxDeploymentWafPolicyInner body, Context context);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String deploymentName,
        String wafPolicyName);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String deploymentName,
        String wafPolicyName, Context context);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String deploymentName, String wafPolicyName);

    /**
     * Reset the Nginx Waf Policy of given Nginx deployment to default.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of targeted NGINX deployment.
     * @param wafPolicyName The name of Waf Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String deploymentName, String wafPolicyName, Context context);
}
