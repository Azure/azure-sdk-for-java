// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The NginxFrontendIpConfiguration model.
 */
@Fluent
public final class NginxFrontendIpConfiguration implements JsonSerializable<NginxFrontendIpConfiguration> {
    /*
     * The publicIPAddresses property.
     */
    private List<NginxPublicIpAddress> publicIpAddresses;

    /*
     * The privateIPAddresses property.
     */
    private List<NginxPrivateIpAddress> privateIpAddresses;

    /**
     * Creates an instance of NginxFrontendIpConfiguration class.
     */
    public NginxFrontendIpConfiguration() {
    }

    /**
     * Get the publicIpAddresses property: The publicIPAddresses property.
     * 
     * @return the publicIpAddresses value.
     */
    public List<NginxPublicIpAddress> publicIpAddresses() {
        return this.publicIpAddresses;
    }

    /**
     * Set the publicIpAddresses property: The publicIPAddresses property.
     * 
     * @param publicIpAddresses the publicIpAddresses value to set.
     * @return the NginxFrontendIpConfiguration object itself.
     */
    public NginxFrontendIpConfiguration withPublicIpAddresses(List<NginxPublicIpAddress> publicIpAddresses) {
        this.publicIpAddresses = publicIpAddresses;
        return this;
    }

    /**
     * Get the privateIpAddresses property: The privateIPAddresses property.
     * 
     * @return the privateIpAddresses value.
     */
    public List<NginxPrivateIpAddress> privateIpAddresses() {
        return this.privateIpAddresses;
    }

    /**
     * Set the privateIpAddresses property: The privateIPAddresses property.
     * 
     * @param privateIpAddresses the privateIpAddresses value to set.
     * @return the NginxFrontendIpConfiguration object itself.
     */
    public NginxFrontendIpConfiguration withPrivateIpAddresses(List<NginxPrivateIpAddress> privateIpAddresses) {
        this.privateIpAddresses = privateIpAddresses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publicIpAddresses() != null) {
            publicIpAddresses().forEach(e -> e.validate());
        }
        if (privateIpAddresses() != null) {
            privateIpAddresses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("publicIPAddresses", this.publicIpAddresses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("privateIPAddresses", this.privateIpAddresses,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxFrontendIpConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxFrontendIpConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NginxFrontendIpConfiguration.
     */
    public static NginxFrontendIpConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxFrontendIpConfiguration deserializedNginxFrontendIpConfiguration = new NginxFrontendIpConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publicIPAddresses".equals(fieldName)) {
                    List<NginxPublicIpAddress> publicIpAddresses
                        = reader.readArray(reader1 -> NginxPublicIpAddress.fromJson(reader1));
                    deserializedNginxFrontendIpConfiguration.publicIpAddresses = publicIpAddresses;
                } else if ("privateIPAddresses".equals(fieldName)) {
                    List<NginxPrivateIpAddress> privateIpAddresses
                        = reader.readArray(reader1 -> NginxPrivateIpAddress.fromJson(reader1));
                    deserializedNginxFrontendIpConfiguration.privateIpAddresses = privateIpAddresses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxFrontendIpConfiguration;
        });
    }
}
