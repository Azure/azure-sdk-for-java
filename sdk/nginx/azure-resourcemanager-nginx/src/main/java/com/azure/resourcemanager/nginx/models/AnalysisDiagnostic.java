// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An error object found during the analysis of an NGINX configuration.
 */
@Immutable
public final class AnalysisDiagnostic implements JsonSerializable<AnalysisDiagnostic> {
    /*
     * Unique identifier for the error
     */
    private String id;

    /*
     * The directive property.
     */
    private String directive;

    /*
     * The description property.
     */
    private String description;

    /*
     * the filepath of the most relevant config file
     */
    private String file;

    /*
     * The line property.
     */
    private double line;

    /*
     * The message property.
     */
    private String message;

    /*
     * The rule property.
     */
    private String rule;

    /**
     * Creates an instance of AnalysisDiagnostic class.
     */
    private AnalysisDiagnostic() {
    }

    /**
     * Get the id property: Unique identifier for the error.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the directive property: The directive property.
     * 
     * @return the directive value.
     */
    public String directive() {
        return this.directive;
    }

    /**
     * Get the description property: The description property.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the file property: the filepath of the most relevant config file.
     * 
     * @return the file value.
     */
    public String file() {
        return this.file;
    }

    /**
     * Get the line property: The line property.
     * 
     * @return the line value.
     */
    public double line() {
        return this.line;
    }

    /**
     * Get the message property: The message property.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the rule property: The rule property.
     * 
     * @return the rule value.
     */
    public String rule() {
        return this.rule;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("directive", this.directive);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("file", this.file);
        jsonWriter.writeDoubleField("line", this.line);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("rule", this.rule);
        jsonWriter.writeStringField("id", this.id);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalysisDiagnostic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalysisDiagnostic if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalysisDiagnostic.
     */
    public static AnalysisDiagnostic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalysisDiagnostic deserializedAnalysisDiagnostic = new AnalysisDiagnostic();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("directive".equals(fieldName)) {
                    deserializedAnalysisDiagnostic.directive = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAnalysisDiagnostic.description = reader.getString();
                } else if ("file".equals(fieldName)) {
                    deserializedAnalysisDiagnostic.file = reader.getString();
                } else if ("line".equals(fieldName)) {
                    deserializedAnalysisDiagnostic.line = reader.getDouble();
                } else if ("message".equals(fieldName)) {
                    deserializedAnalysisDiagnostic.message = reader.getString();
                } else if ("rule".equals(fieldName)) {
                    deserializedAnalysisDiagnostic.rule = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedAnalysisDiagnostic.id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalysisDiagnostic;
        });
    }
}
