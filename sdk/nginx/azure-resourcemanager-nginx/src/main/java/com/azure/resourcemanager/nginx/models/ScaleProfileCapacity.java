// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The capacity parameters of the profile.
 */
@Fluent
public final class ScaleProfileCapacity implements JsonSerializable<ScaleProfileCapacity> {
    /*
     * The minimum number of NCUs the deployment can be autoscaled to.
     */
    private int min;

    /*
     * The maximum number of NCUs the deployment can be autoscaled to.
     */
    private int max;

    /**
     * Creates an instance of ScaleProfileCapacity class.
     */
    public ScaleProfileCapacity() {
    }

    /**
     * Get the min property: The minimum number of NCUs the deployment can be autoscaled to.
     * 
     * @return the min value.
     */
    public int min() {
        return this.min;
    }

    /**
     * Set the min property: The minimum number of NCUs the deployment can be autoscaled to.
     * 
     * @param min the min value to set.
     * @return the ScaleProfileCapacity object itself.
     */
    public ScaleProfileCapacity withMin(int min) {
        this.min = min;
        return this;
    }

    /**
     * Get the max property: The maximum number of NCUs the deployment can be autoscaled to.
     * 
     * @return the max value.
     */
    public int max() {
        return this.max;
    }

    /**
     * Set the max property: The maximum number of NCUs the deployment can be autoscaled to.
     * 
     * @param max the max value to set.
     * @return the ScaleProfileCapacity object itself.
     */
    public ScaleProfileCapacity withMax(int max) {
        this.max = max;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("min", this.min);
        jsonWriter.writeIntField("max", this.max);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScaleProfileCapacity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScaleProfileCapacity if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScaleProfileCapacity.
     */
    public static ScaleProfileCapacity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScaleProfileCapacity deserializedScaleProfileCapacity = new ScaleProfileCapacity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("min".equals(fieldName)) {
                    deserializedScaleProfileCapacity.min = reader.getInt();
                } else if ("max".equals(fieldName)) {
                    deserializedScaleProfileCapacity.max = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScaleProfileCapacity;
        });
    }
}
