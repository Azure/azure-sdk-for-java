// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.NginxConfigurationResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"NotSpecified\",\"files\":[{\"content\":\"kycgrauwj\",\"virtualPath\":\"taeburuvdm\"}],\"protectedFiles\":[{\"virtualPath\":\"zlxwabmqoefkifr\",\"contentHash\":\"puqujmqlgkfbtn\"}],\"package\":{\"data\":\"ongbjcnt\",\"protectedFiles\":[\"tcje\"]},\"rootFile\":\"twwaezkojvdcpzf\"},\"id\":\"ouicybxarzgszu\",\"name\":\"oxciqopidoamcio\",\"type\":\"hkh\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NginxManager manager = NginxManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<NginxConfigurationResponse> response
            = manager.configurations().list("bgdknnqv", "aznqntoru", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kycgrauwj", response.iterator().next().properties().files().get(0).content());
        Assertions.assertEquals("taeburuvdm", response.iterator().next().properties().files().get(0).virtualPath());
        Assertions.assertEquals("zlxwabmqoefkifr",
            response.iterator().next().properties().protectedFiles().get(0).virtualPath());
        Assertions.assertEquals("puqujmqlgkfbtn",
            response.iterator().next().properties().protectedFiles().get(0).contentHash());
        Assertions.assertEquals("ongbjcnt", response.iterator().next().properties().packageProperty().data());
        Assertions.assertEquals("tcje",
            response.iterator().next().properties().packageProperty().protectedFiles().get(0));
        Assertions.assertEquals("twwaezkojvdcpzf", response.iterator().next().properties().rootFile());
    }
}
