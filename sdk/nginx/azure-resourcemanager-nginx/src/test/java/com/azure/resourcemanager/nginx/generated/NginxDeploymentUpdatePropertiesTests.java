// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.ActivationState;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdateProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdatePropertiesNginxAppProtect;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.WebApplicationFirewallSettings;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentUpdateProperties model = BinaryData.fromString(
            "{\"enableDiagnosticsSupport\":false,\"logging\":{\"storageAccount\":{\"accountName\":\"t\",\"containerName\":\"n\"}},\"scalingProperties\":{\"capacity\":63177450,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"bczw\",\"capacity\":{\"min\":1309614398,\"max\":1414548234}},{\"name\":\"wiqzbqjvsovmyo\",\"capacity\":{\"min\":1778259828,\"max\":1882721753}},{\"name\":\"spkwlhzdobpxjm\",\"capacity\":{\"min\":288850807,\"max\":967687966}}]}},\"userProfile\":{\"preferredEmail\":\"nchrkcciww\"},\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{\"id\":\"rsa\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"uo\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"ghsauuimjmvxied\"},{\"privateIPAddress\":\"gidyjrrf\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"svexcsonpclhoco\"},{\"privateIPAddress\":\"lkevle\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"buhfmvfaxkffeiit\"},{\"privateIPAddress\":\"vmezy\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"mzsb\"}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"ggi\"}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"xwburvjxxjns\"},\"nginxAppProtect\":{\"webApplicationFirewallSettings\":{\"activationState\":\"Enabled\"}}}")
            .toObject(NginxDeploymentUpdateProperties.class);
        Assertions.assertFalse(model.enableDiagnosticsSupport());
        Assertions.assertEquals("t", model.logging().storageAccount().accountName());
        Assertions.assertEquals("n", model.logging().storageAccount().containerName());
        Assertions.assertEquals(63177450, model.scalingProperties().capacity());
        Assertions.assertEquals("bczw", model.scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1309614398, model.scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(1414548234, model.scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("nchrkcciww", model.userProfile().preferredEmail());
        Assertions.assertEquals("rsa",
            model.networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("uo",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("ghsauuimjmvxied",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("ggi", model.networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals("xwburvjxxjns", model.autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals(ActivationState.ENABLED,
            model.nginxAppProtect().webApplicationFirewallSettings().activationState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentUpdateProperties model
            = new NginxDeploymentUpdateProperties().withEnableDiagnosticsSupport(false)
                .withLogging(new NginxLogging()
                    .withStorageAccount(new NginxStorageAccount().withAccountName("t").withContainerName("n")))
                .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(63177450)
                    .withProfiles(Arrays.asList(
                        new ScaleProfile().withName("bczw")
                            .withCapacity(new ScaleProfileCapacity().withMin(1309614398).withMax(1414548234)),
                        new ScaleProfile().withName("wiqzbqjvsovmyo")
                            .withCapacity(new ScaleProfileCapacity().withMin(1778259828).withMax(1882721753)),
                        new ScaleProfile().withName("spkwlhzdobpxjm")
                            .withCapacity(new ScaleProfileCapacity().withMin(288850807).withMax(967687966)))))
                .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("nchrkcciww"))
                .withNetworkProfile(new NginxNetworkProfile()
                    .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration()
                        .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress().withId("rsa")))
                        .withPrivateIpAddresses(Arrays.asList(
                            new NginxPrivateIpAddress().withPrivateIpAddress("uo")
                                .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.DYNAMIC)
                                .withSubnetId("ghsauuimjmvxied"),
                            new NginxPrivateIpAddress().withPrivateIpAddress("gidyjrrf")
                                .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                                .withSubnetId("svexcsonpclhoco"),
                            new NginxPrivateIpAddress().withPrivateIpAddress("lkevle")
                                .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                                .withSubnetId("buhfmvfaxkffeiit"),
                            new NginxPrivateIpAddress().withPrivateIpAddress("vmezy")
                                .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.DYNAMIC)
                                .withSubnetId("mzsb"))))
                    .withNetworkInterfaceConfiguration(new NginxNetworkInterfaceConfiguration().withSubnetId("ggi")))
                .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("xwburvjxxjns"))
                .withNginxAppProtect(
                    new NginxDeploymentUpdatePropertiesNginxAppProtect().withWebApplicationFirewallSettings(
                        new WebApplicationFirewallSettings().withActivationState(ActivationState.ENABLED)));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentUpdateProperties.class);
        Assertions.assertFalse(model.enableDiagnosticsSupport());
        Assertions.assertEquals("t", model.logging().storageAccount().accountName());
        Assertions.assertEquals("n", model.logging().storageAccount().containerName());
        Assertions.assertEquals(63177450, model.scalingProperties().capacity());
        Assertions.assertEquals("bczw", model.scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1309614398, model.scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(1414548234, model.scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("nchrkcciww", model.userProfile().preferredEmail());
        Assertions.assertEquals("rsa",
            model.networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("uo",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("ghsauuimjmvxied",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("ggi", model.networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals("xwburvjxxjns", model.autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals(ActivationState.ENABLED,
            model.nginxAppProtect().webApplicationFirewallSettings().activationState());
    }
}
