// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NginxFrontendIpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxFrontendIpConfiguration model = BinaryData.fromString(
            "{\"publicIPAddresses\":[{\"id\":\"nzwdejba\"},{\"id\":\"rxzdmohctbqvudwx\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"vo\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"jugwdkcglhsl\"},{\"privateIPAddress\":\"jdyggdtji\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"uofqwe\"}]}")
            .toObject(NginxFrontendIpConfiguration.class);
        Assertions.assertEquals("nzwdejba", model.publicIpAddresses().get(0).id());
        Assertions.assertEquals("vo", model.privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("jugwdkcglhsl", model.privateIpAddresses().get(0).subnetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxFrontendIpConfiguration model = new NginxFrontendIpConfiguration()
            .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress().withId("nzwdejba"),
                new NginxPublicIpAddress().withId("rxzdmohctbqvudwx")))
            .withPrivateIpAddresses(Arrays.asList(
                new NginxPrivateIpAddress().withPrivateIpAddress("vo")
                    .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.DYNAMIC)
                    .withSubnetId("jugwdkcglhsl"),
                new NginxPrivateIpAddress().withPrivateIpAddress("jdyggdtji")
                    .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                    .withSubnetId("uofqwe")));
        model = BinaryData.fromObject(model).toObject(NginxFrontendIpConfiguration.class);
        Assertions.assertEquals("nzwdejba", model.publicIpAddresses().get(0).id());
        Assertions.assertEquals("vo", model.privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("jugwdkcglhsl", model.privateIpAddresses().get(0).subnetId());
    }
}
