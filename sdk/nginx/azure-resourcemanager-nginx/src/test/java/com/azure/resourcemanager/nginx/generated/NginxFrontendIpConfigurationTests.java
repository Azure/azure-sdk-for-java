// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NginxFrontendIpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxFrontendIpConfiguration model = BinaryData.fromString(
            "{\"publicIPAddresses\":[{\"id\":\"bl\"},{\"id\":\"gpbtoqcjmklj\"},{\"id\":\"bqidtqaj\"},{\"id\":\"ulpkudjkrl\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"hfepgzgqex\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"xscpaierhhbc\"},{\"privateIPAddress\":\"l\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"jtjaodxobnbdxkq\"},{\"privateIPAddress\":\"okaj\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"imexgstxgcpodgma\"},{\"privateIPAddress\":\"r\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"wzrlovmclwhij\"}]}")
            .toObject(NginxFrontendIpConfiguration.class);
        Assertions.assertEquals("bl", model.publicIpAddresses().get(0).id());
        Assertions.assertEquals("hfepgzgqex", model.privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("xscpaierhhbc", model.privateIpAddresses().get(0).subnetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxFrontendIpConfiguration model = new NginxFrontendIpConfiguration()
            .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress().withId("bl"),
                new NginxPublicIpAddress().withId("gpbtoqcjmklj"), new NginxPublicIpAddress().withId("bqidtqaj"),
                new NginxPublicIpAddress().withId("ulpkudjkrl")))
            .withPrivateIpAddresses(Arrays.asList(
                new NginxPrivateIpAddress().withPrivateIpAddress("hfepgzgqex")
                    .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.DYNAMIC)
                    .withSubnetId("xscpaierhhbc"),
                new NginxPrivateIpAddress().withPrivateIpAddress("l")
                    .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                    .withSubnetId("jtjaodxobnbdxkq"),
                new NginxPrivateIpAddress().withPrivateIpAddress("okaj")
                    .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                    .withSubnetId("imexgstxgcpodgma"),
                new NginxPrivateIpAddress().withPrivateIpAddress("r")
                    .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                    .withSubnetId("wzrlovmclwhij")));
        model = BinaryData.fromObject(model).toObject(NginxFrontendIpConfiguration.class);
        Assertions.assertEquals("bl", model.publicIpAddresses().get(0).id());
        Assertions.assertEquals("hfepgzgqex", model.privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("xscpaierhhbc", model.privateIpAddresses().get(0).subnetId());
    }
}
