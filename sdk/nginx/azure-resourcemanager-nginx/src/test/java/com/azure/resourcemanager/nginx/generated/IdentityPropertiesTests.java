// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IdentityPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IdentityProperties model = BinaryData.fromString(
            "{\"principalId\":\"xibqeojnx\",\"tenantId\":\"zvddntwndeicbtwn\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"jqkwpyeicx\":{\"principalId\":\"uhrhcffcyddgl\",\"clientId\":\"t\"},\"ghmewuam\":{\"principalId\":\"ciwqvhk\",\"clientId\":\"xuigdtopbobj\"},\"efgugnxk\":{\"principalId\":\"hrzayvvtpgvdf\",\"clientId\":\"otkftutqxlngx\"},\"hjybigehoqfbo\":{\"principalId\":\"dqmidtt\",\"clientId\":\"rvqdra\"}}}")
            .toObject(IdentityProperties.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IdentityProperties model
            = new IdentityProperties().withType(IdentityType.USER_ASSIGNED).withUserAssignedIdentities(
                mapOf("jqkwpyeicx", new UserIdentityProperties(), "ghmewuam", new UserIdentityProperties(), "efgugnxk",
                    new UserIdentityProperties(), "hjybigehoqfbo", new UserIdentityProperties()));
        model = BinaryData.fromObject(model).toObject(IdentityProperties.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
