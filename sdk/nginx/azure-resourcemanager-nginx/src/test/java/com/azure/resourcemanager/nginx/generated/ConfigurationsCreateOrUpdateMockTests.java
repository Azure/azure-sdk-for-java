// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.NginxConfiguration;
import com.azure.resourcemanager.nginx.models.NginxConfigurationFile;
import com.azure.resourcemanager.nginx.models.NginxConfigurationPackage;
import com.azure.resourcemanager.nginx.models.NginxConfigurationProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"files\":[{\"content\":\"hjpglkf\",\"virtualPath\":\"hdneuelfph\"},{\"content\":\"yhtozfikdowwqu\",\"virtualPath\":\"xzxcl\"},{\"content\":\"thhqzonosggbh\",\"virtualPath\":\"hfwdsjnkaljutiis\"},{\"content\":\"cffgdkzzewk\",\"virtualPath\":\"hqcrailvpnpp\"}],\"protectedFiles\":[{\"content\":\"rwdmhdlxyjrxsa\",\"virtualPath\":\"fcnihgwq\"},{\"content\":\"nedgfbc\",\"virtualPath\":\"cvqvpkeqdcv\"}],\"package\":{\"data\":\"vo\",\"protectedFiles\":[\"otbobzdopcj\",\"vnhdldwmgxcxr\"]},\"rootFile\":\"pmutwuo\"},\"location\":\"rpkhjwn\",\"id\":\"qsluicp\",\"name\":\"ggkzzlvmbmpa\",\"type\":\"modfvuefywsbpfvm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NginxManager manager = NginxManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NginxConfiguration response = manager.configurations()
            .define("tmweriofzpyq")
            .withExistingNginxDeployment("zucerscdntnev", "iwjmygtdssls")
            .withRegion("pgcjefuzmuvp")
            .withProperties(new NginxConfigurationProperties()
                .withFiles(Arrays.asList(new NginxConfigurationFile().withContent("ets").withVirtualPath("szhedplvw"),
                    new NginxConfigurationFile().withContent("ubmwmbesld").withVirtualPath("wwtppj")))
                .withProtectedFiles(
                    Arrays.asList(new NginxConfigurationFile().withContent("ogaok").withVirtualPath("z"),
                        new NginxConfigurationFile().withContent("sikvmkqzeqqkdlt").withVirtualPath("xmhhvhgureo"),
                        new NginxConfigurationFile().withContent("wobdagxtibqdx").withVirtualPath("wakbogqxndl")))
                .withPackageProperty(new NginxConfigurationPackage().withData("xhuri")
                    .withProtectedFiles(Arrays.asList("podxunkb", "bxmubyynt", "lrb", "tkoievseotgq")))
                .withRootFile("ltmuwlauwzizx"))
            .create();

        Assertions.assertEquals("hjpglkf", response.properties().files().get(0).content());
        Assertions.assertEquals("hdneuelfph", response.properties().files().get(0).virtualPath());
        Assertions.assertEquals("rwdmhdlxyjrxsa", response.properties().protectedFiles().get(0).content());
        Assertions.assertEquals("fcnihgwq", response.properties().protectedFiles().get(0).virtualPath());
        Assertions.assertEquals("vo", response.properties().packageProperty().data());
        Assertions.assertEquals("otbobzdopcj", response.properties().packageProperty().protectedFiles().get(0));
        Assertions.assertEquals("pmutwuo", response.properties().rootFile());
        Assertions.assertEquals("rpkhjwn", response.location());
    }
}
