// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.NginxConfigurationFile;
import com.azure.resourcemanager.nginx.models.NginxConfigurationPackage;
import com.azure.resourcemanager.nginx.models.NginxConfigurationProtectedFileRequest;
import com.azure.resourcemanager.nginx.models.NginxConfigurationRequestProperties;
import com.azure.resourcemanager.nginx.models.NginxConfigurationResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"files\":[{\"content\":\"ypgik\",\"virtualPath\":\"szywkbirryu\"},{\"content\":\"lhkjoqrvqq\",\"virtualPath\":\"t\"},{\"content\":\"nrvgoupmfiibfgg\",\"virtualPath\":\"ool\"}],\"protectedFiles\":[{\"virtualPath\":\"kvtkkg\",\"contentHash\":\"qwjygvja\"},{\"virtualPath\":\"blmhvkzuhb\",\"contentHash\":\"vyhgs\"},{\"virtualPath\":\"byrqufeg\",\"contentHash\":\"vwz\"}],\"package\":{\"data\":\"hlmctlpdngitvgb\",\"protectedFiles\":[\"ixkwmyijejveg\",\"hbpnaixexccbd\",\"eaxhcexdrrvqahqk\",\"htpwij\"]},\"rootFile\":\"yjsvfyc\"},\"id\":\"bfvoowvrv\",\"name\":\"t\",\"type\":\"jqppyostronzmy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NginxManager manager = NginxManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NginxConfigurationResponse response = manager.configurations()
            .define("ughftqsx")
            .withExistingNginxDeployment("ueluqhhahhxvrhmz", "wpjgwws")
            .withProperties(new NginxConfigurationRequestProperties()
                .withFiles(
                    Arrays.asList(new NginxConfigurationFile().withContent("kndxdigrjgu").withVirtualPath("zdmsyqtfi"),
                        new NginxConfigurationFile().withContent("hbotzingamvppho").withVirtualPath("qzudphq"),
                        new NginxConfigurationFile().withContent("vdkfwynwcvtbvk").withVirtualPath("hmtnvy")))
                .withProtectedFiles(Arrays.asList(
                    new NginxConfigurationProtectedFileRequest().withContent("kzwpcnpw")
                        .withVirtualPath("jaesgvvsccya")
                        .withContentHash("uq"),
                    new NginxConfigurationProtectedFileRequest().withContent("wygzlvdnkfxusem")
                        .withVirtualPath("zrmuhapfcqdps")
                        .withContentHash("qvpsvuoymg"),
                    new NginxConfigurationProtectedFileRequest().withContent("elvezrypq")
                        .withVirtualPath("feo")
                        .withContentHash("rqwky")))
                .withPackageProperty(new NginxConfigurationPackage().withData("bopgxedkowepbqp")
                    .withProtectedFiles(Arrays.asList("kbwcc")))
                .withRootFile("jvcdwxlpqekf"))
            .create();

        Assertions.assertEquals("ypgik", response.properties().files().get(0).content());
        Assertions.assertEquals("szywkbirryu", response.properties().files().get(0).virtualPath());
        Assertions.assertEquals("kvtkkg", response.properties().protectedFiles().get(0).virtualPath());
        Assertions.assertEquals("qwjygvja", response.properties().protectedFiles().get(0).contentHash());
        Assertions.assertEquals("hlmctlpdngitvgb", response.properties().packageProperty().data());
        Assertions.assertEquals("ixkwmyijejveg", response.properties().packageProperty().protectedFiles().get(0));
        Assertions.assertEquals("yjsvfyc", response.properties().rootFile());
    }
}
