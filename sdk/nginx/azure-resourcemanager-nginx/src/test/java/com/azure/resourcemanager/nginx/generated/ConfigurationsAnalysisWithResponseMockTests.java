// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.AnalysisCreate;
import com.azure.resourcemanager.nginx.models.AnalysisCreateConfig;
import com.azure.resourcemanager.nginx.models.AnalysisResult;
import com.azure.resourcemanager.nginx.models.Level;
import com.azure.resourcemanager.nginx.models.NginxConfigurationFile;
import com.azure.resourcemanager.nginx.models.NginxConfigurationPackage;
import com.azure.resourcemanager.nginx.models.NginxConfigurationProtectedFileRequest;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsAnalysisWithResponseMockTests {
    @Test
    public void testAnalysisWithResponse() throws Exception {
        String responseStr
            = "{\"status\":\"v\",\"data\":{\"errors\":[{\"id\":\"uxxpshne\",\"directive\":\"kulfg\",\"description\":\"lqubkwdlen\",\"file\":\"d\",\"line\":36.32122955816697,\"message\":\"ujbazpjuohminyfl\",\"rule\":\"orwmduvwpklv\"},{\"id\":\"mygdxpgpqch\",\"directive\":\"sze\",\"description\":\"nnbj\",\"file\":\"rxgibbd\",\"line\":71.6384972247716,\"message\":\"onfo\",\"rule\":\"auorsukokw\"},{\"id\":\"plhlvnuuepzlrp\",\"directive\":\"wzsoldweyuqdunv\",\"description\":\"nnrwrbiork\",\"file\":\"alywjhhgdn\",\"line\":98.6005368375008,\"message\":\"sivfomilo\",\"rule\":\"ggdufiqndieu\"}],\"diagnostics\":[{\"id\":\"jchvcyy\",\"directive\":\"s\",\"description\":\"gdotcubiipuipwo\",\"file\":\"onmacjekniz\",\"line\":90.05728846369561,\"message\":\"vcimpev\",\"rule\":\"gmblrri\",\"level\":\"Warning\",\"category\":\"wdxsm\"},{\"id\":\"cwrwfs\",\"directive\":\"jfnynszqujizdvoq\",\"description\":\"tiby\",\"file\":\"wb\",\"line\":13.000655623165148,\"message\":\"yavutpthjoxois\",\"rule\":\"sks\",\"level\":\"Info\",\"category\":\"mlqoljx\"},{\"id\":\"gxxlxsffgcvizq\",\"directive\":\"dwl\",\"description\":\"w\",\"file\":\"youpfgfbkj\",\"line\":87.77173705974407,\"message\":\"yhgk\",\"rule\":\"minsgowzf\",\"level\":\"Warning\",\"category\":\"ttktlahbq\"}]}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NginxManager manager = NginxManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AnalysisResult response = manager.configurations()
            .analysisWithResponse("orfmluiqt", "zf", "vyvnqqyb",
                new AnalysisCreate().withConfig(new AnalysisCreateConfig().withRootFile("yeua")
                    .withFiles(
                        Arrays.asList(new NginxConfigurationFile().withContent("abqgzslesjcbh").withVirtualPath("n")))
                    .withProtectedFiles(Arrays.asList(new NginxConfigurationProtectedFileRequest().withContent("w")
                        .withVirtualPath("cv")
                        .withContentHash("uwrbehwagoh")))
                    .withPackageProperty(new NginxConfigurationPackage().withData("fkmr")
                        .withProtectedFiles(
                            Arrays.asList("vvhmxtdrj", "utacoe", "jvewzcjznmwcp", "guaadraufactkahz")))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("v", response.status());
        Assertions.assertEquals("uxxpshne", response.data().errors().get(0).id());
        Assertions.assertEquals("kulfg", response.data().errors().get(0).directive());
        Assertions.assertEquals("lqubkwdlen", response.data().errors().get(0).description());
        Assertions.assertEquals("d", response.data().errors().get(0).file());
        Assertions.assertEquals(36.32122955816697, response.data().errors().get(0).line());
        Assertions.assertEquals("ujbazpjuohminyfl", response.data().errors().get(0).message());
        Assertions.assertEquals("orwmduvwpklv", response.data().errors().get(0).rule());
        Assertions.assertEquals("jchvcyy", response.data().diagnostics().get(0).id());
        Assertions.assertEquals("s", response.data().diagnostics().get(0).directive());
        Assertions.assertEquals("gdotcubiipuipwo", response.data().diagnostics().get(0).description());
        Assertions.assertEquals("onmacjekniz", response.data().diagnostics().get(0).file());
        Assertions.assertEquals(90.05728846369561, response.data().diagnostics().get(0).line());
        Assertions.assertEquals("vcimpev", response.data().diagnostics().get(0).message());
        Assertions.assertEquals("gmblrri", response.data().diagnostics().get(0).rule());
        Assertions.assertEquals(Level.WARNING, response.data().diagnostics().get(0).level());
        Assertions.assertEquals("wdxsm", response.data().diagnostics().get(0).category());
    }
}
