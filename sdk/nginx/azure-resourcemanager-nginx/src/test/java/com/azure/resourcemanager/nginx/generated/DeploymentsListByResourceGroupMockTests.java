// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeployment;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DeploymentsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"szhedplvw\",\"tenantId\":\"ubmwmbesld\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"qzeqqkdltfzxm\":{\"principalId\":\"pjflcxogao\",\"clientId\":\"nzmnsikvm\"},\"odkwobd\":{\"principalId\":\"v\",\"clientId\":\"ur\"}}},\"properties\":{\"provisioningState\":\"NotSpecified\",\"nginxVersion\":\"bqdxbx\",\"managedResourceGroup\":\"kbogqxndlkzgx\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{},{},{}],\"privateIPAddresses\":[{},{},{},{}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"dxunkbebxmubyyn\"}},\"ipAddress\":\"lrb\",\"enableDiagnosticsSupport\":false,\"logging\":{\"storageAccount\":{\"accountName\":\"vseotgqrl\",\"containerName\":\"muwlauwzizxbm\"}},\"scalingProperties\":{\"capacity\":1983379457},\"userProfile\":{\"preferredEmail\":\"u\"}},\"sku\":{\"name\":\"uvpb\"},\"location\":\"d\",\"tags\":{\"xe\":\"rp\",\"bhjpglkfgohdne\":\"mnzb\",\"phsdyhto\":\"el\",\"v\":\"fikdowwqu\"},\"id\":\"zx\",\"name\":\"lvithhqzonosgg\",\"type\":\"hcohfwdsjnk\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        NginxManager manager = NginxManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<NginxDeployment> response
            = manager.deployments().listByResourceGroup("emwabnet", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("d", response.iterator().next().location());
        Assertions.assertEquals("rp", response.iterator().next().tags().get("xe"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("kbogqxndlkzgx", response.iterator().next().properties().managedResourceGroup());
        Assertions.assertEquals("dxunkbebxmubyyn",
            response.iterator().next().properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(false, response.iterator().next().properties().enableDiagnosticsSupport());
        Assertions.assertEquals("vseotgqrl",
            response.iterator().next().properties().logging().storageAccount().accountName());
        Assertions.assertEquals("muwlauwzizxbm",
            response.iterator().next().properties().logging().storageAccount().containerName());
        Assertions.assertEquals(1983379457, response.iterator().next().properties().scalingProperties().capacity());
        Assertions.assertEquals("u", response.iterator().next().properties().userProfile().preferredEmail());
        Assertions.assertEquals("uvpb", response.iterator().next().sku().name());
    }
}
