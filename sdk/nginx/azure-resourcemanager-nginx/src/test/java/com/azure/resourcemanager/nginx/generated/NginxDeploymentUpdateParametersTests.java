// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.ActivationState;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdateParameters;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdateProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdatePropertiesNginxAppProtect;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import com.azure.resourcemanager.nginx.models.WebApplicationFirewallSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentUpdateParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"lbjnpgacftadehx\",\"tenantId\":\"tyfsoppusuesn\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"wxdndnvowgujjug\":{\"principalId\":\"avo\",\"clientId\":\"zdmohctbqvu\"},\"kuofqweykhme\":{\"principalId\":\"kcglhslaz\",\"clientId\":\"yggdtjixh\"},\"amdecte\":{\"principalId\":\"vfyexfw\",\"clientId\":\"bcibvyvdcsitynn\"}}},\"tags\":{\"eypvhezrkg\":\"qsc\",\"sle\":\"hcjrefovgmk\",\"cattpngjcrcczsq\":\"yvxyqjp\"},\"sku\":{\"name\":\"hvmdajvnysounq\"},\"location\":\"a\",\"properties\":{\"enableDiagnosticsSupport\":true,\"logging\":{\"storageAccount\":{\"accountName\":\"hy\",\"containerName\":\"trpmo\"}},\"scalingProperties\":{\"capacity\":584946048,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"tuo\",\"capacity\":{\"min\":1961920372,\"max\":607140678}},{\"name\":\"fu\",\"capacity\":{\"min\":102463289,\"max\":94424945}},{\"name\":\"odsfcpkvxodpuozm\",\"capacity\":{\"min\":2044584540,\"max\":466984415}}]}},\"userProfile\":{\"preferredEmail\":\"gf\"},\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{\"id\":\"yiuokktwh\"},{\"id\":\"xw\"},{\"id\":\"wqsmbsur\"},{\"id\":\"imoryocfsfksym\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"tki\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"qyud\"}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"rq\"}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"poczvyifqrvkdvjs\"},\"nginxAppProtect\":{\"webApplicationFirewallSettings\":{\"activationState\":\"Disabled\"}}}}")
            .toObject(NginxDeploymentUpdateParameters.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("qsc", model.tags().get("eypvhezrkg"));
        Assertions.assertEquals("hvmdajvnysounq", model.sku().name());
        Assertions.assertEquals("a", model.location());
        Assertions.assertTrue(model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("hy", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("trpmo", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(584946048, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("tuo", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1961920372, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(607140678, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("gf", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals("yiuokktwh",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("tki",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("qyud",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("rq", model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals("poczvyifqrvkdvjs", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals(ActivationState.DISABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentUpdateParameters model = new NginxDeploymentUpdateParameters()
            .withIdentity(new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("wxdndnvowgujjug", new UserIdentityProperties(), "kuofqweykhme",
                    new UserIdentityProperties(), "amdecte", new UserIdentityProperties())))
            .withTags(mapOf("eypvhezrkg", "qsc", "sle", "hcjrefovgmk", "cattpngjcrcczsq", "yvxyqjp"))
            .withSku(new ResourceSku().withName("hvmdajvnysounq"))
            .withLocation("a")
            .withProperties(new NginxDeploymentUpdateProperties().withEnableDiagnosticsSupport(true)
                .withLogging(new NginxLogging()
                    .withStorageAccount(new NginxStorageAccount().withAccountName("hy").withContainerName("trpmo")))
                .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(584946048)
                    .withProfiles(Arrays.asList(
                        new ScaleProfile().withName("tuo")
                            .withCapacity(new ScaleProfileCapacity().withMin(1961920372).withMax(607140678)),
                        new ScaleProfile().withName("fu")
                            .withCapacity(new ScaleProfileCapacity().withMin(102463289).withMax(94424945)),
                        new ScaleProfile().withName("odsfcpkvxodpuozm")
                            .withCapacity(new ScaleProfileCapacity().withMin(2044584540).withMax(466984415)))))
                .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("gf"))
                .withNetworkProfile(new NginxNetworkProfile()
                    .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration()
                        .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress().withId("yiuokktwh"),
                            new NginxPublicIpAddress().withId("xw"), new NginxPublicIpAddress().withId("wqsmbsur"),
                            new NginxPublicIpAddress().withId("imoryocfsfksym")))
                        .withPrivateIpAddresses(Arrays.asList(new NginxPrivateIpAddress().withPrivateIpAddress("tki")
                            .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.DYNAMIC)
                            .withSubnetId("qyud"))))
                    .withNetworkInterfaceConfiguration(new NginxNetworkInterfaceConfiguration().withSubnetId("rq")))
                .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("poczvyifqrvkdvjs"))
                .withNginxAppProtect(
                    new NginxDeploymentUpdatePropertiesNginxAppProtect().withWebApplicationFirewallSettings(
                        new WebApplicationFirewallSettings().withActivationState(ActivationState.DISABLED))));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentUpdateParameters.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("qsc", model.tags().get("eypvhezrkg"));
        Assertions.assertEquals("hvmdajvnysounq", model.sku().name());
        Assertions.assertEquals("a", model.location());
        Assertions.assertTrue(model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("hy", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("trpmo", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(584946048, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("tuo", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1961920372, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(607140678, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("gf", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals("yiuokktwh",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("tki",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("qyud",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("rq", model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals("poczvyifqrvkdvjs", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals(ActivationState.DISABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
