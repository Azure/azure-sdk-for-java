// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.ActivationState;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdateParameters;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdateProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdatePropertiesNginxAppProtect;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import com.azure.resourcemanager.nginx.models.WebApplicationFirewallSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentUpdateParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"btdhxujznbm\",\"tenantId\":\"wuwprzqlv\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"iplrbpbewtghfgb\":{\"principalId\":\"j\",\"clientId\":\"hfxobbcswsrtj\"}}},\"tags\":{\"gibtnm\":\"wxzvlvqhjkb\"},\"sku\":{\"name\":\"ebwwaloayqc\"},\"location\":\"rtzju\",\"properties\":{\"enableDiagnosticsSupport\":false,\"logging\":{\"storageAccount\":{\"accountName\":\"txon\",\"containerName\":\"ts\"}},\"scalingProperties\":{\"capacity\":1151721891,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"wxqpsrknftguvri\",\"capacity\":{\"min\":2067966148,\"max\":346256186}},{\"name\":\"rwmdyvxqtay\",\"capacity\":{\"min\":1285325454,\"max\":357638492}}]}},\"userProfile\":{\"preferredEmail\":\"oyq\"},\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{\"id\":\"qibycnojvknm\"},{\"id\":\"qsgzvahapj\"},{\"id\":\"hpvgqz\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"xdjzlmwlxk\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"hzovawjvzunlut\"},{\"privateIPAddress\":\"n\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"i\"},{\"privateIPAddress\":\"ilpjzuaejxdult\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"btdzumveekg\"}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"zuhkfpbsjyof\"}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"luu\"},\"nginxAppProtect\":{\"webApplicationFirewallSettings\":{\"activationState\":\"Disabled\"}}}}")
            .toObject(NginxDeploymentUpdateParameters.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("wxzvlvqhjkb", model.tags().get("gibtnm"));
        Assertions.assertEquals("ebwwaloayqc", model.sku().name());
        Assertions.assertEquals("rtzju", model.location());
        Assertions.assertEquals(false, model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("txon", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("ts", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(1151721891, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("wxqpsrknftguvri", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(2067966148, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(346256186, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("oyq", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals("qibycnojvknm",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("xdjzlmwlxk",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("hzovawjvzunlut",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("zuhkfpbsjyof",
            model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals("luu", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals(ActivationState.DISABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentUpdateParameters model
            = new NginxDeploymentUpdateParameters()
                .withIdentity(new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("iplrbpbewtghfgb", new UserIdentityProperties())))
                .withTags(mapOf("gibtnm", "wxzvlvqhjkb"))
                .withSku(new ResourceSku().withName("ebwwaloayqc"))
                .withLocation("rtzju")
                .withProperties(
                    new NginxDeploymentUpdateProperties().withEnableDiagnosticsSupport(false)
                        .withLogging(new NginxLogging().withStorageAccount(
                            new NginxStorageAccount().withAccountName("txon").withContainerName("ts")))
                        .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(1151721891)
                            .withProfiles(Arrays.asList(new ScaleProfile().withName("wxqpsrknftguvri")
                                .withCapacity(new ScaleProfileCapacity().withMin(2067966148).withMax(346256186)),
                                new ScaleProfile().withName("rwmdyvxqtay")
                                    .withCapacity(new ScaleProfileCapacity().withMin(1285325454).withMax(357638492)))))
                        .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("oyq"))
                        .withNetworkProfile(
                            new NginxNetworkProfile()
                                .withFrontEndIpConfiguration(
                                    new NginxFrontendIpConfiguration()
                                        .withPublicIpAddresses(
                                            Arrays.asList(new NginxPublicIpAddress().withId("qibycnojvknm"),
                                                new NginxPublicIpAddress().withId("qsgzvahapj"),
                                                new NginxPublicIpAddress().withId("hpvgqz")))
                                        .withPrivateIpAddresses(
                                            Arrays.asList(
                                                new NginxPrivateIpAddress().withPrivateIpAddress("xdjzlmwlxk")
                                                    .withPrivateIpAllocationMethod(
                                                        NginxPrivateIpAllocationMethod.DYNAMIC)
                                                    .withSubnetId("hzovawjvzunlut"),
                                                new NginxPrivateIpAddress().withPrivateIpAddress("n")
                                                    .withPrivateIpAllocationMethod(
                                                        NginxPrivateIpAllocationMethod.STATIC)
                                                    .withSubnetId("i"),
                                                new NginxPrivateIpAddress().withPrivateIpAddress("ilpjzuaejxdult")
                                                    .withPrivateIpAllocationMethod(
                                                        NginxPrivateIpAllocationMethod.DYNAMIC)
                                                    .withSubnetId("btdzumveekg"))))
                                .withNetworkInterfaceConfiguration(
                                    new NginxNetworkInterfaceConfiguration().withSubnetId("zuhkfpbsjyof")))
                        .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("luu"))
                        .withNginxAppProtect(
                            new NginxDeploymentUpdatePropertiesNginxAppProtect().withWebApplicationFirewallSettings(
                                new WebApplicationFirewallSettings().withActivationState(ActivationState.DISABLED))));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentUpdateParameters.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("wxzvlvqhjkb", model.tags().get("gibtnm"));
        Assertions.assertEquals("ebwwaloayqc", model.sku().name());
        Assertions.assertEquals("rtzju", model.location());
        Assertions.assertEquals(false, model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("txon", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("ts", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(1151721891, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("wxqpsrknftguvri", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(2067966148, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(346256186, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("oyq", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals("qibycnojvknm",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("xdjzlmwlxk",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("hzovawjvzunlut",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("zuhkfpbsjyof",
            model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals("luu", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals(ActivationState.DISABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
