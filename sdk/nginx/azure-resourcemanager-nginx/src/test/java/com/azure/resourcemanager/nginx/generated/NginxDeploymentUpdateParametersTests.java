// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdateParameters;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUpdateProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentUpdateParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"s\",\"tenantId\":\"ddystkiiuxhqy\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"fqrvkdvjsllrmvvd\":{\"principalId\":\"qn\",\"clientId\":\"oczvy\"},\"wiqzbqjvsovmyo\":{\"principalId\":\"atkpnp\",\"clientId\":\"exxbczwtr\"},\"wwzjuqkhrsajiwku\":{\"principalId\":\"cspkwlhzdobpxjmf\",\"clientId\":\"vvnchrkcc\"},\"mjmvxieduugidyjr\":{\"principalId\":\"oskg\",\"clientId\":\"auu\"}}},\"tags\":{\"osvexcsonpclhoc\":\"y\"},\"sku\":{\"name\":\"slkevle\"},\"location\":\"zfbuhf\",\"properties\":{\"enableDiagnosticsSupport\":false,\"logging\":{\"storageAccount\":{\"accountName\":\"feiithlvmez\",\"containerName\":\"shxmzsbbzoggigrx\"}},\"scalingProperties\":{\"capacity\":849896725},\"userProfile\":{\"preferredEmail\":\"xxjnspydptk\"}}}")
            .toObject(NginxDeploymentUpdateParameters.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("y", model.tags().get("osvexcsonpclhoc"));
        Assertions.assertEquals("slkevle", model.sku().name());
        Assertions.assertEquals("zfbuhf", model.location());
        Assertions.assertEquals(false, model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("feiithlvmez", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("shxmzsbbzoggigrx", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(849896725, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("xxjnspydptk", model.properties().userProfile().preferredEmail());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentUpdateParameters model = new NginxDeploymentUpdateParameters()
            .withIdentity(new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("fqrvkdvjsllrmvvd", new UserIdentityProperties(), "wiqzbqjvsovmyo",
                    new UserIdentityProperties(), "wwzjuqkhrsajiwku", new UserIdentityProperties(), "mjmvxieduugidyjr",
                    new UserIdentityProperties())))
            .withTags(mapOf("osvexcsonpclhoc", "y")).withSku(new ResourceSku().withName("slkevle"))
            .withLocation("zfbuhf")
            .withProperties(new NginxDeploymentUpdateProperties().withEnableDiagnosticsSupport(false)
                .withLogging(new NginxLogging().withStorageAccount(
                    new NginxStorageAccount().withAccountName("feiithlvmez").withContainerName("shxmzsbbzoggigrx")))
                .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(849896725))
                .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("xxjnspydptk")));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentUpdateParameters.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("y", model.tags().get("osvexcsonpclhoc"));
        Assertions.assertEquals("slkevle", model.sku().name());
        Assertions.assertEquals("zfbuhf", model.location());
        Assertions.assertEquals(false, model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("feiithlvmez", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("shxmzsbbzoggigrx", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(849896725, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("xxjnspydptk", model.properties().userProfile().preferredEmail());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
