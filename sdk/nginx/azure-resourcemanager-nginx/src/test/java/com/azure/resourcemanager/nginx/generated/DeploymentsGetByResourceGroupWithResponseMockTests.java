// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeployment;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DeploymentsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"bexkpzksmondj\",\"tenantId\":\"uxvypomgkopkwh\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"vhelxprglyatdd\":{\"principalId\":\"qgxy\",\"clientId\":\"ocmbqfqvmkcxoza\"},\"sdqrhzoymibmrq\":{\"principalId\":\"cbcuejrjxgciqi\",\"clientId\":\"hos\"}}},\"properties\":{\"provisioningState\":\"Failed\",\"nginxVersion\":\"wfluszdt\",\"managedResourceGroup\":\"rkwofyyvoqa\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{},{},{}],\"privateIPAddresses\":[{},{},{},{}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"iwbwoenwashrtdtk\"}},\"ipAddress\":\"qxwbpokulpiu\",\"enableDiagnosticsSupport\":false,\"logging\":{\"storageAccount\":{\"accountName\":\"pqiiobyuqe\",\"containerName\":\"qlpqwcciuq\"}},\"scalingProperties\":{\"capacity\":1924773766,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"auvfbtkuwhhmhyk\",\"capacity\":{\"min\":697722485,\"max\":1183832331}}]}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"afnn\"},\"userProfile\":{\"preferredEmail\":\"ichkoymkcdyhb\"}},\"sku\":{\"name\":\"kpw\"},\"location\":\"eqnovvqfovl\",\"tags\":{\"ndsytgadg\":\"wsuwsyr\",\"ea\":\"r\"},\"id\":\"neqn\",\"name\":\"arrwlquu\",\"type\":\"jfqka\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NginxManager manager = NginxManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NginxDeployment response = manager.deployments()
            .getByResourceGroupWithResponse("yhrfouyftaakcpw", "yzvqt", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("eqnovvqfovl", response.location());
        Assertions.assertEquals("wsuwsyr", response.tags().get("ndsytgadg"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("rkwofyyvoqa", response.properties().managedResourceGroup());
        Assertions.assertEquals("iwbwoenwashrtdtk",
            response.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(false, response.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("pqiiobyuqe", response.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("qlpqwcciuq", response.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(1924773766, response.properties().scalingProperties().capacity());
        Assertions.assertEquals("auvfbtkuwhhmhyk", response.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(697722485,
            response.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(1183832331,
            response.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("afnn", response.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("ichkoymkcdyhb", response.properties().userProfile().preferredEmail());
        Assertions.assertEquals("kpw", response.sku().name());
    }
}
