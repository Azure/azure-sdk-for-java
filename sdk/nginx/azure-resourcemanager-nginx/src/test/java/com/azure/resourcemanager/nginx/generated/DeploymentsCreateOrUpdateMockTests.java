// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.ActivationState;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeployment;
import com.azure.resourcemanager.nginx.models.NginxDeploymentProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentPropertiesNginxAppProtect;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import com.azure.resourcemanager.nginx.models.WebApplicationFirewallSettings;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DeploymentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"nginxVersion\":\"xexccbdreaxhcexd\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{},{}],\"privateIPAddresses\":[{},{},{}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"htpwij\"}},\"ipAddress\":\"yjsvfyc\",\"enableDiagnosticsSupport\":true,\"logging\":{\"storageAccount\":{\"accountName\":\"owvrvmtgjqppyos\",\"containerName\":\"on\"}},\"scalingProperties\":{\"capacity\":856785773,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"ipn\",\"capacity\":{\"min\":1260829297,\"max\":1762342215}},{\"name\":\"mcwaekrrjr\",\"capacity\":{\"min\":1897122560,\"max\":1616110653}}]}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"tsgumhj\"},\"userProfile\":{\"preferredEmail\":\"kkxwslol\"},\"nginxAppProtect\":{\"webApplicationFirewallSettings\":{\"activationState\":\"Enabled\"},\"webApplicationFirewallStatus\":{\"wafRelease\":\"lmv\",\"attackSignaturesPackage\":{\"version\":\"lfktgplcrpwjxe\",\"revisionDatetime\":\"2021-03-05T15:11:27Z\"},\"botSignaturesPackage\":{\"version\":\"igbrnjw\",\"revisionDatetime\":\"2021-07-10T07:09:22Z\"},\"threatCampaignsPackage\":{\"version\":\"pn\",\"revisionDatetime\":\"2021-07-09T21:36:51Z\"},\"componentVersions\":{\"wafEngineVersion\":\"zejjoqk\",\"wafNginxVersion\":\"gfhsxttaugzxn\"}}},\"dataplaneApiEndpoint\":\"azpxdtnkdmkqjjl\"},\"identity\":{\"principalId\":\"nvrk\",\"tenantId\":\"ou\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ffiakp\":{\"principalId\":\"qaaysjkixqt\",\"clientId\":\"ttezlw\"},\"auyqncygupkv\":{\"principalId\":\"qqmtedltmmji\",\"clientId\":\"eozphv\"},\"totxhojujb\":{\"principalId\":\"mdscwxqupev\",\"clientId\":\"f\"},\"kkbnu\":{\"principalId\":\"elmcuvhixbjxyfw\",\"clientId\":\"lrcoolsttpki\"}}},\"sku\":{\"name\":\"ywvtylbfpnc\"},\"location\":\"doiwi\",\"tags\":{\"nfdn\":\"tywubxcbihwq\",\"ihxumwctondzj\":\"wjchrdg\",\"fdlwg\":\"uu\",\"gseinq\":\"ytsbwtovv\"},\"id\":\"iufxqknpir\",\"name\":\"nepttwqmsni\",\"type\":\"fcdmqnrojlpijn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NginxManager manager = NginxManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NginxDeployment response = manager.deployments()
            .define("ughftqsx")
            .withRegion("blmhvkzuhb")
            .withExistingResourceGroup("wws")
            .withTags(mapOf("xuvw", "yhgsopbyrqufe", "lmctlpd", "fbn"))
            .withProperties(new NginxDeploymentProperties()
                .withNetworkProfile(new NginxNetworkProfile()
                    .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration()
                        .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress()))
                        .withPrivateIpAddresses(Arrays.asList(new NginxPrivateIpAddress(), new NginxPrivateIpAddress(),
                            new NginxPrivateIpAddress(), new NginxPrivateIpAddress())))
                    .withNetworkInterfaceConfiguration(
                        new NginxNetworkInterfaceConfiguration().withSubnetId("yqtfihwh")))
                .withEnableDiagnosticsSupport(false)
                .withLogging(new NginxLogging().withStorageAccount(
                    new NginxStorageAccount().withAccountName("dphqamv").withContainerName("fwynwcvtbvkay")))
                .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(1068554694)
                    .withProfiles(Arrays.asList(
                        new ScaleProfile().withName("qiatkzwpcnp")
                            .withCapacity(new ScaleProfileCapacity().withMin(1102080272).withMax(219155482)),
                        new ScaleProfile().withName("jaesgvvsccya")
                            .withCapacity(new ScaleProfileCapacity().withMin(248286602).withMax(306781812)),
                        new ScaleProfile().withName("qfhwyg")
                            .withCapacity(new ScaleProfileCapacity().withMin(1810005859).withMax(376601626)))))
                .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("nk"))
                .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("semdwzrmu"))
                .withNginxAppProtect(new NginxDeploymentPropertiesNginxAppProtect().withWebApplicationFirewallSettings(
                    new WebApplicationFirewallSettings().withActivationState(ActivationState.ENABLED))))
            .withIdentity(new IdentityProperties().withType(IdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("w", new UserIdentityProperties(), "vgoup",
                    new UserIdentityProperties(), "kvtkkg", new UserIdentityProperties())))
            .withSku(new ResourceSku().withName("qwjygvja"))
            .create();

        Assertions.assertEquals("doiwi", response.location());
        Assertions.assertEquals("tywubxcbihwq", response.tags().get("nfdn"));
        Assertions.assertEquals("htpwij",
            response.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertTrue(response.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("owvrvmtgjqppyos", response.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("on", response.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(856785773, response.properties().scalingProperties().capacity());
        Assertions.assertEquals("ipn", response.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1260829297,
            response.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(1762342215,
            response.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("tsgumhj", response.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("kkxwslol", response.properties().userProfile().preferredEmail());
        Assertions.assertEquals(ActivationState.ENABLED,
            response.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("ywvtylbfpnc", response.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
