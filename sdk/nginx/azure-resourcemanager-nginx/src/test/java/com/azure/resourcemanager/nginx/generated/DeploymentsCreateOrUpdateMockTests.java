// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeployment;
import com.azure.resourcemanager.nginx.models.NginxDeploymentProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DeploymentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"identity\":{\"principalId\":\"pi\",\"tenantId\":\"waasip\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"uwhhmhykojoxafn\":{\"principalId\":\"uqerpqlpqwc\",\"clientId\":\"uqgbdbutauvfbt\"},\"novvqfovljxy\":{\"principalId\":\"lpichk\",\"clientId\":\"mkcdyhbpkkpwdre\"},\"q\":{\"principalId\":\"uwsyrsndsytgadg\",\"clientId\":\"aeaeneqnzarrw\"}}},\"properties\":{\"provisioningState\":\"Succeeded\",\"nginxVersion\":\"qkacewii\",\"managedResourceGroup\":\"pubjibw\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{},{},{},{}],\"privateIPAddresses\":[{},{},{},{}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"puvks\"}},\"ipAddress\":\"lsa\",\"enableDiagnosticsSupport\":false,\"logging\":{\"storageAccount\":{\"accountName\":\"ynl\",\"containerName\":\"huopxodlqiynto\"}},\"scalingProperties\":{\"capacity\":1915861757},\"userProfile\":{\"preferredEmail\":\"osjswsr\"}},\"sku\":{\"name\":\"lyzrpzbchckqqzqi\"},\"location\":\"iysui\",\"tags\":{\"yhwitsmypyynpcdp\":\"nkedyatrwyhqmib\",\"nsorgjhxbldt\":\"mnzgmwznmabi\",\"kotl\":\"wwrlkdmtncv\",\"gsyocogj\":\"xdy\"},\"id\":\"tdtbnnhadooc\",\"name\":\"kvci\",\"type\":\"hnvpamqgxq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        NginxManager manager = NginxManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        NginxDeployment response
            = manager.deployments().define("swacffgdkzz").withRegion("atddc").withExistingResourceGroup("ljuti")
                .withTags(mapOf("ibrhosxsdqr", "cuejrjxgci", "luszdtmhrkwof", "zoymibmrqyibahw", "piexpbtgiw", "yvoqa"))
                .withIdentity(new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("wqapnedgfbcvk", new UserIdentityProperties(), "tbobz",
                        new UserIdentityProperties(), "rslpmutwuoeg", new UserIdentityProperties(), "ggkzzlvmbmpa",
                        new UserIdentityProperties())))
                .withProperties(new NginxDeploymentProperties().withManagedResourceGroup("ouyftaakc")
                    .withNetworkProfile(new NginxNetworkProfile()
                        .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration()
                            .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress(), new NginxPublicIpAddress(),
                                new NginxPublicIpAddress()))
                            .withPrivateIpAddresses(Arrays.asList(new NginxPrivateIpAddress(),
                                new NginxPrivateIpAddress(), new NginxPrivateIpAddress())))
                        .withNetworkInterfaceConfiguration(
                            new NginxNetworkInterfaceConfiguration().withSubnetId("nubexk")))
                    .withEnableDiagnosticsSupport(true)
                    .withLogging(new NginxLogging().withStorageAccount(
                        new NginxStorageAccount().withAccountName("ypomgkopkwho").withContainerName("pajqgxysm")))
                    .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(478734436))
                    .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("qvmkcxo")))
                .withSku(new ResourceSku().withName("pvhelxprg")).create();

        Assertions.assertEquals("iysui", response.location());
        Assertions.assertEquals("nkedyatrwyhqmib", response.tags().get("yhwitsmypyynpcdp"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("pubjibw", response.properties().managedResourceGroup());
        Assertions.assertEquals("puvks",
            response.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(false, response.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("ynl", response.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("huopxodlqiynto", response.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(1915861757, response.properties().scalingProperties().capacity());
        Assertions.assertEquals("osjswsr", response.properties().userProfile().preferredEmail());
        Assertions.assertEquals("lyzrpzbchckqqzqi", response.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
