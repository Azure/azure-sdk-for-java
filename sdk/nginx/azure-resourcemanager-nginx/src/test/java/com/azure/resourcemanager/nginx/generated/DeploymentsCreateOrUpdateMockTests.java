// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.nginx.NginxManager;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeployment;
import com.azure.resourcemanager.nginx.models.NginxDeploymentProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DeploymentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"xwabmqoe\",\"tenantId\":\"ifrvtpu\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ujitcjedftww\":{\"principalId\":\"gkfbtndoaong\",\"clientId\":\"cn\"},\"zfoqouicybxar\":{\"principalId\":\"zkoj\",\"clientId\":\"c\"}}},\"properties\":{\"provisioningState\":\"Succeeded\",\"nginxVersion\":\"foxciq\",\"managedResourceGroup\":\"idoamciodhkha\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{}],\"privateIPAddresses\":[{}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"lwntoego\"}},\"ipAddress\":\"wbw\",\"enableDiagnosticsSupport\":true,\"logging\":{\"storageAccount\":{\"accountName\":\"mrv\",\"containerName\":\"ztvbtqgsfr\"}},\"scalingProperties\":{\"capacity\":2100359325,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"owtlmnguxawqald\",\"capacity\":{\"min\":2048944312,\"max\":1988673385}},{\"name\":\"uximerqfobw\",\"capacity\":{\"min\":2077702872,\"max\":880028215}},{\"name\":\"kby\",\"capacity\":{\"min\":1828204425,\"max\":189482477}}]}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"pfhpagmhrskdsnfd\"},\"userProfile\":{\"preferredEmail\":\"akgtdlmkkzevdlh\"}},\"sku\":{\"name\":\"pusdstt\"},\"location\":\"ogvbbejdcngq\",\"tags\":{\"wr\":\"akufgmjz\",\"u\":\"grtwae\"},\"id\":\"zkopb\",\"name\":\"inrfdwoyu\",\"type\":\"hziuiefozbhdms\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NginxManager manager = NginxManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NginxDeployment response
            = manager.deployments()
                .define("l")
                .withRegion("kgjubgdknnqvsazn")
                .withExistingResourceGroup("yfxrx")
                .withTags(mapOf("mkycgra", "orudsgsa"))
                .withIdentity(
                    new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("msbvdkcrodtjinf", new UserIdentityProperties(), "pagao",
                            new UserIdentityProperties(), "sz", new UserIdentityProperties(), "vinvkj",
                            new UserIdentityProperties())))
                .withProperties(new NginxDeploymentProperties().withManagedResourceGroup("aztz")
                    .withNetworkProfile(new NginxNetworkProfile()
                        .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration()
                            .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress(), new NginxPublicIpAddress(),
                                new NginxPublicIpAddress(), new NginxPublicIpAddress()))
                            .withPrivateIpAddresses(Arrays.asList(new NginxPrivateIpAddress(),
                                new NginxPrivateIpAddress(), new NginxPrivateIpAddress(), new NginxPrivateIpAddress())))
                        .withNetworkInterfaceConfiguration(new NginxNetworkInterfaceConfiguration().withSubnetId("fz")))
                    .withEnableDiagnosticsSupport(false)
                    .withLogging(new NginxLogging().withStorageAccount(
                        new NginxStorageAccount().withAccountName("zfeqztppri").withContainerName("xorjaltolmncwsob")))
                    .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(1713401176)
                        .withProfiles(Arrays.asList(
                            new ScaleProfile().withName("nwdcfhu")
                                .withCapacity(new ScaleProfileCapacity().withMin(1589501712).withMax(1491398356)),
                            new ScaleProfile().withName("pfuvglsbjjca")
                                .withCapacity(new ScaleProfileCapacity().withMin(615108235).withMax(1995846414)))))
                    .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("vtvudutncormr"))
                    .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("tvcof")))
                .withSku(new ResourceSku().withName("f"))
                .create();

        Assertions.assertEquals("ogvbbejdcngq", response.location());
        Assertions.assertEquals("akufgmjz", response.tags().get("wr"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("idoamciodhkha", response.properties().managedResourceGroup());
        Assertions.assertEquals("lwntoego",
            response.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(true, response.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("mrv", response.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("ztvbtqgsfr", response.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(2100359325, response.properties().scalingProperties().capacity());
        Assertions.assertEquals("owtlmnguxawqald", response.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(2048944312,
            response.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(1988673385,
            response.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("pfhpagmhrskdsnfd", response.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("akgtdlmkkzevdlh", response.properties().userProfile().preferredEmail());
        Assertions.assertEquals("pusdstt", response.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
