// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.fluent.models.NginxDeploymentInner;
import com.azure.resourcemanager.nginx.models.ActivationState;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeploymentProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentPropertiesNginxAppProtect;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import com.azure.resourcemanager.nginx.models.WebApplicationFirewallSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"sonpclhocohs\",\"tenantId\":\"ev\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"shxmzsbbzoggigrx\":{\"principalId\":\"buhfmvfaxkffeiit\",\"clientId\":\"vmezy\"},\"enkouknvudw\":{\"principalId\":\"ur\",\"clientId\":\"xxjnspydptk\"}}},\"properties\":{\"provisioningState\":\"Canceled\",\"nginxVersion\":\"ldngkpoci\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{\"id\":\"egukgjnpiucg\"},{\"id\":\"evqzntypmrbp\"},{\"id\":\"c\"},{\"id\":\"qjsdpydnfyhxdeo\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"cwif\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"gzfbishcbk\"}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"deyeamdphagalpbu\"}},\"ipAddress\":\"gipwhonowkg\",\"enableDiagnosticsSupport\":true,\"logging\":{\"storageAccount\":{\"accountName\":\"ixzbinjeputtmryw\",\"containerName\":\"zoqftiyqzrnkcqvy\"}},\"scalingProperties\":{\"capacity\":1062459417,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"sicohoqqnwvlry\",\"capacity\":{\"min\":1416786049,\"max\":240696862}},{\"name\":\"hheunmmqhgyx\",\"capacity\":{\"min\":1391467998,\"max\":1953555312}},{\"name\":\"noc\",\"capacity\":{\"min\":1493031892,\"max\":820959200}}]}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"lyaxuc\"},\"userProfile\":{\"preferredEmail\":\"qszf\"},\"nginxAppProtect\":{\"webApplicationFirewallSettings\":{\"activationState\":\"Disabled\"},\"webApplicationFirewallStatus\":{\"attackSignaturesPackage\":{\"version\":\"wrmjmwvvjektc\",\"revisionDatetime\":\"2021-03-20T12:50:25Z\"},\"botSignaturesPackage\":{\"version\":\"nhwlrsffrzpwvl\",\"revisionDatetime\":\"2021-01-03T19:26:04Z\"},\"threatCampaignsPackage\":{\"version\":\"gbiqylihkaet\",\"revisionDatetime\":\"2021-03-28T05:06:34Z\"},\"componentVersions\":{\"wafEngineVersion\":\"vfcivfsnkymuc\",\"wafNginxVersion\":\"qhjfbebr\"}}},\"dataplaneApiEndpoint\":\"xerf\"},\"sku\":{\"name\":\"utttxfvjrbirp\"},\"location\":\"epcyvahfnlj\",\"tags\":{\"ljyoxgvcltb\":\"xjvuujqgidokg\"},\"id\":\"sncghkjeszz\",\"name\":\"bijhtxfvgxbf\",\"type\":\"mxnehmp\"}")
            .toObject(NginxDeploymentInner.class);
        Assertions.assertEquals("epcyvahfnlj", model.location());
        Assertions.assertEquals("xjvuujqgidokg", model.tags().get("ljyoxgvcltb"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("egukgjnpiucg",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("cwif",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.STATIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("gzfbishcbk",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("deyeamdphagalpbu",
            model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(true, model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("ixzbinjeputtmryw", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("zoqftiyqzrnkcqvy", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(1062459417, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("sicohoqqnwvlry", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1416786049, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(240696862, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("lyaxuc", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("qszf", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals(ActivationState.DISABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
        Assertions.assertEquals("utttxfvjrbirp", model.sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentInner model = new NginxDeploymentInner().withLocation("epcyvahfnlj")
            .withTags(mapOf("ljyoxgvcltb", "xjvuujqgidokg"))
            .withIdentity(new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("shxmzsbbzoggigrx", new UserIdentityProperties(), "enkouknvudw",
                    new UserIdentityProperties())))
            .withProperties(new NginxDeploymentProperties()
                .withNetworkProfile(new NginxNetworkProfile()
                    .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration()
                        .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress().withId("egukgjnpiucg"),
                            new NginxPublicIpAddress().withId("evqzntypmrbp"), new NginxPublicIpAddress().withId("c"),
                            new NginxPublicIpAddress().withId("qjsdpydnfyhxdeo")))
                        .withPrivateIpAddresses(Arrays.asList(new NginxPrivateIpAddress().withPrivateIpAddress("cwif")
                            .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                            .withSubnetId("gzfbishcbk"))))
                    .withNetworkInterfaceConfiguration(
                        new NginxNetworkInterfaceConfiguration().withSubnetId("deyeamdphagalpbu")))
                .withEnableDiagnosticsSupport(true)
                .withLogging(
                    new NginxLogging().withStorageAccount(new NginxStorageAccount().withAccountName("ixzbinjeputtmryw")
                        .withContainerName("zoqftiyqzrnkcqvy")))
                .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(1062459417)
                    .withProfiles(Arrays.asList(
                        new ScaleProfile().withName("sicohoqqnwvlry")
                            .withCapacity(new ScaleProfileCapacity().withMin(1416786049).withMax(240696862)),
                        new ScaleProfile().withName("hheunmmqhgyx")
                            .withCapacity(new ScaleProfileCapacity().withMin(1391467998).withMax(1953555312)),
                        new ScaleProfile().withName("noc")
                            .withCapacity(new ScaleProfileCapacity().withMin(1493031892).withMax(820959200)))))
                .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("lyaxuc"))
                .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("qszf"))
                .withNginxAppProtect(new NginxDeploymentPropertiesNginxAppProtect().withWebApplicationFirewallSettings(
                    new WebApplicationFirewallSettings().withActivationState(ActivationState.DISABLED))))
            .withSku(new ResourceSku().withName("utttxfvjrbirp"));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentInner.class);
        Assertions.assertEquals("epcyvahfnlj", model.location());
        Assertions.assertEquals("xjvuujqgidokg", model.tags().get("ljyoxgvcltb"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("egukgjnpiucg",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("cwif",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.STATIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("gzfbishcbk",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("deyeamdphagalpbu",
            model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(true, model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("ixzbinjeputtmryw", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("zoqftiyqzrnkcqvy", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(1062459417, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("sicohoqqnwvlry", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1416786049, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(240696862, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("lyaxuc", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("qszf", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals(ActivationState.DISABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
        Assertions.assertEquals("utttxfvjrbirp", model.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
