// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.fluent.models.NginxDeploymentInner;
import com.azure.resourcemanager.nginx.models.ActivationState;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.IdentityProperties;
import com.azure.resourcemanager.nginx.models.IdentityType;
import com.azure.resourcemanager.nginx.models.NginxDeploymentProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentPropertiesNginxAppProtect;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ResourceSku;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.UserIdentityProperties;
import com.azure.resourcemanager.nginx.models.WebApplicationFirewallSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"nginxVersion\":\"jakhmsbzjh\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{\"id\":\"phlxa\"},{\"id\":\"thqt\"},{\"id\":\"qjbpfzfsin\"},{\"id\":\"v\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"wzo\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"felluwfzitonpe\"},{\"privateIPAddress\":\"pjkjlxofpdv\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"xypininmayhuybbk\"}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"epoo\"}},\"ipAddress\":\"nuvamiheogna\",\"enableDiagnosticsSupport\":true,\"logging\":{\"storageAccount\":{\"accountName\":\"eotusivyevc\",\"containerName\":\"qi\"}},\"scalingProperties\":{\"capacity\":422843266,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"bwjzr\",\"capacity\":{\"min\":1668036347,\"max\":1055539147}},{\"name\":\"gxg\",\"capacity\":{\"min\":149639561,\"max\":2093374464}}]}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"mvtzfkufub\"},\"userProfile\":{\"preferredEmail\":\"fxqeof\"},\"nginxAppProtect\":{\"webApplicationFirewallSettings\":{\"activationState\":\"Enabled\"},\"webApplicationFirewallStatus\":{\"wafRelease\":\"qjbasvms\",\"attackSignaturesPackage\":{\"version\":\"qulngsntnbybkzgc\",\"revisionDatetime\":\"2021-06-16T21:35:22Z\"},\"botSignaturesPackage\":{\"version\":\"clxxwrljdo\",\"revisionDatetime\":\"2021-05-06T12:45Z\"},\"threatCampaignsPackage\":{\"version\":\"cqvkocrcjdkwtn\",\"revisionDatetime\":\"2021-04-07T16:39:29Z\"},\"componentVersions\":{\"wafEngineVersion\":\"njbiksqrglssain\",\"wafNginxVersion\":\"p\"}}},\"dataplaneApiEndpoint\":\"nzl\"},\"identity\":{\"principalId\":\"mppeebvmgxs\",\"tenantId\":\"kyqduujit\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"rwjfe\":{\"principalId\":\"evndh\",\"clientId\":\"wpdappdsbdkv\"},\"phut\":{\"principalId\":\"nhutjeltmrldhugj\",\"clientId\":\"datqxhocdgeabl\"},\"ftyxolniw\":{\"principalId\":\"ndv\",\"clientId\":\"ozwyiftyhxhuro\"}}},\"sku\":{\"name\":\"cukjf\"},\"location\":\"iawxklry\",\"tags\":{\"sgcbac\":\"ckbasyypndd\",\"zndlikwy\":\"hejkotynqgou\",\"bmadgak\":\"kgfg\"},\"id\":\"qsrxybzqqed\",\"name\":\"ytb\",\"type\":\"iqfouflmmnkz\"}")
            .toObject(NginxDeploymentInner.class);
        Assertions.assertEquals("iawxklry", model.location());
        Assertions.assertEquals("ckbasyypndd", model.tags().get("sgcbac"));
        Assertions.assertEquals("phlxa",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("wzo",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.STATIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("felluwfzitonpe",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("epoo", model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertTrue(model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("eotusivyevc", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("qi", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(422843266, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("bwjzr", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1668036347, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(1055539147, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("mvtzfkufub", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("fxqeof", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals(ActivationState.ENABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("cukjf", model.sku().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentInner model
            = new NginxDeploymentInner().withLocation("iawxklry")
                .withTags(mapOf("sgcbac", "ckbasyypndd", "zndlikwy", "hejkotynqgou", "bmadgak", "kgfg"))
                .withProperties(
                    new NginxDeploymentProperties()
                        .withNetworkProfile(
                            new NginxNetworkProfile()
                                .withFrontEndIpConfiguration(
                                    new NginxFrontendIpConfiguration()
                                        .withPublicIpAddresses(
                                            Arrays.asList(new NginxPublicIpAddress().withId("phlxa"),
                                                new NginxPublicIpAddress().withId("thqt"),
                                                new NginxPublicIpAddress().withId("qjbpfzfsin"),
                                                new NginxPublicIpAddress().withId("v")))
                                        .withPrivateIpAddresses(
                                            Arrays.asList(
                                                new NginxPrivateIpAddress().withPrivateIpAddress("wzo")
                                                    .withPrivateIpAllocationMethod(
                                                        NginxPrivateIpAllocationMethod.STATIC)
                                                    .withSubnetId("felluwfzitonpe"),
                                                new NginxPrivateIpAddress().withPrivateIpAddress("pjkjlxofpdv")
                                                    .withPrivateIpAllocationMethod(
                                                        NginxPrivateIpAllocationMethod.DYNAMIC)
                                                    .withSubnetId("xypininmayhuybbk"))))
                                .withNetworkInterfaceConfiguration(
                                    new NginxNetworkInterfaceConfiguration().withSubnetId("epoo")))
                        .withEnableDiagnosticsSupport(true)
                        .withLogging(new NginxLogging().withStorageAccount(
                            new NginxStorageAccount().withAccountName("eotusivyevc").withContainerName("qi")))
                        .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(422843266)
                            .withProfiles(Arrays.asList(
                                new ScaleProfile().withName("bwjzr")
                                    .withCapacity(new ScaleProfileCapacity().withMin(1668036347).withMax(1055539147)),
                                new ScaleProfile().withName("gxg")
                                    .withCapacity(new ScaleProfileCapacity().withMin(149639561).withMax(2093374464)))))
                        .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("mvtzfkufub"))
                        .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("fxqeof"))
                        .withNginxAppProtect(
                            new NginxDeploymentPropertiesNginxAppProtect().withWebApplicationFirewallSettings(
                                new WebApplicationFirewallSettings().withActivationState(ActivationState.ENABLED))))
                .withIdentity(new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("rwjfe", new UserIdentityProperties(), "phut",
                        new UserIdentityProperties(), "ftyxolniw", new UserIdentityProperties())))
                .withSku(new ResourceSku().withName("cukjf"));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentInner.class);
        Assertions.assertEquals("iawxklry", model.location());
        Assertions.assertEquals("ckbasyypndd", model.tags().get("sgcbac"));
        Assertions.assertEquals("phlxa",
            model.properties().networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("wzo",
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.STATIC,
            model.properties()
                .networkProfile()
                .frontEndIpConfiguration()
                .privateIpAddresses()
                .get(0)
                .privateIpAllocationMethod());
        Assertions.assertEquals("felluwfzitonpe",
            model.properties().networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("epoo", model.properties().networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertTrue(model.properties().enableDiagnosticsSupport());
        Assertions.assertEquals("eotusivyevc", model.properties().logging().storageAccount().accountName());
        Assertions.assertEquals("qi", model.properties().logging().storageAccount().containerName());
        Assertions.assertEquals(422843266, model.properties().scalingProperties().capacity());
        Assertions.assertEquals("bwjzr", model.properties().scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(1668036347, model.properties().scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(1055539147, model.properties().scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("mvtzfkufub", model.properties().autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("fxqeof", model.properties().userProfile().preferredEmail());
        Assertions.assertEquals(ActivationState.ENABLED,
            model.properties().nginxAppProtect().webApplicationFirewallSettings().activationState());
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("cukjf", model.sku().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
