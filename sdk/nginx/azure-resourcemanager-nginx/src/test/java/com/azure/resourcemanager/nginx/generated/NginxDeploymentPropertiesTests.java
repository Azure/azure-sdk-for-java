// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.NginxDeploymentProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"nginxVersion\":\"yncocpecfvmmcoo\",\"managedResourceGroup\":\"xlzevgbmqjqabcy\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{\"id\":\"lzu\"},{\"id\":\"c\"},{\"id\":\"nfnbacfionlebxe\"},{\"id\":\"gtzxdpn\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"wxrjfeallnwsub\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"ampmngnz\"}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"aqw\"}},\"ipAddress\":\"chcbonqvpkvlrxnj\",\"enableDiagnosticsSupport\":false,\"logging\":{\"storageAccount\":{\"accountName\":\"heoflokeyyienjbd\",\"containerName\":\"tgrhpdjpjumas\"}},\"scalingProperties\":{\"capacity\":1680868694},\"userProfile\":{\"preferredEmail\":\"yegu\"}}")
            .toObject(NginxDeploymentProperties.class);
        Assertions.assertEquals("xlzevgbmqjqabcy", model.managedResourceGroup());
        Assertions.assertEquals("lzu",
            model.networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("wxrjfeallnwsub",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.STATIC,
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("ampmngnz",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("aqw", model.networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(false, model.enableDiagnosticsSupport());
        Assertions.assertEquals("heoflokeyyienjbd", model.logging().storageAccount().accountName());
        Assertions.assertEquals("tgrhpdjpjumas", model.logging().storageAccount().containerName());
        Assertions.assertEquals(1680868694, model.scalingProperties().capacity());
        Assertions.assertEquals("yegu", model.userProfile().preferredEmail());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentProperties model = new NginxDeploymentProperties().withManagedResourceGroup("xlzevgbmqjqabcy")
            .withNetworkProfile(new NginxNetworkProfile()
                .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration().withPublicIpAddresses(Arrays.asList(
                    new NginxPublicIpAddress().withId("lzu"), new NginxPublicIpAddress().withId("c"),
                    new NginxPublicIpAddress().withId("nfnbacfionlebxe"), new NginxPublicIpAddress().withId("gtzxdpn")))
                    .withPrivateIpAddresses(
                        Arrays.asList(new NginxPrivateIpAddress().withPrivateIpAddress("wxrjfeallnwsub")
                            .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                            .withSubnetId("ampmngnz"))))
                .withNetworkInterfaceConfiguration(new NginxNetworkInterfaceConfiguration().withSubnetId("aqw")))
            .withEnableDiagnosticsSupport(false)
            .withLogging(new NginxLogging().withStorageAccount(
                new NginxStorageAccount().withAccountName("heoflokeyyienjbd").withContainerName("tgrhpdjpjumas")))
            .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(1680868694))
            .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("yegu"));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentProperties.class);
        Assertions.assertEquals("xlzevgbmqjqabcy", model.managedResourceGroup());
        Assertions.assertEquals("lzu",
            model.networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("wxrjfeallnwsub",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.STATIC,
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("ampmngnz",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("aqw", model.networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertEquals(false, model.enableDiagnosticsSupport());
        Assertions.assertEquals("heoflokeyyienjbd", model.logging().storageAccount().accountName());
        Assertions.assertEquals("tgrhpdjpjumas", model.logging().storageAccount().containerName());
        Assertions.assertEquals(1680868694, model.scalingProperties().capacity());
        Assertions.assertEquals("yegu", model.userProfile().preferredEmail());
    }
}
