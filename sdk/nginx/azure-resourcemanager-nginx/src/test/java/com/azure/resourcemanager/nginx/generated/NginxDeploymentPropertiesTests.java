// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.nginx.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.nginx.models.ActivationState;
import com.azure.resourcemanager.nginx.models.AutoUpgradeProfile;
import com.azure.resourcemanager.nginx.models.NginxDeploymentProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentPropertiesNginxAppProtect;
import com.azure.resourcemanager.nginx.models.NginxDeploymentScalingProperties;
import com.azure.resourcemanager.nginx.models.NginxDeploymentUserProfile;
import com.azure.resourcemanager.nginx.models.NginxFrontendIpConfiguration;
import com.azure.resourcemanager.nginx.models.NginxLogging;
import com.azure.resourcemanager.nginx.models.NginxNetworkInterfaceConfiguration;
import com.azure.resourcemanager.nginx.models.NginxNetworkProfile;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAddress;
import com.azure.resourcemanager.nginx.models.NginxPrivateIpAllocationMethod;
import com.azure.resourcemanager.nginx.models.NginxPublicIpAddress;
import com.azure.resourcemanager.nginx.models.NginxStorageAccount;
import com.azure.resourcemanager.nginx.models.ScaleProfile;
import com.azure.resourcemanager.nginx.models.ScaleProfileCapacity;
import com.azure.resourcemanager.nginx.models.WebApplicationFirewallSettings;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NginxDeploymentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NginxDeploymentProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"nginxVersion\":\"mglougpbkw\",\"networkProfile\":{\"frontEndIPConfiguration\":{\"publicIPAddresses\":[{\"id\":\"qktapspwgcuert\"},{\"id\":\"kdosvqw\"}],\"privateIPAddresses\":[{\"privateIPAddress\":\"gbbjfddgmbmbe\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"htqqrolfp\"},{\"privateIPAddress\":\"s\",\"privateIPAllocationMethod\":\"Static\",\"subnetId\":\"qux\"},{\"privateIPAddress\":\"jyj\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnetId\":\"o\"}]},\"networkInterfaceConfiguration\":{\"subnetId\":\"rtxilner\"}},\"ipAddress\":\"jysvl\",\"enableDiagnosticsSupport\":true,\"logging\":{\"storageAccount\":{\"accountName\":\"awrlyx\",\"containerName\":\"kcprbnw\"}},\"scalingProperties\":{\"capacity\":19976049,\"autoScaleSettings\":{\"profiles\":[{\"name\":\"bvpyss\",\"capacity\":{\"min\":2030092975,\"max\":881911115}},{\"name\":\"rujqg\",\"capacity\":{\"min\":1493631585,\"max\":1745806154}},{\"name\":\"uouq\",\"capacity\":{\"min\":1747028439,\"max\":1853724475}}]}},\"autoUpgradeProfile\":{\"upgradeChannel\":\"zw\"},\"userProfile\":{\"preferredEmail\":\"uitnwuiz\"},\"nginxAppProtect\":{\"webApplicationFirewallSettings\":{\"activationState\":\"Enabled\"},\"webApplicationFirewallStatus\":{\"wafRelease\":\"izuckyfihrfidfvz\",\"attackSignaturesPackage\":{\"version\":\"zuhtymwisdkfthwx\",\"revisionDatetime\":\"2021-10-31T03:21:56Z\"},\"botSignaturesPackage\":{\"version\":\"eiwaopvkmi\",\"revisionDatetime\":\"2021-06-21T07:18:55Z\"},\"threatCampaignsPackage\":{\"version\":\"mxdcufufsrp\",\"revisionDatetime\":\"2021-09-01T13:41:02Z\"},\"componentVersions\":{\"wafEngineVersion\":\"idnsezcxtb\",\"wafNginxVersion\":\"sgfyccsnew\"}}},\"dataplaneApiEndpoint\":\"wzjeiach\"}")
            .toObject(NginxDeploymentProperties.class);
        Assertions.assertEquals("qktapspwgcuert",
            model.networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("gbbjfddgmbmbe",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("htqqrolfp",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("rtxilner", model.networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertTrue(model.enableDiagnosticsSupport());
        Assertions.assertEquals("awrlyx", model.logging().storageAccount().accountName());
        Assertions.assertEquals("kcprbnw", model.logging().storageAccount().containerName());
        Assertions.assertEquals(19976049, model.scalingProperties().capacity());
        Assertions.assertEquals("bvpyss", model.scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(2030092975, model.scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(881911115, model.scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("zw", model.autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("uitnwuiz", model.userProfile().preferredEmail());
        Assertions.assertEquals(ActivationState.ENABLED,
            model.nginxAppProtect().webApplicationFirewallSettings().activationState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NginxDeploymentProperties model = new NginxDeploymentProperties()
            .withNetworkProfile(new NginxNetworkProfile()
                .withFrontEndIpConfiguration(new NginxFrontendIpConfiguration()
                    .withPublicIpAddresses(Arrays.asList(new NginxPublicIpAddress().withId("qktapspwgcuert"),
                        new NginxPublicIpAddress().withId("kdosvqw")))
                    .withPrivateIpAddresses(Arrays.asList(
                        new NginxPrivateIpAddress().withPrivateIpAddress("gbbjfddgmbmbe")
                            .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.DYNAMIC)
                            .withSubnetId("htqqrolfp"),
                        new NginxPrivateIpAddress().withPrivateIpAddress("s")
                            .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.STATIC)
                            .withSubnetId("qux"),
                        new NginxPrivateIpAddress().withPrivateIpAddress("jyj")
                            .withPrivateIpAllocationMethod(NginxPrivateIpAllocationMethod.DYNAMIC)
                            .withSubnetId("o"))))
                .withNetworkInterfaceConfiguration(new NginxNetworkInterfaceConfiguration().withSubnetId("rtxilner")))
            .withEnableDiagnosticsSupport(true)
            .withLogging(new NginxLogging()
                .withStorageAccount(new NginxStorageAccount().withAccountName("awrlyx").withContainerName("kcprbnw")))
            .withScalingProperties(new NginxDeploymentScalingProperties().withCapacity(19976049)
                .withProfiles(Arrays.asList(
                    new ScaleProfile().withName("bvpyss")
                        .withCapacity(new ScaleProfileCapacity().withMin(2030092975).withMax(881911115)),
                    new ScaleProfile().withName("rujqg")
                        .withCapacity(new ScaleProfileCapacity().withMin(1493631585).withMax(1745806154)),
                    new ScaleProfile().withName("uouq")
                        .withCapacity(new ScaleProfileCapacity().withMin(1747028439).withMax(1853724475)))))
            .withAutoUpgradeProfile(new AutoUpgradeProfile().withUpgradeChannel("zw"))
            .withUserProfile(new NginxDeploymentUserProfile().withPreferredEmail("uitnwuiz"))
            .withNginxAppProtect(new NginxDeploymentPropertiesNginxAppProtect().withWebApplicationFirewallSettings(
                new WebApplicationFirewallSettings().withActivationState(ActivationState.ENABLED)));
        model = BinaryData.fromObject(model).toObject(NginxDeploymentProperties.class);
        Assertions.assertEquals("qktapspwgcuert",
            model.networkProfile().frontEndIpConfiguration().publicIpAddresses().get(0).id());
        Assertions.assertEquals("gbbjfddgmbmbe",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAddress());
        Assertions.assertEquals(NginxPrivateIpAllocationMethod.DYNAMIC,
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).privateIpAllocationMethod());
        Assertions.assertEquals("htqqrolfp",
            model.networkProfile().frontEndIpConfiguration().privateIpAddresses().get(0).subnetId());
        Assertions.assertEquals("rtxilner", model.networkProfile().networkInterfaceConfiguration().subnetId());
        Assertions.assertTrue(model.enableDiagnosticsSupport());
        Assertions.assertEquals("awrlyx", model.logging().storageAccount().accountName());
        Assertions.assertEquals("kcprbnw", model.logging().storageAccount().containerName());
        Assertions.assertEquals(19976049, model.scalingProperties().capacity());
        Assertions.assertEquals("bvpyss", model.scalingProperties().profiles().get(0).name());
        Assertions.assertEquals(2030092975, model.scalingProperties().profiles().get(0).capacity().min());
        Assertions.assertEquals(881911115, model.scalingProperties().profiles().get(0).capacity().max());
        Assertions.assertEquals("zw", model.autoUpgradeProfile().upgradeChannel());
        Assertions.assertEquals("uitnwuiz", model.userProfile().preferredEmail());
        Assertions.assertEquals(ActivationState.ENABLED,
            model.nginxAppProtect().webApplicationFirewallSettings().activationState());
    }
}
