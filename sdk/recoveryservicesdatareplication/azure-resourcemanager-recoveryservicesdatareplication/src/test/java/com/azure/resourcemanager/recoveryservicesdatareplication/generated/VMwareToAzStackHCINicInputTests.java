// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMNicSelection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHCINicInput;
import org.junit.jupiter.api.Assertions;

public final class VMwareToAzStackHCINicInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMwareToAzStackHCINicInput model = BinaryData.fromString(
            "{\"nicId\":\"ttadijae\",\"label\":\"kmr\",\"networkName\":\"eekpndz\",\"targetNetworkId\":\"pmudqmeqwig\",\"testNetworkId\":\"bu\",\"selectionTypeForFailover\":\"SelectedByDefault\",\"isStaticIpMigrationEnabled\":false,\"isMacMigrationEnabled\":false}")
            .toObject(VMwareToAzStackHCINicInput.class);
        Assertions.assertEquals("ttadijae", model.nicId());
        Assertions.assertEquals("kmr", model.label());
        Assertions.assertEquals("pmudqmeqwig", model.targetNetworkId());
        Assertions.assertEquals("bu", model.testNetworkId());
        Assertions.assertEquals(VMNicSelection.SELECTED_BY_DEFAULT, model.selectionTypeForFailover());
        Assertions.assertFalse(model.isStaticIpMigrationEnabled());
        Assertions.assertFalse(model.isMacMigrationEnabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMwareToAzStackHCINicInput model = new VMwareToAzStackHCINicInput().withNicId("ttadijae")
            .withLabel("kmr")
            .withTargetNetworkId("pmudqmeqwig")
            .withTestNetworkId("bu")
            .withSelectionTypeForFailover(VMNicSelection.SELECTED_BY_DEFAULT)
            .withIsStaticIpMigrationEnabled(false)
            .withIsMacMigrationEnabled(false);
        model = BinaryData.fromObject(model).toObject(VMwareToAzStackHCINicInput.class);
        Assertions.assertEquals("ttadijae", model.nicId());
        Assertions.assertEquals("kmr", model.label());
        Assertions.assertEquals("pmudqmeqwig", model.targetNetworkId());
        Assertions.assertEquals("bu", model.testNetworkId());
        Assertions.assertEquals(VMNicSelection.SELECTED_BY_DEFAULT, model.selectionTypeForFailover());
        Assertions.assertFalse(model.isStaticIpMigrationEnabled());
        Assertions.assertFalse(model.isMacMigrationEnabled());
    }
}
