// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryservicesdatareplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.EmailConfigurationModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.EmailConfigurationModelProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class EmailConfigurationsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"sendToOwners\":true,\"customEmailAddresses\":[\"joylh\",\"lmuoyxprimrsopte\"],\"locale\":\"jme\"},\"systemData\":{\"createdBy\":\"stvasylwxdzaumw\",\"createdByType\":\"ohguuf\",\"createdAt\":\"2021-08-01T12:27:53Z\",\"lastModifiedBy\":\"yjathwtzo\",\"lastModifiedByType\":\"a\",\"lastModifiedAt\":\"2021-04-17T00:08:58Z\"},\"id\":\"m\",\"name\":\"xmeb\",\"type\":\"jscjpahl\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryservicesdatareplicationManager manager =
            RecoveryservicesdatareplicationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        EmailConfigurationModel response =
            manager
                .emailConfigurations()
                .define("ppipifhpfeoa")
                .withExistingReplicationVault("euutlwxezwzh", "kvbwnhhtqlgeh")
                .withProperties(
                    new EmailConfigurationModelProperties()
                        .withSendToOwners(false)
                        .withCustomEmailAddresses(Arrays.asList("xtxj", "sheafid"))
                        .withLocale("ugsresmkssjhoi"))
                .create();

        Assertions.assertEquals(true, response.properties().sendToOwners());
        Assertions.assertEquals("joylh", response.properties().customEmailAddresses().get(0));
        Assertions.assertEquals("jme", response.properties().locale());
    }
}
