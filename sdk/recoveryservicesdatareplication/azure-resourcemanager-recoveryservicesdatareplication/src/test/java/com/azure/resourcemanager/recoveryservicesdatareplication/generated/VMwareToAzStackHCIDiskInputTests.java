// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DiskControllerInputs;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHCIDiskInput;
import org.junit.jupiter.api.Assertions;

public final class VMwareToAzStackHCIDiskInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMwareToAzStackHCIDiskInput model = BinaryData.fromString(
            "{\"diskId\":\"hwtzolb\",\"storageContainerId\":\"mwmdxmebwjscjpa\",\"isDynamic\":false,\"diskSizeGB\":7990382250807364518,\"diskFileFormat\":\"a\",\"isOsDisk\":false,\"diskBlockSize\":8219496684410268730,\"diskLogicalSectorSize\":7283922573599381265,\"diskPhysicalSectorSize\":8062924481236922707,\"diskIdentifier\":\"xyi\",\"diskController\":{\"controllerName\":\"dt\",\"controllerId\":1997064075,\"controllerLocation\":1410442260}}")
            .toObject(VMwareToAzStackHCIDiskInput.class);
        Assertions.assertEquals("hwtzolb", model.diskId());
        Assertions.assertEquals("mwmdxmebwjscjpa", model.storageContainerId());
        Assertions.assertFalse(model.isDynamic());
        Assertions.assertEquals(7990382250807364518L, model.diskSizeGB());
        Assertions.assertEquals("a", model.diskFileFormat());
        Assertions.assertFalse(model.isOsDisk());
        Assertions.assertEquals(8219496684410268730L, model.diskBlockSize());
        Assertions.assertEquals(7283922573599381265L, model.diskLogicalSectorSize());
        Assertions.assertEquals(8062924481236922707L, model.diskPhysicalSectorSize());
        Assertions.assertEquals("xyi", model.diskIdentifier());
        Assertions.assertEquals("dt", model.diskController().controllerName());
        Assertions.assertEquals(1997064075, model.diskController().controllerId());
        Assertions.assertEquals(1410442260, model.diskController().controllerLocation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMwareToAzStackHCIDiskInput model = new VMwareToAzStackHCIDiskInput().withDiskId("hwtzolb")
            .withStorageContainerId("mwmdxmebwjscjpa")
            .withIsDynamic(false)
            .withDiskSizeGB(7990382250807364518L)
            .withDiskFileFormat("a")
            .withIsOsDisk(false)
            .withDiskBlockSize(8219496684410268730L)
            .withDiskLogicalSectorSize(7283922573599381265L)
            .withDiskPhysicalSectorSize(8062924481236922707L)
            .withDiskIdentifier("xyi")
            .withDiskController(new DiskControllerInputs().withControllerName("dt")
                .withControllerId(1997064075)
                .withControllerLocation(1410442260));
        model = BinaryData.fromObject(model).toObject(VMwareToAzStackHCIDiskInput.class);
        Assertions.assertEquals("hwtzolb", model.diskId());
        Assertions.assertEquals("mwmdxmebwjscjpa", model.storageContainerId());
        Assertions.assertFalse(model.isDynamic());
        Assertions.assertEquals(7990382250807364518L, model.diskSizeGB());
        Assertions.assertEquals("a", model.diskFileFormat());
        Assertions.assertFalse(model.isOsDisk());
        Assertions.assertEquals(8219496684410268730L, model.diskBlockSize());
        Assertions.assertEquals(7283922573599381265L, model.diskLogicalSectorSize());
        Assertions.assertEquals(8062924481236922707L, model.diskPhysicalSectorSize());
        Assertions.assertEquals("xyi", model.diskIdentifier());
        Assertions.assertEquals("dt", model.diskController().controllerName());
        Assertions.assertEquals(1997064075, model.diskController().controllerId());
        Assertions.assertEquals(1410442260, model.diskController().controllerLocation());
    }
}
