// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ReplicationVaultType;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModelProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VaultsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"serviceResourceId\":\"mr\",\"vaultType\":\"Migrate\"},\"systemData\":{\"createdBy\":\"wwpbmzgwesyd\",\"createdByType\":\"wefohecbvo\",\"createdAt\":\"2021-05-24T19:06:36Z\",\"lastModifiedBy\":\"yqleallklmtk\",\"lastModifiedByType\":\"owkxxpv\",\"lastModifiedAt\":\"2021-05-25T20:35:41Z\"},\"location\":\"fjmzsyzfho\",\"tags\":{\"unsjlpjrtwszhvvu\":\"ikcyyc\"},\"id\":\"c\",\"name\":\"hvtrrmhwrbfdpyf\",\"type\":\"ubhvj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesDataReplicationManager manager = RecoveryServicesDataReplicationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        VaultModel response = manager.vaults()
            .define("oshbragapyy")
            .withRegion("gschorimkrsrr")
            .withExistingResourceGroup("ukphaimmoiroq")
            .withTags(mapOf("ldpuviy", "cso", "olhbhlvb", "caab", "sfar", "xuqibsxtkcudf", "gf", "siowlkjxnqpv"))
            .withProperties(new VaultModelProperties().withVaultType(ReplicationVaultType.DISASTER_RECOVERY))
            .create();

        Assertions.assertEquals("fjmzsyzfho", response.location());
        Assertions.assertEquals("ikcyyc", response.tags().get("unsjlpjrtwszhvvu"));
        Assertions.assertEquals(ReplicationVaultType.MIGRATE, response.properties().vaultType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
