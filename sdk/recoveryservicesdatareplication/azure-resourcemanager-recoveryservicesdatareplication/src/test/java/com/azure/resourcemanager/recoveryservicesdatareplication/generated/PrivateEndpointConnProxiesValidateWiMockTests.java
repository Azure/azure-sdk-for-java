// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.PrivateEndpointConnectionProxyInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ConnectionDetails;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.GroupConnectivityInformation;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionProxy;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionProxyProperties;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceConnection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceProxy;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.RemotePrivateEndpoint;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.RemotePrivateEndpointConnection;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnProxiesValidateWiMockTests {
    @Test
    public void testValidateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"remotePrivateEndpoint\":{\"id\":\"azipbhpwvqsg\",\"privateLinkServiceConnections\":[{\"name\":\"uzivensrpmeyyvp\",\"groupIds\":[\"tlbijpzg\"],\"requestMessage\":\"srfhf\"},{\"name\":\"lmknbnxwcdom\",\"groupIds\":[\"fqawzfgbrttui\",\"clkiexhajl\",\"n\",\"hiqfyuttdiy\"],\"requestMessage\":\"pvn\"},{\"name\":\"wmtxkyctwwgz\",\"groupIds\":[\"l\",\"ecvo\"],\"requestMessage\":\"gzyvnee\"}],\"manualPrivateLinkServiceConnections\":[{\"name\":\"gh\",\"groupIds\":[\"qqtlffhzbkrkj\",\"javfqn\"],\"requestMessage\":\"nq\"}],\"privateLinkServiceProxies\":[{\"id\":\"ogiyetes\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{},{}]},{\"id\":\"ztjhqtfbovnynkbw\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{},{},{}]},{\"id\":\"p\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{}]}],\"connectionDetails\":[{\"id\":\"piaccxnafb\",\"privateIpAddress\":\"ro\",\"linkIdentifier\":\"tuovmaonurj\",\"groupId\":\"mghihp\",\"memberName\":\"cmslclblyjxltbs\"},{\"id\":\"scvsfxigctm\",\"privateIpAddress\":\"uupb\",\"linkIdentifier\":\"qccydrtceukdq\",\"groupId\":\"yihztgeqmg\",\"memberName\":\"gwldo\"}]}},\"etag\":\"hillce\",\"id\":\"ehuwaoa\",\"name\":\"uhicqllizstacsjv\",\"type\":\"rweft\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesDataReplicationManager manager = RecoveryServicesDataReplicationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnectionProxy response
            = manager.privateEndpointConnProxies()
                .validateWithResponse(
                    "jelaqacigele", "hdbvqvwzkjop", "beonrlkwzdq",
                    new PrivateEndpointConnectionProxyInner()
                        .withProperties(new PrivateEndpointConnectionProxyProperties()
                            .withRemotePrivateEndpoint(new RemotePrivateEndpoint().withId("akxcptsoqfyiaseq")
                                .withPrivateLinkServiceConnections(
                                    Arrays.asList(new PrivateLinkServiceConnection().withName("ttzrazisgyki")
                                        .withGroupIds(Arrays.asList("vanbwzohmnrxxbs", "jklinh"))
                                        .withRequestMessage("ptysprq")))
                                .withManualPrivateLinkServiceConnections(Arrays.asList(
                                    new PrivateLinkServiceConnection().withName("xojpslsvjgp")
                                        .withGroupIds(Arrays.asList("fiqwoy", "qvapcohhoucq", "q", "jxcx"))
                                        .withRequestMessage("zdcgdzbenr"),
                                    new PrivateLinkServiceConnection().withName("cawetzqddt")
                                        .withGroupIds(Arrays.asList("ljhznamtuatmzwcj", "nc", "tjzmi"))
                                        .withRequestMessage("gbgatzuuvbxn"),
                                    new PrivateLinkServiceConnection().withName("ebwgga")
                                        .withGroupIds(Arrays.asList("zlswvajqf", "t"))
                                        .withRequestMessage("joqza"),
                                    new PrivateLinkServiceConnection().withName("nwqrjzfrgqh")
                                        .withGroupIds(Arrays.asList("cmbuocnjrohmbpy", "yx", "meblyd", "vkfkmr"))
                                        .withRequestMessage("xne")))
                                .withPrivateLinkServiceProxies(Arrays.asList(new PrivateLinkServiceProxy().withId("tod")
                                    .withRemotePrivateLinkServiceConnectionState(
                                        new PrivateLinkServiceConnectionState())
                                    .withRemotePrivateEndpointConnection(new RemotePrivateEndpointConnection())
                                    .withGroupConnectivityInformation(Arrays.asList(new GroupConnectivityInformation(),
                                        new GroupConnectivityInformation()))))
                                .withConnectionDetails(Arrays.asList(
                                    new ConnectionDetails().withId("ygvoavyunssxlgh")
                                        .withPrivateIpAddress("egjlgvvpa")
                                        .withLinkIdentifier("ksgbuxan")
                                        .withGroupId("ygdhgaqipirpiwr")
                                        .withMemberName("fulopmjnlexwhcb"),
                                    new ConnectionDetails().withId("ibkeph")
                                        .withPrivateIpAddress("uerct")
                                        .withLinkIdentifier("oyin")
                                        .withGroupId("pbrlcyrduczkgofx")
                                        .withMemberName("srucvcrrpcjtt")))))
                        .withEtag("t"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("azipbhpwvqsg", response.properties().remotePrivateEndpoint().id());
        Assertions.assertEquals("uzivensrpmeyyvp",
            response.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("tlbijpzg",
            response.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("srfhf",
            response.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("gh",
            response.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("qqtlffhzbkrkj",
            response.properties()
                .remotePrivateEndpoint()
                .manualPrivateLinkServiceConnections()
                .get(0)
                .groupIds()
                .get(0));
        Assertions.assertEquals("nq",
            response.properties()
                .remotePrivateEndpoint()
                .manualPrivateLinkServiceConnections()
                .get(0)
                .requestMessage());
        Assertions.assertEquals("ogiyetes",
            response.properties().remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals("piaccxnafb",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).id());
        Assertions.assertEquals("ro",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).privateIpAddress());
        Assertions.assertEquals("tuovmaonurj",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).linkIdentifier());
        Assertions.assertEquals("mghihp",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).groupId());
        Assertions.assertEquals("cmslclblyjxltbs",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).memberName());
        Assertions.assertEquals("hillce", response.etag());
    }
}
