// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ProtectedItemDynamicMemoryConfig;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMNicSelection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHciDiskInput;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHciNicInput;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHciProtectedItemModelCustomProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VMwareToAzStackHciProtectedItemModelCustomPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMwareToAzStackHciProtectedItemModelCustomProperties model =
            BinaryData
                .fromString(
                    "{\"instanceType\":\"VMwareToAzStackHCI\",\"activeLocation\":\"Primary\",\"targetHciClusterId\":\"cgzulwmmrqzzr\",\"targetArcClusterCustomLocationId\":\"jvpglydzgk\",\"targetAzStackHciClusterName\":\"qeevt\",\"storageContainerId\":\"epr\",\"targetResourceGroupId\":\"utnwytpzdmovzvf\",\"targetLocation\":\"awzqadfl\",\"customLocationRegion\":\"z\",\"disksToInclude\":[{\"diskId\":\"iglaecx\",\"storageContainerId\":\"t\",\"isDynamic\":false,\"diskSizeGB\":7263296405580029992,\"diskFileFormat\":\"vzm\",\"isOsDisk\":false},{\"diskId\":\"t\",\"storageContainerId\":\"dgxobfircl\",\"isDynamic\":false,\"diskSizeGB\":4446387025967127401,\"diskFileFormat\":\"ayzri\",\"isOsDisk\":true}],\"nicsToInclude\":[{\"nicId\":\"yawfvjlboxq\",\"label\":\"kjlmx\",\"networkName\":\"mdy\",\"targetNetworkId\":\"hdwdi\",\"testNetworkId\":\"umbnraauzzp\",\"selectionTypeForFailover\":\"SelectedByUserOverride\"}],\"protectedDisks\":[{\"storageContainerId\":\"sdzhezww\",\"storageContainerLocalPath\":\"iqyuvvfo\",\"sourceDiskId\":\"p\",\"sourceDiskName\":\"qyikvy\",\"seedDiskName\":\"uyav\",\"testMigrateDiskName\":\"wmn\",\"migrateDiskName\":\"ttijfybvpoekrs\",\"isOsDisk\":true,\"capacityInBytes\":2461369316947674371,\"isDynamic\":false,\"diskType\":\"gnjdgkynscliqhz\"},{\"storageContainerId\":\"xnkomtkubo\",\"storageContainerLocalPath\":\"pnvdxz\",\"sourceDiskId\":\"ihfrbbcevqa\",\"sourceDiskName\":\"ltd\",\"seedDiskName\":\"fkqojpy\",\"testMigrateDiskName\":\"gtrd\",\"migrateDiskName\":\"ifmzzsd\",\"isOsDisk\":false,\"capacityInBytes\":7207683080078231959,\"isDynamic\":false,\"diskType\":\"m\"}],\"protectedNics\":[{\"nicId\":\"wgck\",\"macAddress\":\"cxvdfffwafqrouda\",\"label\":\"avehhrvkbunzo\",\"isPrimaryNic\":true,\"networkName\":\"cxgkmoyxcdyui\",\"targetNetworkId\":\"mfdn\",\"testNetworkId\":\"ydvfvfcjnae\",\"selectionTypeForFailover\":\"SelectedByUserOverride\"}],\"targetVmBiosId\":\"vhmgorffukis\",\"targetVmName\":\"w\",\"hyperVGeneration\":\"zhwplefaxvxilc\",\"targetNetworkId\":\"gnhnzeyq\",\"testNetworkId\":\"jjfzqlqhycavo\",\"targetCpuCores\":281911697,\"isDynamicRam\":false,\"dynamicMemoryConfig\":{\"maximumMemoryInMegaBytes\":1627513098218533241,\"minimumMemoryInMegaBytes\":195420941787005324,\"targetMemoryBufferPercentage\":1327302833},\"targetMemoryInMegaBytes\":1658504364,\"osType\":\"lrariaawiu\",\"osName\":\"ydwqfbylyrf\",\"firmwareType\":\"agt\",\"fabricDiscoveryMachineId\":\"ojocqwogf\",\"sourceVmName\":\"jvusfzldmozux\",\"sourceCpuCores\":1764292422,\"sourceMemoryInMegaBytes\":99.89202208171204,\"runAsAccountId\":\"kadpysown\",\"sourceDraName\":\"tgkbugrjqctojc\",\"targetDraName\":\"isofieypefojyqd\",\"sourceApplianceName\":\"u\",\"targetApplianceName\":\"cp\",\"failoverRecoveryPointId\":\"wkhihihlhzdsqt\",\"lastRecoveryPointReceived\":\"2021-04-13T19:24:29Z\",\"lastRecoveryPointId\":\"gnowcjhfgmveca\",\"initialReplicationProgressPercentage\":1483507807,\"migrationProgressPercentage\":1291421637,\"resumeProgressPercentage\":2043767833,\"resyncProgressPercentage\":966273213,\"resyncRetryCount\":5608617904673355549,\"resyncRequired\":true,\"resyncState\":\"None\",\"performAutoResync\":true,\"resumeRetryCount\":7123541307467139161,\"lastReplicationUpdateTime\":\"2020-12-25T14:11:18Z\"}")
                .toObject(VMwareToAzStackHciProtectedItemModelCustomProperties.class);
        Assertions.assertEquals("cgzulwmmrqzzr", model.targetHciClusterId());
        Assertions.assertEquals("jvpglydzgk", model.targetArcClusterCustomLocationId());
        Assertions.assertEquals("epr", model.storageContainerId());
        Assertions.assertEquals("utnwytpzdmovzvf", model.targetResourceGroupId());
        Assertions.assertEquals("z", model.customLocationRegion());
        Assertions.assertEquals("iglaecx", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("t", model.disksToInclude().get(0).storageContainerId());
        Assertions.assertEquals(false, model.disksToInclude().get(0).isDynamic());
        Assertions.assertEquals(7263296405580029992L, model.disksToInclude().get(0).diskSizeGB());
        Assertions.assertEquals("vzm", model.disksToInclude().get(0).diskFileFormat());
        Assertions.assertEquals(false, model.disksToInclude().get(0).isOsDisk());
        Assertions.assertEquals("yawfvjlboxq", model.nicsToInclude().get(0).nicId());
        Assertions.assertEquals("kjlmx", model.nicsToInclude().get(0).label());
        Assertions.assertEquals("hdwdi", model.nicsToInclude().get(0).targetNetworkId());
        Assertions.assertEquals("umbnraauzzp", model.nicsToInclude().get(0).testNetworkId());
        Assertions
            .assertEquals(
                VMNicSelection.SELECTED_BY_USER_OVERRIDE, model.nicsToInclude().get(0).selectionTypeForFailover());
        Assertions.assertEquals("w", model.targetVmName());
        Assertions.assertEquals("zhwplefaxvxilc", model.hyperVGeneration());
        Assertions.assertEquals("gnhnzeyq", model.targetNetworkId());
        Assertions.assertEquals("jjfzqlqhycavo", model.testNetworkId());
        Assertions.assertEquals(281911697, model.targetCpuCores());
        Assertions.assertEquals(false, model.isDynamicRam());
        Assertions.assertEquals(1627513098218533241L, model.dynamicMemoryConfig().maximumMemoryInMegaBytes());
        Assertions.assertEquals(195420941787005324L, model.dynamicMemoryConfig().minimumMemoryInMegaBytes());
        Assertions.assertEquals(1327302833, model.dynamicMemoryConfig().targetMemoryBufferPercentage());
        Assertions.assertEquals(1658504364, model.targetMemoryInMegaBytes());
        Assertions.assertEquals("ojocqwogf", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("kadpysown", model.runAsAccountId());
        Assertions.assertEquals("tgkbugrjqctojc", model.sourceDraName());
        Assertions.assertEquals("isofieypefojyqd", model.targetDraName());
        Assertions.assertEquals(true, model.performAutoResync());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMwareToAzStackHciProtectedItemModelCustomProperties model =
            new VMwareToAzStackHciProtectedItemModelCustomProperties()
                .withTargetHciClusterId("cgzulwmmrqzzr")
                .withTargetArcClusterCustomLocationId("jvpglydzgk")
                .withStorageContainerId("epr")
                .withTargetResourceGroupId("utnwytpzdmovzvf")
                .withCustomLocationRegion("z")
                .withDisksToInclude(
                    Arrays
                        .asList(
                            new VMwareToAzStackHciDiskInput()
                                .withDiskId("iglaecx")
                                .withStorageContainerId("t")
                                .withIsDynamic(false)
                                .withDiskSizeGB(7263296405580029992L)
                                .withDiskFileFormat("vzm")
                                .withIsOsDisk(false),
                            new VMwareToAzStackHciDiskInput()
                                .withDiskId("t")
                                .withStorageContainerId("dgxobfircl")
                                .withIsDynamic(false)
                                .withDiskSizeGB(4446387025967127401L)
                                .withDiskFileFormat("ayzri")
                                .withIsOsDisk(true)))
                .withNicsToInclude(
                    Arrays
                        .asList(
                            new VMwareToAzStackHciNicInput()
                                .withNicId("yawfvjlboxq")
                                .withLabel("kjlmx")
                                .withTargetNetworkId("hdwdi")
                                .withTestNetworkId("umbnraauzzp")
                                .withSelectionTypeForFailover(VMNicSelection.SELECTED_BY_USER_OVERRIDE)))
                .withTargetVmName("w")
                .withHyperVGeneration("zhwplefaxvxilc")
                .withTargetNetworkId("gnhnzeyq")
                .withTestNetworkId("jjfzqlqhycavo")
                .withTargetCpuCores(281911697)
                .withIsDynamicRam(false)
                .withDynamicMemoryConfig(
                    new ProtectedItemDynamicMemoryConfig()
                        .withMaximumMemoryInMegaBytes(1627513098218533241L)
                        .withMinimumMemoryInMegaBytes(195420941787005324L)
                        .withTargetMemoryBufferPercentage(1327302833))
                .withTargetMemoryInMegaBytes(1658504364)
                .withFabricDiscoveryMachineId("ojocqwogf")
                .withRunAsAccountId("kadpysown")
                .withSourceDraName("tgkbugrjqctojc")
                .withTargetDraName("isofieypefojyqd")
                .withPerformAutoResync(true);
        model = BinaryData.fromObject(model).toObject(VMwareToAzStackHciProtectedItemModelCustomProperties.class);
        Assertions.assertEquals("cgzulwmmrqzzr", model.targetHciClusterId());
        Assertions.assertEquals("jvpglydzgk", model.targetArcClusterCustomLocationId());
        Assertions.assertEquals("epr", model.storageContainerId());
        Assertions.assertEquals("utnwytpzdmovzvf", model.targetResourceGroupId());
        Assertions.assertEquals("z", model.customLocationRegion());
        Assertions.assertEquals("iglaecx", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("t", model.disksToInclude().get(0).storageContainerId());
        Assertions.assertEquals(false, model.disksToInclude().get(0).isDynamic());
        Assertions.assertEquals(7263296405580029992L, model.disksToInclude().get(0).diskSizeGB());
        Assertions.assertEquals("vzm", model.disksToInclude().get(0).diskFileFormat());
        Assertions.assertEquals(false, model.disksToInclude().get(0).isOsDisk());
        Assertions.assertEquals("yawfvjlboxq", model.nicsToInclude().get(0).nicId());
        Assertions.assertEquals("kjlmx", model.nicsToInclude().get(0).label());
        Assertions.assertEquals("hdwdi", model.nicsToInclude().get(0).targetNetworkId());
        Assertions.assertEquals("umbnraauzzp", model.nicsToInclude().get(0).testNetworkId());
        Assertions
            .assertEquals(
                VMNicSelection.SELECTED_BY_USER_OVERRIDE, model.nicsToInclude().get(0).selectionTypeForFailover());
        Assertions.assertEquals("w", model.targetVmName());
        Assertions.assertEquals("zhwplefaxvxilc", model.hyperVGeneration());
        Assertions.assertEquals("gnhnzeyq", model.targetNetworkId());
        Assertions.assertEquals("jjfzqlqhycavo", model.testNetworkId());
        Assertions.assertEquals(281911697, model.targetCpuCores());
        Assertions.assertEquals(false, model.isDynamicRam());
        Assertions.assertEquals(1627513098218533241L, model.dynamicMemoryConfig().maximumMemoryInMegaBytes());
        Assertions.assertEquals(195420941787005324L, model.dynamicMemoryConfig().minimumMemoryInMegaBytes());
        Assertions.assertEquals(1327302833, model.dynamicMemoryConfig().targetMemoryBufferPercentage());
        Assertions.assertEquals(1658504364, model.targetMemoryInMegaBytes());
        Assertions.assertEquals("ojocqwogf", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("kadpysown", model.runAsAccountId());
        Assertions.assertEquals("tgkbugrjqctojc", model.sourceDraName());
        Assertions.assertEquals("isofieypefojyqd", model.targetDraName());
        Assertions.assertEquals(true, model.performAutoResync());
    }
}
