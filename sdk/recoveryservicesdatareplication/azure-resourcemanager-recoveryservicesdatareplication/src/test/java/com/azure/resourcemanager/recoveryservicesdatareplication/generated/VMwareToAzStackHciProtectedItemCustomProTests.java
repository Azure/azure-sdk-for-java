// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DiskControllerInputs;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ProtectedItemDynamicMemoryConfig;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMNicSelection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHCIDiskInput;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHCINicInput;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMwareToAzStackHciProtectedItemCustomProps;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VMwareToAzStackHciProtectedItemCustomProTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMwareToAzStackHciProtectedItemCustomProps model = BinaryData.fromString(
            "{\"instanceType\":\"VMwareToAzStackHCI\",\"activeLocation\":\"Recovery\",\"targetHciClusterId\":\"wpchwahf\",\"targetArcClusterCustomLocationId\":\"ousnfepgfewe\",\"targetAzStackHciClusterName\":\"l\",\"storageContainerId\":\"xgncxyk\",\"targetResourceGroupId\":\"hdjhlimmbcx\",\"targetLocation\":\"bcporxvxcjzhqizx\",\"customLocationRegion\":\"pxtgqscjav\",\"disksToInclude\":[{\"diskId\":\"juhdqazkmtgguwpi\",\"storageContainerId\":\"ajc\",\"isDynamic\":false,\"diskSizeGB\":6883894318237557893,\"diskFileFormat\":\"hfcf\",\"isOsDisk\":true,\"diskBlockSize\":4531060317602742990,\"diskLogicalSectorSize\":2886005627827893214,\"diskPhysicalSectorSize\":2887426698518376755,\"diskIdentifier\":\"nzqodfvpg\",\"diskController\":{\"controllerName\":\"oxgsgbpfgzdjtx\",\"controllerId\":1656349594,\"controllerLocation\":2030623139}}],\"nicsToInclude\":[{\"nicId\":\"bqvgaqv\",\"label\":\"gafcqu\",\"networkName\":\"dvetnws\",\"targetNetworkId\":\"utnw\",\"testNetworkId\":\"uycvuzhyrmewip\",\"selectionTypeForFailover\":\"SelectedByUserOverride\",\"isStaticIpMigrationEnabled\":false,\"isMacMigrationEnabled\":false},{\"nicId\":\"ukuqgsj\",\"label\":\"xundxgk\",\"networkName\":\"wzhhzjhfjmhvvmuv\",\"targetNetworkId\":\"mun\",\"testNetworkId\":\"sx\",\"selectionTypeForFailover\":\"SelectedByUser\",\"isStaticIpMigrationEnabled\":true,\"isMacMigrationEnabled\":true},{\"nicId\":\"zjyi\",\"label\":\"sasbhu\",\"networkName\":\"pohyuemslynsqyr\",\"targetNetworkId\":\"oobrlttyms\",\"testNetworkId\":\"ygqdnfwqzdz\",\"selectionTypeForFailover\":\"SelectedByUser\",\"isStaticIpMigrationEnabled\":false,\"isMacMigrationEnabled\":false},{\"nicId\":\"hnfhqlyvijouwi\",\"label\":\"kxoyzunbixxr\",\"networkName\":\"kvcpwpgclr\",\"targetNetworkId\":\"vtsoxf\",\"testNetworkId\":\"enxpmyyefr\",\"selectionTypeForFailover\":\"SelectedByDefault\",\"isStaticIpMigrationEnabled\":true,\"isMacMigrationEnabled\":false}],\"protectedDisks\":[{\"storageContainerId\":\"awaoqvmmbnpqfrt\",\"storageContainerLocalPath\":\"kzmegnitgvkxlz\",\"sourceDiskId\":\"drf\",\"sourceDiskName\":\"cealzxwh\",\"seedDiskName\":\"nsymoyqhlwigd\",\"testMigrateDiskName\":\"bkbxgomfa\",\"migrateDiskName\":\"wasqvdaeyyg\",\"isOsDisk\":false,\"capacityInBytes\":1487941149666255010,\"isDynamic\":true,\"diskType\":\"zbezkgimsidxasic\",\"diskBlockSize\":1821581039287836081,\"diskLogicalSectorSize\":4263543179549066035,\"diskPhysicalSectorSize\":3644953268271163513},{\"storageContainerId\":\"ocwah\",\"storageContainerLocalPath\":\"gat\",\"sourceDiskId\":\"a\",\"sourceDiskName\":\"hvjhhnakzyb\",\"seedDiskName\":\"jid\",\"testMigrateDiskName\":\"syxkyxvxevblb\",\"migrateDiskName\":\"dnlj\",\"isOsDisk\":false,\"capacityInBytes\":787143708098157956,\"isDynamic\":true,\"diskType\":\"unsmjbnkpp\",\"diskBlockSize\":3933133394775341003,\"diskLogicalSectorSize\":8200427919923501571,\"diskPhysicalSectorSize\":6584316541513993967},{\"storageContainerId\":\"zzgwklnsrm\",\"storageContainerLocalPath\":\"eycxcktpiymertee\",\"sourceDiskId\":\"mx\",\"sourceDiskName\":\"ekkkzd\",\"seedDiskName\":\"tkgdojbmxva\",\"testMigrateDiskName\":\"efdeesve\",\"migrateDiskName\":\"ijpxtx\",\"isOsDisk\":false,\"capacityInBytes\":7425481231307193610,\"isDynamic\":true,\"diskType\":\"sawddjibabxvi\",\"diskBlockSize\":6782004448644339111,\"diskLogicalSectorSize\":5573724016698721982,\"diskPhysicalSectorSize\":4322534596999486934}],\"protectedNics\":[{\"nicId\":\"tfgle\",\"macAddress\":\"m\",\"label\":\"bwpypqtgsfjacb\",\"isPrimaryNic\":false,\"networkName\":\"xudb\",\"targetNetworkId\":\"odhtnsirudhzm\",\"testNetworkId\":\"sckdlp\",\"selectionTypeForFailover\":\"SelectedByUserOverride\"},{\"nicId\":\"cxfailcfxwmdboxd\",\"macAddress\":\"sftufqobrjlna\",\"label\":\"cc\",\"isPrimaryNic\":false,\"networkName\":\"xkizvy\",\"targetNetworkId\":\"rzvul\",\"testNetworkId\":\"aaeranokqgukk\",\"selectionTypeForFailover\":\"SelectedByDefault\"},{\"nicId\":\"broyla\",\"macAddress\":\"ulcdisdosf\",\"label\":\"jsvg\",\"isPrimaryNic\":true,\"networkName\":\"r\",\"targetNetworkId\":\"ycy\",\"testNetworkId\":\"c\",\"selectionTypeForFailover\":\"NotSelected\"},{\"nicId\":\"cknfnwmbtmvpd\",\"macAddress\":\"dhttzaefedxihchr\",\"label\":\"k\",\"isPrimaryNic\":true,\"networkName\":\"dqns\",\"targetNetworkId\":\"zpbgtgkylkdg\",\"testNetworkId\":\"jeuut\",\"selectionTypeForFailover\":\"NotSelected\"}],\"targetVmBiosId\":\"z\",\"targetVmName\":\"hokvbwnh\",\"hyperVGeneration\":\"tqlgehgppi\",\"targetNetworkId\":\"fhpfeoajvgcxtx\",\"testNetworkId\":\"sheafid\",\"targetCpuCores\":1440296534,\"isDynamicRam\":false,\"dynamicMemoryConfig\":{\"maximumMemoryInMegaBytes\":9216614435431791768,\"minimumMemoryInMegaBytes\":2429484898684221909,\"targetMemoryBufferPercentage\":822115732},\"targetMemoryInMegaBytes\":1340673373,\"osType\":\"oiftxfkfwegprh\",\"osName\":\"ill\",\"firmwareType\":\"biqtgdq\",\"fabricDiscoveryMachineId\":\"hm\",\"sourceVmName\":\"sldrizetpwbral\",\"sourceCpuCores\":822345235,\"sourceMemoryInMegaBytes\":26.308241425095204,\"runAsAccountId\":\"bqzmizaka\",\"sourceFabricAgentName\":\"ankjpdnjzh\",\"targetFabricAgentName\":\"joylh\",\"sourceApplianceName\":\"muoyxprimr\",\"targetApplianceName\":\"pteecjme\",\"failoverRecoveryPointId\":\"ls\",\"lastRecoveryPointReceived\":\"2021-03-15T14:52:41Z\",\"lastRecoveryPointId\":\"ylw\",\"initialReplicationProgressPercentage\":936242066,\"migrationProgressPercentage\":2139579132,\"resumeProgressPercentage\":1824653896,\"resyncProgressPercentage\":1269284441,\"resyncRetryCount\":5246383159916073719,\"resyncRequired\":false,\"resyncState\":\"PreparedForResynchronization\",\"performAutoResync\":true,\"resumeRetryCount\":401880096293925108,\"lastReplicationUpdateTime\":\"2021-11-03T21:38:56Z\"}")
            .toObject(VMwareToAzStackHciProtectedItemCustomProps.class);
        Assertions.assertEquals("wpchwahf", model.targetHciClusterId());
        Assertions.assertEquals("ousnfepgfewe", model.targetArcClusterCustomLocationId());
        Assertions.assertEquals("xgncxyk", model.storageContainerId());
        Assertions.assertEquals("hdjhlimmbcx", model.targetResourceGroupId());
        Assertions.assertEquals("pxtgqscjav", model.customLocationRegion());
        Assertions.assertEquals("juhdqazkmtgguwpi", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("ajc", model.disksToInclude().get(0).storageContainerId());
        Assertions.assertFalse(model.disksToInclude().get(0).isDynamic());
        Assertions.assertEquals(6883894318237557893L, model.disksToInclude().get(0).diskSizeGB());
        Assertions.assertEquals("hfcf", model.disksToInclude().get(0).diskFileFormat());
        Assertions.assertTrue(model.disksToInclude().get(0).isOsDisk());
        Assertions.assertEquals(4531060317602742990L, model.disksToInclude().get(0).diskBlockSize());
        Assertions.assertEquals(2886005627827893214L, model.disksToInclude().get(0).diskLogicalSectorSize());
        Assertions.assertEquals(2887426698518376755L, model.disksToInclude().get(0).diskPhysicalSectorSize());
        Assertions.assertEquals("nzqodfvpg", model.disksToInclude().get(0).diskIdentifier());
        Assertions.assertEquals("oxgsgbpfgzdjtx", model.disksToInclude().get(0).diskController().controllerName());
        Assertions.assertEquals(1656349594, model.disksToInclude().get(0).diskController().controllerId());
        Assertions.assertEquals(2030623139, model.disksToInclude().get(0).diskController().controllerLocation());
        Assertions.assertEquals("bqvgaqv", model.nicsToInclude().get(0).nicId());
        Assertions.assertEquals("gafcqu", model.nicsToInclude().get(0).label());
        Assertions.assertEquals("utnw", model.nicsToInclude().get(0).targetNetworkId());
        Assertions.assertEquals("uycvuzhyrmewip", model.nicsToInclude().get(0).testNetworkId());
        Assertions.assertEquals(VMNicSelection.SELECTED_BY_USER_OVERRIDE,
            model.nicsToInclude().get(0).selectionTypeForFailover());
        Assertions.assertFalse(model.nicsToInclude().get(0).isStaticIpMigrationEnabled());
        Assertions.assertFalse(model.nicsToInclude().get(0).isMacMigrationEnabled());
        Assertions.assertEquals("hokvbwnh", model.targetVmName());
        Assertions.assertEquals("tqlgehgppi", model.hyperVGeneration());
        Assertions.assertEquals("fhpfeoajvgcxtx", model.targetNetworkId());
        Assertions.assertEquals("sheafid", model.testNetworkId());
        Assertions.assertEquals(1440296534, model.targetCpuCores());
        Assertions.assertFalse(model.isDynamicRam());
        Assertions.assertEquals(9216614435431791768L, model.dynamicMemoryConfig().maximumMemoryInMegaBytes());
        Assertions.assertEquals(2429484898684221909L, model.dynamicMemoryConfig().minimumMemoryInMegaBytes());
        Assertions.assertEquals(822115732, model.dynamicMemoryConfig().targetMemoryBufferPercentage());
        Assertions.assertEquals(1340673373, model.targetMemoryInMegaBytes());
        Assertions.assertEquals("hm", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("bqzmizaka", model.runAsAccountId());
        Assertions.assertEquals("ankjpdnjzh", model.sourceFabricAgentName());
        Assertions.assertEquals("joylh", model.targetFabricAgentName());
        Assertions.assertTrue(model.performAutoResync());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMwareToAzStackHciProtectedItemCustomProps model
            = new VMwareToAzStackHciProtectedItemCustomProps().withTargetHciClusterId("wpchwahf")
                .withTargetArcClusterCustomLocationId("ousnfepgfewe")
                .withStorageContainerId("xgncxyk")
                .withTargetResourceGroupId("hdjhlimmbcx")
                .withCustomLocationRegion("pxtgqscjav")
                .withDisksToInclude(Arrays.asList(new VMwareToAzStackHCIDiskInput().withDiskId("juhdqazkmtgguwpi")
                    .withStorageContainerId("ajc")
                    .withIsDynamic(false)
                    .withDiskSizeGB(6883894318237557893L)
                    .withDiskFileFormat("hfcf")
                    .withIsOsDisk(true)
                    .withDiskBlockSize(4531060317602742990L)
                    .withDiskLogicalSectorSize(2886005627827893214L)
                    .withDiskPhysicalSectorSize(2887426698518376755L)
                    .withDiskIdentifier("nzqodfvpg")
                    .withDiskController(new DiskControllerInputs().withControllerName("oxgsgbpfgzdjtx")
                        .withControllerId(1656349594)
                        .withControllerLocation(2030623139))))
                .withNicsToInclude(Arrays.asList(
                    new VMwareToAzStackHCINicInput().withNicId("bqvgaqv")
                        .withLabel("gafcqu")
                        .withTargetNetworkId("utnw")
                        .withTestNetworkId("uycvuzhyrmewip")
                        .withSelectionTypeForFailover(VMNicSelection.SELECTED_BY_USER_OVERRIDE)
                        .withIsStaticIpMigrationEnabled(false)
                        .withIsMacMigrationEnabled(false),
                    new VMwareToAzStackHCINicInput().withNicId("ukuqgsj")
                        .withLabel("xundxgk")
                        .withTargetNetworkId("mun")
                        .withTestNetworkId("sx")
                        .withSelectionTypeForFailover(VMNicSelection.SELECTED_BY_USER)
                        .withIsStaticIpMigrationEnabled(true)
                        .withIsMacMigrationEnabled(true),
                    new VMwareToAzStackHCINicInput().withNicId("zjyi")
                        .withLabel("sasbhu")
                        .withTargetNetworkId("oobrlttyms")
                        .withTestNetworkId("ygqdnfwqzdz")
                        .withSelectionTypeForFailover(VMNicSelection.SELECTED_BY_USER)
                        .withIsStaticIpMigrationEnabled(false)
                        .withIsMacMigrationEnabled(false),
                    new VMwareToAzStackHCINicInput().withNicId("hnfhqlyvijouwi")
                        .withLabel("kxoyzunbixxr")
                        .withTargetNetworkId("vtsoxf")
                        .withTestNetworkId("enxpmyyefr")
                        .withSelectionTypeForFailover(VMNicSelection.SELECTED_BY_DEFAULT)
                        .withIsStaticIpMigrationEnabled(true)
                        .withIsMacMigrationEnabled(false)))
                .withTargetVmName("hokvbwnh")
                .withHyperVGeneration("tqlgehgppi")
                .withTargetNetworkId("fhpfeoajvgcxtx")
                .withTestNetworkId("sheafid")
                .withTargetCpuCores(1440296534)
                .withIsDynamicRam(false)
                .withDynamicMemoryConfig(
                    new ProtectedItemDynamicMemoryConfig().withMaximumMemoryInMegaBytes(9216614435431791768L)
                        .withMinimumMemoryInMegaBytes(2429484898684221909L)
                        .withTargetMemoryBufferPercentage(822115732))
                .withTargetMemoryInMegaBytes(1340673373)
                .withFabricDiscoveryMachineId("hm")
                .withRunAsAccountId("bqzmizaka")
                .withSourceFabricAgentName("ankjpdnjzh")
                .withTargetFabricAgentName("joylh")
                .withPerformAutoResync(true);
        model = BinaryData.fromObject(model).toObject(VMwareToAzStackHciProtectedItemCustomProps.class);
        Assertions.assertEquals("wpchwahf", model.targetHciClusterId());
        Assertions.assertEquals("ousnfepgfewe", model.targetArcClusterCustomLocationId());
        Assertions.assertEquals("xgncxyk", model.storageContainerId());
        Assertions.assertEquals("hdjhlimmbcx", model.targetResourceGroupId());
        Assertions.assertEquals("pxtgqscjav", model.customLocationRegion());
        Assertions.assertEquals("juhdqazkmtgguwpi", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("ajc", model.disksToInclude().get(0).storageContainerId());
        Assertions.assertFalse(model.disksToInclude().get(0).isDynamic());
        Assertions.assertEquals(6883894318237557893L, model.disksToInclude().get(0).diskSizeGB());
        Assertions.assertEquals("hfcf", model.disksToInclude().get(0).diskFileFormat());
        Assertions.assertTrue(model.disksToInclude().get(0).isOsDisk());
        Assertions.assertEquals(4531060317602742990L, model.disksToInclude().get(0).diskBlockSize());
        Assertions.assertEquals(2886005627827893214L, model.disksToInclude().get(0).diskLogicalSectorSize());
        Assertions.assertEquals(2887426698518376755L, model.disksToInclude().get(0).diskPhysicalSectorSize());
        Assertions.assertEquals("nzqodfvpg", model.disksToInclude().get(0).diskIdentifier());
        Assertions.assertEquals("oxgsgbpfgzdjtx", model.disksToInclude().get(0).diskController().controllerName());
        Assertions.assertEquals(1656349594, model.disksToInclude().get(0).diskController().controllerId());
        Assertions.assertEquals(2030623139, model.disksToInclude().get(0).diskController().controllerLocation());
        Assertions.assertEquals("bqvgaqv", model.nicsToInclude().get(0).nicId());
        Assertions.assertEquals("gafcqu", model.nicsToInclude().get(0).label());
        Assertions.assertEquals("utnw", model.nicsToInclude().get(0).targetNetworkId());
        Assertions.assertEquals("uycvuzhyrmewip", model.nicsToInclude().get(0).testNetworkId());
        Assertions.assertEquals(VMNicSelection.SELECTED_BY_USER_OVERRIDE,
            model.nicsToInclude().get(0).selectionTypeForFailover());
        Assertions.assertFalse(model.nicsToInclude().get(0).isStaticIpMigrationEnabled());
        Assertions.assertFalse(model.nicsToInclude().get(0).isMacMigrationEnabled());
        Assertions.assertEquals("hokvbwnh", model.targetVmName());
        Assertions.assertEquals("tqlgehgppi", model.hyperVGeneration());
        Assertions.assertEquals("fhpfeoajvgcxtx", model.targetNetworkId());
        Assertions.assertEquals("sheafid", model.testNetworkId());
        Assertions.assertEquals(1440296534, model.targetCpuCores());
        Assertions.assertFalse(model.isDynamicRam());
        Assertions.assertEquals(9216614435431791768L, model.dynamicMemoryConfig().maximumMemoryInMegaBytes());
        Assertions.assertEquals(2429484898684221909L, model.dynamicMemoryConfig().minimumMemoryInMegaBytes());
        Assertions.assertEquals(822115732, model.dynamicMemoryConfig().targetMemoryBufferPercentage());
        Assertions.assertEquals(1340673373, model.targetMemoryInMegaBytes());
        Assertions.assertEquals("hm", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("bqzmizaka", model.runAsAccountId());
        Assertions.assertEquals("ankjpdnjzh", model.sourceFabricAgentName());
        Assertions.assertEquals("joylh", model.targetFabricAgentName());
        Assertions.assertTrue(model.performAutoResync());
    }
}
