// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DiskControllerInputs;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.HyperVToAzStackHCIDiskInput;
import org.junit.jupiter.api.Assertions;

public final class HyperVToAzStackHCIDiskInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVToAzStackHCIDiskInput model = BinaryData.fromString(
            "{\"diskId\":\"ctxmwoteyowcluq\",\"storageContainerId\":\"ekqvgqouwif\",\"isDynamic\":false,\"diskSizeGB\":825128842505011666,\"diskFileFormat\":\"yivqikfxcvhrfsp\",\"isOsDisk\":true,\"diskBlockSize\":5907626668407775853,\"diskLogicalSectorSize\":7999712845146567670,\"diskPhysicalSectorSize\":6330082989227885422,\"diskIdentifier\":\"sqczkvyklxubyj\",\"diskController\":{\"controllerName\":\"fmmfblcqcu\",\"controllerId\":661332141,\"controllerLocation\":1353373611}}")
            .toObject(HyperVToAzStackHCIDiskInput.class);
        Assertions.assertEquals("ctxmwoteyowcluq", model.diskId());
        Assertions.assertEquals("ekqvgqouwif", model.storageContainerId());
        Assertions.assertFalse(model.isDynamic());
        Assertions.assertEquals(825128842505011666L, model.diskSizeGB());
        Assertions.assertEquals("yivqikfxcvhrfsp", model.diskFileFormat());
        Assertions.assertTrue(model.isOsDisk());
        Assertions.assertEquals(5907626668407775853L, model.diskBlockSize());
        Assertions.assertEquals(7999712845146567670L, model.diskLogicalSectorSize());
        Assertions.assertEquals(6330082989227885422L, model.diskPhysicalSectorSize());
        Assertions.assertEquals("sqczkvyklxubyj", model.diskIdentifier());
        Assertions.assertEquals("fmmfblcqcu", model.diskController().controllerName());
        Assertions.assertEquals(661332141, model.diskController().controllerId());
        Assertions.assertEquals(1353373611, model.diskController().controllerLocation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVToAzStackHCIDiskInput model = new HyperVToAzStackHCIDiskInput().withDiskId("ctxmwoteyowcluq")
            .withStorageContainerId("ekqvgqouwif")
            .withIsDynamic(false)
            .withDiskSizeGB(825128842505011666L)
            .withDiskFileFormat("yivqikfxcvhrfsp")
            .withIsOsDisk(true)
            .withDiskBlockSize(5907626668407775853L)
            .withDiskLogicalSectorSize(7999712845146567670L)
            .withDiskPhysicalSectorSize(6330082989227885422L)
            .withDiskIdentifier("sqczkvyklxubyj")
            .withDiskController(new DiskControllerInputs().withControllerName("fmmfblcqcu")
                .withControllerId(661332141)
                .withControllerLocation(1353373611));
        model = BinaryData.fromObject(model).toObject(HyperVToAzStackHCIDiskInput.class);
        Assertions.assertEquals("ctxmwoteyowcluq", model.diskId());
        Assertions.assertEquals("ekqvgqouwif", model.storageContainerId());
        Assertions.assertFalse(model.isDynamic());
        Assertions.assertEquals(825128842505011666L, model.diskSizeGB());
        Assertions.assertEquals("yivqikfxcvhrfsp", model.diskFileFormat());
        Assertions.assertTrue(model.isOsDisk());
        Assertions.assertEquals(5907626668407775853L, model.diskBlockSize());
        Assertions.assertEquals(7999712845146567670L, model.diskLogicalSectorSize());
        Assertions.assertEquals(6330082989227885422L, model.diskPhysicalSectorSize());
        Assertions.assertEquals("sqczkvyklxubyj", model.diskIdentifier());
        Assertions.assertEquals("fmmfblcqcu", model.diskController().controllerName());
        Assertions.assertEquals(661332141, model.diskController().controllerId());
        Assertions.assertEquals(1353373611, model.diskController().controllerLocation());
    }
}
