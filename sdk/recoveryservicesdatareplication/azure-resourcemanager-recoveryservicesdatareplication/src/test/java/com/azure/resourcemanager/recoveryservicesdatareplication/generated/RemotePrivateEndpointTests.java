// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ConnectionDetails;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.GroupConnectivityInformation;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceConnection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceProxy;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.RemotePrivateEndpoint;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.RemotePrivateEndpointConnection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RemotePrivateEndpointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RemotePrivateEndpoint model = BinaryData.fromString(
            "{\"id\":\"vsexsowuelu\",\"privateLinkServiceConnections\":[{\"name\":\"hhxvrhmzkwpj\",\"groupIds\":[\"spughftqsxhq\",\"ujxukndxd\",\"grjguufzd\",\"syqtfi\"],\"requestMessage\":\"hbotzingamvppho\"},{\"name\":\"qzudphq\",\"groupIds\":[\"dkfw\",\"nwcvtbvkayhmtnv\",\"qiatkzwpcnp\",\"zcjaesgvvsccy\"],\"requestMessage\":\"g\"},{\"name\":\"fhwygzlvdnkfxus\",\"groupIds\":[\"wzrmuh\",\"pfcqdp\"],\"requestMessage\":\"xqv\"},{\"name\":\"vuoy\",\"groupIds\":[\"celve\",\"rypqlmfeo\"],\"requestMessage\":\"rqwky\"}],\"manualPrivateLinkServiceConnections\":[{\"name\":\"opgxedkowepb\",\"groupIds\":[\"rfkbwccsnjvcdwxl\"],\"requestMessage\":\"ekftnkhtj\"}],\"privateLinkServiceProxies\":[{\"id\":\"gwfqatmt\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"vypgikdg\",\"actionsRequired\":\"ywkbirryuzhlhkjo\"},\"remotePrivateEndpointConnection\":{\"id\":\"qqaatjinrvgou\"},\"groupConnectivityInformation\":[{\"groupId\":\"ib\",\"memberName\":\"gjio\",\"customerVisibleFqdns\":[\"rwxkvtkkgl\",\"qwjygvja\"],\"internalFqdn\":\"blmhvkzuhb\",\"redirectMapId\":\"vyhgs\",\"privateLinkServiceArmRegion\":\"byrqufeg\"},{\"groupId\":\"vwz\",\"memberName\":\"nhlmctlpdng\",\"customerVisibleFqdns\":[\"gbmhrixkwmyi\",\"ejvegrhbpnaixex\"],\"internalFqdn\":\"b\",\"redirectMapId\":\"eaxhcexdrrvqahqk\",\"privateLinkServiceArmRegion\":\"tpwijnh\"},{\"groupId\":\"svfycxzbfv\",\"memberName\":\"wvrvmtg\",\"customerVisibleFqdns\":[\"pyostronzmyhgfi\",\"nsxkmcwaekrrjr\",\"afxtsgum\",\"jglikkxwslolb\"],\"internalFqdn\":\"vuzlm\",\"redirectMapId\":\"elfk\",\"privateLinkServiceArmRegion\":\"plcrpwjxeznoig\"},{\"groupId\":\"njwmwkpnbsazejj\",\"memberName\":\"kagfhsxtt\",\"customerVisibleFqdns\":[\"zxnfaaz\",\"xdtnkdmkqjjlw\",\"envrkpyouaibrebq\",\"aysjkixqtnqttez\"],\"internalFqdn\":\"fffiak\",\"redirectMapId\":\"pqqmted\",\"privateLinkServiceArmRegion\":\"mmji\"}]}],\"connectionDetails\":[{\"id\":\"zphv\",\"privateIpAddress\":\"uyqncygupkvipmd\",\"linkIdentifier\":\"wx\",\"groupId\":\"pevzhfst\",\"memberName\":\"xhojuj\"},{\"id\":\"pelmcuvhixbjxyf\",\"privateIpAddress\":\"yl\",\"linkIdentifier\":\"ool\",\"groupId\":\"tpkiwkkbnujry\",\"memberName\":\"tylbfpncurdoiw\"}]}")
            .toObject(RemotePrivateEndpoint.class);
        Assertions.assertEquals("vsexsowuelu", model.id());
        Assertions.assertEquals("hhxvrhmzkwpj", model.privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("spughftqsxhq", model.privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("hbotzingamvppho", model.privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("opgxedkowepb", model.manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("rfkbwccsnjvcdwxl",
            model.manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("ekftnkhtj", model.manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("gwfqatmt", model.privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals(PrivateEndpointConnectionStatus.APPROVED,
            model.privateLinkServiceProxies().get(0).remotePrivateLinkServiceConnectionState().status());
        Assertions.assertEquals("vypgikdg",
            model.privateLinkServiceProxies().get(0).remotePrivateLinkServiceConnectionState().description());
        Assertions.assertEquals("ywkbirryuzhlhkjo",
            model.privateLinkServiceProxies().get(0).remotePrivateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("qqaatjinrvgou",
            model.privateLinkServiceProxies().get(0).remotePrivateEndpointConnection().id());
        Assertions.assertEquals("ib",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).groupId());
        Assertions.assertEquals("gjio",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).memberName());
        Assertions.assertEquals("rwxkvtkkgl",
            model.privateLinkServiceProxies()
                .get(0)
                .groupConnectivityInformation()
                .get(0)
                .customerVisibleFqdns()
                .get(0));
        Assertions.assertEquals("blmhvkzuhb",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).internalFqdn());
        Assertions.assertEquals("vyhgs",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).redirectMapId());
        Assertions.assertEquals("byrqufeg",
            model.privateLinkServiceProxies()
                .get(0)
                .groupConnectivityInformation()
                .get(0)
                .privateLinkServiceArmRegion());
        Assertions.assertEquals("zphv", model.connectionDetails().get(0).id());
        Assertions.assertEquals("uyqncygupkvipmd", model.connectionDetails().get(0).privateIpAddress());
        Assertions.assertEquals("wx", model.connectionDetails().get(0).linkIdentifier());
        Assertions.assertEquals("pevzhfst", model.connectionDetails().get(0).groupId());
        Assertions.assertEquals("xhojuj", model.connectionDetails().get(0).memberName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RemotePrivateEndpoint model = new RemotePrivateEndpoint().withId("vsexsowuelu")
            .withPrivateLinkServiceConnections(Arrays.asList(
                new PrivateLinkServiceConnection().withName("hhxvrhmzkwpj")
                    .withGroupIds(Arrays.asList("spughftqsxhq", "ujxukndxd", "grjguufzd", "syqtfi"))
                    .withRequestMessage("hbotzingamvppho"),
                new PrivateLinkServiceConnection().withName("qzudphq")
                    .withGroupIds(Arrays.asList("dkfw", "nwcvtbvkayhmtnv", "qiatkzwpcnp", "zcjaesgvvsccy"))
                    .withRequestMessage("g"),
                new PrivateLinkServiceConnection().withName("fhwygzlvdnkfxus")
                    .withGroupIds(Arrays.asList("wzrmuh", "pfcqdp"))
                    .withRequestMessage("xqv"),
                new PrivateLinkServiceConnection().withName("vuoy")
                    .withGroupIds(Arrays.asList("celve", "rypqlmfeo"))
                    .withRequestMessage("rqwky")))
            .withManualPrivateLinkServiceConnections(
                Arrays.asList(new PrivateLinkServiceConnection().withName("opgxedkowepb")
                    .withGroupIds(Arrays.asList("rfkbwccsnjvcdwxl"))
                    .withRequestMessage("ekftnkhtj")))
            .withPrivateLinkServiceProxies(Arrays.asList(new PrivateLinkServiceProxy().withId("gwfqatmt")
                .withRemotePrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointConnectionStatus.APPROVED)
                        .withDescription("vypgikdg")
                        .withActionsRequired("ywkbirryuzhlhkjo"))
                .withRemotePrivateEndpointConnection(new RemotePrivateEndpointConnection().withId("qqaatjinrvgou"))
                .withGroupConnectivityInformation(Arrays.asList(
                    new GroupConnectivityInformation().withGroupId("ib")
                        .withMemberName("gjio")
                        .withCustomerVisibleFqdns(Arrays.asList("rwxkvtkkgl", "qwjygvja"))
                        .withInternalFqdn("blmhvkzuhb")
                        .withRedirectMapId("vyhgs")
                        .withPrivateLinkServiceArmRegion("byrqufeg"),
                    new GroupConnectivityInformation().withGroupId("vwz")
                        .withMemberName("nhlmctlpdng")
                        .withCustomerVisibleFqdns(Arrays.asList("gbmhrixkwmyi", "ejvegrhbpnaixex"))
                        .withInternalFqdn("b")
                        .withRedirectMapId("eaxhcexdrrvqahqk")
                        .withPrivateLinkServiceArmRegion("tpwijnh"),
                    new GroupConnectivityInformation().withGroupId("svfycxzbfv")
                        .withMemberName("wvrvmtg")
                        .withCustomerVisibleFqdns(
                            Arrays.asList("pyostronzmyhgfi", "nsxkmcwaekrrjr", "afxtsgum", "jglikkxwslolb"))
                        .withInternalFqdn("vuzlm")
                        .withRedirectMapId("elfk")
                        .withPrivateLinkServiceArmRegion("plcrpwjxeznoig"),
                    new GroupConnectivityInformation().withGroupId("njwmwkpnbsazejj")
                        .withMemberName("kagfhsxtt")
                        .withCustomerVisibleFqdns(
                            Arrays.asList("zxnfaaz", "xdtnkdmkqjjlw", "envrkpyouaibrebq", "aysjkixqtnqttez"))
                        .withInternalFqdn("fffiak")
                        .withRedirectMapId("pqqmted")
                        .withPrivateLinkServiceArmRegion("mmji")))))
            .withConnectionDetails(Arrays.asList(
                new ConnectionDetails().withId("zphv")
                    .withPrivateIpAddress("uyqncygupkvipmd")
                    .withLinkIdentifier("wx")
                    .withGroupId("pevzhfst")
                    .withMemberName("xhojuj"),
                new ConnectionDetails().withId("pelmcuvhixbjxyf")
                    .withPrivateIpAddress("yl")
                    .withLinkIdentifier("ool")
                    .withGroupId("tpkiwkkbnujry")
                    .withMemberName("tylbfpncurdoiw")));
        model = BinaryData.fromObject(model).toObject(RemotePrivateEndpoint.class);
        Assertions.assertEquals("vsexsowuelu", model.id());
        Assertions.assertEquals("hhxvrhmzkwpj", model.privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("spughftqsxhq", model.privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("hbotzingamvppho", model.privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("opgxedkowepb", model.manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("rfkbwccsnjvcdwxl",
            model.manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("ekftnkhtj", model.manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("gwfqatmt", model.privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals(PrivateEndpointConnectionStatus.APPROVED,
            model.privateLinkServiceProxies().get(0).remotePrivateLinkServiceConnectionState().status());
        Assertions.assertEquals("vypgikdg",
            model.privateLinkServiceProxies().get(0).remotePrivateLinkServiceConnectionState().description());
        Assertions.assertEquals("ywkbirryuzhlhkjo",
            model.privateLinkServiceProxies().get(0).remotePrivateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("qqaatjinrvgou",
            model.privateLinkServiceProxies().get(0).remotePrivateEndpointConnection().id());
        Assertions.assertEquals("ib",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).groupId());
        Assertions.assertEquals("gjio",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).memberName());
        Assertions.assertEquals("rwxkvtkkgl",
            model.privateLinkServiceProxies()
                .get(0)
                .groupConnectivityInformation()
                .get(0)
                .customerVisibleFqdns()
                .get(0));
        Assertions.assertEquals("blmhvkzuhb",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).internalFqdn());
        Assertions.assertEquals("vyhgs",
            model.privateLinkServiceProxies().get(0).groupConnectivityInformation().get(0).redirectMapId());
        Assertions.assertEquals("byrqufeg",
            model.privateLinkServiceProxies()
                .get(0)
                .groupConnectivityInformation()
                .get(0)
                .privateLinkServiceArmRegion());
        Assertions.assertEquals("zphv", model.connectionDetails().get(0).id());
        Assertions.assertEquals("uyqncygupkvipmd", model.connectionDetails().get(0).privateIpAddress());
        Assertions.assertEquals("wx", model.connectionDetails().get(0).linkIdentifier());
        Assertions.assertEquals("pevzhfst", model.connectionDetails().get(0).groupId());
        Assertions.assertEquals("xhojuj", model.connectionDetails().get(0).memberName());
    }
}
