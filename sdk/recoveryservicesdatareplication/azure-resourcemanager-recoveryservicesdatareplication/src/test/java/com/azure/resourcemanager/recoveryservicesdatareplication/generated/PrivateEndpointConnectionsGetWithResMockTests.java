// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsGetWithResMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{\"id\":\"shhkvpedw\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"hmpqvw\",\"actionsRequired\":\"kondcb\"}},\"id\":\"imuvqejosovyrrl\",\"name\":\"a\",\"type\":\"sinuqtljqobbpih\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesDataReplicationManager manager = RecoveryServicesDataReplicationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .getWithResponse("lkeuac", "tomflrytswfpf", "dgycxnmskwhqjjy", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("shhkvpedw", response.properties().privateEndpoint().id());
        Assertions.assertEquals(PrivateEndpointConnectionStatus.PENDING,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("hmpqvw", response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("kondcb", response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
