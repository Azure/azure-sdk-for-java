// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryservicesdatareplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.DeploymentPreflightModelInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DeploymentPreflightModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DeploymentPreflightResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourceProvidersDeploymentPreflightWithResponseMockTests {
    @Test
    public void testDeploymentPreflightWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"resources\":[{\"name\":\"wntsjgqrsxy\",\"type\":\"uuuybnchrsziz\",\"location\":\"uelyetndn\",\"apiVersion\":\"qyggagfl\"},{\"name\":\"gm\",\"type\":\"wahzjmucftbyr\",\"location\":\"rohkpigqfusu\",\"apiVersion\":\"zmkw\"},{\"name\":\"snoxaxmqeqa\",\"type\":\"hjnhgwydyynfsvk\",\"location\":\"bvqt\",\"apiVersion\":\"arfdlpukhpyrnei\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryservicesdatareplicationManager manager =
            RecoveryservicesdatareplicationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        DeploymentPreflightModel response =
            manager
                .resourceProviders()
                .deploymentPreflightWithResponse(
                    "k",
                    "dirazf",
                    new DeploymentPreflightModelInner()
                        .withResources(
                            Arrays
                                .asList(
                                    new DeploymentPreflightResource()
                                        .withName("w")
                                        .withType("mdujtmvcopexcm")
                                        .withLocation("rbuhhlky")
                                        .withApiVersion("tqsrogtuwkff"),
                                    new DeploymentPreflightResource()
                                        .withName("ktsysidfvclglxn")
                                        .withType("ijtk")
                                        .withLocation("sqo")
                                        .withApiVersion("fikayiansharujtj"),
                                    new DeploymentPreflightResource()
                                        .withName("xfz")
                                        .withType("qttv")
                                        .withLocation("pqhjpenuygbqeqq")
                                        .withApiVersion("ewvnqvcdlgu"),
                                    new DeploymentPreflightResource()
                                        .withName("cmfdjwnlax")
                                        .withType("njqikcz")
                                        .withLocation("itacgxmfcsserx")
                                        .withApiVersion("vs"))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("wntsjgqrsxy", response.resources().get(0).name());
        Assertions.assertEquals("uuuybnchrsziz", response.resources().get(0).type());
        Assertions.assertEquals("uelyetndn", response.resources().get(0).location());
        Assertions.assertEquals("qyggagfl", response.resources().get(0).apiVersion());
    }
}
