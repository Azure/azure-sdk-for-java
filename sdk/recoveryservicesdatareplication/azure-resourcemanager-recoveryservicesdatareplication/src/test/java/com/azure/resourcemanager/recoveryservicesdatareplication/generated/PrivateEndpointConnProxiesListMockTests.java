// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionProxy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnProxiesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Creating\",\"remotePrivateEndpoint\":{\"id\":\"toaukhfkvcisiz\",\"privateLinkServiceConnections\":[{\"name\":\"dsxjwuivedw\",\"groupIds\":[\"eewxeiqbpsmg\"],\"requestMessage\":\"guamlj\"}],\"manualPrivateLinkServiceConnections\":[{\"name\":\"msplzgaufcshhvn\",\"groupIds\":[\"nxkympqanxrjk\",\"xtwbta\",\"ypnyghshxc\"],\"requestMessage\":\"hkgmnsg\"},{\"name\":\"xycphdrwjjkh\",\"groupIds\":[\"macl\",\"zvxnqmhrp\",\"pd\",\"wmkoisq\"],\"requestMessage\":\"sffxui\"},{\"name\":\"csypobkdqzrdzsyl\",\"groupIds\":[\"gtrczzydmxzjijpv\",\"aurkihcirlde\"],\"requestMessage\":\"rdcoxnbkkj\"}],\"privateLinkServiceProxies\":[{\"id\":\"nnqbnqbp\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{},{},{}]},{\"id\":\"grdogypxrxvbfihw\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{},{},{}]},{\"id\":\"fsrb\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{}]}],\"connectionDetails\":[{\"id\":\"wxihs\",\"privateIpAddress\":\"xwqagnepzw\",\"linkIdentifier\":\"lsbs\",\"groupId\":\"qqagwwr\",\"memberName\":\"omzisglrrcz\"},{\"id\":\"k\",\"privateIpAddress\":\"ltn\",\"linkIdentifier\":\"dhqoawj\",\"groupId\":\"yueayfbpcmsp\",\"memberName\":\"yrrueqth\"}]}},\"etag\":\"gnmbscbbxigdhx\",\"id\":\"d\",\"name\":\"opedbwdpyqyybxub\",\"type\":\"dnafcbqwre\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesDataReplicationManager manager = RecoveryServicesDataReplicationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<PrivateEndpointConnectionProxy> response
            = manager.privateEndpointConnProxies().list("aswlp", "ugmrmf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("toaukhfkvcisiz", response.iterator().next().properties().remotePrivateEndpoint().id());
        Assertions.assertEquals("dsxjwuivedw",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .privateLinkServiceConnections()
                .get(0)
                .name());
        Assertions.assertEquals("eewxeiqbpsmg",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .privateLinkServiceConnections()
                .get(0)
                .groupIds()
                .get(0));
        Assertions.assertEquals("guamlj",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .privateLinkServiceConnections()
                .get(0)
                .requestMessage());
        Assertions.assertEquals("msplzgaufcshhvn",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .manualPrivateLinkServiceConnections()
                .get(0)
                .name());
        Assertions.assertEquals("nxkympqanxrjk",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .manualPrivateLinkServiceConnections()
                .get(0)
                .groupIds()
                .get(0));
        Assertions.assertEquals("hkgmnsg",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .manualPrivateLinkServiceConnections()
                .get(0)
                .requestMessage());
        Assertions.assertEquals("nnqbnqbp",
            response.iterator().next().properties().remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals("wxihs",
            response.iterator().next().properties().remotePrivateEndpoint().connectionDetails().get(0).id());
        Assertions.assertEquals("xwqagnepzw",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .connectionDetails()
                .get(0)
                .privateIpAddress());
        Assertions.assertEquals("lsbs",
            response.iterator()
                .next()
                .properties()
                .remotePrivateEndpoint()
                .connectionDetails()
                .get(0)
                .linkIdentifier());
        Assertions.assertEquals("qqagwwr",
            response.iterator().next().properties().remotePrivateEndpoint().connectionDetails().get(0).groupId());
        Assertions.assertEquals("omzisglrrcz",
            response.iterator().next().properties().remotePrivateEndpoint().connectionDetails().get(0).memberName());
        Assertions.assertEquals("gnmbscbbxigdhx", response.iterator().next().etag());
    }
}
