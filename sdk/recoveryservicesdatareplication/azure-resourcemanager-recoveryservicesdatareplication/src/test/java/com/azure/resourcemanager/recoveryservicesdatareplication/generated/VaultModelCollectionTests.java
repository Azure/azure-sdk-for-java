// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.VaultModelInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ReplicationVaultType;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModelCollection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModelProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VaultModelCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VaultModelCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Updating\",\"serviceResourceId\":\"sfeaenwabfat\",\"vaultType\":\"Migrate\"},\"systemData\":{\"createdBy\":\"bjhwuaan\",\"createdByType\":\"jos\",\"createdAt\":\"2021-07-19T15:07:37Z\",\"lastModifiedBy\":\"ulpjr\",\"lastModifiedByType\":\"ag\",\"lastModifiedAt\":\"2020-12-24T15:22:03Z\"},\"location\":\"imjwosyt\",\"tags\":{\"zzikhlyfjhdg\":\"cskfcktqumiekk\"},\"id\":\"gge\",\"name\":\"dunyg\",\"type\":\"eqidbqfatpx\"}],\"nextLink\":\"rxcyjmoad\"}")
            .toObject(VaultModelCollection.class);
        Assertions.assertEquals("imjwosyt", model.value().get(0).location());
        Assertions.assertEquals("cskfcktqumiekk", model.value().get(0).tags().get("zzikhlyfjhdg"));
        Assertions.assertEquals(ReplicationVaultType.MIGRATE, model.value().get(0).properties().vaultType());
        Assertions.assertEquals("rxcyjmoad", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VaultModelCollection model = new VaultModelCollection()
            .withValue(Arrays.asList(new VaultModelInner().withLocation("imjwosyt")
                .withTags(mapOf("zzikhlyfjhdg", "cskfcktqumiekk"))
                .withProperties(new VaultModelProperties().withVaultType(ReplicationVaultType.MIGRATE))))
            .withNextLink("rxcyjmoad");
        model = BinaryData.fromObject(model).toObject(VaultModelCollection.class);
        Assertions.assertEquals("imjwosyt", model.value().get(0).location());
        Assertions.assertEquals("cskfcktqumiekk", model.value().get(0).tags().get("zzikhlyfjhdg"));
        Assertions.assertEquals(ReplicationVaultType.MIGRATE, model.value().get(0).properties().vaultType());
        Assertions.assertEquals("rxcyjmoad", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
