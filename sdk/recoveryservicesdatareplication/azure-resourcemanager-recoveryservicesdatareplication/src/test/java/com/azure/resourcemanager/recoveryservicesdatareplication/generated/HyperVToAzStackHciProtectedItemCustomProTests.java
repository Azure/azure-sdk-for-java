// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DiskControllerInputs;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.HyperVToAzStackHCIDiskInput;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.HyperVToAzStackHCINicInput;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.HyperVToAzStackHciProtectedItemCustomProps;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ProtectedItemDynamicMemoryConfig;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VMNicSelection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class HyperVToAzStackHciProtectedItemCustomProTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HyperVToAzStackHciProtectedItemCustomProps model = BinaryData.fromString(
            "{\"instanceType\":\"HyperVToAzStackHCI\",\"activeLocation\":\"Recovery\",\"targetHciClusterId\":\"iykzkdncjdx\",\"targetArcClusterCustomLocationId\":\"nbzoggcu\",\"targetAzStackHciClusterName\":\"p\",\"fabricDiscoveryMachineId\":\"wyrpgogtqxepnyl\",\"disksToInclude\":[{\"diskId\":\"uajlyj\",\"storageContainerId\":\"vofqzhvfc\",\"isDynamic\":false,\"diskSizeGB\":2424027905309493102,\"diskFileFormat\":\"owuxrkjpvdwx\",\"isOsDisk\":true,\"diskBlockSize\":9040698043592142501,\"diskLogicalSectorSize\":4970789347057836253,\"diskPhysicalSectorSize\":8466304309204192659,\"diskIdentifier\":\"zsxjrkambtrneg\",\"diskController\":{\"controllerName\":\"nvuqeqvldspa\",\"controllerId\":608775789,\"controllerLocation\":1828448975}},{\"diskId\":\"bkkd\",\"storageContainerId\":\"lves\",\"isDynamic\":false,\"diskSizeGB\":1448532982529597435,\"diskFileFormat\":\"rriloz\",\"isOsDisk\":true,\"diskBlockSize\":3644482320292863264,\"diskLogicalSectorSize\":6368017154430461078,\"diskPhysicalSectorSize\":5812198881075503474,\"diskIdentifier\":\"wk\",\"diskController\":{\"controllerName\":\"iycslevuf\",\"controllerId\":1693563757,\"controllerLocation\":1863886155}}],\"nicsToInclude\":[{\"nicId\":\"ktyhjt\",\"networkName\":\"dcgzul\",\"targetNetworkId\":\"mrqzzrrjvpgl\",\"testNetworkId\":\"zgkrvqe\",\"selectionTypeForFailover\":\"SelectedByDefault\",\"isStaticIpMigrationEnabled\":false,\"isMacMigrationEnabled\":false},{\"nicId\":\"r\",\"networkName\":\"t\",\"targetNetworkId\":\"ytp\",\"testNetworkId\":\"mov\",\"selectionTypeForFailover\":\"NotSelected\",\"isStaticIpMigrationEnabled\":false,\"isMacMigrationEnabled\":false}],\"sourceVmName\":\"zqadf\",\"sourceCpuCores\":97417905,\"sourceMemoryInMegaBytes\":42.570950739328275,\"targetVmName\":\"laecxndticok\",\"targetResourceGroupId\":\"vzm\",\"storageContainerId\":\"qtmldgxo\",\"hyperVGeneration\":\"firclnpkciayz\",\"targetNetworkId\":\"ykhyawfvjlboxqvk\",\"testNetworkId\":\"mxho\",\"targetCpuCores\":298942523,\"isDynamicRam\":false,\"dynamicMemoryConfig\":{\"maximumMemoryInMegaBytes\":5593659060766409421,\"minimumMemoryInMegaBytes\":2742511706808371729,\"targetMemoryBufferPercentage\":653732445},\"targetMemoryInMegaBytes\":1988980812,\"runAsAccountId\":\"nraauzz\",\"sourceFabricAgentName\":\"tj\",\"targetFabricAgentName\":\"zysdzh\",\"sourceApplianceName\":\"wwvaiqyuvvfonk\",\"targetApplianceName\":\"hqyikvy\",\"osType\":\"uyav\",\"osName\":\"wmn\",\"firmwareType\":\"ttijfybvpoekrs\",\"targetLocation\":\"gbdhuzqgnjdg\",\"customLocationRegion\":\"ynscl\",\"failoverRecoveryPointId\":\"hzvhxnkomtkubo\",\"lastRecoveryPointReceived\":\"2021-07-08T03:11:15Z\",\"lastRecoveryPointId\":\"vdxzxhihfrbbc\",\"initialReplicationProgressPercentage\":990480911,\"resyncProgressPercentage\":1914293940,\"protectedDisks\":[{\"storageContainerId\":\"dhlfkqojpykvgt\",\"storageContainerLocalPath\":\"cnifm\",\"sourceDiskId\":\"sdymbrn\",\"sourceDiskName\":\"u\",\"seedDiskName\":\"prafwgckhoc\",\"testMigrateDiskName\":\"d\",\"migrateDiskName\":\"fwafqrouda\",\"isOsDisk\":true,\"capacityInBytes\":4223322955205553573,\"isDynamic\":false,\"diskType\":\"kbunzoz\",\"diskBlockSize\":356521772638664607,\"diskLogicalSectorSize\":9008191829096348596,\"diskPhysicalSectorSize\":52619400829674565}],\"protectedNics\":[{\"nicId\":\"yuibhm\",\"macAddress\":\"nbzydvfvfcj\",\"networkName\":\"eoisrvhmgor\",\"targetNetworkId\":\"ukiscvwmzhw\",\"testNetworkId\":\"efaxvxilc\",\"selectionTypeForFailover\":\"SelectedByUser\"},{\"nicId\":\"hnze\",\"macAddress\":\"xtjjfzqlqhycav\",\"networkName\":\"ggxdb\",\"targetNetworkId\":\"smieknlra\",\"testNetworkId\":\"aawiuagydwqfb\",\"selectionTypeForFailover\":\"NotSelected\"},{\"nicId\":\"fgiagtcojocqwo\",\"macAddress\":\"nzjvusfzldm\",\"networkName\":\"uxylfsbtkadpy\",\"targetNetworkId\":\"wn\",\"testNetworkId\":\"gkbugrjqct\",\"selectionTypeForFailover\":\"SelectedByUser\"},{\"nicId\":\"isofieypefojyqd\",\"macAddress\":\"u\",\"networkName\":\"cp\",\"targetNetworkId\":\"wkhihihlhzdsqt\",\"testNetworkId\":\"s\",\"selectionTypeForFailover\":\"NotSelected\"}],\"targetVmBiosId\":\"wcjhfgmv\",\"lastReplicationUpdateTime\":\"2021-11-25T01:04:38Z\"}")
            .toObject(HyperVToAzStackHciProtectedItemCustomProps.class);
        Assertions.assertEquals("iykzkdncjdx", model.targetHciClusterId());
        Assertions.assertEquals("nbzoggcu", model.targetArcClusterCustomLocationId());
        Assertions.assertEquals("wyrpgogtqxepnyl", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("uajlyj", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("vofqzhvfc", model.disksToInclude().get(0).storageContainerId());
        Assertions.assertFalse(model.disksToInclude().get(0).isDynamic());
        Assertions.assertEquals(2424027905309493102L, model.disksToInclude().get(0).diskSizeGB());
        Assertions.assertEquals("owuxrkjpvdwx", model.disksToInclude().get(0).diskFileFormat());
        Assertions.assertTrue(model.disksToInclude().get(0).isOsDisk());
        Assertions.assertEquals(9040698043592142501L, model.disksToInclude().get(0).diskBlockSize());
        Assertions.assertEquals(4970789347057836253L, model.disksToInclude().get(0).diskLogicalSectorSize());
        Assertions.assertEquals(8466304309204192659L, model.disksToInclude().get(0).diskPhysicalSectorSize());
        Assertions.assertEquals("zsxjrkambtrneg", model.disksToInclude().get(0).diskIdentifier());
        Assertions.assertEquals("nvuqeqvldspa", model.disksToInclude().get(0).diskController().controllerName());
        Assertions.assertEquals(608775789, model.disksToInclude().get(0).diskController().controllerId());
        Assertions.assertEquals(1828448975, model.disksToInclude().get(0).diskController().controllerLocation());
        Assertions.assertEquals("ktyhjt", model.nicsToInclude().get(0).nicId());
        Assertions.assertEquals("mrqzzrrjvpgl", model.nicsToInclude().get(0).targetNetworkId());
        Assertions.assertEquals("zgkrvqe", model.nicsToInclude().get(0).testNetworkId());
        Assertions.assertEquals(VMNicSelection.SELECTED_BY_DEFAULT,
            model.nicsToInclude().get(0).selectionTypeForFailover());
        Assertions.assertFalse(model.nicsToInclude().get(0).isStaticIpMigrationEnabled());
        Assertions.assertFalse(model.nicsToInclude().get(0).isMacMigrationEnabled());
        Assertions.assertEquals("laecxndticok", model.targetVmName());
        Assertions.assertEquals("vzm", model.targetResourceGroupId());
        Assertions.assertEquals("qtmldgxo", model.storageContainerId());
        Assertions.assertEquals("firclnpkciayz", model.hyperVGeneration());
        Assertions.assertEquals("ykhyawfvjlboxqvk", model.targetNetworkId());
        Assertions.assertEquals("mxho", model.testNetworkId());
        Assertions.assertEquals(298942523, model.targetCpuCores());
        Assertions.assertFalse(model.isDynamicRam());
        Assertions.assertEquals(5593659060766409421L, model.dynamicMemoryConfig().maximumMemoryInMegaBytes());
        Assertions.assertEquals(2742511706808371729L, model.dynamicMemoryConfig().minimumMemoryInMegaBytes());
        Assertions.assertEquals(653732445, model.dynamicMemoryConfig().targetMemoryBufferPercentage());
        Assertions.assertEquals(1988980812, model.targetMemoryInMegaBytes());
        Assertions.assertEquals("nraauzz", model.runAsAccountId());
        Assertions.assertEquals("tj", model.sourceFabricAgentName());
        Assertions.assertEquals("zysdzh", model.targetFabricAgentName());
        Assertions.assertEquals("ynscl", model.customLocationRegion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HyperVToAzStackHciProtectedItemCustomProps model
            = new HyperVToAzStackHciProtectedItemCustomProps().withTargetHciClusterId("iykzkdncjdx")
                .withTargetArcClusterCustomLocationId("nbzoggcu")
                .withFabricDiscoveryMachineId("wyrpgogtqxepnyl")
                .withDisksToInclude(Arrays.asList(
                    new HyperVToAzStackHCIDiskInput().withDiskId("uajlyj")
                        .withStorageContainerId("vofqzhvfc")
                        .withIsDynamic(false)
                        .withDiskSizeGB(2424027905309493102L)
                        .withDiskFileFormat("owuxrkjpvdwx")
                        .withIsOsDisk(true)
                        .withDiskBlockSize(9040698043592142501L)
                        .withDiskLogicalSectorSize(4970789347057836253L)
                        .withDiskPhysicalSectorSize(8466304309204192659L)
                        .withDiskIdentifier("zsxjrkambtrneg")
                        .withDiskController(new DiskControllerInputs().withControllerName("nvuqeqvldspa")
                            .withControllerId(608775789)
                            .withControllerLocation(1828448975)),
                    new HyperVToAzStackHCIDiskInput().withDiskId("bkkd")
                        .withStorageContainerId("lves")
                        .withIsDynamic(false)
                        .withDiskSizeGB(1448532982529597435L)
                        .withDiskFileFormat("rriloz")
                        .withIsOsDisk(true)
                        .withDiskBlockSize(3644482320292863264L)
                        .withDiskLogicalSectorSize(6368017154430461078L)
                        .withDiskPhysicalSectorSize(5812198881075503474L)
                        .withDiskIdentifier("wk")
                        .withDiskController(new DiskControllerInputs().withControllerName("iycslevuf")
                            .withControllerId(1693563757)
                            .withControllerLocation(1863886155))))
                .withNicsToInclude(Arrays.asList(
                    new HyperVToAzStackHCINicInput().withNicId("ktyhjt")
                        .withTargetNetworkId("mrqzzrrjvpgl")
                        .withTestNetworkId("zgkrvqe")
                        .withSelectionTypeForFailover(VMNicSelection.SELECTED_BY_DEFAULT)
                        .withIsStaticIpMigrationEnabled(false)
                        .withIsMacMigrationEnabled(false),
                    new HyperVToAzStackHCINicInput().withNicId("r")
                        .withTargetNetworkId("ytp")
                        .withTestNetworkId("mov")
                        .withSelectionTypeForFailover(VMNicSelection.NOT_SELECTED)
                        .withIsStaticIpMigrationEnabled(false)
                        .withIsMacMigrationEnabled(false)))
                .withTargetVmName("laecxndticok")
                .withTargetResourceGroupId("vzm")
                .withStorageContainerId("qtmldgxo")
                .withHyperVGeneration("firclnpkciayz")
                .withTargetNetworkId("ykhyawfvjlboxqvk")
                .withTestNetworkId("mxho")
                .withTargetCpuCores(298942523)
                .withIsDynamicRam(false)
                .withDynamicMemoryConfig(
                    new ProtectedItemDynamicMemoryConfig().withMaximumMemoryInMegaBytes(5593659060766409421L)
                        .withMinimumMemoryInMegaBytes(2742511706808371729L)
                        .withTargetMemoryBufferPercentage(653732445))
                .withTargetMemoryInMegaBytes(1988980812)
                .withRunAsAccountId("nraauzz")
                .withSourceFabricAgentName("tj")
                .withTargetFabricAgentName("zysdzh")
                .withCustomLocationRegion("ynscl");
        model = BinaryData.fromObject(model).toObject(HyperVToAzStackHciProtectedItemCustomProps.class);
        Assertions.assertEquals("iykzkdncjdx", model.targetHciClusterId());
        Assertions.assertEquals("nbzoggcu", model.targetArcClusterCustomLocationId());
        Assertions.assertEquals("wyrpgogtqxepnyl", model.fabricDiscoveryMachineId());
        Assertions.assertEquals("uajlyj", model.disksToInclude().get(0).diskId());
        Assertions.assertEquals("vofqzhvfc", model.disksToInclude().get(0).storageContainerId());
        Assertions.assertFalse(model.disksToInclude().get(0).isDynamic());
        Assertions.assertEquals(2424027905309493102L, model.disksToInclude().get(0).diskSizeGB());
        Assertions.assertEquals("owuxrkjpvdwx", model.disksToInclude().get(0).diskFileFormat());
        Assertions.assertTrue(model.disksToInclude().get(0).isOsDisk());
        Assertions.assertEquals(9040698043592142501L, model.disksToInclude().get(0).diskBlockSize());
        Assertions.assertEquals(4970789347057836253L, model.disksToInclude().get(0).diskLogicalSectorSize());
        Assertions.assertEquals(8466304309204192659L, model.disksToInclude().get(0).diskPhysicalSectorSize());
        Assertions.assertEquals("zsxjrkambtrneg", model.disksToInclude().get(0).diskIdentifier());
        Assertions.assertEquals("nvuqeqvldspa", model.disksToInclude().get(0).diskController().controllerName());
        Assertions.assertEquals(608775789, model.disksToInclude().get(0).diskController().controllerId());
        Assertions.assertEquals(1828448975, model.disksToInclude().get(0).diskController().controllerLocation());
        Assertions.assertEquals("ktyhjt", model.nicsToInclude().get(0).nicId());
        Assertions.assertEquals("mrqzzrrjvpgl", model.nicsToInclude().get(0).targetNetworkId());
        Assertions.assertEquals("zgkrvqe", model.nicsToInclude().get(0).testNetworkId());
        Assertions.assertEquals(VMNicSelection.SELECTED_BY_DEFAULT,
            model.nicsToInclude().get(0).selectionTypeForFailover());
        Assertions.assertFalse(model.nicsToInclude().get(0).isStaticIpMigrationEnabled());
        Assertions.assertFalse(model.nicsToInclude().get(0).isMacMigrationEnabled());
        Assertions.assertEquals("laecxndticok", model.targetVmName());
        Assertions.assertEquals("vzm", model.targetResourceGroupId());
        Assertions.assertEquals("qtmldgxo", model.storageContainerId());
        Assertions.assertEquals("firclnpkciayz", model.hyperVGeneration());
        Assertions.assertEquals("ykhyawfvjlboxqvk", model.targetNetworkId());
        Assertions.assertEquals("mxho", model.testNetworkId());
        Assertions.assertEquals(298942523, model.targetCpuCores());
        Assertions.assertFalse(model.isDynamicRam());
        Assertions.assertEquals(5593659060766409421L, model.dynamicMemoryConfig().maximumMemoryInMegaBytes());
        Assertions.assertEquals(2742511706808371729L, model.dynamicMemoryConfig().minimumMemoryInMegaBytes());
        Assertions.assertEquals(653732445, model.dynamicMemoryConfig().targetMemoryBufferPercentage());
        Assertions.assertEquals(1988980812, model.targetMemoryInMegaBytes());
        Assertions.assertEquals("nraauzz", model.runAsAccountId());
        Assertions.assertEquals("tj", model.sourceFabricAgentName());
        Assertions.assertEquals("zysdzh", model.targetFabricAgentName());
        Assertions.assertEquals("ynscl", model.customLocationRegion());
    }
}
