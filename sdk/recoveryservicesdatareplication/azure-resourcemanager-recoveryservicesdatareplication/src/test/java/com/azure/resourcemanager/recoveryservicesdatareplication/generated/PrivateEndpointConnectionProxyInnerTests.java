// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.PrivateEndpointConnectionProxyInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ConnectionDetails;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.GroupConnectivityInformation;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionProxyProperties;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceConnection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceProxy;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.RemotePrivateEndpoint;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.RemotePrivateEndpointConnection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionProxyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionProxyInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleted\",\"remotePrivateEndpoint\":{\"id\":\"kfoqreyfkzikfj\",\"privateLinkServiceConnections\":[{\"name\":\"a\",\"groupIds\":[\"wczelpci\",\"elsfeaen\",\"abfatkl\"],\"requestMessage\":\"xbjhwuaanozjosph\"}],\"manualPrivateLinkServiceConnections\":[{\"name\":\"pjrvxagl\",\"groupIds\":[\"mjwosytx\",\"tcs\"],\"requestMessage\":\"cktqumiekkezzi\"},{\"name\":\"ly\",\"groupIds\":[\"dgqggebdu\",\"ygaeqidbqfatpxl\"],\"requestMessage\":\"xcyjmoadsuvarmy\"}],\"privateLinkServiceProxies\":[{\"id\":\"sjqbjhhyxxrw\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"uhpkxkgymar\",\"actionsRequired\":\"n\"},\"remotePrivateEndpointConnection\":{\"id\":\"qugjhkycube\"},\"groupConnectivityInformation\":[{},{}]},{\"id\":\"sofwqmzqalkrmnji\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"q\",\"actionsRequired\":\"dfnbyxbaaabjyv\"},\"remotePrivateEndpointConnection\":{\"id\":\"fimrzrtuzqogse\"},\"groupConnectivityInformation\":[{},{},{}]}],\"connectionDetails\":[{\"id\":\"nwnwme\",\"privateIpAddress\":\"syyceuzsoibjud\",\"linkIdentifier\":\"rx\",\"groupId\":\"thzvaytdwkqbrqu\",\"memberName\":\"axhexiilivp\"}]}},\"etag\":\"iirqtd\",\"id\":\"axoruzfgsquy\",\"name\":\"xrxxlep\",\"type\":\"ramxjezwlwnw\"}")
            .toObject(PrivateEndpointConnectionProxyInner.class);
        Assertions.assertEquals("kfoqreyfkzikfj", model.properties().remotePrivateEndpoint().id());
        Assertions.assertEquals("a",
            model.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("wczelpci",
            model.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("xbjhwuaanozjosph",
            model.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("pjrvxagl",
            model.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("mjwosytx",
            model.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("cktqumiekkezzi",
            model.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("sjqbjhhyxxrw",
            model.properties().remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals(PrivateEndpointConnectionStatus.DISCONNECTED,
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .status());
        Assertions.assertEquals("uhpkxkgymar",
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .description());
        Assertions.assertEquals("n",
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .actionsRequired());
        Assertions.assertEquals("qugjhkycube",
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateEndpointConnection()
                .id());
        Assertions.assertEquals("nwnwme", model.properties().remotePrivateEndpoint().connectionDetails().get(0).id());
        Assertions.assertEquals("syyceuzsoibjud",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).privateIpAddress());
        Assertions.assertEquals("rx",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).linkIdentifier());
        Assertions.assertEquals("thzvaytdwkqbrqu",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).groupId());
        Assertions.assertEquals("axhexiilivp",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).memberName());
        Assertions.assertEquals("iirqtd", model.etag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionProxyInner model = new PrivateEndpointConnectionProxyInner().withProperties(
            new PrivateEndpointConnectionProxyProperties().withRemotePrivateEndpoint(new RemotePrivateEndpoint()
                .withId("kfoqreyfkzikfj")
                .withPrivateLinkServiceConnections(Arrays.asList(new PrivateLinkServiceConnection().withName("a")
                    .withGroupIds(Arrays.asList("wczelpci", "elsfeaen", "abfatkl"))
                    .withRequestMessage("xbjhwuaanozjosph")))
                .withManualPrivateLinkServiceConnections(Arrays.asList(
                    new PrivateLinkServiceConnection().withName("pjrvxagl")
                        .withGroupIds(Arrays.asList("mjwosytx", "tcs"))
                        .withRequestMessage("cktqumiekkezzi"),
                    new PrivateLinkServiceConnection().withName("ly")
                        .withGroupIds(Arrays.asList("dgqggebdu", "ygaeqidbqfatpxl"))
                        .withRequestMessage("xcyjmoadsuvarmy")))
                .withPrivateLinkServiceProxies(Arrays.asList(
                    new PrivateLinkServiceProxy().withId("sjqbjhhyxxrw")
                        .withRemotePrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateEndpointConnectionStatus.DISCONNECTED)
                            .withDescription("uhpkxkgymar")
                            .withActionsRequired("n"))
                        .withRemotePrivateEndpointConnection(
                            new RemotePrivateEndpointConnection().withId("qugjhkycube"))
                        .withGroupConnectivityInformation(
                            Arrays.asList(new GroupConnectivityInformation(), new GroupConnectivityInformation())),
                    new PrivateLinkServiceProxy().withId("sofwqmzqalkrmnji")
                        .withRemotePrivateLinkServiceConnectionState(
                            new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointConnectionStatus.REJECTED)
                                .withDescription("q")
                                .withActionsRequired("dfnbyxbaaabjyv"))
                        .withRemotePrivateEndpointConnection(
                            new RemotePrivateEndpointConnection().withId("fimrzrtuzqogse"))
                        .withGroupConnectivityInformation(Arrays.asList(new GroupConnectivityInformation(),
                            new GroupConnectivityInformation(), new GroupConnectivityInformation()))))
                .withConnectionDetails(Arrays.asList(new ConnectionDetails().withId("nwnwme")
                    .withPrivateIpAddress("syyceuzsoibjud")
                    .withLinkIdentifier("rx")
                    .withGroupId("thzvaytdwkqbrqu")
                    .withMemberName("axhexiilivp")))))
            .withEtag("iirqtd");
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionProxyInner.class);
        Assertions.assertEquals("kfoqreyfkzikfj", model.properties().remotePrivateEndpoint().id());
        Assertions.assertEquals("a",
            model.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("wczelpci",
            model.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("xbjhwuaanozjosph",
            model.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("pjrvxagl",
            model.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("mjwosytx",
            model.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("cktqumiekkezzi",
            model.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("sjqbjhhyxxrw",
            model.properties().remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals(PrivateEndpointConnectionStatus.DISCONNECTED,
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .status());
        Assertions.assertEquals("uhpkxkgymar",
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .description());
        Assertions.assertEquals("n",
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .actionsRequired());
        Assertions.assertEquals("qugjhkycube",
            model.properties()
                .remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateEndpointConnection()
                .id());
        Assertions.assertEquals("nwnwme", model.properties().remotePrivateEndpoint().connectionDetails().get(0).id());
        Assertions.assertEquals("syyceuzsoibjud",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).privateIpAddress());
        Assertions.assertEquals("rx",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).linkIdentifier());
        Assertions.assertEquals("thzvaytdwkqbrqu",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).groupId());
        Assertions.assertEquals("axhexiilivp",
            model.properties().remotePrivateEndpoint().connectionDetails().get(0).memberName());
        Assertions.assertEquals("iirqtd", model.etag());
    }
}
