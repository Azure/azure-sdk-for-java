// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Event model properties.
 */
@Fluent
public final class EventModelProperties implements JsonSerializable<EventModelProperties> {
    /*
     * Gets or sets the resource type.
     */
    private String resourceType;

    /*
     * Gets or sets the resource name.
     */
    private String resourceName;

    /*
     * Gets or sets the event type.
     */
    private String eventType;

    /*
     * Gets or sets the event name.
     */
    private String eventName;

    /*
     * Gets or sets the time at which the event occurred at source.
     */
    private OffsetDateTime timeOfOccurrence;

    /*
     * Gets or sets the event severity.
     */
    private String severity;

    /*
     * Gets or sets the event description.
     */
    private String description;

    /*
     * Gets or sets the event correlation Id.
     */
    private String correlationId;

    /*
     * Gets or sets the errors associated with this event.
     */
    private List<HealthErrorModel> healthErrors;

    /*
     * Event model custom properties.
     */
    private EventModelCustomProperties customProperties;

    /**
     * Creates an instance of EventModelProperties class.
     */
    public EventModelProperties() {
    }

    /**
     * Get the resourceType property: Gets or sets the resource type.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the resourceName property: Gets or sets the resource name.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Get the eventType property: Gets or sets the event type.
     * 
     * @return the eventType value.
     */
    public String eventType() {
        return this.eventType;
    }

    /**
     * Get the eventName property: Gets or sets the event name.
     * 
     * @return the eventName value.
     */
    public String eventName() {
        return this.eventName;
    }

    /**
     * Get the timeOfOccurrence property: Gets or sets the time at which the event occurred at source.
     * 
     * @return the timeOfOccurrence value.
     */
    public OffsetDateTime timeOfOccurrence() {
        return this.timeOfOccurrence;
    }

    /**
     * Get the severity property: Gets or sets the event severity.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Get the description property: Gets or sets the event description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the correlationId property: Gets or sets the event correlation Id.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the healthErrors property: Gets or sets the errors associated with this event.
     * 
     * @return the healthErrors value.
     */
    public List<HealthErrorModel> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the customProperties property: Event model custom properties.
     * 
     * @return the customProperties value.
     */
    public EventModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Event model custom properties.
     * 
     * @param customProperties the customProperties value to set.
     * @return the EventModelProperties object itself.
     */
    public EventModelProperties withCustomProperties(EventModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property customProperties in model EventModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EventModelProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventModelProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EventModelProperties.
     */
    public static EventModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventModelProperties deserializedEventModelProperties = new EventModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customProperties".equals(fieldName)) {
                    deserializedEventModelProperties.customProperties = EventModelCustomProperties.fromJson(reader);
                } else if ("resourceType".equals(fieldName)) {
                    deserializedEventModelProperties.resourceType = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedEventModelProperties.resourceName = reader.getString();
                } else if ("eventType".equals(fieldName)) {
                    deserializedEventModelProperties.eventType = reader.getString();
                } else if ("eventName".equals(fieldName)) {
                    deserializedEventModelProperties.eventName = reader.getString();
                } else if ("timeOfOccurrence".equals(fieldName)) {
                    deserializedEventModelProperties.timeOfOccurrence = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("severity".equals(fieldName)) {
                    deserializedEventModelProperties.severity = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedEventModelProperties.description = reader.getString();
                } else if ("correlationId".equals(fieldName)) {
                    deserializedEventModelProperties.correlationId = reader.getString();
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthErrorModel> healthErrors
                        = reader.readArray(reader1 -> HealthErrorModel.fromJson(reader1));
                    deserializedEventModelProperties.healthErrors = healthErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventModelProperties;
        });
    }
}
