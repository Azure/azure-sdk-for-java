// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.VaultsClient;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.VaultModelInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Vaults;

public final class VaultsImpl implements Vaults {
    private static final ClientLogger LOGGER = new ClientLogger(VaultsImpl.class);

    private final VaultsClient innerClient;

    private final com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager
        serviceManager;

    public VaultsImpl(
        VaultsClient innerClient,
        com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager
            serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<VaultModel> getByResourceGroupWithResponse(
        String resourceGroupName, String vaultName, Context context) {
        Response<VaultModelInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, vaultName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VaultModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VaultModel getByResourceGroup(String resourceGroupName, String vaultName) {
        VaultModelInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, vaultName);
        if (inner != null) {
            return new VaultModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String vaultName) {
        this.serviceClient().delete(resourceGroupName, vaultName);
    }

    public void delete(String resourceGroupName, String vaultName, Context context) {
        this.serviceClient().delete(resourceGroupName, vaultName, context);
    }

    public PagedIterable<VaultModel> list() {
        PagedIterable<VaultModelInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new VaultModelImpl(inner1, this.manager()));
    }

    public PagedIterable<VaultModel> list(String continuationToken, Context context) {
        PagedIterable<VaultModelInner> inner = this.serviceClient().list(continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new VaultModelImpl(inner1, this.manager()));
    }

    public PagedIterable<VaultModel> listByResourceGroup(String resourceGroupName) {
        PagedIterable<VaultModelInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new VaultModelImpl(inner1, this.manager()));
    }

    public PagedIterable<VaultModel> listByResourceGroup(
        String resourceGroupName, String continuationToken, Context context) {
        PagedIterable<VaultModelInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new VaultModelImpl(inner1, this.manager()));
    }

    public VaultModel getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, vaultName, Context.NONE).getValue();
    }

    public Response<VaultModel> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, vaultName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        this.delete(resourceGroupName, vaultName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = Utils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        this.delete(resourceGroupName, vaultName, context);
    }

    private VaultsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager manager() {
        return this.serviceManager;
    }

    public VaultModelImpl define(String name) {
        return new VaultModelImpl(name, this.manager());
    }
}
