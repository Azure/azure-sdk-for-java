// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of Vaults. */
public interface Vaults {
    /**
     * Gets the vault.
     *
     * <p>Gets the details of the vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the vault along with {@link Response}.
     */
    Response<VaultModel> getByResourceGroupWithResponse(String resourceGroupName, String vaultName, Context context);

    /**
     * Gets the vault.
     *
     * <p>Gets the details of the vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the vault.
     */
    VaultModel getByResourceGroup(String resourceGroupName, String vaultName);

    /**
     * Deletes the vault.
     *
     * <p>Removes the vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String vaultName);

    /**
     * Deletes the vault.
     *
     * <p>Removes the vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String vaultName, Context context);

    /**
     * Lists the vaults.
     *
     * <p>Gets the list of vaults in the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of vaults in the given subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<VaultModel> list();

    /**
     * Lists the vaults.
     *
     * <p>Gets the list of vaults in the given subscription.
     *
     * @param continuationToken Continuation token from the previous call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of vaults in the given subscription as paginated response with {@link PagedIterable}.
     */
    PagedIterable<VaultModel> list(String continuationToken, Context context);

    /**
     * Lists the vaults.
     *
     * <p>Gets the list of vaults in the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of vaults in the given subscription and resource group as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<VaultModel> listByResourceGroup(String resourceGroupName);

    /**
     * Lists the vaults.
     *
     * <p>Gets the list of vaults in the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param continuationToken Continuation token from the previous call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of vaults in the given subscription and resource group as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<VaultModel> listByResourceGroup(String resourceGroupName, String continuationToken, Context context);

    /**
     * Gets the vault.
     *
     * <p>Gets the details of the vault.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the vault along with {@link Response}.
     */
    VaultModel getById(String id);

    /**
     * Gets the vault.
     *
     * <p>Gets the details of the vault.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the vault along with {@link Response}.
     */
    Response<VaultModel> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the vault.
     *
     * <p>Removes the vault.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the vault.
     *
     * <p>Removes the vault.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new VaultModel resource.
     *
     * @param name resource name.
     * @return the first stage of the new VaultModel definition.
     */
    VaultModel.DefinitionStages.Blank define(String name);
}
