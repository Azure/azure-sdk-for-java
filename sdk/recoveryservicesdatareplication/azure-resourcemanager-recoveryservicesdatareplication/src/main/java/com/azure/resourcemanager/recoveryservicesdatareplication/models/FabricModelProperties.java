// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Fabric model properties. */
@Fluent
public final class FabricModelProperties {
    /*
     * Gets or sets the provisioning state of the fabric.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the service endpoint.
     */
    @JsonProperty(value = "serviceEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String serviceEndpoint;

    /*
     * Gets or sets the service resource Id.
     */
    @JsonProperty(value = "serviceResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String serviceResourceId;

    /*
     * Gets or sets the fabric health.
     */
    @JsonProperty(value = "health", access = JsonProperty.Access.WRITE_ONLY)
    private HealthStatus health;

    /*
     * Gets or sets the list of health errors.
     */
    @JsonProperty(value = "healthErrors", access = JsonProperty.Access.WRITE_ONLY)
    private List<HealthErrorModel> healthErrors;

    /*
     * Fabric model custom properties.
     */
    @JsonProperty(value = "customProperties", required = true)
    private FabricModelCustomProperties customProperties;

    /** Creates an instance of FabricModelProperties class. */
    public FabricModelProperties() {
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the fabric.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the serviceEndpoint property: Gets or sets the service endpoint.
     *
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the serviceResourceId property: Gets or sets the service resource Id.
     *
     * @return the serviceResourceId value.
     */
    public String serviceResourceId() {
        return this.serviceResourceId;
    }

    /**
     * Get the health property: Gets or sets the fabric health.
     *
     * @return the health value.
     */
    public HealthStatus health() {
        return this.health;
    }

    /**
     * Get the healthErrors property: Gets or sets the list of health errors.
     *
     * @return the healthErrors value.
     */
    public List<HealthErrorModel> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the customProperties property: Fabric model custom properties.
     *
     * @return the customProperties value.
     */
    public FabricModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Fabric model custom properties.
     *
     * @param customProperties the customProperties value to set.
     * @return the FabricModelProperties object itself.
     */
    public FabricModelProperties withCustomProperties(FabricModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property customProperties in model FabricModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FabricModelProperties.class);
}
