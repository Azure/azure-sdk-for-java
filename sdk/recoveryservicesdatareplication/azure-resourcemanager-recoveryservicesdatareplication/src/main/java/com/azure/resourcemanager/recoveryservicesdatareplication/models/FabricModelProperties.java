// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Fabric model properties.
 */
@Fluent
public final class FabricModelProperties implements JsonSerializable<FabricModelProperties> {
    /*
     * Gets or sets the provisioning state of the fabric.
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the service endpoint.
     */
    private String serviceEndpoint;

    /*
     * Gets or sets the service resource Id.
     */
    private String serviceResourceId;

    /*
     * Gets or sets the fabric health.
     */
    private HealthStatus health;

    /*
     * Gets or sets the list of health errors.
     */
    private List<HealthErrorModel> healthErrors;

    /*
     * Fabric model custom properties.
     */
    private FabricModelCustomProperties customProperties;

    /**
     * Creates an instance of FabricModelProperties class.
     */
    public FabricModelProperties() {
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the fabric.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the serviceEndpoint property: Gets or sets the service endpoint.
     * 
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the serviceResourceId property: Gets or sets the service resource Id.
     * 
     * @return the serviceResourceId value.
     */
    public String serviceResourceId() {
        return this.serviceResourceId;
    }

    /**
     * Get the health property: Gets or sets the fabric health.
     * 
     * @return the health value.
     */
    public HealthStatus health() {
        return this.health;
    }

    /**
     * Get the healthErrors property: Gets or sets the list of health errors.
     * 
     * @return the healthErrors value.
     */
    public List<HealthErrorModel> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the customProperties property: Fabric model custom properties.
     * 
     * @return the customProperties value.
     */
    public FabricModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Fabric model custom properties.
     * 
     * @param customProperties the customProperties value to set.
     * @return the FabricModelProperties object itself.
     */
    public FabricModelProperties withCustomProperties(FabricModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property customProperties in model FabricModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FabricModelProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricModelProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FabricModelProperties.
     */
    public static FabricModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricModelProperties deserializedFabricModelProperties = new FabricModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customProperties".equals(fieldName)) {
                    deserializedFabricModelProperties.customProperties = FabricModelCustomProperties.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFabricModelProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedFabricModelProperties.serviceEndpoint = reader.getString();
                } else if ("serviceResourceId".equals(fieldName)) {
                    deserializedFabricModelProperties.serviceResourceId = reader.getString();
                } else if ("health".equals(fieldName)) {
                    deserializedFabricModelProperties.health = HealthStatus.fromString(reader.getString());
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthErrorModel> healthErrors
                        = reader.readArray(reader1 -> HealthErrorModel.fromJson(reader1));
                    deserializedFabricModelProperties.healthErrors = healthErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFabricModelProperties;
        });
    }
}
