// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AzStackHCI fabric model custom properties.
 */
@Fluent
public final class AzStackHCIFabricModelCustomProperties extends FabricModelCustomProperties {
    /*
     * Discriminator property for FabricModelCustomProperties.
     */
    private String instanceType = "AzStackHCI";

    /*
     * Gets or sets the ARM Id of the AzStackHCI site.
     */
    private String azStackHciSiteId;

    /*
     * Gets or sets the Appliance name.
     */
    private List<String> applianceName;

    /*
     * AzStackHCI cluster properties.
     */
    private AzStackHCIClusterProperties cluster;

    /*
     * Gets or sets the fabric resource Id.
     */
    private String fabricResourceId;

    /*
     * Gets or sets the fabric container Id.
     */
    private String fabricContainerId;

    /*
     * Gets or sets the Migration solution ARM Id.
     */
    private String migrationSolutionId;

    /*
     * Gets or sets the migration hub Uri.
     */
    private String migrationHubUri;

    /**
     * Creates an instance of AzStackHCIFabricModelCustomProperties class.
     */
    public AzStackHCIFabricModelCustomProperties() {
    }

    /**
     * Get the instanceType property: Discriminator property for FabricModelCustomProperties.
     * 
     * @return the instanceType value.
     */
    @Override
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the azStackHciSiteId property: Gets or sets the ARM Id of the AzStackHCI site.
     * 
     * @return the azStackHciSiteId value.
     */
    public String azStackHciSiteId() {
        return this.azStackHciSiteId;
    }

    /**
     * Set the azStackHciSiteId property: Gets or sets the ARM Id of the AzStackHCI site.
     * 
     * @param azStackHciSiteId the azStackHciSiteId value to set.
     * @return the AzStackHCIFabricModelCustomProperties object itself.
     */
    public AzStackHCIFabricModelCustomProperties withAzStackHciSiteId(String azStackHciSiteId) {
        this.azStackHciSiteId = azStackHciSiteId;
        return this;
    }

    /**
     * Get the applianceName property: Gets or sets the Appliance name.
     * 
     * @return the applianceName value.
     */
    public List<String> applianceName() {
        return this.applianceName;
    }

    /**
     * Get the cluster property: AzStackHCI cluster properties.
     * 
     * @return the cluster value.
     */
    public AzStackHCIClusterProperties cluster() {
        return this.cluster;
    }

    /**
     * Set the cluster property: AzStackHCI cluster properties.
     * 
     * @param cluster the cluster value to set.
     * @return the AzStackHCIFabricModelCustomProperties object itself.
     */
    public AzStackHCIFabricModelCustomProperties withCluster(AzStackHCIClusterProperties cluster) {
        this.cluster = cluster;
        return this;
    }

    /**
     * Get the fabricResourceId property: Gets or sets the fabric resource Id.
     * 
     * @return the fabricResourceId value.
     */
    public String fabricResourceId() {
        return this.fabricResourceId;
    }

    /**
     * Get the fabricContainerId property: Gets or sets the fabric container Id.
     * 
     * @return the fabricContainerId value.
     */
    public String fabricContainerId() {
        return this.fabricContainerId;
    }

    /**
     * Get the migrationSolutionId property: Gets or sets the Migration solution ARM Id.
     * 
     * @return the migrationSolutionId value.
     */
    public String migrationSolutionId() {
        return this.migrationSolutionId;
    }

    /**
     * Set the migrationSolutionId property: Gets or sets the Migration solution ARM Id.
     * 
     * @param migrationSolutionId the migrationSolutionId value to set.
     * @return the AzStackHCIFabricModelCustomProperties object itself.
     */
    public AzStackHCIFabricModelCustomProperties withMigrationSolutionId(String migrationSolutionId) {
        this.migrationSolutionId = migrationSolutionId;
        return this;
    }

    /**
     * Get the migrationHubUri property: Gets or sets the migration hub Uri.
     * 
     * @return the migrationHubUri value.
     */
    public String migrationHubUri() {
        return this.migrationHubUri;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (azStackHciSiteId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azStackHciSiteId in model AzStackHCIFabricModelCustomProperties"));
        }
        if (cluster() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property cluster in model AzStackHCIFabricModelCustomProperties"));
        } else {
            cluster().validate();
        }
        if (migrationSolutionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property migrationSolutionId in model AzStackHCIFabricModelCustomProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzStackHCIFabricModelCustomProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azStackHciSiteId", this.azStackHciSiteId);
        jsonWriter.writeJsonField("cluster", this.cluster);
        jsonWriter.writeStringField("migrationSolutionId", this.migrationSolutionId);
        jsonWriter.writeStringField("instanceType", this.instanceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzStackHCIFabricModelCustomProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzStackHCIFabricModelCustomProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzStackHCIFabricModelCustomProperties.
     */
    public static AzStackHCIFabricModelCustomProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzStackHCIFabricModelCustomProperties deserializedAzStackHCIFabricModelCustomProperties
                = new AzStackHCIFabricModelCustomProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azStackHciSiteId".equals(fieldName)) {
                    deserializedAzStackHCIFabricModelCustomProperties.azStackHciSiteId = reader.getString();
                } else if ("cluster".equals(fieldName)) {
                    deserializedAzStackHCIFabricModelCustomProperties.cluster
                        = AzStackHCIClusterProperties.fromJson(reader);
                } else if ("migrationSolutionId".equals(fieldName)) {
                    deserializedAzStackHCIFabricModelCustomProperties.migrationSolutionId = reader.getString();
                } else if ("instanceType".equals(fieldName)) {
                    deserializedAzStackHCIFabricModelCustomProperties.instanceType = reader.getString();
                } else if ("applianceName".equals(fieldName)) {
                    List<String> applianceName = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzStackHCIFabricModelCustomProperties.applianceName = applianceName;
                } else if ("fabricResourceId".equals(fieldName)) {
                    deserializedAzStackHCIFabricModelCustomProperties.fabricResourceId = reader.getString();
                } else if ("fabricContainerId".equals(fieldName)) {
                    deserializedAzStackHCIFabricModelCustomProperties.fabricContainerId = reader.getString();
                } else if ("migrationHubUri".equals(fieldName)) {
                    deserializedAzStackHCIFabricModelCustomProperties.migrationHubUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzStackHCIFabricModelCustomProperties;
        });
    }
}
