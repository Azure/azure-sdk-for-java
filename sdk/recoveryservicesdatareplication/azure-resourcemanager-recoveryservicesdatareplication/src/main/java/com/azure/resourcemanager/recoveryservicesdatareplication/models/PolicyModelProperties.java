// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Policy model properties. */
@Fluent
public final class PolicyModelProperties {
    /*
     * Gets or sets the provisioning state of the policy.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Policy model custom properties.
     */
    @JsonProperty(value = "customProperties", required = true)
    private PolicyModelCustomProperties customProperties;

    /** Creates an instance of PolicyModelProperties class. */
    public PolicyModelProperties() {
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the policy.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the customProperties property: Policy model custom properties.
     *
     * @return the customProperties value.
     */
    public PolicyModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Policy model custom properties.
     *
     * @param customProperties the customProperties value to set.
     * @return the PolicyModelProperties object itself.
     */
    public PolicyModelProperties withCustomProperties(PolicyModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property customProperties in model PolicyModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PolicyModelProperties.class);
}
