// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Workflow model custom properties.
 */
@Immutable
public class WorkflowModelCustomProperties implements JsonSerializable<WorkflowModelCustomProperties> {
    /*
     * Gets or sets the instance type.
     */
    private String instanceType = "WorkflowModelCustomProperties";

    /*
     * Gets or sets any custom properties of the affected object.
     */
    private Map<String, String> affectedObjectDetails;

    /**
     * Creates an instance of WorkflowModelCustomProperties class.
     */
    public WorkflowModelCustomProperties() {
    }

    /**
     * Get the instanceType property: Gets or sets the instance type.
     * 
     * @return the instanceType value.
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Get the affectedObjectDetails property: Gets or sets any custom properties of the affected object.
     * 
     * @return the affectedObjectDetails value.
     */
    public Map<String, String> affectedObjectDetails() {
        return this.affectedObjectDetails;
    }

    /**
     * Set the affectedObjectDetails property: Gets or sets any custom properties of the affected object.
     * 
     * @param affectedObjectDetails the affectedObjectDetails value to set.
     * @return the WorkflowModelCustomProperties object itself.
     */
    WorkflowModelCustomProperties withAffectedObjectDetails(Map<String, String> affectedObjectDetails) {
        this.affectedObjectDetails = affectedObjectDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceType", this.instanceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkflowModelCustomProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkflowModelCustomProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkflowModelCustomProperties.
     */
    public static WorkflowModelCustomProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("instanceType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("FailoverWorkflowDetails".equals(discriminatorValue)) {
                    return FailoverWorkflowModelCustomProperties.fromJson(readerToUse.reset());
                } else if ("TestFailoverCleanupWorkflowDetails".equals(discriminatorValue)) {
                    return TestFailoverCleanupWorkflowModelCustomProperties.fromJson(readerToUse.reset());
                } else if ("TestFailoverWorkflowDetails".equals(discriminatorValue)) {
                    return TestFailoverWorkflowModelCustomProperties.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static WorkflowModelCustomProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkflowModelCustomProperties deserializedWorkflowModelCustomProperties
                = new WorkflowModelCustomProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceType".equals(fieldName)) {
                    deserializedWorkflowModelCustomProperties.instanceType = reader.getString();
                } else if ("affectedObjectDetails".equals(fieldName)) {
                    Map<String, String> affectedObjectDetails = reader.readMap(reader1 -> reader1.getString());
                    deserializedWorkflowModelCustomProperties.affectedObjectDetails = affectedObjectDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkflowModelCustomProperties;
        });
    }
}
