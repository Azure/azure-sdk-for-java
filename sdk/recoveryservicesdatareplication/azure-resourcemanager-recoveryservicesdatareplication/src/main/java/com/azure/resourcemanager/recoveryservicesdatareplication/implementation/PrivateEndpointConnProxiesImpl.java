// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.PrivateEndpointConnProxiesClient;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.PrivEndptConnProxyInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivEndptConnProxy;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnProxies;

public final class PrivateEndpointConnProxiesImpl implements PrivateEndpointConnProxies {
    private static final ClientLogger LOGGER = new ClientLogger(PrivateEndpointConnProxiesImpl.class);

    private final PrivateEndpointConnProxiesClient innerClient;

    private final com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager serviceManager;

    public PrivateEndpointConnProxiesImpl(PrivateEndpointConnProxiesClient innerClient,
        com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<PrivEndptConnProxy> getWithResponse(String resourceGroupName, String vaultName,
        String privateEndpointConnectionProxyName, Context context) {
        Response<PrivEndptConnProxyInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, vaultName, privateEndpointConnectionProxyName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrivEndptConnProxyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivEndptConnProxy get(String resourceGroupName, String vaultName,
        String privateEndpointConnectionProxyName) {
        PrivEndptConnProxyInner inner
            = this.serviceClient().get(resourceGroupName, vaultName, privateEndpointConnectionProxyName);
        if (inner != null) {
            return new PrivEndptConnProxyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String vaultName, String privateEndpointConnectionProxyName) {
        this.serviceClient().delete(resourceGroupName, vaultName, privateEndpointConnectionProxyName);
    }

    public void delete(String resourceGroupName, String vaultName, String privateEndpointConnectionProxyName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, vaultName, privateEndpointConnectionProxyName, context);
    }

    public PagedIterable<PrivEndptConnProxy> list(String resourceGroupName, String vaultName) {
        PagedIterable<PrivEndptConnProxyInner> inner = this.serviceClient().list(resourceGroupName, vaultName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PrivEndptConnProxyImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivEndptConnProxy> list(String resourceGroupName, String vaultName, Context context) {
        PagedIterable<PrivEndptConnProxyInner> inner = this.serviceClient().list(resourceGroupName, vaultName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PrivEndptConnProxyImpl(inner1, this.manager()));
    }

    public Response<PrivEndptConnProxy> validateWithResponse(String resourceGroupName, String vaultName,
        String privateEndpointConnectionProxyName, PrivEndptConnProxyInner body, Context context) {
        Response<PrivEndptConnProxyInner> inner = this.serviceClient()
            .validateWithResponse(resourceGroupName, vaultName, privateEndpointConnectionProxyName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrivEndptConnProxyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivEndptConnProxy validate(String resourceGroupName, String vaultName,
        String privateEndpointConnectionProxyName, PrivEndptConnProxyInner body) {
        PrivEndptConnProxyInner inner
            = this.serviceClient().validate(resourceGroupName, vaultName, privateEndpointConnectionProxyName, body);
        if (inner != null) {
            return new PrivEndptConnProxyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PrivEndptConnProxy getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String privateEndpointConnectionProxyName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnectionProxies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, vaultName, privateEndpointConnectionProxyName, Context.NONE)
            .getValue();
    }

    public Response<PrivEndptConnProxy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String privateEndpointConnectionProxyName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnectionProxies'.", id)));
        }
        return this.getWithResponse(resourceGroupName, vaultName, privateEndpointConnectionProxyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String privateEndpointConnectionProxyName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnectionProxies'.", id)));
        }
        this.delete(resourceGroupName, vaultName, privateEndpointConnectionProxyName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String privateEndpointConnectionProxyName
            = ResourceManagerUtils.getValueFromIdByName(id, "privateEndpointConnectionProxies");
        if (privateEndpointConnectionProxyName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String.format(
                "The resource ID '%s' is not valid. Missing path segment 'privateEndpointConnectionProxies'.", id)));
        }
        this.delete(resourceGroupName, vaultName, privateEndpointConnectionProxyName, context);
    }

    private PrivateEndpointConnProxiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager manager() {
        return this.serviceManager;
    }

    public PrivEndptConnProxyImpl define(String name) {
        return new PrivEndptConnProxyImpl(name, this.manager());
    }
}
