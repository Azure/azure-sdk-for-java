// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.FabricAgentsClient;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.FabricAgentModelInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.FabricAgentModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.FabricAgents;

public final class FabricAgentsImpl implements FabricAgents {
    private static final ClientLogger LOGGER = new ClientLogger(FabricAgentsImpl.class);

    private final FabricAgentsClient innerClient;

    private final com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager serviceManager;

    public FabricAgentsImpl(FabricAgentsClient innerClient,
        com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<FabricAgentModel> getWithResponse(String resourceGroupName, String fabricName,
        String fabricAgentName, Context context) {
        Response<FabricAgentModelInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, fabricName, fabricAgentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FabricAgentModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FabricAgentModel get(String resourceGroupName, String fabricName, String fabricAgentName) {
        FabricAgentModelInner inner = this.serviceClient().get(resourceGroupName, fabricName, fabricAgentName);
        if (inner != null) {
            return new FabricAgentModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String fabricName, String fabricAgentName) {
        this.serviceClient().delete(resourceGroupName, fabricName, fabricAgentName);
    }

    public void delete(String resourceGroupName, String fabricName, String fabricAgentName, Context context) {
        this.serviceClient().delete(resourceGroupName, fabricName, fabricAgentName, context);
    }

    public PagedIterable<FabricAgentModel> list(String resourceGroupName, String fabricName) {
        PagedIterable<FabricAgentModelInner> inner = this.serviceClient().list(resourceGroupName, fabricName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricAgentModelImpl(inner1, this.manager()));
    }

    public PagedIterable<FabricAgentModel> list(String resourceGroupName, String fabricName, Context context) {
        PagedIterable<FabricAgentModelInner> inner = this.serviceClient().list(resourceGroupName, fabricName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new FabricAgentModelImpl(inner1, this.manager()));
    }

    public FabricAgentModel getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String fabricAgentName = ResourceManagerUtils.getValueFromIdByName(id, "fabricAgents");
        if (fabricAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fabricAgents'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fabricName, fabricAgentName, Context.NONE).getValue();
    }

    public Response<FabricAgentModel> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String fabricAgentName = ResourceManagerUtils.getValueFromIdByName(id, "fabricAgents");
        if (fabricAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fabricAgents'.", id)));
        }
        return this.getWithResponse(resourceGroupName, fabricName, fabricAgentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String fabricAgentName = ResourceManagerUtils.getValueFromIdByName(id, "fabricAgents");
        if (fabricAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fabricAgents'.", id)));
        }
        this.delete(resourceGroupName, fabricName, fabricAgentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String fabricName = ResourceManagerUtils.getValueFromIdByName(id, "replicationFabrics");
        if (fabricName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationFabrics'.", id)));
        }
        String fabricAgentName = ResourceManagerUtils.getValueFromIdByName(id, "fabricAgents");
        if (fabricAgentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'fabricAgents'.", id)));
        }
        this.delete(resourceGroupName, fabricName, fabricAgentName, context);
    }

    private FabricAgentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager manager() {
        return this.serviceManager;
    }

    public FabricAgentModelImpl define(String name) {
        return new FabricAgentModelImpl(name, this.manager());
    }
}
