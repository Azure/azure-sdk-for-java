// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Protected item model properties. */
@Fluent
public final class ProtectedItemModelProperties {
    /*
     * Gets or sets the policy name.
     */
    @JsonProperty(value = "policyName", required = true)
    private String policyName;

    /*
     * Gets or sets the replication extension name.
     */
    @JsonProperty(value = "replicationExtensionName", required = true)
    private String replicationExtensionName;

    /*
     * Gets or sets the protected item correlation Id.
     */
    @JsonProperty(value = "correlationId", access = JsonProperty.Access.WRITE_ONLY)
    private String correlationId;

    /*
     * Gets or sets the provisioning state of the Dra.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the protection state.
     */
    @JsonProperty(value = "protectionState", access = JsonProperty.Access.WRITE_ONLY)
    private ProtectionState protectionState;

    /*
     * Gets or sets the protection state description.
     */
    @JsonProperty(value = "protectionStateDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String protectionStateDescription;

    /*
     * Gets or sets the test failover state.
     */
    @JsonProperty(value = "testFailoverState", access = JsonProperty.Access.WRITE_ONLY)
    private TestFailoverState testFailoverState;

    /*
     * Gets or sets the Test failover state description.
     */
    @JsonProperty(value = "testFailoverStateDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String testFailoverStateDescription;

    /*
     * Gets or sets the resynchronization state.
     */
    @JsonProperty(value = "resynchronizationState", access = JsonProperty.Access.WRITE_ONLY)
    private ResynchronizationState resynchronizationState;

    /*
     * Gets or sets the fabric object Id.
     */
    @JsonProperty(value = "fabricObjectId", access = JsonProperty.Access.WRITE_ONLY)
    private String fabricObjectId;

    /*
     * Gets or sets the fabric object name.
     */
    @JsonProperty(value = "fabricObjectName", access = JsonProperty.Access.WRITE_ONLY)
    private String fabricObjectName;

    /*
     * Gets or sets the source fabric provider Id.
     */
    @JsonProperty(value = "sourceFabricProviderId", access = JsonProperty.Access.WRITE_ONLY)
    private String sourceFabricProviderId;

    /*
     * Gets or sets the target fabric provider Id.
     */
    @JsonProperty(value = "targetFabricProviderId", access = JsonProperty.Access.WRITE_ONLY)
    private String targetFabricProviderId;

    /*
     * Gets or sets the fabric Id.
     */
    @JsonProperty(value = "fabricId", access = JsonProperty.Access.WRITE_ONLY)
    private String fabricId;

    /*
     * Gets or sets the target fabric Id.
     */
    @JsonProperty(value = "targetFabricId", access = JsonProperty.Access.WRITE_ONLY)
    private String targetFabricId;

    /*
     * Gets or sets the DRA Id.
     */
    @JsonProperty(value = "draId", access = JsonProperty.Access.WRITE_ONLY)
    private String draId;

    /*
     * Gets or sets the target DRA Id.
     */
    @JsonProperty(value = "targetDraId", access = JsonProperty.Access.WRITE_ONLY)
    private String targetDraId;

    /*
     * Gets or sets a value indicating whether resynchronization is required or not.
     */
    @JsonProperty(value = "resyncRequired", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean resyncRequired;

    /*
     * Gets or sets the Last successful planned failover time.
     */
    @JsonProperty(value = "lastSuccessfulPlannedFailoverTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastSuccessfulPlannedFailoverTime;

    /*
     * Gets or sets the Last successful unplanned failover time.
     */
    @JsonProperty(value = "lastSuccessfulUnplannedFailoverTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastSuccessfulUnplannedFailoverTime;

    /*
     * Gets or sets the Last successful test failover time.
     */
    @JsonProperty(value = "lastSuccessfulTestFailoverTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastSuccessfulTestFailoverTime;

    /*
     * The currentJob property.
     */
    @JsonProperty(value = "currentJob", access = JsonProperty.Access.WRITE_ONLY)
    private ProtectedItemModelPropertiesCurrentJob currentJob;

    /*
     * Gets or sets the allowed scenarios on the protected item.
     */
    @JsonProperty(value = "allowedJobs", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> allowedJobs;

    /*
     * The lastFailedEnableProtectionJob property.
     */
    @JsonProperty(value = "lastFailedEnableProtectionJob", access = JsonProperty.Access.WRITE_ONLY)
    private LastFailedEnableProtectionJob lastFailedEnableProtectionJob;

    /*
     * The lastFailedPlannedFailoverJob property.
     */
    @JsonProperty(value = "lastFailedPlannedFailoverJob", access = JsonProperty.Access.WRITE_ONLY)
    private LastFailedPlannedFailoverJob lastFailedPlannedFailoverJob;

    /*
     * The lastTestFailoverJob property.
     */
    @JsonProperty(value = "lastTestFailoverJob", access = JsonProperty.Access.WRITE_ONLY)
    private ProtectedItemModelPropertiesLastTestFailoverJob lastTestFailoverJob;

    /*
     * Gets or sets protected item replication health.
     */
    @JsonProperty(value = "replicationHealth", access = JsonProperty.Access.WRITE_ONLY)
    private HealthStatus replicationHealth;

    /*
     * Gets or sets the list of health errors.
     */
    @JsonProperty(value = "healthErrors", access = JsonProperty.Access.WRITE_ONLY)
    private List<HealthErrorModel> healthErrors;

    /*
     * Protected item model custom properties.
     */
    @JsonProperty(value = "customProperties", required = true)
    private ProtectedItemModelCustomProperties customProperties;

    /** Creates an instance of ProtectedItemModelProperties class. */
    public ProtectedItemModelProperties() {
    }

    /**
     * Get the policyName property: Gets or sets the policy name.
     *
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Set the policyName property: Gets or sets the policy name.
     *
     * @param policyName the policyName value to set.
     * @return the ProtectedItemModelProperties object itself.
     */
    public ProtectedItemModelProperties withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }

    /**
     * Get the replicationExtensionName property: Gets or sets the replication extension name.
     *
     * @return the replicationExtensionName value.
     */
    public String replicationExtensionName() {
        return this.replicationExtensionName;
    }

    /**
     * Set the replicationExtensionName property: Gets or sets the replication extension name.
     *
     * @param replicationExtensionName the replicationExtensionName value to set.
     * @return the ProtectedItemModelProperties object itself.
     */
    public ProtectedItemModelProperties withReplicationExtensionName(String replicationExtensionName) {
        this.replicationExtensionName = replicationExtensionName;
        return this;
    }

    /**
     * Get the correlationId property: Gets or sets the protected item correlation Id.
     *
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the Dra.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the protectionState property: Gets or sets the protection state.
     *
     * @return the protectionState value.
     */
    public ProtectionState protectionState() {
        return this.protectionState;
    }

    /**
     * Get the protectionStateDescription property: Gets or sets the protection state description.
     *
     * @return the protectionStateDescription value.
     */
    public String protectionStateDescription() {
        return this.protectionStateDescription;
    }

    /**
     * Get the testFailoverState property: Gets or sets the test failover state.
     *
     * @return the testFailoverState value.
     */
    public TestFailoverState testFailoverState() {
        return this.testFailoverState;
    }

    /**
     * Get the testFailoverStateDescription property: Gets or sets the Test failover state description.
     *
     * @return the testFailoverStateDescription value.
     */
    public String testFailoverStateDescription() {
        return this.testFailoverStateDescription;
    }

    /**
     * Get the resynchronizationState property: Gets or sets the resynchronization state.
     *
     * @return the resynchronizationState value.
     */
    public ResynchronizationState resynchronizationState() {
        return this.resynchronizationState;
    }

    /**
     * Get the fabricObjectId property: Gets or sets the fabric object Id.
     *
     * @return the fabricObjectId value.
     */
    public String fabricObjectId() {
        return this.fabricObjectId;
    }

    /**
     * Get the fabricObjectName property: Gets or sets the fabric object name.
     *
     * @return the fabricObjectName value.
     */
    public String fabricObjectName() {
        return this.fabricObjectName;
    }

    /**
     * Get the sourceFabricProviderId property: Gets or sets the source fabric provider Id.
     *
     * @return the sourceFabricProviderId value.
     */
    public String sourceFabricProviderId() {
        return this.sourceFabricProviderId;
    }

    /**
     * Get the targetFabricProviderId property: Gets or sets the target fabric provider Id.
     *
     * @return the targetFabricProviderId value.
     */
    public String targetFabricProviderId() {
        return this.targetFabricProviderId;
    }

    /**
     * Get the fabricId property: Gets or sets the fabric Id.
     *
     * @return the fabricId value.
     */
    public String fabricId() {
        return this.fabricId;
    }

    /**
     * Get the targetFabricId property: Gets or sets the target fabric Id.
     *
     * @return the targetFabricId value.
     */
    public String targetFabricId() {
        return this.targetFabricId;
    }

    /**
     * Get the draId property: Gets or sets the DRA Id.
     *
     * @return the draId value.
     */
    public String draId() {
        return this.draId;
    }

    /**
     * Get the targetDraId property: Gets or sets the target DRA Id.
     *
     * @return the targetDraId value.
     */
    public String targetDraId() {
        return this.targetDraId;
    }

    /**
     * Get the resyncRequired property: Gets or sets a value indicating whether resynchronization is required or not.
     *
     * @return the resyncRequired value.
     */
    public Boolean resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Get the lastSuccessfulPlannedFailoverTime property: Gets or sets the Last successful planned failover time.
     *
     * @return the lastSuccessfulPlannedFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulPlannedFailoverTime() {
        return this.lastSuccessfulPlannedFailoverTime;
    }

    /**
     * Get the lastSuccessfulUnplannedFailoverTime property: Gets or sets the Last successful unplanned failover time.
     *
     * @return the lastSuccessfulUnplannedFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulUnplannedFailoverTime() {
        return this.lastSuccessfulUnplannedFailoverTime;
    }

    /**
     * Get the lastSuccessfulTestFailoverTime property: Gets or sets the Last successful test failover time.
     *
     * @return the lastSuccessfulTestFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulTestFailoverTime() {
        return this.lastSuccessfulTestFailoverTime;
    }

    /**
     * Get the currentJob property: The currentJob property.
     *
     * @return the currentJob value.
     */
    public ProtectedItemModelPropertiesCurrentJob currentJob() {
        return this.currentJob;
    }

    /**
     * Get the allowedJobs property: Gets or sets the allowed scenarios on the protected item.
     *
     * @return the allowedJobs value.
     */
    public List<String> allowedJobs() {
        return this.allowedJobs;
    }

    /**
     * Get the lastFailedEnableProtectionJob property: The lastFailedEnableProtectionJob property.
     *
     * @return the lastFailedEnableProtectionJob value.
     */
    public LastFailedEnableProtectionJob lastFailedEnableProtectionJob() {
        return this.lastFailedEnableProtectionJob;
    }

    /**
     * Get the lastFailedPlannedFailoverJob property: The lastFailedPlannedFailoverJob property.
     *
     * @return the lastFailedPlannedFailoverJob value.
     */
    public LastFailedPlannedFailoverJob lastFailedPlannedFailoverJob() {
        return this.lastFailedPlannedFailoverJob;
    }

    /**
     * Get the lastTestFailoverJob property: The lastTestFailoverJob property.
     *
     * @return the lastTestFailoverJob value.
     */
    public ProtectedItemModelPropertiesLastTestFailoverJob lastTestFailoverJob() {
        return this.lastTestFailoverJob;
    }

    /**
     * Get the replicationHealth property: Gets or sets protected item replication health.
     *
     * @return the replicationHealth value.
     */
    public HealthStatus replicationHealth() {
        return this.replicationHealth;
    }

    /**
     * Get the healthErrors property: Gets or sets the list of health errors.
     *
     * @return the healthErrors value.
     */
    public List<HealthErrorModel> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the customProperties property: Protected item model custom properties.
     *
     * @return the customProperties value.
     */
    public ProtectedItemModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Protected item model custom properties.
     *
     * @param customProperties the customProperties value to set.
     * @return the ProtectedItemModelProperties object itself.
     */
    public ProtectedItemModelProperties withCustomProperties(ProtectedItemModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property policyName in model ProtectedItemModelProperties"));
        }
        if (replicationExtensionName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property replicationExtensionName in model ProtectedItemModelProperties"));
        }
        if (currentJob() != null) {
            currentJob().validate();
        }
        if (lastFailedEnableProtectionJob() != null) {
            lastFailedEnableProtectionJob().validate();
        }
        if (lastFailedPlannedFailoverJob() != null) {
            lastFailedPlannedFailoverJob().validate();
        }
        if (lastTestFailoverJob() != null) {
            lastTestFailoverJob().validate();
        }
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property customProperties in model ProtectedItemModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ProtectedItemModelProperties.class);
}
