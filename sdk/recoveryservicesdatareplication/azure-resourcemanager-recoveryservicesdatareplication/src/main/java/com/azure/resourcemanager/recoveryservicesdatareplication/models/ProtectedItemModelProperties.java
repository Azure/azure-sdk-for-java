// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Protected item model properties.
 */
@Fluent
public final class ProtectedItemModelProperties implements JsonSerializable<ProtectedItemModelProperties> {
    /*
     * Gets or sets the policy name.
     */
    private String policyName;

    /*
     * Gets or sets the replication extension name.
     */
    private String replicationExtensionName;

    /*
     * Gets or sets the protected item correlation Id.
     */
    private String correlationId;

    /*
     * Gets or sets the provisioning state of the Dra.
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the protection state.
     */
    private ProtectionState protectionState;

    /*
     * Gets or sets the protection state description.
     */
    private String protectionStateDescription;

    /*
     * Gets or sets the test failover state.
     */
    private TestFailoverState testFailoverState;

    /*
     * Gets or sets the Test failover state description.
     */
    private String testFailoverStateDescription;

    /*
     * Gets or sets the resynchronization state.
     */
    private ResynchronizationState resynchronizationState;

    /*
     * Gets or sets the fabric object Id.
     */
    private String fabricObjectId;

    /*
     * Gets or sets the fabric object name.
     */
    private String fabricObjectName;

    /*
     * Gets or sets the source fabric provider Id.
     */
    private String sourceFabricProviderId;

    /*
     * Gets or sets the target fabric provider Id.
     */
    private String targetFabricProviderId;

    /*
     * Gets or sets the fabric Id.
     */
    private String fabricId;

    /*
     * Gets or sets the target fabric Id.
     */
    private String targetFabricId;

    /*
     * Gets or sets the DRA Id.
     */
    private String draId;

    /*
     * Gets or sets the target DRA Id.
     */
    private String targetDraId;

    /*
     * Gets or sets a value indicating whether resynchronization is required or not.
     */
    private Boolean resyncRequired;

    /*
     * Gets or sets the Last successful planned failover time.
     */
    private OffsetDateTime lastSuccessfulPlannedFailoverTime;

    /*
     * Gets or sets the Last successful unplanned failover time.
     */
    private OffsetDateTime lastSuccessfulUnplannedFailoverTime;

    /*
     * Gets or sets the Last successful test failover time.
     */
    private OffsetDateTime lastSuccessfulTestFailoverTime;

    /*
     * The currentJob property.
     */
    private ProtectedItemModelPropertiesCurrentJob currentJob;

    /*
     * Gets or sets the allowed scenarios on the protected item.
     */
    private List<String> allowedJobs;

    /*
     * The lastFailedEnableProtectionJob property.
     */
    private LastFailedEnableProtectionJob lastFailedEnableProtectionJob;

    /*
     * The lastFailedPlannedFailoverJob property.
     */
    private LastFailedPlannedFailoverJob lastFailedPlannedFailoverJob;

    /*
     * The lastTestFailoverJob property.
     */
    private ProtectedItemModelPropertiesLastTestFailoverJob lastTestFailoverJob;

    /*
     * Gets or sets protected item replication health.
     */
    private HealthStatus replicationHealth;

    /*
     * Gets or sets the list of health errors.
     */
    private List<HealthErrorModel> healthErrors;

    /*
     * Protected item model custom properties.
     */
    private ProtectedItemModelCustomProperties customProperties;

    /**
     * Creates an instance of ProtectedItemModelProperties class.
     */
    public ProtectedItemModelProperties() {
    }

    /**
     * Get the policyName property: Gets or sets the policy name.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Set the policyName property: Gets or sets the policy name.
     * 
     * @param policyName the policyName value to set.
     * @return the ProtectedItemModelProperties object itself.
     */
    public ProtectedItemModelProperties withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }

    /**
     * Get the replicationExtensionName property: Gets or sets the replication extension name.
     * 
     * @return the replicationExtensionName value.
     */
    public String replicationExtensionName() {
        return this.replicationExtensionName;
    }

    /**
     * Set the replicationExtensionName property: Gets or sets the replication extension name.
     * 
     * @param replicationExtensionName the replicationExtensionName value to set.
     * @return the ProtectedItemModelProperties object itself.
     */
    public ProtectedItemModelProperties withReplicationExtensionName(String replicationExtensionName) {
        this.replicationExtensionName = replicationExtensionName;
        return this;
    }

    /**
     * Get the correlationId property: Gets or sets the protected item correlation Id.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the Dra.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the protectionState property: Gets or sets the protection state.
     * 
     * @return the protectionState value.
     */
    public ProtectionState protectionState() {
        return this.protectionState;
    }

    /**
     * Get the protectionStateDescription property: Gets or sets the protection state description.
     * 
     * @return the protectionStateDescription value.
     */
    public String protectionStateDescription() {
        return this.protectionStateDescription;
    }

    /**
     * Get the testFailoverState property: Gets or sets the test failover state.
     * 
     * @return the testFailoverState value.
     */
    public TestFailoverState testFailoverState() {
        return this.testFailoverState;
    }

    /**
     * Get the testFailoverStateDescription property: Gets or sets the Test failover state description.
     * 
     * @return the testFailoverStateDescription value.
     */
    public String testFailoverStateDescription() {
        return this.testFailoverStateDescription;
    }

    /**
     * Get the resynchronizationState property: Gets or sets the resynchronization state.
     * 
     * @return the resynchronizationState value.
     */
    public ResynchronizationState resynchronizationState() {
        return this.resynchronizationState;
    }

    /**
     * Get the fabricObjectId property: Gets or sets the fabric object Id.
     * 
     * @return the fabricObjectId value.
     */
    public String fabricObjectId() {
        return this.fabricObjectId;
    }

    /**
     * Get the fabricObjectName property: Gets or sets the fabric object name.
     * 
     * @return the fabricObjectName value.
     */
    public String fabricObjectName() {
        return this.fabricObjectName;
    }

    /**
     * Get the sourceFabricProviderId property: Gets or sets the source fabric provider Id.
     * 
     * @return the sourceFabricProviderId value.
     */
    public String sourceFabricProviderId() {
        return this.sourceFabricProviderId;
    }

    /**
     * Get the targetFabricProviderId property: Gets or sets the target fabric provider Id.
     * 
     * @return the targetFabricProviderId value.
     */
    public String targetFabricProviderId() {
        return this.targetFabricProviderId;
    }

    /**
     * Get the fabricId property: Gets or sets the fabric Id.
     * 
     * @return the fabricId value.
     */
    public String fabricId() {
        return this.fabricId;
    }

    /**
     * Get the targetFabricId property: Gets or sets the target fabric Id.
     * 
     * @return the targetFabricId value.
     */
    public String targetFabricId() {
        return this.targetFabricId;
    }

    /**
     * Get the draId property: Gets or sets the DRA Id.
     * 
     * @return the draId value.
     */
    public String draId() {
        return this.draId;
    }

    /**
     * Get the targetDraId property: Gets or sets the target DRA Id.
     * 
     * @return the targetDraId value.
     */
    public String targetDraId() {
        return this.targetDraId;
    }

    /**
     * Get the resyncRequired property: Gets or sets a value indicating whether resynchronization is required or not.
     * 
     * @return the resyncRequired value.
     */
    public Boolean resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * Get the lastSuccessfulPlannedFailoverTime property: Gets or sets the Last successful planned failover time.
     * 
     * @return the lastSuccessfulPlannedFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulPlannedFailoverTime() {
        return this.lastSuccessfulPlannedFailoverTime;
    }

    /**
     * Get the lastSuccessfulUnplannedFailoverTime property: Gets or sets the Last successful unplanned failover time.
     * 
     * @return the lastSuccessfulUnplannedFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulUnplannedFailoverTime() {
        return this.lastSuccessfulUnplannedFailoverTime;
    }

    /**
     * Get the lastSuccessfulTestFailoverTime property: Gets or sets the Last successful test failover time.
     * 
     * @return the lastSuccessfulTestFailoverTime value.
     */
    public OffsetDateTime lastSuccessfulTestFailoverTime() {
        return this.lastSuccessfulTestFailoverTime;
    }

    /**
     * Get the currentJob property: The currentJob property.
     * 
     * @return the currentJob value.
     */
    public ProtectedItemModelPropertiesCurrentJob currentJob() {
        return this.currentJob;
    }

    /**
     * Get the allowedJobs property: Gets or sets the allowed scenarios on the protected item.
     * 
     * @return the allowedJobs value.
     */
    public List<String> allowedJobs() {
        return this.allowedJobs;
    }

    /**
     * Get the lastFailedEnableProtectionJob property: The lastFailedEnableProtectionJob property.
     * 
     * @return the lastFailedEnableProtectionJob value.
     */
    public LastFailedEnableProtectionJob lastFailedEnableProtectionJob() {
        return this.lastFailedEnableProtectionJob;
    }

    /**
     * Get the lastFailedPlannedFailoverJob property: The lastFailedPlannedFailoverJob property.
     * 
     * @return the lastFailedPlannedFailoverJob value.
     */
    public LastFailedPlannedFailoverJob lastFailedPlannedFailoverJob() {
        return this.lastFailedPlannedFailoverJob;
    }

    /**
     * Get the lastTestFailoverJob property: The lastTestFailoverJob property.
     * 
     * @return the lastTestFailoverJob value.
     */
    public ProtectedItemModelPropertiesLastTestFailoverJob lastTestFailoverJob() {
        return this.lastTestFailoverJob;
    }

    /**
     * Get the replicationHealth property: Gets or sets protected item replication health.
     * 
     * @return the replicationHealth value.
     */
    public HealthStatus replicationHealth() {
        return this.replicationHealth;
    }

    /**
     * Get the healthErrors property: Gets or sets the list of health errors.
     * 
     * @return the healthErrors value.
     */
    public List<HealthErrorModel> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the customProperties property: Protected item model custom properties.
     * 
     * @return the customProperties value.
     */
    public ProtectedItemModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Protected item model custom properties.
     * 
     * @param customProperties the customProperties value to set.
     * @return the ProtectedItemModelProperties object itself.
     */
    public ProtectedItemModelProperties withCustomProperties(ProtectedItemModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property policyName in model ProtectedItemModelProperties"));
        }
        if (replicationExtensionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property replicationExtensionName in model ProtectedItemModelProperties"));
        }
        if (currentJob() != null) {
            currentJob().validate();
        }
        if (lastFailedEnableProtectionJob() != null) {
            lastFailedEnableProtectionJob().validate();
        }
        if (lastFailedPlannedFailoverJob() != null) {
            lastFailedPlannedFailoverJob().validate();
        }
        if (lastTestFailoverJob() != null) {
            lastTestFailoverJob().validate();
        }
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property customProperties in model ProtectedItemModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ProtectedItemModelProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("policyName", this.policyName);
        jsonWriter.writeStringField("replicationExtensionName", this.replicationExtensionName);
        jsonWriter.writeJsonField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProtectedItemModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProtectedItemModelProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProtectedItemModelProperties.
     */
    public static ProtectedItemModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProtectedItemModelProperties deserializedProtectedItemModelProperties = new ProtectedItemModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyName".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.policyName = reader.getString();
                } else if ("replicationExtensionName".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.replicationExtensionName = reader.getString();
                } else if ("customProperties".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.customProperties
                        = ProtectedItemModelCustomProperties.fromJson(reader);
                } else if ("correlationId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.correlationId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("protectionState".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.protectionState
                        = ProtectionState.fromString(reader.getString());
                } else if ("protectionStateDescription".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.protectionStateDescription = reader.getString();
                } else if ("testFailoverState".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.testFailoverState
                        = TestFailoverState.fromString(reader.getString());
                } else if ("testFailoverStateDescription".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.testFailoverStateDescription = reader.getString();
                } else if ("resynchronizationState".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.resynchronizationState
                        = ResynchronizationState.fromString(reader.getString());
                } else if ("fabricObjectId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.fabricObjectId = reader.getString();
                } else if ("fabricObjectName".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.fabricObjectName = reader.getString();
                } else if ("sourceFabricProviderId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.sourceFabricProviderId = reader.getString();
                } else if ("targetFabricProviderId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.targetFabricProviderId = reader.getString();
                } else if ("fabricId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.fabricId = reader.getString();
                } else if ("targetFabricId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.targetFabricId = reader.getString();
                } else if ("draId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.draId = reader.getString();
                } else if ("targetDraId".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.targetDraId = reader.getString();
                } else if ("resyncRequired".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.resyncRequired
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lastSuccessfulPlannedFailoverTime".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.lastSuccessfulPlannedFailoverTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSuccessfulUnplannedFailoverTime".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.lastSuccessfulUnplannedFailoverTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSuccessfulTestFailoverTime".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.lastSuccessfulTestFailoverTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("currentJob".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.currentJob
                        = ProtectedItemModelPropertiesCurrentJob.fromJson(reader);
                } else if ("allowedJobs".equals(fieldName)) {
                    List<String> allowedJobs = reader.readArray(reader1 -> reader1.getString());
                    deserializedProtectedItemModelProperties.allowedJobs = allowedJobs;
                } else if ("lastFailedEnableProtectionJob".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.lastFailedEnableProtectionJob
                        = LastFailedEnableProtectionJob.fromJson(reader);
                } else if ("lastFailedPlannedFailoverJob".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.lastFailedPlannedFailoverJob
                        = LastFailedPlannedFailoverJob.fromJson(reader);
                } else if ("lastTestFailoverJob".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.lastTestFailoverJob
                        = ProtectedItemModelPropertiesLastTestFailoverJob.fromJson(reader);
                } else if ("replicationHealth".equals(fieldName)) {
                    deserializedProtectedItemModelProperties.replicationHealth
                        = HealthStatus.fromString(reader.getString());
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthErrorModel> healthErrors
                        = reader.readArray(reader1 -> HealthErrorModel.fromJson(reader1));
                    deserializedProtectedItemModelProperties.healthErrors = healthErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProtectedItemModelProperties;
        });
    }
}
