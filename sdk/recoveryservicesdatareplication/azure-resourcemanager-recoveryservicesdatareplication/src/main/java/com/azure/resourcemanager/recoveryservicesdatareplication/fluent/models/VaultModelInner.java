// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModelProperties;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModelSystemData;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Vault model. */
@Fluent
public final class VaultModelInner extends Resource {
    /*
     * Vault properties.
     */
    @JsonProperty(value = "properties")
    private VaultModelProperties properties;

    /*
     * The systemData property.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private VaultModelSystemData systemData;

    /** Creates an instance of VaultModelInner class. */
    public VaultModelInner() {
    }

    /**
     * Get the properties property: Vault properties.
     *
     * @return the properties value.
     */
    public VaultModelProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Vault properties.
     *
     * @param properties the properties value to set.
     * @return the VaultModelInner object itself.
     */
    public VaultModelInner withProperties(VaultModelProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the systemData property: The systemData property.
     *
     * @return the systemData value.
     */
    public VaultModelSystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public VaultModelInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public VaultModelInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
        if (systemData() != null) {
            systemData().validate();
        }
    }
}
