// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Identity model.
 */
@Fluent
public final class IdentityModel implements JsonSerializable<IdentityModel> {
    /*
     * Gets or sets the tenant Id of the SPN with which Dra communicates to service.
     */
    private String tenantId;

    /*
     * Gets or sets the client/application Id of the SPN with which Dra communicates to
     * service.
     */
    private String applicationId;

    /*
     * Gets or sets the object Id of the SPN with which Dra communicates to service.
     */
    private String objectId;

    /*
     * Gets or sets the audience of the SPN with which Dra communicates to service.
     */
    private String audience;

    /*
     * Gets or sets the authority of the SPN with which Dra communicates to service.
     */
    private String aadAuthority;

    /**
     * Creates an instance of IdentityModel class.
     */
    public IdentityModel() {
    }

    /**
     * Get the tenantId property: Gets or sets the tenant Id of the SPN with which Dra communicates to service.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Gets or sets the tenant Id of the SPN with which Dra communicates to service.
     * 
     * @param tenantId the tenantId value to set.
     * @return the IdentityModel object itself.
     */
    public IdentityModel withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the applicationId property: Gets or sets the client/application Id of the SPN with which Dra communicates to
     * service.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: Gets or sets the client/application Id of the SPN with which Dra communicates to
     * service.
     * 
     * @param applicationId the applicationId value to set.
     * @return the IdentityModel object itself.
     */
    public IdentityModel withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the objectId property: Gets or sets the object Id of the SPN with which Dra communicates to service.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: Gets or sets the object Id of the SPN with which Dra communicates to service.
     * 
     * @param objectId the objectId value to set.
     * @return the IdentityModel object itself.
     */
    public IdentityModel withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Get the audience property: Gets or sets the audience of the SPN with which Dra communicates to service.
     * 
     * @return the audience value.
     */
    public String audience() {
        return this.audience;
    }

    /**
     * Set the audience property: Gets or sets the audience of the SPN with which Dra communicates to service.
     * 
     * @param audience the audience value to set.
     * @return the IdentityModel object itself.
     */
    public IdentityModel withAudience(String audience) {
        this.audience = audience;
        return this;
    }

    /**
     * Get the aadAuthority property: Gets or sets the authority of the SPN with which Dra communicates to service.
     * 
     * @return the aadAuthority value.
     */
    public String aadAuthority() {
        return this.aadAuthority;
    }

    /**
     * Set the aadAuthority property: Gets or sets the authority of the SPN with which Dra communicates to service.
     * 
     * @param aadAuthority the aadAuthority value to set.
     * @return the IdentityModel object itself.
     */
    public IdentityModel withAadAuthority(String aadAuthority) {
        this.aadAuthority = aadAuthority;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tenantId in model IdentityModel"));
        }
        if (applicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property applicationId in model IdentityModel"));
        }
        if (objectId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property objectId in model IdentityModel"));
        }
        if (audience() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property audience in model IdentityModel"));
        }
        if (aadAuthority() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property aadAuthority in model IdentityModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IdentityModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("applicationId", this.applicationId);
        jsonWriter.writeStringField("objectId", this.objectId);
        jsonWriter.writeStringField("audience", this.audience);
        jsonWriter.writeStringField("aadAuthority", this.aadAuthority);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdentityModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdentityModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IdentityModel.
     */
    public static IdentityModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IdentityModel deserializedIdentityModel = new IdentityModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedIdentityModel.tenantId = reader.getString();
                } else if ("applicationId".equals(fieldName)) {
                    deserializedIdentityModel.applicationId = reader.getString();
                } else if ("objectId".equals(fieldName)) {
                    deserializedIdentityModel.objectId = reader.getString();
                } else if ("audience".equals(fieldName)) {
                    deserializedIdentityModel.audience = reader.getString();
                } else if ("aadAuthority".equals(fieldName)) {
                    deserializedIdentityModel.aadAuthority = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdentityModel;
        });
    }
}
