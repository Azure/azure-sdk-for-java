// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ReplicationExtensions. */
public interface ReplicationExtensions {
    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @param replicationExtensionName The replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension along with {@link Response}.
     */
    Response<ReplicationExtensionModel> getWithResponse(
        String resourceGroupName, String vaultName, String replicationExtensionName, Context context);

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @param replicationExtensionName The replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension.
     */
    ReplicationExtensionModel get(String resourceGroupName, String vaultName, String replicationExtensionName);

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @param replicationExtensionName The replication extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String vaultName, String replicationExtensionName);

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @param replicationExtensionName The replication extension name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String vaultName, String replicationExtensionName, Context context);

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ReplicationExtensionModel> list(String resourceGroupName, String vaultName);

    /**
     * Lists the replication extensions.
     *
     * <p>Gets the list of replication extensions in the given vault.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The vault name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of replication extensions in the given vault as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ReplicationExtensionModel> list(String resourceGroupName, String vaultName, Context context);

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension along with {@link Response}.
     */
    ReplicationExtensionModel getById(String id);

    /**
     * Gets the replication extension.
     *
     * <p>Gets the details of the replication extension.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the replication extension along with {@link Response}.
     */
    Response<ReplicationExtensionModel> getByIdWithResponse(String id, Context context);

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes the replication extension.
     *
     * <p>Deletes the replication extension in the given vault.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ReplicationExtensionModel resource.
     *
     * @param name resource name.
     * @return the first stage of the new ReplicationExtensionModel definition.
     */
    ReplicationExtensionModel.DefinitionStages.Blank define(String name);
}
