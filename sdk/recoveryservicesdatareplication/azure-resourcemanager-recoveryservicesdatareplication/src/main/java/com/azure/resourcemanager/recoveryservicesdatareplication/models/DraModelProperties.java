// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Dra model properties. */
@Fluent
public final class DraModelProperties {
    /*
     * Gets or sets the Dra correlation Id.
     */
    @JsonProperty(value = "correlationId", access = JsonProperty.Access.WRITE_ONLY)
    private String correlationId;

    /*
     * Gets or sets the machine Id where Dra is running.
     */
    @JsonProperty(value = "machineId", required = true)
    private String machineId;

    /*
     * Gets or sets the machine name where Dra is running.
     */
    @JsonProperty(value = "machineName", required = true)
    private String machineName;

    /*
     * Identity model.
     */
    @JsonProperty(value = "authenticationIdentity", required = true)
    private IdentityModel authenticationIdentity;

    /*
     * Identity model.
     */
    @JsonProperty(value = "resourceAccessIdentity", required = true)
    private IdentityModel resourceAccessIdentity;

    /*
     * Gets or sets a value indicating whether Dra is responsive.
     */
    @JsonProperty(value = "isResponsive", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isResponsive;

    /*
     * Gets or sets the time when last heartbeat was sent by the Dra.
     */
    @JsonProperty(value = "lastHeartbeat", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastHeartbeat;

    /*
     * Gets or sets the Dra version.
     */
    @JsonProperty(value = "versionNumber", access = JsonProperty.Access.WRITE_ONLY)
    private String versionNumber;

    /*
     * Gets or sets the provisioning state of the Dra.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the list of health errors.
     */
    @JsonProperty(value = "healthErrors", access = JsonProperty.Access.WRITE_ONLY)
    private List<HealthErrorModel> healthErrors;

    /*
     * Dra model custom properties.
     */
    @JsonProperty(value = "customProperties", required = true)
    private DraModelCustomProperties customProperties;

    /** Creates an instance of DraModelProperties class. */
    public DraModelProperties() {
    }

    /**
     * Get the correlationId property: Gets or sets the Dra correlation Id.
     *
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the machineId property: Gets or sets the machine Id where Dra is running.
     *
     * @return the machineId value.
     */
    public String machineId() {
        return this.machineId;
    }

    /**
     * Set the machineId property: Gets or sets the machine Id where Dra is running.
     *
     * @param machineId the machineId value to set.
     * @return the DraModelProperties object itself.
     */
    public DraModelProperties withMachineId(String machineId) {
        this.machineId = machineId;
        return this;
    }

    /**
     * Get the machineName property: Gets or sets the machine name where Dra is running.
     *
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Set the machineName property: Gets or sets the machine name where Dra is running.
     *
     * @param machineName the machineName value to set.
     * @return the DraModelProperties object itself.
     */
    public DraModelProperties withMachineName(String machineName) {
        this.machineName = machineName;
        return this;
    }

    /**
     * Get the authenticationIdentity property: Identity model.
     *
     * @return the authenticationIdentity value.
     */
    public IdentityModel authenticationIdentity() {
        return this.authenticationIdentity;
    }

    /**
     * Set the authenticationIdentity property: Identity model.
     *
     * @param authenticationIdentity the authenticationIdentity value to set.
     * @return the DraModelProperties object itself.
     */
    public DraModelProperties withAuthenticationIdentity(IdentityModel authenticationIdentity) {
        this.authenticationIdentity = authenticationIdentity;
        return this;
    }

    /**
     * Get the resourceAccessIdentity property: Identity model.
     *
     * @return the resourceAccessIdentity value.
     */
    public IdentityModel resourceAccessIdentity() {
        return this.resourceAccessIdentity;
    }

    /**
     * Set the resourceAccessIdentity property: Identity model.
     *
     * @param resourceAccessIdentity the resourceAccessIdentity value to set.
     * @return the DraModelProperties object itself.
     */
    public DraModelProperties withResourceAccessIdentity(IdentityModel resourceAccessIdentity) {
        this.resourceAccessIdentity = resourceAccessIdentity;
        return this;
    }

    /**
     * Get the isResponsive property: Gets or sets a value indicating whether Dra is responsive.
     *
     * @return the isResponsive value.
     */
    public Boolean isResponsive() {
        return this.isResponsive;
    }

    /**
     * Get the lastHeartbeat property: Gets or sets the time when last heartbeat was sent by the Dra.
     *
     * @return the lastHeartbeat value.
     */
    public OffsetDateTime lastHeartbeat() {
        return this.lastHeartbeat;
    }

    /**
     * Get the versionNumber property: Gets or sets the Dra version.
     *
     * @return the versionNumber value.
     */
    public String versionNumber() {
        return this.versionNumber;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the Dra.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the healthErrors property: Gets or sets the list of health errors.
     *
     * @return the healthErrors value.
     */
    public List<HealthErrorModel> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the customProperties property: Dra model custom properties.
     *
     * @return the customProperties value.
     */
    public DraModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Dra model custom properties.
     *
     * @param customProperties the customProperties value to set.
     * @return the DraModelProperties object itself.
     */
    public DraModelProperties withCustomProperties(DraModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (machineId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property machineId in model DraModelProperties"));
        }
        if (machineName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property machineName in model DraModelProperties"));
        }
        if (authenticationIdentity() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property authenticationIdentity in model DraModelProperties"));
        } else {
            authenticationIdentity().validate();
        }
        if (resourceAccessIdentity() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property resourceAccessIdentity in model DraModelProperties"));
        } else {
            resourceAccessIdentity().validate();
        }
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property customProperties in model DraModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DraModelProperties.class);
}
