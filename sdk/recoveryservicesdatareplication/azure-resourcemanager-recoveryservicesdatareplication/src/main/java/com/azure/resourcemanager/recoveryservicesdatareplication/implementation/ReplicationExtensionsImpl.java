// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.ReplicationExtensionsClient;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.ReplicationExtensionInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ReplicationExtension;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ReplicationExtensions;

public final class ReplicationExtensionsImpl implements ReplicationExtensions {
    private static final ClientLogger LOGGER = new ClientLogger(ReplicationExtensionsImpl.class);

    private final ReplicationExtensionsClient innerClient;

    private final com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager serviceManager;

    public ReplicationExtensionsImpl(ReplicationExtensionsClient innerClient,
        com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ReplicationExtension> getWithResponse(String resourceGroupName, String vaultName,
        String replicationExtensionName, Context context) {
        Response<ReplicationExtensionInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, vaultName, replicationExtensionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ReplicationExtensionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ReplicationExtension get(String resourceGroupName, String vaultName, String replicationExtensionName) {
        ReplicationExtensionInner inner
            = this.serviceClient().get(resourceGroupName, vaultName, replicationExtensionName);
        if (inner != null) {
            return new ReplicationExtensionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String vaultName, String replicationExtensionName) {
        this.serviceClient().delete(resourceGroupName, vaultName, replicationExtensionName);
    }

    public void delete(String resourceGroupName, String vaultName, String replicationExtensionName, Context context) {
        this.serviceClient().delete(resourceGroupName, vaultName, replicationExtensionName, context);
    }

    public PagedIterable<ReplicationExtension> list(String resourceGroupName, String vaultName) {
        PagedIterable<ReplicationExtensionInner> inner = this.serviceClient().list(resourceGroupName, vaultName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ReplicationExtensionImpl(inner1, this.manager()));
    }

    public PagedIterable<ReplicationExtension> list(String resourceGroupName, String vaultName, Context context) {
        PagedIterable<ReplicationExtensionInner> inner
            = this.serviceClient().list(resourceGroupName, vaultName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ReplicationExtensionImpl(inner1, this.manager()));
    }

    public ReplicationExtension getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String replicationExtensionName = ResourceManagerUtils.getValueFromIdByName(id, "replicationExtensions");
        if (replicationExtensionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationExtensions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, vaultName, replicationExtensionName, Context.NONE).getValue();
    }

    public Response<ReplicationExtension> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String replicationExtensionName = ResourceManagerUtils.getValueFromIdByName(id, "replicationExtensions");
        if (replicationExtensionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationExtensions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, vaultName, replicationExtensionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String replicationExtensionName = ResourceManagerUtils.getValueFromIdByName(id, "replicationExtensions");
        if (replicationExtensionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationExtensions'.", id)));
        }
        this.delete(resourceGroupName, vaultName, replicationExtensionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vaultName = ResourceManagerUtils.getValueFromIdByName(id, "replicationVaults");
        if (vaultName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationVaults'.", id)));
        }
        String replicationExtensionName = ResourceManagerUtils.getValueFromIdByName(id, "replicationExtensions");
        if (replicationExtensionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'replicationExtensions'.", id)));
        }
        this.delete(resourceGroupName, vaultName, replicationExtensionName, context);
    }

    private ReplicationExtensionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager manager() {
        return this.serviceManager;
    }

    public ReplicationExtensionImpl define(String name) {
        return new ReplicationExtensionImpl(name, this.manager());
    }
}
