// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Gets or sets the protection state.
 */
public final class ProtectionState extends ExpandableStringEnum<ProtectionState> {
    /**
     * Begin marker for unprotected states.
     */
    public static final ProtectionState UNPROTECTED_STATES_BEGIN = fromString("UnprotectedStatesBegin");

    /**
     * Enable protection is in progress.
     */
    public static final ProtectionState ENABLING_PROTECTION = fromString("EnablingProtection");

    /**
     * Enable protection failed.
     */
    public static final ProtectionState ENABLING_FAILED = fromString("EnablingFailed");

    /**
     * Disabling protection is in progress.
     */
    public static final ProtectionState DISABLING_PROTECTION = fromString("DisablingProtection");

    /**
     * Disabling protection succeeded. This is a transient state before the protected item is deleted.
     */
    public static final ProtectionState MARKED_FOR_DELETION = fromString("MarkedForDeletion");

    /**
     * Disable protection failed.
     */
    public static final ProtectionState DISABLING_FAILED = fromString("DisablingFailed");

    /**
     * End marker for unprotected states.
     */
    public static final ProtectionState UNPROTECTED_STATES_END = fromString("UnprotectedStatesEnd");

    /**
     * Begin marker for initial replication states.
     */
    public static final ProtectionState INITIAL_REPLICATION_STATES_BEGIN = fromString("InitialReplicationStatesBegin");

    /**
     * Initial replication is in progress.
     */
    public static final ProtectionState INITIAL_REPLICATION_IN_PROGRESS = fromString("InitialReplicationInProgress");

    /**
     * Initial replication has completed on the primary side.
     */
    public static final ProtectionState INITIAL_REPLICATION_COMPLETED_ON_PRIMARY
        = fromString("InitialReplicationCompletedOnPrimary");

    /**
     * Initial replication has completed on the recovery side.
     */
    public static final ProtectionState INITIAL_REPLICATION_COMPLETED_ON_RECOVERY
        = fromString("InitialReplicationCompletedOnRecovery");

    /**
     * Initial replication failed and would need to be started again.
     */
    public static final ProtectionState INITIAL_REPLICATION_FAILED = fromString("InitialReplicationFailed");

    /**
     * End marker for initial replication states.
     */
    public static final ProtectionState INITIAL_REPLICATION_STATES_END = fromString("InitialReplicationStatesEnd");

    /**
     * Begin marker for protected steady-state states.
     */
    public static final ProtectionState PROTECTED_STATES_BEGIN = fromString("ProtectedStatesBegin");

    /**
     * Protected item is protected and replication is on-going. Any issues with replication will be surfaced separately
     * via the health property and will not affect the state.
     */
    public static final ProtectionState PROTECTED = fromString("Protected");

    /**
     * End marker for protected steady-state states.
     */
    public static final ProtectionState PROTECTED_STATES_END = fromString("ProtectedStatesEnd");

    /**
     * Begin marker for planned failover transition states.
     */
    public static final ProtectionState PLANNED_FAILOVER_TRANSITION_STATES_BEGIN
        = fromString("PlannedFailoverTransitionStatesBegin");

    /**
     * Planned failover has been initiated.
     */
    public static final ProtectionState PLANNED_FAILOVER_INITIATED = fromString("PlannedFailoverInitiated");

    /**
     * Planned failover preparing protected entities is in progress.
     */
    public static final ProtectionState PLANNED_FAILOVER_COMPLETING = fromString("PlannedFailoverCompleting");

    /**
     * Planned failover has been completed successfully.
     */
    public static final ProtectionState PLANNED_FAILOVER_COMPLETED = fromString("PlannedFailoverCompleted");

    /**
     * Planned failover initiation failed.
     */
    public static final ProtectionState PLANNED_FAILOVER_FAILED = fromString("PlannedFailoverFailed");

    /**
     * Planned failover preparing protected entities failed.
     */
    public static final ProtectionState PLANNED_FAILOVER_COMPLETION_FAILED
        = fromString("PlannedFailoverCompletionFailed");

    /**
     * End marker for planned failover transition states.
     */
    public static final ProtectionState PLANNED_FAILOVER_TRANSITION_STATES_END
        = fromString("PlannedFailoverTransitionStatesEnd");

    /**
     * Begin marker for unplanned failover transition states.
     */
    public static final ProtectionState UNPLANNED_FAILOVER_TRANSITION_STATES_BEGIN
        = fromString("UnplannedFailoverTransitionStatesBegin");

    /**
     * Unplanned failover has been initiated.
     */
    public static final ProtectionState UNPLANNED_FAILOVER_INITIATED = fromString("UnplannedFailoverInitiated");

    /**
     * Unplanned failover preparing protected entities is in progress.
     */
    public static final ProtectionState UNPLANNED_FAILOVER_COMPLETING = fromString("UnplannedFailoverCompleting");

    /**
     * Unplanned failover preparing protected entities is in progress.
     */
    public static final ProtectionState UNPLANNED_FAILOVER_COMPLETED = fromString("UnplannedFailoverCompleted");

    /**
     * Unplanned failover initiation failed.
     */
    public static final ProtectionState UNPLANNED_FAILOVER_FAILED = fromString("UnplannedFailoverFailed");

    /**
     * Unplanned failover preparing protected entities failed.
     */
    public static final ProtectionState UNPLANNED_FAILOVER_COMPLETION_FAILED
        = fromString("UnplannedFailoverCompletionFailed");

    /**
     * End marker for unplanned failover transition states.
     */
    public static final ProtectionState UNPLANNED_FAILOVER_TRANSITION_STATES_END
        = fromString("UnplannedFailoverTransitionStatesEnd");

    /**
     * Begin marker for commit failover states.
     */
    public static final ProtectionState COMMIT_FAILOVER_STATES_BEGIN = fromString("CommitFailoverStatesBegin");

    /**
     * Commit failover is in progress on the primary side.
     */
    public static final ProtectionState COMMIT_FAILOVER_IN_PROGRESS_ON_PRIMARY
        = fromString("CommitFailoverInProgressOnPrimary");

    /**
     * Commit failover is in progress on the recovery side.
     */
    public static final ProtectionState COMMIT_FAILOVER_IN_PROGRESS_ON_RECOVERY
        = fromString("CommitFailoverInProgressOnRecovery");

    /**
     * Commit failover has been completed successfully.
     */
    public static final ProtectionState COMMIT_FAILOVER_COMPLETED = fromString("CommitFailoverCompleted");

    /**
     * Commit failover failed on the primary side.
     */
    public static final ProtectionState COMMIT_FAILOVER_FAILED_ON_PRIMARY = fromString("CommitFailoverFailedOnPrimary");

    /**
     * Commit failover failed on the recovery side.
     */
    public static final ProtectionState COMMIT_FAILOVER_FAILED_ON_RECOVERY
        = fromString("CommitFailoverFailedOnRecovery");

    /**
     * End marker for commit failover states.
     */
    public static final ProtectionState COMMIT_FAILOVER_STATES_END = fromString("CommitFailoverStatesEnd");

    /**
     * Begin marker for cancel failover states.
     */
    public static final ProtectionState CANCEL_FAILOVER_STATES_BEGIN = fromString("CancelFailoverStatesBegin");

    /**
     * Cancel failover is in progress on the primary side.
     */
    public static final ProtectionState CANCEL_FAILOVER_IN_PROGRESS_ON_PRIMARY
        = fromString("CancelFailoverInProgressOnPrimary");

    /**
     * Cancel failover is in progress on the recovery side.
     */
    public static final ProtectionState CANCEL_FAILOVER_IN_PROGRESS_ON_RECOVERY
        = fromString("CancelFailoverInProgressOnRecovery");

    /**
     * Cancel failover failed on the primary side.
     */
    public static final ProtectionState CANCEL_FAILOVER_FAILED_ON_PRIMARY = fromString("CancelFailoverFailedOnPrimary");

    /**
     * Cancel failover failed on the recovery side.
     */
    public static final ProtectionState CANCEL_FAILOVER_FAILED_ON_RECOVERY
        = fromString("CancelFailoverFailedOnRecovery");

    /**
     * End marker for cancel failover states.
     */
    public static final ProtectionState CANCEL_FAILOVER_STATES_END = fromString("CancelFailoverStatesEnd");

    /**
     * Begin marker for change recovery point states.
     */
    public static final ProtectionState CHANGE_RECOVERY_POINT_STATES_BEGIN
        = fromString("ChangeRecoveryPointStatesBegin");

    /**
     * Change recovery point has been initiated..
     */
    public static final ProtectionState CHANGE_RECOVERY_POINT_INITIATED = fromString("ChangeRecoveryPointInitiated");

    /**
     * Change recovery point has been completed successfully.
     */
    public static final ProtectionState CHANGE_RECOVERY_POINT_COMPLETED = fromString("ChangeRecoveryPointCompleted");

    /**
     * Change recovery point has failed.
     */
    public static final ProtectionState CHANGE_RECOVERY_POINT_FAILED = fromString("ChangeRecoveryPointFailed");

    /**
     * End marker for change recovery point states.
     */
    public static final ProtectionState CHANGE_RECOVERY_POINT_STATES_END = fromString("ChangeRecoveryPointStatesEnd");

    /**
     * Begin marker for reprotect states.
     */
    public static final ProtectionState REPROTECT_STATES_BEGIN = fromString("ReprotectStatesBegin");

    /**
     * Reprotect has been initiated.
     */
    public static final ProtectionState REPROTECT_INITIATED = fromString("ReprotectInitiated");

    /**
     * Reprotect has failed.
     */
    public static final ProtectionState REPROTECT_FAILED = fromString("ReprotectFailed");

    /**
     * End marker for reprotect states.
     */
    public static final ProtectionState REPROTECT_STATES_END = fromString("ReprotectStatesEnd");

    /**
     * Creates a new instance of ProtectionState value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public ProtectionState() {
    }

    /**
     * Creates or finds a ProtectionState from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding ProtectionState.
     */
    public static ProtectionState fromString(String name) {
        return fromString(name, ProtectionState.class);
    }

    /**
     * Gets known ProtectionState values.
     * 
     * @return known ProtectionState values.
     */
    public static Collection<ProtectionState> values() {
        return values(ProtectionState.class);
    }
}
