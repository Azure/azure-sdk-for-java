// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Storage container properties.
 */
@Fluent
public final class StorageContainerProperties implements JsonSerializable<StorageContainerProperties> {
    /*
     * Gets or sets the Name.
     */
    private String name;

    /*
     * Gets or sets the ClusterSharedVolumePath.
     */
    private String clusterSharedVolumePath;

    /**
     * Creates an instance of StorageContainerProperties class.
     */
    public StorageContainerProperties() {
    }

    /**
     * Get the name property: Gets or sets the Name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the Name.
     * 
     * @param name the name value to set.
     * @return the StorageContainerProperties object itself.
     */
    public StorageContainerProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the clusterSharedVolumePath property: Gets or sets the ClusterSharedVolumePath.
     * 
     * @return the clusterSharedVolumePath value.
     */
    public String clusterSharedVolumePath() {
        return this.clusterSharedVolumePath;
    }

    /**
     * Set the clusterSharedVolumePath property: Gets or sets the ClusterSharedVolumePath.
     * 
     * @param clusterSharedVolumePath the clusterSharedVolumePath value to set.
     * @return the StorageContainerProperties object itself.
     */
    public StorageContainerProperties withClusterSharedVolumePath(String clusterSharedVolumePath) {
        this.clusterSharedVolumePath = clusterSharedVolumePath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property name in model StorageContainerProperties"));
        }
        if (clusterSharedVolumePath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterSharedVolumePath in model StorageContainerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageContainerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("clusterSharedVolumePath", this.clusterSharedVolumePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageContainerProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageContainerProperties.
     */
    public static StorageContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageContainerProperties deserializedStorageContainerProperties = new StorageContainerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStorageContainerProperties.name = reader.getString();
                } else if ("clusterSharedVolumePath".equals(fieldName)) {
                    deserializedStorageContainerProperties.clusterSharedVolumePath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageContainerProperties;
        });
    }
}
