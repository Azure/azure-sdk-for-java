// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represent remote private endpoint information for the private endpoint connection proxy.
 */
@Fluent
public final class RemotePrivateEndpoint implements JsonSerializable<RemotePrivateEndpoint> {
    /*
     * Gets or sets private link service proxy id.
     */
    private String id;

    /*
     * Gets or sets the list of Private Link Service Connections and gets populated for Auto approval flow.
     */
    private List<PrivateLinkServiceConnection> privateLinkServiceConnections;

    /*
     * Gets or sets the list of Manual Private Link Service Connections and gets populated for Manual approval flow.
     */
    private List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections;

    /*
     * Gets or sets the list of private link service proxies.
     */
    private List<PrivateLinkServiceProxy> privateLinkServiceProxies;

    /*
     * Gets or sets the list of Connection Details. This is the connection details for private endpoint.
     */
    private List<ConnectionDetails> connectionDetails;

    /**
     * Creates an instance of RemotePrivateEndpoint class.
     */
    public RemotePrivateEndpoint() {
    }

    /**
     * Get the id property: Gets or sets private link service proxy id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Gets or sets private link service proxy id.
     * 
     * @param id the id value to set.
     * @return the RemotePrivateEndpoint object itself.
     */
    public RemotePrivateEndpoint withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the privateLinkServiceConnections property: Gets or sets the list of Private Link Service Connections and
     * gets populated for Auto approval flow.
     * 
     * @return the privateLinkServiceConnections value.
     */
    public List<PrivateLinkServiceConnection> privateLinkServiceConnections() {
        return this.privateLinkServiceConnections;
    }

    /**
     * Set the privateLinkServiceConnections property: Gets or sets the list of Private Link Service Connections and
     * gets populated for Auto approval flow.
     * 
     * @param privateLinkServiceConnections the privateLinkServiceConnections value to set.
     * @return the RemotePrivateEndpoint object itself.
     */
    public RemotePrivateEndpoint
        withPrivateLinkServiceConnections(List<PrivateLinkServiceConnection> privateLinkServiceConnections) {
        this.privateLinkServiceConnections = privateLinkServiceConnections;
        return this;
    }

    /**
     * Get the manualPrivateLinkServiceConnections property: Gets or sets the list of Manual Private Link Service
     * Connections and gets populated for Manual approval flow.
     * 
     * @return the manualPrivateLinkServiceConnections value.
     */
    public List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections() {
        return this.manualPrivateLinkServiceConnections;
    }

    /**
     * Set the manualPrivateLinkServiceConnections property: Gets or sets the list of Manual Private Link Service
     * Connections and gets populated for Manual approval flow.
     * 
     * @param manualPrivateLinkServiceConnections the manualPrivateLinkServiceConnections value to set.
     * @return the RemotePrivateEndpoint object itself.
     */
    public RemotePrivateEndpoint withManualPrivateLinkServiceConnections(
        List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections) {
        this.manualPrivateLinkServiceConnections = manualPrivateLinkServiceConnections;
        return this;
    }

    /**
     * Get the privateLinkServiceProxies property: Gets or sets the list of private link service proxies.
     * 
     * @return the privateLinkServiceProxies value.
     */
    public List<PrivateLinkServiceProxy> privateLinkServiceProxies() {
        return this.privateLinkServiceProxies;
    }

    /**
     * Set the privateLinkServiceProxies property: Gets or sets the list of private link service proxies.
     * 
     * @param privateLinkServiceProxies the privateLinkServiceProxies value to set.
     * @return the RemotePrivateEndpoint object itself.
     */
    public RemotePrivateEndpoint
        withPrivateLinkServiceProxies(List<PrivateLinkServiceProxy> privateLinkServiceProxies) {
        this.privateLinkServiceProxies = privateLinkServiceProxies;
        return this;
    }

    /**
     * Get the connectionDetails property: Gets or sets the list of Connection Details. This is the connection details
     * for private endpoint.
     * 
     * @return the connectionDetails value.
     */
    public List<ConnectionDetails> connectionDetails() {
        return this.connectionDetails;
    }

    /**
     * Set the connectionDetails property: Gets or sets the list of Connection Details. This is the connection details
     * for private endpoint.
     * 
     * @param connectionDetails the connectionDetails value to set.
     * @return the RemotePrivateEndpoint object itself.
     */
    public RemotePrivateEndpoint withConnectionDetails(List<ConnectionDetails> connectionDetails) {
        this.connectionDetails = connectionDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model RemotePrivateEndpoint"));
        }
        if (privateLinkServiceConnections() != null) {
            privateLinkServiceConnections().forEach(e -> e.validate());
        }
        if (manualPrivateLinkServiceConnections() != null) {
            manualPrivateLinkServiceConnections().forEach(e -> e.validate());
        }
        if (privateLinkServiceProxies() != null) {
            privateLinkServiceProxies().forEach(e -> e.validate());
        }
        if (connectionDetails() != null) {
            connectionDetails().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RemotePrivateEndpoint.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("privateLinkServiceConnections", this.privateLinkServiceConnections,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("manualPrivateLinkServiceConnections", this.manualPrivateLinkServiceConnections,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("privateLinkServiceProxies", this.privateLinkServiceProxies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("connectionDetails", this.connectionDetails,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemotePrivateEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemotePrivateEndpoint if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RemotePrivateEndpoint.
     */
    public static RemotePrivateEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemotePrivateEndpoint deserializedRemotePrivateEndpoint = new RemotePrivateEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRemotePrivateEndpoint.id = reader.getString();
                } else if ("privateLinkServiceConnections".equals(fieldName)) {
                    List<PrivateLinkServiceConnection> privateLinkServiceConnections
                        = reader.readArray(reader1 -> PrivateLinkServiceConnection.fromJson(reader1));
                    deserializedRemotePrivateEndpoint.privateLinkServiceConnections = privateLinkServiceConnections;
                } else if ("manualPrivateLinkServiceConnections".equals(fieldName)) {
                    List<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections
                        = reader.readArray(reader1 -> PrivateLinkServiceConnection.fromJson(reader1));
                    deserializedRemotePrivateEndpoint.manualPrivateLinkServiceConnections
                        = manualPrivateLinkServiceConnections;
                } else if ("privateLinkServiceProxies".equals(fieldName)) {
                    List<PrivateLinkServiceProxy> privateLinkServiceProxies
                        = reader.readArray(reader1 -> PrivateLinkServiceProxy.fromJson(reader1));
                    deserializedRemotePrivateEndpoint.privateLinkServiceProxies = privateLinkServiceProxies;
                } else if ("connectionDetails".equals(fieldName)) {
                    List<ConnectionDetails> connectionDetails
                        = reader.readArray(reader1 -> ConnectionDetails.fromJson(reader1));
                    deserializedRemotePrivateEndpoint.connectionDetails = connectionDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemotePrivateEndpoint;
        });
    }
}
