// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Failover properties of the protected item.
 */
@Immutable
public final class FailoverProtectedItemProperties implements JsonSerializable<FailoverProtectedItemProperties> {
    /*
     * Gets or sets the protected item name.
     */
    private String protectedItemName;

    /*
     * Gets or sets the VM name.
     */
    private String vmName;

    /*
     * Gets or sets the test VM name.
     */
    private String testVmName;

    /*
     * Gets or sets the recovery point Id.
     */
    private String recoveryPointId;

    /*
     * Gets or sets the recovery point time.
     */
    private OffsetDateTime recoveryPointTime;

    /*
     * Gets or sets the network name.
     */
    private String networkName;

    /*
     * Gets or sets the network subnet.
     */
    private String subnet;

    /**
     * Creates an instance of FailoverProtectedItemProperties class.
     */
    public FailoverProtectedItemProperties() {
    }

    /**
     * Get the protectedItemName property: Gets or sets the protected item name.
     * 
     * @return the protectedItemName value.
     */
    public String protectedItemName() {
        return this.protectedItemName;
    }

    /**
     * Get the vmName property: Gets or sets the VM name.
     * 
     * @return the vmName value.
     */
    public String vmName() {
        return this.vmName;
    }

    /**
     * Get the testVmName property: Gets or sets the test VM name.
     * 
     * @return the testVmName value.
     */
    public String testVmName() {
        return this.testVmName;
    }

    /**
     * Get the recoveryPointId property: Gets or sets the recovery point Id.
     * 
     * @return the recoveryPointId value.
     */
    public String recoveryPointId() {
        return this.recoveryPointId;
    }

    /**
     * Get the recoveryPointTime property: Gets or sets the recovery point time.
     * 
     * @return the recoveryPointTime value.
     */
    public OffsetDateTime recoveryPointTime() {
        return this.recoveryPointTime;
    }

    /**
     * Get the networkName property: Gets or sets the network name.
     * 
     * @return the networkName value.
     */
    public String networkName() {
        return this.networkName;
    }

    /**
     * Get the subnet property: Gets or sets the network subnet.
     * 
     * @return the subnet value.
     */
    public String subnet() {
        return this.subnet;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FailoverProtectedItemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FailoverProtectedItemProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FailoverProtectedItemProperties.
     */
    public static FailoverProtectedItemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FailoverProtectedItemProperties deserializedFailoverProtectedItemProperties
                = new FailoverProtectedItemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protectedItemName".equals(fieldName)) {
                    deserializedFailoverProtectedItemProperties.protectedItemName = reader.getString();
                } else if ("vmName".equals(fieldName)) {
                    deserializedFailoverProtectedItemProperties.vmName = reader.getString();
                } else if ("testVmName".equals(fieldName)) {
                    deserializedFailoverProtectedItemProperties.testVmName = reader.getString();
                } else if ("recoveryPointId".equals(fieldName)) {
                    deserializedFailoverProtectedItemProperties.recoveryPointId = reader.getString();
                } else if ("recoveryPointTime".equals(fieldName)) {
                    deserializedFailoverProtectedItemProperties.recoveryPointTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("networkName".equals(fieldName)) {
                    deserializedFailoverProtectedItemProperties.networkName = reader.getString();
                } else if ("subnet".equals(fieldName)) {
                    deserializedFailoverProtectedItemProperties.subnet = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFailoverProtectedItemProperties;
        });
    }
}
