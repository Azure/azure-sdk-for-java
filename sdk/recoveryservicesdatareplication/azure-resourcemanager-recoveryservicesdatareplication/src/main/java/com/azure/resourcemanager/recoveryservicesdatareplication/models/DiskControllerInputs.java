// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Disk controller.
 */
@Fluent
public final class DiskControllerInputs implements JsonSerializable<DiskControllerInputs> {
    /*
     * Gets or sets the controller name (IDE,SCSI).
     */
    private String controllerName;

    /*
     * Gets or sets the controller ID.
     */
    private int controllerId;

    /*
     * Gets or sets the controller Location.
     */
    private int controllerLocation;

    /**
     * Creates an instance of DiskControllerInputs class.
     */
    public DiskControllerInputs() {
    }

    /**
     * Get the controllerName property: Gets or sets the controller name (IDE,SCSI).
     * 
     * @return the controllerName value.
     */
    public String controllerName() {
        return this.controllerName;
    }

    /**
     * Set the controllerName property: Gets or sets the controller name (IDE,SCSI).
     * 
     * @param controllerName the controllerName value to set.
     * @return the DiskControllerInputs object itself.
     */
    public DiskControllerInputs withControllerName(String controllerName) {
        this.controllerName = controllerName;
        return this;
    }

    /**
     * Get the controllerId property: Gets or sets the controller ID.
     * 
     * @return the controllerId value.
     */
    public int controllerId() {
        return this.controllerId;
    }

    /**
     * Set the controllerId property: Gets or sets the controller ID.
     * 
     * @param controllerId the controllerId value to set.
     * @return the DiskControllerInputs object itself.
     */
    public DiskControllerInputs withControllerId(int controllerId) {
        this.controllerId = controllerId;
        return this;
    }

    /**
     * Get the controllerLocation property: Gets or sets the controller Location.
     * 
     * @return the controllerLocation value.
     */
    public int controllerLocation() {
        return this.controllerLocation;
    }

    /**
     * Set the controllerLocation property: Gets or sets the controller Location.
     * 
     * @param controllerLocation the controllerLocation value to set.
     * @return the DiskControllerInputs object itself.
     */
    public DiskControllerInputs withControllerLocation(int controllerLocation) {
        this.controllerLocation = controllerLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controllerName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property controllerName in model DiskControllerInputs"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiskControllerInputs.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("controllerName", this.controllerName);
        jsonWriter.writeIntField("controllerId", this.controllerId);
        jsonWriter.writeIntField("controllerLocation", this.controllerLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskControllerInputs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskControllerInputs if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiskControllerInputs.
     */
    public static DiskControllerInputs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskControllerInputs deserializedDiskControllerInputs = new DiskControllerInputs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controllerName".equals(fieldName)) {
                    deserializedDiskControllerInputs.controllerName = reader.getString();
                } else if ("controllerId".equals(fieldName)) {
                    deserializedDiskControllerInputs.controllerId = reader.getInt();
                } else if ("controllerLocation".equals(fieldName)) {
                    deserializedDiskControllerInputs.controllerLocation = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskControllerInputs;
        });
    }
}
