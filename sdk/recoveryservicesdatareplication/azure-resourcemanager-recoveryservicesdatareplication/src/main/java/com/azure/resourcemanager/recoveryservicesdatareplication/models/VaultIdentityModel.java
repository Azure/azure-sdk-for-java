// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Vault model.
 */
@Fluent
public final class VaultIdentityModel implements JsonSerializable<VaultIdentityModel> {
    /*
     * Gets or sets the identityType which can be either SystemAssigned or None.
     */
    private VaultIdentityType type;

    /*
     * Gets or sets the object ID of the service principal object for the managed identity that is used to grant
     * role-based access to an Azure resource.
     */
    private String principalId;

    /*
     * Gets or sets a Globally Unique Identifier (GUID) that represents the Azure AD tenant where the resource is now a
     * member.
     */
    private String tenantId;

    /**
     * Creates an instance of VaultIdentityModel class.
     */
    public VaultIdentityModel() {
    }

    /**
     * Get the type property: Gets or sets the identityType which can be either SystemAssigned or None.
     * 
     * @return the type value.
     */
    public VaultIdentityType type() {
        return this.type;
    }

    /**
     * Set the type property: Gets or sets the identityType which can be either SystemAssigned or None.
     * 
     * @param type the type value to set.
     * @return the VaultIdentityModel object itself.
     */
    public VaultIdentityModel withType(VaultIdentityType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the principalId property: Gets or sets the object ID of the service principal object for the managed identity
     * that is used to grant role-based access to an Azure resource.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the tenantId property: Gets or sets a Globally Unique Identifier (GUID) that represents the Azure AD tenant
     * where the resource is now a member.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model VaultIdentityModel"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VaultIdentityModel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultIdentityModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultIdentityModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VaultIdentityModel.
     */
    public static VaultIdentityModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultIdentityModel deserializedVaultIdentityModel = new VaultIdentityModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedVaultIdentityModel.type = VaultIdentityType.fromString(reader.getString());
                } else if ("principalId".equals(fieldName)) {
                    deserializedVaultIdentityModel.principalId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedVaultIdentityModel.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultIdentityModel;
        });
    }
}
