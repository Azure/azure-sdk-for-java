// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Health error model.
 */
@Fluent
public final class HealthErrorModel implements JsonSerializable<HealthErrorModel> {
    /*
     * Gets or sets the type of affected resource type.
     */
    private String affectedResourceType;

    /*
     * Gets or sets the list of affected resource correlation Ids. This can be used to
     * uniquely identify the count of items affected by a specific category and severity
     * as well as count of item affected by an specific issue.
     */
    private List<String> affectedResourceCorrelationIds;

    /*
     * Gets or sets a list of child health errors associated with this error.
     */
    private List<InnerHealthErrorModel> childErrors;

    /*
     * Gets or sets the error code.
     */
    private String code;

    /*
     * Gets or sets the health category.
     */
    private String healthCategory;

    /*
     * Gets or sets the error category.
     */
    private String category;

    /*
     * Gets or sets the error severity.
     */
    private String severity;

    /*
     * Gets or sets the error source.
     */
    private String source;

    /*
     * Gets or sets the error creation time.
     */
    private OffsetDateTime creationTime;

    /*
     * Gets or sets a value indicating whether the error is customer resolvable.
     */
    private Boolean isCustomerResolvable;

    /*
     * Gets or sets the error summary.
     */
    private String summary;

    /*
     * Gets or sets the error message.
     */
    private String message;

    /*
     * Gets or sets possible causes of the error.
     */
    private String causes;

    /*
     * Gets or sets recommended action to resolve the error.
     */
    private String recommendation;

    /**
     * Creates an instance of HealthErrorModel class.
     */
    public HealthErrorModel() {
    }

    /**
     * Get the affectedResourceType property: Gets or sets the type of affected resource type.
     * 
     * @return the affectedResourceType value.
     */
    public String affectedResourceType() {
        return this.affectedResourceType;
    }

    /**
     * Set the affectedResourceType property: Gets or sets the type of affected resource type.
     * 
     * @param affectedResourceType the affectedResourceType value to set.
     * @return the HealthErrorModel object itself.
     */
    public HealthErrorModel withAffectedResourceType(String affectedResourceType) {
        this.affectedResourceType = affectedResourceType;
        return this;
    }

    /**
     * Get the affectedResourceCorrelationIds property: Gets or sets the list of affected resource correlation Ids. This
     * can be used to
     * uniquely identify the count of items affected by a specific category and severity
     * as well as count of item affected by an specific issue.
     * 
     * @return the affectedResourceCorrelationIds value.
     */
    public List<String> affectedResourceCorrelationIds() {
        return this.affectedResourceCorrelationIds;
    }

    /**
     * Set the affectedResourceCorrelationIds property: Gets or sets the list of affected resource correlation Ids. This
     * can be used to
     * uniquely identify the count of items affected by a specific category and severity
     * as well as count of item affected by an specific issue.
     * 
     * @param affectedResourceCorrelationIds the affectedResourceCorrelationIds value to set.
     * @return the HealthErrorModel object itself.
     */
    public HealthErrorModel withAffectedResourceCorrelationIds(List<String> affectedResourceCorrelationIds) {
        this.affectedResourceCorrelationIds = affectedResourceCorrelationIds;
        return this;
    }

    /**
     * Get the childErrors property: Gets or sets a list of child health errors associated with this error.
     * 
     * @return the childErrors value.
     */
    public List<InnerHealthErrorModel> childErrors() {
        return this.childErrors;
    }

    /**
     * Set the childErrors property: Gets or sets a list of child health errors associated with this error.
     * 
     * @param childErrors the childErrors value to set.
     * @return the HealthErrorModel object itself.
     */
    public HealthErrorModel withChildErrors(List<InnerHealthErrorModel> childErrors) {
        this.childErrors = childErrors;
        return this;
    }

    /**
     * Get the code property: Gets or sets the error code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the healthCategory property: Gets or sets the health category.
     * 
     * @return the healthCategory value.
     */
    public String healthCategory() {
        return this.healthCategory;
    }

    /**
     * Get the category property: Gets or sets the error category.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Get the severity property: Gets or sets the error severity.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Get the source property: Gets or sets the error source.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Get the creationTime property: Gets or sets the error creation time.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the isCustomerResolvable property: Gets or sets a value indicating whether the error is customer resolvable.
     * 
     * @return the isCustomerResolvable value.
     */
    public Boolean isCustomerResolvable() {
        return this.isCustomerResolvable;
    }

    /**
     * Get the summary property: Gets or sets the error summary.
     * 
     * @return the summary value.
     */
    public String summary() {
        return this.summary;
    }

    /**
     * Get the message property: Gets or sets the error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the causes property: Gets or sets possible causes of the error.
     * 
     * @return the causes value.
     */
    public String causes() {
        return this.causes;
    }

    /**
     * Get the recommendation property: Gets or sets recommended action to resolve the error.
     * 
     * @return the recommendation value.
     */
    public String recommendation() {
        return this.recommendation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (childErrors() != null) {
            childErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("affectedResourceType", this.affectedResourceType);
        jsonWriter.writeArrayField("affectedResourceCorrelationIds", this.affectedResourceCorrelationIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("childErrors", this.childErrors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HealthErrorModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HealthErrorModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HealthErrorModel.
     */
    public static HealthErrorModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HealthErrorModel deserializedHealthErrorModel = new HealthErrorModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("affectedResourceType".equals(fieldName)) {
                    deserializedHealthErrorModel.affectedResourceType = reader.getString();
                } else if ("affectedResourceCorrelationIds".equals(fieldName)) {
                    List<String> affectedResourceCorrelationIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedHealthErrorModel.affectedResourceCorrelationIds = affectedResourceCorrelationIds;
                } else if ("childErrors".equals(fieldName)) {
                    List<InnerHealthErrorModel> childErrors
                        = reader.readArray(reader1 -> InnerHealthErrorModel.fromJson(reader1));
                    deserializedHealthErrorModel.childErrors = childErrors;
                } else if ("code".equals(fieldName)) {
                    deserializedHealthErrorModel.code = reader.getString();
                } else if ("healthCategory".equals(fieldName)) {
                    deserializedHealthErrorModel.healthCategory = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedHealthErrorModel.category = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedHealthErrorModel.severity = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedHealthErrorModel.source = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    deserializedHealthErrorModel.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("isCustomerResolvable".equals(fieldName)) {
                    deserializedHealthErrorModel.isCustomerResolvable = reader.getNullable(JsonReader::getBoolean);
                } else if ("summary".equals(fieldName)) {
                    deserializedHealthErrorModel.summary = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedHealthErrorModel.message = reader.getString();
                } else if ("causes".equals(fieldName)) {
                    deserializedHealthErrorModel.causes = reader.getString();
                } else if ("recommendation".equals(fieldName)) {
                    deserializedHealthErrorModel.recommendation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealthErrorModel;
        });
    }
}
