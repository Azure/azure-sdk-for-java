// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VMwareToAzStack disk input.
 */
@Fluent
public final class VMwareToAzStackHCIDiskInput implements JsonSerializable<VMwareToAzStackHCIDiskInput> {
    /*
     * Gets or sets the disk Id.
     */
    private String diskId;

    /*
     * Gets or sets the target storage account ARM Id.
     */
    private String storageContainerId;

    /*
     * Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
     */
    private Boolean isDynamic;

    /*
     * Gets or sets the disk size in GB.
     */
    private long diskSizeGB;

    /*
     * Gets or sets the type of the virtual hard disk, vhd or vhdx.
     */
    private String diskFileFormat;

    /*
     * Gets or sets a value indicating whether disk is os disk.
     */
    private boolean isOsDisk;

    /*
     * Gets or sets a value of disk block size.
     */
    private Long diskBlockSize;

    /*
     * Gets or sets a value of disk logical sector size.
     */
    private Long diskLogicalSectorSize;

    /*
     * Gets or sets a value of disk physical sector size.
     */
    private Long diskPhysicalSectorSize;

    /*
     * Gets or sets a value of disk identifier.
     */
    private String diskIdentifier;

    /*
     * Disk controller.
     */
    private DiskControllerInputs diskController;

    /**
     * Creates an instance of VMwareToAzStackHCIDiskInput class.
     */
    public VMwareToAzStackHCIDiskInput() {
    }

    /**
     * Get the diskId property: Gets or sets the disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: Gets or sets the disk Id.
     * 
     * @param diskId the diskId value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the storageContainerId property: Gets or sets the target storage account ARM Id.
     * 
     * @return the storageContainerId value.
     */
    public String storageContainerId() {
        return this.storageContainerId;
    }

    /**
     * Set the storageContainerId property: Gets or sets the target storage account ARM Id.
     * 
     * @param storageContainerId the storageContainerId value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withStorageContainerId(String storageContainerId) {
        this.storageContainerId = storageContainerId;
        return this;
    }

    /**
     * Get the isDynamic property: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     * 
     * @return the isDynamic value.
     */
    public Boolean isDynamic() {
        return this.isDynamic;
    }

    /**
     * Set the isDynamic property: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     * 
     * @param isDynamic the isDynamic value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withIsDynamic(Boolean isDynamic) {
        this.isDynamic = isDynamic;
        return this;
    }

    /**
     * Get the diskSizeGB property: Gets or sets the disk size in GB.
     * 
     * @return the diskSizeGB value.
     */
    public long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Gets or sets the disk size in GB.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskSizeGB(long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the diskFileFormat property: Gets or sets the type of the virtual hard disk, vhd or vhdx.
     * 
     * @return the diskFileFormat value.
     */
    public String diskFileFormat() {
        return this.diskFileFormat;
    }

    /**
     * Set the diskFileFormat property: Gets or sets the type of the virtual hard disk, vhd or vhdx.
     * 
     * @param diskFileFormat the diskFileFormat value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskFileFormat(String diskFileFormat) {
        this.diskFileFormat = diskFileFormat;
        return this;
    }

    /**
     * Get the isOsDisk property: Gets or sets a value indicating whether disk is os disk.
     * 
     * @return the isOsDisk value.
     */
    public boolean isOsDisk() {
        return this.isOsDisk;
    }

    /**
     * Set the isOsDisk property: Gets or sets a value indicating whether disk is os disk.
     * 
     * @param isOsDisk the isOsDisk value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withIsOsDisk(boolean isOsDisk) {
        this.isOsDisk = isOsDisk;
        return this;
    }

    /**
     * Get the diskBlockSize property: Gets or sets a value of disk block size.
     * 
     * @return the diskBlockSize value.
     */
    public Long diskBlockSize() {
        return this.diskBlockSize;
    }

    /**
     * Set the diskBlockSize property: Gets or sets a value of disk block size.
     * 
     * @param diskBlockSize the diskBlockSize value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskBlockSize(Long diskBlockSize) {
        this.diskBlockSize = diskBlockSize;
        return this;
    }

    /**
     * Get the diskLogicalSectorSize property: Gets or sets a value of disk logical sector size.
     * 
     * @return the diskLogicalSectorSize value.
     */
    public Long diskLogicalSectorSize() {
        return this.diskLogicalSectorSize;
    }

    /**
     * Set the diskLogicalSectorSize property: Gets or sets a value of disk logical sector size.
     * 
     * @param diskLogicalSectorSize the diskLogicalSectorSize value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskLogicalSectorSize(Long diskLogicalSectorSize) {
        this.diskLogicalSectorSize = diskLogicalSectorSize;
        return this;
    }

    /**
     * Get the diskPhysicalSectorSize property: Gets or sets a value of disk physical sector size.
     * 
     * @return the diskPhysicalSectorSize value.
     */
    public Long diskPhysicalSectorSize() {
        return this.diskPhysicalSectorSize;
    }

    /**
     * Set the diskPhysicalSectorSize property: Gets or sets a value of disk physical sector size.
     * 
     * @param diskPhysicalSectorSize the diskPhysicalSectorSize value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskPhysicalSectorSize(Long diskPhysicalSectorSize) {
        this.diskPhysicalSectorSize = diskPhysicalSectorSize;
        return this;
    }

    /**
     * Get the diskIdentifier property: Gets or sets a value of disk identifier.
     * 
     * @return the diskIdentifier value.
     */
    public String diskIdentifier() {
        return this.diskIdentifier;
    }

    /**
     * Set the diskIdentifier property: Gets or sets a value of disk identifier.
     * 
     * @param diskIdentifier the diskIdentifier value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskIdentifier(String diskIdentifier) {
        this.diskIdentifier = diskIdentifier;
        return this;
    }

    /**
     * Get the diskController property: Disk controller.
     * 
     * @return the diskController value.
     */
    public DiskControllerInputs diskController() {
        return this.diskController;
    }

    /**
     * Set the diskController property: Disk controller.
     * 
     * @param diskController the diskController value to set.
     * @return the VMwareToAzStackHCIDiskInput object itself.
     */
    public VMwareToAzStackHCIDiskInput withDiskController(DiskControllerInputs diskController) {
        this.diskController = diskController;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property diskId in model VMwareToAzStackHCIDiskInput"));
        }
        if (diskFileFormat() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property diskFileFormat in model VMwareToAzStackHCIDiskInput"));
        }
        if (diskController() != null) {
            diskController().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VMwareToAzStackHCIDiskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeLongField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeStringField("diskFileFormat", this.diskFileFormat);
        jsonWriter.writeBooleanField("isOsDisk", this.isOsDisk);
        jsonWriter.writeStringField("storageContainerId", this.storageContainerId);
        jsonWriter.writeBooleanField("isDynamic", this.isDynamic);
        jsonWriter.writeNumberField("diskBlockSize", this.diskBlockSize);
        jsonWriter.writeNumberField("diskLogicalSectorSize", this.diskLogicalSectorSize);
        jsonWriter.writeNumberField("diskPhysicalSectorSize", this.diskPhysicalSectorSize);
        jsonWriter.writeStringField("diskIdentifier", this.diskIdentifier);
        jsonWriter.writeJsonField("diskController", this.diskController);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMwareToAzStackHCIDiskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMwareToAzStackHCIDiskInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VMwareToAzStackHCIDiskInput.
     */
    public static VMwareToAzStackHCIDiskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMwareToAzStackHCIDiskInput deserializedVMwareToAzStackHCIDiskInput = new VMwareToAzStackHCIDiskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskId = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskSizeGB = reader.getLong();
                } else if ("diskFileFormat".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskFileFormat = reader.getString();
                } else if ("isOsDisk".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.isOsDisk = reader.getBoolean();
                } else if ("storageContainerId".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.storageContainerId = reader.getString();
                } else if ("isDynamic".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.isDynamic = reader.getNullable(JsonReader::getBoolean);
                } else if ("diskBlockSize".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskBlockSize = reader.getNullable(JsonReader::getLong);
                } else if ("diskLogicalSectorSize".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskLogicalSectorSize
                        = reader.getNullable(JsonReader::getLong);
                } else if ("diskPhysicalSectorSize".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskPhysicalSectorSize
                        = reader.getNullable(JsonReader::getLong);
                } else if ("diskIdentifier".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskIdentifier = reader.getString();
                } else if ("diskController".equals(fieldName)) {
                    deserializedVMwareToAzStackHCIDiskInput.diskController = DiskControllerInputs.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVMwareToAzStackHCIDiskInput;
        });
    }
}
