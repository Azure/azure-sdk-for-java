// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AzStackHCI cluster properties.
 */
@Fluent
public final class AzStackHciClusterProperties implements JsonSerializable<AzStackHciClusterProperties> {
    /*
     * Gets or sets the AzStackHCICluster FQDN name.
     */
    private String clusterName;

    /*
     * Gets or sets the AzStackHCICluster resource name.
     */
    private String resourceName;

    /*
     * Gets or sets the Storage account name.
     */
    private String storageAccountName;

    /*
     * Gets or sets the list of AzStackHCICluster Storage Container.
     */
    private List<StorageContainerProperties> storageContainers;

    /**
     * Creates an instance of AzStackHciClusterProperties class.
     */
    public AzStackHciClusterProperties() {
    }

    /**
     * Get the clusterName property: Gets or sets the AzStackHCICluster FQDN name.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: Gets or sets the AzStackHCICluster FQDN name.
     * 
     * @param clusterName the clusterName value to set.
     * @return the AzStackHciClusterProperties object itself.
     */
    public AzStackHciClusterProperties withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the resourceName property: Gets or sets the AzStackHCICluster resource name.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Gets or sets the AzStackHCICluster resource name.
     * 
     * @param resourceName the resourceName value to set.
     * @return the AzStackHciClusterProperties object itself.
     */
    public AzStackHciClusterProperties withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the storageAccountName property: Gets or sets the Storage account name.
     * 
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: Gets or sets the Storage account name.
     * 
     * @param storageAccountName the storageAccountName value to set.
     * @return the AzStackHciClusterProperties object itself.
     */
    public AzStackHciClusterProperties withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Get the storageContainers property: Gets or sets the list of AzStackHCICluster Storage Container.
     * 
     * @return the storageContainers value.
     */
    public List<StorageContainerProperties> storageContainers() {
        return this.storageContainers;
    }

    /**
     * Set the storageContainers property: Gets or sets the list of AzStackHCICluster Storage Container.
     * 
     * @param storageContainers the storageContainers value to set.
     * @return the AzStackHciClusterProperties object itself.
     */
    public AzStackHciClusterProperties withStorageContainers(List<StorageContainerProperties> storageContainers) {
        this.storageContainers = storageContainers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterName in model AzStackHciClusterProperties"));
        }
        if (resourceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceName in model AzStackHciClusterProperties"));
        }
        if (storageAccountName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageAccountName in model AzStackHciClusterProperties"));
        }
        if (storageContainers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageContainers in model AzStackHciClusterProperties"));
        } else {
            storageContainers().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzStackHciClusterProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterName", this.clusterName);
        jsonWriter.writeStringField("resourceName", this.resourceName);
        jsonWriter.writeStringField("storageAccountName", this.storageAccountName);
        jsonWriter.writeArrayField("storageContainers", this.storageContainers,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzStackHciClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzStackHciClusterProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzStackHciClusterProperties.
     */
    public static AzStackHciClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzStackHciClusterProperties deserializedAzStackHciClusterProperties = new AzStackHciClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterName".equals(fieldName)) {
                    deserializedAzStackHciClusterProperties.clusterName = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedAzStackHciClusterProperties.resourceName = reader.getString();
                } else if ("storageAccountName".equals(fieldName)) {
                    deserializedAzStackHciClusterProperties.storageAccountName = reader.getString();
                } else if ("storageContainers".equals(fieldName)) {
                    List<StorageContainerProperties> storageContainers
                        = reader.readArray(reader1 -> StorageContainerProperties.fromJson(reader1));
                    deserializedAzStackHciClusterProperties.storageContainers = storageContainers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzStackHciClusterProperties;
        });
    }
}
