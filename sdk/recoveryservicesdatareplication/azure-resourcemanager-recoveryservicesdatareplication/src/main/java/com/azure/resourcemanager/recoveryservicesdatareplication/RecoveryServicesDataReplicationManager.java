// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.DataReplicationMgmtClient;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.DataReplicationMgmtClientBuilder;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.DraOperationStatusImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.DrasImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.EmailConfigurationsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.EventsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.FabricOperationsStatusImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.FabricsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.OperationsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.PoliciesImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.PolicyOperationStatusImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.ProtectedItemOperationStatusImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.ProtectedItemsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.RecoveryPointsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.ReplicationExtensionsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.ResourceProvidersImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.VaultOperationStatusImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.VaultsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.WorkflowOperationStatusImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.implementation.WorkflowsImpl;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DraOperationStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Dras;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.EmailConfigurations;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Events;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.FabricOperationsStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Fabrics;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Operations;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Policies;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PolicyOperationStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ProtectedItemOperationStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ProtectedItems;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.RecoveryPoints;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ReplicationExtensions;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ResourceProviders;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultOperationStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Vaults;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.WorkflowOperationStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.Workflows;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/** Entry point to RecoveryServicesDataReplicationManager. A first party Azure service enabling the data replication. */
public final class RecoveryServicesDataReplicationManager {
    private Dras dras;

    private DraOperationStatus draOperationStatus;

    private EmailConfigurations emailConfigurations;

    private Events events;

    private Fabrics fabrics;

    private FabricOperationsStatus fabricOperationsStatus;

    private Policies policies;

    private PolicyOperationStatus policyOperationStatus;

    private ProtectedItems protectedItems;

    private ProtectedItemOperationStatus protectedItemOperationStatus;

    private RecoveryPoints recoveryPoints;

    private ReplicationExtensions replicationExtensions;

    private ResourceProviders resourceProviders;

    private Operations operations;

    private Vaults vaults;

    private VaultOperationStatus vaultOperationStatus;

    private Workflows workflows;

    private WorkflowOperationStatus workflowOperationStatus;

    private final DataReplicationMgmtClient clientObject;

    private RecoveryServicesDataReplicationManager(
        HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new DataReplicationMgmtClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Recovery Services Data Replication service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Recovery Services Data Replication service API instance.
     */
    public static RecoveryServicesDataReplicationManager authenticate(
        TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Recovery Services Data Replication service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Recovery Services Data Replication service API instance.
     */
    public static RecoveryServicesDataReplicationManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new RecoveryServicesDataReplicationManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create RecoveryServicesDataReplicationManager with optional
     * configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new RecoveryServicesDataReplicationManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Recovery Services Data Replication service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Recovery Services Data Replication service API instance.
         */
        public RecoveryServicesDataReplicationManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.recoveryservicesdatareplication")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new RecoveryServicesDataReplicationManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Dras. It manages DraModel.
     *
     * @return Resource collection API of Dras.
     */
    public Dras dras() {
        if (this.dras == null) {
            this.dras = new DrasImpl(clientObject.getDras(), this);
        }
        return dras;
    }

    /**
     * Gets the resource collection API of DraOperationStatus.
     *
     * @return Resource collection API of DraOperationStatus.
     */
    public DraOperationStatus draOperationStatus() {
        if (this.draOperationStatus == null) {
            this.draOperationStatus = new DraOperationStatusImpl(clientObject.getDraOperationStatus(), this);
        }
        return draOperationStatus;
    }

    /**
     * Gets the resource collection API of EmailConfigurations. It manages EmailConfigurationModel.
     *
     * @return Resource collection API of EmailConfigurations.
     */
    public EmailConfigurations emailConfigurations() {
        if (this.emailConfigurations == null) {
            this.emailConfigurations = new EmailConfigurationsImpl(clientObject.getEmailConfigurations(), this);
        }
        return emailConfigurations;
    }

    /**
     * Gets the resource collection API of Events.
     *
     * @return Resource collection API of Events.
     */
    public Events events() {
        if (this.events == null) {
            this.events = new EventsImpl(clientObject.getEvents(), this);
        }
        return events;
    }

    /**
     * Gets the resource collection API of Fabrics. It manages FabricModel.
     *
     * @return Resource collection API of Fabrics.
     */
    public Fabrics fabrics() {
        if (this.fabrics == null) {
            this.fabrics = new FabricsImpl(clientObject.getFabrics(), this);
        }
        return fabrics;
    }

    /**
     * Gets the resource collection API of FabricOperationsStatus.
     *
     * @return Resource collection API of FabricOperationsStatus.
     */
    public FabricOperationsStatus fabricOperationsStatus() {
        if (this.fabricOperationsStatus == null) {
            this.fabricOperationsStatus =
                new FabricOperationsStatusImpl(clientObject.getFabricOperationsStatus(), this);
        }
        return fabricOperationsStatus;
    }

    /**
     * Gets the resource collection API of Policies. It manages PolicyModel.
     *
     * @return Resource collection API of Policies.
     */
    public Policies policies() {
        if (this.policies == null) {
            this.policies = new PoliciesImpl(clientObject.getPolicies(), this);
        }
        return policies;
    }

    /**
     * Gets the resource collection API of PolicyOperationStatus.
     *
     * @return Resource collection API of PolicyOperationStatus.
     */
    public PolicyOperationStatus policyOperationStatus() {
        if (this.policyOperationStatus == null) {
            this.policyOperationStatus = new PolicyOperationStatusImpl(clientObject.getPolicyOperationStatus(), this);
        }
        return policyOperationStatus;
    }

    /**
     * Gets the resource collection API of ProtectedItems. It manages ProtectedItemModel.
     *
     * @return Resource collection API of ProtectedItems.
     */
    public ProtectedItems protectedItems() {
        if (this.protectedItems == null) {
            this.protectedItems = new ProtectedItemsImpl(clientObject.getProtectedItems(), this);
        }
        return protectedItems;
    }

    /**
     * Gets the resource collection API of ProtectedItemOperationStatus.
     *
     * @return Resource collection API of ProtectedItemOperationStatus.
     */
    public ProtectedItemOperationStatus protectedItemOperationStatus() {
        if (this.protectedItemOperationStatus == null) {
            this.protectedItemOperationStatus =
                new ProtectedItemOperationStatusImpl(clientObject.getProtectedItemOperationStatus(), this);
        }
        return protectedItemOperationStatus;
    }

    /**
     * Gets the resource collection API of RecoveryPoints.
     *
     * @return Resource collection API of RecoveryPoints.
     */
    public RecoveryPoints recoveryPoints() {
        if (this.recoveryPoints == null) {
            this.recoveryPoints = new RecoveryPointsImpl(clientObject.getRecoveryPoints(), this);
        }
        return recoveryPoints;
    }

    /**
     * Gets the resource collection API of ReplicationExtensions. It manages ReplicationExtensionModel.
     *
     * @return Resource collection API of ReplicationExtensions.
     */
    public ReplicationExtensions replicationExtensions() {
        if (this.replicationExtensions == null) {
            this.replicationExtensions = new ReplicationExtensionsImpl(clientObject.getReplicationExtensions(), this);
        }
        return replicationExtensions;
    }

    /**
     * Gets the resource collection API of ResourceProviders.
     *
     * @return Resource collection API of ResourceProviders.
     */
    public ResourceProviders resourceProviders() {
        if (this.resourceProviders == null) {
            this.resourceProviders = new ResourceProvidersImpl(clientObject.getResourceProviders(), this);
        }
        return resourceProviders;
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of Vaults. It manages VaultModel.
     *
     * @return Resource collection API of Vaults.
     */
    public Vaults vaults() {
        if (this.vaults == null) {
            this.vaults = new VaultsImpl(clientObject.getVaults(), this);
        }
        return vaults;
    }

    /**
     * Gets the resource collection API of VaultOperationStatus.
     *
     * @return Resource collection API of VaultOperationStatus.
     */
    public VaultOperationStatus vaultOperationStatus() {
        if (this.vaultOperationStatus == null) {
            this.vaultOperationStatus = new VaultOperationStatusImpl(clientObject.getVaultOperationStatus(), this);
        }
        return vaultOperationStatus;
    }

    /**
     * Gets the resource collection API of Workflows.
     *
     * @return Resource collection API of Workflows.
     */
    public Workflows workflows() {
        if (this.workflows == null) {
            this.workflows = new WorkflowsImpl(clientObject.getWorkflows(), this);
        }
        return workflows;
    }

    /**
     * Gets the resource collection API of WorkflowOperationStatus.
     *
     * @return Resource collection API of WorkflowOperationStatus.
     */
    public WorkflowOperationStatus workflowOperationStatus() {
        if (this.workflowOperationStatus == null) {
            this.workflowOperationStatus =
                new WorkflowOperationStatusImpl(clientObject.getWorkflowOperationStatus(), this);
        }
        return workflowOperationStatus;
    }

    /**
     * Gets wrapped service client DataReplicationMgmtClient providing direct access to the underlying auto-generated
     * API implementation, based on Azure REST API.
     *
     * @return Wrapped service client DataReplicationMgmtClient.
     */
    public DataReplicationMgmtClient serviceClient() {
        return this.clientObject;
    }
}
