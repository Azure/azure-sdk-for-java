// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.FabricModelInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.FabricModelUpdate;

/** An instance of this class provides access to all the operations defined in FabricsClient. */
public interface FabricsClient {
    /**
     * Gets the fabric.
     *
     * <p>Gets the details of the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the fabric along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FabricModelInner> getByResourceGroupWithResponse(
        String resourceGroupName, String fabricName, Context context);

    /**
     * Gets the fabric.
     *
     * <p>Gets the details of the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the fabric.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FabricModelInner getByResourceGroup(String resourceGroupName, String fabricName);

    /**
     * Puts the fabric.
     *
     * <p>Creates the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of fabric model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FabricModelInner>, FabricModelInner> beginCreate(String resourceGroupName, String fabricName);

    /**
     * Puts the fabric.
     *
     * <p>Creates the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @param body Fabric properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of fabric model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FabricModelInner>, FabricModelInner> beginCreate(
        String resourceGroupName, String fabricName, FabricModelInner body, Context context);

    /**
     * Puts the fabric.
     *
     * <p>Creates the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fabric model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FabricModelInner create(String resourceGroupName, String fabricName);

    /**
     * Puts the fabric.
     *
     * <p>Creates the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @param body Fabric properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fabric model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FabricModelInner create(String resourceGroupName, String fabricName, FabricModelInner body, Context context);

    /**
     * Updates the fabric.
     *
     * <p>Performs update on the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of fabric model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FabricModelInner>, FabricModelInner> beginUpdate(String resourceGroupName, String fabricName);

    /**
     * Updates the fabric.
     *
     * <p>Performs update on the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @param body Fabric properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of fabric model.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<FabricModelInner>, FabricModelInner> beginUpdate(
        String resourceGroupName, String fabricName, FabricModelUpdate body, Context context);

    /**
     * Updates the fabric.
     *
     * <p>Performs update on the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fabric model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FabricModelInner update(String resourceGroupName, String fabricName);

    /**
     * Updates the fabric.
     *
     * <p>Performs update on the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @param body Fabric properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fabric model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FabricModelInner update(String resourceGroupName, String fabricName, FabricModelUpdate body, Context context);

    /**
     * Deletes the fabric.
     *
     * <p>Removes the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fabricName);

    /**
     * Deletes the fabric.
     *
     * <p>Removes the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String fabricName, Context context);

    /**
     * Deletes the fabric.
     *
     * <p>Removes the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String fabricName);

    /**
     * Deletes the fabric.
     *
     * <p>Removes the fabric.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param fabricName The fabric name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String fabricName, Context context);

    /**
     * Lists the fabrics.
     *
     * <p>Gets the list of fabrics in the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of fabrics in the given subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FabricModelInner> list();

    /**
     * Lists the fabrics.
     *
     * <p>Gets the list of fabrics in the given subscription.
     *
     * @param continuationToken Continuation token from the previous call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of fabrics in the given subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FabricModelInner> list(String continuationToken, Context context);

    /**
     * Lists the fabrics.
     *
     * <p>Gets the list of fabrics in the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of fabrics in the given subscription and resource group as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FabricModelInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists the fabrics.
     *
     * <p>Gets the list of fabrics in the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param continuationToken Continuation token from the previous call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of fabrics in the given subscription and resource group as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<FabricModelInner> listByResourceGroup(
        String resourceGroupName, String continuationToken, Context context);
}
