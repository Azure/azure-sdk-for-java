// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * HyperVToAzStackHCI NIC properties.
 */
@Fluent
public final class HyperVToAzStackHciNicInput implements JsonSerializable<HyperVToAzStackHciNicInput> {
    /*
     * Gets or sets the NIC Id.
     */
    private String nicId;

    /*
     * Gets or sets the network name.
     */
    private String networkName;

    /*
     * Gets or sets the target network Id within AzStackHCI Cluster.
     */
    private String targetNetworkId;

    /*
     * Gets or sets the target test network Id within AzStackHCI Cluster.
     */
    private String testNetworkId;

    /*
     * Gets or sets the selection type of the NIC.
     */
    private VMNicSelection selectionTypeForFailover;

    /**
     * Creates an instance of HyperVToAzStackHciNicInput class.
     */
    public HyperVToAzStackHciNicInput() {
    }

    /**
     * Get the nicId property: Gets or sets the NIC Id.
     * 
     * @return the nicId value.
     */
    public String nicId() {
        return this.nicId;
    }

    /**
     * Set the nicId property: Gets or sets the NIC Id.
     * 
     * @param nicId the nicId value to set.
     * @return the HyperVToAzStackHciNicInput object itself.
     */
    public HyperVToAzStackHciNicInput withNicId(String nicId) {
        this.nicId = nicId;
        return this;
    }

    /**
     * Get the networkName property: Gets or sets the network name.
     * 
     * @return the networkName value.
     */
    public String networkName() {
        return this.networkName;
    }

    /**
     * Get the targetNetworkId property: Gets or sets the target network Id within AzStackHCI Cluster.
     * 
     * @return the targetNetworkId value.
     */
    public String targetNetworkId() {
        return this.targetNetworkId;
    }

    /**
     * Set the targetNetworkId property: Gets or sets the target network Id within AzStackHCI Cluster.
     * 
     * @param targetNetworkId the targetNetworkId value to set.
     * @return the HyperVToAzStackHciNicInput object itself.
     */
    public HyperVToAzStackHciNicInput withTargetNetworkId(String targetNetworkId) {
        this.targetNetworkId = targetNetworkId;
        return this;
    }

    /**
     * Get the testNetworkId property: Gets or sets the target test network Id within AzStackHCI Cluster.
     * 
     * @return the testNetworkId value.
     */
    public String testNetworkId() {
        return this.testNetworkId;
    }

    /**
     * Set the testNetworkId property: Gets or sets the target test network Id within AzStackHCI Cluster.
     * 
     * @param testNetworkId the testNetworkId value to set.
     * @return the HyperVToAzStackHciNicInput object itself.
     */
    public HyperVToAzStackHciNicInput withTestNetworkId(String testNetworkId) {
        this.testNetworkId = testNetworkId;
        return this;
    }

    /**
     * Get the selectionTypeForFailover property: Gets or sets the selection type of the NIC.
     * 
     * @return the selectionTypeForFailover value.
     */
    public VMNicSelection selectionTypeForFailover() {
        return this.selectionTypeForFailover;
    }

    /**
     * Set the selectionTypeForFailover property: Gets or sets the selection type of the NIC.
     * 
     * @param selectionTypeForFailover the selectionTypeForFailover value to set.
     * @return the HyperVToAzStackHciNicInput object itself.
     */
    public HyperVToAzStackHciNicInput withSelectionTypeForFailover(VMNicSelection selectionTypeForFailover) {
        this.selectionTypeForFailover = selectionTypeForFailover;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nicId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property nicId in model HyperVToAzStackHciNicInput"));
        }
        if (targetNetworkId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetNetworkId in model HyperVToAzStackHciNicInput"));
        }
        if (testNetworkId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property testNetworkId in model HyperVToAzStackHciNicInput"));
        }
        if (selectionTypeForFailover() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectionTypeForFailover in model HyperVToAzStackHciNicInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HyperVToAzStackHciNicInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nicId", this.nicId);
        jsonWriter.writeStringField("targetNetworkId", this.targetNetworkId);
        jsonWriter.writeStringField("testNetworkId", this.testNetworkId);
        jsonWriter.writeStringField("selectionTypeForFailover",
            this.selectionTypeForFailover == null ? null : this.selectionTypeForFailover.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVToAzStackHciNicInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVToAzStackHciNicInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HyperVToAzStackHciNicInput.
     */
    public static HyperVToAzStackHciNicInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVToAzStackHciNicInput deserializedHyperVToAzStackHciNicInput = new HyperVToAzStackHciNicInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nicId".equals(fieldName)) {
                    deserializedHyperVToAzStackHciNicInput.nicId = reader.getString();
                } else if ("targetNetworkId".equals(fieldName)) {
                    deserializedHyperVToAzStackHciNicInput.targetNetworkId = reader.getString();
                } else if ("testNetworkId".equals(fieldName)) {
                    deserializedHyperVToAzStackHciNicInput.testNetworkId = reader.getString();
                } else if ("selectionTypeForFailover".equals(fieldName)) {
                    deserializedHyperVToAzStackHciNicInput.selectionTypeForFailover
                        = VMNicSelection.fromString(reader.getString());
                } else if ("networkName".equals(fieldName)) {
                    deserializedHyperVToAzStackHciNicInput.networkName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVToAzStackHciNicInput;
        });
    }
}
