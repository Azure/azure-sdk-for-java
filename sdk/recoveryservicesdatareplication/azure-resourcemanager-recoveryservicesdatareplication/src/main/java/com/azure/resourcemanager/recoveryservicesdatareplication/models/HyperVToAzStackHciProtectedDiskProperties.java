// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * HyperVToAzStackHCI protected disk properties.
 */
@Immutable
public final class HyperVToAzStackHciProtectedDiskProperties
    implements JsonSerializable<HyperVToAzStackHciProtectedDiskProperties> {
    /*
     * Gets or sets the ARM Id of the storage container.
     */
    private String storageContainerId;

    /*
     * Gets or sets the local path of the storage container.
     */
    private String storageContainerLocalPath;

    /*
     * Gets or sets the source disk Id.
     */
    private String sourceDiskId;

    /*
     * Gets or sets the source disk Name.
     */
    private String sourceDiskName;

    /*
     * Gets or sets the seed disk name.
     */
    private String seedDiskName;

    /*
     * Gets or sets the test failover clone disk.
     */
    private String testMigrateDiskName;

    /*
     * Gets or sets the failover clone disk.
     */
    private String migrateDiskName;

    /*
     * Gets or sets a value indicating whether the disk is the OS disk.
     */
    private Boolean isOsDisk;

    /*
     * Gets or sets the disk capacity in bytes.
     */
    private Long capacityInBytes;

    /*
     * Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     */
    private Boolean isDynamic;

    /*
     * Gets or sets the disk type.
     */
    private String diskType;

    /**
     * Creates an instance of HyperVToAzStackHciProtectedDiskProperties class.
     */
    public HyperVToAzStackHciProtectedDiskProperties() {
    }

    /**
     * Get the storageContainerId property: Gets or sets the ARM Id of the storage container.
     * 
     * @return the storageContainerId value.
     */
    public String storageContainerId() {
        return this.storageContainerId;
    }

    /**
     * Get the storageContainerLocalPath property: Gets or sets the local path of the storage container.
     * 
     * @return the storageContainerLocalPath value.
     */
    public String storageContainerLocalPath() {
        return this.storageContainerLocalPath;
    }

    /**
     * Get the sourceDiskId property: Gets or sets the source disk Id.
     * 
     * @return the sourceDiskId value.
     */
    public String sourceDiskId() {
        return this.sourceDiskId;
    }

    /**
     * Get the sourceDiskName property: Gets or sets the source disk Name.
     * 
     * @return the sourceDiskName value.
     */
    public String sourceDiskName() {
        return this.sourceDiskName;
    }

    /**
     * Get the seedDiskName property: Gets or sets the seed disk name.
     * 
     * @return the seedDiskName value.
     */
    public String seedDiskName() {
        return this.seedDiskName;
    }

    /**
     * Get the testMigrateDiskName property: Gets or sets the test failover clone disk.
     * 
     * @return the testMigrateDiskName value.
     */
    public String testMigrateDiskName() {
        return this.testMigrateDiskName;
    }

    /**
     * Get the migrateDiskName property: Gets or sets the failover clone disk.
     * 
     * @return the migrateDiskName value.
     */
    public String migrateDiskName() {
        return this.migrateDiskName;
    }

    /**
     * Get the isOsDisk property: Gets or sets a value indicating whether the disk is the OS disk.
     * 
     * @return the isOsDisk value.
     */
    public Boolean isOsDisk() {
        return this.isOsDisk;
    }

    /**
     * Get the capacityInBytes property: Gets or sets the disk capacity in bytes.
     * 
     * @return the capacityInBytes value.
     */
    public Long capacityInBytes() {
        return this.capacityInBytes;
    }

    /**
     * Get the isDynamic property: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     * 
     * @return the isDynamic value.
     */
    public Boolean isDynamic() {
        return this.isDynamic;
    }

    /**
     * Get the diskType property: Gets or sets the disk type.
     * 
     * @return the diskType value.
     */
    public String diskType() {
        return this.diskType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVToAzStackHciProtectedDiskProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVToAzStackHciProtectedDiskProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HyperVToAzStackHciProtectedDiskProperties.
     */
    public static HyperVToAzStackHciProtectedDiskProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVToAzStackHciProtectedDiskProperties deserializedHyperVToAzStackHciProtectedDiskProperties
                = new HyperVToAzStackHciProtectedDiskProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageContainerId".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.storageContainerId = reader.getString();
                } else if ("storageContainerLocalPath".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.storageContainerLocalPath
                        = reader.getString();
                } else if ("sourceDiskId".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.sourceDiskId = reader.getString();
                } else if ("sourceDiskName".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.sourceDiskName = reader.getString();
                } else if ("seedDiskName".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.seedDiskName = reader.getString();
                } else if ("testMigrateDiskName".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.testMigrateDiskName = reader.getString();
                } else if ("migrateDiskName".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.migrateDiskName = reader.getString();
                } else if ("isOsDisk".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.isOsDisk
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("capacityInBytes".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.capacityInBytes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("isDynamic".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.isDynamic
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("diskType".equals(fieldName)) {
                    deserializedHyperVToAzStackHciProtectedDiskProperties.diskType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVToAzStackHciProtectedDiskProperties;
        });
    }
}
