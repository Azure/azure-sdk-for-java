// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Fabric agent model properties.
 */
@Fluent
public final class FabricAgentModelProperties implements JsonSerializable<FabricAgentModelProperties> {
    /*
     * Gets or sets the fabric agent correlation Id.
     */
    private String correlationId;

    /*
     * Gets or sets the machine Id where fabric agent is running.
     */
    private String machineId;

    /*
     * Gets or sets the machine name where fabric agent is running.
     */
    private String machineName;

    /*
     * Identity model.
     */
    private IdentityModel authenticationIdentity;

    /*
     * Identity model.
     */
    private IdentityModel resourceAccessIdentity;

    /*
     * Gets or sets a value indicating whether the fabric agent is responsive.
     */
    private Boolean isResponsive;

    /*
     * Gets or sets the time when last heartbeat was sent by the fabric agent.
     */
    private OffsetDateTime lastHeartbeat;

    /*
     * Gets or sets the fabric agent version.
     */
    private String versionNumber;

    /*
     * Gets or sets the provisioning state of the fabric agent.
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the list of health errors.
     */
    private List<HealthErrorModel> healthErrors;

    /*
     * Fabric agent model custom properties.
     */
    private FabricAgentModelCustomProperties customProperties;

    /**
     * Creates an instance of FabricAgentModelProperties class.
     */
    public FabricAgentModelProperties() {
    }

    /**
     * Get the correlationId property: Gets or sets the fabric agent correlation Id.
     * 
     * @return the correlationId value.
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Get the machineId property: Gets or sets the machine Id where fabric agent is running.
     * 
     * @return the machineId value.
     */
    public String machineId() {
        return this.machineId;
    }

    /**
     * Set the machineId property: Gets or sets the machine Id where fabric agent is running.
     * 
     * @param machineId the machineId value to set.
     * @return the FabricAgentModelProperties object itself.
     */
    public FabricAgentModelProperties withMachineId(String machineId) {
        this.machineId = machineId;
        return this;
    }

    /**
     * Get the machineName property: Gets or sets the machine name where fabric agent is running.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Set the machineName property: Gets or sets the machine name where fabric agent is running.
     * 
     * @param machineName the machineName value to set.
     * @return the FabricAgentModelProperties object itself.
     */
    public FabricAgentModelProperties withMachineName(String machineName) {
        this.machineName = machineName;
        return this;
    }

    /**
     * Get the authenticationIdentity property: Identity model.
     * 
     * @return the authenticationIdentity value.
     */
    public IdentityModel authenticationIdentity() {
        return this.authenticationIdentity;
    }

    /**
     * Set the authenticationIdentity property: Identity model.
     * 
     * @param authenticationIdentity the authenticationIdentity value to set.
     * @return the FabricAgentModelProperties object itself.
     */
    public FabricAgentModelProperties withAuthenticationIdentity(IdentityModel authenticationIdentity) {
        this.authenticationIdentity = authenticationIdentity;
        return this;
    }

    /**
     * Get the resourceAccessIdentity property: Identity model.
     * 
     * @return the resourceAccessIdentity value.
     */
    public IdentityModel resourceAccessIdentity() {
        return this.resourceAccessIdentity;
    }

    /**
     * Set the resourceAccessIdentity property: Identity model.
     * 
     * @param resourceAccessIdentity the resourceAccessIdentity value to set.
     * @return the FabricAgentModelProperties object itself.
     */
    public FabricAgentModelProperties withResourceAccessIdentity(IdentityModel resourceAccessIdentity) {
        this.resourceAccessIdentity = resourceAccessIdentity;
        return this;
    }

    /**
     * Get the isResponsive property: Gets or sets a value indicating whether the fabric agent is responsive.
     * 
     * @return the isResponsive value.
     */
    public Boolean isResponsive() {
        return this.isResponsive;
    }

    /**
     * Get the lastHeartbeat property: Gets or sets the time when last heartbeat was sent by the fabric agent.
     * 
     * @return the lastHeartbeat value.
     */
    public OffsetDateTime lastHeartbeat() {
        return this.lastHeartbeat;
    }

    /**
     * Get the versionNumber property: Gets or sets the fabric agent version.
     * 
     * @return the versionNumber value.
     */
    public String versionNumber() {
        return this.versionNumber;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state of the fabric agent.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the healthErrors property: Gets or sets the list of health errors.
     * 
     * @return the healthErrors value.
     */
    public List<HealthErrorModel> healthErrors() {
        return this.healthErrors;
    }

    /**
     * Get the customProperties property: Fabric agent model custom properties.
     * 
     * @return the customProperties value.
     */
    public FabricAgentModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Fabric agent model custom properties.
     * 
     * @param customProperties the customProperties value to set.
     * @return the FabricAgentModelProperties object itself.
     */
    public FabricAgentModelProperties withCustomProperties(FabricAgentModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (machineId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineId in model FabricAgentModelProperties"));
        }
        if (machineName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineName in model FabricAgentModelProperties"));
        }
        if (authenticationIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authenticationIdentity in model FabricAgentModelProperties"));
        } else {
            authenticationIdentity().validate();
        }
        if (resourceAccessIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceAccessIdentity in model FabricAgentModelProperties"));
        } else {
            resourceAccessIdentity().validate();
        }
        if (healthErrors() != null) {
            healthErrors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property customProperties in model FabricAgentModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FabricAgentModelProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("machineId", this.machineId);
        jsonWriter.writeStringField("machineName", this.machineName);
        jsonWriter.writeJsonField("authenticationIdentity", this.authenticationIdentity);
        jsonWriter.writeJsonField("resourceAccessIdentity", this.resourceAccessIdentity);
        jsonWriter.writeJsonField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FabricAgentModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FabricAgentModelProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FabricAgentModelProperties.
     */
    public static FabricAgentModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FabricAgentModelProperties deserializedFabricAgentModelProperties = new FabricAgentModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("machineId".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.machineId = reader.getString();
                } else if ("machineName".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.machineName = reader.getString();
                } else if ("authenticationIdentity".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.authenticationIdentity = IdentityModel.fromJson(reader);
                } else if ("resourceAccessIdentity".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.resourceAccessIdentity = IdentityModel.fromJson(reader);
                } else if ("customProperties".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.customProperties
                        = FabricAgentModelCustomProperties.fromJson(reader);
                } else if ("correlationId".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.correlationId = reader.getString();
                } else if ("isResponsive".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.isResponsive = reader.getNullable(JsonReader::getBoolean);
                } else if ("lastHeartbeat".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.lastHeartbeat = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("versionNumber".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.versionNumber = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFabricAgentModelProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("healthErrors".equals(fieldName)) {
                    List<HealthErrorModel> healthErrors
                        = reader.readArray(reader1 -> HealthErrorModel.fromJson(reader1));
                    deserializedFabricAgentModelProperties.healthErrors = healthErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFabricAgentModelProperties;
        });
    }
}
