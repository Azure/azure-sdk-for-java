// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Workflow model properties. */
@Fluent
public final class WorkflowModelProperties {
    /*
     * Gets or sets the friendly display name.
     */
    @JsonProperty(value = "displayName", access = JsonProperty.Access.WRITE_ONLY)
    private String displayName;

    /*
     * Gets or sets the workflow state.
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private WorkflowState state;

    /*
     * Gets or sets the start time.
     */
    @JsonProperty(value = "startTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startTime;

    /*
     * Gets or sets the end time.
     */
    @JsonProperty(value = "endTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endTime;

    /*
     * Gets or sets the affected object Id.
     */
    @JsonProperty(value = "objectId", access = JsonProperty.Access.WRITE_ONLY)
    private String objectId;

    /*
     * Gets or sets the affected object name.
     */
    @JsonProperty(value = "objectName", access = JsonProperty.Access.WRITE_ONLY)
    private String objectName;

    /*
     * Gets or sets the affected object internal Id.
     */
    @JsonProperty(value = "objectInternalId", access = JsonProperty.Access.WRITE_ONLY)
    private String objectInternalId;

    /*
     * Gets or sets the affected object internal name.
     */
    @JsonProperty(value = "objectInternalName", access = JsonProperty.Access.WRITE_ONLY)
    private String objectInternalName;

    /*
     * Gets or sets the object type.
     */
    @JsonProperty(value = "objectType", access = JsonProperty.Access.WRITE_ONLY)
    private WorkflowObjectType objectType;

    /*
     * Gets or sets the replication provider.
     */
    @JsonProperty(value = "replicationProviderId", access = JsonProperty.Access.WRITE_ONLY)
    private String replicationProviderId;

    /*
     * Gets or sets the source fabric provider.
     */
    @JsonProperty(value = "sourceFabricProviderId", access = JsonProperty.Access.WRITE_ONLY)
    private String sourceFabricProviderId;

    /*
     * Gets or sets the target fabric provider.
     */
    @JsonProperty(value = "targetFabricProviderId", access = JsonProperty.Access.WRITE_ONLY)
    private String targetFabricProviderId;

    /*
     * Gets or sets the list of allowed actions on the workflow.
     */
    @JsonProperty(value = "allowedActions", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> allowedActions;

    /*
     * Gets or sets the workflow activity id.
     */
    @JsonProperty(value = "activityId", access = JsonProperty.Access.WRITE_ONLY)
    private String activityId;

    /*
     * Gets or sets the list of tasks.
     */
    @JsonProperty(value = "tasks", access = JsonProperty.Access.WRITE_ONLY)
    private List<TaskModel> tasks;

    /*
     * Gets or sets the list of errors.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private List<ErrorModel> errors;

    /*
     * Workflow model custom properties.
     */
    @JsonProperty(value = "customProperties", required = true)
    private WorkflowModelCustomProperties customProperties;

    /** Creates an instance of WorkflowModelProperties class. */
    public WorkflowModelProperties() {
    }

    /**
     * Get the displayName property: Gets or sets the friendly display name.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the state property: Gets or sets the workflow state.
     *
     * @return the state value.
     */
    public WorkflowState state() {
        return this.state;
    }

    /**
     * Get the startTime property: Gets or sets the start time.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: Gets or sets the end time.
     *
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the objectId property: Gets or sets the affected object Id.
     *
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Get the objectName property: Gets or sets the affected object name.
     *
     * @return the objectName value.
     */
    public String objectName() {
        return this.objectName;
    }

    /**
     * Get the objectInternalId property: Gets or sets the affected object internal Id.
     *
     * @return the objectInternalId value.
     */
    public String objectInternalId() {
        return this.objectInternalId;
    }

    /**
     * Get the objectInternalName property: Gets or sets the affected object internal name.
     *
     * @return the objectInternalName value.
     */
    public String objectInternalName() {
        return this.objectInternalName;
    }

    /**
     * Get the objectType property: Gets or sets the object type.
     *
     * @return the objectType value.
     */
    public WorkflowObjectType objectType() {
        return this.objectType;
    }

    /**
     * Get the replicationProviderId property: Gets or sets the replication provider.
     *
     * @return the replicationProviderId value.
     */
    public String replicationProviderId() {
        return this.replicationProviderId;
    }

    /**
     * Get the sourceFabricProviderId property: Gets or sets the source fabric provider.
     *
     * @return the sourceFabricProviderId value.
     */
    public String sourceFabricProviderId() {
        return this.sourceFabricProviderId;
    }

    /**
     * Get the targetFabricProviderId property: Gets or sets the target fabric provider.
     *
     * @return the targetFabricProviderId value.
     */
    public String targetFabricProviderId() {
        return this.targetFabricProviderId;
    }

    /**
     * Get the allowedActions property: Gets or sets the list of allowed actions on the workflow.
     *
     * @return the allowedActions value.
     */
    public List<String> allowedActions() {
        return this.allowedActions;
    }

    /**
     * Get the activityId property: Gets or sets the workflow activity id.
     *
     * @return the activityId value.
     */
    public String activityId() {
        return this.activityId;
    }

    /**
     * Get the tasks property: Gets or sets the list of tasks.
     *
     * @return the tasks value.
     */
    public List<TaskModel> tasks() {
        return this.tasks;
    }

    /**
     * Get the errors property: Gets or sets the list of errors.
     *
     * @return the errors value.
     */
    public List<ErrorModel> errors() {
        return this.errors;
    }

    /**
     * Get the customProperties property: Workflow model custom properties.
     *
     * @return the customProperties value.
     */
    public WorkflowModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Workflow model custom properties.
     *
     * @param customProperties the customProperties value to set.
     * @return the WorkflowModelProperties object itself.
     */
    public WorkflowModelProperties withCustomProperties(WorkflowModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tasks() != null) {
            tasks().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property customProperties in model WorkflowModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkflowModelProperties.class);
}
