// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Workflow model properties.
 */
@Fluent
public final class WorkflowModelProperties implements JsonSerializable<WorkflowModelProperties> {
    /*
     * Gets or sets the friendly display name.
     */
    private String displayName;

    /*
     * Gets or sets the workflow state.
     */
    private WorkflowState state;

    /*
     * Gets or sets the start time.
     */
    private OffsetDateTime startTime;

    /*
     * Gets or sets the end time.
     */
    private OffsetDateTime endTime;

    /*
     * Gets or sets the affected object Id.
     */
    private String objectId;

    /*
     * Gets or sets the affected object name.
     */
    private String objectName;

    /*
     * Gets or sets the affected object internal Id.
     */
    private String objectInternalId;

    /*
     * Gets or sets the affected object internal name.
     */
    private String objectInternalName;

    /*
     * Gets or sets the object type.
     */
    private WorkflowObjectType objectType;

    /*
     * Gets or sets the replication provider.
     */
    private String replicationProviderId;

    /*
     * Gets or sets the source fabric provider.
     */
    private String sourceFabricProviderId;

    /*
     * Gets or sets the target fabric provider.
     */
    private String targetFabricProviderId;

    /*
     * Gets or sets the list of allowed actions on the workflow.
     */
    private List<String> allowedActions;

    /*
     * Gets or sets the workflow activity id.
     */
    private String activityId;

    /*
     * Gets or sets the list of tasks.
     */
    private List<TaskModel> tasks;

    /*
     * Gets or sets the list of errors.
     */
    private List<ErrorModel> errors;

    /*
     * Workflow model custom properties.
     */
    private WorkflowModelCustomProperties customProperties;

    /**
     * Creates an instance of WorkflowModelProperties class.
     */
    public WorkflowModelProperties() {
    }

    /**
     * Get the displayName property: Gets or sets the friendly display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the state property: Gets or sets the workflow state.
     * 
     * @return the state value.
     */
    public WorkflowState state() {
        return this.state;
    }

    /**
     * Get the startTime property: Gets or sets the start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: Gets or sets the end time.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the objectId property: Gets or sets the affected object Id.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Get the objectName property: Gets or sets the affected object name.
     * 
     * @return the objectName value.
     */
    public String objectName() {
        return this.objectName;
    }

    /**
     * Get the objectInternalId property: Gets or sets the affected object internal Id.
     * 
     * @return the objectInternalId value.
     */
    public String objectInternalId() {
        return this.objectInternalId;
    }

    /**
     * Get the objectInternalName property: Gets or sets the affected object internal name.
     * 
     * @return the objectInternalName value.
     */
    public String objectInternalName() {
        return this.objectInternalName;
    }

    /**
     * Get the objectType property: Gets or sets the object type.
     * 
     * @return the objectType value.
     */
    public WorkflowObjectType objectType() {
        return this.objectType;
    }

    /**
     * Get the replicationProviderId property: Gets or sets the replication provider.
     * 
     * @return the replicationProviderId value.
     */
    public String replicationProviderId() {
        return this.replicationProviderId;
    }

    /**
     * Get the sourceFabricProviderId property: Gets or sets the source fabric provider.
     * 
     * @return the sourceFabricProviderId value.
     */
    public String sourceFabricProviderId() {
        return this.sourceFabricProviderId;
    }

    /**
     * Get the targetFabricProviderId property: Gets or sets the target fabric provider.
     * 
     * @return the targetFabricProviderId value.
     */
    public String targetFabricProviderId() {
        return this.targetFabricProviderId;
    }

    /**
     * Get the allowedActions property: Gets or sets the list of allowed actions on the workflow.
     * 
     * @return the allowedActions value.
     */
    public List<String> allowedActions() {
        return this.allowedActions;
    }

    /**
     * Get the activityId property: Gets or sets the workflow activity id.
     * 
     * @return the activityId value.
     */
    public String activityId() {
        return this.activityId;
    }

    /**
     * Get the tasks property: Gets or sets the list of tasks.
     * 
     * @return the tasks value.
     */
    public List<TaskModel> tasks() {
        return this.tasks;
    }

    /**
     * Get the errors property: Gets or sets the list of errors.
     * 
     * @return the errors value.
     */
    public List<ErrorModel> errors() {
        return this.errors;
    }

    /**
     * Get the customProperties property: Workflow model custom properties.
     * 
     * @return the customProperties value.
     */
    public WorkflowModelCustomProperties customProperties() {
        return this.customProperties;
    }

    /**
     * Set the customProperties property: Workflow model custom properties.
     * 
     * @param customProperties the customProperties value to set.
     * @return the WorkflowModelProperties object itself.
     */
    public WorkflowModelProperties withCustomProperties(WorkflowModelCustomProperties customProperties) {
        this.customProperties = customProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tasks() != null) {
            tasks().forEach(e -> e.validate());
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
        if (customProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property customProperties in model WorkflowModelProperties"));
        } else {
            customProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkflowModelProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("customProperties", this.customProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkflowModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkflowModelProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkflowModelProperties.
     */
    public static WorkflowModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkflowModelProperties deserializedWorkflowModelProperties = new WorkflowModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customProperties".equals(fieldName)) {
                    deserializedWorkflowModelProperties.customProperties
                        = WorkflowModelCustomProperties.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    deserializedWorkflowModelProperties.displayName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedWorkflowModelProperties.state = WorkflowState.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedWorkflowModelProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedWorkflowModelProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("objectId".equals(fieldName)) {
                    deserializedWorkflowModelProperties.objectId = reader.getString();
                } else if ("objectName".equals(fieldName)) {
                    deserializedWorkflowModelProperties.objectName = reader.getString();
                } else if ("objectInternalId".equals(fieldName)) {
                    deserializedWorkflowModelProperties.objectInternalId = reader.getString();
                } else if ("objectInternalName".equals(fieldName)) {
                    deserializedWorkflowModelProperties.objectInternalName = reader.getString();
                } else if ("objectType".equals(fieldName)) {
                    deserializedWorkflowModelProperties.objectType = WorkflowObjectType.fromString(reader.getString());
                } else if ("replicationProviderId".equals(fieldName)) {
                    deserializedWorkflowModelProperties.replicationProviderId = reader.getString();
                } else if ("sourceFabricProviderId".equals(fieldName)) {
                    deserializedWorkflowModelProperties.sourceFabricProviderId = reader.getString();
                } else if ("targetFabricProviderId".equals(fieldName)) {
                    deserializedWorkflowModelProperties.targetFabricProviderId = reader.getString();
                } else if ("allowedActions".equals(fieldName)) {
                    List<String> allowedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkflowModelProperties.allowedActions = allowedActions;
                } else if ("activityId".equals(fieldName)) {
                    deserializedWorkflowModelProperties.activityId = reader.getString();
                } else if ("tasks".equals(fieldName)) {
                    List<TaskModel> tasks = reader.readArray(reader1 -> TaskModel.fromJson(reader1));
                    deserializedWorkflowModelProperties.tasks = tasks;
                } else if ("errors".equals(fieldName)) {
                    List<ErrorModel> errors = reader.readArray(reader1 -> ErrorModel.fromJson(reader1));
                    deserializedWorkflowModelProperties.errors = errors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkflowModelProperties;
        });
    }
}
