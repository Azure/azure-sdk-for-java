// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The LastFailedPlannedFailoverJob model.
 */
@Immutable
public final class LastFailedPlannedFailoverJob extends ProtectedItemJobProperties {
    /*
     * Gets or sets end time of the workflow.
     */
    private OffsetDateTime endTime;

    /*
     * Gets or sets start time of the workflow.
     */
    private OffsetDateTime startTime;

    /*
     * Gets or sets workflow state.
     */
    private String state;

    /*
     * Gets or sets the workflow friendly display name.
     */
    private String displayName;

    /*
     * Gets or sets workflow name.
     */
    private String name;

    /*
     * Gets or sets workflow Id.
     */
    private String id;

    /*
     * Gets or sets protection scenario name.
     */
    private String scenarioName;

    /**
     * Creates an instance of LastFailedPlannedFailoverJob class.
     */
    public LastFailedPlannedFailoverJob() {
    }

    /**
     * Get the endTime property: Gets or sets end time of the workflow.
     * 
     * @return the endTime value.
     */
    @Override
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the startTime property: Gets or sets start time of the workflow.
     * 
     * @return the startTime value.
     */
    @Override
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the state property: Gets or sets workflow state.
     * 
     * @return the state value.
     */
    @Override
    public String state() {
        return this.state;
    }

    /**
     * Get the displayName property: Gets or sets the workflow friendly display name.
     * 
     * @return the displayName value.
     */
    @Override
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the name property: Gets or sets workflow name.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Gets or sets workflow Id.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the scenarioName property: Gets or sets protection scenario name.
     * 
     * @return the scenarioName value.
     */
    @Override
    public String scenarioName() {
        return this.scenarioName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LastFailedPlannedFailoverJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LastFailedPlannedFailoverJob if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LastFailedPlannedFailoverJob.
     */
    public static LastFailedPlannedFailoverJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LastFailedPlannedFailoverJob deserializedLastFailedPlannedFailoverJob = new LastFailedPlannedFailoverJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scenarioName".equals(fieldName)) {
                    deserializedLastFailedPlannedFailoverJob.scenarioName = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedLastFailedPlannedFailoverJob.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLastFailedPlannedFailoverJob.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedLastFailedPlannedFailoverJob.displayName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedLastFailedPlannedFailoverJob.state = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedLastFailedPlannedFailoverJob.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedLastFailedPlannedFailoverJob.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLastFailedPlannedFailoverJob;
        });
    }
}
