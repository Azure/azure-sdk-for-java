// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** HyperVToAzStack disk input. */
@Fluent
public final class HyperVToAzStackHciDiskInput {
    /*
     * Gets or sets the disk Id.
     */
    @JsonProperty(value = "diskId", required = true)
    private String diskId;

    /*
     * Gets or sets the target storage account ARM Id.
     */
    @JsonProperty(value = "storageContainerId")
    private String storageContainerId;

    /*
     * Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     */
    @JsonProperty(value = "isDynamic")
    private Boolean isDynamic;

    /*
     * Gets or sets the disk size in GB.
     */
    @JsonProperty(value = "diskSizeGB", required = true)
    private long diskSizeGB;

    /*
     * Gets or sets the type of the virtual hard disk, vhd or vhdx.
     */
    @JsonProperty(value = "diskFileFormat", required = true)
    private String diskFileFormat;

    /*
     * Gets or sets a value indicating whether disk is os disk.
     */
    @JsonProperty(value = "isOsDisk", required = true)
    private boolean isOsDisk;

    /** Creates an instance of HyperVToAzStackHciDiskInput class. */
    public HyperVToAzStackHciDiskInput() {
    }

    /**
     * Get the diskId property: Gets or sets the disk Id.
     *
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: Gets or sets the disk Id.
     *
     * @param diskId the diskId value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the storageContainerId property: Gets or sets the target storage account ARM Id.
     *
     * @return the storageContainerId value.
     */
    public String storageContainerId() {
        return this.storageContainerId;
    }

    /**
     * Set the storageContainerId property: Gets or sets the target storage account ARM Id.
     *
     * @param storageContainerId the storageContainerId value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withStorageContainerId(String storageContainerId) {
        this.storageContainerId = storageContainerId;
        return this;
    }

    /**
     * Get the isDynamic property: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     *
     * @return the isDynamic value.
     */
    public Boolean isDynamic() {
        return this.isDynamic;
    }

    /**
     * Set the isDynamic property: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     *
     * @param isDynamic the isDynamic value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withIsDynamic(Boolean isDynamic) {
        this.isDynamic = isDynamic;
        return this;
    }

    /**
     * Get the diskSizeGB property: Gets or sets the disk size in GB.
     *
     * @return the diskSizeGB value.
     */
    public long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Gets or sets the disk size in GB.
     *
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withDiskSizeGB(long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the diskFileFormat property: Gets or sets the type of the virtual hard disk, vhd or vhdx.
     *
     * @return the diskFileFormat value.
     */
    public String diskFileFormat() {
        return this.diskFileFormat;
    }

    /**
     * Set the diskFileFormat property: Gets or sets the type of the virtual hard disk, vhd or vhdx.
     *
     * @param diskFileFormat the diskFileFormat value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withDiskFileFormat(String diskFileFormat) {
        this.diskFileFormat = diskFileFormat;
        return this;
    }

    /**
     * Get the isOsDisk property: Gets or sets a value indicating whether disk is os disk.
     *
     * @return the isOsDisk value.
     */
    public boolean isOsDisk() {
        return this.isOsDisk;
    }

    /**
     * Set the isOsDisk property: Gets or sets a value indicating whether disk is os disk.
     *
     * @param isOsDisk the isOsDisk value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withIsOsDisk(boolean isOsDisk) {
        this.isOsDisk = isOsDisk;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property diskId in model HyperVToAzStackHciDiskInput"));
        }
        if (diskFileFormat() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property diskFileFormat in model HyperVToAzStackHciDiskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HyperVToAzStackHciDiskInput.class);
}
