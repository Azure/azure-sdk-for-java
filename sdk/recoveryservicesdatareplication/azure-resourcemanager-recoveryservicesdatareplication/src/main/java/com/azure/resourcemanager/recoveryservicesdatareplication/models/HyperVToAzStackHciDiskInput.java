// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * HyperVToAzStack disk input.
 */
@Fluent
public final class HyperVToAzStackHciDiskInput implements JsonSerializable<HyperVToAzStackHciDiskInput> {
    /*
     * Gets or sets the disk Id.
     */
    private String diskId;

    /*
     * Gets or sets the target storage account ARM Id.
     */
    private String storageContainerId;

    /*
     * Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     */
    private Boolean isDynamic;

    /*
     * Gets or sets the disk size in GB.
     */
    private long diskSizeGB;

    /*
     * Gets or sets the type of the virtual hard disk, vhd or vhdx.
     */
    private String diskFileFormat;

    /*
     * Gets or sets a value indicating whether disk is os disk.
     */
    private boolean isOsDisk;

    /**
     * Creates an instance of HyperVToAzStackHciDiskInput class.
     */
    public HyperVToAzStackHciDiskInput() {
    }

    /**
     * Get the diskId property: Gets or sets the disk Id.
     * 
     * @return the diskId value.
     */
    public String diskId() {
        return this.diskId;
    }

    /**
     * Set the diskId property: Gets or sets the disk Id.
     * 
     * @param diskId the diskId value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withDiskId(String diskId) {
        this.diskId = diskId;
        return this;
    }

    /**
     * Get the storageContainerId property: Gets or sets the target storage account ARM Id.
     * 
     * @return the storageContainerId value.
     */
    public String storageContainerId() {
        return this.storageContainerId;
    }

    /**
     * Set the storageContainerId property: Gets or sets the target storage account ARM Id.
     * 
     * @param storageContainerId the storageContainerId value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withStorageContainerId(String storageContainerId) {
        this.storageContainerId = storageContainerId;
        return this;
    }

    /**
     * Get the isDynamic property: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     * 
     * @return the isDynamic value.
     */
    public Boolean isDynamic() {
        return this.isDynamic;
    }

    /**
     * Set the isDynamic property: Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard
     * disk.
     * 
     * @param isDynamic the isDynamic value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withIsDynamic(Boolean isDynamic) {
        this.isDynamic = isDynamic;
        return this;
    }

    /**
     * Get the diskSizeGB property: Gets or sets the disk size in GB.
     * 
     * @return the diskSizeGB value.
     */
    public long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Gets or sets the disk size in GB.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withDiskSizeGB(long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the diskFileFormat property: Gets or sets the type of the virtual hard disk, vhd or vhdx.
     * 
     * @return the diskFileFormat value.
     */
    public String diskFileFormat() {
        return this.diskFileFormat;
    }

    /**
     * Set the diskFileFormat property: Gets or sets the type of the virtual hard disk, vhd or vhdx.
     * 
     * @param diskFileFormat the diskFileFormat value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withDiskFileFormat(String diskFileFormat) {
        this.diskFileFormat = diskFileFormat;
        return this;
    }

    /**
     * Get the isOsDisk property: Gets or sets a value indicating whether disk is os disk.
     * 
     * @return the isOsDisk value.
     */
    public boolean isOsDisk() {
        return this.isOsDisk;
    }

    /**
     * Set the isOsDisk property: Gets or sets a value indicating whether disk is os disk.
     * 
     * @param isOsDisk the isOsDisk value to set.
     * @return the HyperVToAzStackHciDiskInput object itself.
     */
    public HyperVToAzStackHciDiskInput withIsOsDisk(boolean isOsDisk) {
        this.isOsDisk = isOsDisk;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property diskId in model HyperVToAzStackHciDiskInput"));
        }
        if (diskFileFormat() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property diskFileFormat in model HyperVToAzStackHciDiskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HyperVToAzStackHciDiskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diskId", this.diskId);
        jsonWriter.writeLongField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeStringField("diskFileFormat", this.diskFileFormat);
        jsonWriter.writeBooleanField("isOsDisk", this.isOsDisk);
        jsonWriter.writeStringField("storageContainerId", this.storageContainerId);
        jsonWriter.writeBooleanField("isDynamic", this.isDynamic);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HyperVToAzStackHciDiskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HyperVToAzStackHciDiskInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HyperVToAzStackHciDiskInput.
     */
    public static HyperVToAzStackHciDiskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HyperVToAzStackHciDiskInput deserializedHyperVToAzStackHciDiskInput = new HyperVToAzStackHciDiskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskId".equals(fieldName)) {
                    deserializedHyperVToAzStackHciDiskInput.diskId = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedHyperVToAzStackHciDiskInput.diskSizeGB = reader.getLong();
                } else if ("diskFileFormat".equals(fieldName)) {
                    deserializedHyperVToAzStackHciDiskInput.diskFileFormat = reader.getString();
                } else if ("isOsDisk".equals(fieldName)) {
                    deserializedHyperVToAzStackHciDiskInput.isOsDisk = reader.getBoolean();
                } else if ("storageContainerId".equals(fieldName)) {
                    deserializedHyperVToAzStackHciDiskInput.storageContainerId = reader.getString();
                } else if ("isDynamic".equals(fieldName)) {
                    deserializedHyperVToAzStackHciDiskInput.isDynamic = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHyperVToAzStackHciDiskInput;
        });
    }
}
