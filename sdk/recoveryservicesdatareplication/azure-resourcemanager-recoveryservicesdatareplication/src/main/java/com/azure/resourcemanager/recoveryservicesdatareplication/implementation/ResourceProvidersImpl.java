// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.CheckNameAvailabilityResponseModelInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.DeploymentPreflightModelInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.CheckNameAvailabilityModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.CheckNameAvailabilityResponseModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.DeploymentPreflightModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ResourceProviders;

public final class ResourceProvidersImpl implements ResourceProviders {
    private static final ClientLogger LOGGER = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager
        serviceManager;

    public ResourceProvidersImpl(
        ResourceProvidersClient innerClient,
        com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager
            serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CheckNameAvailabilityResponseModel> checkNameAvailabilityWithResponse(
        String location, CheckNameAvailabilityModel body, Context context) {
        Response<CheckNameAvailabilityResponseModelInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(location, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckNameAvailabilityResponseModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckNameAvailabilityResponseModel checkNameAvailability(String location) {
        CheckNameAvailabilityResponseModelInner inner = this.serviceClient().checkNameAvailability(location);
        if (inner != null) {
            return new CheckNameAvailabilityResponseModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeploymentPreflightModel> deploymentPreflightWithResponse(
        String resourceGroupName, String deploymentId, DeploymentPreflightModelInner body, Context context) {
        Response<DeploymentPreflightModelInner> inner =
            this.serviceClient().deploymentPreflightWithResponse(resourceGroupName, deploymentId, body, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentPreflightModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeploymentPreflightModel deploymentPreflight(String resourceGroupName, String deploymentId) {
        DeploymentPreflightModelInner inner = this.serviceClient().deploymentPreflight(resourceGroupName, deploymentId);
        if (inner != null) {
            return new DeploymentPreflightModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager manager() {
        return this.serviceManager;
    }
}
