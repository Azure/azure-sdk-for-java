// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.elasticsan.models.ProvisioningStates;
import com.azure.resourcemanager.elasticsan.models.SnapshotCreationData;
import java.io.IOException;

/**
 * Properties for Snapshot.
 */
@Fluent
public final class SnapshotProperties implements JsonSerializable<SnapshotProperties> {
    /*
     * Data used when creating a volume snapshot.
     */
    private SnapshotCreationData creationData;

    /*
     * State of the operation on the resource.
     */
    private ProvisioningStates provisioningState;

    /*
     * Size of Source Volume
     */
    private Long sourceVolumeSizeGiB;

    /*
     * Source Volume Name of a snapshot
     */
    private String volumeName;

    /**
     * Creates an instance of SnapshotProperties class.
     */
    public SnapshotProperties() {
    }

    /**
     * Get the creationData property: Data used when creating a volume snapshot.
     * 
     * @return the creationData value.
     */
    public SnapshotCreationData creationData() {
        return this.creationData;
    }

    /**
     * Set the creationData property: Data used when creating a volume snapshot.
     * 
     * @param creationData the creationData value to set.
     * @return the SnapshotProperties object itself.
     */
    public SnapshotProperties withCreationData(SnapshotCreationData creationData) {
        this.creationData = creationData;
        return this;
    }

    /**
     * Get the provisioningState property: State of the operation on the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the sourceVolumeSizeGiB property: Size of Source Volume.
     * 
     * @return the sourceVolumeSizeGiB value.
     */
    public Long sourceVolumeSizeGiB() {
        return this.sourceVolumeSizeGiB;
    }

    /**
     * Get the volumeName property: Source Volume Name of a snapshot.
     * 
     * @return the volumeName value.
     */
    public String volumeName() {
        return this.volumeName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (creationData() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property creationData in model SnapshotProperties"));
        } else {
            creationData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SnapshotProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("creationData", this.creationData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SnapshotProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnapshotProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SnapshotProperties.
     */
    public static SnapshotProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SnapshotProperties deserializedSnapshotProperties = new SnapshotProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("creationData".equals(fieldName)) {
                    deserializedSnapshotProperties.creationData = SnapshotCreationData.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSnapshotProperties.provisioningState
                        = ProvisioningStates.fromString(reader.getString());
                } else if ("sourceVolumeSizeGiB".equals(fieldName)) {
                    deserializedSnapshotProperties.sourceVolumeSizeGiB = reader.getNullable(JsonReader::getLong);
                } else if ("volumeName".equals(fieldName)) {
                    deserializedSnapshotProperties.volumeName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSnapshotProperties;
        });
    }
}
