// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * object to hold array of volume names.
 */
@Fluent
public final class VolumeNameList implements JsonSerializable<VolumeNameList> {
    /*
     * array of volume names
     */
    private List<String> volumeNames;

    /**
     * Creates an instance of VolumeNameList class.
     */
    public VolumeNameList() {
    }

    /**
     * Get the volumeNames property: array of volume names.
     * 
     * @return the volumeNames value.
     */
    public List<String> volumeNames() {
        return this.volumeNames;
    }

    /**
     * Set the volumeNames property: array of volume names.
     * 
     * @param volumeNames the volumeNames value to set.
     * @return the VolumeNameList object itself.
     */
    public VolumeNameList withVolumeNames(List<String> volumeNames) {
        this.volumeNames = volumeNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (volumeNames() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property volumeNames in model VolumeNameList"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VolumeNameList.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("volumeNames", this.volumeNames, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeNameList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeNameList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VolumeNameList.
     */
    public static VolumeNameList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeNameList deserializedVolumeNameList = new VolumeNameList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("volumeNames".equals(fieldName)) {
                    List<String> volumeNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedVolumeNameList.volumeNames = volumeNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeNameList;
        });
    }
}
