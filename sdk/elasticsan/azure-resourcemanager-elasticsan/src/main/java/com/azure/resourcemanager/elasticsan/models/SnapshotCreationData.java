// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data used when creating a volume snapshot.
 */
@Fluent
public final class SnapshotCreationData implements JsonSerializable<SnapshotCreationData> {
    /*
     * Fully qualified resource ID of the volume. E.g.
     * "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}/volumes/{volumeName}"
     */
    private String sourceId;

    /**
     * Creates an instance of SnapshotCreationData class.
     */
    public SnapshotCreationData() {
    }

    /**
     * Get the sourceId property: Fully qualified resource ID of the volume. E.g.
     * "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}/volumes/{volumeName}".
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: Fully qualified resource ID of the volume. E.g.
     * "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}/volumes/{volumeName}".
     * 
     * @param sourceId the sourceId value to set.
     * @return the SnapshotCreationData object itself.
     */
    public SnapshotCreationData withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property sourceId in model SnapshotCreationData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SnapshotCreationData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceId", this.sourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SnapshotCreationData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnapshotCreationData if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SnapshotCreationData.
     */
    public static SnapshotCreationData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SnapshotCreationData deserializedSnapshotCreationData = new SnapshotCreationData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceId".equals(fieldName)) {
                    deserializedSnapshotCreationData.sourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSnapshotCreationData;
        });
    }
}
