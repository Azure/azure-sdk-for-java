// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.elasticsan.models.ManagedByInfo;
import java.io.IOException;

/**
 * Volume response properties.
 */
@Fluent
public final class VolumeUpdateProperties implements JsonSerializable<VolumeUpdateProperties> {
    /*
     * Volume size.
     */
    private Long sizeGiB;

    /*
     * Parent resource information.
     */
    private ManagedByInfo managedBy;

    /**
     * Creates an instance of VolumeUpdateProperties class.
     */
    public VolumeUpdateProperties() {
    }

    /**
     * Get the sizeGiB property: Volume size.
     * 
     * @return the sizeGiB value.
     */
    public Long sizeGiB() {
        return this.sizeGiB;
    }

    /**
     * Set the sizeGiB property: Volume size.
     * 
     * @param sizeGiB the sizeGiB value to set.
     * @return the VolumeUpdateProperties object itself.
     */
    public VolumeUpdateProperties withSizeGiB(Long sizeGiB) {
        this.sizeGiB = sizeGiB;
        return this;
    }

    /**
     * Get the managedBy property: Parent resource information.
     * 
     * @return the managedBy value.
     */
    public ManagedByInfo managedBy() {
        return this.managedBy;
    }

    /**
     * Set the managedBy property: Parent resource information.
     * 
     * @param managedBy the managedBy value to set.
     * @return the VolumeUpdateProperties object itself.
     */
    public VolumeUpdateProperties withManagedBy(ManagedByInfo managedBy) {
        this.managedBy = managedBy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedBy() != null) {
            managedBy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("sizeGiB", this.sizeGiB);
        jsonWriter.writeJsonField("managedBy", this.managedBy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeUpdateProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VolumeUpdateProperties.
     */
    public static VolumeUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeUpdateProperties deserializedVolumeUpdateProperties = new VolumeUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sizeGiB".equals(fieldName)) {
                    deserializedVolumeUpdateProperties.sizeGiB = reader.getNullable(JsonReader::getLong);
                } else if ("managedBy".equals(fieldName)) {
                    deserializedVolumeUpdateProperties.managedBy = ManagedByInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeUpdateProperties;
        });
    }
}
