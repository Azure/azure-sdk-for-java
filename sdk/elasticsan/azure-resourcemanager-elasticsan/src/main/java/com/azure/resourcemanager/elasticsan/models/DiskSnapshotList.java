// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * object to hold array of Disk Snapshot ARM IDs.
 */
@Fluent
public final class DiskSnapshotList implements JsonSerializable<DiskSnapshotList> {
    /*
     * array of DiskSnapshot ARM IDs
     */
    private List<String> diskSnapshotIds;

    /**
     * Creates an instance of DiskSnapshotList class.
     */
    public DiskSnapshotList() {
    }

    /**
     * Get the diskSnapshotIds property: array of DiskSnapshot ARM IDs.
     * 
     * @return the diskSnapshotIds value.
     */
    public List<String> diskSnapshotIds() {
        return this.diskSnapshotIds;
    }

    /**
     * Set the diskSnapshotIds property: array of DiskSnapshot ARM IDs.
     * 
     * @param diskSnapshotIds the diskSnapshotIds value to set.
     * @return the DiskSnapshotList object itself.
     */
    public DiskSnapshotList withDiskSnapshotIds(List<String> diskSnapshotIds) {
        this.diskSnapshotIds = diskSnapshotIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (diskSnapshotIds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property diskSnapshotIds in model DiskSnapshotList"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiskSnapshotList.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("diskSnapshotIds", this.diskSnapshotIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskSnapshotList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskSnapshotList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiskSnapshotList.
     */
    public static DiskSnapshotList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskSnapshotList deserializedDiskSnapshotList = new DiskSnapshotList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskSnapshotIds".equals(fieldName)) {
                    List<String> diskSnapshotIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiskSnapshotList.diskSnapshotIds = diskSnapshotIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskSnapshotList;
        });
    }
}
