// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elasticsan.ElasticSanManager;
import com.azure.resourcemanager.elasticsan.models.AutoScalePolicyEnforcement;
import com.azure.resourcemanager.elasticsan.models.ElasticSan;
import com.azure.resourcemanager.elasticsan.models.PublicNetworkAccess;
import com.azure.resourcemanager.elasticsan.models.SkuName;
import com.azure.resourcemanager.elasticsan.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ElasticSansListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"sku\":{\"name\":\"Premium_LRS\",\"tier\":\"Premium\"},\"availabilityZones\":[\"sdyhtozfikdowwq\"],\"provisioningState\":\"Invalid\",\"baseSizeTiB\":4718477365662643943,\"extendedCapacitySizeTiB\":5921750907311392346,\"totalVolumeSizeGiB\":5570761026718933034,\"volumeGroupCount\":2045084080849688226,\"totalIops\":7005518236104417042,\"totalMBps\":7356451248141105316,\"totalSizeTiB\":2475379821135257560,\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Failed\",\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"groupIds\":[\"sjnkal\",\"utiiswacf\"]},\"id\":\"dkzzewkfvhqcrail\",\"name\":\"pnppfuf\",\"type\":\"rwdmhdlxyjrxsa\"}],\"publicNetworkAccess\":\"Enabled\",\"autoScaleProperties\":{\"scaleUpProperties\":{\"unusedSizeTiB\":3165727782283367859,\"increaseCapacityUnitByTiB\":3130876298104392093,\"capacityUnitScaleUpLimitTiB\":7972426552267245030,\"autoScalePolicyEnforcement\":\"None\"}}},\"location\":\"bcvkcvqvpkeq\",\"tags\":{\"zdopcjwvnhd\":\"drhvoodsotbo\",\"mgxcxrslpm\":\"d\"},\"id\":\"twuoegrpkhjwni\",\"name\":\"qsluicp\",\"type\":\"ggkzzlvmbmpa\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticSanManager manager = ElasticSanManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ElasticSan> response = manager.elasticSans().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bcvkcvqvpkeq", response.iterator().next().location());
        Assertions.assertEquals("drhvoodsotbo", response.iterator().next().tags().get("zdopcjwvnhd"));
        Assertions.assertEquals(SkuName.PREMIUM_LRS, response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals("sdyhtozfikdowwq", response.iterator().next().availabilityZones().get(0));
        Assertions.assertEquals(4718477365662643943L, response.iterator().next().baseSizeTiB());
        Assertions.assertEquals(5921750907311392346L, response.iterator().next().extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(3165727782283367859L,
            response.iterator().next().autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(3130876298104392093L,
            response.iterator().next().autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(7972426552267245030L,
            response.iterator().next().autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.NONE,
            response.iterator().next().autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }
}
