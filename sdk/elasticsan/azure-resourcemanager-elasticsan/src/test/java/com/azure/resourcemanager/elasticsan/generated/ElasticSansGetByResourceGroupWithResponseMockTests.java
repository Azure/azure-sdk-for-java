// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elasticsan.ElasticSanManager;
import com.azure.resourcemanager.elasticsan.models.AutoScalePolicyEnforcement;
import com.azure.resourcemanager.elasticsan.models.ElasticSan;
import com.azure.resourcemanager.elasticsan.models.PublicNetworkAccess;
import com.azure.resourcemanager.elasticsan.models.SkuName;
import com.azure.resourcemanager.elasticsan.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ElasticSansGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"sku\":{\"name\":\"Premium_LRS\",\"tier\":\"Premium\"},\"availabilityZones\":[\"erpqlpqwcciuqg\",\"dbutauvfbtkuwhh\",\"hykojoxafnndlpic\"],\"provisioningState\":\"Succeeded\",\"baseSizeTiB\":8179154062560286249,\"extendedCapacitySizeTiB\":8335274886610479577,\"totalVolumeSizeGiB\":8200965629156318432,\"volumeGroupCount\":5680938183379319718,\"totalIops\":3535746995814018434,\"totalMBps\":3103507589533354334,\"totalSizeTiB\":4122830623851114030,\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"groupIds\":[\"jxywsuws\",\"rsndsytgadgvra\"]},\"id\":\"en\",\"name\":\"qnzarrwl\",\"type\":\"uu\"}],\"publicNetworkAccess\":\"Enabled\",\"autoScaleProperties\":{\"scaleUpProperties\":{\"unusedSizeTiB\":1710903714386145180,\"increaseCapacityUnitByTiB\":9086145037828754941,\"capacityUnitScaleUpLimitTiB\":1965197725763741075,\"autoScalePolicyEnforcement\":\"None\"}}},\"location\":\"ibwwiftohqkv\",\"tags\":{\"nynfsynljphuo\":\"ksgplsa\",\"eosjswsr\":\"xodlqiyntorzih\",\"qioxi\":\"slyzrpzbchckqq\",\"wyhqmibzyhwits\":\"suiizynkedyat\"},\"id\":\"ypyynpcdpumnzg\",\"name\":\"wznm\",\"type\":\"biknsorgjhxbld\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticSanManager manager = ElasticSanManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ElasticSan response = manager.elasticSans()
            .getByResourceGroupWithResponse("ulpiuj", "aasipqi", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ibwwiftohqkv", response.location());
        Assertions.assertEquals("ksgplsa", response.tags().get("nynfsynljphuo"));
        Assertions.assertEquals(SkuName.PREMIUM_LRS, response.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.sku().tier());
        Assertions.assertEquals("erpqlpqwcciuqg", response.availabilityZones().get(0));
        Assertions.assertEquals(8179154062560286249L, response.baseSizeTiB());
        Assertions.assertEquals(8335274886610479577L, response.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals(1710903714386145180L,
            response.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(9086145037828754941L,
            response.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(1965197725763741075L,
            response.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.NONE,
            response.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }
}
