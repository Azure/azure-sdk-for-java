// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elasticsan.models.AutoScalePolicyEnforcement;
import com.azure.resourcemanager.elasticsan.models.AutoScaleProperties;
import com.azure.resourcemanager.elasticsan.models.ElasticSanUpdate;
import com.azure.resourcemanager.elasticsan.models.PublicNetworkAccess;
import com.azure.resourcemanager.elasticsan.models.ScaleUpProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ElasticSanUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ElasticSanUpdate model = BinaryData.fromString(
            "{\"properties\":{\"baseSizeTiB\":4764420434211011454,\"extendedCapacitySizeTiB\":7229748892246039848,\"publicNetworkAccess\":\"Enabled\",\"autoScaleProperties\":{\"scaleUpProperties\":{\"unusedSizeTiB\":6336997568573422553,\"increaseCapacityUnitByTiB\":5546315024826838939,\"capacityUnitScaleUpLimitTiB\":6205752976373058223,\"autoScalePolicyEnforcement\":\"None\"}}},\"tags\":{\"dmgloug\":\"zsm\",\"wtmutduq\":\"b\"}}")
            .toObject(ElasticSanUpdate.class);
        Assertions.assertEquals("zsm", model.tags().get("dmgloug"));
        Assertions.assertEquals(4764420434211011454L, model.baseSizeTiB());
        Assertions.assertEquals(7229748892246039848L, model.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals(6336997568573422553L, model.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(5546315024826838939L,
            model.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(6205752976373058223L,
            model.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.NONE,
            model.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ElasticSanUpdate model = new ElasticSanUpdate().withTags(mapOf("dmgloug", "zsm", "wtmutduq", "b"))
            .withBaseSizeTiB(4764420434211011454L)
            .withExtendedCapacitySizeTiB(7229748892246039848L)
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withAutoScaleProperties(new AutoScaleProperties()
                .withScaleUpProperties(new ScaleUpProperties().withUnusedSizeTiB(6336997568573422553L)
                    .withIncreaseCapacityUnitByTiB(5546315024826838939L)
                    .withCapacityUnitScaleUpLimitTiB(6205752976373058223L)
                    .withAutoScalePolicyEnforcement(AutoScalePolicyEnforcement.NONE)));
        model = BinaryData.fromObject(model).toObject(ElasticSanUpdate.class);
        Assertions.assertEquals("zsm", model.tags().get("dmgloug"));
        Assertions.assertEquals(4764420434211011454L, model.baseSizeTiB());
        Assertions.assertEquals(7229748892246039848L, model.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals(6336997568573422553L, model.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(5546315024826838939L,
            model.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(6205752976373058223L,
            model.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.NONE,
            model.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
