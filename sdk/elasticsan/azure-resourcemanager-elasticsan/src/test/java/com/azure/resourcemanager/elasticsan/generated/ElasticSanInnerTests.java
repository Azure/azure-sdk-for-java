// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elasticsan.fluent.models.ElasticSanInner;
import com.azure.resourcemanager.elasticsan.models.Sku;
import com.azure.resourcemanager.elasticsan.models.SkuName;
import com.azure.resourcemanager.elasticsan.models.SkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ElasticSanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ElasticSanInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"sku\":{\"name\":\"Premium_LRS\",\"tier\":\"Premium\"},\"availabilityZones\":[\"wbxgjvt\",\"vpys\",\"zdn\",\"uj\"],\"provisioningState\":\"Deleting\",\"baseSizeTiB\":6415098811593450314,\"extendedCapacitySizeTiB\":4001606914042880577,\"totalVolumeSizeGiB\":364540657930641108,\"volumeGroupCount\":7961685994099072162,\"totalIops\":2510679492644856616,\"totalMBps\":41329089410242621,\"totalSizeTiB\":4520848990140400139,\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{\"id\":\"zxufiz\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"fihrfi\",\"actionsRequired\":\"vzwdzuhtymwis\"},\"groupIds\":[\"thwxmnteiwaopvkm\",\"jcmmxdcufufsrp\",\"mzidnsezcxtb\"]},\"id\":\"gfycc\",\"name\":\"newmdwzjeiachbo\",\"type\":\"sflnrosfqp\"},{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{\"id\":\"zvypyqrimzinp\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"dkirsoodqxhcr\",\"actionsRequired\":\"ohjtckw\"},\"groupIds\":[\"oifiyipjxsqwpgr\",\"bznorcjxvsnby\",\"qabnmoc\",\"cyshurzafbljjgp\"]},\"id\":\"oq\",\"name\":\"jmkljavbqidtqajz\",\"type\":\"ulpkudjkrl\"}]},\"location\":\"bzhfepgzgqexz\",\"tags\":{\"glu\":\"xscpaierhhbc\"},\"id\":\"majtjaod\",\"name\":\"obnbdxkqpxokaj\",\"type\":\"onpimexgstxg\"}")
                .toObject(ElasticSanInner.class);
        Assertions.assertEquals("bzhfepgzgqexz", model.location());
        Assertions.assertEquals("xscpaierhhbc", model.tags().get("glu"));
        Assertions.assertEquals(SkuName.PREMIUM_LRS, model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("wbxgjvt", model.availabilityZones().get(0));
        Assertions.assertEquals(6415098811593450314L, model.baseSizeTiB());
        Assertions.assertEquals(4001606914042880577L, model.extendedCapacitySizeTiB());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ElasticSanInner model =
            new ElasticSanInner()
                .withLocation("bzhfepgzgqexz")
                .withTags(mapOf("glu", "xscpaierhhbc"))
                .withSku(new Sku().withName(SkuName.PREMIUM_LRS).withTier(SkuTier.PREMIUM))
                .withAvailabilityZones(Arrays.asList("wbxgjvt", "vpys", "zdn", "uj"))
                .withBaseSizeTiB(6415098811593450314L)
                .withExtendedCapacitySizeTiB(4001606914042880577L);
        model = BinaryData.fromObject(model).toObject(ElasticSanInner.class);
        Assertions.assertEquals("bzhfepgzgqexz", model.location());
        Assertions.assertEquals("xscpaierhhbc", model.tags().get("glu"));
        Assertions.assertEquals(SkuName.PREMIUM_LRS, model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("wbxgjvt", model.availabilityZones().get(0));
        Assertions.assertEquals(6415098811593450314L, model.baseSizeTiB());
        Assertions.assertEquals(4001606914042880577L, model.extendedCapacitySizeTiB());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
