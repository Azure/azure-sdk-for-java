// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elasticsan.fluent.models.ElasticSanInner;
import com.azure.resourcemanager.elasticsan.models.AutoScalePolicyEnforcement;
import com.azure.resourcemanager.elasticsan.models.AutoScaleProperties;
import com.azure.resourcemanager.elasticsan.models.PublicNetworkAccess;
import com.azure.resourcemanager.elasticsan.models.ScaleUpProperties;
import com.azure.resourcemanager.elasticsan.models.Sku;
import com.azure.resourcemanager.elasticsan.models.SkuName;
import com.azure.resourcemanager.elasticsan.models.SkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ElasticSanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ElasticSanInner model = BinaryData.fromString(
            "{\"properties\":{\"sku\":{\"name\":\"Premium_ZRS\",\"tier\":\"Premium\"},\"availabilityZones\":[\"zvgnwzs\",\"mglzufcy\",\"kohdbiha\",\"ufhfcbjysa\"],\"provisioningState\":\"Failed\",\"baseSizeTiB\":3872828993572496583,\"extendedCapacitySizeTiB\":5112949672295507633,\"totalVolumeSizeGiB\":2906295825403594883,\"volumeGroupCount\":8979181371698395815,\"totalIops\":1515673069471944511,\"totalMBps\":2075889314875474362,\"totalSizeTiB\":3372129920897146496,\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Pending\",\"privateEndpoint\":{\"id\":\"ivyqniwbybrkxvd\"},\"privateLinkServiceConnectionState\":{\"status\":\"Failed\",\"description\":\"rtfw\",\"actionsRequired\":\"k\"},\"groupIds\":[\"udccsnhsjc\",\"yejhk\",\"yhtnapczwlokjye\"]},\"id\":\"kvnipjoxz\",\"name\":\"nchgej\",\"type\":\"podmailzydehojwy\"}],\"publicNetworkAccess\":\"Disabled\",\"autoScaleProperties\":{\"scaleUpProperties\":{\"unusedSizeTiB\":6489916514804709767,\"increaseCapacityUnitByTiB\":3546974038977071607,\"capacityUnitScaleUpLimitTiB\":795979604807829548,\"autoScalePolicyEnforcement\":\"Disabled\"}}},\"location\":\"sprozvcput\",\"tags\":{\"atscmd\":\"vwmf\",\"zkrwfn\":\"pjhulsuuvmkj\"},\"id\":\"iodjp\",\"name\":\"lwejdpv\",\"type\":\"ryo\"}")
            .toObject(ElasticSanInner.class);
        Assertions.assertEquals("sprozvcput", model.location());
        Assertions.assertEquals("vwmf", model.tags().get("atscmd"));
        Assertions.assertEquals(SkuName.PREMIUM_ZRS, model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("zvgnwzs", model.availabilityZones().get(0));
        Assertions.assertEquals(3872828993572496583L, model.baseSizeTiB());
        Assertions.assertEquals(5112949672295507633L, model.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals(6489916514804709767L, model.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(3546974038977071607L,
            model.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(795979604807829548L,
            model.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.DISABLED,
            model.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ElasticSanInner model = new ElasticSanInner().withLocation("sprozvcput")
            .withTags(mapOf("atscmd", "vwmf", "zkrwfn", "pjhulsuuvmkj"))
            .withSku(new Sku().withName(SkuName.PREMIUM_ZRS).withTier(SkuTier.PREMIUM))
            .withAvailabilityZones(Arrays.asList("zvgnwzs", "mglzufcy", "kohdbiha", "ufhfcbjysa"))
            .withBaseSizeTiB(3872828993572496583L)
            .withExtendedCapacitySizeTiB(5112949672295507633L)
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withAutoScaleProperties(new AutoScaleProperties()
                .withScaleUpProperties(new ScaleUpProperties().withUnusedSizeTiB(6489916514804709767L)
                    .withIncreaseCapacityUnitByTiB(3546974038977071607L)
                    .withCapacityUnitScaleUpLimitTiB(795979604807829548L)
                    .withAutoScalePolicyEnforcement(AutoScalePolicyEnforcement.DISABLED)));
        model = BinaryData.fromObject(model).toObject(ElasticSanInner.class);
        Assertions.assertEquals("sprozvcput", model.location());
        Assertions.assertEquals("vwmf", model.tags().get("atscmd"));
        Assertions.assertEquals(SkuName.PREMIUM_ZRS, model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("zvgnwzs", model.availabilityZones().get(0));
        Assertions.assertEquals(3872828993572496583L, model.baseSizeTiB());
        Assertions.assertEquals(5112949672295507633L, model.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals(6489916514804709767L, model.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(3546974038977071607L,
            model.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(795979604807829548L,
            model.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.DISABLED,
            model.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
