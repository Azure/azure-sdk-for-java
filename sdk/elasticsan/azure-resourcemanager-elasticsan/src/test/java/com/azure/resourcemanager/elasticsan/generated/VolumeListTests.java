// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elasticsan.fluent.models.VolumeInner;
import com.azure.resourcemanager.elasticsan.models.SourceCreationData;
import com.azure.resourcemanager.elasticsan.models.VolumeCreateOption;
import com.azure.resourcemanager.elasticsan.models.VolumeList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VolumeListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"volumeId\":\"gxywpmue\",\"creationData\":{\"createSource\":\"None\",\"sourceUri\":\"fqkquj\"},\"sizeGiB\":3292485781669976103,\"storageTarget\":{\"targetIqn\":\"onobglaocqx\",\"targetPortalHostname\":\"cmgyud\",\"targetPortalPort\":1613065996,\"provisioningState\":\"Updating\",\"status\":\"Stopped\"}},\"id\":\"rxv\",\"name\":\"fudwpznt\",\"type\":\"hdzhlrqj\"},{\"properties\":{\"volumeId\":\"ck\",\"creationData\":{\"createSource\":\"None\",\"sourceUri\":\"xsbkyvpyca\"},\"sizeGiB\":1835147591912684740,\"storageTarget\":{\"targetIqn\":\"zka\",\"targetPortalHostname\":\"uwbc\",\"targetPortalPort\":946722582,\"provisioningState\":\"Deleting\",\"status\":\"Healthy\"}},\"id\":\"hseyvju\",\"name\":\"rts\",\"type\":\"hspkdeemao\"},{\"properties\":{\"volumeId\":\"xagkvtmelmqkrh\",\"creationData\":{\"createSource\":\"None\",\"sourceUri\":\"uahaquhcdhmd\"},\"sizeGiB\":9171481587703972041,\"storageTarget\":{\"targetIqn\":\"xqpvfadmw\",\"targetPortalHostname\":\"crgvxpvgom\",\"targetPortalPort\":1121960551,\"provisioningState\":\"Deleting\",\"status\":\"Unknown\"}},\"id\":\"wbnb\",\"name\":\"e\",\"type\":\"dawkzbali\"},{\"properties\":{\"volumeId\":\"rqhakauha\",\"creationData\":{\"createSource\":\"None\",\"sourceUri\":\"xosow\"},\"sizeGiB\":4305995232309135618,\"storageTarget\":{\"targetIqn\":\"i\",\"targetPortalHostname\":\"ooxdjebwpuc\",\"targetPortalPort\":1438023413,\"provisioningState\":\"Creating\",\"status\":\"Updating\"}},\"id\":\"vmeueci\",\"name\":\"yhz\",\"type\":\"euojgjrwju\"}],\"nextLink\":\"otwmcdyt\"}")
                .toObject(VolumeList.class);
        Assertions.assertEquals(VolumeCreateOption.NONE, model.value().get(0).creationData().createSource());
        Assertions.assertEquals("fqkquj", model.value().get(0).creationData().sourceUri());
        Assertions.assertEquals(3292485781669976103L, model.value().get(0).sizeGiB());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeList model =
            new VolumeList()
                .withValue(
                    Arrays
                        .asList(
                            new VolumeInner()
                                .withCreationData(
                                    new SourceCreationData()
                                        .withCreateSource(VolumeCreateOption.NONE)
                                        .withSourceUri("fqkquj"))
                                .withSizeGiB(3292485781669976103L),
                            new VolumeInner()
                                .withCreationData(
                                    new SourceCreationData()
                                        .withCreateSource(VolumeCreateOption.NONE)
                                        .withSourceUri("xsbkyvpyca"))
                                .withSizeGiB(1835147591912684740L),
                            new VolumeInner()
                                .withCreationData(
                                    new SourceCreationData()
                                        .withCreateSource(VolumeCreateOption.NONE)
                                        .withSourceUri("uahaquhcdhmd"))
                                .withSizeGiB(9171481587703972041L),
                            new VolumeInner()
                                .withCreationData(
                                    new SourceCreationData()
                                        .withCreateSource(VolumeCreateOption.NONE)
                                        .withSourceUri("xosow"))
                                .withSizeGiB(4305995232309135618L)));
        model = BinaryData.fromObject(model).toObject(VolumeList.class);
        Assertions.assertEquals(VolumeCreateOption.NONE, model.value().get(0).creationData().createSource());
        Assertions.assertEquals("fqkquj", model.value().get(0).creationData().sourceUri());
        Assertions.assertEquals(3292485781669976103L, model.value().get(0).sizeGiB());
    }
}
