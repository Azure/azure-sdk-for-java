// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.elasticsan.fluent.models.VolumeGroupInner;
import com.azure.resourcemanager.elasticsan.models.Action;
import com.azure.resourcemanager.elasticsan.models.EncryptionType;
import com.azure.resourcemanager.elasticsan.models.NetworkRuleSet;
import com.azure.resourcemanager.elasticsan.models.StorageTargetType;
import com.azure.resourcemanager.elasticsan.models.VirtualNetworkRule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VolumeGroupInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeGroupInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Succeeded\",\"protocolType\":\"None\",\"encryption\":\"EncryptionAtRestWithPlatformKey\",\"networkAcls\":{\"virtualNetworkRules\":[{\"id\":\"gidyjrrf\",\"action\":\"Allow\",\"state\":\"provisioning\"},{\"id\":\"v\",\"action\":\"Allow\",\"state\":\"succeeded\"}]},\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{\"id\":\"cohslkev\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"zfbuhf\",\"actionsRequired\":\"faxkffeii\"},\"groupIds\":[\"vmezy\",\"shxmzsbbzoggigrx\",\"burvjxxjnspy\",\"ptkoenkoukn\"]},\"id\":\"dwtiukbldngkp\",\"name\":\"cipazyxoegukgjnp\",\"type\":\"ucgygevqz\"},{\"properties\":{\"provisioningState\":\"Invalid\",\"privateEndpoint\":{\"id\":\"rbpizc\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"sdpydnfyhxdeoejz\",\"actionsRequired\":\"w\"},\"groupIds\":[\"jttgzf\",\"ishc\",\"khaj\"]},\"id\":\"yeamdphagalpb\",\"name\":\"xw\",\"type\":\"ipwhonowk\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"privateEndpoint\":{\"id\":\"nkixzbinj\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"tmryw\",\"actionsRequired\":\"zoqftiyqzrnkcqvy\"},\"groupIds\":[\"hzls\",\"cohoq\",\"nwvlryavwhheunmm\"]},\"id\":\"gyxzk\",\"name\":\"noc\",\"type\":\"koklya\"}]},\"id\":\"conuqszfkbeype\",\"name\":\"rmjmwvvjektc\",\"type\":\"senhwlrs\"}")
                .toObject(VolumeGroupInner.class);
        Assertions.assertEquals(StorageTargetType.NONE, model.protocolType());
        Assertions.assertEquals(EncryptionType.ENCRYPTION_AT_REST_WITH_PLATFORM_KEY, model.encryption());
        Assertions
            .assertEquals("gidyjrrf", model.networkAcls().virtualNetworkRules().get(0).virtualNetworkResourceId());
        Assertions.assertEquals(Action.ALLOW, model.networkAcls().virtualNetworkRules().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeGroupInner model =
            new VolumeGroupInner()
                .withProtocolType(StorageTargetType.NONE)
                .withEncryption(EncryptionType.ENCRYPTION_AT_REST_WITH_PLATFORM_KEY)
                .withNetworkAcls(
                    new NetworkRuleSet()
                        .withVirtualNetworkRules(
                            Arrays
                                .asList(
                                    new VirtualNetworkRule()
                                        .withVirtualNetworkResourceId("gidyjrrf")
                                        .withAction(Action.ALLOW),
                                    new VirtualNetworkRule()
                                        .withVirtualNetworkResourceId("v")
                                        .withAction(Action.ALLOW))));
        model = BinaryData.fromObject(model).toObject(VolumeGroupInner.class);
        Assertions.assertEquals(StorageTargetType.NONE, model.protocolType());
        Assertions.assertEquals(EncryptionType.ENCRYPTION_AT_REST_WITH_PLATFORM_KEY, model.encryption());
        Assertions
            .assertEquals("gidyjrrf", model.networkAcls().virtualNetworkRules().get(0).virtualNetworkResourceId());
        Assertions.assertEquals(Action.ALLOW, model.networkAcls().virtualNetworkRules().get(0).action());
    }
}
