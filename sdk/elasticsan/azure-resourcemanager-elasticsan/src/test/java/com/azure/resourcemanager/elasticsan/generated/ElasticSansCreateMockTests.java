// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elasticsan.ElasticSanManager;
import com.azure.resourcemanager.elasticsan.models.AutoScalePolicyEnforcement;
import com.azure.resourcemanager.elasticsan.models.AutoScaleProperties;
import com.azure.resourcemanager.elasticsan.models.ElasticSan;
import com.azure.resourcemanager.elasticsan.models.PublicNetworkAccess;
import com.azure.resourcemanager.elasticsan.models.ScaleUpProperties;
import com.azure.resourcemanager.elasticsan.models.Sku;
import com.azure.resourcemanager.elasticsan.models.SkuName;
import com.azure.resourcemanager.elasticsan.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ElasticSansCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"sku\":{\"name\":\"Premium_LRS\",\"tier\":\"Premium\"},\"availabilityZones\":[\"m\"],\"provisioningState\":\"Succeeded\",\"baseSizeTiB\":6230833948035893197,\"extendedCapacitySizeTiB\":4214318424696408761,\"totalVolumeSizeGiB\":6373100334520502783,\"volumeGroupCount\":7225316446060950851,\"totalIops\":6679760626312548131,\"totalMBps\":2336280278792638515,\"totalSizeTiB\":4790240939770837417,\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"groupIds\":[\"ymareqnajxqugj\",\"ky\"]},\"id\":\"beddgssofw\",\"name\":\"mzqa\",\"type\":\"krmnjijpxacqqud\"}],\"publicNetworkAccess\":\"Disabled\",\"autoScaleProperties\":{\"scaleUpProperties\":{\"unusedSizeTiB\":3011567239664455561,\"increaseCapacityUnitByTiB\":6866266002742142727,\"capacityUnitScaleUpLimitTiB\":3453666268896237887,\"autoScalePolicyEnforcement\":\"None\"}}},\"location\":\"imrzrtuzqog\",\"tags\":{\"wmewzsyy\":\"nevfdnw\",\"judpfrxt\":\"euzsoi\",\"paxh\":\"thzvaytdwkqbrqu\"},\"id\":\"xiilivpdtiirqt\",\"name\":\"qoaxoruzfgs\",\"type\":\"uyfxrxxleptramxj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticSanManager manager = ElasticSanManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ElasticSan response = manager.elasticSans()
            .define("dmtnc")
            .withRegion("nwabfatkldd")
            .withExistingResourceGroup("lwwrl")
            .withSku(new Sku().withName(SkuName.PREMIUM_LRS).withTier(SkuTier.PREMIUM))
            .withBaseSizeTiB(6389050150697807283L)
            .withExtendedCapacitySizeTiB(5424935319442327175L)
            .withTags(mapOf("youlp", "hwuaanozjosp", "xitc", "rvxaglrvimjwosy", "ekkezzikhlyfjh", "kfcktqum"))
            .withAvailabilityZones(Arrays.asList("lxdy", "gsyocogj"))
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withAutoScaleProperties(new AutoScaleProperties()
                .withScaleUpProperties(new ScaleUpProperties().withUnusedSizeTiB(4458311958924430551L)
                    .withIncreaseCapacityUnitByTiB(1107964176928344291L)
                    .withCapacityUnitScaleUpLimitTiB(3578444818865680080L)
                    .withAutoScalePolicyEnforcement(AutoScalePolicyEnforcement.NONE)))
            .create();

        Assertions.assertEquals("imrzrtuzqog", response.location());
        Assertions.assertEquals("nevfdnw", response.tags().get("wmewzsyy"));
        Assertions.assertEquals(SkuName.PREMIUM_LRS, response.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.sku().tier());
        Assertions.assertEquals("m", response.availabilityZones().get(0));
        Assertions.assertEquals(6230833948035893197L, response.baseSizeTiB());
        Assertions.assertEquals(4214318424696408761L, response.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.publicNetworkAccess());
        Assertions.assertEquals(3011567239664455561L,
            response.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(6866266002742142727L,
            response.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(3453666268896237887L,
            response.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.NONE,
            response.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
