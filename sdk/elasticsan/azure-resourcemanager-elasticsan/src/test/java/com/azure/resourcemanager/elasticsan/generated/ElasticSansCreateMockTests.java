// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elasticsan.ElasticSanManager;
import com.azure.resourcemanager.elasticsan.models.AutoScalePolicyEnforcement;
import com.azure.resourcemanager.elasticsan.models.AutoScaleProperties;
import com.azure.resourcemanager.elasticsan.models.ElasticSan;
import com.azure.resourcemanager.elasticsan.models.PublicNetworkAccess;
import com.azure.resourcemanager.elasticsan.models.ScaleUpProperties;
import com.azure.resourcemanager.elasticsan.models.Sku;
import com.azure.resourcemanager.elasticsan.models.SkuName;
import com.azure.resourcemanager.elasticsan.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ElasticSansCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"sku\":{\"name\":\"Premium_ZRS\",\"tier\":\"Premium\"},\"availabilityZones\":[\"vvqfovljxyws\",\"w\",\"yrs\",\"dsytgadgvr\"],\"provisioningState\":\"Succeeded\",\"baseSizeTiB\":1506102374253246749,\"extendedCapacitySizeTiB\":387752028941383088,\"totalVolumeSizeGiB\":2560405099971295143,\"volumeGroupCount\":5418047259495493586,\"totalIops\":1125965714665499028,\"totalMBps\":6720110805650369040,\"totalSizeTiB\":8598185540275371348,\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Pending\",\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"groupIds\":[\"fpubjibwwi\",\"tohqkvpuvksgp\",\"saknynfsyn\"]},\"id\":\"ph\",\"name\":\"op\",\"type\":\"odlqiyntor\"},{\"properties\":{\"provisioningState\":\"Deleted\",\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"groupIds\":[\"sjswsrms\",\"yzrpzbchckqqzq\"]},\"id\":\"xiy\",\"name\":\"uiizynke\",\"type\":\"yatrwy\"},{\"properties\":{\"provisioningState\":\"Pending\",\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"groupIds\":[\"yhwitsmypyynpcdp\"]},\"id\":\"nzgmwznmabik\",\"name\":\"sorgj\",\"type\":\"xbldtlwwrlkdmtn\"}],\"publicNetworkAccess\":\"Enabled\",\"autoScaleProperties\":{\"scaleUpProperties\":{\"unusedSizeTiB\":8337866342462556766,\"increaseCapacityUnitByTiB\":192607375683001787,\"capacityUnitScaleUpLimitTiB\":8614672168967170032,\"autoScalePolicyEnforcement\":\"None\"}}},\"location\":\"ogjltdtbnnhad\",\"tags\":{\"qgxqquezikyw\":\"rkvcikhnvpa\",\"lla\":\"gxk\",\"z\":\"melwuipiccjz\"},\"id\":\"v\",\"name\":\"vvcnayr\",\"type\":\"yrnxxmueedn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticSanManager manager = ElasticSanManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ElasticSan response = manager.elasticSans()
            .define("yhrfouyftaakcpw")
            .withRegion("xwbpokulpiuj")
            .withExistingResourceGroup("modfvuefywsbpfvm")
            .withSku(new Sku().withName(SkuName.PREMIUM_LRS).withTier(SkuTier.PREMIUM))
            .withBaseSizeTiB(2080717942090846717L)
            .withExtendedCapacitySizeTiB(4393936245762938181L)
            .withTags(mapOf("byuqerpqlp", "sipqii", "auvfbtkuwhhmhyk", "wcciuqgbdbu"))
            .withAvailabilityZones(Arrays.asList("mnubexkpzksmond", "mquxvypo", "gkopkwhojvpajqgx", "smocmbq"))
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withAutoScaleProperties(new AutoScaleProperties()
                .withScaleUpProperties(new ScaleUpProperties().withUnusedSizeTiB(5468231860855854569L)
                    .withIncreaseCapacityUnitByTiB(2211152751439125595L)
                    .withCapacityUnitScaleUpLimitTiB(9149907061758969702L)
                    .withAutoScalePolicyEnforcement(AutoScalePolicyEnforcement.NONE)))
            .create();

        Assertions.assertEquals("ogjltdtbnnhad", response.location());
        Assertions.assertEquals("rkvcikhnvpa", response.tags().get("qgxqquezikyw"));
        Assertions.assertEquals(SkuName.PREMIUM_ZRS, response.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.sku().tier());
        Assertions.assertEquals("vvqfovljxyws", response.availabilityZones().get(0));
        Assertions.assertEquals(1506102374253246749L, response.baseSizeTiB());
        Assertions.assertEquals(387752028941383088L, response.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals(8337866342462556766L,
            response.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(192607375683001787L,
            response.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(8614672168967170032L,
            response.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.NONE,
            response.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
