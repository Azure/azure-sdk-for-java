// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elasticsan.ElasticSanManager;
import com.azure.resourcemanager.elasticsan.models.ManagedByInfo;
import com.azure.resourcemanager.elasticsan.models.SourceCreationData;
import com.azure.resourcemanager.elasticsan.models.Volume;
import com.azure.resourcemanager.elasticsan.models.VolumeCreateOption;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VolumesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"volumeId\":\"msweypqwdxggicc\",\"creationData\":{\"createSource\":\"DiskSnapshot\",\"sourceId\":\"uexmkttlst\"},\"sizeGiB\":7893862569434986458,\"storageTarget\":{\"targetIqn\":\"emhzrncsdtc\",\"targetPortalHostname\":\"siypbs\",\"targetPortalPort\":1861224364,\"provisioningState\":\"Succeeded\",\"status\":\"Invalid\"},\"managedBy\":{\"resourceId\":\"eadcygqukyhejhz\"},\"provisioningState\":\"Succeeded\"},\"id\":\"fpel\",\"name\":\"lppvksrpq\",\"type\":\"ujzra\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticSanManager manager = ElasticSanManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Volume response = manager.volumes()
            .define("bminrfdwoyuhhzi")
            .withExistingVolumegroup("qmoa", "ufgmjzrwrdg", "twaenuuzko")
            .withSizeGiB(2003517513510777740L)
            .withCreationData(
                new SourceCreationData().withCreateSource(VolumeCreateOption.VOLUME_SNAPSHOT).withSourceId("hoftr"))
            .withManagedBy(new ManagedByInfo().withResourceId("hka"))
            .create();

        Assertions.assertEquals(VolumeCreateOption.DISK_SNAPSHOT, response.creationData().createSource());
        Assertions.assertEquals("uexmkttlst", response.creationData().sourceId());
        Assertions.assertEquals(7893862569434986458L, response.sizeGiB());
        Assertions.assertEquals("eadcygqukyhejhz", response.managedBy().resourceId());
    }
}
