// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.springappdiscovery.SpringAppDiscoveryManager;
import com.azure.resourcemanager.springappdiscovery.models.ProvisioningState;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesModel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SpringbootsitesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"masterSiteId\":\"jrmvdjwzrlo\",\"migrateProjectId\":\"clwhijcoejctbz\",\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"y\",\"name\":\"kbfkg\"},\"location\":\"dkexxppofm\",\"tags\":{\"jpgd\":\"c\"},\"id\":\"toc\",\"name\":\"j\",\"type\":\"hvpmoue\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SpringAppDiscoveryManager manager = SpringAppDiscoveryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SpringbootsitesModel response = manager.springbootsites()
            .getByResourceGroupWithResponse("mexgstxgcp", "dg", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dkexxppofm", response.location());
        Assertions.assertEquals("c", response.tags().get("jpgd"));
        Assertions.assertEquals("jrmvdjwzrlo", response.properties().masterSiteId());
        Assertions.assertEquals("clwhijcoejctbz", response.properties().migrateProjectId());
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("y", response.extendedLocation().type());
        Assertions.assertEquals("kbfkg", response.extendedLocation().name());
    }
}
