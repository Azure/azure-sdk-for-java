// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.springappdiscovery.fluent.models.SpringbootsitesModelInner;
import com.azure.resourcemanager.springappdiscovery.models.ProvisioningState;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesModelExtendedLocation;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SpringbootsitesModelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpringbootsitesModelInner model = BinaryData.fromString(
            "{\"properties\":{\"masterSiteId\":\"hq\",\"migrateProjectId\":\"gjxpybczmehmt\",\"provisioningState\":\"Failed\"},\"extendedLocation\":{\"type\":\"phrupidgsybbejhp\",\"name\":\"ycm\"},\"location\":\"ao\",\"tags\":{\"htbmuf\":\"xbmtqioqjz\",\"rxybqsoq\":\"ownoizhw\",\"pdznrbtcqqjnqgl\":\"jgkdmbpazlobcu\"},\"id\":\"qgn\",\"name\":\"foooj\",\"type\":\"wifsq\"}")
            .toObject(SpringbootsitesModelInner.class);
        Assertions.assertEquals("ao", model.location());
        Assertions.assertEquals("xbmtqioqjz", model.tags().get("htbmuf"));
        Assertions.assertEquals("hq", model.properties().masterSiteId());
        Assertions.assertEquals("gjxpybczmehmt", model.properties().migrateProjectId());
        Assertions.assertEquals(ProvisioningState.FAILED, model.properties().provisioningState());
        Assertions.assertEquals("phrupidgsybbejhp", model.extendedLocation().type());
        Assertions.assertEquals("ycm", model.extendedLocation().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpringbootsitesModelInner model = new SpringbootsitesModelInner().withLocation("ao")
            .withTags(mapOf("htbmuf", "xbmtqioqjz", "rxybqsoq", "ownoizhw", "pdznrbtcqqjnqgl", "jgkdmbpazlobcu"))
            .withProperties(new SpringbootsitesProperties().withMasterSiteId("hq").withMigrateProjectId("gjxpybczmehmt")
                .withProvisioningState(ProvisioningState.FAILED))
            .withExtendedLocation(
                new SpringbootsitesModelExtendedLocation().withType("phrupidgsybbejhp").withName("ycm"));
        model = BinaryData.fromObject(model).toObject(SpringbootsitesModelInner.class);
        Assertions.assertEquals("ao", model.location());
        Assertions.assertEquals("xbmtqioqjz", model.tags().get("htbmuf"));
        Assertions.assertEquals("hq", model.properties().masterSiteId());
        Assertions.assertEquals("gjxpybczmehmt", model.properties().migrateProjectId());
        Assertions.assertEquals(ProvisioningState.FAILED, model.properties().provisioningState());
        Assertions.assertEquals("phrupidgsybbejhp", model.extendedLocation().type());
        Assertions.assertEquals("ycm", model.extendedLocation().name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
