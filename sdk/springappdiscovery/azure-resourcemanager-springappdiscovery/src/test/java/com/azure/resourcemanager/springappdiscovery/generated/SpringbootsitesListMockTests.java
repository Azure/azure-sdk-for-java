// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.springappdiscovery.SpringAppDiscoveryManager;
import com.azure.resourcemanager.springappdiscovery.models.ProvisioningState;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesModel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SpringbootsitesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"masterSiteId\":\"hzrvqd\",\"migrateProjectId\":\"bhj\",\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"h\",\"name\":\"fbowskanyk\"},\"location\":\"lcuiywgqywgndr\",\"tags\":{\"fvm\":\"hzgpphrcgyncocpe\",\"bmqj\":\"coofsxlzev\",\"lzu\":\"abcypmivk\"},\"id\":\"ccfwnfnbacfion\",\"name\":\"ebxetqgtzxdp\",\"type\":\"qbqqwxr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SpringAppDiscoveryManager manager = SpringAppDiscoveryManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SpringbootsitesModel> response = manager.springbootsites().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lcuiywgqywgndr", response.iterator().next().location());
        Assertions.assertEquals("hzgpphrcgyncocpe", response.iterator().next().tags().get("fvm"));
        Assertions.assertEquals("hzrvqd", response.iterator().next().properties().masterSiteId());
        Assertions.assertEquals("bhj", response.iterator().next().properties().migrateProjectId());
        Assertions.assertEquals(ProvisioningState.SUCCEEDED,
            response.iterator().next().properties().provisioningState());
        Assertions.assertEquals("h", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("fbowskanyk", response.iterator().next().extendedLocation().name());
    }
}
