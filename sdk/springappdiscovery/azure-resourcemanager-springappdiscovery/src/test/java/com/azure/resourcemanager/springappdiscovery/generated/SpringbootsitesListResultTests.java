// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.springappdiscovery.fluent.models.SpringbootsitesModelInner;
import com.azure.resourcemanager.springappdiscovery.models.ProvisioningState;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesListResult;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesModelExtendedLocation;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SpringbootsitesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpringbootsitesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"masterSiteId\":\"symglzufcyz\",\"migrateProjectId\":\"hdbihan\",\"provisioningState\":\"Unknown\"},\"extendedLocation\":{\"type\":\"bj\",\"name\":\"a\"},\"location\":\"th\",\"tags\":{\"npqxuh\":\"abifpikxwczbys\"},\"id\":\"vyq\",\"name\":\"iwbybrkxvdumjg\",\"type\":\"tfwvukxgaudc\"},{\"properties\":{\"masterSiteId\":\"h\",\"migrateProjectId\":\"cnyejhkryhtnapcz\",\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"yemkkvnip\",\"name\":\"xzjnchgejs\"},\"location\":\"dmailzydehojw\",\"tags\":{\"ixjsprozvcputeg\":\"uxinpmqnjaq\",\"atscmd\":\"vwmf\",\"zkrwfn\":\"pjhulsuuvmkj\"},\"id\":\"iodjp\",\"name\":\"lwejdpv\",\"type\":\"ryo\"}],\"nextLink\":\"soacctazakl\"}")
            .toObject(SpringbootsitesListResult.class);
        Assertions.assertEquals("th", model.value().get(0).location());
        Assertions.assertEquals("abifpikxwczbys", model.value().get(0).tags().get("npqxuh"));
        Assertions.assertEquals("symglzufcyz", model.value().get(0).properties().masterSiteId());
        Assertions.assertEquals("hdbihan", model.value().get(0).properties().migrateProjectId());
        Assertions.assertEquals(ProvisioningState.UNKNOWN, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("bj", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("a", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("soacctazakl", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpringbootsitesListResult model = new SpringbootsitesListResult()
            .withValue(Arrays.asList(
                new SpringbootsitesModelInner().withLocation("th").withTags(mapOf("npqxuh", "abifpikxwczbys"))
                    .withProperties(new SpringbootsitesProperties().withMasterSiteId("symglzufcyz")
                        .withMigrateProjectId("hdbihan").withProvisioningState(ProvisioningState.UNKNOWN))
                    .withExtendedLocation(new SpringbootsitesModelExtendedLocation().withType("bj").withName("a")),
                new SpringbootsitesModelInner().withLocation("dmailzydehojw")
                    .withTags(mapOf("ixjsprozvcputeg", "uxinpmqnjaq", "atscmd", "vwmf", "zkrwfn", "pjhulsuuvmkj"))
                    .withProperties(new SpringbootsitesProperties().withMasterSiteId("h")
                        .withMigrateProjectId("cnyejhkryhtnapcz").withProvisioningState(ProvisioningState.SUCCEEDED))
                    .withExtendedLocation(
                        new SpringbootsitesModelExtendedLocation().withType("yemkkvnip").withName("xzjnchgejs"))))
            .withNextLink("soacctazakl");
        model = BinaryData.fromObject(model).toObject(SpringbootsitesListResult.class);
        Assertions.assertEquals("th", model.value().get(0).location());
        Assertions.assertEquals("abifpikxwczbys", model.value().get(0).tags().get("npqxuh"));
        Assertions.assertEquals("symglzufcyz", model.value().get(0).properties().masterSiteId());
        Assertions.assertEquals("hdbihan", model.value().get(0).properties().migrateProjectId());
        Assertions.assertEquals(ProvisioningState.UNKNOWN, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("bj", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("a", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("soacctazakl", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
