// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SpringbootappsPropertiesInstancesItem model.
 */
@Fluent
public final class SpringbootappsPropertiesInstancesItem
    implements JsonSerializable<SpringbootappsPropertiesInstancesItem> {
    /*
     * The machine ARM resource Id of this app instance
     */
    private String machineArmId;

    /*
     * The instance count of this app instance
     */
    private Integer instanceCount;

    /*
     * The jvm heap memory allocated of this app instance
     */
    private Integer jvmMemoryInMB;

    /**
     * Creates an instance of SpringbootappsPropertiesInstancesItem class.
     */
    public SpringbootappsPropertiesInstancesItem() {
    }

    /**
     * Get the machineArmId property: The machine ARM resource Id of this app instance.
     * 
     * @return the machineArmId value.
     */
    public String machineArmId() {
        return this.machineArmId;
    }

    /**
     * Set the machineArmId property: The machine ARM resource Id of this app instance.
     * 
     * @param machineArmId the machineArmId value to set.
     * @return the SpringbootappsPropertiesInstancesItem object itself.
     */
    public SpringbootappsPropertiesInstancesItem withMachineArmId(String machineArmId) {
        this.machineArmId = machineArmId;
        return this;
    }

    /**
     * Get the instanceCount property: The instance count of this app instance.
     * 
     * @return the instanceCount value.
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }

    /**
     * Set the instanceCount property: The instance count of this app instance.
     * 
     * @param instanceCount the instanceCount value to set.
     * @return the SpringbootappsPropertiesInstancesItem object itself.
     */
    public SpringbootappsPropertiesInstancesItem withInstanceCount(Integer instanceCount) {
        this.instanceCount = instanceCount;
        return this;
    }

    /**
     * Get the jvmMemoryInMB property: The jvm heap memory allocated of this app instance.
     * 
     * @return the jvmMemoryInMB value.
     */
    public Integer jvmMemoryInMB() {
        return this.jvmMemoryInMB;
    }

    /**
     * Set the jvmMemoryInMB property: The jvm heap memory allocated of this app instance.
     * 
     * @param jvmMemoryInMB the jvmMemoryInMB value to set.
     * @return the SpringbootappsPropertiesInstancesItem object itself.
     */
    public SpringbootappsPropertiesInstancesItem withJvmMemoryInMB(Integer jvmMemoryInMB) {
        this.jvmMemoryInMB = jvmMemoryInMB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (machineArmId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineArmId in model SpringbootappsPropertiesInstancesItem"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SpringbootappsPropertiesInstancesItem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("machineArmId", this.machineArmId);
        jsonWriter.writeNumberField("instanceCount", this.instanceCount);
        jsonWriter.writeNumberField("jvmMemoryInMB", this.jvmMemoryInMB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpringbootappsPropertiesInstancesItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpringbootappsPropertiesInstancesItem if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SpringbootappsPropertiesInstancesItem.
     */
    public static SpringbootappsPropertiesInstancesItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SpringbootappsPropertiesInstancesItem deserializedSpringbootappsPropertiesInstancesItem
                = new SpringbootappsPropertiesInstancesItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("machineArmId".equals(fieldName)) {
                    deserializedSpringbootappsPropertiesInstancesItem.machineArmId = reader.getString();
                } else if ("instanceCount".equals(fieldName)) {
                    deserializedSpringbootappsPropertiesInstancesItem.instanceCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("jvmMemoryInMB".equals(fieldName)) {
                    deserializedSpringbootappsPropertiesInstancesItem.jvmMemoryInMB
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpringbootappsPropertiesInstancesItem;
        });
    }
}
