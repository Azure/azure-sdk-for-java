// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.springappdiscovery.fluent.models.SpringbootsitesModelInner;
import com.azure.resourcemanager.springappdiscovery.models.SpringbootsitesPatch;

/**
 * An instance of this class provides access to all the operations defined in SpringbootsitesClient.
 */
public interface SpringbootsitesClient {
    /**
     * Get a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootsites resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootsitesModelInner> getByResourceGroupWithResponse(String resourceGroupName,
        String springbootsitesName, Context context);

    /**
     * Get a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a springbootsites resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootsitesModelInner getByResourceGroup(String resourceGroupName, String springbootsitesName);

    /**
     * Create a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootsites Create a springbootsites payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites envelope resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SpringbootsitesModelInner> createOrUpdateWithResponse(String resourceGroupName, String springbootsitesName,
        SpringbootsitesModelInner springbootsites, Context context);

    /**
     * Create a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootsites Create a springbootsites payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootsitesModelInner createOrUpdate(String resourceGroupName, String springbootsitesName,
        SpringbootsitesModelInner springbootsites);

    /**
     * Delete a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String springbootsitesName);

    /**
     * Delete a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String springbootsitesName,
        Context context);

    /**
     * Delete a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String springbootsitesName);

    /**
     * Delete a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String springbootsitesName, Context context);

    /**
     * Update a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootsites Update a springbootsites payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the springbootsites envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SpringbootsitesModelInner>, SpringbootsitesModelInner> beginUpdate(String resourceGroupName,
        String springbootsitesName, SpringbootsitesPatch springbootsites);

    /**
     * Update a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootsites Update a springbootsites payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the springbootsites envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SpringbootsitesModelInner>, SpringbootsitesModelInner> beginUpdate(String resourceGroupName,
        String springbootsitesName, SpringbootsitesPatch springbootsites, Context context);

    /**
     * Update a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootsites Update a springbootsites payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootsitesModelInner update(String resourceGroupName, String springbootsitesName,
        SpringbootsitesPatch springbootsites);

    /**
     * Update a springbootsites resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param springbootsites Update a springbootsites payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites envelope resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SpringbootsitesModelInner update(String resourceGroupName, String springbootsitesName,
        SpringbootsitesPatch springbootsites, Context context);

    /**
     * Trigger refresh springbootsites action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginTriggerRefreshSite(String resourceGroupName, String springbootsitesName);

    /**
     * Trigger refresh springbootsites action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginTriggerRefreshSite(String resourceGroupName, String springbootsitesName,
        Context context);

    /**
     * Trigger refresh springbootsites action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void triggerRefreshSite(String resourceGroupName, String springbootsitesName);

    /**
     * Trigger refresh springbootsites action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param springbootsitesName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void triggerRefreshSite(String resourceGroupName, String springbootsitesName, Context context);

    /**
     * List springbootsites resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootsitesModelInner> listByResourceGroup(String resourceGroupName);

    /**
     * List springbootsites resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootsitesModelInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List springbootsites resource by subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootsitesModelInner> list();

    /**
     * List springbootsites resource by subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootsites list resource definition as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SpringbootsitesModelInner> list(Context context);
}
