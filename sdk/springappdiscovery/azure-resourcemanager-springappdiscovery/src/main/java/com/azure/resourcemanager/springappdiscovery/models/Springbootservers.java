// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Springbootservers.
 */
public interface Springbootservers {
    /**
     * List springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    Response<SpringbootserversModel> getWithResponse(String resourceGroupName, String siteName,
        String springbootserversName, Context context);

    /**
     * List springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition.
     */
    SpringbootserversModel get(String resourceGroupName, String siteName, String springbootserversName);

    /**
     * Delete springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String siteName, String springbootserversName);

    /**
     * Delete springbootservers resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The springbootsites name.
     * @param springbootserversName The springbootservers name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String siteName, String springbootserversName, Context context);

    /**
     * List springbootservers resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SpringbootserversModel> listByResourceGroup(String resourceGroupName, String siteName);

    /**
     * List springbootservers resource by resourceGroup.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param siteName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SpringbootserversModel> listByResourceGroup(String resourceGroupName, String siteName,
        Context context);

    /**
     * List springbootservers resource by subscription.
     * 
     * @param siteName The springbootsites name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SpringbootserversModel> listBySubscription(String siteName);

    /**
     * List springbootservers resource by subscription.
     * 
     * @param siteName The springbootsites name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers list resource definition as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SpringbootserversModel> listBySubscription(String siteName, Context context);

    /**
     * List springbootservers resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    SpringbootserversModel getById(String id);

    /**
     * List springbootservers resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the springbootservers envelope resource definition along with {@link Response}.
     */
    Response<SpringbootserversModel> getByIdWithResponse(String id, Context context);

    /**
     * Delete springbootservers resource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete springbootservers resource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SpringbootserversModel resource.
     * 
     * @param name resource name.
     * @return the first stage of the new SpringbootserversModel definition.
     */
    SpringbootserversModel.DefinitionStages.Blank define(String name);
}
