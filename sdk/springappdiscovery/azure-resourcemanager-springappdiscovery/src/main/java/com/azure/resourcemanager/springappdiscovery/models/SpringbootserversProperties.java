// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The springbootservers resource definition.
 */
@Fluent
public final class SpringbootserversProperties {
    /*
     * Target server port for remote login
     */
    @JsonProperty(value = "port")
    private Integer port;

    /*
     * Server is the target server name or ip address to discover of SpringBootServer.
     */
    @JsonProperty(value = "server", required = true)
    private String server;

    /*
     * The alternative FQDN or IP addresses to discover for this server
     */
    @JsonProperty(value = "fqdnAndIpAddressList")
    private List<String> fqdnAndIpAddressList;

    /*
     * The machine Id from ARM
     */
    @JsonProperty(value = "machineArmId")
    private String machineArmId;

    /*
     * The total number of apps been discovered
     */
    @JsonProperty(value = "totalApps")
    private Integer totalApps;

    /*
     * The total number of spring boot apps been discovered
     */
    @JsonProperty(value = "springBootApps")
    private Integer springBootApps;

    /*
     * The list of errors.
     */
    @JsonProperty(value = "errors")
    private List<Error> errors;

    /*
     * The resource provisioning state.
     */
    @JsonProperty(value = "provisioningState")
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SpringbootserversProperties class.
     */
    public SpringbootserversProperties() {
    }

    /**
     * Get the port property: Target server port for remote login.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: Target server port for remote login.
     * 
     * @param port the port value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the server property: Server is the target server name or ip address to discover of SpringBootServer.
     * 
     * @return the server value.
     */
    public String server() {
        return this.server;
    }

    /**
     * Set the server property: Server is the target server name or ip address to discover of SpringBootServer.
     * 
     * @param server the server value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withServer(String server) {
        this.server = server;
        return this;
    }

    /**
     * Get the fqdnAndIpAddressList property: The alternative FQDN or IP addresses to discover for this server.
     * 
     * @return the fqdnAndIpAddressList value.
     */
    public List<String> fqdnAndIpAddressList() {
        return this.fqdnAndIpAddressList;
    }

    /**
     * Set the fqdnAndIpAddressList property: The alternative FQDN or IP addresses to discover for this server.
     * 
     * @param fqdnAndIpAddressList the fqdnAndIpAddressList value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withFqdnAndIpAddressList(List<String> fqdnAndIpAddressList) {
        this.fqdnAndIpAddressList = fqdnAndIpAddressList;
        return this;
    }

    /**
     * Get the machineArmId property: The machine Id from ARM.
     * 
     * @return the machineArmId value.
     */
    public String machineArmId() {
        return this.machineArmId;
    }

    /**
     * Set the machineArmId property: The machine Id from ARM.
     * 
     * @param machineArmId the machineArmId value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withMachineArmId(String machineArmId) {
        this.machineArmId = machineArmId;
        return this;
    }

    /**
     * Get the totalApps property: The total number of apps been discovered.
     * 
     * @return the totalApps value.
     */
    public Integer totalApps() {
        return this.totalApps;
    }

    /**
     * Set the totalApps property: The total number of apps been discovered.
     * 
     * @param totalApps the totalApps value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withTotalApps(Integer totalApps) {
        this.totalApps = totalApps;
        return this;
    }

    /**
     * Get the springBootApps property: The total number of spring boot apps been discovered.
     * 
     * @return the springBootApps value.
     */
    public Integer springBootApps() {
        return this.springBootApps;
    }

    /**
     * Set the springBootApps property: The total number of spring boot apps been discovered.
     * 
     * @param springBootApps the springBootApps value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withSpringBootApps(Integer springBootApps) {
        this.springBootApps = springBootApps;
        return this;
    }

    /**
     * Get the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The list of errors.
     * 
     * @param errors the errors value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withErrors(List<Error> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The resource provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SpringbootserversProperties object itself.
     */
    public SpringbootserversProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (server() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property server in model SpringbootserversProperties"));
        }
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SpringbootserversProperties.class);
}
