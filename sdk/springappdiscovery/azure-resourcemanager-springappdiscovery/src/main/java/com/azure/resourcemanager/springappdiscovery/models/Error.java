// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Defines the error.
 */
@Fluent
public final class Error implements JsonSerializable<Error> {
    /*
     * The error ID.
     */
    private Long id;

    /*
     * The error code.
     */
    private String code;

    /*
     * The summarized error message.
     */
    private String summaryMessage;

    /*
     * The account ID used to login.
     */
    private String runAsAccountId;

    /*
     * The detailed error message.
     */
    private String message;

    /*
     * The error possible causes.
     */
    private String possibleCauses;

    /*
     * The error recommended action
     */
    private String recommendedAction;

    /*
     * The error severity
     */
    private String severity;

    /*
     * Time when this error was last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /**
     * Creates an instance of Error class.
     */
    public Error() {
    }

    /**
     * Get the id property: The error ID.
     * 
     * @return the id value.
     */
    public Long id() {
        return this.id;
    }

    /**
     * Set the id property: The error ID.
     * 
     * @param id the id value to set.
     * @return the Error object itself.
     */
    public Error withId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get the code property: The error code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: The error code.
     * 
     * @param code the code value to set.
     * @return the Error object itself.
     */
    public Error withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the summaryMessage property: The summarized error message.
     * 
     * @return the summaryMessage value.
     */
    public String summaryMessage() {
        return this.summaryMessage;
    }

    /**
     * Set the summaryMessage property: The summarized error message.
     * 
     * @param summaryMessage the summaryMessage value to set.
     * @return the Error object itself.
     */
    public Error withSummaryMessage(String summaryMessage) {
        this.summaryMessage = summaryMessage;
        return this;
    }

    /**
     * Get the runAsAccountId property: The account ID used to login.
     * 
     * @return the runAsAccountId value.
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }

    /**
     * Set the runAsAccountId property: The account ID used to login.
     * 
     * @param runAsAccountId the runAsAccountId value to set.
     * @return the Error object itself.
     */
    public Error withRunAsAccountId(String runAsAccountId) {
        this.runAsAccountId = runAsAccountId;
        return this;
    }

    /**
     * Get the message property: The detailed error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: The detailed error message.
     * 
     * @param message the message value to set.
     * @return the Error object itself.
     */
    public Error withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the possibleCauses property: The error possible causes.
     * 
     * @return the possibleCauses value.
     */
    public String possibleCauses() {
        return this.possibleCauses;
    }

    /**
     * Set the possibleCauses property: The error possible causes.
     * 
     * @param possibleCauses the possibleCauses value to set.
     * @return the Error object itself.
     */
    public Error withPossibleCauses(String possibleCauses) {
        this.possibleCauses = possibleCauses;
        return this;
    }

    /**
     * Get the recommendedAction property: The error recommended action.
     * 
     * @return the recommendedAction value.
     */
    public String recommendedAction() {
        return this.recommendedAction;
    }

    /**
     * Set the recommendedAction property: The error recommended action.
     * 
     * @param recommendedAction the recommendedAction value to set.
     * @return the Error object itself.
     */
    public Error withRecommendedAction(String recommendedAction) {
        this.recommendedAction = recommendedAction;
        return this;
    }

    /**
     * Get the severity property: The error severity.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Set the severity property: The error severity.
     * 
     * @param severity the severity value to set.
     * @return the Error object itself.
     */
    public Error withSeverity(String severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the updatedTimestamp property: Time when this error was last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Set the updatedTimestamp property: Time when this error was last updated.
     * 
     * @param updatedTimestamp the updatedTimestamp value to set.
     * @return the Error object itself.
     */
    public Error withUpdatedTimestamp(OffsetDateTime updatedTimestamp) {
        this.updatedTimestamp = updatedTimestamp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("id", this.id);
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("summaryMessage", this.summaryMessage);
        jsonWriter.writeStringField("runAsAccountId", this.runAsAccountId);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("possibleCauses", this.possibleCauses);
        jsonWriter.writeStringField("recommendedAction", this.recommendedAction);
        jsonWriter.writeStringField("severity", this.severity);
        jsonWriter.writeStringField("updatedTimeStamp",
            this.updatedTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedTimestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Error from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Error if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Error.
     */
    public static Error fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Error deserializedError = new Error();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedError.id = reader.getNullable(JsonReader::getLong);
                } else if ("code".equals(fieldName)) {
                    deserializedError.code = reader.getString();
                } else if ("summaryMessage".equals(fieldName)) {
                    deserializedError.summaryMessage = reader.getString();
                } else if ("runAsAccountId".equals(fieldName)) {
                    deserializedError.runAsAccountId = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedError.message = reader.getString();
                } else if ("possibleCauses".equals(fieldName)) {
                    deserializedError.possibleCauses = reader.getString();
                } else if ("recommendedAction".equals(fieldName)) {
                    deserializedError.recommendedAction = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedError.severity = reader.getString();
                } else if ("updatedTimeStamp".equals(fieldName)) {
                    deserializedError.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedError;
        });
    }
}
