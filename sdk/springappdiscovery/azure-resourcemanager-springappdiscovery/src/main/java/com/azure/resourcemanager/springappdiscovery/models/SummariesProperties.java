// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.springappdiscovery.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Summaries properties.
 */
@Fluent
public final class SummariesProperties implements JsonSerializable<SummariesProperties> {
    /*
     * The of number discovered spring boot servers.
     */
    private Long discoveredServers;

    /*
     * The of number discovered spring boot apps.
     */
    private Long discoveredApps;

    /*
     * The list of errors.
     */
    private List<Error> errors;

    /*
     * The resource provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SummariesProperties class.
     */
    public SummariesProperties() {
    }

    /**
     * Get the discoveredServers property: The of number discovered spring boot servers.
     * 
     * @return the discoveredServers value.
     */
    public Long discoveredServers() {
        return this.discoveredServers;
    }

    /**
     * Set the discoveredServers property: The of number discovered spring boot servers.
     * 
     * @param discoveredServers the discoveredServers value to set.
     * @return the SummariesProperties object itself.
     */
    public SummariesProperties withDiscoveredServers(Long discoveredServers) {
        this.discoveredServers = discoveredServers;
        return this;
    }

    /**
     * Get the discoveredApps property: The of number discovered spring boot apps.
     * 
     * @return the discoveredApps value.
     */
    public Long discoveredApps() {
        return this.discoveredApps;
    }

    /**
     * Set the discoveredApps property: The of number discovered spring boot apps.
     * 
     * @param discoveredApps the discoveredApps value to set.
     * @return the SummariesProperties object itself.
     */
    public SummariesProperties withDiscoveredApps(Long discoveredApps) {
        this.discoveredApps = discoveredApps;
        return this;
    }

    /**
     * Get the errors property: The list of errors.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: The list of errors.
     * 
     * @param errors the errors value to set.
     * @return the SummariesProperties object itself.
     */
    public SummariesProperties withErrors(List<Error> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The resource provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SummariesProperties object itself.
     */
    public SummariesProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("discoveredServers", this.discoveredServers);
        jsonWriter.writeNumberField("discoveredApps", this.discoveredApps);
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SummariesProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SummariesProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SummariesProperties.
     */
    public static SummariesProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SummariesProperties deserializedSummariesProperties = new SummariesProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("discoveredServers".equals(fieldName)) {
                    deserializedSummariesProperties.discoveredServers = reader.getNullable(JsonReader::getLong);
                } else if ("discoveredApps".equals(fieldName)) {
                    deserializedSummariesProperties.discoveredApps = reader.getNullable(JsonReader::getLong);
                } else if ("errors".equals(fieldName)) {
                    List<Error> errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedSummariesProperties.errors = errors;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSummariesProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSummariesProperties;
        });
    }
}
