// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.scanning;

import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.Configuration;
import com.azure.core.util.serializer.JsonSerializerProviders;
import com.azure.core.util.serializer.ObjectSerializer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** A builder for creating a new instance of the PurviewScanningClient type. */
@ServiceClientBuilder(
        serviceClients = {
            KeyVaultConnectionsBaseClient.class,
            ClassificationRulesBaseClient.class,
            DataSourcesBaseClient.class,
            FiltersBaseClient.class,
            ScansBaseClient.class,
            ScanResultBaseClient.class,
            ScanRulesetsBaseClient.class,
            SystemScanRulesetsBaseClient.class,
            TriggersBaseClient.class
        })
public final class PurviewScanningClientBuilder {
    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    static final String[] DEFAULT_SCOPES = new String[] {"https://purview.azure.net/.default"};

    private final Map<String, String> properties = new HashMap<>();

    /** Create an instance of the PurviewScanningClientBuilder. */
    public PurviewScanningClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The scanning endpoint of your purview account. Example:
     * https://{accountName}.scan.purview.azure.com
     */
    private String endpoint;

    /**
     * Sets The scanning endpoint of your purview account. Example: https://{accountName}.scan.purview.azure.com.
     *
     * @param endpoint the endpoint value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Api Version
     */
    private String apiVersion;

    /**
     * Sets Api Version.
     *
     * @param apiVersion the apiVersion value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder apiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The serializer to serialize an object into a string
     */
    private ObjectSerializer serializer;

    /**
     * Sets The serializer to serialize an object into a string.
     *
     * @param serializer the serializer value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder serializer(ObjectSerializer serializer) {
        this.serializer = serializer;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * Sets The HTTP client used to send the request.
     *
     * @param httpClient the httpClient value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The configuration store that is used during construction of the service
     * client.
     */
    private Configuration configuration;

    /**
     * Sets The configuration store that is used during construction of the service client.
     *
     * @param configuration the configuration value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    private TokenCredential tokenCredential;

    /**
     * Sets The TokenCredential used for authentication.
     *
     * @param tokenCredential the tokenCredential value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * Sets The logging configuration for HTTP requests and responses.
     *
     * @param httpLogOptions the httpLogOptions value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if
     * applicable.
     */
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /*
     * The list of Http pipeline policies to add.
     */
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Adds a custom Http pipeline policy.
     *
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the PurviewScanningClientBuilder.
     */
    public PurviewScanningClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        pipelinePolicies.add(customPolicy);
        return this;
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration =
                (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        if (httpLogOptions == null) {
            httpLogOptions = new HttpLogOptions();
        }
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        String clientName = properties.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = properties.getOrDefault(SDK_VERSION, "UnknownVersion");
        policies.add(
                new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion, buildConfiguration));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);
        policies.add(new CookiePolicy());
        policies.addAll(this.pipelinePolicies);
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                        .policies(policies.toArray(new HttpPipelinePolicy[0]))
                        .httpClient(httpClient)
                        .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of KeyVaultConnectionsBaseClient low level client.
     *
     * @return an instance of KeyVaultConnectionsBaseClient.
     */
    public KeyVaultConnectionsBaseClient buildKeyVaultConnectionsBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        KeyVaultConnectionsBaseClient client =
                new KeyVaultConnectionsBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of ClassificationRulesBaseClient low level client.
     *
     * @return an instance of ClassificationRulesBaseClient.
     */
    public ClassificationRulesBaseClient buildClassificationRulesBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        ClassificationRulesBaseClient client =
                new ClassificationRulesBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of DataSourcesBaseClient low level client.
     *
     * @return an instance of DataSourcesBaseClient.
     */
    public DataSourcesBaseClient buildDataSourcesBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        DataSourcesBaseClient client = new DataSourcesBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of FiltersBaseClient low level client.
     *
     * @return an instance of FiltersBaseClient.
     */
    public FiltersBaseClient buildFiltersBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        FiltersBaseClient client = new FiltersBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of ScansBaseClient low level client.
     *
     * @return an instance of ScansBaseClient.
     */
    public ScansBaseClient buildScansBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        ScansBaseClient client = new ScansBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of ScanResultBaseClient low level client.
     *
     * @return an instance of ScanResultBaseClient.
     */
    public ScanResultBaseClient buildScanResultBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        ScanResultBaseClient client = new ScanResultBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of ScanRulesetsBaseClient low level client.
     *
     * @return an instance of ScanRulesetsBaseClient.
     */
    public ScanRulesetsBaseClient buildScanRulesetsBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        ScanRulesetsBaseClient client = new ScanRulesetsBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of SystemScanRulesetsBaseClient low level client.
     *
     * @return an instance of SystemScanRulesetsBaseClient.
     */
    public SystemScanRulesetsBaseClient buildSystemScanRulesetsBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        SystemScanRulesetsBaseClient client =
                new SystemScanRulesetsBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }

    /**
     * Builds an instance of TriggersBaseClient low level client.
     *
     * @return an instance of TriggersBaseClient.
     */
    public TriggersBaseClient buildTriggersBaseClient() {
        if (apiVersion == null) {
            this.apiVersion = "2018-12-01-preview";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        if (serializer == null) {
            this.serializer = JsonSerializerProviders.createInstance();
        }
        TriggersBaseClient client = new TriggersBaseClient(endpoint, apiVersion, pipeline, serializer);
        return client;
    }
}
