// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.scanning.implementation;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DataSources. */
public final class DataSourcesImpl {
    /** The proxy service used to perform REST calls. */
    private final DataSourcesService service;

    /** The service client containing this operation class. */
    private final PurviewScanningClientImpl client;

    /**
     * Initializes an instance of DataSourcesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DataSourcesImpl(PurviewScanningClientImpl client) {
        this.service =
                RestProxy.create(DataSourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PurviewScanningClientDataSources to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{Endpoint}")
    @ServiceInterface(name = "PurviewScanningClien")
    public interface DataSourcesService {
        @Put("/datasources/{dataSourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dataSourceName") String dataSourceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/datasources/{dataSourceName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dataSourceName") String dataSourceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/datasources/{dataSourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dataSourceName") String dataSourceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/datasources/{dataSourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dataSourceName") String dataSourceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/datasources/{dataSourceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> delete(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dataSourceName") String dataSourceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/datasources/{dataSourceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dataSourceName") String dataSourceName,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/datasources")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAll(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/datasources")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAllSync(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listAllNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listAllNextSync(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Creates or Updates a data source.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSourceName The dataSourceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(
            String dataSourceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdate(
                                this.client.getEndpoint(),
                                dataSourceName,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Creates or Updates a data source.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSourceName The dataSourceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String dataSourceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrUpdateSync(
                this.client.getEndpoint(),
                dataSourceName,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Get a data source.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSourceName The dataSourceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a data source along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String dataSourceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getEndpoint(),
                                dataSourceName,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get a data source.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSourceName The dataSourceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a data source along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String dataSourceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(
                this.client.getEndpoint(),
                dataSourceName,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Deletes a data source.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSourceName The dataSourceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponseAsync(String dataSourceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.delete(
                                this.client.getEndpoint(),
                                dataSourceName,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a data source.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSourceName The dataSourceName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String dataSourceName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(
                this.client.getEndpoint(),
                dataSourceName,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * List data sources in Data catalog.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listAllSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listAll(
                                        this.client.getEndpoint(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List data sources in Data catalog.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAllAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listAllSinglePageAsync(requestOptions),
                nextLink -> listAllNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * List data sources in Data catalog.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listAllSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listAllSync(
                        this.client.getEndpoint(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * List data sources in Data catalog.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAll(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedIterable<>(
                () -> listAllSinglePage(requestOptions),
                nextLink -> listAllNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listAllNextSinglePageAsync(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listAllNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     scans (Optional): [
     *          (Optional){
     *             id: String (Optional)
     *             name: String (Optional)
     *             scanResults (Optional): [
     *                  (Optional){
     *                     parentId: String (Optional)
     *                     id: String (Optional)
     *                     resourceId: String (Optional)
     *                     status: String (Optional)
     *                     assetsDiscovered: Long (Optional)
     *                     assetsClassified: Long (Optional)
     *                     diagnostics (Optional): {
     *                         notifications (Optional): [
     *                              (Optional){
     *                                 message: String (Optional)
     *                                 code: Integer (Optional)
     *                             }
     *                         ]
     *                         exceptionCountMap (Optional): {
     *                             String: int (Optional)
     *                         }
     *                     }
     *                     startTime: OffsetDateTime (Optional)
     *                     queuedTime: OffsetDateTime (Optional)
     *                     pipelineStartTime: OffsetDateTime (Optional)
     *                     endTime: OffsetDateTime (Optional)
     *                     scanRulesetVersion: Integer (Optional)
     *                     scanRulesetType: String(Custom/System) (Optional)
     *                     scanLevelType: String(Full/Incremental) (Optional)
     *                     errorMessage: String (Optional)
     *                     error (Optional): {
     *                         code: String (Optional)
     *                         message: String (Optional)
     *                         target: String (Optional)
     *                         details (Optional): [
     *                              (Optional){
     *                                 code: String (Optional)
     *                                 message: String (Optional)
     *                                 target: String (Optional)
     *                                 details (Optional): [
     *                                     (recursive schema, see above)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     runType: String (Optional)
     *                     dataSourceType: String(None/AzureSubscription/AzureResourceGroup/AzureSynapseWorkspace/AzureSynapse/AdlsGen1/AdlsGen2/AmazonAccount/AmazonS3/AmazonSql/AzureCosmosDb/AzureDataExplorer/AzureFileService/AzureSqlDatabase/AmazonPostgreSql/AzurePostgreSql/SqlServerDatabase/AzureSqlDatabaseManagedInstance/AzureSqlDataWarehouse/AzureMySql/AzureStorage/Teradata/Oracle/SapS4Hana/SapEcc/PowerBI) (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listAllNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listAllNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
