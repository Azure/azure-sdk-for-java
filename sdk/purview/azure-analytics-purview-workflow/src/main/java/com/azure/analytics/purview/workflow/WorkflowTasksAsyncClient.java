// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.workflow;

import com.azure.analytics.purview.workflow.implementation.WorkflowTasksImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the asynchronous PurviewWorkflowClient type. */
@ServiceClient(builder = WorkflowTasksClientBuilder.class, isAsync = true)
public final class WorkflowTasksAsyncClient {
    @Generated private final WorkflowTasksImpl serviceClient;

    /**
     * Initializes an instance of WorkflowTasksAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    WorkflowTasksAsyncClient(WorkflowTasksImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get all workflow tasks.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>viewMode</td><td>String</td><td>No</td><td>To filter user's sent, received or history workflow tasks.</td></tr>
     *     <tr><td>workflowIds</td><td>List&lt;String&gt;</td><td>No</td><td>Filter items by workflow id list. In the form of "," separated string.</td></tr>
     *     <tr><td>timeWindow</td><td>String</td><td>No</td><td>Time window of filtering items. Allowed values: "1d", "7d", "30d", "90d".</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum page size to get the items at one time. The default value is 100.</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The key word which used to sort the results. Allowed values: "status desc", "status asc", "requestor desc", "requestor asc", "startTime desc", "startTime asc", "createdTime desc", "createdTime asc".</td></tr>
     *     <tr><td>taskTypes</td><td>List&lt;String&gt;</td><td>No</td><td>Filter items by workflow task type. In the form of "," separated string.</td></tr>
     *     <tr><td>taskStatuses</td><td>List&lt;String&gt;</td><td>No</td><td>Filter workflow tasks by status. In the form of "," separated string.</td></tr>
     *     <tr><td>requestors</td><td>List&lt;String&gt;</td><td>No</td><td>Requestors' ids to filter. In the form of "," separated string.</td></tr>
     *     <tr><td>assignees</td><td>List&lt;String&gt;</td><td>No</td><td>Assignees' ids to filter. In the form of "," separated string.</td></tr>
     *     <tr><td>workflowNameKeyword</td><td>String</td><td>No</td><td>The key word which could used to filter workflow item with related workflow.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     title: String (Optional)
     *     workflowRunId: String (Required)
     *     workflowId: String (Required)
     *     requestor: String (Required)
     *     createdTime: OffsetDateTime (Required)
     *     lastUpdateTime: OffsetDateTime (Required)
     *     payload (Required): {
     *         type: String(CreateTerm/UpdateTerm/DeleteTerm/ImportTerms/UpdateAsset/GrantDataAccess) (Required)
     *         targetValue: String (Required)
     *         payload: Object (Optional)
     *     }
     *     reminderInfo (Optional): {
     *         lastRemindTime: OffsetDateTime (Optional)
     *         nextRemindTime: OffsetDateTime (Required)
     *         reminderSettings: Object (Required)
     *     }
     *     expiryInfo (Optional): {
     *         lastExpiryNotificationTime: OffsetDateTime (Optional)
     *         nextExpiryNotificationTime: OffsetDateTime (Required)
     *         expiryTime: OffsetDateTime (Required)
     *         expirySettings (Required): {
     *             expireAfter: Object (Required)
     *             notifyOnExpiration (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all workflow tasks as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(RequestOptions requestOptions) {
        return this.serviceClient.listAsync(requestOptions);
    }
}
