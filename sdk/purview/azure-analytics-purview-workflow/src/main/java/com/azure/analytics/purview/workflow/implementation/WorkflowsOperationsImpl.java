// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.workflow.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in WorkflowsOperations. */
public final class WorkflowsOperationsImpl {
    /** The proxy service used to perform REST calls. */
    private final WorkflowsService service;

    /** The service client containing this operation class. */
    private final PurviewWorkflowClientImpl client;

    /**
     * Initializes an instance of WorkflowsOperationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WorkflowsOperationsImpl(PurviewWorkflowClientImpl client) {
        this.service =
                RestProxy.create(WorkflowsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PurviewWorkflowWorkflowsOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}/workflow")
    @ServiceInterface(name = "PurviewWorkflowWorkf")
    public interface WorkflowsService {
        @Get("/workflows/{workflowId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/workflows/{workflowId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/workflows/{workflowId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrReplace(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData workflowCreateOrUpdateCommand,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/workflows/{workflowId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrReplaceSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData workflowCreateOrUpdateCommand,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/workflows/{workflowId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/workflows/{workflowId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/workflows/{workflowId}/validate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> validate(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData workflowValidateQuery,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/workflows/{workflowId}/validate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> validateSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("workflowId") String workflowId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData workflowValidateQuery,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Get a specific workflow.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     createdTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastUpdateTime: OffsetDateTime (Optional)
     *     updatedBy: String (Optional)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Required)
     * }
     * }</pre>
     *
     * @param workflowId The workflow id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific workflow along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String workflowId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getEndpoint(),
                                workflowId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get a specific workflow.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     createdTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastUpdateTime: OffsetDateTime (Optional)
     *     updatedBy: String (Optional)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Required)
     * }
     * }</pre>
     *
     * @param workflowId The workflow id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific workflow along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String workflowId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(
                this.client.getEndpoint(),
                workflowId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Create or replace a workflow.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     createdTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastUpdateTime: OffsetDateTime (Optional)
     *     updatedBy: String (Optional)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Required)
     * }
     * }</pre>
     *
     * @param workflowId The workflow id.
     * @param workflowCreateOrUpdateCommand Create or update workflow payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the workflow properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponseAsync(
            String workflowId, BinaryData workflowCreateOrUpdateCommand, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrReplace(
                                this.client.getEndpoint(),
                                workflowId,
                                this.client.getServiceVersion().getVersion(),
                                workflowCreateOrUpdateCommand,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Create or replace a workflow.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     createdTime: OffsetDateTime (Optional)
     *     createdBy: String (Optional)
     *     lastUpdateTime: OffsetDateTime (Optional)
     *     updatedBy: String (Optional)
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Required)
     * }
     * }</pre>
     *
     * @param workflowId The workflow id.
     * @param workflowCreateOrUpdateCommand Create or update workflow payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the workflow properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(
            String workflowId, BinaryData workflowCreateOrUpdateCommand, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrReplaceSync(
                this.client.getEndpoint(),
                workflowId,
                this.client.getServiceVersion().getVersion(),
                workflowCreateOrUpdateCommand,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Delete a workflow.
     *
     * @param workflowId The workflow id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String workflowId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.delete(
                                this.client.getEndpoint(),
                                workflowId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete a workflow.
     *
     * @param workflowId The workflow id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String workflowId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(
                this.client.getEndpoint(),
                workflowId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Validate a workflow.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             severity: String(error/warning) (Required)
     *             location (Required): {
     *                 type: String(workflow/action/actionParameter) (Required)
     *                 actionName: String (Optional)
     *                 parameterKey: String (Optional)
     *             }
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param workflowId The workflow id.
     * @param workflowValidateQuery Check workflow payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> validateWithResponseAsync(
            String workflowId, BinaryData workflowValidateQuery, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.validate(
                                this.client.getEndpoint(),
                                workflowId,
                                this.client.getServiceVersion().getVersion(),
                                workflowValidateQuery,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Validate a workflow.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     triggers (Required): [
     *          (Required){
     *             type: String(when_term_creation_is_requested/when_term_deletion_is_requested/when_term_update_is_requested/when_terms_import_is_requested/when_data_access_grant_is_requested/when_asset_update_is_requested) (Required)
     *             underGlossaryHierarchy: String (Optional)
     *             underCollection: String (Optional)
     *             underGlossary: String (Optional)
     *         }
     *     ]
     *     name: String (Required)
     *     isEnabled: boolean (Required)
     *     description: String (Required)
     *     actionDag: Object (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             severity: String(error/warning) (Required)
     *             location (Required): {
     *                 type: String(workflow/action/actionParameter) (Required)
     *                 actionName: String (Optional)
     *                 parameterKey: String (Optional)
     *             }
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param workflowId The workflow id.
     * @param workflowValidateQuery Check workflow payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> validateWithResponse(
            String workflowId, BinaryData workflowValidateQuery, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.validateSync(
                this.client.getEndpoint(),
                workflowId,
                this.client.getServiceVersion().getVersion(),
                workflowValidateQuery,
                accept,
                requestOptions,
                Context.NONE);
    }
}
