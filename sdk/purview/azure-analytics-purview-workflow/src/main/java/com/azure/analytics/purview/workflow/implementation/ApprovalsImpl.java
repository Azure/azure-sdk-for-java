// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.workflow.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Approvals. */
public final class ApprovalsImpl {
    /** The proxy service used to perform REST calls. */
    private final ApprovalsService service;

    /** The service client containing this operation class. */
    private final PurviewWorkflowClientImpl client;

    /**
     * Initializes an instance of ApprovalsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ApprovalsImpl(PurviewWorkflowClientImpl client) {
        this.service =
                RestProxy.create(ApprovalsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PurviewWorkflowApprovals to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/workflow")
    @ServiceInterface(name = "PurviewWorkflowAppro")
    public interface ApprovalsService {
        @Post("/workflowtasks/{taskId}/approve-approval")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> approve(
                @HostParam("endpoint") String endpoint,
                @PathParam("taskId") String taskId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData approvalResponseComment,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/workflowtasks/{taskId}/approve-approval")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> approveSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("taskId") String taskId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData approvalResponseComment,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/workflowtasks/{taskId}/reject-approval")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> reject(
                @HostParam("endpoint") String endpoint,
                @PathParam("taskId") String taskId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData approvalResponseComment,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/workflowtasks/{taskId}/reject-approval")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> rejectSync(
                @HostParam("endpoint") String endpoint,
                @PathParam("taskId") String taskId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData approvalResponseComment,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Approve an approval.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     comment: String (Optional)
     * }
     * }</pre>
     *
     * @param taskId The task id.
     * @param approvalResponseComment The request body of approving an approval type of workflow task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> approveWithResponseAsync(
            String taskId, BinaryData approvalResponseComment, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.approve(
                                this.client.getEndpoint(),
                                taskId,
                                this.client.getServiceVersion().getVersion(),
                                approvalResponseComment,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Approve an approval.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     comment: String (Optional)
     * }
     * }</pre>
     *
     * @param taskId The task id.
     * @param approvalResponseComment The request body of approving an approval type of workflow task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> approveWithResponse(
            String taskId, BinaryData approvalResponseComment, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.approveSync(
                this.client.getEndpoint(),
                taskId,
                this.client.getServiceVersion().getVersion(),
                approvalResponseComment,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Reject an approval.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     comment: String (Optional)
     * }
     * }</pre>
     *
     * @param taskId The task id.
     * @param approvalResponseComment The request body of rejecting an approval type of workflow task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> rejectWithResponseAsync(
            String taskId, BinaryData approvalResponseComment, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.reject(
                                this.client.getEndpoint(),
                                taskId,
                                this.client.getServiceVersion().getVersion(),
                                approvalResponseComment,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Reject an approval.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     comment: String (Optional)
     * }
     * }</pre>
     *
     * @param taskId The task id.
     * @param approvalResponseComment The request body of rejecting an approval type of workflow task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> rejectWithResponse(
            String taskId, BinaryData approvalResponseComment, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.rejectSync(
                this.client.getEndpoint(),
                taskId,
                this.client.getServiceVersion().getVersion(),
                approvalResponseComment,
                accept,
                requestOptions,
                Context.NONE);
    }
}
