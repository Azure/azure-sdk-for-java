// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.account.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ResourceSetRules. */
public final class ResourceSetRulesImpl {
    /** The proxy service used to perform REST calls. */
    private final ResourceSetRulesService service;

    /** The service client containing this operation class. */
    private final DataPlaneAccountClientImpl client;

    /**
     * Initializes an instance of ResourceSetRulesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ResourceSetRulesImpl(DataPlaneAccountClientImpl client) {
        this.service =
                RestProxy.create(
                        ResourceSetRulesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataPlaneAccountClientResourceSetRules to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DataPlaneAccountClie")
    private interface ResourceSetRulesService {
        @Get("/resourceSetRuleConfigs/defaultResourceSetRuleConfig")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> getResourceSetRule(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Put("/resourceSetRuleConfigs/defaultResourceSetRuleConfig")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> createOrUpdateResourceSetRule(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData resourceSetRuleConfig,
                RequestOptions requestOptions,
                Context context);

        @Delete("/resourceSetRuleConfigs/defaultResourceSetRuleConfig")
        @ExpectedResponses({200, 204})
        Mono<Response<Void>> deleteResourceSetRule(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/resourceSetRuleConfigs")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> listResourceSetRules(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> listResourceSetRulesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getResourceSetRuleWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getResourceSetRule(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getResourceSetRuleWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        return service.getResourceSetRule(
                this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), requestOptions, context);
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getResourceSetRuleWithResponse(RequestOptions requestOptions) {
        return getResourceSetRuleWithResponseAsync(requestOptions).block();
    }

    /**
     * Creates or updates an resource set config.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * @param resourceSetRuleConfig ResourceSetRuleConfig implementation class.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return resourceSetRuleConfig implementation class along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateResourceSetRuleWithResponseAsync(
            BinaryData resourceSetRuleConfig, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateResourceSetRule(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                resourceSetRuleConfig,
                                requestOptions,
                                context));
    }

    /**
     * Creates or updates an resource set config.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * @param resourceSetRuleConfig ResourceSetRuleConfig implementation class.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return resourceSetRuleConfig implementation class along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateResourceSetRuleWithResponseAsync(
            BinaryData resourceSetRuleConfig, RequestOptions requestOptions, Context context) {
        return service.createOrUpdateResourceSetRule(
                this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(),
                resourceSetRuleConfig,
                requestOptions,
                context);
    }

    /**
     * Creates or updates an resource set config.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     advancedResourceSet: {
     *         modifiedAt: String
     *         resourceSetProcessing: String(Default/Advanced)
     *     }
     *     name: String
     *     pathPatternConfig: {
     *         acceptedPatterns: [
     *             {
     *                 createdBy: String
     *                 filterType: String(Pattern/Regex)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 path: String
     *             }
     *         ]
     *         complexReplacers: [
     *             {
     *                 createdBy: String
     *                 description: String
     *                 disabled: Boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 typeName: String
     *             }
     *         ]
     *         createdBy: String
     *         enableDefaultPatterns: boolean
     *         lastUpdatedTimestamp: Long
     *         modifiedBy: String
     *         normalizationRules: [
     *             {
     *                 description: String
     *                 disabled: Boolean
     *                 dynamicReplacement: Boolean
     *                 entityTypes: [
     *                     String
     *                 ]
     *                 lastUpdatedTimestamp: Long
     *                 name: String
     *                 regex: {
     *                     maxDigits: Integer
     *                     maxLetters: Integer
     *                     minDashes: Integer
     *                     minDigits: Integer
     *                     minDigitsOrLetters: Integer
     *                     minDots: Integer
     *                     minHex: Integer
     *                     minLetters: Integer
     *                     minUnderscores: Integer
     *                     options: Integer
     *                     regexStr: String
     *                 }
     *                 replaceWith: String
     *                 version: Double
     *             }
     *         ]
     *         regexReplacers: [
     *             {
     *                 condition: String
     *                 createdBy: String
     *                 description: String
     *                 disabled: boolean
     *                 disableRecursiveReplacerApplication: Boolean
     *                 doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 name: String
     *                 regex: (recursive schema, see regex above)
     *                 replaceWith: String
     *             }
     *         ]
     *         rejectedPatterns: [
     *             (recursive schema, see above)
     *         ]
     *         scopedRules: [
     *             {
     *                 bindingUrl: String
     *                 rules: [
     *                     {
     *                         displayName: String
     *                         isResourceSet: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         qualifiedName: String
     *                     }
     *                 ]
     *                 storeType: String
     *             }
     *         ]
     *         version: Integer
     *     }
     * }
     * }</pre>
     *
     * @param resourceSetRuleConfig ResourceSetRuleConfig implementation class.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return resourceSetRuleConfig implementation class along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateResourceSetRuleWithResponse(
            BinaryData resourceSetRuleConfig, RequestOptions requestOptions) {
        return createOrUpdateResourceSetRuleWithResponseAsync(resourceSetRuleConfig, requestOptions).block();
    }

    /**
     * Deletes a ResourceSetRuleConfig resource.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteResourceSetRuleWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteResourceSetRule(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                requestOptions,
                                context));
    }

    /**
     * Deletes a ResourceSetRuleConfig resource.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteResourceSetRuleWithResponseAsync(RequestOptions requestOptions, Context context) {
        return service.deleteResourceSetRule(
                this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), requestOptions, context);
    }

    /**
     * Deletes a ResourceSetRuleConfig resource.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteResourceSetRuleWithResponse(RequestOptions requestOptions) {
        return deleteResourceSetRuleWithResponseAsync(requestOptions).block();
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>$skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             advancedResourceSet: {
     *                 modifiedAt: String
     *                 resourceSetProcessing: String(Default/Advanced)
     *             }
     *             name: String
     *             pathPatternConfig: {
     *                 acceptedPatterns: [
     *                     {
     *                         createdBy: String
     *                         filterType: String(Pattern/Regex)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         path: String
     *                     }
     *                 ]
     *                 complexReplacers: [
     *                     {
     *                         createdBy: String
     *                         description: String
     *                         disabled: Boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         typeName: String
     *                     }
     *                 ]
     *                 createdBy: String
     *                 enableDefaultPatterns: boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 normalizationRules: [
     *                     {
     *                         description: String
     *                         disabled: Boolean
     *                         dynamicReplacement: Boolean
     *                         entityTypes: [
     *                             String
     *                         ]
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         regex: {
     *                             maxDigits: Integer
     *                             maxLetters: Integer
     *                             minDashes: Integer
     *                             minDigits: Integer
     *                             minDigitsOrLetters: Integer
     *                             minDots: Integer
     *                             minHex: Integer
     *                             minLetters: Integer
     *                             minUnderscores: Integer
     *                             options: Integer
     *                             regexStr: String
     *                         }
     *                         replaceWith: String
     *                         version: Double
     *                     }
     *                 ]
     *                 regexReplacers: [
     *                     {
     *                         condition: String
     *                         createdBy: String
     *                         description: String
     *                         disabled: boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         regex: (recursive schema, see regex above)
     *                         replaceWith: String
     *                     }
     *                 ]
     *                 rejectedPatterns: [
     *                     (recursive schema, see above)
     *                 ]
     *                 scopedRules: [
     *                     {
     *                         bindingUrl: String
     *                         rules: [
     *                             {
     *                                 displayName: String
     *                                 isResourceSet: Boolean
     *                                 lastUpdatedTimestamp: Long
     *                                 name: String
     *                                 qualifiedName: String
     *                             }
     *                         ]
     *                         storeType: String
     *                     }
     *                 ]
     *                 version: Integer
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listResourceSetRulesSinglePageAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listResourceSetRules(
                                        this.client.getEndpoint(),
                                        this.client.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>$skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             advancedResourceSet: {
     *                 modifiedAt: String
     *                 resourceSetProcessing: String(Default/Advanced)
     *             }
     *             name: String
     *             pathPatternConfig: {
     *                 acceptedPatterns: [
     *                     {
     *                         createdBy: String
     *                         filterType: String(Pattern/Regex)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         path: String
     *                     }
     *                 ]
     *                 complexReplacers: [
     *                     {
     *                         createdBy: String
     *                         description: String
     *                         disabled: Boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         typeName: String
     *                     }
     *                 ]
     *                 createdBy: String
     *                 enableDefaultPatterns: boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 normalizationRules: [
     *                     {
     *                         description: String
     *                         disabled: Boolean
     *                         dynamicReplacement: Boolean
     *                         entityTypes: [
     *                             String
     *                         ]
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         regex: {
     *                             maxDigits: Integer
     *                             maxLetters: Integer
     *                             minDashes: Integer
     *                             minDigits: Integer
     *                             minDigitsOrLetters: Integer
     *                             minDots: Integer
     *                             minHex: Integer
     *                             minLetters: Integer
     *                             minUnderscores: Integer
     *                             options: Integer
     *                             regexStr: String
     *                         }
     *                         replaceWith: String
     *                         version: Double
     *                     }
     *                 ]
     *                 regexReplacers: [
     *                     {
     *                         condition: String
     *                         createdBy: String
     *                         description: String
     *                         disabled: boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         regex: (recursive schema, see regex above)
     *                         replaceWith: String
     *                     }
     *                 ]
     *                 rejectedPatterns: [
     *                     (recursive schema, see above)
     *                 ]
     *                 scopedRules: [
     *                     {
     *                         bindingUrl: String
     *                         rules: [
     *                             {
     *                                 displayName: String
     *                                 isResourceSet: Boolean
     *                                 lastUpdatedTimestamp: Long
     *                                 name: String
     *                                 qualifiedName: String
     *                             }
     *                         ]
     *                         storeType: String
     *                     }
     *                 ]
     *                 version: Integer
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listResourceSetRulesSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        return service.listResourceSetRules(
                        this.client.getEndpoint(),
                        this.client.getServiceVersion().getVersion(),
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>$skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             advancedResourceSet: {
     *                 modifiedAt: String
     *                 resourceSetProcessing: String(Default/Advanced)
     *             }
     *             name: String
     *             pathPatternConfig: {
     *                 acceptedPatterns: [
     *                     {
     *                         createdBy: String
     *                         filterType: String(Pattern/Regex)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         path: String
     *                     }
     *                 ]
     *                 complexReplacers: [
     *                     {
     *                         createdBy: String
     *                         description: String
     *                         disabled: Boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         typeName: String
     *                     }
     *                 ]
     *                 createdBy: String
     *                 enableDefaultPatterns: boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 normalizationRules: [
     *                     {
     *                         description: String
     *                         disabled: Boolean
     *                         dynamicReplacement: Boolean
     *                         entityTypes: [
     *                             String
     *                         ]
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         regex: {
     *                             maxDigits: Integer
     *                             maxLetters: Integer
     *                             minDashes: Integer
     *                             minDigits: Integer
     *                             minDigitsOrLetters: Integer
     *                             minDots: Integer
     *                             minHex: Integer
     *                             minLetters: Integer
     *                             minUnderscores: Integer
     *                             options: Integer
     *                             regexStr: String
     *                         }
     *                         replaceWith: String
     *                         version: Double
     *                     }
     *                 ]
     *                 regexReplacers: [
     *                     {
     *                         condition: String
     *                         createdBy: String
     *                         description: String
     *                         disabled: boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         regex: (recursive schema, see regex above)
     *                         replaceWith: String
     *                     }
     *                 ]
     *                 rejectedPatterns: [
     *                     (recursive schema, see above)
     *                 ]
     *                 scopedRules: [
     *                     {
     *                         bindingUrl: String
     *                         rules: [
     *                             {
     *                                 displayName: String
     *                                 isResourceSet: Boolean
     *                                 lastUpdatedTimestamp: Long
     *                                 name: String
     *                                 qualifiedName: String
     *                             }
     *                         ]
     *                         storeType: String
     *                     }
     *                 ]
     *                 version: Integer
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listResourceSetRulesAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listResourceSetRulesSinglePageAsync(requestOptions),
                nextLink -> listResourceSetRulesNextSinglePageAsync(nextLink, null));
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>$skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             advancedResourceSet: {
     *                 modifiedAt: String
     *                 resourceSetProcessing: String(Default/Advanced)
     *             }
     *             name: String
     *             pathPatternConfig: {
     *                 acceptedPatterns: [
     *                     {
     *                         createdBy: String
     *                         filterType: String(Pattern/Regex)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         path: String
     *                     }
     *                 ]
     *                 complexReplacers: [
     *                     {
     *                         createdBy: String
     *                         description: String
     *                         disabled: Boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         typeName: String
     *                     }
     *                 ]
     *                 createdBy: String
     *                 enableDefaultPatterns: boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 normalizationRules: [
     *                     {
     *                         description: String
     *                         disabled: Boolean
     *                         dynamicReplacement: Boolean
     *                         entityTypes: [
     *                             String
     *                         ]
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         regex: {
     *                             maxDigits: Integer
     *                             maxLetters: Integer
     *                             minDashes: Integer
     *                             minDigits: Integer
     *                             minDigitsOrLetters: Integer
     *                             minDots: Integer
     *                             minHex: Integer
     *                             minLetters: Integer
     *                             minUnderscores: Integer
     *                             options: Integer
     *                             regexStr: String
     *                         }
     *                         replaceWith: String
     *                         version: Double
     *                     }
     *                 ]
     *                 regexReplacers: [
     *                     {
     *                         condition: String
     *                         createdBy: String
     *                         description: String
     *                         disabled: boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         regex: (recursive schema, see regex above)
     *                         replaceWith: String
     *                     }
     *                 ]
     *                 rejectedPatterns: [
     *                     (recursive schema, see above)
     *                 ]
     *                 scopedRules: [
     *                     {
     *                         bindingUrl: String
     *                         rules: [
     *                             {
     *                                 displayName: String
     *                                 isResourceSet: Boolean
     *                                 lastUpdatedTimestamp: Long
     *                                 name: String
     *                                 qualifiedName: String
     *                             }
     *                         ]
     *                         storeType: String
     *                     }
     *                 ]
     *                 version: Integer
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listResourceSetRulesAsync(RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () -> listResourceSetRulesSinglePageAsync(requestOptions, context),
                nextLink -> listResourceSetRulesNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * Get a resource set config service model.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>api-version</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>$skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             advancedResourceSet: {
     *                 modifiedAt: String
     *                 resourceSetProcessing: String(Default/Advanced)
     *             }
     *             name: String
     *             pathPatternConfig: {
     *                 acceptedPatterns: [
     *                     {
     *                         createdBy: String
     *                         filterType: String(Pattern/Regex)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         path: String
     *                     }
     *                 ]
     *                 complexReplacers: [
     *                     {
     *                         createdBy: String
     *                         description: String
     *                         disabled: Boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         typeName: String
     *                     }
     *                 ]
     *                 createdBy: String
     *                 enableDefaultPatterns: boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 normalizationRules: [
     *                     {
     *                         description: String
     *                         disabled: Boolean
     *                         dynamicReplacement: Boolean
     *                         entityTypes: [
     *                             String
     *                         ]
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         regex: {
     *                             maxDigits: Integer
     *                             maxLetters: Integer
     *                             minDashes: Integer
     *                             minDigits: Integer
     *                             minDigitsOrLetters: Integer
     *                             minDots: Integer
     *                             minHex: Integer
     *                             minLetters: Integer
     *                             minUnderscores: Integer
     *                             options: Integer
     *                             regexStr: String
     *                         }
     *                         replaceWith: String
     *                         version: Double
     *                     }
     *                 ]
     *                 regexReplacers: [
     *                     {
     *                         condition: String
     *                         createdBy: String
     *                         description: String
     *                         disabled: boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         regex: (recursive schema, see regex above)
     *                         replaceWith: String
     *                     }
     *                 ]
     *                 rejectedPatterns: [
     *                     (recursive schema, see above)
     *                 ]
     *                 scopedRules: [
     *                     {
     *                         bindingUrl: String
     *                         rules: [
     *                             {
     *                                 displayName: String
     *                                 isResourceSet: Boolean
     *                                 lastUpdatedTimestamp: Long
     *                                 name: String
     *                                 qualifiedName: String
     *                             }
     *                         ]
     *                         storeType: String
     *                     }
     *                 ]
     *                 version: Integer
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a resource set config service model as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listResourceSetRules(RequestOptions requestOptions) {
        return new PagedIterable<>(listResourceSetRulesAsync(requestOptions));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             advancedResourceSet: {
     *                 modifiedAt: String
     *                 resourceSetProcessing: String(Default/Advanced)
     *             }
     *             name: String
     *             pathPatternConfig: {
     *                 acceptedPatterns: [
     *                     {
     *                         createdBy: String
     *                         filterType: String(Pattern/Regex)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         path: String
     *                     }
     *                 ]
     *                 complexReplacers: [
     *                     {
     *                         createdBy: String
     *                         description: String
     *                         disabled: Boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         typeName: String
     *                     }
     *                 ]
     *                 createdBy: String
     *                 enableDefaultPatterns: boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 normalizationRules: [
     *                     {
     *                         description: String
     *                         disabled: Boolean
     *                         dynamicReplacement: Boolean
     *                         entityTypes: [
     *                             String
     *                         ]
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         regex: {
     *                             maxDigits: Integer
     *                             maxLetters: Integer
     *                             minDashes: Integer
     *                             minDigits: Integer
     *                             minDigitsOrLetters: Integer
     *                             minDots: Integer
     *                             minHex: Integer
     *                             minLetters: Integer
     *                             minUnderscores: Integer
     *                             options: Integer
     *                             regexStr: String
     *                         }
     *                         replaceWith: String
     *                         version: Double
     *                     }
     *                 ]
     *                 regexReplacers: [
     *                     {
     *                         condition: String
     *                         createdBy: String
     *                         description: String
     *                         disabled: boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         regex: (recursive schema, see regex above)
     *                         replaceWith: String
     *                     }
     *                 ]
     *                 rejectedPatterns: [
     *                     (recursive schema, see above)
     *                 ]
     *                 scopedRules: [
     *                     {
     *                         bindingUrl: String
     *                         rules: [
     *                             {
     *                                 displayName: String
     *                                 isResourceSet: Boolean
     *                                 lastUpdatedTimestamp: Long
     *                                 name: String
     *                                 qualifiedName: String
     *                             }
     *                         ]
     *                         storeType: String
     *                     }
     *                 ]
     *                 version: Integer
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return paged list of account resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listResourceSetRulesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listResourceSetRulesNext(
                                        nextLink, this.client.getEndpoint(), requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             advancedResourceSet: {
     *                 modifiedAt: String
     *                 resourceSetProcessing: String(Default/Advanced)
     *             }
     *             name: String
     *             pathPatternConfig: {
     *                 acceptedPatterns: [
     *                     {
     *                         createdBy: String
     *                         filterType: String(Pattern/Regex)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         path: String
     *                     }
     *                 ]
     *                 complexReplacers: [
     *                     {
     *                         createdBy: String
     *                         description: String
     *                         disabled: Boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         typeName: String
     *                     }
     *                 ]
     *                 createdBy: String
     *                 enableDefaultPatterns: boolean
     *                 lastUpdatedTimestamp: Long
     *                 modifiedBy: String
     *                 normalizationRules: [
     *                     {
     *                         description: String
     *                         disabled: Boolean
     *                         dynamicReplacement: Boolean
     *                         entityTypes: [
     *                             String
     *                         ]
     *                         lastUpdatedTimestamp: Long
     *                         name: String
     *                         regex: {
     *                             maxDigits: Integer
     *                             maxLetters: Integer
     *                             minDashes: Integer
     *                             minDigits: Integer
     *                             minDigitsOrLetters: Integer
     *                             minDots: Integer
     *                             minHex: Integer
     *                             minLetters: Integer
     *                             minUnderscores: Integer
     *                             options: Integer
     *                             regexStr: String
     *                         }
     *                         replaceWith: String
     *                         version: Double
     *                     }
     *                 ]
     *                 regexReplacers: [
     *                     {
     *                         condition: String
     *                         createdBy: String
     *                         description: String
     *                         disabled: boolean
     *                         disableRecursiveReplacerApplication: Boolean
     *                         doNotReplaceRegex: (recursive schema, see doNotReplaceRegex above)
     *                         lastUpdatedTimestamp: Long
     *                         modifiedBy: String
     *                         name: String
     *                         regex: (recursive schema, see regex above)
     *                         replaceWith: String
     *                     }
     *                 ]
     *                 rejectedPatterns: [
     *                     (recursive schema, see above)
     *                 ]
     *                 scopedRules: [
     *                     {
     *                         bindingUrl: String
     *                         rules: [
     *                             {
     *                                 displayName: String
     *                                 isResourceSet: Boolean
     *                                 lastUpdatedTimestamp: Long
     *                                 name: String
     *                                 qualifiedName: String
     *                             }
     *                         ]
     *                         storeType: String
     *                     }
     *                 ]
     *                 version: Integer
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return paged list of account resources along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listResourceSetRulesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listResourceSetRulesNext(nextLink, this.client.getEndpoint(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
