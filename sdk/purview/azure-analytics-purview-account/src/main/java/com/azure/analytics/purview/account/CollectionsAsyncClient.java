// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.account;

import com.azure.analytics.purview.account.implementation.CollectionsImpl;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous PurviewAccountClient type. */
@ServiceClient(builder = PurviewAccountClientBuilder.class, isAsync = true)
public final class CollectionsAsyncClient {
    private final CollectionsImpl serviceClient;

    /**
     * Initializes an instance of Collections client.
     *
     * @param serviceClient the service client implementation.
     */
    CollectionsAsyncClient(CollectionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get a collection.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     collectionProvisioningState: String(Unknown/Creating/Moving/Deleting/Failed/Succeeded)
     *     description: String
     *     friendlyName: String
     *     name: String
     *     parentCollection: {
     *         referenceName: String
     *         type: String
     *     }
     *     systemData: {
     *         createdAt: String
     *         createdBy: String
     *         createdByType: String(User/Application/ManagedIdentity/Key)
     *         lastModifiedAt: String
     *         lastModifiedBy: String
     *         lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *     }
     * }
     * }</pre>
     *
     * @param collectionName The collectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String collectionName, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(collectionName, requestOptions);
    }

    /**
     * Get a collection.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     collectionProvisioningState: String(Unknown/Creating/Moving/Deleting/Failed/Succeeded)
     *     description: String
     *     friendlyName: String
     *     name: String
     *     parentCollection: {
     *         referenceName: String
     *         type: String
     *     }
     *     systemData: {
     *         createdAt: String
     *         createdBy: String
     *         createdByType: String(User/Application/ManagedIdentity/Key)
     *         lastModifiedAt: String
     *         lastModifiedBy: String
     *         lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *     }
     * }
     * }</pre>
     *
     * @param collectionName The collectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return a collection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> get(String collectionName, RequestOptions requestOptions) {
        return this.serviceClient.getAsync(collectionName, requestOptions);
    }

    /**
     * Creates or updates a collection entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     collectionProvisioningState: String(Unknown/Creating/Moving/Deleting/Failed/Succeeded)
     *     description: String
     *     friendlyName: String
     *     name: String
     *     parentCollection: {
     *         referenceName: String
     *         type: String
     *     }
     *     systemData: {
     *         createdAt: String
     *         createdBy: String
     *         createdByType: String(User/Application/ManagedIdentity/Key)
     *         lastModifiedAt: String
     *         lastModifiedBy: String
     *         lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param collectionName The collectionName parameter.
     * @param collection Collection resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return collection resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(
            String collectionName, BinaryData collection, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponseAsync(collectionName, collection, requestOptions);
    }

    /**
     * Creates or updates a collection entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     collectionProvisioningState: String(Unknown/Creating/Moving/Deleting/Failed/Succeeded)
     *     description: String
     *     friendlyName: String
     *     name: String
     *     parentCollection: {
     *         referenceName: String
     *         type: String
     *     }
     *     systemData: {
     *         createdAt: String
     *         createdBy: String
     *         createdByType: String(User/Application/ManagedIdentity/Key)
     *         lastModifiedAt: String
     *         lastModifiedBy: String
     *         lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param collectionName The collectionName parameter.
     * @param collection Collection resource.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return collection resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> createOrUpdate(
            String collectionName, BinaryData collection, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateAsync(collectionName, collection, requestOptions);
    }

    /**
     * Deletes a Collection entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param collectionName The collectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String collectionName, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(collectionName, requestOptions);
    }

    /**
     * Deletes a Collection entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     * </table>
     *
     * @param collectionName The collectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String collectionName, RequestOptions requestOptions) {
        return this.serviceClient.deleteAsync(collectionName, requestOptions);
    }

    /**
     * List the collections in the account.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             collectionProvisioningState: String(Unknown/Creating/Moving/Deleting/Failed/Succeeded)
     *             description: String
     *             friendlyName: String
     *             name: String
     *             parentCollection: {
     *                 referenceName: String
     *                 type: String
     *             }
     *             systemData: {
     *                 createdAt: String
     *                 createdBy: String
     *                 createdByType: String(User/Application/ManagedIdentity/Key)
     *                 lastModifiedAt: String
     *                 lastModifiedBy: String
     *                 lastModifiedByType: String(User/Application/ManagedIdentity/Key)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return paged list of collections.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listByAccount(RequestOptions requestOptions) {
        return this.serviceClient.listByAccountAsync(requestOptions);
    }

    /**
     * Lists the child collections names in the collection.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     count: Long
     *     nextLink: String
     *     value: [
     *         {
     *             friendlyName: String
     *             name: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param collectionName The collectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return paged list of collections.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getChildCollectionNames(String collectionName, RequestOptions requestOptions) {
        return this.serviceClient.getChildCollectionNamesAsync(collectionName, requestOptions);
    }

    /**
     * Gets the parent name and parent friendly name chains that represent the collection path.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     parentFriendlyNameChain: [
     *         String
     *     ]
     *     parentNameChain: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param collectionName The collectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the parent name and parent friendly name chains that represent the collection path.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCollectionPathWithResponse(
            String collectionName, RequestOptions requestOptions) {
        return this.serviceClient.getCollectionPathWithResponseAsync(collectionName, requestOptions);
    }

    /**
     * Gets the parent name and parent friendly name chains that represent the collection path.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>apiVersion</td><td>String</td><td>Yes</td><td>Api Version</td></tr>
     *     <tr><td>skipToken</td><td>String</td><td>No</td><td>The skipToken parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     parentFriendlyNameChain: [
     *         String
     *     ]
     *     parentNameChain: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param collectionName The collectionName parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return the parent name and parent friendly name chains that represent the collection path.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getCollectionPath(String collectionName, RequestOptions requestOptions) {
        return this.serviceClient.getCollectionPathAsync(collectionName, requestOptions);
    }
}
