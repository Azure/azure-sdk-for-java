// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.share.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in EmailRegistrations. */
public final class EmailRegistrationsImpl {
    /** The proxy service used to perform REST calls. */
    private final EmailRegistrationsService service;

    /** The service client containing this operation class. */
    private final PurviewShareClientImpl client;

    /**
     * Initializes an instance of EmailRegistrationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    EmailRegistrationsImpl(PurviewShareClientImpl client) {
        this.service =
                RestProxy.create(
                        EmailRegistrationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PurviewShareClientEmailRegistrations to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PurviewShareClientEm")
    private interface EmailRegistrationsService {
        @Post("/activateEmail")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> activate(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData tenantEmailRegistration,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/registerEmail")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> register(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Activates the tenant and email combination using the activation code received.
     *
     * <p>Activates the email registration for current tenant.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String (Optional)
     *     properties (Optional): {
     *         activationCode: String (Required)
     *         activationExpiration: OffsetDateTime (Optional)
     *         email: String (Optional)
     *         registrationStatus: String(ActivationPending/Activated/ActivationAttemptsExhausted) (Optional)
     *         tenantId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String (Optional)
     *     properties (Optional): {
     *         activationCode: String (Required)
     *         activationExpiration: OffsetDateTime (Optional)
     *         email: String (Optional)
     *         registrationStatus: String(ActivationPending/Activated/ActivationAttemptsExhausted) (Optional)
     *         tenantId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param tenantEmailRegistration The tenant email registration payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a tenant email registration data transfer object along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> activateWithResponseAsync(
            BinaryData tenantEmailRegistration, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.activate(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                tenantEmailRegistration,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Activates the tenant and email combination using the activation code received.
     *
     * <p>Activates the email registration for current tenant.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String (Optional)
     *     properties (Optional): {
     *         activationCode: String (Required)
     *         activationExpiration: OffsetDateTime (Optional)
     *         email: String (Optional)
     *         registrationStatus: String(ActivationPending/Activated/ActivationAttemptsExhausted) (Optional)
     *         tenantId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String (Optional)
     *     properties (Optional): {
     *         activationCode: String (Required)
     *         activationExpiration: OffsetDateTime (Optional)
     *         email: String (Optional)
     *         registrationStatus: String(ActivationPending/Activated/ActivationAttemptsExhausted) (Optional)
     *         tenantId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param tenantEmailRegistration The tenant email registration payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a tenant email registration data transfer object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> activateWithResponse(
            BinaryData tenantEmailRegistration, RequestOptions requestOptions) {
        return activateWithResponseAsync(tenantEmailRegistration, requestOptions).block();
    }

    /**
     * Registers the tenant and email combination for activation.
     *
     * <p>Register an email for the current tenant.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String (Optional)
     *     properties (Optional): {
     *         activationCode: String (Required)
     *         activationExpiration: OffsetDateTime (Optional)
     *         email: String (Optional)
     *         registrationStatus: String(ActivationPending/Activated/ActivationAttemptsExhausted) (Optional)
     *         tenantId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a tenant email registration data transfer object along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> registerWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.register(
                                this.client.getEndpoint(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Registers the tenant and email combination for activation.
     *
     * <p>Register an email for the current tenant.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     name: String (Optional)
     *     type: String (Optional)
     *     properties (Optional): {
     *         activationCode: String (Required)
     *         activationExpiration: OffsetDateTime (Optional)
     *         email: String (Optional)
     *         registrationStatus: String(ActivationPending/Activated/ActivationAttemptsExhausted) (Optional)
     *         tenantId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a tenant email registration data transfer object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> registerWithResponse(RequestOptions requestOptions) {
        return registerWithResponseAsync(requestOptions).block();
    }
}
