// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/**
 * Blob Sink.
 */
@Fluent
public final class BlobAccountSink extends Sink {
    /*
     * The types of asset.
     */
    private StoreKind storeKind = StoreKind.BLOB_STORAGE_ACCOUNT_STORE_KIND;

    /*
     * Properties for blob storage account
     */
    private BlobAccountSinkProperties properties;

    /**
     * Creates an instance of BlobAccountSink class.
     */
    public BlobAccountSink() {
    }

    /**
     * Get the storeKind property: The types of asset.
     *
     * @return the storeKind value.
     */
    @Override
    public StoreKind getStoreKind() {
        return this.storeKind;
    }

    /**
     * Get the properties property: Properties for blob storage account.
     *
     * @return the properties value.
     */
    public BlobAccountSinkProperties getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties for blob storage account.
     *
     * @param properties the properties value to set.
     * @return the BlobAccountSink object itself.
     */
    public BlobAccountSink setProperties(BlobAccountSinkProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlobAccountSink setStoreReference(StoreReference storeReference) {
        super.setStoreReference(storeReference);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("storeReference", getStoreReference());
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeStringField("storeKind", this.storeKind == null ? null : this.storeKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlobAccountSink from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlobAccountSink if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlobAccountSink.
     */
    public static BlobAccountSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobAccountSink deserializedBlobAccountSink = new BlobAccountSink();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storeReference".equals(fieldName)) {
                    deserializedBlobAccountSink.setStoreReference(StoreReference.fromJson(reader));
                } else if ("properties".equals(fieldName)) {
                    deserializedBlobAccountSink.properties = BlobAccountSinkProperties.fromJson(reader);
                } else if ("storeKind".equals(fieldName)) {
                    deserializedBlobAccountSink.storeKind = StoreKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlobAccountSink;
        });
    }
}
