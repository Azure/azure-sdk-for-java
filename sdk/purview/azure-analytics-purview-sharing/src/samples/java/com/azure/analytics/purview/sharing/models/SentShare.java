// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/**
 * A sent share data transfer object.
 */
@Immutable
public class SentShare extends ProxyResource {
    /*
     * Defines the supported types for share.
     */
    private ShareKind shareKind = ShareKind.fromString("SentShare");

    /*
     * Type of the resource.
     */
    private String type;

    /*
     * The unique id of the resource.
     */
    private String id;

    /**
     * Creates an instance of SentShare class.
     */
    public SentShare() {
    }

    /**
     * Get the shareKind property: Defines the supported types for share.
     *
     * @return the shareKind value.
     */
    public ShareKind getShareKind() {
        return this.shareKind;
    }

    /**
     * Get the type property: Type of the resource.
     *
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the id property: The unique id of the resource.
     *
     * @return the id value.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("shareKind", this.shareKind == null ? null : this.shareKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SentShare from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SentShare if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SentShare.
     */
    public static SentShare fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("shareKind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("InPlace".equals(discriminatorValue)) {
                    return InPlaceSentShare.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static SentShare fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SentShare deserializedSentShare = new SentShare();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSentShare.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSentShare.type = reader.getString();
                } else if ("shareKind".equals(fieldName)) {
                    deserializedSentShare.shareKind = ShareKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSentShare;
        });
    }
}
