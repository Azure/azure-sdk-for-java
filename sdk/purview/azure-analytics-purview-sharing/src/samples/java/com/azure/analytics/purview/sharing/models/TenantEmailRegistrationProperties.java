// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Tenant email registration property bag.
 */
@Fluent
public final class TenantEmailRegistrationProperties implements JsonSerializable<TenantEmailRegistrationProperties> {
    /*
     * Activation code for the registration.
     */
    private String activationCode;

    /*
     * Date of the activation expiration. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime activationExpiration;

    /*
     * The email to register.
     */
    private String email;

    /*
     * Defines the supported types for registration.
     */
    private TenantEmailRegistrationStatus registrationStatus;

    /*
     * State of the resource
     */
    private State state;

    /*
     * The tenant id to register.
     */
    private String tenantId;

    /**
     * Creates an instance of TenantEmailRegistrationProperties class.
     */
    public TenantEmailRegistrationProperties() {
    }

    /**
     * Get the activationCode property: Activation code for the registration.
     *
     * @return the activationCode value.
     */
    public String getActivationCode() {
        return this.activationCode;
    }

    /**
     * Set the activationCode property: Activation code for the registration.
     *
     * @param activationCode the activationCode value to set.
     * @return the TenantEmailRegistrationProperties object itself.
     */
    public TenantEmailRegistrationProperties setActivationCode(String activationCode) {
        this.activationCode = activationCode;
        return this;
    }

    /**
     * Get the activationExpiration property: Date of the activation expiration. Represented in the standard date-time
     * format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the activationExpiration value.
     */
    public OffsetDateTime getActivationExpiration() {
        return this.activationExpiration;
    }

    /**
     * Get the email property: The email to register.
     *
     * @return the email value.
     */
    public String getEmail() {
        return this.email;
    }

    /**
     * Get the registrationStatus property: Defines the supported types for registration.
     *
     * @return the registrationStatus value.
     */
    public TenantEmailRegistrationStatus getRegistrationStatus() {
        return this.registrationStatus;
    }

    /**
     * Get the state property: State of the resource.
     *
     * @return the state value.
     */
    public State getState() {
        return this.state;
    }

    /**
     * Get the tenantId property: The tenant id to register.
     *
     * @return the tenantId value.
     */
    public String getTenantId() {
        return this.tenantId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activationCode", this.activationCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TenantEmailRegistrationProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TenantEmailRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TenantEmailRegistrationProperties.
     */
    public static TenantEmailRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TenantEmailRegistrationProperties deserializedTenantEmailRegistrationProperties
                = new TenantEmailRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activationCode".equals(fieldName)) {
                    deserializedTenantEmailRegistrationProperties.activationCode = reader.getString();
                } else if ("activationExpiration".equals(fieldName)) {
                    deserializedTenantEmailRegistrationProperties.activationExpiration = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("email".equals(fieldName)) {
                    deserializedTenantEmailRegistrationProperties.email = reader.getString();
                } else if ("registrationStatus".equals(fieldName)) {
                    deserializedTenantEmailRegistrationProperties.registrationStatus
                        = TenantEmailRegistrationStatus.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedTenantEmailRegistrationProperties.state = State.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedTenantEmailRegistrationProperties.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTenantEmailRegistrationProperties;
        });
    }
}
