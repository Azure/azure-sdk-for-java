// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/**
 * A tenant email registration data transfer object.
 */
@Fluent
public final class TenantEmailRegistration extends ProxyResource {
    /*
     * Tenant email registration property bag.
     */
    private TenantEmailRegistrationProperties properties;

    /*
     * Type of the resource.
     */
    private String type;

    /*
     * The unique id of the resource.
     */
    private String id;

    /**
     * Creates an instance of TenantEmailRegistration class.
     */
    public TenantEmailRegistration() {
    }

    /**
     * Get the properties property: Tenant email registration property bag.
     *
     * @return the properties value.
     */
    public TenantEmailRegistrationProperties getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Tenant email registration property bag.
     *
     * @param properties the properties value to set.
     * @return the TenantEmailRegistration object itself.
     */
    public TenantEmailRegistration setProperties(TenantEmailRegistrationProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the type property: Type of the resource.
     *
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the id property: The unique id of the resource.
     *
     * @return the id value.
     */
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TenantEmailRegistration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TenantEmailRegistration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TenantEmailRegistration.
     */
    public static TenantEmailRegistration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TenantEmailRegistration deserializedTenantEmailRegistration = new TenantEmailRegistration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTenantEmailRegistration.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTenantEmailRegistration.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedTenantEmailRegistration.properties = TenantEmailRegistrationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTenantEmailRegistration;
        });
    }
}
