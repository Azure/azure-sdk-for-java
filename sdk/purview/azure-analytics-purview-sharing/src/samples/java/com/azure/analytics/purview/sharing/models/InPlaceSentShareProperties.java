// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Properties for InPlace sent share.
 */
@Fluent
public final class InPlaceSentShareProperties implements JsonSerializable<InPlaceSentShareProperties> {
    /*
     * A class for sent share artifact.
     */
    private Artifact artifact;

    /*
     * Time at which the sent share was created. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime createdAt;

    /*
     * List of shares on which the sent share depends.
     */
    private List<UUID> dependsOn;

    /*
     * Sent share description.
     */
    private String description;

    /*
     * The name of the sent share
     */
    private String displayName;

    /*
     * Email of the sender who created the sent share.
     */
    private String senderEmail;

    /*
     * Name of the sender who created the sent share.
     */
    private String senderName;

    /*
     * Tenant name of the sender who created the sent share.
     */
    private String senderTenantName;

    /*
     * State of the resource
     */
    private State state;

    /**
     * Creates an instance of InPlaceSentShareProperties class.
     */
    public InPlaceSentShareProperties() {
    }

    /**
     * Get the artifact property: A class for sent share artifact.
     *
     * @return the artifact value.
     */
    public Artifact getArtifact() {
        return this.artifact;
    }

    /**
     * Set the artifact property: A class for sent share artifact.
     *
     * @param artifact the artifact value to set.
     * @return the InPlaceSentShareProperties object itself.
     */
    public InPlaceSentShareProperties setArtifact(Artifact artifact) {
        this.artifact = artifact;
        return this;
    }

    /**
     * Get the createdAt property: Time at which the sent share was created. Represented in the standard date-time
     * format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the createdAt value.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the dependsOn property: List of shares on which the sent share depends.
     *
     * @return the dependsOn value.
     */
    public List<UUID> getDependsOn() {
        return this.dependsOn;
    }

    /**
     * Get the description property: Sent share description.
     *
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Sent share description.
     *
     * @param description the description value to set.
     * @return the InPlaceSentShareProperties object itself.
     */
    public InPlaceSentShareProperties setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: The name of the sent share.
     *
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name of the sent share.
     *
     * @param displayName the displayName value to set.
     * @return the InPlaceSentShareProperties object itself.
     */
    public InPlaceSentShareProperties setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the senderEmail property: Email of the sender who created the sent share.
     *
     * @return the senderEmail value.
     */
    public String getSenderEmail() {
        return this.senderEmail;
    }

    /**
     * Get the senderName property: Name of the sender who created the sent share.
     *
     * @return the senderName value.
     */
    public String getSenderName() {
        return this.senderName;
    }

    /**
     * Get the senderTenantName property: Tenant name of the sender who created the sent share.
     *
     * @return the senderTenantName value.
     */
    public String getSenderTenantName() {
        return this.senderTenantName;
    }

    /**
     * Get the state property: State of the resource.
     *
     * @return the state value.
     */
    public State getState() {
        return this.state;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("artifact", this.artifact);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InPlaceSentShareProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InPlaceSentShareProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InPlaceSentShareProperties.
     */
    public static InPlaceSentShareProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InPlaceSentShareProperties deserializedInPlaceSentShareProperties = new InPlaceSentShareProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifact".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.artifact = Artifact.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.displayName = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("dependsOn".equals(fieldName)) {
                    List<UUID> dependsOn = reader.readArray(
                        reader1 -> reader1.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString())));
                    deserializedInPlaceSentShareProperties.dependsOn = dependsOn;
                } else if ("description".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.description = reader.getString();
                } else if ("senderEmail".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.senderEmail = reader.getString();
                } else if ("senderName".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.senderName = reader.getString();
                } else if ("senderTenantName".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.senderTenantName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedInPlaceSentShareProperties.state = State.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInPlaceSentShareProperties;
        });
    }
}
