// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import java.util.UUID;

/**
 * Properties of the service invitation type.
 */
@Fluent
public final class ServiceInvitationProperties implements JsonSerializable<ServiceInvitationProperties> {
    /*
     * The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime expirationDate;

    /*
     * Email address of the sender.
     */
    private String senderEmail;

    /*
     * Name of the sender
     */
    private String senderName;

    /*
     * Tenant name of the sender
     */
    private String senderTenantName;

    /*
     * Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime sentAt;

    /*
     * Share status.
     */
    private ShareStatus shareStatus;

    /*
     * State of the resource
     */
    private State state;

    /*
     * The target azure active directory id the invitation is sent to.
     */
    private UUID targetActiveDirectoryId;

    /*
     * The target object id in the azure active directory the invitation is sent to.
     */
    private UUID targetObjectId;

    /**
     * Creates an instance of ServiceInvitationProperties class.
     */
    public ServiceInvitationProperties() {
    }

    /**
     * Get the expirationDate property: The time at which the invitation will expire. Represented in the standard
     * date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime getExpirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate property: The time at which the invitation will expire. Represented in the standard
     * date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @param expirationDate the expirationDate value to set.
     * @return the ServiceInvitationProperties object itself.
     */
    public ServiceInvitationProperties setExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Get the senderEmail property: Email address of the sender.
     *
     * @return the senderEmail value.
     */
    public String getSenderEmail() {
        return this.senderEmail;
    }

    /**
     * Get the senderName property: Name of the sender.
     *
     * @return the senderName value.
     */
    public String getSenderName() {
        return this.senderName;
    }

    /**
     * Get the senderTenantName property: Tenant name of the sender.
     *
     * @return the senderTenantName value.
     */
    public String getSenderTenantName() {
        return this.senderTenantName;
    }

    /**
     * Get the sentAt property: Gets the time at which the invitation was sent. Represented in the standard date-time
     * format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the sentAt value.
     */
    public OffsetDateTime getSentAt() {
        return this.sentAt;
    }

    /**
     * Get the shareStatus property: Share status.
     *
     * @return the shareStatus value.
     */
    public ShareStatus getShareStatus() {
        return this.shareStatus;
    }

    /**
     * Set the shareStatus property: Share status.
     *
     * @param shareStatus the shareStatus value to set.
     * @return the ServiceInvitationProperties object itself.
     */
    public ServiceInvitationProperties setShareStatus(ShareStatus shareStatus) {
        this.shareStatus = shareStatus;
        return this;
    }

    /**
     * Get the state property: State of the resource.
     *
     * @return the state value.
     */
    public State getState() {
        return this.state;
    }

    /**
     * Get the targetActiveDirectoryId property: The target azure active directory id the invitation is sent to.
     *
     * @return the targetActiveDirectoryId value.
     */
    public UUID getTargetActiveDirectoryId() {
        return this.targetActiveDirectoryId;
    }

    /**
     * Set the targetActiveDirectoryId property: The target azure active directory id the invitation is sent to.
     *
     * @param targetActiveDirectoryId the targetActiveDirectoryId value to set.
     * @return the ServiceInvitationProperties object itself.
     */
    public ServiceInvitationProperties setTargetActiveDirectoryId(UUID targetActiveDirectoryId) {
        this.targetActiveDirectoryId = targetActiveDirectoryId;
        return this;
    }

    /**
     * Get the targetObjectId property: The target object id in the azure active directory the invitation is sent to.
     *
     * @return the targetObjectId value.
     */
    public UUID getTargetObjectId() {
        return this.targetObjectId;
    }

    /**
     * Set the targetObjectId property: The target object id in the azure active directory the invitation is sent to.
     *
     * @param targetObjectId the targetObjectId value to set.
     * @return the ServiceInvitationProperties object itself.
     */
    public ServiceInvitationProperties setTargetObjectId(UUID targetObjectId) {
        this.targetObjectId = targetObjectId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetActiveDirectoryId", Objects.toString(this.targetActiveDirectoryId, null));
        jsonWriter.writeStringField("targetObjectId", Objects.toString(this.targetObjectId, null));
        jsonWriter.writeStringField("expirationDate",
            this.expirationDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDate));
        jsonWriter.writeStringField("shareStatus", this.shareStatus == null ? null : this.shareStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceInvitationProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceInvitationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceInvitationProperties.
     */
    public static ServiceInvitationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceInvitationProperties deserializedServiceInvitationProperties = new ServiceInvitationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetActiveDirectoryId".equals(fieldName)) {
                    deserializedServiceInvitationProperties.targetActiveDirectoryId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("targetObjectId".equals(fieldName)) {
                    deserializedServiceInvitationProperties.targetObjectId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedServiceInvitationProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("senderEmail".equals(fieldName)) {
                    deserializedServiceInvitationProperties.senderEmail = reader.getString();
                } else if ("senderName".equals(fieldName)) {
                    deserializedServiceInvitationProperties.senderName = reader.getString();
                } else if ("senderTenantName".equals(fieldName)) {
                    deserializedServiceInvitationProperties.senderTenantName = reader.getString();
                } else if ("sentAt".equals(fieldName)) {
                    deserializedServiceInvitationProperties.sentAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("shareStatus".equals(fieldName)) {
                    deserializedServiceInvitationProperties.shareStatus = ShareStatus.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedServiceInvitationProperties.state = State.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceInvitationProperties;
        });
    }
}
