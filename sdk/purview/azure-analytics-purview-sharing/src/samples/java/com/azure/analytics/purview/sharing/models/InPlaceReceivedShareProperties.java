// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of in place received share.
 */
@Fluent
public final class InPlaceReceivedShareProperties implements JsonSerializable<InPlaceReceivedShareProperties> {
    /*
     * Location of the shared Asset.
     */
    private String assetLocation;

    /*
     * The types of asset.
     */
    private StoreKind assetStoreKind;

    /*
     * Time at which the received share was created. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime createdAt;

    /*
     * Received Share Name
     */
    private String displayName;

    /*
     * The expiration date of the received share. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime expirationDate;

    /*
     * Email of the user/receiver who received the sent share invitation
     */
    private String receiverEmail;

    /*
     * Name of the user/receiver who received the sent share invitation
     */
    private String receiverName;

    /*
     * Tenant name of the user/receiver who received the sent share invitation
     */
    private String receiverTenantName;

    /*
     * Email of the sender who created the sent share invitation
     */
    private String senderEmail;

    /*
     * Name of the sender who created the sent share invitation
     */
    private String senderName;

    /*
     * Tenant name of the sender who created the sent share invitation
     */
    private String senderTenantName;

    /*
     * Share description.
     */
    private String sentShareDescription;

    /*
     * Time at which the sent share was shared. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime sharedAt;

    /*
     * Share status.
     */
    private ShareStatus shareStatus;

    /*
     * Holds details on the destination of the mapped artifact
     */
    private Sink sink;

    /*
     * State of the resource
     */
    private State state;

    /**
     * Creates an instance of InPlaceReceivedShareProperties class.
     */
    public InPlaceReceivedShareProperties() {
    }

    /**
     * Get the assetLocation property: Location of the shared Asset.
     *
     * @return the assetLocation value.
     */
    public String getAssetLocation() {
        return this.assetLocation;
    }

    /**
     * Get the assetStoreKind property: The types of asset.
     *
     * @return the assetStoreKind value.
     */
    public StoreKind getAssetStoreKind() {
        return this.assetStoreKind;
    }

    /**
     * Set the assetStoreKind property: The types of asset.
     *
     * @param assetStoreKind the assetStoreKind value to set.
     * @return the InPlaceReceivedShareProperties object itself.
     */
    public InPlaceReceivedShareProperties setAssetStoreKind(StoreKind assetStoreKind) {
        this.assetStoreKind = assetStoreKind;
        return this;
    }

    /**
     * Get the createdAt property: Time at which the received share was created. Represented in the standard date-time
     * format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the createdAt value.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the displayName property: Received Share Name.
     *
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Received Share Name.
     *
     * @param displayName the displayName value to set.
     * @return the InPlaceReceivedShareProperties object itself.
     */
    public InPlaceReceivedShareProperties setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the expirationDate property: The expiration date of the received share. Represented in the standard date-time
     * format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime getExpirationDate() {
        return this.expirationDate;
    }

    /**
     * Get the receiverEmail property: Email of the user/receiver who received the sent share invitation.
     *
     * @return the receiverEmail value.
     */
    public String getReceiverEmail() {
        return this.receiverEmail;
    }

    /**
     * Get the receiverName property: Name of the user/receiver who received the sent share invitation.
     *
     * @return the receiverName value.
     */
    public String getReceiverName() {
        return this.receiverName;
    }

    /**
     * Get the receiverTenantName property: Tenant name of the user/receiver who received the sent share invitation.
     *
     * @return the receiverTenantName value.
     */
    public String getReceiverTenantName() {
        return this.receiverTenantName;
    }

    /**
     * Get the senderEmail property: Email of the sender who created the sent share invitation.
     *
     * @return the senderEmail value.
     */
    public String getSenderEmail() {
        return this.senderEmail;
    }

    /**
     * Get the senderName property: Name of the sender who created the sent share invitation.
     *
     * @return the senderName value.
     */
    public String getSenderName() {
        return this.senderName;
    }

    /**
     * Get the senderTenantName property: Tenant name of the sender who created the sent share invitation.
     *
     * @return the senderTenantName value.
     */
    public String getSenderTenantName() {
        return this.senderTenantName;
    }

    /**
     * Get the sentShareDescription property: Share description.
     *
     * @return the sentShareDescription value.
     */
    public String getSentShareDescription() {
        return this.sentShareDescription;
    }

    /**
     * Get the sharedAt property: Time at which the sent share was shared. Represented in the standard date-time format
     * as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the sharedAt value.
     */
    public OffsetDateTime getSharedAt() {
        return this.sharedAt;
    }

    /**
     * Get the shareStatus property: Share status.
     *
     * @return the shareStatus value.
     */
    public ShareStatus getShareStatus() {
        return this.shareStatus;
    }

    /**
     * Set the shareStatus property: Share status.
     *
     * @param shareStatus the shareStatus value to set.
     * @return the InPlaceReceivedShareProperties object itself.
     */
    public InPlaceReceivedShareProperties setShareStatus(ShareStatus shareStatus) {
        this.shareStatus = shareStatus;
        return this;
    }

    /**
     * Get the sink property: Holds details on the destination of the mapped artifact.
     *
     * @return the sink value.
     */
    public Sink getSink() {
        return this.sink;
    }

    /**
     * Set the sink property: Holds details on the destination of the mapped artifact.
     *
     * @param sink the sink value to set.
     * @return the InPlaceReceivedShareProperties object itself.
     */
    public InPlaceReceivedShareProperties setSink(Sink sink) {
        this.sink = sink;
        return this;
    }

    /**
     * Get the state property: State of the resource.
     *
     * @return the state value.
     */
    public State getState() {
        return this.state;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assetStoreKind",
            this.assetStoreKind == null ? null : this.assetStoreKind.toString());
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("shareStatus", this.shareStatus == null ? null : this.shareStatus.toString());
        jsonWriter.writeJsonField("sink", this.sink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InPlaceReceivedShareProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InPlaceReceivedShareProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InPlaceReceivedShareProperties.
     */
    public static InPlaceReceivedShareProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InPlaceReceivedShareProperties deserializedInPlaceReceivedShareProperties
                = new InPlaceReceivedShareProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assetLocation".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.assetLocation = reader.getString();
                } else if ("assetStoreKind".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.assetStoreKind
                        = StoreKind.fromString(reader.getString());
                } else if ("createdAt".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.displayName = reader.getString();
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("receiverEmail".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.receiverEmail = reader.getString();
                } else if ("receiverName".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.receiverName = reader.getString();
                } else if ("receiverTenantName".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.receiverTenantName = reader.getString();
                } else if ("senderEmail".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.senderEmail = reader.getString();
                } else if ("senderName".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.senderName = reader.getString();
                } else if ("senderTenantName".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.senderTenantName = reader.getString();
                } else if ("sentShareDescription".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.sentShareDescription = reader.getString();
                } else if ("sharedAt".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.sharedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("shareStatus".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.shareStatus = ShareStatus.fromString(reader.getString());
                } else if ("sink".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.sink = Sink.fromJson(reader);
                } else if ("state".equals(fieldName)) {
                    deserializedInPlaceReceivedShareProperties.state = State.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInPlaceReceivedShareProperties;
        });
    }
}
