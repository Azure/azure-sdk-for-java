// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.sharing.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Properties of the user invitation type.
 */
@Fluent
public final class UserInvitationProperties implements JsonSerializable<UserInvitationProperties> {
    /*
     * The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime expirationDate;

    /*
     * Whether or not the recipient was notified via email.
     */
    private Boolean notify;

    /*
     * Email address of the sender.
     */
    private String senderEmail;

    /*
     * Name of the sender
     */
    private String senderName;

    /*
     * Tenant name of the sender
     */
    private String senderTenantName;

    /*
     * Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC
     * 3339](https://www.rfc-editor.org/rfc/rfc3339)
     */
    private OffsetDateTime sentAt;

    /*
     * Share status.
     */
    private ShareStatus shareStatus;

    /*
     * State of the resource
     */
    private State state;

    /*
     * The receiver email for the invitation is being sent.
     */
    private String targetEmail;

    /**
     * Creates an instance of UserInvitationProperties class.
     */
    public UserInvitationProperties() {
    }

    /**
     * Get the expirationDate property: The time at which the invitation will expire. Represented in the standard
     * date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the expirationDate value.
     */
    public OffsetDateTime getExpirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate property: The time at which the invitation will expire. Represented in the standard
     * date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @param expirationDate the expirationDate value to set.
     * @return the UserInvitationProperties object itself.
     */
    public UserInvitationProperties setExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Get the notify property: Whether or not the recipient was notified via email.
     *
     * @return the notify value.
     */
    public Boolean isNotify() {
        return this.notify;
    }

    /**
     * Set the notify property: Whether or not the recipient was notified via email.
     *
     * @param notify the notify value to set.
     * @return the UserInvitationProperties object itself.
     */
    public UserInvitationProperties setNotify(Boolean notify) {
        this.notify = notify;
        return this;
    }

    /**
     * Get the senderEmail property: Email address of the sender.
     *
     * @return the senderEmail value.
     */
    public String getSenderEmail() {
        return this.senderEmail;
    }

    /**
     * Get the senderName property: Name of the sender.
     *
     * @return the senderName value.
     */
    public String getSenderName() {
        return this.senderName;
    }

    /**
     * Get the senderTenantName property: Tenant name of the sender.
     *
     * @return the senderTenantName value.
     */
    public String getSenderTenantName() {
        return this.senderTenantName;
    }

    /**
     * Get the sentAt property: Gets the time at which the invitation was sent. Represented in the standard date-time
     * format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339).
     *
     * @return the sentAt value.
     */
    public OffsetDateTime getSentAt() {
        return this.sentAt;
    }

    /**
     * Get the shareStatus property: Share status.
     *
     * @return the shareStatus value.
     */
    public ShareStatus getShareStatus() {
        return this.shareStatus;
    }

    /**
     * Set the shareStatus property: Share status.
     *
     * @param shareStatus the shareStatus value to set.
     * @return the UserInvitationProperties object itself.
     */
    public UserInvitationProperties setShareStatus(ShareStatus shareStatus) {
        this.shareStatus = shareStatus;
        return this;
    }

    /**
     * Get the state property: State of the resource.
     *
     * @return the state value.
     */
    public State getState() {
        return this.state;
    }

    /**
     * Get the targetEmail property: The receiver email for the invitation is being sent.
     *
     * @return the targetEmail value.
     */
    public String getTargetEmail() {
        return this.targetEmail;
    }

    /**
     * Set the targetEmail property: The receiver email for the invitation is being sent.
     *
     * @param targetEmail the targetEmail value to set.
     * @return the UserInvitationProperties object itself.
     */
    public UserInvitationProperties setTargetEmail(String targetEmail) {
        this.targetEmail = targetEmail;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetEmail", this.targetEmail);
        jsonWriter.writeStringField("expirationDate",
            this.expirationDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDate));
        jsonWriter.writeBooleanField("notify", this.notify);
        jsonWriter.writeStringField("shareStatus", this.shareStatus == null ? null : this.shareStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserInvitationProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserInvitationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserInvitationProperties.
     */
    public static UserInvitationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserInvitationProperties deserializedUserInvitationProperties = new UserInvitationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetEmail".equals(fieldName)) {
                    deserializedUserInvitationProperties.targetEmail = reader.getString();
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedUserInvitationProperties.expirationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("notify".equals(fieldName)) {
                    deserializedUserInvitationProperties.notify = reader.getNullable(JsonReader::getBoolean);
                } else if ("senderEmail".equals(fieldName)) {
                    deserializedUserInvitationProperties.senderEmail = reader.getString();
                } else if ("senderName".equals(fieldName)) {
                    deserializedUserInvitationProperties.senderName = reader.getString();
                } else if ("senderTenantName".equals(fieldName)) {
                    deserializedUserInvitationProperties.senderTenantName = reader.getString();
                } else if ("sentAt".equals(fieldName)) {
                    deserializedUserInvitationProperties.sentAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("shareStatus".equals(fieldName)) {
                    deserializedUserInvitationProperties.shareStatus = ShareStatus.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedUserInvitationProperties.state = State.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserInvitationProperties;
        });
    }
}
