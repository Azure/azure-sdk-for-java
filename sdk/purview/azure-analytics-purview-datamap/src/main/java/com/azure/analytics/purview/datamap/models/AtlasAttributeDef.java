// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * class that captures details of a struct-attribute.
 */
@Fluent
public final class AtlasAttributeDef implements JsonSerializable<AtlasAttributeDef> {
    /*
     * single-valued attribute or multi-valued attribute.
     */
    @Generated
    private CardinalityValue cardinality;

    /*
     * An array of constraints.
     */
    @Generated
    private List<AtlasConstraintDef> constraints;

    /*
     * The default value of the attribute.
     */
    @Generated
    private String defaultValue;

    /*
     * The description of the attribute.
     */
    @Generated
    private String description;

    /*
     * Determines if it is included in notification.
     */
    @Generated
    private Boolean includeInNotification;

    /*
     * Determines if it is indexable.
     */
    @Generated
    private Boolean isIndexable;

    /*
     * Determines if it is optional.
     */
    @Generated
    private Boolean isOptional;

    /*
     * Determines if it unique.
     */
    @Generated
    private Boolean isUnique;

    /*
     * The name of the attribute.
     */
    @Generated
    private String name;

    /*
     * The options for the attribute.
     */
    @Generated
    private Map<String, String> options;

    /*
     * The name of the type.
     */
    @Generated
    private String typeName;

    /*
     * The maximum count of the values.
     */
    @Generated
    private Integer valuesMaxCount;

    /*
     * The minimum count of the values.
     */
    @Generated
    private Integer valuesMinCount;

    /**
     * Creates an instance of AtlasAttributeDef class.
     */
    @Generated
    public AtlasAttributeDef() {
    }

    /**
     * Get the cardinality property: single-valued attribute or multi-valued attribute.
     * 
     * @return the cardinality value.
     */
    @Generated
    public CardinalityValue getCardinality() {
        return this.cardinality;
    }

    /**
     * Set the cardinality property: single-valued attribute or multi-valued attribute.
     * 
     * @param cardinality the cardinality value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setCardinality(CardinalityValue cardinality) {
        this.cardinality = cardinality;
        return this;
    }

    /**
     * Get the constraints property: An array of constraints.
     * 
     * @return the constraints value.
     */
    @Generated
    public List<AtlasConstraintDef> getConstraints() {
        return this.constraints;
    }

    /**
     * Set the constraints property: An array of constraints.
     * 
     * @param constraints the constraints value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setConstraints(List<AtlasConstraintDef> constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the defaultValue property: The default value of the attribute.
     * 
     * @return the defaultValue value.
     */
    @Generated
    public String getDefaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: The default value of the attribute.
     * 
     * @param defaultValue the defaultValue value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Get the description property: The description of the attribute.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the attribute.
     * 
     * @param description the description value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the includeInNotification property: Determines if it is included in notification.
     * 
     * @return the includeInNotification value.
     */
    @Generated
    public Boolean isIncludeInNotification() {
        return this.includeInNotification;
    }

    /**
     * Set the includeInNotification property: Determines if it is included in notification.
     * 
     * @param includeInNotification the includeInNotification value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setIncludeInNotification(Boolean includeInNotification) {
        this.includeInNotification = includeInNotification;
        return this;
    }

    /**
     * Get the isIndexable property: Determines if it is indexable.
     * 
     * @return the isIndexable value.
     */
    @Generated
    public Boolean isIndexable() {
        return this.isIndexable;
    }

    /**
     * Set the isIndexable property: Determines if it is indexable.
     * 
     * @param isIndexable the isIndexable value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setIsIndexable(Boolean isIndexable) {
        this.isIndexable = isIndexable;
        return this;
    }

    /**
     * Get the isOptional property: Determines if it is optional.
     * 
     * @return the isOptional value.
     */
    @Generated
    public Boolean isOptional() {
        return this.isOptional;
    }

    /**
     * Set the isOptional property: Determines if it is optional.
     * 
     * @param isOptional the isOptional value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setIsOptional(Boolean isOptional) {
        this.isOptional = isOptional;
        return this;
    }

    /**
     * Get the isUnique property: Determines if it unique.
     * 
     * @return the isUnique value.
     */
    @Generated
    public Boolean isUnique() {
        return this.isUnique;
    }

    /**
     * Set the isUnique property: Determines if it unique.
     * 
     * @param isUnique the isUnique value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setIsUnique(Boolean isUnique) {
        this.isUnique = isUnique;
        return this;
    }

    /**
     * Get the name property: The name of the attribute.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the attribute.
     * 
     * @param name the name value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the options property: The options for the attribute.
     * 
     * @return the options value.
     */
    @Generated
    public Map<String, String> getOptions() {
        return this.options;
    }

    /**
     * Set the options property: The options for the attribute.
     * 
     * @param options the options value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setOptions(Map<String, String> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the typeName property: The name of the type.
     * 
     * @return the typeName value.
     */
    @Generated
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: The name of the type.
     * 
     * @param typeName the typeName value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the valuesMaxCount property: The maximum count of the values.
     * 
     * @return the valuesMaxCount value.
     */
    @Generated
    public Integer getValuesMaxCount() {
        return this.valuesMaxCount;
    }

    /**
     * Set the valuesMaxCount property: The maximum count of the values.
     * 
     * @param valuesMaxCount the valuesMaxCount value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setValuesMaxCount(Integer valuesMaxCount) {
        this.valuesMaxCount = valuesMaxCount;
        return this;
    }

    /**
     * Get the valuesMinCount property: The minimum count of the values.
     * 
     * @return the valuesMinCount value.
     */
    @Generated
    public Integer getValuesMinCount() {
        return this.valuesMinCount;
    }

    /**
     * Set the valuesMinCount property: The minimum count of the values.
     * 
     * @param valuesMinCount the valuesMinCount value to set.
     * @return the AtlasAttributeDef object itself.
     */
    @Generated
    public AtlasAttributeDef setValuesMinCount(Integer valuesMinCount) {
        this.valuesMinCount = valuesMinCount;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cardinality", this.cardinality == null ? null : this.cardinality.toString());
        jsonWriter.writeArrayField("constraints", this.constraints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("defaultValue", this.defaultValue);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("includeInNotification", this.includeInNotification);
        jsonWriter.writeBooleanField("isIndexable", this.isIndexable);
        jsonWriter.writeBooleanField("isOptional", this.isOptional);
        jsonWriter.writeBooleanField("isUnique", this.isUnique);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("options", this.options, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("typeName", this.typeName);
        jsonWriter.writeNumberField("valuesMaxCount", this.valuesMaxCount);
        jsonWriter.writeNumberField("valuesMinCount", this.valuesMinCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasAttributeDef from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasAttributeDef if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasAttributeDef.
     */
    @Generated
    public static AtlasAttributeDef fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasAttributeDef deserializedAtlasAttributeDef = new AtlasAttributeDef();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cardinality".equals(fieldName)) {
                    deserializedAtlasAttributeDef.cardinality = CardinalityValue.fromString(reader.getString());
                } else if ("constraints".equals(fieldName)) {
                    List<AtlasConstraintDef> constraints
                        = reader.readArray(reader1 -> AtlasConstraintDef.fromJson(reader1));
                    deserializedAtlasAttributeDef.constraints = constraints;
                } else if ("defaultValue".equals(fieldName)) {
                    deserializedAtlasAttributeDef.defaultValue = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAtlasAttributeDef.description = reader.getString();
                } else if ("includeInNotification".equals(fieldName)) {
                    deserializedAtlasAttributeDef.includeInNotification = reader.getNullable(JsonReader::getBoolean);
                } else if ("isIndexable".equals(fieldName)) {
                    deserializedAtlasAttributeDef.isIndexable = reader.getNullable(JsonReader::getBoolean);
                } else if ("isOptional".equals(fieldName)) {
                    deserializedAtlasAttributeDef.isOptional = reader.getNullable(JsonReader::getBoolean);
                } else if ("isUnique".equals(fieldName)) {
                    deserializedAtlasAttributeDef.isUnique = reader.getNullable(JsonReader::getBoolean);
                } else if ("name".equals(fieldName)) {
                    deserializedAtlasAttributeDef.name = reader.getString();
                } else if ("options".equals(fieldName)) {
                    Map<String, String> options = reader.readMap(reader1 -> reader1.getString());
                    deserializedAtlasAttributeDef.options = options;
                } else if ("typeName".equals(fieldName)) {
                    deserializedAtlasAttributeDef.typeName = reader.getString();
                } else if ("valuesMaxCount".equals(fieldName)) {
                    deserializedAtlasAttributeDef.valuesMaxCount = reader.getNullable(JsonReader::getInt);
                } else if ("valuesMinCount".equals(fieldName)) {
                    deserializedAtlasAttributeDef.valuesMinCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasAttributeDef;
        });
    }
}
