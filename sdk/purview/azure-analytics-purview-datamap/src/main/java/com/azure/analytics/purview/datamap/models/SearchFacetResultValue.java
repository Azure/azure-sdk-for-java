// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A facet list that consists of index fields assetType ,classification,
 * contactId, and label. When the facet is specified in the request, the value of
 * the facet is returned as an element of &#064;search.facets.
 */
@Immutable
public final class SearchFacetResultValue implements JsonSerializable<SearchFacetResultValue> {
    /*
     * Entity type
     */
    @Generated
    private List<SearchFacetItemValue> entityType;

    /*
     * Asset type
     */
    @Generated
    private List<SearchFacetItemValue> assetType;

    /*
     * Classification
     */
    @Generated
    private List<SearchFacetItemValue> classification;

    /*
     * Term
     */
    @Generated
    private List<SearchFacetItemValue> term;

    /*
     * Contact id
     */
    @Generated
    private List<SearchFacetItemValue> contactId;

    /*
     * Contact type
     */
    @Generated
    private List<SearchFacetItemValue> contactType;

    /*
     * Label
     */
    @Generated
    private List<SearchFacetItemValue> label;

    /*
     * Glossary type
     */
    @Generated
    private List<SearchFacetItemValue> glossaryType;

    /*
     * Term status
     */
    @Generated
    private List<SearchFacetItemValue> termStatus;

    /*
     * Term template
     */
    @Generated
    private List<SearchFacetItemValue> termTemplate;

    /**
     * Creates an instance of SearchFacetResultValue class.
     */
    @Generated
    private SearchFacetResultValue() {
    }

    /**
     * Get the entityType property: Entity type.
     * 
     * @return the entityType value.
     */
    @Generated
    public List<SearchFacetItemValue> getEntityType() {
        return this.entityType;
    }

    /**
     * Get the assetType property: Asset type.
     * 
     * @return the assetType value.
     */
    @Generated
    public List<SearchFacetItemValue> getAssetType() {
        return this.assetType;
    }

    /**
     * Get the classification property: Classification.
     * 
     * @return the classification value.
     */
    @Generated
    public List<SearchFacetItemValue> getClassification() {
        return this.classification;
    }

    /**
     * Get the term property: Term.
     * 
     * @return the term value.
     */
    @Generated
    public List<SearchFacetItemValue> getTerm() {
        return this.term;
    }

    /**
     * Get the contactId property: Contact id.
     * 
     * @return the contactId value.
     */
    @Generated
    public List<SearchFacetItemValue> getContactId() {
        return this.contactId;
    }

    /**
     * Get the contactType property: Contact type.
     * 
     * @return the contactType value.
     */
    @Generated
    public List<SearchFacetItemValue> getContactType() {
        return this.contactType;
    }

    /**
     * Get the label property: Label.
     * 
     * @return the label value.
     */
    @Generated
    public List<SearchFacetItemValue> getLabel() {
        return this.label;
    }

    /**
     * Get the glossaryType property: Glossary type.
     * 
     * @return the glossaryType value.
     */
    @Generated
    public List<SearchFacetItemValue> getGlossaryType() {
        return this.glossaryType;
    }

    /**
     * Get the termStatus property: Term status.
     * 
     * @return the termStatus value.
     */
    @Generated
    public List<SearchFacetItemValue> getTermStatus() {
        return this.termStatus;
    }

    /**
     * Get the termTemplate property: Term template.
     * 
     * @return the termTemplate value.
     */
    @Generated
    public List<SearchFacetItemValue> getTermTemplate() {
        return this.termTemplate;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("entityType", this.entityType, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("assetType", this.assetType, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("classification", this.classification,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("term", this.term, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("contactId", this.contactId, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("contactType", this.contactType, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("label", this.label, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("glossaryType", this.glossaryType, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("termStatus", this.termStatus, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("termTemplate", this.termTemplate, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchFacetResultValue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchFacetResultValue if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchFacetResultValue.
     */
    @Generated
    public static SearchFacetResultValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchFacetResultValue deserializedSearchFacetResultValue = new SearchFacetResultValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityType".equals(fieldName)) {
                    List<SearchFacetItemValue> entityType
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.entityType = entityType;
                } else if ("assetType".equals(fieldName)) {
                    List<SearchFacetItemValue> assetType
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.assetType = assetType;
                } else if ("classification".equals(fieldName)) {
                    List<SearchFacetItemValue> classification
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.classification = classification;
                } else if ("term".equals(fieldName)) {
                    List<SearchFacetItemValue> term
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.term = term;
                } else if ("contactId".equals(fieldName)) {
                    List<SearchFacetItemValue> contactId
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.contactId = contactId;
                } else if ("contactType".equals(fieldName)) {
                    List<SearchFacetItemValue> contactType
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.contactType = contactType;
                } else if ("label".equals(fieldName)) {
                    List<SearchFacetItemValue> label
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.label = label;
                } else if ("glossaryType".equals(fieldName)) {
                    List<SearchFacetItemValue> glossaryType
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.glossaryType = glossaryType;
                } else if ("termStatus".equals(fieldName)) {
                    List<SearchFacetItemValue> termStatus
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.termStatus = termStatus;
                } else if ("termTemplate".equals(fieldName)) {
                    List<SearchFacetItemValue> termTemplate
                        = reader.readArray(reader1 -> SearchFacetItemValue.fromJson(reader1));
                    deserializedSearchFacetResultValue.termTemplate = termTemplate;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchFacetResultValue;
        });
    }
}
