// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Glossaries.
 */
public final class GlossariesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GlossariesService service;

    /**
     * The service client containing this operation class.
     */
    private final PurviewDataMapClientImpl client;

    /**
     * Initializes an instance of GlossariesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GlossariesImpl(PurviewDataMapClientImpl client) {
        this.service
            = RestProxy.create(GlossariesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PurviewDataMapClientGlossaries to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}/datamap/api")
    @ServiceInterface(name = "PurviewDataMapClient")
    public interface GlossariesService {
        @Get("/atlas/v2/glossary")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData atlasGlossary, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData atlasGlossary, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/categories")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createCategories(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryCategory, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/categories")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createCategoriesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryCategory, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/category")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createCategory(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryCategory, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/category")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createCategorySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryCategory, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/category/{categoryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getCategory(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/category/{categoryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getCategorySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/category/{categoryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateCategory(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData glossaryCategory,
            RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/category/{categoryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateCategorySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData glossaryCategory,
            RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/category/{categoryGuid}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteCategory(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/category/{categoryGuid}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteCategorySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/category/{categoryGuid}/partial")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> partialUpdateCategory(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData partialUpdates,
            RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/category/{categoryGuid}/partial")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> partialUpdateCategorySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData partialUpdates,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/category/{categoryGuid}/related")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRelatedCategories(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/category/{categoryGuid}/related")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRelatedCategoriesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/category/{categoryGuid}/terms")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listCategoryTerms(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/category/{categoryGuid}/terms")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listCategoryTermsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("categoryGuid") String categoryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/term")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createTerm(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryTerm, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/term")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createTermSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryTerm, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/term/{termGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTerm(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/term/{termGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTermSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/term/{termGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateTerm(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData glossaryTerm,
            RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/term/{termGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateTermSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData glossaryTerm,
            RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/term/{termGuid}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTerm(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/term/{termGuid}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteTermSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/term/{termGuid}/partial")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> partialUpdateTerm(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData partialUpdates,
            RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/term/{termGuid}/partial")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> partialUpdateTermSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData partialUpdates,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/terms")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createTerms(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryTerm, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/terms")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createTermsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData glossaryTerm, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listEntitiesAssignedWithTerm(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listEntitiesAssignedWithTermSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> assignTermToEntities(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData relatedObjectIds,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> assignTermToEntitiesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData relatedObjectIds,
            RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTermAssignmentFromEntities(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData relatedObjectIds,
            RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteTermAssignmentFromEntitiesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData relatedObjectIds,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/terms/{termGuid}/related")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRelatedTerms(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/terms/{termGuid}/related")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listRelatedTermsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("termGuid") String termGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/{glossaryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData updatedGlossary,
            RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/{glossaryGuid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData updatedGlossary,
            RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/{glossaryGuid}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/glossary/{glossaryGuid}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("glossaryGuid") String glossaryGuid, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/categories")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listCategories(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/categories")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listCategoriesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/categories/headers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listCategoriesHeaders(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/categories/headers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listCategoriesHeadersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/detailed")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDetailed(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/detailed")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDetailedSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/{glossaryGuid}/partial")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> partialUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData partialUpdates,
            RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/glossary/{glossaryGuid}/partial")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> partialUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData partialUpdates,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/terms")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTerms(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/terms")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTermsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/terms/headers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTermHeaders(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/glossary/{glossaryGuid}/terms/headers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTermHeadersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("glossaryGuid") String glossaryGuid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Get all glossaries. Recommend using limit/offset to get pagination result.
     * Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
     * separately using
     * 
     * 'GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/terms'
     * and
     * 
     * 'GET '/datamap/api/atlas/v2/glossary/{glossaryGuid}/categories'.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * <tr>
     * <td>ignoreTermsAndCategories</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether ignore terms and categories</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         language: String (Optional)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         usage: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all glossaries along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.list(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Get all glossaries. Recommend using limit/offset to get pagination result.
     * Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
     * separately using
     * 
     * 'GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/terms'
     * and
     * 
     * 'GET '/datamap/api/atlas/v2/glossary/{glossaryGuid}/categories'.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * <tr>
     * <td>ignoreTermsAndCategories</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether ignore terms and categories</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         language: String (Optional)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         usage: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all glossaries along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Create a glossary.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param atlasGlossary Glossary definition, terms &amp; categories can be anchored to a glossary.
     * Using
     * the anchor attribute when creating the Term/Category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(BinaryData atlasGlossary, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.create(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, atlasGlossary, requestOptions, context));
    }

    /**
     * Create a glossary.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param atlasGlossary Glossary definition, terms &amp; categories can be anchored to a glossary.
     * Using
     * the anchor attribute when creating the Term/Category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData atlasGlossary, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            atlasGlossary, requestOptions, Context.NONE);
    }

    /**
     * Create glossary category in bulk.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryCategory An array of glossary category definitions to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createCategoriesWithResponseAsync(BinaryData glossaryCategory,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createCategories(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, glossaryCategory, requestOptions, context));
    }

    /**
     * Create glossary category in bulk.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryCategory An array of glossary category definitions to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCategoriesWithResponse(BinaryData glossaryCategory,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createCategoriesSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accept, glossaryCategory, requestOptions, Context.NONE);
    }

    /**
     * Create a glossary category.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param glossaryCategory The glossary category definition. A category must be anchored to a Glossary
     * when creating.
     * Optionally, terms belonging to the category and the hierarchy
     * can also be defined during creation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createCategoryWithResponseAsync(BinaryData glossaryCategory,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createCategory(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, glossaryCategory, requestOptions, context));
    }

    /**
     * Create a glossary category.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param glossaryCategory The glossary category definition. A category must be anchored to a Glossary
     * when creating.
     * Optionally, terms belonging to the category and the hierarchy
     * can also be defined during creation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCategoryWithResponse(BinaryData glossaryCategory, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createCategorySync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accept, glossaryCategory, requestOptions, Context.NONE);
    }

    /**
     * Get specific glossary category by its GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specific glossary category by its GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCategoryWithResponseAsync(String categoryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getCategory(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), categoryGuid, accept, requestOptions, context));
    }

    /**
     * Get specific glossary category by its GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specific glossary category by its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCategoryWithResponse(String categoryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getCategorySync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            categoryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Update the given glossary category by its GUID.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param glossaryCategory The glossary category to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateCategoryWithResponseAsync(String categoryGuid, BinaryData glossaryCategory,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.updateCategory(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                categoryGuid, accept, glossaryCategory, requestOptions, context));
    }

    /**
     * Update the given glossary category by its GUID.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param glossaryCategory The glossary category to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateCategoryWithResponse(String categoryGuid, BinaryData glossaryCategory,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateCategorySync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            categoryGuid, accept, glossaryCategory, requestOptions, Context.NONE);
    }

    /**
     * Delete a glossary category.
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCategoryWithResponseAsync(String categoryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteCategory(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), categoryGuid, accept, requestOptions, context));
    }

    /**
     * Delete a glossary category.
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteCategoryWithResponse(String categoryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteCategorySync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            categoryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Update the glossary category partially. So far we only supports partial
     * updating shortDescription and longDescription for category.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * Object
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute
     * values for partial update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> partialUpdateCategoryWithResponseAsync(String categoryGuid,
        BinaryData partialUpdates, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.partialUpdateCategory(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), categoryGuid, accept, partialUpdates, requestOptions,
            context));
    }

    /**
     * Update the glossary category partially. So far we only supports partial
     * updating shortDescription and longDescription for category.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * Object
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute
     * values for partial update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateCategoryWithResponse(String categoryGuid, BinaryData partialUpdates,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.partialUpdateCategorySync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), categoryGuid, accept, partialUpdates, requestOptions,
            Context.NONE);
    }

    /**
     * Get all related categories (parent and children). Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     String (Required): [
     *          (Required){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all related categories (parent and children) along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRelatedCategoriesWithResponseAsync(String categoryGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listRelatedCategories(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), categoryGuid, accept, requestOptions, context));
    }

    /**
     * Get all related categories (parent and children). Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     String (Required): [
     *          (Required){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all related categories (parent and children) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listRelatedCategoriesWithResponse(String categoryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listRelatedCategoriesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), categoryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get all terms associated with the specific category.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         expression: String (Optional)
     *         relationGuid: String (Optional)
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         steward: String (Optional)
     *         termGuid: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all terms associated with the specific category along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listCategoryTermsWithResponseAsync(String categoryGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listCategoryTerms(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), categoryGuid, accept, requestOptions, context));
    }

    /**
     * Get all terms associated with the specific category.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         expression: String (Optional)
     *         relationGuid: String (Optional)
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         steward: String (Optional)
     *         termGuid: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param categoryGuid The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all terms associated with the specific category along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listCategoryTermsWithResponse(String categoryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listCategoryTermsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            categoryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Create a glossary term.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param glossaryTerm The glossary term definition. A term must be anchored to a Glossary at the time
     * of creation.
     * Optionally it can be categorized as well.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createTermWithResponseAsync(BinaryData glossaryTerm,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createTerm(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, glossaryTerm, requestOptions, context));
    }

    /**
     * Create a glossary term.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param glossaryTerm The glossary term definition. A term must be anchored to a Glossary at the time
     * of creation.
     * Optionally it can be categorized as well.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTermWithResponse(BinaryData glossaryTerm, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createTermSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            glossaryTerm, requestOptions, Context.NONE);
    }

    /**
     * Get a specific glossary term by its GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific glossary term by its GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTermWithResponseAsync(String termGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTerm(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, requestOptions, context));
    }

    /**
     * Get a specific glossary term by its GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific glossary term by its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermWithResponse(String termGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTermSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), termGuid,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Update the given glossary term by its GUID.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param glossaryTerm The glossary term to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateTermWithResponseAsync(String termGuid, BinaryData glossaryTerm,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateTerm(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, glossaryTerm, requestOptions, context));
    }

    /**
     * Update the given glossary term by its GUID.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param glossaryTerm The glossary term to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateTermWithResponse(String termGuid, BinaryData glossaryTerm,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateTermSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), termGuid,
            accept, glossaryTerm, requestOptions, Context.NONE);
    }

    /**
     * Delete a glossary term.
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTermWithResponseAsync(String termGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteTerm(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, requestOptions, context));
    }

    /**
     * Delete a glossary term.
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTermWithResponse(String termGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteTermSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), termGuid,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Update the glossary term partially. So far we only supports partial updating
     * shortDescription, longDescription, abbreviation, usage and status for term.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * Object
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute
     * values to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> partialUpdateTermWithResponseAsync(String termGuid, BinaryData partialUpdates,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.partialUpdateTerm(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, partialUpdates, requestOptions, context));
    }

    /**
     * Update the glossary term partially. So far we only supports partial updating
     * shortDescription, longDescription, abbreviation, usage and status for term.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * Object
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute
     * values to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateTermWithResponse(String termGuid, BinaryData partialUpdates,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.partialUpdateTermSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            termGuid, accept, partialUpdates, requestOptions, Context.NONE);
    }

    /**
     * Create glossary terms in bulk.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryTerm An array of glossary term definitions to be created in bulk.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createTermsWithResponseAsync(BinaryData glossaryTerm,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createTerms(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, glossaryTerm, requestOptions, context));
    }

    /**
     * Create glossary terms in bulk.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermHierarchy</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include term hierarchy</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryTerm An array of glossary term definitions to be created in bulk.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTermsWithResponse(BinaryData glossaryTerm, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createTermsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            glossaryTerm, requestOptions, Context.NONE);
    }

    /**
     * List all related objects assigned with the specified term. Recommend using
     * limit/offset to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listEntitiesAssignedWithTermWithResponseAsync(String termGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listEntitiesAssignedWithTerm(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, requestOptions, context));
    }

    /**
     * List all related objects assigned with the specified term. Recommend using
     * limit/offset to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listEntitiesAssignedWithTermWithResponse(String termGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listEntitiesAssignedWithTermSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Assign the given term to the provided list of related objects. Recommend using
     * small batches with multiple API calls.
     * 
     * [Entities Create Or Update
     * operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
     * is an alternative to assign a term to multiple entities.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param relatedObjectIds An array of related object IDs to which the term has to be associated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> assignTermToEntitiesWithResponseAsync(String termGuid, BinaryData relatedObjectIds,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.assignTermToEntities(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, relatedObjectIds, requestOptions, context));
    }

    /**
     * Assign the given term to the provided list of related objects. Recommend using
     * small batches with multiple API calls.
     * 
     * [Entities Create Or Update
     * operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
     * is an alternative to assign a term to multiple entities.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param relatedObjectIds An array of related object IDs to which the term has to be associated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> assignTermToEntitiesWithResponse(String termGuid, BinaryData relatedObjectIds,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.assignTermToEntitiesSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            termGuid, accept, relatedObjectIds, requestOptions, Context.NONE);
    }

    /**
     * Delete the term assignment for the given list of related objects.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTermAssignmentFromEntitiesWithResponseAsync(String termGuid,
        BinaryData relatedObjectIds, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteTermAssignmentFromEntities(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, relatedObjectIds, requestOptions, context));
    }

    /**
     * Delete the term assignment for the given list of related objects.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param relatedObjectIds An array of related object IDs from which the term has to be dissociated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTermAssignmentFromEntitiesWithResponse(String termGuid, BinaryData relatedObjectIds,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteTermAssignmentFromEntitiesSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, relatedObjectIds, requestOptions,
            Context.NONE);
    }

    /**
     * Get all related terms for a specific term by its GUID. Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     String (Required): [
     *          (Required){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all related terms for a specific term by its GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRelatedTermsWithResponseAsync(String termGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listRelatedTerms(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), termGuid, accept, requestOptions, context));
    }

    /**
     * Get all related terms for a specific term by its GUID. Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     String (Required): [
     *          (Required){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param termGuid The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all related terms for a specific term by its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listRelatedTermsWithResponse(String termGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listRelatedTermsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            termGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get a specific Glossary by its GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific Glossary by its GUID along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, context));
    }

    /**
     * Get a specific Glossary by its GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific Glossary by its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), glossaryGuid,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Update the given glossary.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ignoreTermsAndCategories</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether ignore terms and categories</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param updatedGlossary The glossary definition to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateWithResponseAsync(String glossaryGuid, BinaryData updatedGlossary,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.update(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                glossaryGuid, accept, updatedGlossary, requestOptions, context));
    }

    /**
     * Update the given glossary.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ignoreTermsAndCategories</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether ignore terms and categories</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param updatedGlossary The glossary definition to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateWithResponse(String glossaryGuid, BinaryData updatedGlossary,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), glossaryGuid,
            accept, updatedGlossary, requestOptions, Context.NONE);
    }

    /**
     * Delete a glossary. Will delete underlying terms/categories together. Recommend
     * separate delete terms and categories.
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, context));
    }

    /**
     * Delete a glossary. Will delete underlying terms/categories together. Recommend
     * separate delete terms and categories.
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), glossaryGuid,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get the categories belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the categories belonging to a specific glossary along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listCategoriesWithResponseAsync(String glossaryGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listCategories(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, context));
    }

    /**
     * Get the categories belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the categories belonging to a specific glossary along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listCategoriesWithResponse(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listCategoriesSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            glossaryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the category headers belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         categoryGuid: String (Optional)
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         parentCategoryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the category headers belonging to a specific glossary along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listCategoriesHeadersWithResponseAsync(String glossaryGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listCategoriesHeaders(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, context));
    }

    /**
     * Get the category headers belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         categoryGuid: String (Optional)
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         parentCategoryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the category headers belonging to a specific glossary along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listCategoriesHeadersWithResponse(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listCategoriesHeadersSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get a specific glossary with detailed information. This API is not
     * recommend.
     * 
     * Recommend to fetch terms/categories details separately using
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/terms and
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/categories.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     *     categoryInfo (Optional): {
     *         String (Optional): {
     *             guid: String (Optional)
     *             classifications (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             shortDescription: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             anchor (Optional): {
     *                 displayText: String (Optional)
     *                 glossaryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *             childrenCategories (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             parentCategory (Optional): (recursive schema, see parentCategory above)
     *             terms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     termInfo (Optional): {
     *         String (Optional): {
     *             guid: String (Optional)
     *             classifications (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             shortDescription: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             abbreviation: String (Optional)
     *             templateName (Optional): [
     *                 Object (Optional)
     *             ]
     *             anchor (Optional): (recursive schema, see anchor above)
     *             antonyms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             status: String(Draft/Approved/Alert/Expired) (Optional)
     *             nickName: String (Optional)
     *             hierarchyInfo (Optional): [
     *                  (Optional){
     *                     guid: String (Optional)
     *                     typeName: String (Optional)
     *                     uniqueAttributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     name: String (Optional)
     *                     displayText: String (Optional)
     *                     itemPath: String (Optional)
     *                     resourceId: String (Optional)
     *                     properties (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             resources (Optional): [
     *                  (Optional){
     *                     displayName: String (Optional)
     *                     url: String (Optional)
     *                 }
     *             ]
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *             attributes (Optional): {
     *                 String (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *             assignedEntities (Optional): [
     *                  (Optional){
     *                     guid: String (Optional)
     *                     typeName: String (Optional)
     *                     uniqueAttributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     displayText: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     relationshipType: String (Optional)
     *                     relationshipAttributes (Optional): {
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                     }
     *                     relationshipGuid: String (Optional)
     *                     relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *                 }
     *             ]
     *             categories (Optional): [
     *                  (Optional){
     *                     categoryGuid: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 }
     *             ]
     *             classifies (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             examples (Optional): [
     *                 String (Optional)
     *             ]
     *             isA (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             preferredTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             preferredToTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             replacedBy (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             replacementTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             seeAlso (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             synonyms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             translatedTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             translationTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             usage: String (Optional)
     *             validValues (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             validValuesFor (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific glossary with detailed information along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDetailedWithResponseAsync(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getDetailed(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, context));
    }

    /**
     * Get a specific glossary with detailed information. This API is not
     * recommend.
     * 
     * Recommend to fetch terms/categories details separately using
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/terms and
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/categories.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     *     categoryInfo (Optional): {
     *         String (Optional): {
     *             guid: String (Optional)
     *             classifications (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             shortDescription: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             anchor (Optional): {
     *                 displayText: String (Optional)
     *                 glossaryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *             childrenCategories (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             parentCategory (Optional): (recursive schema, see parentCategory above)
     *             terms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     termInfo (Optional): {
     *         String (Optional): {
     *             guid: String (Optional)
     *             classifications (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             shortDescription: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             abbreviation: String (Optional)
     *             templateName (Optional): [
     *                 Object (Optional)
     *             ]
     *             anchor (Optional): (recursive schema, see anchor above)
     *             antonyms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             status: String(Draft/Approved/Alert/Expired) (Optional)
     *             nickName: String (Optional)
     *             hierarchyInfo (Optional): [
     *                  (Optional){
     *                     guid: String (Optional)
     *                     typeName: String (Optional)
     *                     uniqueAttributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     name: String (Optional)
     *                     displayText: String (Optional)
     *                     itemPath: String (Optional)
     *                     resourceId: String (Optional)
     *                     properties (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             resources (Optional): [
     *                  (Optional){
     *                     displayName: String (Optional)
     *                     url: String (Optional)
     *                 }
     *             ]
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *             attributes (Optional): {
     *                 String (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *             assignedEntities (Optional): [
     *                  (Optional){
     *                     guid: String (Optional)
     *                     typeName: String (Optional)
     *                     uniqueAttributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     displayText: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     relationshipType: String (Optional)
     *                     relationshipAttributes (Optional): {
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                     }
     *                     relationshipGuid: String (Optional)
     *                     relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *                 }
     *             ]
     *             categories (Optional): [
     *                  (Optional){
     *                     categoryGuid: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 }
     *             ]
     *             classifies (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             examples (Optional): [
     *                 String (Optional)
     *             ]
     *             isA (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             preferredTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             preferredToTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             replacedBy (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             replacementTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             seeAlso (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             synonyms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             translatedTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             translationTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             usage: String (Optional)
     *             validValues (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             validValuesFor (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific glossary with detailed information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDetailedWithResponse(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getDetailedSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            glossaryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Update the glossary partially. Some properties such as qualifiedName are not
     * allowed to be updated.
     * 
     * So far we only supports partial updating
     * shortDescription, longDescription, language and usage for glossary.
     * 
     * Recommend
     * using 'ignoreTermsAndCategories=true' to reduce response body size.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ignoreTermsAndCategories</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether ignore terms and categories</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * Object
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute
     * values.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> partialUpdateWithResponseAsync(String glossaryGuid, BinaryData partialUpdates,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.partialUpdate(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                glossaryGuid, accept, partialUpdates, requestOptions, context));
    }

    /**
     * Update the glossary partially. Some properties such as qualifiedName are not
     * allowed to be updated.
     * 
     * So far we only supports partial updating
     * shortDescription, longDescription, language and usage for glossary.
     * 
     * Recommend
     * using 'ignoreTermsAndCategories=true' to reduce response body size.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ignoreTermsAndCategories</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether ignore terms and categories</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * Object
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param partialUpdates A map containing keys as attribute names and values as corresponding attribute
     * values.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateWithResponse(String glossaryGuid, BinaryData partialUpdates,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.partialUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            glossaryGuid, accept, partialUpdates, requestOptions, Context.NONE);
    }

    /**
     * Get terms belonging to a specific glossary. Recommend using limit/offset to get
     * pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return terms belonging to a specific glossary along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listTermsWithResponseAsync(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listTerms(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, context));
    }

    /**
     * Get terms belonging to a specific glossary. Recommend using limit/offset to get
     * pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Optional)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return terms belonging to a specific glossary along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listTermsWithResponse(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listTermsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            glossaryGuid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get term headers belonging to a specific glossary. Recommend using limit/offset
     * to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         expression: String (Optional)
     *         relationGuid: String (Optional)
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         steward: String (Optional)
     *         termGuid: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return term headers belonging to a specific glossary along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listTermHeadersWithResponseAsync(String glossaryGuid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listTermHeaders(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), glossaryGuid, accept, requestOptions, context));
    }

    /**
     * Get term headers belonging to a specific glossary. Recommend using limit/offset
     * to get pagination result.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The page size - by default there is no paging.</td>
     * </tr>
     * <tr>
     * <td>offset</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>The offset for pagination purpose.</td>
     * </tr>
     * <tr>
     * <td>sort</td>
     * <td>String</td>
     * <td>No</td>
     * <td>The sort order, ASC (default) or DESC.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         expression: String (Optional)
     *         relationGuid: String (Optional)
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         steward: String (Optional)
     *         termGuid: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return term headers belonging to a specific glossary along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listTermHeadersWithResponse(String glossaryGuid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listTermHeadersSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            glossaryGuid, accept, requestOptions, Context.NONE);
    }
}
