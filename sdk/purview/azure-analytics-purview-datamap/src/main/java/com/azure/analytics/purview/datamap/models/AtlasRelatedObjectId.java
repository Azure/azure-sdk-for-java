// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Reference to an object-instance of AtlasEntity type used in relationship
 * attribute values.
 */
@Fluent
public final class AtlasRelatedObjectId implements JsonSerializable<AtlasRelatedObjectId> {
    /*
     * The GUID of the object.
     */
    @Generated
    private String guid;

    /*
     * The name of the type.
     */
    @Generated
    private String typeName;

    /*
     * The unique attributes of the object.
     */
    @Generated
    private Map<String, Object> uniqueAttributes;

    /*
     * The display text.
     */
    @Generated
    private String displayText;

    /*
     * Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     */
    @Generated
    private EntityStatus entityStatus;

    /*
     * Relationship type
     */
    @Generated
    private String relationshipType;

    /*
     * Captures details of struct contents. Not instantiated directly, used only via
     * AtlasEntity, AtlasClassification.
     */
    @Generated
    private AtlasStruct relationshipAttributes;

    /*
     * The GUID of the relationship.
     */
    @Generated
    private String relationshipGuid;

    /*
     * The enum of relationship status.
     */
    @Generated
    private StatusAtlasRelationship relationshipStatus;

    /**
     * Creates an instance of AtlasRelatedObjectId class.
     */
    @Generated
    public AtlasRelatedObjectId() {
    }

    /**
     * Get the guid property: The GUID of the object.
     * 
     * @return the guid value.
     */
    @Generated
    public String getGuid() {
        return this.guid;
    }

    /**
     * Set the guid property: The GUID of the object.
     * 
     * @param guid the guid value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setGuid(String guid) {
        this.guid = guid;
        return this;
    }

    /**
     * Get the typeName property: The name of the type.
     * 
     * @return the typeName value.
     */
    @Generated
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: The name of the type.
     * 
     * @param typeName the typeName value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the uniqueAttributes property: The unique attributes of the object.
     * 
     * @return the uniqueAttributes value.
     */
    @Generated
    public Map<String, Object> getUniqueAttributes() {
        return this.uniqueAttributes;
    }

    /**
     * Set the uniqueAttributes property: The unique attributes of the object.
     * 
     * @param uniqueAttributes the uniqueAttributes value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setUniqueAttributes(Map<String, Object> uniqueAttributes) {
        this.uniqueAttributes = uniqueAttributes;
        return this;
    }

    /**
     * Get the displayText property: The display text.
     * 
     * @return the displayText value.
     */
    @Generated
    public String getDisplayText() {
        return this.displayText;
    }

    /**
     * Set the displayText property: The display text.
     * 
     * @param displayText the displayText value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setDisplayText(String displayText) {
        this.displayText = displayText;
        return this;
    }

    /**
     * Get the entityStatus property: Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     * 
     * @return the entityStatus value.
     */
    @Generated
    public EntityStatus getEntityStatus() {
        return this.entityStatus;
    }

    /**
     * Set the entityStatus property: Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     * 
     * @param entityStatus the entityStatus value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setEntityStatus(EntityStatus entityStatus) {
        this.entityStatus = entityStatus;
        return this;
    }

    /**
     * Get the relationshipType property: Relationship type.
     * 
     * @return the relationshipType value.
     */
    @Generated
    public String getRelationshipType() {
        return this.relationshipType;
    }

    /**
     * Set the relationshipType property: Relationship type.
     * 
     * @param relationshipType the relationshipType value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setRelationshipType(String relationshipType) {
        this.relationshipType = relationshipType;
        return this;
    }

    /**
     * Get the relationshipAttributes property: Captures details of struct contents. Not instantiated directly, used
     * only via
     * AtlasEntity, AtlasClassification.
     * 
     * @return the relationshipAttributes value.
     */
    @Generated
    public AtlasStruct getRelationshipAttributes() {
        return this.relationshipAttributes;
    }

    /**
     * Set the relationshipAttributes property: Captures details of struct contents. Not instantiated directly, used
     * only via
     * AtlasEntity, AtlasClassification.
     * 
     * @param relationshipAttributes the relationshipAttributes value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setRelationshipAttributes(AtlasStruct relationshipAttributes) {
        this.relationshipAttributes = relationshipAttributes;
        return this;
    }

    /**
     * Get the relationshipGuid property: The GUID of the relationship.
     * 
     * @return the relationshipGuid value.
     */
    @Generated
    public String getRelationshipGuid() {
        return this.relationshipGuid;
    }

    /**
     * Set the relationshipGuid property: The GUID of the relationship.
     * 
     * @param relationshipGuid the relationshipGuid value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setRelationshipGuid(String relationshipGuid) {
        this.relationshipGuid = relationshipGuid;
        return this;
    }

    /**
     * Get the relationshipStatus property: The enum of relationship status.
     * 
     * @return the relationshipStatus value.
     */
    @Generated
    public StatusAtlasRelationship getRelationshipStatus() {
        return this.relationshipStatus;
    }

    /**
     * Set the relationshipStatus property: The enum of relationship status.
     * 
     * @param relationshipStatus the relationshipStatus value to set.
     * @return the AtlasRelatedObjectId object itself.
     */
    @Generated
    public AtlasRelatedObjectId setRelationshipStatus(StatusAtlasRelationship relationshipStatus) {
        this.relationshipStatus = relationshipStatus;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("guid", this.guid);
        jsonWriter.writeStringField("typeName", this.typeName);
        jsonWriter.writeMapField("uniqueAttributes", this.uniqueAttributes,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("displayText", this.displayText);
        jsonWriter.writeStringField("entityStatus", this.entityStatus == null ? null : this.entityStatus.toString());
        jsonWriter.writeStringField("relationshipType", this.relationshipType);
        jsonWriter.writeJsonField("relationshipAttributes", this.relationshipAttributes);
        jsonWriter.writeStringField("relationshipGuid", this.relationshipGuid);
        jsonWriter.writeStringField("relationshipStatus",
            this.relationshipStatus == null ? null : this.relationshipStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasRelatedObjectId from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasRelatedObjectId if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasRelatedObjectId.
     */
    @Generated
    public static AtlasRelatedObjectId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasRelatedObjectId deserializedAtlasRelatedObjectId = new AtlasRelatedObjectId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("guid".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.guid = reader.getString();
                } else if ("typeName".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.typeName = reader.getString();
                } else if ("uniqueAttributes".equals(fieldName)) {
                    Map<String, Object> uniqueAttributes = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAtlasRelatedObjectId.uniqueAttributes = uniqueAttributes;
                } else if ("displayText".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.displayText = reader.getString();
                } else if ("entityStatus".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.entityStatus = EntityStatus.fromString(reader.getString());
                } else if ("relationshipType".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.relationshipType = reader.getString();
                } else if ("relationshipAttributes".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.relationshipAttributes = AtlasStruct.fromJson(reader);
                } else if ("relationshipGuid".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.relationshipGuid = reader.getString();
                } else if ("relationshipStatus".equals(fieldName)) {
                    deserializedAtlasRelatedObjectId.relationshipStatus
                        = StatusAtlasRelationship.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasRelatedObjectId;
        });
    }
}
