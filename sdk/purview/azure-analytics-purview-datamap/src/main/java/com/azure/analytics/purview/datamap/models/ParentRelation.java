// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The lineage parents relation with GUID of the parent entity and to child entity.
 */
@Immutable
public final class ParentRelation implements JsonSerializable<ParentRelation> {
    /*
     * The GUID of child entity.
     */
    @Generated
    private String childEntityId;

    /*
     * The GUID of relationship.
     */
    @Generated
    private String relationshipId;

    /*
     * The GUID of parent entity.
     */
    @Generated
    private String parentEntityId;

    /**
     * Creates an instance of ParentRelation class.
     */
    @Generated
    private ParentRelation() {
    }

    /**
     * Get the childEntityId property: The GUID of child entity.
     * 
     * @return the childEntityId value.
     */
    @Generated
    public String getChildEntityId() {
        return this.childEntityId;
    }

    /**
     * Get the relationshipId property: The GUID of relationship.
     * 
     * @return the relationshipId value.
     */
    @Generated
    public String getRelationshipId() {
        return this.relationshipId;
    }

    /**
     * Get the parentEntityId property: The GUID of parent entity.
     * 
     * @return the parentEntityId value.
     */
    @Generated
    public String getParentEntityId() {
        return this.parentEntityId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("childEntityId", this.childEntityId);
        jsonWriter.writeStringField("relationshipId", this.relationshipId);
        jsonWriter.writeStringField("parentEntityId", this.parentEntityId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParentRelation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParentRelation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ParentRelation.
     */
    @Generated
    public static ParentRelation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ParentRelation deserializedParentRelation = new ParentRelation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("childEntityId".equals(fieldName)) {
                    deserializedParentRelation.childEntityId = reader.getString();
                } else if ("relationshipId".equals(fieldName)) {
                    deserializedParentRelation.relationshipId = reader.getString();
                } else if ("parentEntityId".equals(fieldName)) {
                    deserializedParentRelation.parentEntityId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParentRelation;
        });
    }
}
