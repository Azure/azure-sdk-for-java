// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap;

import com.azure.analytics.purview.datamap.implementation.TypeDefinitionsImpl;
import com.azure.analytics.purview.datamap.models.AtlasBusinessMetadataDef;
import com.azure.analytics.purview.datamap.models.AtlasClassificationDef;
import com.azure.analytics.purview.datamap.models.AtlasEntityDef;
import com.azure.analytics.purview.datamap.models.AtlasEnumDef;
import com.azure.analytics.purview.datamap.models.AtlasRelationshipDef;
import com.azure.analytics.purview.datamap.models.AtlasStructDef;
import com.azure.analytics.purview.datamap.models.AtlasTypeDef;
import com.azure.analytics.purview.datamap.models.AtlasTypeDefHeader;
import com.azure.analytics.purview.datamap.models.AtlasTypesDef;
import com.azure.analytics.purview.datamap.models.TermTemplateDef;
import com.azure.analytics.purview.datamap.models.TypeCategory;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous DataMapClient type.
 */
@ServiceClient(builder = DataMapClientBuilder.class)
public final class TypeDefinitionClient {
    @Generated
    private final TypeDefinitionsImpl serviceClient;

    /**
     * Initializes an instance of TypeDefinitionClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    TypeDefinitionClient(TypeDefinitionsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the businessMetadata definition for the given guid.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param guid businessMetadata guid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the businessMetadata definition for the given guid along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBusinessMetadataByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getBusinessMetadataByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the businessMetadata definition by it's name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param name businessMetadata name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the businessMetadata definition by it's name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBusinessMetadataByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getBusinessMetadataByNameWithResponse(name, requestOptions);
    }

    /**
     * Get the classification definition for the given GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param guid The globally unique identifier of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the classification definition for the given GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getClassificationByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the classification definition by its name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param name The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the classification definition by its name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getClassificationByNameWithResponse(name, requestOptions);
    }

    /**
     * Get the Entity definition for the given GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Entity definition for the given GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntityByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getEntityByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the entity definition by its name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param name The name of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the entity definition by its name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntityByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getEntityByNameWithResponse(name, requestOptions);
    }

    /**
     * Get the enum definition for the given GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param guid The globally unique identifier of the enum.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the enum definition for the given GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEnumByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getEnumByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the enum definition by its name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param name The name of the enum.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the enum definition by its name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEnumByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getEnumByNameWithResponse(name, requestOptions);
    }

    /**
     * Get the relationship definition for the given GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param guid The globally unique identifier of the relationship.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the relationship definition for the given GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRelationshipByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getRelationshipByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the relationship definition by its name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param name The name of the relationship.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the relationship definition by its name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRelationshipByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getRelationshipByNameWithResponse(name, requestOptions);
    }

    /**
     * Get the struct definition for the given GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param guid The globally unique identifier of the struct.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the struct definition for the given GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStructByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getStructByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the struct definition by its name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param name The name of the struct.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the struct definition by its name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStructByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getStructByNameWithResponse(name, requestOptions);
    }

    /**
     * Get the type definition for the given GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param guid The globally unique identifier of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the type definition for the given GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the type definition by its name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param name The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the type definition by its name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getByNameWithResponse(name, requestOptions);
    }

    /**
     * Delete API for type identified by its name.
     * 
     * @param name The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(name, requestOptions);
    }

    /**
     * List all type definitions in bulk.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>includeTermTemplate</td><td>Boolean</td><td>No</td><td>Whether include termtemplatedef when return all
     * typedefs.
     * This is always true
     * when search filter type=term_template</td></tr>
     * <tr><td>type</td><td>String</td><td>No</td><td>Typedef name as search filter when get typedefs. Allowed values:
     * "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP",
     * "TERM_TEMPLATE".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Required)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(requestOptions);
    }

    /**
     * Create all atlas type definitions in bulk. Please avoid recreating existing types.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Required)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Required)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> batchCreateWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.batchCreateWithResponse(body, requestOptions);
    }

    /**
     * Update all types in bulk, changes detected in the type definitions would be
     * persisted.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Required)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Required)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> batchUpdateWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.batchUpdateWithResponse(body, requestOptions);
    }

    /**
     * Delete API for all types in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Required)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> batchDeleteWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.batchDeleteWithResponse(body, requestOptions);
    }

    /**
     * List all type definitions returned as a list of minimal information header.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>includeTermTemplate</td><td>Boolean</td><td>No</td><td>Whether include termtemplatedef when return all
     * typedefs.
     * This is always true
     * when search filter type=term_template</td></tr>
     * <tr><td>type</td><td>String</td><td>No</td><td>Typedef name as search filter when get typedefs. Allowed values:
     * "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP",
     * "TERM_TEMPLATE".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *         guid: String (Optional)
     *         name: String (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getHeadersWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getHeadersWithResponse(requestOptions);
    }

    /**
     * Get the term template definition for the given GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param guid The globally unique identifier of the term template.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the term template definition for the given GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermTemplateByIdWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getTermTemplateByIdWithResponse(guid, requestOptions);
    }

    /**
     * Get the term template definition by its name (unique).
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Required)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Required)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param name The unique name of the term template.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the term template definition by its name (unique) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermTemplateByNameWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getTermTemplateByNameWithResponse(name, requestOptions);
    }

    /**
     * Get the businessMetadata definition for the given guid.
     * 
     * @param guid businessMetadata guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the businessMetadata definition for the given guid.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasBusinessMetadataDef getBusinessMetadataById(String guid) {
        // Generated convenience method for getBusinessMetadataByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBusinessMetadataByIdWithResponse(guid, requestOptions).getValue()
            .toObject(AtlasBusinessMetadataDef.class);
    }

    /**
     * Get the businessMetadata definition by it's name (unique).
     * 
     * @param name businessMetadata name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the businessMetadata definition by it's name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasBusinessMetadataDef getBusinessMetadataByName(String name) {
        // Generated convenience method for getBusinessMetadataByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBusinessMetadataByNameWithResponse(name, requestOptions).getValue()
            .toObject(AtlasBusinessMetadataDef.class);
    }

    /**
     * Get the classification definition for the given GUID.
     * 
     * @param guid The globally unique identifier of the classification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the classification definition for the given GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasClassificationDef getClassificationById(String guid) {
        // Generated convenience method for getClassificationByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getClassificationByIdWithResponse(guid, requestOptions).getValue()
            .toObject(AtlasClassificationDef.class);
    }

    /**
     * Get the classification definition by its name (unique).
     * 
     * @param name The name of the classification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the classification definition by its name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasClassificationDef getClassificationByName(String name) {
        // Generated convenience method for getClassificationByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getClassificationByNameWithResponse(name, requestOptions).getValue()
            .toObject(AtlasClassificationDef.class);
    }

    /**
     * Get the Entity definition for the given GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Entity definition for the given GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasEntityDef getEntityById(String guid) {
        // Generated convenience method for getEntityByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntityByIdWithResponse(guid, requestOptions).getValue().toObject(AtlasEntityDef.class);
    }

    /**
     * Get the entity definition by its name (unique).
     * 
     * @param name The name of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the entity definition by its name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasEntityDef getEntityByName(String name) {
        // Generated convenience method for getEntityByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntityByNameWithResponse(name, requestOptions).getValue().toObject(AtlasEntityDef.class);
    }

    /**
     * Get the enum definition for the given GUID.
     * 
     * @param guid The globally unique identifier of the enum.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the enum definition for the given GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasEnumDef getEnumById(String guid) {
        // Generated convenience method for getEnumByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEnumByIdWithResponse(guid, requestOptions).getValue().toObject(AtlasEnumDef.class);
    }

    /**
     * Get the enum definition by its name (unique).
     * 
     * @param name The name of the enum.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the enum definition by its name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasEnumDef getEnumByName(String name) {
        // Generated convenience method for getEnumByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEnumByNameWithResponse(name, requestOptions).getValue().toObject(AtlasEnumDef.class);
    }

    /**
     * Get the relationship definition for the given GUID.
     * 
     * @param guid The globally unique identifier of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relationship definition for the given GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasRelationshipDef getRelationshipById(String guid) {
        // Generated convenience method for getRelationshipByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRelationshipByIdWithResponse(guid, requestOptions).getValue().toObject(AtlasRelationshipDef.class);
    }

    /**
     * Get the relationship definition by its name (unique).
     * 
     * @param name The name of the relationship.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the relationship definition by its name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasRelationshipDef getRelationshipByName(String name) {
        // Generated convenience method for getRelationshipByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRelationshipByNameWithResponse(name, requestOptions).getValue().toObject(AtlasRelationshipDef.class);
    }

    /**
     * Get the struct definition for the given GUID.
     * 
     * @param guid The globally unique identifier of the struct.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the struct definition for the given GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasStructDef getStructById(String guid) {
        // Generated convenience method for getStructByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStructByIdWithResponse(guid, requestOptions).getValue().toObject(AtlasStructDef.class);
    }

    /**
     * Get the struct definition by its name (unique).
     * 
     * @param name The name of the struct.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the struct definition by its name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasStructDef getStructByName(String name) {
        // Generated convenience method for getStructByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStructByNameWithResponse(name, requestOptions).getValue().toObject(AtlasStructDef.class);
    }

    /**
     * Get the type definition for the given GUID.
     * 
     * @param guid The globally unique identifier of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the type definition for the given GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasTypeDef getById(String guid) {
        // Generated convenience method for getByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getByIdWithResponse(guid, requestOptions).getValue().toObject(AtlasTypeDef.class);
    }

    /**
     * Get the type definition by its name (unique).
     * 
     * @param name The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the type definition by its name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasTypeDef getByName(String name) {
        // Generated convenience method for getByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getByNameWithResponse(name, requestOptions).getValue().toObject(AtlasTypeDef.class);
    }

    /**
     * Delete API for type identified by its name.
     * 
     * @param name The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String name) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(name, requestOptions).getValue();
    }

    /**
     * List all type definitions in bulk.
     * 
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs.
     * This is always true
     * when search filter type=term_template.
     * @param type Typedef name as search filter when get typedefs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definitions of types.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasTypesDef get(Boolean includeTermTemplate, TypeCategory type) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (includeTermTemplate != null) {
            requestOptions.addQueryParam("includeTermTemplate", String.valueOf(includeTermTemplate), false);
        }
        if (type != null) {
            requestOptions.addQueryParam("type", type.toString(), false);
        }
        return getWithResponse(requestOptions).getValue().toObject(AtlasTypesDef.class);
    }

    /**
     * List all type definitions in bulk.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definitions of types.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasTypesDef get() {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(requestOptions).getValue().toObject(AtlasTypesDef.class);
    }

    /**
     * Create all atlas type definitions in bulk. Please avoid recreating existing types.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definitions of types.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasTypesDef batchCreate(AtlasTypesDef body) {
        // Generated convenience method for batchCreateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return batchCreateWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasTypesDef.class);
    }

    /**
     * Update all types in bulk, changes detected in the type definitions would be
     * persisted.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the definitions of types.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasTypesDef batchUpdate(AtlasTypesDef body) {
        // Generated convenience method for batchUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return batchUpdateWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasTypesDef.class);
    }

    /**
     * Delete API for all types in bulk.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void batchDelete(AtlasTypesDef body) {
        // Generated convenience method for batchDeleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        batchDeleteWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * List all type definitions returned as a list of minimal information header.
     * 
     * @param includeTermTemplate Whether include termtemplatedef when return all typedefs.
     * This is always true
     * when search filter type=term_template.
     * @param type Typedef name as search filter when get typedefs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasTypeDefHeader> getHeaders(Boolean includeTermTemplate, TypeCategory type) {
        // Generated convenience method for getHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (includeTermTemplate != null) {
            requestOptions.addQueryParam("includeTermTemplate", String.valueOf(includeTermTemplate), false);
        }
        if (type != null) {
            requestOptions.addQueryParam("type", type.toString(), false);
        }
        return getHeadersWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_ATLAS_TYPE_DEF_HEADER);
    }

    /**
     * List all type definitions returned as a list of minimal information header.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasTypeDefHeader> getHeaders() {
        // Generated convenience method for getHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getHeadersWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_ATLAS_TYPE_DEF_HEADER);
    }

    /**
     * Get the term template definition for the given GUID.
     * 
     * @param guid The globally unique identifier of the term template.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the term template definition for the given GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TermTemplateDef getTermTemplateById(String guid) {
        // Generated convenience method for getTermTemplateByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTermTemplateByIdWithResponse(guid, requestOptions).getValue().toObject(TermTemplateDef.class);
    }

    /**
     * Get the term template definition by its name (unique).
     * 
     * @param name The unique name of the term template.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the term template definition by its name (unique).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TermTemplateDef getTermTemplateByName(String name) {
        // Generated convenience method for getTermTemplateByNameWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTermTemplateByNameWithResponse(name, requestOptions).getValue().toObject(TermTemplateDef.class);
    }

    @Generated
    private static final TypeReference<List<AtlasTypeDefHeader>> TYPE_REFERENCE_LIST_ATLAS_TYPE_DEF_HEADER
        = new TypeReference<List<AtlasTypeDefHeader>>() {
        };
}
