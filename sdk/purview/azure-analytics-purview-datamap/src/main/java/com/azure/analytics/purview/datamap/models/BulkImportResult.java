// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Bulk import result.
 */
@Immutable
public final class BulkImportResult implements JsonSerializable<BulkImportResult> {
    /*
     * failed importInfoList
     */
    @Generated
    private List<ImportInfo> failedImportInfoList;

    /*
     * successful importInfoList
     */
    @Generated
    private List<ImportInfo> successImportInfoList;

    /**
     * Creates an instance of BulkImportResult class.
     */
    @Generated
    private BulkImportResult() {
    }

    /**
     * Get the failedImportInfoList property: failed importInfoList.
     * 
     * @return the failedImportInfoList value.
     */
    @Generated
    public List<ImportInfo> getFailedImportInfoList() {
        return this.failedImportInfoList;
    }

    /**
     * Get the successImportInfoList property: successful importInfoList.
     * 
     * @return the successImportInfoList value.
     */
    @Generated
    public List<ImportInfo> getSuccessImportInfoList() {
        return this.successImportInfoList;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("failedImportInfoList", this.failedImportInfoList,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("successImportInfoList", this.successImportInfoList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BulkImportResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BulkImportResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BulkImportResult.
     */
    @Generated
    public static BulkImportResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BulkImportResult deserializedBulkImportResult = new BulkImportResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failedImportInfoList".equals(fieldName)) {
                    List<ImportInfo> failedImportInfoList = reader.readArray(reader1 -> ImportInfo.fromJson(reader1));
                    deserializedBulkImportResult.failedImportInfoList = failedImportInfoList;
                } else if ("successImportInfoList".equals(fieldName)) {
                    List<ImportInfo> successImportInfoList = reader.readArray(reader1 -> ImportInfo.fromJson(reader1));
                    deserializedBulkImportResult.successImportInfoList = successImportInfoList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBulkImportResult;
        });
    }
}
