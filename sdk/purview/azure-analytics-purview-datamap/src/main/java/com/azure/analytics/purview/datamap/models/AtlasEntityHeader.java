// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * An instance of an entity - like hive_table, hive_database.
 */
@Fluent
public final class AtlasEntityHeader implements JsonSerializable<AtlasEntityHeader> {
    /*
     * The attributes of the struct.
     */
    @Generated
    private Map<String, Object> attributes;

    /*
     * The name of the type.
     */
    @Generated
    private String typeName;

    /*
     * ETag for concurrency control.
     */
    @Generated
    private String lastModifiedTS;

    /*
     * An array of classification names.
     */
    @Generated
    private List<String> classificationNames;

    /*
     * An array of classifications.
     */
    @Generated
    private List<AtlasClassification> classifications;

    /*
     * The display text.
     */
    @Generated
    private String displayText;

    /*
     * The GUID of the record.
     */
    @Generated
    private String guid;

    /*
     * Whether it is a shell entity
     */
    @Generated
    private Boolean isIncomplete;

    /*
     * labels
     */
    @Generated
    private List<String> labels;

    /*
     * An array of meanings.
     */
    @Generated
    private List<String> meaningNames;

    /*
     * An array of term assignment headers.
     */
    @Generated
    private List<AtlasTermAssignmentHeader> meanings;

    /*
     * Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     */
    @Generated
    private EntityStatus status;

    /**
     * Creates an instance of AtlasEntityHeader class.
     */
    @Generated
    public AtlasEntityHeader() {
    }

    /**
     * Get the attributes property: The attributes of the struct.
     * 
     * @return the attributes value.
     */
    @Generated
    public Map<String, Object> getAttributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: The attributes of the struct.
     * 
     * @param attributes the attributes value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setAttributes(Map<String, Object> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the typeName property: The name of the type.
     * 
     * @return the typeName value.
     */
    @Generated
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: The name of the type.
     * 
     * @param typeName the typeName value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the lastModifiedTS property: ETag for concurrency control.
     * 
     * @return the lastModifiedTS value.
     */
    @Generated
    public String getLastModifiedTS() {
        return this.lastModifiedTS;
    }

    /**
     * Set the lastModifiedTS property: ETag for concurrency control.
     * 
     * @param lastModifiedTS the lastModifiedTS value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setLastModifiedTS(String lastModifiedTS) {
        this.lastModifiedTS = lastModifiedTS;
        return this;
    }

    /**
     * Get the classificationNames property: An array of classification names.
     * 
     * @return the classificationNames value.
     */
    @Generated
    public List<String> getClassificationNames() {
        return this.classificationNames;
    }

    /**
     * Set the classificationNames property: An array of classification names.
     * 
     * @param classificationNames the classificationNames value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setClassificationNames(List<String> classificationNames) {
        this.classificationNames = classificationNames;
        return this;
    }

    /**
     * Get the classifications property: An array of classifications.
     * 
     * @return the classifications value.
     */
    @Generated
    public List<AtlasClassification> getClassifications() {
        return this.classifications;
    }

    /**
     * Set the classifications property: An array of classifications.
     * 
     * @param classifications the classifications value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setClassifications(List<AtlasClassification> classifications) {
        this.classifications = classifications;
        return this;
    }

    /**
     * Get the displayText property: The display text.
     * 
     * @return the displayText value.
     */
    @Generated
    public String getDisplayText() {
        return this.displayText;
    }

    /**
     * Set the displayText property: The display text.
     * 
     * @param displayText the displayText value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setDisplayText(String displayText) {
        this.displayText = displayText;
        return this;
    }

    /**
     * Get the guid property: The GUID of the record.
     * 
     * @return the guid value.
     */
    @Generated
    public String getGuid() {
        return this.guid;
    }

    /**
     * Set the guid property: The GUID of the record.
     * 
     * @param guid the guid value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setGuid(String guid) {
        this.guid = guid;
        return this;
    }

    /**
     * Get the isIncomplete property: Whether it is a shell entity.
     * 
     * @return the isIncomplete value.
     */
    @Generated
    public Boolean isIncomplete() {
        return this.isIncomplete;
    }

    /**
     * Set the isIncomplete property: Whether it is a shell entity.
     * 
     * @param isIncomplete the isIncomplete value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setIsIncomplete(Boolean isIncomplete) {
        this.isIncomplete = isIncomplete;
        return this;
    }

    /**
     * Get the labels property: labels.
     * 
     * @return the labels value.
     */
    @Generated
    public List<String> getLabels() {
        return this.labels;
    }

    /**
     * Set the labels property: labels.
     * 
     * @param labels the labels value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setLabels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the meaningNames property: An array of meanings.
     * 
     * @return the meaningNames value.
     */
    @Generated
    public List<String> getMeaningNames() {
        return this.meaningNames;
    }

    /**
     * Set the meaningNames property: An array of meanings.
     * 
     * @param meaningNames the meaningNames value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setMeaningNames(List<String> meaningNames) {
        this.meaningNames = meaningNames;
        return this;
    }

    /**
     * Get the meanings property: An array of term assignment headers.
     * 
     * @return the meanings value.
     */
    @Generated
    public List<AtlasTermAssignmentHeader> getMeanings() {
        return this.meanings;
    }

    /**
     * Set the meanings property: An array of term assignment headers.
     * 
     * @param meanings the meanings value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setMeanings(List<AtlasTermAssignmentHeader> meanings) {
        this.meanings = meanings;
        return this;
    }

    /**
     * Get the status property: Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     * 
     * @return the status value.
     */
    @Generated
    public EntityStatus getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     * 
     * @param status the status value to set.
     * @return the AtlasEntityHeader object itself.
     */
    @Generated
    public AtlasEntityHeader setStatus(EntityStatus status) {
        this.status = status;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("attributes", this.attributes, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("typeName", this.typeName);
        jsonWriter.writeStringField("lastModifiedTS", this.lastModifiedTS);
        jsonWriter.writeArrayField("classificationNames", this.classificationNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("classifications", this.classifications,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("displayText", this.displayText);
        jsonWriter.writeStringField("guid", this.guid);
        jsonWriter.writeBooleanField("isIncomplete", this.isIncomplete);
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("meaningNames", this.meaningNames, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("meanings", this.meanings, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasEntityHeader from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasEntityHeader if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasEntityHeader.
     */
    @Generated
    public static AtlasEntityHeader fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasEntityHeader deserializedAtlasEntityHeader = new AtlasEntityHeader();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributes".equals(fieldName)) {
                    Map<String, Object> attributes = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAtlasEntityHeader.attributes = attributes;
                } else if ("typeName".equals(fieldName)) {
                    deserializedAtlasEntityHeader.typeName = reader.getString();
                } else if ("lastModifiedTS".equals(fieldName)) {
                    deserializedAtlasEntityHeader.lastModifiedTS = reader.getString();
                } else if ("classificationNames".equals(fieldName)) {
                    List<String> classificationNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedAtlasEntityHeader.classificationNames = classificationNames;
                } else if ("classifications".equals(fieldName)) {
                    List<AtlasClassification> classifications
                        = reader.readArray(reader1 -> AtlasClassification.fromJson(reader1));
                    deserializedAtlasEntityHeader.classifications = classifications;
                } else if ("displayText".equals(fieldName)) {
                    deserializedAtlasEntityHeader.displayText = reader.getString();
                } else if ("guid".equals(fieldName)) {
                    deserializedAtlasEntityHeader.guid = reader.getString();
                } else if ("isIncomplete".equals(fieldName)) {
                    deserializedAtlasEntityHeader.isIncomplete = reader.getNullable(JsonReader::getBoolean);
                } else if ("labels".equals(fieldName)) {
                    List<String> labels = reader.readArray(reader1 -> reader1.getString());
                    deserializedAtlasEntityHeader.labels = labels;
                } else if ("meaningNames".equals(fieldName)) {
                    List<String> meaningNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedAtlasEntityHeader.meaningNames = meaningNames;
                } else if ("meanings".equals(fieldName)) {
                    List<AtlasTermAssignmentHeader> meanings
                        = reader.readArray(reader1 -> AtlasTermAssignmentHeader.fromJson(reader1));
                    deserializedAtlasEntityHeader.meanings = meanings;
                } else if ("status".equals(fieldName)) {
                    deserializedAtlasEntityHeader.status = EntityStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasEntityHeader;
        });
    }
}
