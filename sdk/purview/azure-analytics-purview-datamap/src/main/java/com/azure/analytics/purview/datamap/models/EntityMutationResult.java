// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The mutation response result of entity.
 */
@Immutable
public final class EntityMutationResult implements JsonSerializable<EntityMutationResult> {
    /*
     * A map of GUID assignments with entities.
     */
    @Generated
    private Map<String, String> guidAssignments;

    /*
     * The entity headers of mutated entities.
     */
    @Generated
    private Map<String, List<AtlasEntityHeader>> mutatedEntities;

    /*
     * An array of entity headers that partially updated.
     */
    @Generated
    private List<AtlasEntityHeader> partialUpdatedEntities;

    /**
     * Creates an instance of EntityMutationResult class.
     */
    @Generated
    private EntityMutationResult() {
    }

    /**
     * Get the guidAssignments property: A map of GUID assignments with entities.
     * 
     * @return the guidAssignments value.
     */
    @Generated
    public Map<String, String> getGuidAssignments() {
        return this.guidAssignments;
    }

    /**
     * Get the mutatedEntities property: The entity headers of mutated entities.
     * 
     * @return the mutatedEntities value.
     */
    @Generated
    public Map<String, List<AtlasEntityHeader>> getMutatedEntities() {
        return this.mutatedEntities;
    }

    /**
     * Get the partialUpdatedEntities property: An array of entity headers that partially updated.
     * 
     * @return the partialUpdatedEntities value.
     */
    @Generated
    public List<AtlasEntityHeader> getPartialUpdatedEntities() {
        return this.partialUpdatedEntities;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("guidAssignments", this.guidAssignments,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("mutatedEntities", this.mutatedEntities,
            (writer, element) -> writer.writeArray(element, (writer1, element1) -> writer1.writeJson(element1)));
        jsonWriter.writeArrayField("partialUpdatedEntities", this.partialUpdatedEntities,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityMutationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityMutationResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntityMutationResult.
     */
    @Generated
    public static EntityMutationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityMutationResult deserializedEntityMutationResult = new EntityMutationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("guidAssignments".equals(fieldName)) {
                    Map<String, String> guidAssignments = reader.readMap(reader1 -> reader1.getString());
                    deserializedEntityMutationResult.guidAssignments = guidAssignments;
                } else if ("mutatedEntities".equals(fieldName)) {
                    Map<String, List<AtlasEntityHeader>> mutatedEntities
                        = reader.readMap(reader1 -> reader1.readArray(reader2 -> AtlasEntityHeader.fromJson(reader2)));
                    deserializedEntityMutationResult.mutatedEntities = mutatedEntities;
                } else if ("partialUpdatedEntities".equals(fieldName)) {
                    List<AtlasEntityHeader> partialUpdatedEntities
                        = reader.readArray(reader1 -> AtlasEntityHeader.fromJson(reader1));
                    deserializedEntityMutationResult.partialUpdatedEntities = partialUpdatedEntities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityMutationResult;
        });
    }
}
