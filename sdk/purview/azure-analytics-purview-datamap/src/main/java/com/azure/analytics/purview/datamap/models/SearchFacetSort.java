// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The sorting criteria.
 */
@Fluent
public final class SearchFacetSort implements JsonSerializable<SearchFacetSort> {
    /*
     * Order by count
     */
    @Generated
    private SearchSortOrder count;

    /*
     * Order by value
     */
    @Generated
    private SearchSortOrder value;

    /**
     * Creates an instance of SearchFacetSort class.
     */
    @Generated
    public SearchFacetSort() {
    }

    /**
     * Get the count property: Order by count.
     * 
     * @return the count value.
     */
    @Generated
    public SearchSortOrder getCount() {
        return this.count;
    }

    /**
     * Set the count property: Order by count.
     * 
     * @param count the count value to set.
     * @return the SearchFacetSort object itself.
     */
    @Generated
    public SearchFacetSort setCount(SearchSortOrder count) {
        this.count = count;
        return this;
    }

    /**
     * Get the value property: Order by value.
     * 
     * @return the value value.
     */
    @Generated
    public SearchSortOrder getValue() {
        return this.value;
    }

    /**
     * Set the value property: Order by value.
     * 
     * @param value the value value to set.
     * @return the SearchFacetSort object itself.
     */
    @Generated
    public SearchFacetSort setValue(SearchSortOrder value) {
        this.value = value;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("count", this.count == null ? null : this.count.toString());
        jsonWriter.writeStringField("value", this.value == null ? null : this.value.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchFacetSort from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchFacetSort if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchFacetSort.
     */
    @Generated
    public static SearchFacetSort fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchFacetSort deserializedSearchFacetSort = new SearchFacetSort();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedSearchFacetSort.count = SearchSortOrder.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedSearchFacetSort.value = SearchSortOrder.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchFacetSort;
        });
    }
}
