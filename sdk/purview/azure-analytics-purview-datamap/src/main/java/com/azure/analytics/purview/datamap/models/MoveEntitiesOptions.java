// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * MoveEntitiesOptions.
 */
@Fluent
public final class MoveEntitiesOptions implements JsonSerializable<MoveEntitiesOptions> {
    /*
     * An array of entity guids to be moved to target collection.
     */
    @Generated
    private List<String> entityGuids;

    /**
     * Creates an instance of MoveEntitiesOptions class.
     */
    @Generated
    public MoveEntitiesOptions() {
    }

    /**
     * Get the entityGuids property: An array of entity guids to be moved to target collection.
     * 
     * @return the entityGuids value.
     */
    @Generated
    public List<String> getEntityGuids() {
        return this.entityGuids;
    }

    /**
     * Set the entityGuids property: An array of entity guids to be moved to target collection.
     * 
     * @param entityGuids the entityGuids value to set.
     * @return the MoveEntitiesOptions object itself.
     */
    @Generated
    public MoveEntitiesOptions setEntityGuids(List<String> entityGuids) {
        this.entityGuids = entityGuids;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("entityGuids", this.entityGuids, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MoveEntitiesOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MoveEntitiesOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MoveEntitiesOptions.
     */
    @Generated
    public static MoveEntitiesOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MoveEntitiesOptions deserializedMoveEntitiesOptions = new MoveEntitiesOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityGuids".equals(fieldName)) {
                    List<String> entityGuids = reader.readArray(reader1 -> reader1.getString());
                    deserializedMoveEntitiesOptions.entityGuids = entityGuids;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMoveEntitiesOptions;
        });
    }
}
