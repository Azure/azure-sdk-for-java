// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Captures details of struct contents. Not instantiated directly, used only via
 * AtlasEntity, AtlasClassification.
 */
@Fluent
public final class AtlasStruct implements JsonSerializable<AtlasStruct> {
    /*
     * The attributes of the struct.
     */
    @Generated
    private Map<String, Object> attributes;

    /*
     * The name of the type.
     */
    @Generated
    private String typeName;

    /*
     * ETag for concurrency control.
     */
    @Generated
    private String lastModifiedTS;

    /**
     * Creates an instance of AtlasStruct class.
     */
    @Generated
    public AtlasStruct() {
    }

    /**
     * Get the attributes property: The attributes of the struct.
     * 
     * @return the attributes value.
     */
    @Generated
    public Map<String, Object> getAttributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: The attributes of the struct.
     * 
     * @param attributes the attributes value to set.
     * @return the AtlasStruct object itself.
     */
    @Generated
    public AtlasStruct setAttributes(Map<String, Object> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the typeName property: The name of the type.
     * 
     * @return the typeName value.
     */
    @Generated
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: The name of the type.
     * 
     * @param typeName the typeName value to set.
     * @return the AtlasStruct object itself.
     */
    @Generated
    public AtlasStruct setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the lastModifiedTS property: ETag for concurrency control.
     * 
     * @return the lastModifiedTS value.
     */
    @Generated
    public String getLastModifiedTS() {
        return this.lastModifiedTS;
    }

    /**
     * Set the lastModifiedTS property: ETag for concurrency control.
     * 
     * @param lastModifiedTS the lastModifiedTS value to set.
     * @return the AtlasStruct object itself.
     */
    @Generated
    public AtlasStruct setLastModifiedTS(String lastModifiedTS) {
        this.lastModifiedTS = lastModifiedTS;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("attributes", this.attributes, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("typeName", this.typeName);
        jsonWriter.writeStringField("lastModifiedTS", this.lastModifiedTS);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasStruct from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasStruct if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasStruct.
     */
    @Generated
    public static AtlasStruct fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasStruct deserializedAtlasStruct = new AtlasStruct();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributes".equals(fieldName)) {
                    Map<String, Object> attributes = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAtlasStruct.attributes = attributes;
                } else if ("typeName".equals(fieldName)) {
                    deserializedAtlasStruct.typeName = reader.getString();
                } else if ("lastModifiedTS".equals(fieldName)) {
                    deserializedAtlasStruct.lastModifiedTS = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasStruct;
        });
    }
}
