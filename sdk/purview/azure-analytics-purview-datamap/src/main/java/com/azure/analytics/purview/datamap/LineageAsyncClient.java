// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap;

import com.azure.analytics.purview.datamap.implementation.LineagesImpl;
import com.azure.analytics.purview.datamap.models.AtlasLineageInfo;
import com.azure.analytics.purview.datamap.models.LineageDirection;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous DataMapClient type.
 */
@ServiceClient(builder = DataMapClientBuilder.class, isAsync = true)
public final class LineageAsyncClient {
    @Generated
    private final LineagesImpl serviceClient;

    /**
     * Initializes an instance of LineageAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    LineageAsyncClient(LineagesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get lineage info of the entity specified by GUID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>depth</td><td>Integer</td><td>No</td><td>The number of hops for lineage.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     baseEntityGuid: String (Optional)
     *     guidEntityMap (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     *     widthCounts (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     lineageDepth: Integer (Optional)
     *     lineageWidth: Integer (Optional)
     *     childrenCount: Integer (Optional)
     *     lineageDirection: String(INPUT/OUTPUT/BOTH) (Optional)
     *     parentRelations (Optional): [
     *          (Optional){
     *             childEntityId: String (Optional)
     *             relationshipId: String (Optional)
     *             parentEntityId: String (Optional)
     *         }
     *     ]
     *     relations (Optional): [
     *          (Optional){
     *             fromEntityId: String (Optional)
     *             relationshipId: String (Optional)
     *             toEntityId: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: "INPUT",
     * "OUTPUT", "BOTH".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return lineage info of the entity specified by GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String guid, String direction, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(guid, direction, requestOptions);
    }

    /**
     * Return immediate next page lineage info about entity with pagination.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     baseEntityGuid: String (Optional)
     *     guidEntityMap (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     *     widthCounts (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     lineageDepth: Integer (Optional)
     *     lineageWidth: Integer (Optional)
     *     childrenCount: Integer (Optional)
     *     lineageDirection: String(INPUT/OUTPUT/BOTH) (Optional)
     *     parentRelations (Optional): [
     *          (Optional){
     *             childEntityId: String (Optional)
     *             relationshipId: String (Optional)
     *             parentEntityId: String (Optional)
     *         }
     *     ]
     *     relations (Optional): [
     *          (Optional){
     *             fromEntityId: String (Optional)
     *             relationshipId: String (Optional)
     *             toEntityId: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: "INPUT",
     * "OUTPUT", "BOTH".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the lineage information along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getNextPageWithResponse(String guid, String direction,
        RequestOptions requestOptions) {
        return this.serviceClient.getNextPageWithResponseAsync(guid, direction, requestOptions);
    }

    /**
     * Return lineage info about entity.
     * 
     * In addition to the typeName path parameter,
     * attribute key-value pair(s) can be provided in the following
     * format
     * 
     * attr:[attrName]=[attrValue]
     * 
     * NOTE: The attrName and attrValue should be
     * unique across entities, eg. qualifiedName.
     * 
     * The REST request would look
     * something like this:
     * 
     * GET
     * /v2/lineage/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>depth</td><td>Integer</td><td>No</td><td>The number of hops for lineage.</td></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     baseEntityGuid: String (Optional)
     *     guidEntityMap (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     *     widthCounts (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     lineageDepth: Integer (Optional)
     *     lineageWidth: Integer (Optional)
     *     childrenCount: Integer (Optional)
     *     lineageDirection: String(INPUT/OUTPUT/BOTH) (Optional)
     *     parentRelations (Optional): [
     *          (Optional){
     *             childEntityId: String (Optional)
     *             relationshipId: String (Optional)
     *             parentEntityId: String (Optional)
     *         }
     *     ]
     *     relations (Optional): [
     *          (Optional){
     *             fromEntityId: String (Optional)
     *             relationshipId: String (Optional)
     *             toEntityId: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: "INPUT",
     * "OUTPUT", "BOTH".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the lineage information along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByUniqueAttributeWithResponse(String typeName, String direction,
        RequestOptions requestOptions) {
        return this.serviceClient.getByUniqueAttributeWithResponseAsync(typeName, direction, requestOptions);
    }

    /**
     * Get lineage info of the entity specified by GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
     * @param depth The number of hops for lineage.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lineage info of the entity specified by GUID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasLineageInfo> get(String guid, LineageDirection direction, Integer depth) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (depth != null) {
            requestOptions.addQueryParam("depth", String.valueOf(depth), false);
        }
        return getWithResponse(guid, direction.toString(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasLineageInfo.class));
    }

    /**
     * Get lineage info of the entity specified by GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lineage info of the entity specified by GUID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasLineageInfo> get(String guid, LineageDirection direction) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(guid, direction.toString(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasLineageInfo.class));
    }

    /**
     * Return immediate next page lineage info about entity with pagination.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
     * @param offset The offset for pagination purpose.
     * @param limit The page size - by default there is no paging.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the lineage information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasLineageInfo> getNextPage(String guid, LineageDirection direction, Integer offset, Integer limit) {
        // Generated convenience method for getNextPageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        return getNextPageWithResponse(guid, direction.toString(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasLineageInfo.class));
    }

    /**
     * Return immediate next page lineage info about entity with pagination.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the lineage information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasLineageInfo> getNextPage(String guid, LineageDirection direction) {
        // Generated convenience method for getNextPageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNextPageWithResponse(guid, direction.toString(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasLineageInfo.class));
    }

    /**
     * Return lineage info about entity.
     * 
     * In addition to the typeName path parameter,
     * attribute key-value pair(s) can be provided in the following
     * format
     * 
     * attr:[attrName]=[attrValue]
     * 
     * NOTE: The attrName and attrValue should be
     * unique across entities, eg. qualifiedName.
     * 
     * The REST request would look
     * something like this:
     * 
     * GET
     * /v2/lineage/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
     * @param depth The number of hops for lineage.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the lineage information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasLineageInfo> getByUniqueAttribute(String typeName, LineageDirection direction, Integer depth,
        String attribute) {
        // Generated convenience method for getByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (depth != null) {
            requestOptions.addQueryParam("depth", String.valueOf(depth), false);
        }
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        return getByUniqueAttributeWithResponse(typeName, direction.toString(), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasLineageInfo.class));
    }

    /**
     * Return lineage info about entity.
     * 
     * In addition to the typeName path parameter,
     * attribute key-value pair(s) can be provided in the following
     * format
     * 
     * attr:[attrName]=[attrValue]
     * 
     * NOTE: The attrName and attrValue should be
     * unique across entities, eg. qualifiedName.
     * 
     * The REST request would look
     * something like this:
     * 
     * GET
     * /v2/lineage/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param direction The direction of the lineage, which could be INPUT, OUTPUT or BOTH.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the lineage information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasLineageInfo> getByUniqueAttribute(String typeName, LineageDirection direction) {
        // Generated convenience method for getByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getByUniqueAttributeWithResponse(typeName, direction.toString(), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasLineageInfo.class));
    }
}
