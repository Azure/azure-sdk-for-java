// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * class that captures details of a constraint.
 */
@Fluent
public final class AtlasConstraintDef implements JsonSerializable<AtlasConstraintDef> {
    /*
     * The parameters of the constraint definition.
     */
    @Generated
    private Map<String, Object> params;

    /*
     * The type of the constraint.
     */
    @Generated
    private String type;

    /**
     * Creates an instance of AtlasConstraintDef class.
     */
    @Generated
    public AtlasConstraintDef() {
    }

    /**
     * Get the params property: The parameters of the constraint definition.
     * 
     * @return the params value.
     */
    @Generated
    public Map<String, Object> getParams() {
        return this.params;
    }

    /**
     * Set the params property: The parameters of the constraint definition.
     * 
     * @param params the params value to set.
     * @return the AtlasConstraintDef object itself.
     */
    @Generated
    public AtlasConstraintDef setParams(Map<String, Object> params) {
        this.params = params;
        return this;
    }

    /**
     * Get the type property: The type of the constraint.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of the constraint.
     * 
     * @param type the type value to set.
     * @return the AtlasConstraintDef object itself.
     */
    @Generated
    public AtlasConstraintDef setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("params", this.params, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasConstraintDef from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasConstraintDef if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasConstraintDef.
     */
    @Generated
    public static AtlasConstraintDef fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasConstraintDef deserializedAtlasConstraintDef = new AtlasConstraintDef();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("params".equals(fieldName)) {
                    Map<String, Object> params = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAtlasConstraintDef.params = params;
                } else if ("type".equals(fieldName)) {
                    deserializedAtlasConstraintDef.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasConstraintDef;
        });
    }
}
