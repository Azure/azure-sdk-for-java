// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The definitions of types.
 */
@Fluent
public final class AtlasTypesDef implements JsonSerializable<AtlasTypesDef> {
    /*
     * businessMetadataDefs
     */
    @Generated
    private List<AtlasBusinessMetadataDef> businessMetadataDefs;

    /*
     * An array of classification definitions.
     */
    @Generated
    private List<AtlasClassificationDef> classificationDefs;

    /*
     * An array of entity definitions.
     */
    @Generated
    private List<AtlasEntityDef> entityDefs;

    /*
     * An array of enum definitions.
     */
    @Generated
    private List<AtlasEnumDef> enumDefs;

    /*
     * An array of relationship definitions.
     */
    @Generated
    private List<AtlasRelationshipDef> relationshipDefs;

    /*
     * An array of struct definitions.
     */
    @Generated
    private List<AtlasStructDef> structDefs;

    /*
     * An array of term template definitions.
     */
    @Generated
    private List<TermTemplateDef> termTemplateDefs;

    /**
     * Creates an instance of AtlasTypesDef class.
     */
    @Generated
    public AtlasTypesDef() {
    }

    /**
     * Get the businessMetadataDefs property: businessMetadataDefs.
     * 
     * @return the businessMetadataDefs value.
     */
    @Generated
    public List<AtlasBusinessMetadataDef> getBusinessMetadataDefs() {
        return this.businessMetadataDefs;
    }

    /**
     * Set the businessMetadataDefs property: businessMetadataDefs.
     * 
     * @param businessMetadataDefs the businessMetadataDefs value to set.
     * @return the AtlasTypesDef object itself.
     */
    @Generated
    public AtlasTypesDef setBusinessMetadataDefs(List<AtlasBusinessMetadataDef> businessMetadataDefs) {
        this.businessMetadataDefs = businessMetadataDefs;
        return this;
    }

    /**
     * Get the classificationDefs property: An array of classification definitions.
     * 
     * @return the classificationDefs value.
     */
    @Generated
    public List<AtlasClassificationDef> getClassificationDefs() {
        return this.classificationDefs;
    }

    /**
     * Set the classificationDefs property: An array of classification definitions.
     * 
     * @param classificationDefs the classificationDefs value to set.
     * @return the AtlasTypesDef object itself.
     */
    @Generated
    public AtlasTypesDef setClassificationDefs(List<AtlasClassificationDef> classificationDefs) {
        this.classificationDefs = classificationDefs;
        return this;
    }

    /**
     * Get the entityDefs property: An array of entity definitions.
     * 
     * @return the entityDefs value.
     */
    @Generated
    public List<AtlasEntityDef> getEntityDefs() {
        return this.entityDefs;
    }

    /**
     * Set the entityDefs property: An array of entity definitions.
     * 
     * @param entityDefs the entityDefs value to set.
     * @return the AtlasTypesDef object itself.
     */
    @Generated
    public AtlasTypesDef setEntityDefs(List<AtlasEntityDef> entityDefs) {
        this.entityDefs = entityDefs;
        return this;
    }

    /**
     * Get the enumDefs property: An array of enum definitions.
     * 
     * @return the enumDefs value.
     */
    @Generated
    public List<AtlasEnumDef> getEnumDefs() {
        return this.enumDefs;
    }

    /**
     * Set the enumDefs property: An array of enum definitions.
     * 
     * @param enumDefs the enumDefs value to set.
     * @return the AtlasTypesDef object itself.
     */
    @Generated
    public AtlasTypesDef setEnumDefs(List<AtlasEnumDef> enumDefs) {
        this.enumDefs = enumDefs;
        return this;
    }

    /**
     * Get the relationshipDefs property: An array of relationship definitions.
     * 
     * @return the relationshipDefs value.
     */
    @Generated
    public List<AtlasRelationshipDef> getRelationshipDefs() {
        return this.relationshipDefs;
    }

    /**
     * Set the relationshipDefs property: An array of relationship definitions.
     * 
     * @param relationshipDefs the relationshipDefs value to set.
     * @return the AtlasTypesDef object itself.
     */
    @Generated
    public AtlasTypesDef setRelationshipDefs(List<AtlasRelationshipDef> relationshipDefs) {
        this.relationshipDefs = relationshipDefs;
        return this;
    }

    /**
     * Get the structDefs property: An array of struct definitions.
     * 
     * @return the structDefs value.
     */
    @Generated
    public List<AtlasStructDef> getStructDefs() {
        return this.structDefs;
    }

    /**
     * Set the structDefs property: An array of struct definitions.
     * 
     * @param structDefs the structDefs value to set.
     * @return the AtlasTypesDef object itself.
     */
    @Generated
    public AtlasTypesDef setStructDefs(List<AtlasStructDef> structDefs) {
        this.structDefs = structDefs;
        return this;
    }

    /**
     * Get the termTemplateDefs property: An array of term template definitions.
     * 
     * @return the termTemplateDefs value.
     */
    @Generated
    public List<TermTemplateDef> getTermTemplateDefs() {
        return this.termTemplateDefs;
    }

    /**
     * Set the termTemplateDefs property: An array of term template definitions.
     * 
     * @param termTemplateDefs the termTemplateDefs value to set.
     * @return the AtlasTypesDef object itself.
     */
    @Generated
    public AtlasTypesDef setTermTemplateDefs(List<TermTemplateDef> termTemplateDefs) {
        this.termTemplateDefs = termTemplateDefs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("businessMetadataDefs", this.businessMetadataDefs,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("classificationDefs", this.classificationDefs,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("entityDefs", this.entityDefs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("enumDefs", this.enumDefs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("relationshipDefs", this.relationshipDefs,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("structDefs", this.structDefs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("termTemplateDefs", this.termTemplateDefs,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasTypesDef from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasTypesDef if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasTypesDef.
     */
    @Generated
    public static AtlasTypesDef fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasTypesDef deserializedAtlasTypesDef = new AtlasTypesDef();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("businessMetadataDefs".equals(fieldName)) {
                    List<AtlasBusinessMetadataDef> businessMetadataDefs
                        = reader.readArray(reader1 -> AtlasBusinessMetadataDef.fromJson(reader1));
                    deserializedAtlasTypesDef.businessMetadataDefs = businessMetadataDefs;
                } else if ("classificationDefs".equals(fieldName)) {
                    List<AtlasClassificationDef> classificationDefs
                        = reader.readArray(reader1 -> AtlasClassificationDef.fromJson(reader1));
                    deserializedAtlasTypesDef.classificationDefs = classificationDefs;
                } else if ("entityDefs".equals(fieldName)) {
                    List<AtlasEntityDef> entityDefs = reader.readArray(reader1 -> AtlasEntityDef.fromJson(reader1));
                    deserializedAtlasTypesDef.entityDefs = entityDefs;
                } else if ("enumDefs".equals(fieldName)) {
                    List<AtlasEnumDef> enumDefs = reader.readArray(reader1 -> AtlasEnumDef.fromJson(reader1));
                    deserializedAtlasTypesDef.enumDefs = enumDefs;
                } else if ("relationshipDefs".equals(fieldName)) {
                    List<AtlasRelationshipDef> relationshipDefs
                        = reader.readArray(reader1 -> AtlasRelationshipDef.fromJson(reader1));
                    deserializedAtlasTypesDef.relationshipDefs = relationshipDefs;
                } else if ("structDefs".equals(fieldName)) {
                    List<AtlasStructDef> structDefs = reader.readArray(reader1 -> AtlasStructDef.fromJson(reader1));
                    deserializedAtlasTypesDef.structDefs = structDefs;
                } else if ("termTemplateDefs".equals(fieldName)) {
                    List<TermTemplateDef> termTemplateDefs
                        = reader.readArray(reader1 -> TermTemplateDef.fromJson(reader1));
                    deserializedAtlasTypesDef.termTemplateDefs = termTemplateDefs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasTypesDef;
        });
    }
}
