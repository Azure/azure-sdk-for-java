// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result of the search result.
 */
@Immutable
public final class QueryResult implements JsonSerializable<QueryResult> {
    /*
     * The total number of search results (not the number of documents in a single
     * page).
     */
    @Generated
    private Integer searchCount;

    /*
     * 'True' if the '@search.count' is an approximate value and vise versa.
     */
    @Generated
    private Boolean searchCountApproximate;

    /*
     * The token used to get next batch of data. Absent if there's no more data.
     */
    @Generated
    private String continuationToken;

    /*
     * A facet list that consists of index fields assetType ,classification,
     * contactId, and label. When the facet is specified in the request, the value of
     * the facet is returned as an element of @search.facets.
     */
    @Generated
    private SearchFacetResultValue searchFacets;

    /*
     * Search result value
     */
    @Generated
    private List<SearchResultValue> value;

    /**
     * Creates an instance of QueryResult class.
     */
    @Generated
    private QueryResult() {
    }

    /**
     * Get the searchCount property: The total number of search results (not the number of documents in a single
     * page).
     * 
     * @return the searchCount value.
     */
    @Generated
    public Integer getSearchCount() {
        return this.searchCount;
    }

    /**
     * Get the searchCountApproximate property: 'True' if the '&#064;search.count' is an approximate value and vise
     * versa.
     * 
     * @return the searchCountApproximate value.
     */
    @Generated
    public Boolean isSearchCountApproximate() {
        return this.searchCountApproximate;
    }

    /**
     * Get the continuationToken property: The token used to get next batch of data. Absent if there's no more data.
     * 
     * @return the continuationToken value.
     */
    @Generated
    public String getContinuationToken() {
        return this.continuationToken;
    }

    /**
     * Get the searchFacets property: A facet list that consists of index fields assetType ,classification,
     * contactId, and label. When the facet is specified in the request, the value of
     * the facet is returned as an element of &#064;search.facets.
     * 
     * @return the searchFacets value.
     */
    @Generated
    public SearchFacetResultValue getSearchFacets() {
        return this.searchFacets;
    }

    /**
     * Get the value property: Search result value.
     * 
     * @return the value value.
     */
    @Generated
    public List<SearchResultValue> getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("@search.count", this.searchCount);
        jsonWriter.writeBooleanField("@search.count.approximate", this.searchCountApproximate);
        jsonWriter.writeStringField("continuationToken", this.continuationToken);
        jsonWriter.writeJsonField("@search.facets", this.searchFacets);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryResult.
     */
    @Generated
    public static QueryResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryResult deserializedQueryResult = new QueryResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@search.count".equals(fieldName)) {
                    deserializedQueryResult.searchCount = reader.getNullable(JsonReader::getInt);
                } else if ("@search.count.approximate".equals(fieldName)) {
                    deserializedQueryResult.searchCountApproximate = reader.getNullable(JsonReader::getBoolean);
                } else if ("continuationToken".equals(fieldName)) {
                    deserializedQueryResult.continuationToken = reader.getString();
                } else if ("@search.facets".equals(fieldName)) {
                    deserializedQueryResult.searchFacets = SearchFacetResultValue.fromJson(reader);
                } else if ("value".equals(fieldName)) {
                    List<SearchResultValue> value = reader.readArray(reader1 -> SearchResultValue.fromJson(reader1));
                    deserializedQueryResult.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryResult;
        });
    }
}
