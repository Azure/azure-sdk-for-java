// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The content of a search facet result item.
 */
@Fluent
public final class SearchFacetItem implements JsonSerializable<SearchFacetItem> {
    /*
     * The count of the facet item.
     */
    @Generated
    private Integer count;

    /*
     * The name of the facet item.
     */
    @Generated
    private String facet;

    /*
     * Define the sorting criteria for items
     */
    @Generated
    private SearchFacetSort sort;

    /**
     * Creates an instance of SearchFacetItem class.
     */
    @Generated
    public SearchFacetItem() {
    }

    /**
     * Get the count property: The count of the facet item.
     * 
     * @return the count value.
     */
    @Generated
    public Integer getCount() {
        return this.count;
    }

    /**
     * Set the count property: The count of the facet item.
     * 
     * @param count the count value to set.
     * @return the SearchFacetItem object itself.
     */
    @Generated
    public SearchFacetItem setCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the facet property: The name of the facet item.
     * 
     * @return the facet value.
     */
    @Generated
    public String getFacet() {
        return this.facet;
    }

    /**
     * Set the facet property: The name of the facet item.
     * 
     * @param facet the facet value to set.
     * @return the SearchFacetItem object itself.
     */
    @Generated
    public SearchFacetItem setFacet(String facet) {
        this.facet = facet;
        return this;
    }

    /**
     * Get the sort property: Define the sorting criteria for items.
     * 
     * @return the sort value.
     */
    @Generated
    public SearchFacetSort getSort() {
        return this.sort;
    }

    /**
     * Set the sort property: Define the sorting criteria for items.
     * 
     * @param sort the sort value to set.
     * @return the SearchFacetItem object itself.
     */
    @Generated
    public SearchFacetItem setSort(SearchFacetSort sort) {
        this.sort = sort;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("facet", this.facet);
        jsonWriter.writeJsonField("sort", this.sort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchFacetItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchFacetItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchFacetItem.
     */
    @Generated
    public static SearchFacetItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchFacetItem deserializedSearchFacetItem = new SearchFacetItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedSearchFacetItem.count = reader.getNullable(JsonReader::getInt);
                } else if ("facet".equals(fieldName)) {
                    deserializedSearchFacetItem.facet = reader.getString();
                } else if ("sort".equals(fieldName)) {
                    deserializedSearchFacetItem.sort = SearchFacetSort.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchFacetItem;
        });
    }
}
