// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.implementation;

import com.azure.analytics.purview.datamap.PurviewDataMapServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Discoveries.
 */
public final class DiscoveriesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DiscoveriesService service;

    /**
     * The service client containing this operation class.
     */
    private final DataMapClientImpl client;

    /**
     * Initializes an instance of DiscoveriesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiscoveriesImpl(DataMapClientImpl client) {
        this.service
            = RestProxy.create(DiscoveriesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PurviewDataMapServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for DataMapClientDiscoveries to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/datamap/api")
    @ServiceInterface(name = "DataMapClientDiscove")
    public interface DiscoveriesService {
        @Post("/search/query")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> query(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/search/query")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> querySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/search/suggest")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> suggest(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/search/suggest")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> suggestSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/search/autocomplete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> autoComplete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/search/autocomplete")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> autoCompleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Get data using search.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     keywords: String (Optional)
     *     limit: Integer (Optional)
     *     continuationToken: String (Optional)
     *     orderby (Optional): [
     *         Object (Optional)
     *     ]
     *     filter: Object (Optional)
     *     facets (Optional): [
     *          (Optional){
     *             count: Integer (Optional)
     *             facet: String (Optional)
     *             sort (Optional): {
     *                 count: String(asc/desc) (Optional)
     *                 value: String(asc/desc) (Optional)
     *             }
     *         }
     *     ]
     *     taxonomySetting (Optional): {
     *         assetTypes (Optional): [
     *             String (Optional)
     *         ]
     *         facet (Optional): (recursive schema, see facet above)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     &#64;search.count: Integer (Optional)
     *     &#64;search.count.approximate: Boolean (Optional)
     *     continuationToken: String (Optional)
     *     &#64;search.facets (Optional): {
     *         entityType (Optional): [
     *              (Optional){
     *                 count: Integer (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *         assetType (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         classification (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         term (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         contactId (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         contactType (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         label (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         glossaryType (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         termStatus (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         termTemplate (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     value (Optional): [
     *          (Optional){
     *             &#64;search.score: Double (Optional)
     *             @search.highlights (Optional): {
     *                 id (Optional): [
     *                     String (Optional)
     *                 ]
     *                 qualifiedName (Optional): [
     *                     String (Optional)
     *                 ]
     *                 name (Optional): [
     *                     String (Optional)
     *                 ]
     *                 description (Optional): [
     *                     String (Optional)
     *                 ]
     *                 entityType (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             objectType: String (Optional)
     *             createTime: Long (Optional)
     *             updateTime: Long (Optional)
     *             id: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             entityType: String (Optional)
     *             description: String (Optional)
     *             endorsement: String (Optional)
     *             owner: String (Optional)
     *             classification (Optional): [
     *                 String (Optional)
     *             ]
     *             label (Optional): [
     *                 String (Optional)
     *             ]
     *             term (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     glossaryName: String (Optional)
     *                     guid: String (Optional)
     *                 }
     *             ]
     *             contact (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                     contactType: String (Optional)
     *                 }
     *             ]
     *             assetType (Optional): [
     *                 String (Optional)
     *             ]
     *             glossaryType: String (Optional)
     *             glossary: String (Optional)
     *             termStatus: String (Optional)
     *             termTemplate (Optional): [
     *                 String (Optional)
     *             ]
     *             longDescription: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data using search along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> queryWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.query(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, context));
    }

    /**
     * Get data using search.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     keywords: String (Optional)
     *     limit: Integer (Optional)
     *     continuationToken: String (Optional)
     *     orderby (Optional): [
     *         Object (Optional)
     *     ]
     *     filter: Object (Optional)
     *     facets (Optional): [
     *          (Optional){
     *             count: Integer (Optional)
     *             facet: String (Optional)
     *             sort (Optional): {
     *                 count: String(asc/desc) (Optional)
     *                 value: String(asc/desc) (Optional)
     *             }
     *         }
     *     ]
     *     taxonomySetting (Optional): {
     *         assetTypes (Optional): [
     *             String (Optional)
     *         ]
     *         facet (Optional): (recursive schema, see facet above)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     &#64;search.count: Integer (Optional)
     *     &#64;search.count.approximate: Boolean (Optional)
     *     continuationToken: String (Optional)
     *     &#64;search.facets (Optional): {
     *         entityType (Optional): [
     *              (Optional){
     *                 count: Integer (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *         assetType (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         classification (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         term (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         contactId (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         contactType (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         label (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         glossaryType (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         termStatus (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         termTemplate (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     value (Optional): [
     *          (Optional){
     *             &#64;search.score: Double (Optional)
     *             @search.highlights (Optional): {
     *                 id (Optional): [
     *                     String (Optional)
     *                 ]
     *                 qualifiedName (Optional): [
     *                     String (Optional)
     *                 ]
     *                 name (Optional): [
     *                     String (Optional)
     *                 ]
     *                 description (Optional): [
     *                     String (Optional)
     *                 ]
     *                 entityType (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *             objectType: String (Optional)
     *             createTime: Long (Optional)
     *             updateTime: Long (Optional)
     *             id: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             entityType: String (Optional)
     *             description: String (Optional)
     *             endorsement: String (Optional)
     *             owner: String (Optional)
     *             classification (Optional): [
     *                 String (Optional)
     *             ]
     *             label (Optional): [
     *                 String (Optional)
     *             ]
     *             term (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     glossaryName: String (Optional)
     *                     guid: String (Optional)
     *                 }
     *             ]
     *             contact (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                     contactType: String (Optional)
     *                 }
     *             ]
     *             assetType (Optional): [
     *                 String (Optional)
     *             ]
     *             glossaryType: String (Optional)
     *             glossary: String (Optional)
     *             termStatus: String (Optional)
     *             termTemplate (Optional): [
     *                 String (Optional)
     *             ]
     *             longDescription: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data using search along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> queryWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.querySync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, body, requestOptions, Context.NONE);
    }

    /**
     * Get search suggestions by query criteria.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     keywords: String (Optional)
     *     limit: Integer (Optional)
     *     filter: Object (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             &#64;search.score: Double (Optional)
     *             @search.text: String (Optional)
     *             objectType: String (Optional)
     *             createTime: Long (Optional)
     *             updateTime: Long (Optional)
     *             id: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             entityType: String (Optional)
     *             description: String (Optional)
     *             endorsement: String (Optional)
     *             owner: String (Optional)
     *             classification (Optional): [
     *                 String (Optional)
     *             ]
     *             label (Optional): [
     *                 String (Optional)
     *             ]
     *             term (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     glossaryName: String (Optional)
     *                     guid: String (Optional)
     *                 }
     *             ]
     *             contact (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                     contactType: String (Optional)
     *                 }
     *             ]
     *             assetType (Optional): [
     *                 String (Optional)
     *             ]
     *             glossaryType: String (Optional)
     *             glossary: String (Optional)
     *             termStatus: String (Optional)
     *             termTemplate (Optional): [
     *                 String (Optional)
     *             ]
     *             longDescription: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return search suggestions by query criteria along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> suggestWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.suggest(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, context));
    }

    /**
     * Get search suggestions by query criteria.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     keywords: String (Optional)
     *     limit: Integer (Optional)
     *     filter: Object (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             &#64;search.score: Double (Optional)
     *             @search.text: String (Optional)
     *             objectType: String (Optional)
     *             createTime: Long (Optional)
     *             updateTime: Long (Optional)
     *             id: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             entityType: String (Optional)
     *             description: String (Optional)
     *             endorsement: String (Optional)
     *             owner: String (Optional)
     *             classification (Optional): [
     *                 String (Optional)
     *             ]
     *             label (Optional): [
     *                 String (Optional)
     *             ]
     *             term (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     glossaryName: String (Optional)
     *                     guid: String (Optional)
     *                 }
     *             ]
     *             contact (Optional): [
     *                  (Optional){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                     contactType: String (Optional)
     *                 }
     *             ]
     *             assetType (Optional): [
     *                 String (Optional)
     *             ]
     *             glossaryType: String (Optional)
     *             glossary: String (Optional)
     *             termStatus: String (Optional)
     *             termTemplate (Optional): [
     *                 String (Optional)
     *             ]
     *             longDescription: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return search suggestions by query criteria along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> suggestWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.suggestSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, body, requestOptions, Context.NONE);
    }

    /**
     * Get auto complete options.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     keywords: String (Optional)
     *     limit: Integer (Optional)
     *     filter: Object (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             text: String (Optional)
     *             queryPlusText: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return auto complete options along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> autoCompleteWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.autoComplete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, context));
    }

    /**
     * Get auto complete options.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     keywords: String (Optional)
     *     limit: Integer (Optional)
     *     filter: Object (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             text: String (Optional)
     *             queryPlusText: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return auto complete options along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> autoCompleteWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.autoCompleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, body, requestOptions, Context.NONE);
    }
}
