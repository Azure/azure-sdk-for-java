// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap;

import com.azure.analytics.purview.datamap.implementation.EntitiesImpl;
import com.azure.analytics.purview.datamap.implementation.MultipartFormDataHelper;
import com.azure.analytics.purview.datamap.models.AtlasClassification;
import com.azure.analytics.purview.datamap.models.AtlasClassifications;
import com.azure.analytics.purview.datamap.models.AtlasEntitiesWithExtInfo;
import com.azure.analytics.purview.datamap.models.AtlasEntityHeader;
import com.azure.analytics.purview.datamap.models.AtlasEntityHeaders;
import com.azure.analytics.purview.datamap.models.AtlasEntityWithExtInfo;
import com.azure.analytics.purview.datamap.models.BulkImportResult;
import com.azure.analytics.purview.datamap.models.BusinessAttributeUpdateBehavior;
import com.azure.analytics.purview.datamap.models.BusinessMetadataOptions;
import com.azure.analytics.purview.datamap.models.ClassificationAssociateOptions;
import com.azure.analytics.purview.datamap.models.EntityMutationResult;
import com.azure.analytics.purview.datamap.models.MoveEntitiesOptions;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;
import java.util.Map;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous DataMapClient type.
 */
@ServiceClient(builder = DataMapClientBuilder.class, isAsync = true)
public final class EntityAsyncClient {
    @Generated
    private final EntitiesImpl serviceClient;

    /**
     * Initializes an instance of EntityAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    EntityAsyncClient(EntitiesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create or update an entity.
     * Existing entity is matched using its unique guid if
     * supplied or by its unique attributes eg: qualifiedName.
     * Map and array of
     * collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string,
     * int&gt;&gt;.
     * For each contact type, the maximum number of contacts is 20.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>businessAttributeUpdateBehavior</td><td>String</td><td>No</td><td>Used to define the update behavior for
     * business attributes when updating
     * entities. Allowed values: "ignore", "replace", "merge".</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>The collection where entities will be moved to. Only
     * specify a value if you
     * need to move an entity to another collection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param atlasEntityWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(BinaryData atlasEntityWithExtInfo,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponseAsync(atlasEntityWithExtInfo, requestOptions);
    }

    /**
     * List entities in bulk identified by its GUIDs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid An array of GUIDs of entities to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByIdsWithResponse(List<String> guid, RequestOptions requestOptions) {
        return this.serviceClient.getByIdsWithResponseAsync(guid, requestOptions);
    }

    /**
     * Create or update entities in bulk.
     * Existing entity is matched using its unique
     * guid if supplied or by its unique attributes eg: qualifiedName.
     * Map and array
     * of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;,
     * array&lt;map&lt;string, int&gt;&gt;.
     * For each contact type, the maximum number of contacts
     * is 20.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>The collection where entities will be moved to. Only
     * specify a value if you
     * need to move an entity to another collection.</td></tr>
     * <tr><td>businessAttributeUpdateBehavior</td><td>String</td><td>No</td><td>Used to define the update behavior for
     * business attributes when updating
     * entities. Allowed values: "ignore", "replace", "merge".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param atlasEntitiesWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchCreateOrUpdateWithResponse(BinaryData atlasEntitiesWithExtInfo,
        RequestOptions requestOptions) {
        return this.serviceClient.batchCreateOrUpdateWithResponseAsync(atlasEntitiesWithExtInfo, requestOptions);
    }

    /**
     * Delete a list of entities in bulk identified by their GUIDs or unique
     * attributes.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid An array of GUIDs of entities to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchDeleteWithResponse(List<String> guid, RequestOptions requestOptions) {
        return this.serviceClient.batchDeleteWithResponseAsync(guid, requestOptions);
    }

    /**
     * Associate a classification to multiple entities in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     classification (Optional): {
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param classificationAssociateOptions The request payload for classification association.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationWithResponse(BinaryData classificationAssociateOptions,
        RequestOptions requestOptions) {
        return this.serviceClient.addClassificationWithResponseAsync(classificationAssociateOptions, requestOptions);
    }

    /**
     * Get complete definition of an entity given its GUID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(guid, requestOptions);
    }

    /**
     * Update entity partially - create or update entity attribute identified by its
     * GUID.
     * Supports only primitive attribute type and entity references.
     * It does not support updating complex types like arrays, and maps.
     * Null updates are not possible.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * Object
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param name The name of the attribute.
     * @param body The value of the attribute.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateAttributeByIdWithResponse(String guid, String name, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.updateAttributeByIdWithResponseAsync(guid, name, body, requestOptions);
    }

    /**
     * Delete an entity identified by its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(guid, requestOptions);
    }

    /**
     * Get classification for a given entity represented by a GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Required)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityGuid: String (Optional)
     *     entityStatus: String(ACTIVE/DELETED) (Optional)
     *     removePropagationsOnEntityDelete: Boolean (Optional)
     *     validityPeriods (Optional): [
     *          (Optional){
     *             endTime: String (Optional)
     *             startTime: String (Optional)
     *             timeZone: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classification for a given entity represented by a GUID along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationWithResponse(String guid, String classificationName,
        RequestOptions requestOptions) {
        return this.serviceClient.getClassificationWithResponseAsync(guid, classificationName, requestOptions);
    }

    /**
     * Delete a given classification from an existing entity represented by a GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeClassificationWithResponse(String guid, String classificationName,
        RequestOptions requestOptions) {
        return this.serviceClient.removeClassificationWithResponseAsync(guid, classificationName, requestOptions);
    }

    /**
     * List classifications for a given entity represented by a GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     list (Optional): [
     *         Object (Optional)
     *     ]
     *     pageSize: Integer (Optional)
     *     sortBy: String (Optional)
     *     sortType: String(NONE/ASC/DESC) (Optional)
     *     startIndex: Integer (Optional)
     *     totalCount: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rEST serialization friendly list along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationsWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getClassificationsWithResponseAsync(guid, requestOptions);
    }

    /**
     * Add classifications to an existing entity represented by a GUID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationsWithResponse(String guid, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.addClassificationsWithResponseAsync(guid, body, requestOptions);
    }

    /**
     * Update classifications to an existing entity represented by a guid.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClassificationsWithResponse(String guid, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.updateClassificationsWithResponseAsync(guid, body, requestOptions);
    }

    /**
     * Get complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        return this.serviceClient.getByUniqueAttributeWithResponseAsync(typeName, requestOptions);
    }

    /**
     * Update entity partially - Allow a subset of attributes to be updated on an
     * entity which is identified by its type and unique attribute eg:
     * Referenceable.qualifiedName. Null updates are not possible.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * 
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param atlasEntityWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateByUniqueAttributeWithResponse(String typeName,
        BinaryData atlasEntityWithExtInfo, RequestOptions requestOptions) {
        return this.serviceClient.updateByUniqueAttributeWithResponseAsync(typeName, atlasEntityWithExtInfo,
            requestOptions);
    }

    /**
     * Delete an entity identified by its type and unique attributes.
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteByUniqueAttributeWithResponse(String typeName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteByUniqueAttributeWithResponseAsync(typeName, requestOptions);
    }

    /**
     * Delete a given classification from an entity identified by its type and unique
     * attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param typeName The name of the type.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeClassificationByUniqueAttributeWithResponse(String typeName,
        String classificationName, RequestOptions requestOptions) {
        return this.serviceClient.removeClassificationByUniqueAttributeWithResponseAsync(typeName, classificationName,
            requestOptions);
    }

    /**
     * Add classification to the entity identified by its type and unique attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationsByUniqueAttributeWithResponse(String typeName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.addClassificationsByUniqueAttributeWithResponseAsync(typeName, body, requestOptions);
    }

    /**
     * Update classification on an entity identified by its type and unique attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClassificationsUniqueByAttributeWithResponse(String typeName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.updateClassificationsUniqueByAttributeWithResponseAsync(typeName, body,
            requestOptions);
    }

    /**
     * Set classifications on entities in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidHeaderMap (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Required)
     * ]
     * }</pre>
     * 
     * @param atlasEntityHeaders An instance of an entity header map.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchSetClassificationsWithResponse(BinaryData atlasEntityHeaders,
        RequestOptions requestOptions) {
        return this.serviceClient.batchSetClassificationsWithResponseAsync(atlasEntityHeaders, requestOptions);
    }

    /**
     * Bulk API to retrieve list of entities identified by its unique attributes.
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following
     * format
     * 
     * typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
     * 
     * NOTE:
     * The attrName should be an unique attribute for the given entity-type.
     * The REST
     * request would look something like this
     * 
     * GET
     * /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_1:qualifiedName=db1&#064;cl1&amp;attr_2:qualifiedName=db2&#064;cl1
     * 
     * Note:
     * at least one unique attribute must be provided.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * <tr><td>attr_N:qualifiedName</td><td>String</td><td>No</td><td>Qualified name of an entity. E.g. to find 2
     * entities you can set
     * attrs_1:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. (This is only an
     * example. qualifiedName can be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchGetByUniqueAttributesWithResponse(String typeName,
        RequestOptions requestOptions) {
        return this.serviceClient.batchGetByUniqueAttributesWithResponseAsync(typeName, requestOptions);
    }

    /**
     * Get entity header given its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Required)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     classificationNames (Optional): [
     *         String (Optional)
     *     ]
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     displayText: String (Optional)
     *     guid: String (Optional)
     *     isIncomplete: Boolean (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     meaningNames (Optional): [
     *         String (Optional)
     *     ]
     *     meanings (Optional): [
     *          (Optional){
     *             confidence: Integer (Optional)
     *             createdBy: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(ACTIVE/DELETED) (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entity header given its GUID along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getHeaderWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.getHeaderWithResponseAsync(guid, requestOptions);
    }

    /**
     * Remove business metadata from an entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String (Required): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeBusinessMetadataWithResponse(String guid, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.removeBusinessMetadataWithResponseAsync(guid, body, requestOptions);
    }

    /**
     * Add business metadata to an entity.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>isOverwrite</td><td>Boolean</td><td>No</td><td>Whether to overwrite the existing business metadata on the
     * entity or not,
     * default is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String (Required): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body BusinessMetadata payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOrUpdateBusinessMetadataWithResponse(String guid, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.addOrUpdateBusinessMetadataWithResponseAsync(guid, body, requestOptions);
    }

    /**
     * Delete business metadata attributes from an entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeBusinessMetadataAttributesWithResponse(String businessMetadataName, String guid,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.removeBusinessMetadataAttributesWithResponseAsync(businessMetadataName, guid, body,
            requestOptions);
    }

    /**
     * Add or update business metadata attributes.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOrUpdateBusinessMetadataAttributesWithResponse(String businessMetadataName,
        String guid, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.addOrUpdateBusinessMetadataAttributesWithResponseAsync(businessMetadataName, guid,
            body, requestOptions);
    }

    /**
     * Get the sample Template for uploading/creating bulk BusinessMetaData.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the sample Template for uploading/creating bulk BusinessMetaData along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBusinessMetadataTemplateWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getBusinessMetadataTemplateWithResponseAsync(requestOptions);
    }

    /**
     * Upload the file for creating Business Metadata in BULK.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedImportInfoList (Optional): [
     *          (Optional){
     *             childObjectName: String (Optional)
     *             importStatus: String(SUCCESS/FAILED) (Optional)
     *             parentObjectName: String (Optional)
     *             remarks: String (Optional)
     *         }
     *     ]
     *     successImportInfoList (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param businessMetadataOptions Business metadata to send to the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return bulk import result along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> importBusinessMetadataWithResponse(BinaryData businessMetadataOptions,
        RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'importBusinessMetadata' is 'multipart/form-data'
        return this.serviceClient.importBusinessMetadataWithResponseAsync(businessMetadataOptions, requestOptions);
    }

    /**
     * Delete given labels to a given entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeLabelsWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.removeLabelsWithResponseAsync(guid, requestOptions);
    }

    /**
     * Set labels to a given entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLabelsWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.setLabelsWithResponseAsync(guid, requestOptions);
    }

    /**
     * Add given labels to a given entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addLabelWithResponse(String guid, RequestOptions requestOptions) {
        return this.serviceClient.addLabelWithResponseAsync(guid, requestOptions);
    }

    /**
     * Delete given labels to a given entity identified by its type and unique
     * attribute.
     * 
     * If labels is null/empty, no labels will be removed.
     * 
     * If any labels
     * in labels set are non-existing labels, they will be ignored, only existing
     * labels will be removed. In addition to the typeName path parameter, attribute
     * key-value pair(s) can be provided in the following format:
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique
     * across entities, eg. qualifiedName. The REST request would look something like
     * this: DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeLabelsByUniqueAttributeWithResponse(String typeName,
        RequestOptions requestOptions) {
        return this.serviceClient.removeLabelsByUniqueAttributeWithResponseAsync(typeName, requestOptions);
    }

    /**
     * Set labels to a given entity identified by its type and unique attributes.
     * 
     * If
     * labels is null/empty, existing labels will all be removed.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: POST
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        return this.serviceClient.setLabelsByUniqueAttributeWithResponseAsync(typeName, requestOptions);
    }

    /**
     * Add given labels to a given entity identified by its type and unique
     * attributes.
     * 
     * If labels is null/empty, no labels will be added.
     * 
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        return this.serviceClient.addLabelsByUniqueAttributeWithResponseAsync(typeName, requestOptions);
    }

    /**
     * Move existing entities to the target collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param collectionId The collection where entities will be moved to.
     * @param moveEntitiesOptions MoveEntitiesOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> moveEntitiesToCollectionWithResponse(String collectionId,
        BinaryData moveEntitiesOptions, RequestOptions requestOptions) {
        return this.serviceClient.moveEntitiesToCollectionWithResponseAsync(collectionId, moveEntitiesOptions,
            requestOptions);
    }

    /**
     * Create or update an entity.
     * Existing entity is matched using its unique guid if
     * supplied or by its unique attributes eg: qualifiedName.
     * Map and array of
     * collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string,
     * int&gt;&gt;.
     * For each contact type, the maximum number of contacts is 20.
     * 
     * @param atlasEntityWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @param businessAttributeUpdateBehavior Used to define the update behavior for business attributes when updating
     * entities.
     * @param collectionId The collection where entities will be moved to. Only specify a value if you
     * need to move an entity to another collection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> createOrUpdate(AtlasEntityWithExtInfo atlasEntityWithExtInfo,
        BusinessAttributeUpdateBehavior businessAttributeUpdateBehavior, String collectionId) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (businessAttributeUpdateBehavior != null) {
            requestOptions.addQueryParam("businessAttributeUpdateBehavior", businessAttributeUpdateBehavior.toString(),
                false);
        }
        if (collectionId != null) {
            requestOptions.addQueryParam("collectionId", collectionId, false);
        }
        return createOrUpdateWithResponse(BinaryData.fromObject(atlasEntityWithExtInfo), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Create or update an entity.
     * Existing entity is matched using its unique guid if
     * supplied or by its unique attributes eg: qualifiedName.
     * Map and array of
     * collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string,
     * int&gt;&gt;.
     * For each contact type, the maximum number of contacts is 20.
     * 
     * @param atlasEntityWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> createOrUpdate(AtlasEntityWithExtInfo atlasEntityWithExtInfo) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrUpdateWithResponse(BinaryData.fromObject(atlasEntityWithExtInfo), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * List entities in bulk identified by its GUIDs.
     * 
     * @param guid An array of GUIDs of entities to list.
     * @param minExtInfo Whether to return minimal information for referred entities.
     * @param ignoreRelationships Whether to ignore relationship attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntitiesWithExtInfo> getByIds(List<String> guid, Boolean minExtInfo, Boolean ignoreRelationships) {
        // Generated convenience method for getByIdsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (minExtInfo != null) {
            requestOptions.addQueryParam("minExtInfo", String.valueOf(minExtInfo), false);
        }
        if (ignoreRelationships != null) {
            requestOptions.addQueryParam("ignoreRelationships", String.valueOf(ignoreRelationships), false);
        }
        return getByIdsWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntitiesWithExtInfo.class));
    }

    /**
     * List entities in bulk identified by its GUIDs.
     * 
     * @param guid An array of GUIDs of entities to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntitiesWithExtInfo> getByIds(List<String> guid) {
        // Generated convenience method for getByIdsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getByIdsWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntitiesWithExtInfo.class));
    }

    /**
     * Create or update entities in bulk.
     * Existing entity is matched using its unique
     * guid if supplied or by its unique attributes eg: qualifiedName.
     * Map and array
     * of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;,
     * array&lt;map&lt;string, int&gt;&gt;.
     * For each contact type, the maximum number of contacts
     * is 20.
     * 
     * @param atlasEntitiesWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @param collectionId The collection where entities will be moved to. Only specify a value if you
     * need to move an entity to another collection.
     * @param businessAttributeUpdateBehavior Used to define the update behavior for business attributes when updating
     * entities.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> batchCreateOrUpdate(AtlasEntitiesWithExtInfo atlasEntitiesWithExtInfo,
        String collectionId, BusinessAttributeUpdateBehavior businessAttributeUpdateBehavior) {
        // Generated convenience method for batchCreateOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (collectionId != null) {
            requestOptions.addQueryParam("collectionId", collectionId, false);
        }
        if (businessAttributeUpdateBehavior != null) {
            requestOptions.addQueryParam("businessAttributeUpdateBehavior", businessAttributeUpdateBehavior.toString(),
                false);
        }
        return batchCreateOrUpdateWithResponse(BinaryData.fromObject(atlasEntitiesWithExtInfo), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Create or update entities in bulk.
     * Existing entity is matched using its unique
     * guid if supplied or by its unique attributes eg: qualifiedName.
     * Map and array
     * of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;,
     * array&lt;map&lt;string, int&gt;&gt;.
     * For each contact type, the maximum number of contacts
     * is 20.
     * 
     * @param atlasEntitiesWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> batchCreateOrUpdate(AtlasEntitiesWithExtInfo atlasEntitiesWithExtInfo) {
        // Generated convenience method for batchCreateOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return batchCreateOrUpdateWithResponse(BinaryData.fromObject(atlasEntitiesWithExtInfo), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Delete a list of entities in bulk identified by their GUIDs or unique
     * attributes.
     * 
     * @param guid An array of GUIDs of entities to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> batchDelete(List<String> guid) {
        // Generated convenience method for batchDeleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return batchDeleteWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Associate a classification to multiple entities in bulk.
     * 
     * @param classificationAssociateOptions The request payload for classification association.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addClassification(ClassificationAssociateOptions classificationAssociateOptions) {
        // Generated convenience method for addClassificationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addClassificationWithResponse(BinaryData.fromObject(classificationAssociateOptions), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Get complete definition of an entity given its GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param minExtInfo Whether to return minimal information for referred entities.
     * @param ignoreRelationships Whether to ignore relationship attributes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return complete definition of an entity given its GUID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntityWithExtInfo> get(String guid, Boolean minExtInfo, Boolean ignoreRelationships) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (minExtInfo != null) {
            requestOptions.addQueryParam("minExtInfo", String.valueOf(minExtInfo), false);
        }
        if (ignoreRelationships != null) {
            requestOptions.addQueryParam("ignoreRelationships", String.valueOf(ignoreRelationships), false);
        }
        return getWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntityWithExtInfo.class));
    }

    /**
     * Get complete definition of an entity given its GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return complete definition of an entity given its GUID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntityWithExtInfo> get(String guid) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntityWithExtInfo.class));
    }

    /**
     * Update entity partially - create or update entity attribute identified by its
     * GUID.
     * Supports only primitive attribute type and entity references.
     * It does not support updating complex types like arrays, and maps.
     * Null updates are not possible.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param name The name of the attribute.
     * @param body The value of the attribute.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> updateAttributeById(String guid, String name, Object body) {
        // Generated convenience method for updateAttributeByIdWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateAttributeByIdWithResponse(guid, name, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Delete an entity identified by its GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> delete(String guid) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Get classification for a given entity represented by a GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return classification for a given entity represented by a GUID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasClassification> getClassification(String guid, String classificationName) {
        // Generated convenience method for getClassificationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getClassificationWithResponse(guid, classificationName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasClassification.class));
    }

    /**
     * Delete a given classification from an existing entity represented by a GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeClassification(String guid, String classificationName) {
        // Generated convenience method for removeClassificationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeClassificationWithResponse(guid, classificationName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * List classifications for a given entity represented by a GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return rEST serialization friendly list on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasClassifications> getClassifications(String guid) {
        // Generated convenience method for getClassificationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getClassificationsWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasClassifications.class));
    }

    /**
     * Add classifications to an existing entity represented by a GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be added.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addClassifications(String guid, List<AtlasClassification> body) {
        // Generated convenience method for addClassificationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addClassificationsWithResponse(guid, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Update classifications to an existing entity represented by a guid.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateClassifications(String guid, List<AtlasClassification> body) {
        // Generated convenience method for updateClassificationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateClassificationsWithResponse(guid, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Get complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param minExtInfo Whether to return minimal information for referred entities.
     * @param ignoreRelationships Whether to ignore relationship attributes.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntityWithExtInfo> getByUniqueAttribute(String typeName, Boolean minExtInfo,
        Boolean ignoreRelationships, String attribute) {
        // Generated convenience method for getByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (minExtInfo != null) {
            requestOptions.addQueryParam("minExtInfo", String.valueOf(minExtInfo), false);
        }
        if (ignoreRelationships != null) {
            requestOptions.addQueryParam("ignoreRelationships", String.valueOf(ignoreRelationships), false);
        }
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        return getByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntityWithExtInfo.class));
    }

    /**
     * Get complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntityWithExtInfo> getByUniqueAttribute(String typeName) {
        // Generated convenience method for getByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntityWithExtInfo.class));
    }

    /**
     * Update entity partially - Allow a subset of attributes to be updated on an
     * entity which is identified by its type and unique attribute eg:
     * Referenceable.qualifiedName. Null updates are not possible.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * 
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param atlasEntityWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> updateByUniqueAttribute(String typeName,
        AtlasEntityWithExtInfo atlasEntityWithExtInfo, String attribute) {
        // Generated convenience method for updateByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        return updateByUniqueAttributeWithResponse(typeName, BinaryData.fromObject(atlasEntityWithExtInfo),
            requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Update entity partially - Allow a subset of attributes to be updated on an
     * entity which is identified by its type and unique attribute eg:
     * Referenceable.qualifiedName. Null updates are not possible.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * 
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param atlasEntityWithExtInfo An instance of an entity along with extended info - like hive_table,
     * hive_database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> updateByUniqueAttribute(String typeName,
        AtlasEntityWithExtInfo atlasEntityWithExtInfo) {
        // Generated convenience method for updateByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateByUniqueAttributeWithResponse(typeName, BinaryData.fromObject(atlasEntityWithExtInfo),
            requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Delete an entity identified by its type and unique attributes.
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> deleteByUniqueAttribute(String typeName, String attribute) {
        // Generated convenience method for deleteByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        return deleteByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Delete an entity identified by its type and unique attributes.
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> deleteByUniqueAttribute(String typeName) {
        // Generated convenience method for deleteByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    /**
     * Delete a given classification from an entity identified by its type and unique
     * attributes.
     * 
     * @param typeName The name of the type.
     * @param classificationName The name of the classification.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeClassificationByUniqueAttribute(String typeName, String classificationName,
        String attribute) {
        // Generated convenience method for removeClassificationByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        return removeClassificationByUniqueAttributeWithResponse(typeName, classificationName, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Delete a given classification from an entity identified by its type and unique
     * attributes.
     * 
     * @param typeName The name of the type.
     * @param classificationName The name of the classification.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeClassificationByUniqueAttribute(String typeName, String classificationName) {
        // Generated convenience method for removeClassificationByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeClassificationByUniqueAttributeWithResponse(typeName, classificationName, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Add classification to the entity identified by its type and unique attributes.
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be added.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addClassificationsByUniqueAttribute(String typeName, List<AtlasClassification> body,
        String attribute) {
        // Generated convenience method for addClassificationsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        return addClassificationsByUniqueAttributeWithResponse(typeName, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Add classification to the entity identified by its type and unique attributes.
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be added.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addClassificationsByUniqueAttribute(String typeName, List<AtlasClassification> body) {
        // Generated convenience method for addClassificationsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addClassificationsByUniqueAttributeWithResponse(typeName, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Update classification on an entity identified by its type and unique attributes.
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be updated.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateClassificationsUniqueByAttribute(String typeName, List<AtlasClassification> body,
        String attribute) {
        // Generated convenience method for updateClassificationsUniqueByAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        return updateClassificationsUniqueByAttributeWithResponse(typeName, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Update classification on an entity identified by its type and unique attributes.
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateClassificationsUniqueByAttribute(String typeName, List<AtlasClassification> body) {
        // Generated convenience method for updateClassificationsUniqueByAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateClassificationsUniqueByAttributeWithResponse(typeName, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Set classifications on entities in bulk.
     * 
     * @param atlasEntityHeaders An instance of an entity header map.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<String>> batchSetClassifications(AtlasEntityHeaders atlasEntityHeaders) {
        // Generated convenience method for batchSetClassificationsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return batchSetClassificationsWithResponse(BinaryData.fromObject(atlasEntityHeaders), requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_STRING));
    }

    /**
     * Bulk API to retrieve list of entities identified by its unique attributes.
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following
     * format
     * 
     * typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
     * 
     * NOTE:
     * The attrName should be an unique attribute for the given entity-type.
     * The REST
     * request would look something like this
     * 
     * GET
     * /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_1:qualifiedName=db1&#064;cl1&amp;attr_2:qualifiedName=db2&#064;cl1
     * 
     * Note:
     * at least one unique attribute must be provided.
     * 
     * @param typeName The name of the type.
     * @param minExtInfo Whether to return minimal information for referred entities.
     * @param ignoreRelationships Whether to ignore relationship attributes.
     * @param attrNQualifiedName Qualified name of an entity. E.g. to find 2 entities you can set
     * attrs_1:qualifiedName=db1&#064;cl1&amp;attrs_2:qualifiedName=db2&#064;cl1. (This is only an
     * example. qualifiedName can be changed to other unique attributes).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntitiesWithExtInfo> batchGetByUniqueAttributes(String typeName, Boolean minExtInfo,
        Boolean ignoreRelationships, String attrNQualifiedName) {
        // Generated convenience method for batchGetByUniqueAttributesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (minExtInfo != null) {
            requestOptions.addQueryParam("minExtInfo", String.valueOf(minExtInfo), false);
        }
        if (ignoreRelationships != null) {
            requestOptions.addQueryParam("ignoreRelationships", String.valueOf(ignoreRelationships), false);
        }
        if (attrNQualifiedName != null) {
            requestOptions.addQueryParam("attr_N:qualifiedName", attrNQualifiedName, false);
        }
        return batchGetByUniqueAttributesWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntitiesWithExtInfo.class));
    }

    /**
     * Bulk API to retrieve list of entities identified by its unique attributes.
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following
     * format
     * 
     * typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
     * 
     * NOTE:
     * The attrName should be an unique attribute for the given entity-type.
     * The REST
     * request would look something like this
     * 
     * GET
     * /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_1:qualifiedName=db1&#064;cl1&amp;attr_2:qualifiedName=db2&#064;cl1
     * 
     * Note:
     * at least one unique attribute must be provided.
     * 
     * @param typeName The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntitiesWithExtInfo> batchGetByUniqueAttributes(String typeName) {
        // Generated convenience method for batchGetByUniqueAttributesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return batchGetByUniqueAttributesWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntitiesWithExtInfo.class));
    }

    /**
     * Get entity header given its GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return entity header given its GUID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AtlasEntityHeader> getHeader(String guid) {
        // Generated convenience method for getHeaderWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getHeaderWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AtlasEntityHeader.class));
    }

    /**
     * Remove business metadata from an entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeBusinessMetadata(String guid, Map<String, Map<String, Object>> body) {
        // Generated convenience method for removeBusinessMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeBusinessMetadataWithResponse(guid, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Add business metadata to an entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body BusinessMetadata payload.
     * @param overwrite Whether to overwrite the existing business metadata on the entity or not,
     * default is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addOrUpdateBusinessMetadata(String guid, Map<String, Map<String, Object>> body,
        Boolean overwrite) {
        // Generated convenience method for addOrUpdateBusinessMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (overwrite != null) {
            requestOptions.addQueryParam("isOverwrite", String.valueOf(overwrite), false);
        }
        return addOrUpdateBusinessMetadataWithResponse(guid, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Add business metadata to an entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body BusinessMetadata payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addOrUpdateBusinessMetadata(String guid, Map<String, Map<String, Object>> body) {
        // Generated convenience method for addOrUpdateBusinessMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addOrUpdateBusinessMetadataWithResponse(guid, BinaryData.fromObject(body), requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Delete business metadata attributes from an entity.
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeBusinessMetadataAttributes(String businessMetadataName, String guid,
        Map<String, Object> body) {
        // Generated convenience method for removeBusinessMetadataAttributesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeBusinessMetadataAttributesWithResponse(businessMetadataName, guid, BinaryData.fromObject(body),
            requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Add or update business metadata attributes.
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addOrUpdateBusinessMetadataAttributes(String businessMetadataName, String guid,
        Map<String, Object> body) {
        // Generated convenience method for addOrUpdateBusinessMetadataAttributesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addOrUpdateBusinessMetadataAttributesWithResponse(businessMetadataName, guid,
            BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Get the sample Template for uploading/creating bulk BusinessMetaData.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the sample Template for uploading/creating bulk BusinessMetaData on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getBusinessMetadataTemplate() {
        // Generated convenience method for getBusinessMetadataTemplateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getBusinessMetadataTemplateWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Upload the file for creating Business Metadata in BULK.
     * 
     * @param businessMetadataOptions Business metadata to send to the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return bulk import result on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BulkImportResult> importBusinessMetadata(BusinessMetadataOptions businessMetadataOptions) {
        // Generated convenience method for importBusinessMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return importBusinessMetadataWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeFileField("file", businessMetadataOptions.getFile().getContent(),
                businessMetadataOptions.getFile().getContentType(), businessMetadataOptions.getFile().getFilename())
            .end()
            .getRequestBody(), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(BulkImportResult.class));
    }

    /**
     * Delete given labels to a given entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body set of labels to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeLabels(String guid, List<String> body) {
        // Generated convenience method for removeLabelsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return removeLabelsWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Delete given labels to a given entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeLabels(String guid) {
        // Generated convenience method for removeLabelsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeLabelsWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Set labels to a given entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body set of labels to be set to the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setLabels(String guid, List<String> body) {
        // Generated convenience method for setLabelsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return setLabelsWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Set labels to a given entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setLabels(String guid) {
        // Generated convenience method for setLabelsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setLabelsWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Add given labels to a given entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body set of labels to be added.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addLabel(String guid, List<String> body) {
        // Generated convenience method for addLabelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return addLabelWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Add given labels to a given entity.
     * 
     * @param guid The globally unique identifier of the entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addLabel(String guid) {
        // Generated convenience method for addLabelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addLabelWithResponse(guid, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Delete given labels to a given entity identified by its type and unique
     * attribute.
     * 
     * If labels is null/empty, no labels will be removed.
     * 
     * If any labels
     * in labels set are non-existing labels, they will be ignored, only existing
     * labels will be removed. In addition to the typeName path parameter, attribute
     * key-value pair(s) can be provided in the following format:
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique
     * across entities, eg. qualifiedName. The REST request would look something like
     * this: DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @param body set of labels to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeLabelsByUniqueAttribute(String typeName, String attribute, List<String> body) {
        // Generated convenience method for removeLabelsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return removeLabelsByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Delete given labels to a given entity identified by its type and unique
     * attribute.
     * 
     * If labels is null/empty, no labels will be removed.
     * 
     * If any labels
     * in labels set are non-existing labels, they will be ignored, only existing
     * labels will be removed. In addition to the typeName path parameter, attribute
     * key-value pair(s) can be provided in the following format:
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique
     * across entities, eg. qualifiedName. The REST request would look something like
     * this: DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeLabelsByUniqueAttribute(String typeName) {
        // Generated convenience method for removeLabelsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return removeLabelsByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Set labels to a given entity identified by its type and unique attributes.
     * 
     * If
     * labels is null/empty, existing labels will all be removed.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: POST
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @param body set of labels to be set.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setLabelsByUniqueAttribute(String typeName, String attribute, List<String> body) {
        // Generated convenience method for setLabelsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return setLabelsByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Set labels to a given entity identified by its type and unique attributes.
     * 
     * If
     * labels is null/empty, existing labels will all be removed.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: POST
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> setLabelsByUniqueAttribute(String typeName) {
        // Generated convenience method for setLabelsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return setLabelsByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Add given labels to a given entity identified by its type and unique
     * attributes.
     * 
     * If labels is null/empty, no labels will be added.
     * 
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @param attribute The qualified name of the entity. (This is only an example. qualifiedName can
     * be changed to other unique attributes).
     * @param body set of labels to be added.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addLabelsByUniqueAttribute(String typeName, String attribute, List<String> body) {
        // Generated convenience method for addLabelsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (attribute != null) {
            requestOptions.addQueryParam("attr:qualifiedName", attribute, false);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return addLabelsByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Add given labels to a given entity identified by its type and unique
     * attributes.
     * 
     * If labels is null/empty, no labels will be added.
     * 
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * 
     * @param typeName The name of the type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addLabelsByUniqueAttribute(String typeName) {
        // Generated convenience method for addLabelsByUniqueAttributeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addLabelsByUniqueAttributeWithResponse(typeName, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Move existing entities to the target collection.
     * 
     * @param collectionId The collection where entities will be moved to.
     * @param moveEntitiesOptions MoveEntitiesOptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the mutation response result of entity on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntityMutationResult> moveEntitiesToCollection(String collectionId,
        MoveEntitiesOptions moveEntitiesOptions) {
        // Generated convenience method for moveEntitiesToCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return moveEntitiesToCollectionWithResponse(collectionId, BinaryData.fromObject(moveEntitiesOptions),
            requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(EntityMutationResult.class));
    }

    @Generated
    private static final TypeReference<List<String>> TYPE_REFERENCE_LIST_STRING = new TypeReference<List<String>>() {
    };
}
