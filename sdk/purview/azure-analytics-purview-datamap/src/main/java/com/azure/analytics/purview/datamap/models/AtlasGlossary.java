// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The glossary object.
 */
@Fluent
public final class AtlasGlossary implements JsonSerializable<AtlasGlossary> {
    /*
     * The GUID of the object.
     */
    @Generated
    private String guid;

    /*
     * An array of classifications.
     */
    @Generated
    private List<AtlasClassification> classifications;

    /*
     * The long version description.
     */
    @Generated
    private String longDescription;

    /*
     * The name of the glossary object.
     */
    @Generated
    private String name;

    /*
     * The qualified name of the glossary object.
     */
    @Generated
    private String qualifiedName;

    /*
     * The short version of description.
     */
    @Generated
    private String shortDescription;

    /*
     * ETag for concurrency control.
     */
    @Generated
    private String lastModifiedTS;

    /*
     * The created time of the record.
     */
    @Generated
    private Long createTime;

    /*
     * The user who created the record.
     */
    @Generated
    private String createdBy;

    /*
     * The update time of the record.
     */
    @Generated
    private Long updateTime;

    /*
     * The user who updated the record.
     */
    @Generated
    private String updatedBy;

    /*
     * An array of categories.
     */
    @Generated
    private List<AtlasRelatedCategoryHeader> categories;

    /*
     * The language of the glossary.
     */
    @Generated
    private String language;

    /*
     * An array of related term headers.
     */
    @Generated
    private List<AtlasRelatedTermHeader> terms;

    /*
     * The usage of the glossary.
     */
    @Generated
    private String usage;

    /**
     * Creates an instance of AtlasGlossary class.
     */
    @Generated
    public AtlasGlossary() {
    }

    /**
     * Get the guid property: The GUID of the object.
     * 
     * @return the guid value.
     */
    @Generated
    public String getGuid() {
        return this.guid;
    }

    /**
     * Set the guid property: The GUID of the object.
     * 
     * @param guid the guid value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setGuid(String guid) {
        this.guid = guid;
        return this;
    }

    /**
     * Get the classifications property: An array of classifications.
     * 
     * @return the classifications value.
     */
    @Generated
    public List<AtlasClassification> getClassifications() {
        return this.classifications;
    }

    /**
     * Set the classifications property: An array of classifications.
     * 
     * @param classifications the classifications value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setClassifications(List<AtlasClassification> classifications) {
        this.classifications = classifications;
        return this;
    }

    /**
     * Get the longDescription property: The long version description.
     * 
     * @return the longDescription value.
     */
    @Generated
    public String getLongDescription() {
        return this.longDescription;
    }

    /**
     * Set the longDescription property: The long version description.
     * 
     * @param longDescription the longDescription value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setLongDescription(String longDescription) {
        this.longDescription = longDescription;
        return this;
    }

    /**
     * Get the name property: The name of the glossary object.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the glossary object.
     * 
     * @param name the name value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the qualifiedName property: The qualified name of the glossary object.
     * 
     * @return the qualifiedName value.
     */
    @Generated
    public String getQualifiedName() {
        return this.qualifiedName;
    }

    /**
     * Set the qualifiedName property: The qualified name of the glossary object.
     * 
     * @param qualifiedName the qualifiedName value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setQualifiedName(String qualifiedName) {
        this.qualifiedName = qualifiedName;
        return this;
    }

    /**
     * Get the shortDescription property: The short version of description.
     * 
     * @return the shortDescription value.
     */
    @Generated
    public String getShortDescription() {
        return this.shortDescription;
    }

    /**
     * Set the shortDescription property: The short version of description.
     * 
     * @param shortDescription the shortDescription value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }

    /**
     * Get the lastModifiedTS property: ETag for concurrency control.
     * 
     * @return the lastModifiedTS value.
     */
    @Generated
    public String getLastModifiedTS() {
        return this.lastModifiedTS;
    }

    /**
     * Set the lastModifiedTS property: ETag for concurrency control.
     * 
     * @param lastModifiedTS the lastModifiedTS value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setLastModifiedTS(String lastModifiedTS) {
        this.lastModifiedTS = lastModifiedTS;
        return this;
    }

    /**
     * Get the createTime property: The created time of the record.
     * 
     * @return the createTime value.
     */
    @Generated
    public Long getCreateTime() {
        return this.createTime;
    }

    /**
     * Set the createTime property: The created time of the record.
     * 
     * @param createTime the createTime value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setCreateTime(Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get the createdBy property: The user who created the record.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: The user who created the record.
     * 
     * @param createdBy the createdBy value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the updateTime property: The update time of the record.
     * 
     * @return the updateTime value.
     */
    @Generated
    public Long getUpdateTime() {
        return this.updateTime;
    }

    /**
     * Set the updateTime property: The update time of the record.
     * 
     * @param updateTime the updateTime value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get the updatedBy property: The user who updated the record.
     * 
     * @return the updatedBy value.
     */
    @Generated
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Set the updatedBy property: The user who updated the record.
     * 
     * @param updatedBy the updatedBy value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Get the categories property: An array of categories.
     * 
     * @return the categories value.
     */
    @Generated
    public List<AtlasRelatedCategoryHeader> getCategories() {
        return this.categories;
    }

    /**
     * Set the categories property: An array of categories.
     * 
     * @param categories the categories value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setCategories(List<AtlasRelatedCategoryHeader> categories) {
        this.categories = categories;
        return this;
    }

    /**
     * Get the language property: The language of the glossary.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: The language of the glossary.
     * 
     * @param language the language value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the terms property: An array of related term headers.
     * 
     * @return the terms value.
     */
    @Generated
    public List<AtlasRelatedTermHeader> getTerms() {
        return this.terms;
    }

    /**
     * Set the terms property: An array of related term headers.
     * 
     * @param terms the terms value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setTerms(List<AtlasRelatedTermHeader> terms) {
        this.terms = terms;
        return this;
    }

    /**
     * Get the usage property: The usage of the glossary.
     * 
     * @return the usage value.
     */
    @Generated
    public String getUsage() {
        return this.usage;
    }

    /**
     * Set the usage property: The usage of the glossary.
     * 
     * @param usage the usage value to set.
     * @return the AtlasGlossary object itself.
     */
    @Generated
    public AtlasGlossary setUsage(String usage) {
        this.usage = usage;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("guid", this.guid);
        jsonWriter.writeArrayField("classifications", this.classifications,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("longDescription", this.longDescription);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("qualifiedName", this.qualifiedName);
        jsonWriter.writeStringField("shortDescription", this.shortDescription);
        jsonWriter.writeStringField("lastModifiedTS", this.lastModifiedTS);
        jsonWriter.writeNumberField("createTime", this.createTime);
        jsonWriter.writeStringField("createdBy", this.createdBy);
        jsonWriter.writeNumberField("updateTime", this.updateTime);
        jsonWriter.writeStringField("updatedBy", this.updatedBy);
        jsonWriter.writeArrayField("categories", this.categories, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("language", this.language);
        jsonWriter.writeArrayField("terms", this.terms, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasGlossary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasGlossary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasGlossary.
     */
    @Generated
    public static AtlasGlossary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasGlossary deserializedAtlasGlossary = new AtlasGlossary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("guid".equals(fieldName)) {
                    deserializedAtlasGlossary.guid = reader.getString();
                } else if ("classifications".equals(fieldName)) {
                    List<AtlasClassification> classifications
                        = reader.readArray(reader1 -> AtlasClassification.fromJson(reader1));
                    deserializedAtlasGlossary.classifications = classifications;
                } else if ("longDescription".equals(fieldName)) {
                    deserializedAtlasGlossary.longDescription = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAtlasGlossary.name = reader.getString();
                } else if ("qualifiedName".equals(fieldName)) {
                    deserializedAtlasGlossary.qualifiedName = reader.getString();
                } else if ("shortDescription".equals(fieldName)) {
                    deserializedAtlasGlossary.shortDescription = reader.getString();
                } else if ("lastModifiedTS".equals(fieldName)) {
                    deserializedAtlasGlossary.lastModifiedTS = reader.getString();
                } else if ("createTime".equals(fieldName)) {
                    deserializedAtlasGlossary.createTime = reader.getNullable(JsonReader::getLong);
                } else if ("createdBy".equals(fieldName)) {
                    deserializedAtlasGlossary.createdBy = reader.getString();
                } else if ("updateTime".equals(fieldName)) {
                    deserializedAtlasGlossary.updateTime = reader.getNullable(JsonReader::getLong);
                } else if ("updatedBy".equals(fieldName)) {
                    deserializedAtlasGlossary.updatedBy = reader.getString();
                } else if ("categories".equals(fieldName)) {
                    List<AtlasRelatedCategoryHeader> categories
                        = reader.readArray(reader1 -> AtlasRelatedCategoryHeader.fromJson(reader1));
                    deserializedAtlasGlossary.categories = categories;
                } else if ("language".equals(fieldName)) {
                    deserializedAtlasGlossary.language = reader.getString();
                } else if ("terms".equals(fieldName)) {
                    List<AtlasRelatedTermHeader> terms
                        = reader.readArray(reader1 -> AtlasRelatedTermHeader.fromJson(reader1));
                    deserializedAtlasGlossary.terms = terms;
                } else if ("usage".equals(fieldName)) {
                    deserializedAtlasGlossary.usage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasGlossary;
        });
    }
}
