// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The payload of autocomplete request.
 */
@Fluent
public final class AutoCompleteOptions implements JsonSerializable<AutoCompleteOptions> {
    /*
     * The keywords applied to all fields that support autocomplete operation. It must
     * be at least 1 character, and no more than 100 characters.
     */
    @Generated
    private String keywords;

    /*
     * The number of autocomplete results we hope to return. The default value is 50.
     * The value must be a number between 1 and 100.
     */
    @Generated
    private Integer limit;

    /*
     * The filter for the autocomplete request.
     */
    @Generated
    private Object filter;

    /**
     * Creates an instance of AutoCompleteOptions class.
     */
    @Generated
    public AutoCompleteOptions() {
    }

    /**
     * Get the keywords property: The keywords applied to all fields that support autocomplete operation. It must
     * be at least 1 character, and no more than 100 characters.
     * 
     * @return the keywords value.
     */
    @Generated
    public String getKeywords() {
        return this.keywords;
    }

    /**
     * Set the keywords property: The keywords applied to all fields that support autocomplete operation. It must
     * be at least 1 character, and no more than 100 characters.
     * 
     * @param keywords the keywords value to set.
     * @return the AutoCompleteOptions object itself.
     */
    @Generated
    public AutoCompleteOptions setKeywords(String keywords) {
        this.keywords = keywords;
        return this;
    }

    /**
     * Get the limit property: The number of autocomplete results we hope to return. The default value is 50.
     * The value must be a number between 1 and 100.
     * 
     * @return the limit value.
     */
    @Generated
    public Integer getLimit() {
        return this.limit;
    }

    /**
     * Set the limit property: The number of autocomplete results we hope to return. The default value is 50.
     * The value must be a number between 1 and 100.
     * 
     * @param limit the limit value to set.
     * @return the AutoCompleteOptions object itself.
     */
    @Generated
    public AutoCompleteOptions setLimit(Integer limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the filter property: The filter for the autocomplete request.
     * 
     * @return the filter value.
     */
    @Generated
    public Object getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: The filter for the autocomplete request.
     * 
     * @param filter the filter value to set.
     * @return the AutoCompleteOptions object itself.
     */
    @Generated
    public AutoCompleteOptions setFilter(Object filter) {
        this.filter = filter;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keywords", this.keywords);
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeUntypedField("filter", this.filter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoCompleteOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoCompleteOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoCompleteOptions.
     */
    @Generated
    public static AutoCompleteOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoCompleteOptions deserializedAutoCompleteOptions = new AutoCompleteOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keywords".equals(fieldName)) {
                    deserializedAutoCompleteOptions.keywords = reader.getString();
                } else if ("limit".equals(fieldName)) {
                    deserializedAutoCompleteOptions.limit = reader.getNullable(JsonReader::getInt);
                } else if ("filter".equals(fieldName)) {
                    deserializedAutoCompleteOptions.filter = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoCompleteOptions;
        });
    }
}
