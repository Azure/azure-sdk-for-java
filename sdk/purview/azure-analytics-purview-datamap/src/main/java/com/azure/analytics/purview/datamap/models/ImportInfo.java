// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ImportInfo.
 */
@Immutable
public final class ImportInfo implements JsonSerializable<ImportInfo> {
    /*
     * childObjectName
     */
    @Generated
    private String childObjectName;

    /*
     * importStatus
     */
    @Generated
    private ImportStatus importStatus;

    /*
     * parentObjectName
     */
    @Generated
    private String parentObjectName;

    /*
     * remarks
     */
    @Generated
    private String remarks;

    /**
     * Creates an instance of ImportInfo class.
     */
    @Generated
    private ImportInfo() {
    }

    /**
     * Get the childObjectName property: childObjectName.
     * 
     * @return the childObjectName value.
     */
    @Generated
    public String getChildObjectName() {
        return this.childObjectName;
    }

    /**
     * Get the importStatus property: importStatus.
     * 
     * @return the importStatus value.
     */
    @Generated
    public ImportStatus getImportStatus() {
        return this.importStatus;
    }

    /**
     * Get the parentObjectName property: parentObjectName.
     * 
     * @return the parentObjectName value.
     */
    @Generated
    public String getParentObjectName() {
        return this.parentObjectName;
    }

    /**
     * Get the remarks property: remarks.
     * 
     * @return the remarks value.
     */
    @Generated
    public String getRemarks() {
        return this.remarks;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("childObjectName", this.childObjectName);
        jsonWriter.writeStringField("importStatus", this.importStatus == null ? null : this.importStatus.toString());
        jsonWriter.writeStringField("parentObjectName", this.parentObjectName);
        jsonWriter.writeStringField("remarks", this.remarks);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the ImportInfo.
     */
    @Generated
    public static ImportInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImportInfo deserializedImportInfo = new ImportInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("childObjectName".equals(fieldName)) {
                    deserializedImportInfo.childObjectName = reader.getString();
                } else if ("importStatus".equals(fieldName)) {
                    deserializedImportInfo.importStatus = ImportStatus.fromString(reader.getString());
                } else if ("parentObjectName".equals(fieldName)) {
                    deserializedImportInfo.parentObjectName = reader.getString();
                } else if ("remarks".equals(fieldName)) {
                    deserializedImportInfo.remarks = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImportInfo;
        });
    }
}
