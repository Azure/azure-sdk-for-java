// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The relationship with extended information.
 */
@Immutable
public final class AtlasRelationshipWithExtInfo implements JsonSerializable<AtlasRelationshipWithExtInfo> {
    /*
     * The referred entity header.
     */
    @Generated
    private Map<String, AtlasEntityHeader> referredEntities;

    /*
     * Atlas relationship instance.
     */
    @Generated
    private AtlasRelationship relationship;

    /**
     * Creates an instance of AtlasRelationshipWithExtInfo class.
     */
    @Generated
    private AtlasRelationshipWithExtInfo() {
    }

    /**
     * Get the referredEntities property: The referred entity header.
     * 
     * @return the referredEntities value.
     */
    @Generated
    public Map<String, AtlasEntityHeader> getReferredEntities() {
        return this.referredEntities;
    }

    /**
     * Get the relationship property: Atlas relationship instance.
     * 
     * @return the relationship value.
     */
    @Generated
    public AtlasRelationship getRelationship() {
        return this.relationship;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("referredEntities", this.referredEntities,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("relationship", this.relationship);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasRelationshipWithExtInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasRelationshipWithExtInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasRelationshipWithExtInfo.
     */
    @Generated
    public static AtlasRelationshipWithExtInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasRelationshipWithExtInfo deserializedAtlasRelationshipWithExtInfo = new AtlasRelationshipWithExtInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referredEntities".equals(fieldName)) {
                    Map<String, AtlasEntityHeader> referredEntities
                        = reader.readMap(reader1 -> AtlasEntityHeader.fromJson(reader1));
                    deserializedAtlasRelationshipWithExtInfo.referredEntities = referredEntities;
                } else if ("relationship".equals(fieldName)) {
                    deserializedAtlasRelationshipWithExtInfo.relationship = AtlasRelationship.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasRelationshipWithExtInfo;
        });
    }
}
