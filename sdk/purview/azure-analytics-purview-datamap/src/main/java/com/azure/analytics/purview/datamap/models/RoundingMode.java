// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Rounding Mode.
 */
public final class RoundingMode extends ExpandableStringEnum<RoundingMode> {
    /**
     * up.
     */
    @Generated
    public static final RoundingMode UP = fromString("UP");

    /**
     * down.
     */
    @Generated
    public static final RoundingMode DOWN = fromString("DOWN");

    /**
     * ceiling.
     */
    @Generated
    public static final RoundingMode CEILING = fromString("CEILING");

    /**
     * floor.
     */
    @Generated
    public static final RoundingMode FLOOR = fromString("FLOOR");

    /**
     * half up.
     */
    @Generated
    public static final RoundingMode HALF_UP = fromString("HALF_UP");

    /**
     * half down.
     */
    @Generated
    public static final RoundingMode HALF_DOWN = fromString("HALF_DOWN");

    /**
     * half even.
     */
    @Generated
    public static final RoundingMode HALF_EVEN = fromString("HALF_EVEN");

    /**
     * unnecessary.
     */
    @Generated
    public static final RoundingMode UNNECESSARY = fromString("UNNECESSARY");

    /**
     * Creates a new instance of RoundingMode value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public RoundingMode() {
    }

    /**
     * Creates or finds a RoundingMode from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding RoundingMode.
     */
    @Generated
    public static RoundingMode fromString(String name) {
        return fromString(name, RoundingMode.class);
    }

    /**
     * Gets known RoundingMode values.
     * 
     * @return known RoundingMode values.
     */
    @Generated
    public static Collection<RoundingMode> values() {
        return values(RoundingMode.class);
    }
}
