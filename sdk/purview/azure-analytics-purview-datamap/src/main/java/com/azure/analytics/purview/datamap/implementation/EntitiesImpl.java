// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.implementation;

import com.azure.analytics.purview.datamap.PurviewDataMapServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Entities.
 */
public final class EntitiesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EntitiesService service;

    /**
     * The service client containing this operation class.
     */
    private final DataMapClientImpl client;

    /**
     * Initializes an instance of EntitiesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EntitiesImpl(DataMapClientImpl client) {
        this.service = RestProxy.create(EntitiesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public PurviewDataMapServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for DataMapClientEntities to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}/datamap/api")
    @ServiceInterface(name = "DataMapClientEntitie")
    public interface EntitiesService {
        @Post("/atlas/v2/entity")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/bulk")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getByIds(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @QueryParam(value = "guid", multipleQueryParams = true) List<String> guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/bulk")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getByIdsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @QueryParam(value = "guid", multipleQueryParams = true) List<String> guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/bulk")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> batchCreateOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/bulk")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> batchCreateOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/bulk")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> batchDelete(@HostParam("endpoint") String endpoint,
            @QueryParam(value = "guid", multipleQueryParams = true) List<String> guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/bulk")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> batchDeleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam(value = "guid", multipleQueryParams = true) List<String> guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/bulk/classification")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addClassification(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/bulk/classification")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addClassificationSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateAttributeById(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @QueryParam("name") String name, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateAttributeByIdSync(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @QueryParam("name") String name, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> delete(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClassification(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @PathParam("classificationName") String classificationName,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getClassificationSync(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @PathParam("classificationName") String classificationName,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeClassification(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @PathParam("classificationName") String classificationName,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> removeClassificationSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @PathParam("classificationName") String classificationName, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClassifications(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getClassificationsSync(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addClassifications(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addClassificationsSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateClassifications(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updateClassificationsSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> updateByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeClassificationByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @PathParam("classificationName") String classificationName,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> removeClassificationByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @PathParam("classificationName") String classificationName,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addClassificationsByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addClassificationsByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateClassificationsUniqueByAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updateClassificationsUniqueByAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/bulk/setClassifications")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> batchSetClassifications(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/bulk/setClassifications")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> batchSetClassificationsSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> batchGetByUniqueAttributes(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> batchGetByUniqueAttributesSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/atlas/v2/entity/guid/{guid}/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getHeader(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/guid/{guid}/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getHeaderSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeBusinessMetadata(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> removeBusinessMetadataSync(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addOrUpdateBusinessMetadata(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addOrUpdateBusinessMetadataSync(@HostParam("endpoint") String endpoint,
            @PathParam("guid") String guid, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata/{businessMetadataName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeBusinessMetadataAttributes(@HostParam("endpoint") String endpoint,
            @PathParam("businessMetadataName") String businessMetadataName, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata/{businessMetadataName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> removeBusinessMetadataAttributesSync(@HostParam("endpoint") String endpoint,
            @PathParam("businessMetadataName") String businessMetadataName, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata/{businessMetadataName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addOrUpdateBusinessMetadataAttributes(@HostParam("endpoint") String endpoint,
            @PathParam("businessMetadataName") String businessMetadataName, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata/{businessMetadataName}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addOrUpdateBusinessMetadataAttributesSync(@HostParam("endpoint") String endpoint,
            @PathParam("businessMetadataName") String businessMetadataName, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/businessmetadata/import/template")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getBusinessMetadataTemplate(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/entity/businessmetadata/import/template")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getBusinessMetadataTemplateSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/atlas/v2/entity/businessmetadata/import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> importBusinessMetadata(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("multipart/form-data") BinaryData body, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/atlas/v2/entity/businessmetadata/import")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> importBusinessMetadataSync(@HostParam("endpoint") String endpoint,
            @HeaderParam("content-type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("multipart/form-data") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeLabels(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> removeLabelsSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setLabels(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setLabelsSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addLabel(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addLabelSync(@HostParam("endpoint") String endpoint, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeLabelsByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> removeLabelsByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setLabelsByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setLabelsByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addLabelsByUniqueAttribute(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addLabelsByUniqueAttributeSync(@HostParam("endpoint") String endpoint,
            @PathParam("typeName") String typeName, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/entity/moveTo")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> moveEntitiesToCollection(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("collectionId") String collectionId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/entity/moveTo")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> moveEntitiesToCollectionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("collectionId") String collectionId,
            @HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Create or update an entity.
     * Existing entity is matched using its unique guid if
     * supplied or by its unique attributes eg: qualifiedName.
     * Map and array of
     * collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string,
     * int&gt;&gt;.
     * For each contact type, the maximum number of contacts is 20.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>businessAttributeUpdateBehavior</td><td>String</td><td>No</td><td>Used to define the update behavior for
     * business attributes when updating
     * entities. Allowed values: "ignore", "replace", "merge".</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>The collection where entities will be moved to. Only
     * specify a value if you
     * need to move an entity to another collection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createOrUpdate(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, body, requestOptions, context));
    }

    /**
     * Create or update an entity.
     * Existing entity is matched using its unique guid if
     * supplied or by its unique attributes eg: qualifiedName.
     * Map and array of
     * collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string,
     * int&gt;&gt;.
     * For each contact type, the maximum number of contacts is 20.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>businessAttributeUpdateBehavior</td><td>String</td><td>No</td><td>Used to define the update behavior for
     * business attributes when updating
     * entities. Allowed values: "ignore", "replace", "merge".</td></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>The collection where entities will be moved to. Only
     * specify a value if you
     * need to move an entity to another collection.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accept, body, requestOptions, Context.NONE);
    }

    /**
     * List entities in bulk identified by its GUIDs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid An array of GUIDs of entities to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByIdsWithResponseAsync(List<String> guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidConverted = guid.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil.withContext(context -> service.getByIds(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guidConverted, accept, requestOptions, context));
    }

    /**
     * List entities in bulk identified by its GUIDs.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid An array of GUIDs of entities to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByIdsWithResponse(List<String> guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidConverted = guid.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.getByIdsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            guidConverted, accept, requestOptions, Context.NONE);
    }

    /**
     * Create or update entities in bulk.
     * Existing entity is matched using its unique
     * guid if supplied or by its unique attributes eg: qualifiedName.
     * Map and array
     * of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;,
     * array&lt;map&lt;string, int&gt;&gt;.
     * For each contact type, the maximum number of contacts
     * is 20.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>The collection where entities will be moved to. Only
     * specify a value if you
     * need to move an entity to another collection.</td></tr>
     * <tr><td>businessAttributeUpdateBehavior</td><td>String</td><td>No</td><td>Used to define the update behavior for
     * business attributes when updating
     * entities. Allowed values: "ignore", "replace", "merge".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchCreateOrUpdateWithResponseAsync(BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.batchCreateOrUpdate(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, body, requestOptions, context));
    }

    /**
     * Create or update entities in bulk.
     * Existing entity is matched using its unique
     * guid if supplied or by its unique attributes eg: qualifiedName.
     * Map and array
     * of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;,
     * array&lt;map&lt;string, int&gt;&gt;.
     * For each contact type, the maximum number of contacts
     * is 20.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>collectionId</td><td>String</td><td>No</td><td>The collection where entities will be moved to. Only
     * specify a value if you
     * need to move an entity to another collection.</td></tr>
     * <tr><td>businessAttributeUpdateBehavior</td><td>String</td><td>No</td><td>Used to define the update behavior for
     * business attributes when updating
     * entities. Allowed values: "ignore", "replace", "merge".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> batchCreateOrUpdateWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.batchCreateOrUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete a list of entities in bulk identified by their GUIDs or unique
     * attributes.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid An array of GUIDs of entities to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchDeleteWithResponseAsync(List<String> guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidConverted = guid.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil.withContext(
            context -> service.batchDelete(this.client.getEndpoint(), guidConverted, accept, requestOptions, context));
    }

    /**
     * Delete a list of entities in bulk identified by their GUIDs or unique
     * attributes.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid An array of GUIDs of entities to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> batchDeleteWithResponse(List<String> guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidConverted = guid.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.batchDeleteSync(this.client.getEndpoint(), guidConverted, accept, requestOptions, Context.NONE);
    }

    /**
     * Associate a classification to multiple entities in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     classification (Optional): {
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.addClassification(this.client.getEndpoint(), accept, body, requestOptions, context));
    }

    /**
     * Associate a classification to multiple entities in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     classification (Optional): {
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addClassificationWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addClassificationSync(this.client.getEndpoint(), accept, body, requestOptions, Context.NONE);
    }

    /**
     * Get complete definition of an entity given its GUID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * Get complete definition of an entity given its GUID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Update entity partially - create or update entity attribute identified by its
     * GUID.
     * Supports only primitive attribute type and entity references.
     * It does not support updating complex types like arrays, and maps.
     * Null updates are not possible.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * Object
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param name The name of the attribute.
     * @param body The value of the attribute.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateAttributeByIdWithResponseAsync(String guid, String name, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateAttributeById(this.client.getEndpoint(), guid, name,
            accept, body, requestOptions, context));
    }

    /**
     * Update entity partially - create or update entity attribute identified by its
     * GUID.
     * Supports only primitive attribute type and entity references.
     * It does not support updating complex types like arrays, and maps.
     * Null updates are not possible.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * Object
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param name The name of the attribute.
     * @param body The value of the attribute.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateAttributeByIdWithResponse(String guid, String name, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateAttributeByIdSync(this.client.getEndpoint(), guid, name, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Delete an entity identified by its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * Delete an entity identified by its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get classification for a given entity represented by a GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Required)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityGuid: String (Optional)
     *     entityStatus: String(ACTIVE/DELETED) (Optional)
     *     removePropagationsOnEntityDelete: Boolean (Optional)
     *     validityPeriods (Optional): [
     *          (Optional){
     *             endTime: String (Optional)
     *             startTime: String (Optional)
     *             timeZone: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classification for a given entity represented by a GUID along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationWithResponseAsync(String guid, String classificationName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getClassification(this.client.getEndpoint(), guid,
            classificationName, accept, requestOptions, context));
    }

    /**
     * Get classification for a given entity represented by a GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Required)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityGuid: String (Optional)
     *     entityStatus: String(ACTIVE/DELETED) (Optional)
     *     removePropagationsOnEntityDelete: Boolean (Optional)
     *     validityPeriods (Optional): [
     *          (Optional){
     *             endTime: String (Optional)
     *             startTime: String (Optional)
     *             timeZone: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classification for a given entity represented by a GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationWithResponse(String guid, String classificationName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getClassificationSync(this.client.getEndpoint(), guid, classificationName, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Delete a given classification from an existing entity represented by a GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeClassificationWithResponseAsync(String guid, String classificationName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.removeClassification(this.client.getEndpoint(), guid,
            classificationName, accept, requestOptions, context));
    }

    /**
     * Delete a given classification from an existing entity represented by a GUID.
     * 
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeClassificationWithResponse(String guid, String classificationName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.removeClassificationSync(this.client.getEndpoint(), guid, classificationName, accept,
            requestOptions, Context.NONE);
    }

    /**
     * List classifications for a given entity represented by a GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     list (Optional): [
     *         Object (Optional)
     *     ]
     *     pageSize: Integer (Optional)
     *     sortBy: String (Optional)
     *     sortType: String(NONE/ASC/DESC) (Optional)
     *     startIndex: Integer (Optional)
     *     totalCount: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rEST serialization friendly list along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationsWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getClassifications(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * List classifications for a given entity represented by a GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     list (Optional): [
     *         Object (Optional)
     *     ]
     *     pageSize: Integer (Optional)
     *     sortBy: String (Optional)
     *     sortType: String(NONE/ASC/DESC) (Optional)
     *     startIndex: Integer (Optional)
     *     totalCount: Integer (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return rEST serialization friendly list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationsWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getClassificationsSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Add classifications to an existing entity represented by a GUID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationsWithResponseAsync(String guid, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.addClassifications(this.client.getEndpoint(), guid, accept, body,
            requestOptions, context));
    }

    /**
     * Add classifications to an existing entity represented by a GUID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addClassificationsWithResponse(String guid, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addClassificationsSync(this.client.getEndpoint(), guid, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Update classifications to an existing entity represented by a guid.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClassificationsWithResponseAsync(String guid, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateClassifications(this.client.getEndpoint(), guid, accept,
            body, requestOptions, context));
    }

    /**
     * Update classifications to an existing entity represented by a guid.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body An array of classifications to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateClassificationsWithResponse(String guid, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateClassificationsSync(this.client.getEndpoint(), guid, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Get complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByUniqueAttributeWithResponseAsync(String typeName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getByUniqueAttribute(this.client.getEndpoint(), typeName, accept,
            requestOptions, context));
    }

    /**
     * Get complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its type and unique attribute.
     * 
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The
     * attrName and attrValue should be unique across entities, eg.
     * qualifiedName.
     * 
     * The REST request would look something like this:
     * GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getByUniqueAttributeSync(this.client.getEndpoint(), typeName, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Update entity partially - Allow a subset of attributes to be updated on an
     * entity which is identified by its type and unique attribute eg:
     * Referenceable.qualifiedName. Null updates are not possible.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * 
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateByUniqueAttributeWithResponseAsync(String typeName, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateByUniqueAttribute(this.client.getEndpoint(), typeName,
            accept, body, requestOptions, context));
    }

    /**
     * Update entity partially - Allow a subset of attributes to be updated on an
     * entity which is identified by its type and unique attribute eg:
     * Referenceable.qualifiedName. Null updates are not possible.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * 
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateByUniqueAttributeWithResponse(String typeName, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateByUniqueAttributeSync(this.client.getEndpoint(), typeName, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Delete an entity identified by its type and unique attributes.
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteByUniqueAttributeWithResponseAsync(String typeName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteByUniqueAttribute(this.client.getEndpoint(), typeName,
            accept, requestOptions, context));
    }

    /**
     * Delete an entity identified by its type and unique attributes.
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format:
     * attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this:
     * DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteByUniqueAttributeSync(this.client.getEndpoint(), typeName, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Delete a given classification from an entity identified by its type and unique
     * attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param typeName The name of the type.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeClassificationByUniqueAttributeWithResponseAsync(String typeName,
        String classificationName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.removeClassificationByUniqueAttribute(this.client.getEndpoint(),
            typeName, classificationName, accept, requestOptions, context));
    }

    /**
     * Delete a given classification from an entity identified by its type and unique
     * attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param typeName The name of the type.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeClassificationByUniqueAttributeWithResponse(String typeName, String classificationName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.removeClassificationByUniqueAttributeSync(this.client.getEndpoint(), typeName,
            classificationName, accept, requestOptions, Context.NONE);
    }

    /**
     * Add classification to the entity identified by its type and unique attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationsByUniqueAttributeWithResponseAsync(String typeName, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.addClassificationsByUniqueAttribute(this.client.getEndpoint(),
            typeName, accept, body, requestOptions, context));
    }

    /**
     * Add classification to the entity identified by its type and unique attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addClassificationsByUniqueAttributeWithResponse(String typeName, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addClassificationsByUniqueAttributeSync(this.client.getEndpoint(), typeName, accept, body,
            requestOptions, Context.NONE);
    }

    /**
     * Update classification on an entity identified by its type and unique attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClassificationsUniqueByAttributeWithResponseAsync(String typeName,
        BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.updateClassificationsUniqueByAttribute(this.client.getEndpoint(),
            typeName, accept, body, requestOptions, context));
    }

    /**
     * Update classification on an entity identified by its type and unique attributes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Required)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param body An array of classification to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateClassificationsUniqueByAttributeWithResponse(String typeName, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateClassificationsUniqueByAttributeSync(this.client.getEndpoint(), typeName, accept, body,
            requestOptions, Context.NONE);
    }

    /**
     * Set classifications on entities in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidHeaderMap (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Required)
     * ]
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchSetClassificationsWithResponseAsync(BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.batchSetClassifications(this.client.getEndpoint(), accept, body,
            requestOptions, context));
    }

    /**
     * Set classifications on entities in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidHeaderMap (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Required)
     * ]
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> batchSetClassificationsWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.batchSetClassificationsSync(this.client.getEndpoint(), accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Bulk API to retrieve list of entities identified by its unique attributes.
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following
     * format
     * 
     * typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
     * 
     * NOTE:
     * The attrName should be an unique attribute for the given entity-type.
     * The REST
     * request would look something like this
     * 
     * GET
     * /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_1:qualifiedName=db1&#064;cl1&amp;attr_2:qualifiedName=db2&#064;cl1
     * 
     * Note:
     * at least one unique attribute must be provided.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * <tr><td>attr_N:qualifiedName</td><td>String</td><td>No</td><td>Qualified name of an entity. E.g. to find 2
     * entities you can set
     * attrs_1:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. (This is only an
     * example. qualifiedName can be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> batchGetByUniqueAttributesWithResponseAsync(String typeName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.batchGetByUniqueAttributes(this.client.getEndpoint(), typeName,
            accept, requestOptions, context));
    }

    /**
     * Bulk API to retrieve list of entities identified by its unique attributes.
     * In
     * addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following
     * format
     * 
     * typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
     * 
     * NOTE:
     * The attrName should be an unique attribute for the given entity-type.
     * The REST
     * request would look something like this
     * 
     * GET
     * /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_1:qualifiedName=db1&#064;cl1&amp;attr_2:qualifiedName=db2&#064;cl1
     * 
     * Note:
     * at least one unique attribute must be provided.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred
     * entities.</td></tr>
     * <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship
     * attributes.</td></tr>
     * <tr><td>attr_N:qualifiedName</td><td>String</td><td>No</td><td>Qualified name of an entity. E.g. to find 2
     * entities you can set
     * attrs_1:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. (This is only an
     * example. qualifiedName can be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Required): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Required)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             collectionId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Integer (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an instance of an entity along with extended info - like hive_table,
     * hive_database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> batchGetByUniqueAttributesWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.batchGetByUniqueAttributesSync(this.client.getEndpoint(), typeName, accept, requestOptions,
            Context.NONE);
    }

    /**
     * Get entity header given its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Required)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     classificationNames (Optional): [
     *         String (Optional)
     *     ]
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     displayText: String (Optional)
     *     guid: String (Optional)
     *     isIncomplete: Boolean (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     meaningNames (Optional): [
     *         String (Optional)
     *     ]
     *     meanings (Optional): [
     *          (Optional){
     *             confidence: Integer (Optional)
     *             createdBy: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(ACTIVE/DELETED) (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entity header given its GUID along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getHeaderWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getHeader(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * Get entity header given its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Required)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     classificationNames (Optional): [
     *         String (Optional)
     *     ]
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     displayText: String (Optional)
     *     guid: String (Optional)
     *     isIncomplete: Boolean (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     meaningNames (Optional): [
     *         String (Optional)
     *     ]
     *     meanings (Optional): [
     *          (Optional){
     *             confidence: Integer (Optional)
     *             createdBy: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(ACTIVE/DELETED) (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entity header given its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getHeaderWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getHeaderSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Remove business metadata from an entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String (Required): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeBusinessMetadataWithResponseAsync(String guid, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.removeBusinessMetadata(this.client.getEndpoint(), guid, accept,
            body, requestOptions, context));
    }

    /**
     * Remove business metadata from an entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String (Required): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeBusinessMetadataWithResponse(String guid, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.removeBusinessMetadataSync(this.client.getEndpoint(), guid, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Add business metadata to an entity.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>isOverwrite</td><td>Boolean</td><td>No</td><td>Whether to overwrite the existing business metadata on the
     * entity or not,
     * default is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String (Required): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body BusinessMetadata payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOrUpdateBusinessMetadataWithResponseAsync(String guid, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.addOrUpdateBusinessMetadata(this.client.getEndpoint(), guid,
            accept, body, requestOptions, context));
    }

    /**
     * Add business metadata to an entity.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>isOverwrite</td><td>Boolean</td><td>No</td><td>Whether to overwrite the existing business metadata on the
     * entity or not,
     * default is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String (Required): {
     *         String: Object (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param body BusinessMetadata payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addOrUpdateBusinessMetadataWithResponse(String guid, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addOrUpdateBusinessMetadataSync(this.client.getEndpoint(), guid, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Delete business metadata attributes from an entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeBusinessMetadataAttributesWithResponseAsync(String businessMetadataName,
        String guid, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.removeBusinessMetadataAttributes(this.client.getEndpoint(),
            businessMetadataName, guid, accept, body, requestOptions, context));
    }

    /**
     * Delete business metadata attributes from an entity.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeBusinessMetadataAttributesWithResponse(String businessMetadataName, String guid,
        BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.removeBusinessMetadataAttributesSync(this.client.getEndpoint(), businessMetadataName, guid,
            accept, body, requestOptions, Context.NONE);
    }

    /**
     * Add or update business metadata attributes.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOrUpdateBusinessMetadataAttributesWithResponseAsync(String businessMetadataName,
        String guid, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.addOrUpdateBusinessMetadataAttributes(this.client.getEndpoint(),
            businessMetadataName, guid, accept, body, requestOptions, context));
    }

    /**
     * Add or update business metadata attributes.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     String: Object (Required)
     * }
     * }</pre>
     * 
     * @param businessMetadataName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param body Business metadata attribute payload.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addOrUpdateBusinessMetadataAttributesWithResponse(String businessMetadataName, String guid,
        BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addOrUpdateBusinessMetadataAttributesSync(this.client.getEndpoint(), businessMetadataName, guid,
            accept, body, requestOptions, Context.NONE);
    }

    /**
     * Get the sample Template for uploading/creating bulk BusinessMetaData.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the sample Template for uploading/creating bulk BusinessMetaData along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBusinessMetadataTemplateWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/octet-stream, application/json";
        return FluxUtil.withContext(
            context -> service.getBusinessMetadataTemplate(this.client.getEndpoint(), accept, requestOptions, context));
    }

    /**
     * Get the sample Template for uploading/creating bulk BusinessMetaData.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the sample Template for uploading/creating bulk BusinessMetaData along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBusinessMetadataTemplateWithResponse(RequestOptions requestOptions) {
        final String accept = "application/octet-stream, application/json";
        return service.getBusinessMetadataTemplateSync(this.client.getEndpoint(), accept, requestOptions, Context.NONE);
    }

    /**
     * Upload the file for creating Business Metadata in BULK.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedImportInfoList (Optional): [
     *          (Optional){
     *             childObjectName: String (Optional)
     *             importStatus: String(SUCCESS/FAILED) (Optional)
     *             parentObjectName: String (Optional)
     *             remarks: String (Optional)
     *         }
     *     ]
     *     successImportInfoList (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return bulk import result along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> importBusinessMetadataWithResponseAsync(BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.importBusinessMetadata(this.client.getEndpoint(), contentType,
            accept, body, requestOptions, context));
    }

    /**
     * Upload the file for creating Business Metadata in BULK.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedImportInfoList (Optional): [
     *          (Optional){
     *             childObjectName: String (Optional)
     *             importStatus: String(SUCCESS/FAILED) (Optional)
     *             parentObjectName: String (Optional)
     *             remarks: String (Optional)
     *         }
     *     ]
     *     successImportInfoList (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return bulk import result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> importBusinessMetadataWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.importBusinessMetadataSync(this.client.getEndpoint(), contentType, accept, body, requestOptions,
            Context.NONE);
    }

    /**
     * Delete given labels to a given entity.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeLabelsWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(
            context -> service.removeLabels(this.client.getEndpoint(), guid, accept, requestOptionsLocal, context));
    }

    /**
     * Delete given labels to a given entity.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeLabelsWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.removeLabelsSync(this.client.getEndpoint(), guid, accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Set labels to a given entity.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLabelsWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(
            context -> service.setLabels(this.client.getEndpoint(), guid, accept, requestOptionsLocal, context));
    }

    /**
     * Set labels to a given entity.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setLabelsWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.setLabelsSync(this.client.getEndpoint(), guid, accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Add given labels to a given entity.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addLabelWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(
            context -> service.addLabel(this.client.getEndpoint(), guid, accept, requestOptionsLocal, context));
    }

    /**
     * Add given labels to a given entity.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addLabelWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.addLabelSync(this.client.getEndpoint(), guid, accept, requestOptionsLocal, Context.NONE);
    }

    /**
     * Delete given labels to a given entity identified by its type and unique
     * attribute.
     * 
     * If labels is null/empty, no labels will be removed.
     * 
     * If any labels
     * in labels set are non-existing labels, they will be ignored, only existing
     * labels will be removed. In addition to the typeName path parameter, attribute
     * key-value pair(s) can be provided in the following format:
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique
     * across entities, eg. qualifiedName. The REST request would look something like
     * this: DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeLabelsByUniqueAttributeWithResponseAsync(String typeName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.removeLabelsByUniqueAttribute(this.client.getEndpoint(),
            typeName, accept, requestOptionsLocal, context));
    }

    /**
     * Delete given labels to a given entity identified by its type and unique
     * attribute.
     * 
     * If labels is null/empty, no labels will be removed.
     * 
     * If any labels
     * in labels set are non-existing labels, they will be ignored, only existing
     * labels will be removed. In addition to the typeName path parameter, attribute
     * key-value pair(s) can be provided in the following format:
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique
     * across entities, eg. qualifiedName. The REST request would look something like
     * this: DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.removeLabelsByUniqueAttributeSync(this.client.getEndpoint(), typeName, accept,
            requestOptionsLocal, Context.NONE);
    }

    /**
     * Set labels to a given entity identified by its type and unique attributes.
     * 
     * If
     * labels is null/empty, existing labels will all be removed.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: POST
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLabelsByUniqueAttributeWithResponseAsync(String typeName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.setLabelsByUniqueAttribute(this.client.getEndpoint(), typeName,
            accept, requestOptionsLocal, context));
    }

    /**
     * Set labels to a given entity identified by its type and unique attributes.
     * 
     * If
     * labels is null/empty, existing labels will all be removed.
     * 
     * In addition to the
     * typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: POST
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.setLabelsByUniqueAttributeSync(this.client.getEndpoint(), typeName, accept, requestOptionsLocal,
            Context.NONE);
    }

    /**
     * Add given labels to a given entity identified by its type and unique
     * attributes.
     * 
     * If labels is null/empty, no labels will be added.
     * 
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addLabelsByUniqueAttributeWithResponseAsync(String typeName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.addLabelsByUniqueAttribute(this.client.getEndpoint(), typeName,
            accept, requestOptionsLocal, context));
    }

    /**
     * Add given labels to a given entity identified by its type and unique
     * attributes.
     * 
     * If labels is null/empty, no labels will be added.
     * 
     * In addition to
     * the typeName path parameter, attribute key-value pair(s) can be provided in the
     * following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;.
     * 
     * NOTE: The attrName and
     * attrValue should be unique across entities, eg. qualifiedName.
     * 
     * The REST
     * request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity. (This is only an
     * example. qualifiedName can
     * be changed to other unique attributes)</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     * 
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.addLabelsByUniqueAttributeSync(this.client.getEndpoint(), typeName, accept, requestOptionsLocal,
            Context.NONE);
    }

    /**
     * Move existing entities to the target collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param collectionId The collection where entities will be moved to.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> moveEntitiesToCollectionWithResponseAsync(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.moveEntitiesToCollection(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, body, requestOptions, context));
    }

    /**
     * Move existing entities to the target collection.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Required)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Required): [
     *              (Required){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     * 
     * @param collectionId The collection where entities will be moved to.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the mutation response result of entity along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> moveEntitiesToCollectionWithResponse(String collectionId, BinaryData body,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.moveEntitiesToCollectionSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), collectionId, accept, body, requestOptions, Context.NONE);
    }
}
