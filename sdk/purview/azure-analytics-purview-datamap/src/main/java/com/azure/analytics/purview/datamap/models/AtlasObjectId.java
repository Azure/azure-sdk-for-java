// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Reference to an object-instance of a type - like entity.
 */
@Fluent
public final class AtlasObjectId implements JsonSerializable<AtlasObjectId> {
    /*
     * The GUID of the object.
     */
    @Generated
    private String guid;

    /*
     * The name of the type.
     */
    @Generated
    private String typeName;

    /*
     * The unique attributes of the object.
     */
    @Generated
    private Map<String, Object> uniqueAttributes;

    /**
     * Creates an instance of AtlasObjectId class.
     */
    @Generated
    public AtlasObjectId() {
    }

    /**
     * Get the guid property: The GUID of the object.
     * 
     * @return the guid value.
     */
    @Generated
    public String getGuid() {
        return this.guid;
    }

    /**
     * Set the guid property: The GUID of the object.
     * 
     * @param guid the guid value to set.
     * @return the AtlasObjectId object itself.
     */
    @Generated
    public AtlasObjectId setGuid(String guid) {
        this.guid = guid;
        return this;
    }

    /**
     * Get the typeName property: The name of the type.
     * 
     * @return the typeName value.
     */
    @Generated
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: The name of the type.
     * 
     * @param typeName the typeName value to set.
     * @return the AtlasObjectId object itself.
     */
    @Generated
    public AtlasObjectId setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the uniqueAttributes property: The unique attributes of the object.
     * 
     * @return the uniqueAttributes value.
     */
    @Generated
    public Map<String, Object> getUniqueAttributes() {
        return this.uniqueAttributes;
    }

    /**
     * Set the uniqueAttributes property: The unique attributes of the object.
     * 
     * @param uniqueAttributes the uniqueAttributes value to set.
     * @return the AtlasObjectId object itself.
     */
    @Generated
    public AtlasObjectId setUniqueAttributes(Map<String, Object> uniqueAttributes) {
        this.uniqueAttributes = uniqueAttributes;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("guid", this.guid);
        jsonWriter.writeStringField("typeName", this.typeName);
        jsonWriter.writeMapField("uniqueAttributes", this.uniqueAttributes,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasObjectId from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasObjectId if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasObjectId.
     */
    @Generated
    public static AtlasObjectId fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasObjectId deserializedAtlasObjectId = new AtlasObjectId();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("guid".equals(fieldName)) {
                    deserializedAtlasObjectId.guid = reader.getString();
                } else if ("typeName".equals(fieldName)) {
                    deserializedAtlasObjectId.typeName = reader.getString();
                } else if ("uniqueAttributes".equals(fieldName)) {
                    Map<String, Object> uniqueAttributes = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAtlasObjectId.uniqueAttributes = uniqueAttributes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasObjectId;
        });
    }
}
