// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * An instance of a classification; it doesn't have an identity, this object
 * exists only when associated with an entity.
 */
@Fluent
public final class AtlasClassification implements JsonSerializable<AtlasClassification> {
    /*
     * The attributes of the struct.
     */
    @Generated
    private Map<String, Object> attributes;

    /*
     * The name of the type.
     */
    @Generated
    private String typeName;

    /*
     * ETag for concurrency control.
     */
    @Generated
    private String lastModifiedTS;

    /*
     * The GUID of the entity.
     */
    @Generated
    private String entityGuid;

    /*
     * Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     */
    @Generated
    private EntityStatus entityStatus;

    /*
     * Determines if propagations will be removed on entity deletion.
     */
    @Generated
    private Boolean removePropagationsOnEntityDelete;

    /*
     * An array of time boundaries indicating validity periods.
     */
    @Generated
    private List<TimeBoundary> validityPeriods;

    /**
     * Creates an instance of AtlasClassification class.
     */
    @Generated
    public AtlasClassification() {
    }

    /**
     * Get the attributes property: The attributes of the struct.
     * 
     * @return the attributes value.
     */
    @Generated
    public Map<String, Object> getAttributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: The attributes of the struct.
     * 
     * @param attributes the attributes value to set.
     * @return the AtlasClassification object itself.
     */
    @Generated
    public AtlasClassification setAttributes(Map<String, Object> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the typeName property: The name of the type.
     * 
     * @return the typeName value.
     */
    @Generated
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: The name of the type.
     * 
     * @param typeName the typeName value to set.
     * @return the AtlasClassification object itself.
     */
    @Generated
    public AtlasClassification setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the lastModifiedTS property: ETag for concurrency control.
     * 
     * @return the lastModifiedTS value.
     */
    @Generated
    public String getLastModifiedTS() {
        return this.lastModifiedTS;
    }

    /**
     * Set the lastModifiedTS property: ETag for concurrency control.
     * 
     * @param lastModifiedTS the lastModifiedTS value to set.
     * @return the AtlasClassification object itself.
     */
    @Generated
    public AtlasClassification setLastModifiedTS(String lastModifiedTS) {
        this.lastModifiedTS = lastModifiedTS;
        return this;
    }

    /**
     * Get the entityGuid property: The GUID of the entity.
     * 
     * @return the entityGuid value.
     */
    @Generated
    public String getEntityGuid() {
        return this.entityGuid;
    }

    /**
     * Set the entityGuid property: The GUID of the entity.
     * 
     * @param entityGuid the entityGuid value to set.
     * @return the AtlasClassification object itself.
     */
    @Generated
    public AtlasClassification setEntityGuid(String entityGuid) {
        this.entityGuid = entityGuid;
        return this;
    }

    /**
     * Get the entityStatus property: Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     * 
     * @return the entityStatus value.
     */
    @Generated
    public EntityStatus getEntityStatus() {
        return this.entityStatus;
    }

    /**
     * Set the entityStatus property: Status of the entity - can be active or deleted. Deleted entities are not
     * removed.
     * 
     * @param entityStatus the entityStatus value to set.
     * @return the AtlasClassification object itself.
     */
    @Generated
    public AtlasClassification setEntityStatus(EntityStatus entityStatus) {
        this.entityStatus = entityStatus;
        return this;
    }

    /**
     * Get the removePropagationsOnEntityDelete property: Determines if propagations will be removed on entity deletion.
     * 
     * @return the removePropagationsOnEntityDelete value.
     */
    @Generated
    public Boolean isRemovePropagationsOnEntityDelete() {
        return this.removePropagationsOnEntityDelete;
    }

    /**
     * Set the removePropagationsOnEntityDelete property: Determines if propagations will be removed on entity deletion.
     * 
     * @param removePropagationsOnEntityDelete the removePropagationsOnEntityDelete value to set.
     * @return the AtlasClassification object itself.
     */
    @Generated
    public AtlasClassification setRemovePropagationsOnEntityDelete(Boolean removePropagationsOnEntityDelete) {
        this.removePropagationsOnEntityDelete = removePropagationsOnEntityDelete;
        return this;
    }

    /**
     * Get the validityPeriods property: An array of time boundaries indicating validity periods.
     * 
     * @return the validityPeriods value.
     */
    @Generated
    public List<TimeBoundary> getValidityPeriods() {
        return this.validityPeriods;
    }

    /**
     * Set the validityPeriods property: An array of time boundaries indicating validity periods.
     * 
     * @param validityPeriods the validityPeriods value to set.
     * @return the AtlasClassification object itself.
     */
    @Generated
    public AtlasClassification setValidityPeriods(List<TimeBoundary> validityPeriods) {
        this.validityPeriods = validityPeriods;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("attributes", this.attributes, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("typeName", this.typeName);
        jsonWriter.writeStringField("lastModifiedTS", this.lastModifiedTS);
        jsonWriter.writeStringField("entityGuid", this.entityGuid);
        jsonWriter.writeStringField("entityStatus", this.entityStatus == null ? null : this.entityStatus.toString());
        jsonWriter.writeBooleanField("removePropagationsOnEntityDelete", this.removePropagationsOnEntityDelete);
        jsonWriter.writeArrayField("validityPeriods", this.validityPeriods,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasClassification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasClassification if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasClassification.
     */
    @Generated
    public static AtlasClassification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasClassification deserializedAtlasClassification = new AtlasClassification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributes".equals(fieldName)) {
                    Map<String, Object> attributes = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAtlasClassification.attributes = attributes;
                } else if ("typeName".equals(fieldName)) {
                    deserializedAtlasClassification.typeName = reader.getString();
                } else if ("lastModifiedTS".equals(fieldName)) {
                    deserializedAtlasClassification.lastModifiedTS = reader.getString();
                } else if ("entityGuid".equals(fieldName)) {
                    deserializedAtlasClassification.entityGuid = reader.getString();
                } else if ("entityStatus".equals(fieldName)) {
                    deserializedAtlasClassification.entityStatus = EntityStatus.fromString(reader.getString());
                } else if ("removePropagationsOnEntityDelete".equals(fieldName)) {
                    deserializedAtlasClassification.removePropagationsOnEntityDelete
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("validityPeriods".equals(fieldName)) {
                    List<TimeBoundary> validityPeriods = reader.readArray(reader1 -> TimeBoundary.fromJson(reader1));
                    deserializedAtlasClassification.validityPeriods = validityPeriods;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasClassification;
        });
    }
}
