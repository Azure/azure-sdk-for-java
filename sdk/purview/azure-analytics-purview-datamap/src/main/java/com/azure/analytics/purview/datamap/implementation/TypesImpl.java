// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Types.
 */
public final class TypesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TypesService service;

    /**
     * The service client containing this operation class.
     */
    private final PurviewDataMapClientImpl client;

    /**
     * Initializes an instance of TypesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TypesImpl(PurviewDataMapClientImpl client) {
        this.service = RestProxy.create(TypesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PurviewDataMapClientTypes to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/datamap/api")
    @ServiceInterface(name = "PurviewDataMapClient")
    public interface TypesService {
        @Get("/atlas/v2/types/businessmetadatadef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getBusinessMetadataDefByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/businessmetadatadef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getBusinessMetadataDefByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/businessmetadatadef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getBusinessMetadataDefByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/businessmetadatadef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getBusinessMetadataDefByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/classificationdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClassificationDefByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/classificationdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getClassificationDefByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/classificationdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClassificationDefByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/classificationdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getClassificationDefByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/entitydef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEntityDefByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/entitydef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEntityDefByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/entitydef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEntityDefByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/entitydef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEntityDefByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/enumdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEnumDefByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/enumdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEnumDefByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/enumdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEnumDefByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/enumdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEnumDefByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/relationshipdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRelationshipDefByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/relationshipdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getRelationshipDefByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/relationshipdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRelationshipDefByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/relationshipdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getRelationshipDefByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/structdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getStructDefByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/structdef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getStructDefByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/structdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getStructDefByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/structdef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getStructDefByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/typedef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/typedef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/typedef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/typedef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/types/typedef/name/{name}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/types/typedef/name/{name}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("name") String name, @HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> bulkCreate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData typesDef, RequestOptions requestOptions, Context context);

        @Post("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> bulkCreateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData typesDef, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> bulkUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData typesDef, RequestOptions requestOptions, Context context);

        @Put("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> bulkUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData typesDef, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> bulkDelete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData typesDef, RequestOptions requestOptions, Context context);

        @Delete("/atlas/v2/types/typedefs")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> bulkDeleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData typesDef, RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/typedefs/headers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listHeaders(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/atlas/v2/types/typedefs/headers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listHeadersSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/types/termtemplatedef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTermTemplateDefByGuid(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/types/termtemplatedef/guid/{guid}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTermTemplateDefByGuidSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("guid") String guid,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/types/termtemplatedef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTermTemplateDefByName(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/types/termtemplatedef/name/{name}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTermTemplateDefByNameSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Get the businessMetadata definition for the given guid.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid businessMetadata guid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the businessMetadata definition for the given guid along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBusinessMetadataDefByGuidWithResponseAsync(String guid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getBusinessMetadataDefByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the businessMetadata definition for the given guid.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid businessMetadata guid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the businessMetadata definition for the given guid along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBusinessMetadataDefByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getBusinessMetadataDefByGuidSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the businessMetadata definition by it's name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name businessMetadata name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the businessMetadata definition by it's name (unique) along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getBusinessMetadataDefByNameWithResponseAsync(String name,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getBusinessMetadataDefByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the businessMetadata definition by it's name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name businessMetadata name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the businessMetadata definition by it's name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getBusinessMetadataDefByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getBusinessMetadataDefByNameSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the classification definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the classification definition for the given GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationDefByGuidWithResponseAsync(String guid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getClassificationDefByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the classification definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the classification definition for the given GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationDefByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getClassificationDefByGuidSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the classification definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the classification definition by its name (unique) along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationDefByNameWithResponseAsync(String name,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getClassificationDefByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the classification definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the classification definition by its name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationDefByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getClassificationDefByNameSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the Entity definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Entity definition for the given GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntityDefByGuidWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getEntityDefByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the Entity definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Entity definition for the given GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntityDefByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEntityDefByGuidSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the entity definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the entity definition by its name (unique) along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntityDefByNameWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getEntityDefByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the entity definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the entity definition by its name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntityDefByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEntityDefByNameSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the enum definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the enum.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the enum definition for the given GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEnumDefByGuidWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getEnumDefByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the enum definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the enum.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the enum definition for the given GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEnumDefByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEnumDefByGuidSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the enum definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the enum.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the enum definition by its name (unique) along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEnumDefByNameWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getEnumDefByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the enum definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the enum.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the enum definition by its name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEnumDefByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEnumDefByNameSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the relationship definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the relationship.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the relationship definition for the given GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRelationshipDefByGuidWithResponseAsync(String guid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getRelationshipDefByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the relationship definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the relationship.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the relationship definition for the given GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRelationshipDefByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRelationshipDefByGuidSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the relationship definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     * }
     * }</pre>
     * 
     * @param name The name of the relationship.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the relationship definition by its name (unique) along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRelationshipDefByNameWithResponseAsync(String name,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getRelationshipDefByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the relationship definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     * }
     * }</pre>
     * 
     * @param name The name of the relationship.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the relationship definition by its name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRelationshipDefByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getRelationshipDefByNameSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the struct definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the struct.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the struct definition for the given GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStructDefByGuidWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getStructDefByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the struct definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the struct.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the struct definition for the given GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStructDefByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getStructDefByGuidSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the struct definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the struct.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the struct definition by its name (unique) along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStructDefByNameWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getStructDefByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the struct definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the struct.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the struct definition by its name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStructDefByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getStructDefByNameSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            name, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the type definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the type definition for the given GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByGuidWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the type definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the type definition for the given GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getByGuidSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), guid,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get the type definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the type definition by its name (unique) along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByNameWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the type definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityTypes (Optional): [
     *         String (Optional)
     *     ]
     *     subTypes (Optional): [
     *         String (Optional)
     *     ]
     *     superTypes (Optional): [
     *         String (Optional)
     *     ]
     *     relationshipAttributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *             isLegacyAttribute: Boolean (Optional)
     *             relationshipTypeName: String (Optional)
     *         }
     *     ]
     *     defaultValue: String (Optional)
     *     elementDefs (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             ordinal: Integer (Optional)
     *             value: String (Optional)
     *         }
     *     ]
     *     endDef1 (Optional): {
     *         cardinality: String(SINGLE/LIST/SET) (Optional)
     *         description: String (Optional)
     *         isContainer: Boolean (Optional)
     *         isLegacyAttribute: Boolean (Optional)
     *         name: String (Optional)
     *         type: String (Optional)
     *     }
     *     endDef2 (Optional): (recursive schema, see endDef2 above)
     *     relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *     relationshipLabel: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the type definition by its name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getByNameSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Delete API for type identified by its name.
     * 
     * @param name The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Delete API for type identified by its name.
     * 
     * @param name The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), name, accept,
            requestOptions, Context.NONE);
    }

    /**
     * List all type definitions in bulk.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermTemplate</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include termtemplatedef when return all typedefs.
     * This is always true
     * when search filter type=term_template</td>
     * </tr>
     * <tr>
     * <td>type</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Typedef name as search filter when get typedefs. Allowed values: "enum", "entity", "classification",
     * "relationship", "struct", "term_template".</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.list(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * List all type definitions in bulk.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermTemplate</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include termtemplatedef when return all typedefs.
     * This is always true
     * when search filter type=term_template</td>
     * </tr>
     * <tr>
     * <td>type</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Typedef name as search filter when get typedefs. Allowed values: "enum", "entity", "classification",
     * "relationship", "struct", "term_template".</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Create all atlas type definitions in bulk, only new definitions will be
     * created.
     * Any changes to the existing definitions will be discarded.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param typesDef A composite wrapper object with corresponding lists of the type definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> bulkCreateWithResponseAsync(BinaryData typesDef, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.bulkCreate(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, typesDef, requestOptions, context));
    }

    /**
     * Create all atlas type definitions in bulk, only new definitions will be
     * created.
     * Any changes to the existing definitions will be discarded.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param typesDef A composite wrapper object with corresponding lists of the type definition.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> bulkCreateWithResponse(BinaryData typesDef, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.bulkCreateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            typesDef, requestOptions, Context.NONE);
    }

    /**
     * Update all types in bulk, changes detected in the type definitions would be
     * persisted.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param typesDef A composite object that captures all type definition changes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> bulkUpdateWithResponseAsync(BinaryData typesDef, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.bulkUpdate(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, typesDef, requestOptions, context));
    }

    /**
     * Update all types in bulk, changes detected in the type definitions would be
     * persisted.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param typesDef A composite object that captures all type definition changes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the definitions of types along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> bulkUpdateWithResponse(BinaryData typesDef, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.bulkUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            typesDef, requestOptions, Context.NONE);
    }

    /**
     * Delete API for all types in bulk.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param typesDef A composite object that captures all types to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> bulkDeleteWithResponseAsync(BinaryData typesDef, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.bulkDelete(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, typesDef, requestOptions, context));
    }

    /**
     * Delete API for all types in bulk.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     businessMetadataDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): {
     *                 availableLocales (Optional): [
     *                     String (Optional)
     *                 ]
     *                 calendar: Double (Optional)
     *                 dateInstance (Optional): (recursive schema, see dateInstance above)
     *                 dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *                 instance (Optional): (recursive schema, see instance above)
     *                 lenient: Boolean (Optional)
     *                 numberFormat (Optional): {
     *                     availableLocales (Optional): [
     *                         String (Optional)
     *                     ]
     *                     currency: String (Optional)
     *                     currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *                     groupingUsed: Boolean (Optional)
     *                     instance (Optional): (recursive schema, see instance above)
     *                     integerInstance (Optional): (recursive schema, see integerInstance above)
     *                     maximumFractionDigits: Integer (Optional)
     *                     maximumIntegerDigits: Integer (Optional)
     *                     minimumFractionDigits: Integer (Optional)
     *                     minimumIntegerDigits: Integer (Optional)
     *                     numberInstance (Optional): (recursive schema, see numberInstance above)
     *                     parseIntegerOnly: Boolean (Optional)
     *                     percentInstance (Optional): (recursive schema, see percentInstance above)
     *                     roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *                 }
     *                 timeInstance (Optional): (recursive schema, see timeInstance above)
     *                 timeZone (Optional): {
     *                     dstSavings: Integer (Optional)
     *                     id: String (Optional)
     *                     availableIds (Optional): [
     *                         String (Optional)
     *                     ]
     *                     default (Optional): (recursive schema, see default above)
     *                     displayName: String (Optional)
     *                     rawOffset: Integer (Optional)
     *                 }
     *             }
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                          (Optional){
     *                             params (Optional): {
     *                                 String: Object (Optional)
     *                             }
     *                             type: String (Optional)
     *                         }
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     classificationDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             entityTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     entityDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             subTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             superTypes (Optional): [
     *                 String (Optional)
     *             ]
     *             relationshipAttributeDefs (Optional): [
     *                  (Optional){
     *                     cardinality: String(SINGLE/LIST/SET) (Optional)
     *                     constraints (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     defaultValue: String (Optional)
     *                     description: String (Optional)
     *                     includeInNotification: Boolean (Optional)
     *                     isIndexable: Boolean (Optional)
     *                     isOptional: Boolean (Optional)
     *                     isUnique: Boolean (Optional)
     *                     name: String (Optional)
     *                     options (Optional): {
     *                         String: String (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     valuesMaxCount: Integer (Optional)
     *                     valuesMinCount: Integer (Optional)
     *                     isLegacyAttribute: Boolean (Optional)
     *                     relationshipTypeName: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     enumDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             defaultValue: String (Optional)
     *             elementDefs (Optional): [
     *                  (Optional){
     *                     description: String (Optional)
     *                     ordinal: Integer (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     relationshipDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             endDef1 (Optional): {
     *                 cardinality: String(SINGLE/LIST/SET) (Optional)
     *                 description: String (Optional)
     *                 isContainer: Boolean (Optional)
     *                 isLegacyAttribute: Boolean (Optional)
     *                 name: String (Optional)
     *                 type: String (Optional)
     *             }
     *             endDef2 (Optional): (recursive schema, see endDef2 above)
     *             relationshipCategory: String(ASSOCIATION/AGGREGATION/COMPOSITION) (Optional)
     *             relationshipLabel: String (Optional)
     *         }
     *     ]
     *     structDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     termTemplateDefs (Optional): [
     *          (Optional){
     *             category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             dateFormatter (Optional): (recursive schema, see dateFormatter above)
     *             description: String (Optional)
     *             guid: String (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             serviceType: String (Optional)
     *             typeVersion: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             version: Long (Optional)
     *             lastModifiedTS: String (Optional)
     *             attributeDefs (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param typesDef A composite object that captures all types to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> bulkDeleteWithResponse(BinaryData typesDef, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.bulkDeleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            typesDef, requestOptions, Context.NONE);
    }

    /**
     * List all type definitions returned as a list of minimal information header.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermTemplate</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include termtemplatedef when return all typedefs.
     * This is always true
     * when search filter type=term_template</td>
     * </tr>
     * <tr>
     * <td>type</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Typedef name as search filter when get typedefs. Allowed values: "enum", "entity", "classification",
     * "relationship", "struct", "term_template".</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *         guid: String (Optional)
     *         name: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listHeadersWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listHeaders(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * List all type definitions returned as a list of minimal information header.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>includeTermTemplate</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether include termtemplatedef when return all typedefs.
     * This is always true
     * when search filter type=term_template</td>
     * </tr>
     * <tr>
     * <td>type</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Typedef name as search filter when get typedefs. Allowed values: "enum", "entity", "classification",
     * "relationship", "struct", "term_template".</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * [
     *      (Required){
     *         category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *         guid: String (Optional)
     *         name: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listHeadersWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listHeadersSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Get the term template definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the term template.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the term template definition for the given GUID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTermTemplateDefByGuidWithResponseAsync(String guid,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTermTemplateDefByGuid(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, context));
    }

    /**
     * Get the term template definition for the given GUID.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param guid The globally unique identifier of the term template.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the term template definition for the given GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermTemplateDefByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTermTemplateDefByGuidSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Get the term template definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The unique name of the term template.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the term template definition by its name (unique) along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTermTemplateDefByNameWithResponseAsync(String name,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTermTemplateDefByName(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, context));
    }

    /**
     * Get the term template definition by its name (unique).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     category: String(PRIMITIVE/OBJECT_ID_TYPE/ENUM/STRUCT/CLASSIFICATION/ENTITY/ARRAY/MAP/RELATIONSHIP/TERM_TEMPLATE) (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     dateFormatter (Optional): {
     *         availableLocales (Optional): [
     *             String (Optional)
     *         ]
     *         calendar: Double (Optional)
     *         dateInstance (Optional): (recursive schema, see dateInstance above)
     *         dateTimeInstance (Optional): (recursive schema, see dateTimeInstance above)
     *         instance (Optional): (recursive schema, see instance above)
     *         lenient: Boolean (Optional)
     *         numberFormat (Optional): {
     *             availableLocales (Optional): [
     *                 String (Optional)
     *             ]
     *             currency: String (Optional)
     *             currencyInstance (Optional): (recursive schema, see currencyInstance above)
     *             groupingUsed: Boolean (Optional)
     *             instance (Optional): (recursive schema, see instance above)
     *             integerInstance (Optional): (recursive schema, see integerInstance above)
     *             maximumFractionDigits: Integer (Optional)
     *             maximumIntegerDigits: Integer (Optional)
     *             minimumFractionDigits: Integer (Optional)
     *             minimumIntegerDigits: Integer (Optional)
     *             numberInstance (Optional): (recursive schema, see numberInstance above)
     *             parseIntegerOnly: Boolean (Optional)
     *             percentInstance (Optional): (recursive schema, see percentInstance above)
     *             roundingMode: String(UP/DOWN/CEILING/FLOOR/HALF_UP/HALF_DOWN/HALF_EVEN/UNNECESSARY) (Optional)
     *         }
     *         timeInstance (Optional): (recursive schema, see timeInstance above)
     *         timeZone (Optional): {
     *             dstSavings: Integer (Optional)
     *             id: String (Optional)
     *             availableIds (Optional): [
     *                 String (Optional)
     *             ]
     *             default (Optional): (recursive schema, see default above)
     *             displayName: String (Optional)
     *             rawOffset: Integer (Optional)
     *         }
     *     }
     *     description: String (Optional)
     *     guid: String (Optional)
     *     name: String (Optional)
     *     options (Optional): {
     *         String: String (Optional)
     *     }
     *     serviceType: String (Optional)
     *     typeVersion: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     version: Long (Optional)
     *     lastModifiedTS: String (Optional)
     *     attributeDefs (Optional): [
     *          (Optional){
     *             cardinality: String(SINGLE/LIST/SET) (Optional)
     *             constraints (Optional): [
     *                  (Optional){
     *                     params (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     type: String (Optional)
     *                 }
     *             ]
     *             defaultValue: String (Optional)
     *             description: String (Optional)
     *             includeInNotification: Boolean (Optional)
     *             isIndexable: Boolean (Optional)
     *             isOptional: Boolean (Optional)
     *             isUnique: Boolean (Optional)
     *             name: String (Optional)
     *             options (Optional): {
     *                 String: String (Optional)
     *             }
     *             typeName: String (Optional)
     *             valuesMaxCount: Integer (Optional)
     *             valuesMinCount: Integer (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param name The unique name of the term template.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the term template definition by its name (unique) along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermTemplateDefByNameWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTermTemplateDefByNameSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), name, accept, requestOptions, Context.NONE);
    }
}
