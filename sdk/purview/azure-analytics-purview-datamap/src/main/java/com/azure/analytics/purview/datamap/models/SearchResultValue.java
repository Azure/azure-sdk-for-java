// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The value item of the search result.
 */
@Immutable
public final class SearchResultValue implements JsonSerializable<SearchResultValue> {
    /*
     * The search score calculated by the search engine. The results are ordered by
     * search score by default.
     */
    @Generated
    private Double searchScore;

    /*
     * A highlight list that consists of index fields id ,qualifiedName, name,
     * description, entityType. When the keyword appears in those fields, the value of
     * the field, attached with emphasis mark, is returned as an element of
     * 
     * @search.highlights.
     */
    @Generated
    private SearchHighlights searchHighlights;

    /*
     * The object type of the record. Object type is the top-level property to
     * distinguish whether a record is an asset or a term.
     */
    @Generated
    private String objectType;

    /*
     * The create time of the record. The Unix epoch format.
     */
    @Generated
    private Long createTime;

    /*
     * The last update time of the record. The Unix epoch format.
     */
    @Generated
    private Long updateTime;

    /*
     * The GUID of the record.
     */
    @Generated
    private String id;

    /*
     * The name of the record.
     */
    @Generated
    private String name;

    /*
     * The qualified name of the record.
     */
    @Generated
    private String qualifiedName;

    /*
     * The type name of the asset.
     */
    @Generated
    private String entityType;

    /*
     * The description of the asset.
     */
    @Generated
    private String description;

    /*
     * The endorsement of the asset.
     */
    @Generated
    private String endorsement;

    /*
     * The owner of the record.
     */
    @Generated
    private String owner;

    /*
     * The classifications of the record.
     */
    @Generated
    private List<String> classification;

    /*
     * The labels of the asset.
     */
    @Generated
    private List<String> label;

    /*
     * The terms assigned to the asset.
     */
    @Generated
    private List<TermSearchResultValue> term;

    /*
     * The contacts of the asset.
     */
    @Generated
    private List<ContactSearchResultValue> contact;

    /*
     * The asset types of the asset.
     */
    @Generated
    private List<String> assetType;

    /*
     * The type name of the term. Could be AtlasGlossary, AtlasGlossaryTerm or
     * AtlasGlossaryCategory.
     */
    @Generated
    private String glossaryType;

    /*
     * The glossary name of the term.
     */
    @Generated
    private String glossary;

    /*
     * The status of the term.
     */
    @Generated
    private String termStatus;

    /*
     * The term template names used by the term.
     */
    @Generated
    private List<String> termTemplate;

    /*
     * The definition of the term.
     */
    @Generated
    private String longDescription;

    /**
     * Creates an instance of SearchResultValue class.
     */
    @Generated
    private SearchResultValue() {
    }

    /**
     * Get the searchScore property: The search score calculated by the search engine. The results are ordered by
     * search score by default.
     * 
     * @return the searchScore value.
     */
    @Generated
    public Double getSearchScore() {
        return this.searchScore;
    }

    /**
     * Get the searchHighlights property: A highlight list that consists of index fields id ,qualifiedName, name,
     * description, entityType. When the keyword appears in those fields, the value of
     * the field, attached with emphasis mark, is returned as an element of
     * &#064;search.highlights.
     * 
     * @return the searchHighlights value.
     */
    @Generated
    public SearchHighlights getSearchHighlights() {
        return this.searchHighlights;
    }

    /**
     * Get the objectType property: The object type of the record. Object type is the top-level property to
     * distinguish whether a record is an asset or a term.
     * 
     * @return the objectType value.
     */
    @Generated
    public String getObjectType() {
        return this.objectType;
    }

    /**
     * Get the createTime property: The create time of the record. The Unix epoch format.
     * 
     * @return the createTime value.
     */
    @Generated
    public Long getCreateTime() {
        return this.createTime;
    }

    /**
     * Get the updateTime property: The last update time of the record. The Unix epoch format.
     * 
     * @return the updateTime value.
     */
    @Generated
    public Long getUpdateTime() {
        return this.updateTime;
    }

    /**
     * Get the id property: The GUID of the record.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name of the record.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the qualifiedName property: The qualified name of the record.
     * 
     * @return the qualifiedName value.
     */
    @Generated
    public String getQualifiedName() {
        return this.qualifiedName;
    }

    /**
     * Get the entityType property: The type name of the asset.
     * 
     * @return the entityType value.
     */
    @Generated
    public String getEntityType() {
        return this.entityType;
    }

    /**
     * Get the description property: The description of the asset.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the endorsement property: The endorsement of the asset.
     * 
     * @return the endorsement value.
     */
    @Generated
    public String getEndorsement() {
        return this.endorsement;
    }

    /**
     * Get the owner property: The owner of the record.
     * 
     * @return the owner value.
     */
    @Generated
    public String getOwner() {
        return this.owner;
    }

    /**
     * Get the classification property: The classifications of the record.
     * 
     * @return the classification value.
     */
    @Generated
    public List<String> getClassification() {
        return this.classification;
    }

    /**
     * Get the label property: The labels of the asset.
     * 
     * @return the label value.
     */
    @Generated
    public List<String> getLabel() {
        return this.label;
    }

    /**
     * Get the term property: The terms assigned to the asset.
     * 
     * @return the term value.
     */
    @Generated
    public List<TermSearchResultValue> getTerm() {
        return this.term;
    }

    /**
     * Get the contact property: The contacts of the asset.
     * 
     * @return the contact value.
     */
    @Generated
    public List<ContactSearchResultValue> getContact() {
        return this.contact;
    }

    /**
     * Get the assetType property: The asset types of the asset.
     * 
     * @return the assetType value.
     */
    @Generated
    public List<String> getAssetType() {
        return this.assetType;
    }

    /**
     * Get the glossaryType property: The type name of the term. Could be AtlasGlossary, AtlasGlossaryTerm or
     * AtlasGlossaryCategory.
     * 
     * @return the glossaryType value.
     */
    @Generated
    public String getGlossaryType() {
        return this.glossaryType;
    }

    /**
     * Get the glossary property: The glossary name of the term.
     * 
     * @return the glossary value.
     */
    @Generated
    public String getGlossary() {
        return this.glossary;
    }

    /**
     * Get the termStatus property: The status of the term.
     * 
     * @return the termStatus value.
     */
    @Generated
    public String getTermStatus() {
        return this.termStatus;
    }

    /**
     * Get the termTemplate property: The term template names used by the term.
     * 
     * @return the termTemplate value.
     */
    @Generated
    public List<String> getTermTemplate() {
        return this.termTemplate;
    }

    /**
     * Get the longDescription property: The definition of the term.
     * 
     * @return the longDescription value.
     */
    @Generated
    public String getLongDescription() {
        return this.longDescription;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("@search.score", this.searchScore);
        jsonWriter.writeJsonField("@search.highlights", this.searchHighlights);
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeNumberField("createTime", this.createTime);
        jsonWriter.writeNumberField("updateTime", this.updateTime);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("qualifiedName", this.qualifiedName);
        jsonWriter.writeStringField("entityType", this.entityType);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("endorsement", this.endorsement);
        jsonWriter.writeStringField("owner", this.owner);
        jsonWriter.writeArrayField("classification", this.classification,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("label", this.label, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("term", this.term, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("contact", this.contact, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("assetType", this.assetType, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("glossaryType", this.glossaryType);
        jsonWriter.writeStringField("glossary", this.glossary);
        jsonWriter.writeStringField("termStatus", this.termStatus);
        jsonWriter.writeArrayField("termTemplate", this.termTemplate, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("longDescription", this.longDescription);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchResultValue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchResultValue if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchResultValue.
     */
    @Generated
    public static SearchResultValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchResultValue deserializedSearchResultValue = new SearchResultValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@search.score".equals(fieldName)) {
                    deserializedSearchResultValue.searchScore = reader.getNullable(JsonReader::getDouble);
                } else if ("@search.highlights".equals(fieldName)) {
                    deserializedSearchResultValue.searchHighlights = SearchHighlights.fromJson(reader);
                } else if ("objectType".equals(fieldName)) {
                    deserializedSearchResultValue.objectType = reader.getString();
                } else if ("createTime".equals(fieldName)) {
                    deserializedSearchResultValue.createTime = reader.getNullable(JsonReader::getLong);
                } else if ("updateTime".equals(fieldName)) {
                    deserializedSearchResultValue.updateTime = reader.getNullable(JsonReader::getLong);
                } else if ("id".equals(fieldName)) {
                    deserializedSearchResultValue.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSearchResultValue.name = reader.getString();
                } else if ("qualifiedName".equals(fieldName)) {
                    deserializedSearchResultValue.qualifiedName = reader.getString();
                } else if ("entityType".equals(fieldName)) {
                    deserializedSearchResultValue.entityType = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedSearchResultValue.description = reader.getString();
                } else if ("endorsement".equals(fieldName)) {
                    deserializedSearchResultValue.endorsement = reader.getString();
                } else if ("owner".equals(fieldName)) {
                    deserializedSearchResultValue.owner = reader.getString();
                } else if ("classification".equals(fieldName)) {
                    List<String> classification = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchResultValue.classification = classification;
                } else if ("label".equals(fieldName)) {
                    List<String> label = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchResultValue.label = label;
                } else if ("term".equals(fieldName)) {
                    List<TermSearchResultValue> term
                        = reader.readArray(reader1 -> TermSearchResultValue.fromJson(reader1));
                    deserializedSearchResultValue.term = term;
                } else if ("contact".equals(fieldName)) {
                    List<ContactSearchResultValue> contact
                        = reader.readArray(reader1 -> ContactSearchResultValue.fromJson(reader1));
                    deserializedSearchResultValue.contact = contact;
                } else if ("assetType".equals(fieldName)) {
                    List<String> assetType = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchResultValue.assetType = assetType;
                } else if ("glossaryType".equals(fieldName)) {
                    deserializedSearchResultValue.glossaryType = reader.getString();
                } else if ("glossary".equals(fieldName)) {
                    deserializedSearchResultValue.glossary = reader.getString();
                } else if ("termStatus".equals(fieldName)) {
                    deserializedSearchResultValue.termStatus = reader.getString();
                } else if ("termTemplate".equals(fieldName)) {
                    List<String> termTemplate = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchResultValue.termTemplate = termTemplate;
                } else if ("longDescription".equals(fieldName)) {
                    deserializedSearchResultValue.longDescription = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchResultValue;
        });
    }
}
