// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The number format.
 */
@Fluent
public final class NumberFormat {
    /*
     * The number format.
     */
    @Generated
    @JsonProperty(value = "availableLocales")
    private List<String> availableLocales;

    /*
     * The currency.
     */
    @Generated
    @JsonProperty(value = "currency")
    private String currency;

    /*
     * The number format.
     */
    @Generated
    @JsonProperty(value = "currencyInstance")
    private NumberFormat currencyInstance;

    /*
     * Determines if grouping is used.
     */
    @Generated
    @JsonProperty(value = "groupingUsed")
    private Boolean groupingUsed;

    /*
     * The number format.
     */
    @Generated
    @JsonProperty(value = "instance")
    private NumberFormat instance;

    /*
     * The number format.
     */
    @Generated
    @JsonProperty(value = "integerInstance")
    private NumberFormat integerInstance;

    /*
     * The maximum of fraction digits.
     */
    @Generated
    @JsonProperty(value = "maximumFractionDigits")
    private Integer maximumFractionDigits;

    /*
     * The maximum of integer digits.
     */
    @Generated
    @JsonProperty(value = "maximumIntegerDigits")
    private Integer maximumIntegerDigits;

    /*
     * The minimum of fraction digits.
     */
    @Generated
    @JsonProperty(value = "minimumFractionDigits")
    private Integer minimumFractionDigits;

    /*
     * The minimum of integer digits.
     */
    @Generated
    @JsonProperty(value = "minimumIntegerDigits")
    private Integer minimumIntegerDigits;

    /*
     * The number format.
     */
    @Generated
    @JsonProperty(value = "numberInstance")
    private NumberFormat numberInstance;

    /*
     * Determines if only integer is parsed.
     */
    @Generated
    @JsonProperty(value = "parseIntegerOnly")
    private Boolean parseIntegerOnly;

    /*
     * The number format.
     */
    @Generated
    @JsonProperty(value = "percentInstance")
    private NumberFormat percentInstance;

    /*
     * The enum of rounding mode.
     */
    @Generated
    @JsonProperty(value = "roundingMode")
    private RoundingMode roundingMode;

    /**
     * Creates an instance of NumberFormat class.
     */
    @Generated
    public NumberFormat() {
    }

    /**
     * Get the availableLocales property: The number format.
     * 
     * @return the availableLocales value.
     */
    @Generated
    public List<String> getAvailableLocales() {
        return this.availableLocales;
    }

    /**
     * Set the availableLocales property: The number format.
     * 
     * @param availableLocales the availableLocales value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setAvailableLocales(List<String> availableLocales) {
        this.availableLocales = availableLocales;
        return this;
    }

    /**
     * Get the currency property: The currency.
     * 
     * @return the currency value.
     */
    @Generated
    public String getCurrency() {
        return this.currency;
    }

    /**
     * Set the currency property: The currency.
     * 
     * @param currency the currency value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setCurrency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get the currencyInstance property: The number format.
     * 
     * @return the currencyInstance value.
     */
    @Generated
    public NumberFormat getCurrencyInstance() {
        return this.currencyInstance;
    }

    /**
     * Set the currencyInstance property: The number format.
     * 
     * @param currencyInstance the currencyInstance value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setCurrencyInstance(NumberFormat currencyInstance) {
        this.currencyInstance = currencyInstance;
        return this;
    }

    /**
     * Get the groupingUsed property: Determines if grouping is used.
     * 
     * @return the groupingUsed value.
     */
    @Generated
    public Boolean isGroupingUsed() {
        return this.groupingUsed;
    }

    /**
     * Set the groupingUsed property: Determines if grouping is used.
     * 
     * @param groupingUsed the groupingUsed value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setGroupingUsed(Boolean groupingUsed) {
        this.groupingUsed = groupingUsed;
        return this;
    }

    /**
     * Get the instance property: The number format.
     * 
     * @return the instance value.
     */
    @Generated
    public NumberFormat getInstance() {
        return this.instance;
    }

    /**
     * Set the instance property: The number format.
     * 
     * @param instance the instance value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setInstance(NumberFormat instance) {
        this.instance = instance;
        return this;
    }

    /**
     * Get the integerInstance property: The number format.
     * 
     * @return the integerInstance value.
     */
    @Generated
    public NumberFormat getIntegerInstance() {
        return this.integerInstance;
    }

    /**
     * Set the integerInstance property: The number format.
     * 
     * @param integerInstance the integerInstance value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setIntegerInstance(NumberFormat integerInstance) {
        this.integerInstance = integerInstance;
        return this;
    }

    /**
     * Get the maximumFractionDigits property: The maximum of fraction digits.
     * 
     * @return the maximumFractionDigits value.
     */
    @Generated
    public Integer getMaximumFractionDigits() {
        return this.maximumFractionDigits;
    }

    /**
     * Set the maximumFractionDigits property: The maximum of fraction digits.
     * 
     * @param maximumFractionDigits the maximumFractionDigits value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setMaximumFractionDigits(Integer maximumFractionDigits) {
        this.maximumFractionDigits = maximumFractionDigits;
        return this;
    }

    /**
     * Get the maximumIntegerDigits property: The maximum of integer digits.
     * 
     * @return the maximumIntegerDigits value.
     */
    @Generated
    public Integer getMaximumIntegerDigits() {
        return this.maximumIntegerDigits;
    }

    /**
     * Set the maximumIntegerDigits property: The maximum of integer digits.
     * 
     * @param maximumIntegerDigits the maximumIntegerDigits value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setMaximumIntegerDigits(Integer maximumIntegerDigits) {
        this.maximumIntegerDigits = maximumIntegerDigits;
        return this;
    }

    /**
     * Get the minimumFractionDigits property: The minimum of fraction digits.
     * 
     * @return the minimumFractionDigits value.
     */
    @Generated
    public Integer getMinimumFractionDigits() {
        return this.minimumFractionDigits;
    }

    /**
     * Set the minimumFractionDigits property: The minimum of fraction digits.
     * 
     * @param minimumFractionDigits the minimumFractionDigits value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setMinimumFractionDigits(Integer minimumFractionDigits) {
        this.minimumFractionDigits = minimumFractionDigits;
        return this;
    }

    /**
     * Get the minimumIntegerDigits property: The minimum of integer digits.
     * 
     * @return the minimumIntegerDigits value.
     */
    @Generated
    public Integer getMinimumIntegerDigits() {
        return this.minimumIntegerDigits;
    }

    /**
     * Set the minimumIntegerDigits property: The minimum of integer digits.
     * 
     * @param minimumIntegerDigits the minimumIntegerDigits value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setMinimumIntegerDigits(Integer minimumIntegerDigits) {
        this.minimumIntegerDigits = minimumIntegerDigits;
        return this;
    }

    /**
     * Get the numberInstance property: The number format.
     * 
     * @return the numberInstance value.
     */
    @Generated
    public NumberFormat getNumberInstance() {
        return this.numberInstance;
    }

    /**
     * Set the numberInstance property: The number format.
     * 
     * @param numberInstance the numberInstance value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setNumberInstance(NumberFormat numberInstance) {
        this.numberInstance = numberInstance;
        return this;
    }

    /**
     * Get the parseIntegerOnly property: Determines if only integer is parsed.
     * 
     * @return the parseIntegerOnly value.
     */
    @Generated
    public Boolean isParseIntegerOnly() {
        return this.parseIntegerOnly;
    }

    /**
     * Set the parseIntegerOnly property: Determines if only integer is parsed.
     * 
     * @param parseIntegerOnly the parseIntegerOnly value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setParseIntegerOnly(Boolean parseIntegerOnly) {
        this.parseIntegerOnly = parseIntegerOnly;
        return this;
    }

    /**
     * Get the percentInstance property: The number format.
     * 
     * @return the percentInstance value.
     */
    @Generated
    public NumberFormat getPercentInstance() {
        return this.percentInstance;
    }

    /**
     * Set the percentInstance property: The number format.
     * 
     * @param percentInstance the percentInstance value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setPercentInstance(NumberFormat percentInstance) {
        this.percentInstance = percentInstance;
        return this;
    }

    /**
     * Get the roundingMode property: The enum of rounding mode.
     * 
     * @return the roundingMode value.
     */
    @Generated
    public RoundingMode getRoundingMode() {
        return this.roundingMode;
    }

    /**
     * Set the roundingMode property: The enum of rounding mode.
     * 
     * @param roundingMode the roundingMode value to set.
     * @return the NumberFormat object itself.
     */
    @Generated
    public NumberFormat setRoundingMode(RoundingMode roundingMode) {
        this.roundingMode = roundingMode;
        return this;
    }
}
