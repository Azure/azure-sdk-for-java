// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Taxonomy setting for search request.
 */
@Fluent
public final class SearchTaxonomySetting implements JsonSerializable<SearchTaxonomySetting> {
    /*
     * Asset types
     */
    @Generated
    private List<String> assetTypes;

    /*
     * The content of a search facet result item.
     */
    @Generated
    private SearchFacetItem facet;

    /**
     * Creates an instance of SearchTaxonomySetting class.
     */
    @Generated
    public SearchTaxonomySetting() {
    }

    /**
     * Get the assetTypes property: Asset types.
     * 
     * @return the assetTypes value.
     */
    @Generated
    public List<String> getAssetTypes() {
        return this.assetTypes;
    }

    /**
     * Set the assetTypes property: Asset types.
     * 
     * @param assetTypes the assetTypes value to set.
     * @return the SearchTaxonomySetting object itself.
     */
    @Generated
    public SearchTaxonomySetting setAssetTypes(List<String> assetTypes) {
        this.assetTypes = assetTypes;
        return this;
    }

    /**
     * Get the facet property: The content of a search facet result item.
     * 
     * @return the facet value.
     */
    @Generated
    public SearchFacetItem getFacet() {
        return this.facet;
    }

    /**
     * Set the facet property: The content of a search facet result item.
     * 
     * @param facet the facet value to set.
     * @return the SearchTaxonomySetting object itself.
     */
    @Generated
    public SearchTaxonomySetting setFacet(SearchFacetItem facet) {
        this.facet = facet;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("assetTypes", this.assetTypes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("facet", this.facet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchTaxonomySetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchTaxonomySetting if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchTaxonomySetting.
     */
    @Generated
    public static SearchTaxonomySetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchTaxonomySetting deserializedSearchTaxonomySetting = new SearchTaxonomySetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assetTypes".equals(fieldName)) {
                    List<String> assetTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedSearchTaxonomySetting.assetTypes = assetTypes;
                } else if ("facet".equals(fieldName)) {
                    deserializedSearchTaxonomySetting.facet = SearchFacetItem.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchTaxonomySetting;
        });
    }
}
