// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * class that captures details of an enum-type.
 */
@Fluent
public final class AtlasEnumDef implements JsonSerializable<AtlasEnumDef> {
    /*
     * The enum of type category.
     */
    @Generated
    private TypeCategory category;

    /*
     * The created time of the record.
     */
    @Generated
    private Long createTime;

    /*
     * The user who created the record.
     */
    @Generated
    private String createdBy;

    /*
     * The date format.
     */
    @Generated
    private DateFormat dateFormatter;

    /*
     * The description of the type definition.
     */
    @Generated
    private String description;

    /*
     * The GUID of the type definition.
     */
    @Generated
    private String guid;

    /*
     * The name of the type definition.
     */
    @Generated
    private String name;

    /*
     * The options for the type definition.
     */
    @Generated
    private Map<String, String> options;

    /*
     * The service type.
     */
    @Generated
    private String serviceType;

    /*
     * The version of the type.
     */
    @Generated
    private String typeVersion;

    /*
     * The update time of the record.
     */
    @Generated
    private Long updateTime;

    /*
     * The user who updated the record.
     */
    @Generated
    private String updatedBy;

    /*
     * The version of the record.
     */
    @Generated
    private Long version;

    /*
     * ETag for concurrency control.
     */
    @Generated
    private String lastModifiedTS;

    /*
     * The default value.
     */
    @Generated
    private String defaultValue;

    /*
     * An array of enum element definitions.
     */
    @Generated
    private List<AtlasEnumElementDef> elementDefs;

    /**
     * Creates an instance of AtlasEnumDef class.
     */
    @Generated
    public AtlasEnumDef() {
    }

    /**
     * Get the category property: The enum of type category.
     * 
     * @return the category value.
     */
    @Generated
    public TypeCategory getCategory() {
        return this.category;
    }

    /**
     * Set the category property: The enum of type category.
     * 
     * @param category the category value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setCategory(TypeCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get the createTime property: The created time of the record.
     * 
     * @return the createTime value.
     */
    @Generated
    public Long getCreateTime() {
        return this.createTime;
    }

    /**
     * Set the createTime property: The created time of the record.
     * 
     * @param createTime the createTime value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setCreateTime(Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get the createdBy property: The user who created the record.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: The user who created the record.
     * 
     * @param createdBy the createdBy value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the dateFormatter property: The date format.
     * 
     * @return the dateFormatter value.
     */
    @Generated
    public DateFormat getDateFormatter() {
        return this.dateFormatter;
    }

    /**
     * Set the dateFormatter property: The date format.
     * 
     * @param dateFormatter the dateFormatter value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setDateFormatter(DateFormat dateFormatter) {
        this.dateFormatter = dateFormatter;
        return this;
    }

    /**
     * Get the description property: The description of the type definition.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the type definition.
     * 
     * @param description the description value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the guid property: The GUID of the type definition.
     * 
     * @return the guid value.
     */
    @Generated
    public String getGuid() {
        return this.guid;
    }

    /**
     * Set the guid property: The GUID of the type definition.
     * 
     * @param guid the guid value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setGuid(String guid) {
        this.guid = guid;
        return this;
    }

    /**
     * Get the name property: The name of the type definition.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the type definition.
     * 
     * @param name the name value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the options property: The options for the type definition.
     * 
     * @return the options value.
     */
    @Generated
    public Map<String, String> getOptions() {
        return this.options;
    }

    /**
     * Set the options property: The options for the type definition.
     * 
     * @param options the options value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setOptions(Map<String, String> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the serviceType property: The service type.
     * 
     * @return the serviceType value.
     */
    @Generated
    public String getServiceType() {
        return this.serviceType;
    }

    /**
     * Set the serviceType property: The service type.
     * 
     * @param serviceType the serviceType value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setServiceType(String serviceType) {
        this.serviceType = serviceType;
        return this;
    }

    /**
     * Get the typeVersion property: The version of the type.
     * 
     * @return the typeVersion value.
     */
    @Generated
    public String getTypeVersion() {
        return this.typeVersion;
    }

    /**
     * Set the typeVersion property: The version of the type.
     * 
     * @param typeVersion the typeVersion value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setTypeVersion(String typeVersion) {
        this.typeVersion = typeVersion;
        return this;
    }

    /**
     * Get the updateTime property: The update time of the record.
     * 
     * @return the updateTime value.
     */
    @Generated
    public Long getUpdateTime() {
        return this.updateTime;
    }

    /**
     * Set the updateTime property: The update time of the record.
     * 
     * @param updateTime the updateTime value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get the updatedBy property: The user who updated the record.
     * 
     * @return the updatedBy value.
     */
    @Generated
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Set the updatedBy property: The user who updated the record.
     * 
     * @param updatedBy the updatedBy value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Get the version property: The version of the record.
     * 
     * @return the version value.
     */
    @Generated
    public Long getVersion() {
        return this.version;
    }

    /**
     * Set the version property: The version of the record.
     * 
     * @param version the version value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setVersion(Long version) {
        this.version = version;
        return this;
    }

    /**
     * Get the lastModifiedTS property: ETag for concurrency control.
     * 
     * @return the lastModifiedTS value.
     */
    @Generated
    public String getLastModifiedTS() {
        return this.lastModifiedTS;
    }

    /**
     * Set the lastModifiedTS property: ETag for concurrency control.
     * 
     * @param lastModifiedTS the lastModifiedTS value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setLastModifiedTS(String lastModifiedTS) {
        this.lastModifiedTS = lastModifiedTS;
        return this;
    }

    /**
     * Get the defaultValue property: The default value.
     * 
     * @return the defaultValue value.
     */
    @Generated
    public String getDefaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: The default value.
     * 
     * @param defaultValue the defaultValue value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Get the elementDefs property: An array of enum element definitions.
     * 
     * @return the elementDefs value.
     */
    @Generated
    public List<AtlasEnumElementDef> getElementDefs() {
        return this.elementDefs;
    }

    /**
     * Set the elementDefs property: An array of enum element definitions.
     * 
     * @param elementDefs the elementDefs value to set.
     * @return the AtlasEnumDef object itself.
     */
    @Generated
    public AtlasEnumDef setElementDefs(List<AtlasEnumElementDef> elementDefs) {
        this.elementDefs = elementDefs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeNumberField("createTime", this.createTime);
        jsonWriter.writeStringField("createdBy", this.createdBy);
        jsonWriter.writeJsonField("dateFormatter", this.dateFormatter);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("guid", this.guid);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("options", this.options, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("serviceType", this.serviceType);
        jsonWriter.writeStringField("typeVersion", this.typeVersion);
        jsonWriter.writeNumberField("updateTime", this.updateTime);
        jsonWriter.writeStringField("updatedBy", this.updatedBy);
        jsonWriter.writeNumberField("version", this.version);
        jsonWriter.writeStringField("lastModifiedTS", this.lastModifiedTS);
        jsonWriter.writeStringField("defaultValue", this.defaultValue);
        jsonWriter.writeArrayField("elementDefs", this.elementDefs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AtlasEnumDef from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AtlasEnumDef if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AtlasEnumDef.
     */
    @Generated
    public static AtlasEnumDef fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AtlasEnumDef deserializedAtlasEnumDef = new AtlasEnumDef();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedAtlasEnumDef.category = TypeCategory.fromString(reader.getString());
                } else if ("createTime".equals(fieldName)) {
                    deserializedAtlasEnumDef.createTime = reader.getNullable(JsonReader::getLong);
                } else if ("createdBy".equals(fieldName)) {
                    deserializedAtlasEnumDef.createdBy = reader.getString();
                } else if ("dateFormatter".equals(fieldName)) {
                    deserializedAtlasEnumDef.dateFormatter = DateFormat.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedAtlasEnumDef.description = reader.getString();
                } else if ("guid".equals(fieldName)) {
                    deserializedAtlasEnumDef.guid = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAtlasEnumDef.name = reader.getString();
                } else if ("options".equals(fieldName)) {
                    Map<String, String> options = reader.readMap(reader1 -> reader1.getString());
                    deserializedAtlasEnumDef.options = options;
                } else if ("serviceType".equals(fieldName)) {
                    deserializedAtlasEnumDef.serviceType = reader.getString();
                } else if ("typeVersion".equals(fieldName)) {
                    deserializedAtlasEnumDef.typeVersion = reader.getString();
                } else if ("updateTime".equals(fieldName)) {
                    deserializedAtlasEnumDef.updateTime = reader.getNullable(JsonReader::getLong);
                } else if ("updatedBy".equals(fieldName)) {
                    deserializedAtlasEnumDef.updatedBy = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedAtlasEnumDef.version = reader.getNullable(JsonReader::getLong);
                } else if ("lastModifiedTS".equals(fieldName)) {
                    deserializedAtlasEnumDef.lastModifiedTS = reader.getString();
                } else if ("defaultValue".equals(fieldName)) {
                    deserializedAtlasEnumDef.defaultValue = reader.getString();
                } else if ("elementDefs".equals(fieldName)) {
                    List<AtlasEnumElementDef> elementDefs
                        = reader.readArray(reader1 -> AtlasEnumElementDef.fromJson(reader1));
                    deserializedAtlasEnumDef.elementDefs = elementDefs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAtlasEnumDef;
        });
    }
}
