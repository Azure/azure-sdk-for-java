// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap;

import com.azure.analytics.purview.datamap.implementation.GlossariesImpl;
import com.azure.analytics.purview.datamap.models.AtlasGlossary;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryCategory;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryExtInfo;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryTerm;
import com.azure.analytics.purview.datamap.models.AtlasRelatedCategoryHeader;
import com.azure.analytics.purview.datamap.models.AtlasRelatedObjectId;
import com.azure.analytics.purview.datamap.models.AtlasRelatedTermHeader;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;
import java.util.Map;

/**
 * Initializes a new instance of the synchronous DataMapClient type.
 */
@ServiceClient(builder = DataMapClientBuilder.class)
public final class GlossaryClient {
    @Generated
    private final GlossariesImpl serviceClient;

    /**
     * Initializes an instance of GlossaryClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    GlossaryClient(GlossariesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get all glossaries. Recommend using limit/offset to get pagination result.
     * Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
     * separately using 'GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms'
     * and 'GET '/datamap/api/atlas/v2/glossary/{glossaryId}/categories'.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * <tr><td>ignoreTermsAndCategories</td><td>Boolean</td><td>No</td><td>Whether ignore terms and categories</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         language: String (Optional)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         usage: String (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all glossaries along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> batchGetWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.batchGetWithResponse(requestOptions);
    }

    /**
     * Create a glossary.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(body, requestOptions);
    }

    /**
     * Create glossary category in bulk.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param body An array of glossary category definitions to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCategoriesWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createCategoriesWithResponse(body, requestOptions);
    }

    /**
     * Create a glossary category.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCategoryWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createCategoryWithResponse(body, requestOptions);
    }

    /**
     * Get specific glossary category by its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return specific glossary category by its GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCategoryWithResponse(String categoryId, RequestOptions requestOptions) {
        return this.serviceClient.getCategoryWithResponse(categoryId, requestOptions);
    }

    /**
     * Update the given glossary category by its GUID.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateCategoryWithResponse(String categoryId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.updateCategoryWithResponse(categoryId, body, requestOptions);
    }

    /**
     * Delete a glossary category.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteCategoryWithResponse(String categoryId, RequestOptions requestOptions) {
        return this.serviceClient.deleteCategoryWithResponse(categoryId, requestOptions);
    }

    /**
     * Update the glossary category partially. So far we only supports partial
     * updating shortDescription and longDescription for category.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     String: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     childrenCategories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     parentCategory (Optional): (recursive schema, see parentCategory above)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values for partial update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary category along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateCategoryWithResponse(String categoryId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.partialUpdateCategoryWithResponse(categoryId, body, requestOptions);
    }

    /**
     * Get all related categories (parent and children). Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     String (Required): [
     *          (Required){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all related categories (parent and children) along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRelatedCategoriesWithResponse(String categoryId, RequestOptions requestOptions) {
        return this.serviceClient.getRelatedCategoriesWithResponse(categoryId, requestOptions);
    }

    /**
     * Get all terms associated with the specific category.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         expression: String (Optional)
     *         relationGuid: String (Optional)
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         steward: String (Optional)
     *         termGuid: String (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all terms associated with the specific category along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCategoryTermsWithResponse(String categoryId, RequestOptions requestOptions) {
        return this.serviceClient.getCategoryTermsWithResponse(categoryId, requestOptions);
    }

    /**
     * Create a glossary term.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>includeTermHierarchy</td><td>Boolean</td><td>No</td><td>Whether include term hierarchy</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTermWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createTermWithResponse(body, requestOptions);
    }

    /**
     * Get a specific glossary term by its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific glossary term by its GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermWithResponse(String termId, RequestOptions requestOptions) {
        return this.serviceClient.getTermWithResponse(termId, requestOptions);
    }

    /**
     * Update the given glossary term by its GUID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>includeTermHierarchy</td><td>Boolean</td><td>No</td><td>Whether include term hierarchy</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateTermWithResponse(String termId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.updateTermWithResponse(termId, body, requestOptions);
    }

    /**
     * Delete a glossary term.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTermWithResponse(String termId, RequestOptions requestOptions) {
        return this.serviceClient.deleteTermWithResponse(termId, requestOptions);
    }

    /**
     * Update the glossary term partially. So far we only supports partial updating
     * shortDescription, longDescription, abbreviation, usage and status for term.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>includeTermHierarchy</td><td>Boolean</td><td>No</td><td>Whether include term hierarchy</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     String: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     abbreviation: String (Optional)
     *     templateName (Optional): [
     *         Object (Optional)
     *     ]
     *     anchor (Optional): {
     *         displayText: String (Optional)
     *         glossaryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     *     antonyms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(Draft/Approved/Alert/Expired) (Optional)
     *     nickName: String (Optional)
     *     hierarchyInfo (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             name: String (Optional)
     *             displayText: String (Optional)
     *             itemPath: String (Optional)
     *             resourceId: String (Optional)
     *             properties (Optional): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     resources (Optional): [
     *          (Optional){
     *             displayName: String (Optional)
     *             url: String (Optional)
     *         }
     *     ]
     *     contacts (Optional): {
     *         String (Required): [
     *              (Required){
     *                 id: String (Optional)
     *                 info: String (Optional)
     *             }
     *         ]
     *     }
     *     attributes (Optional): {
     *         String (Required): {
     *             String: Object (Required)
     *         }
     *     }
     *     assignedEntities (Optional): [
     *          (Optional){
     *             guid: String (Optional)
     *             typeName: String (Optional)
     *             uniqueAttributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             displayText: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             relationshipType: String (Optional)
     *             relationshipAttributes (Optional): {
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *             }
     *             relationshipGuid: String (Optional)
     *             relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *         }
     *     ]
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         }
     *     ]
     *     classifies (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     examples (Optional): [
     *         String (Optional)
     *     ]
     *     isA (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     synonyms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     usage: String (Optional)
     *     validValues (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary term along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateTermWithResponse(String termId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.partialUpdateTermWithResponse(termId, body, requestOptions);
    }

    /**
     * Create glossary terms in bulk.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>includeTermHierarchy</td><td>Boolean</td><td>No</td><td>Whether include term hierarchy</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Required): [
     *                  (Required){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Required): {
     *                 String: Object (Required)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Required): [
     *                  (Required){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Required): {
     *                 String: Object (Required)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param body An array of glossary term definitions to be created in bulk.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTermsWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createTermsWithResponse(body, requestOptions);
    }

    /**
     * List all related objects assigned with the specified term. Recommend using
     * limit/offset to get pagination result.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Required)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntitiesAssignedWithTermWithResponse(String termId, RequestOptions requestOptions) {
        return this.serviceClient.getEntitiesAssignedWithTermWithResponse(termId, requestOptions);
    }

    /**
     * Assign the given term to the provided list of related objects. Recommend using
     * small batches with multiple API calls.
     * 
     * [Entities Create Or Update
     * operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
     * is an alternative to assign a term to multiple entities.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Required)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body An array of related object IDs to which the term has to be associated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> assignTermToEntitiesWithResponse(String termId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.assignTermToEntitiesWithResponse(termId, body, requestOptions);
    }

    /**
     * Delete the term assignment for the given list of related objects.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         typeName: String (Optional)
     *         uniqueAttributes (Optional): {
     *             String: Object (Required)
     *         }
     *         displayText: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         relationshipType: String (Optional)
     *         relationshipAttributes (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *         }
     *         relationshipGuid: String (Optional)
     *         relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body An array of related object IDs from which the term has to be dissociated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTermAssignmentFromEntitiesWithResponse(String termId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteTermAssignmentFromEntitiesWithResponse(termId, body, requestOptions);
    }

    /**
     * Get all related terms for a specific term by its GUID. Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     String (Required): [
     *          (Required){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all related terms for a specific term by its GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRelatedTermsWithResponse(String termId, RequestOptions requestOptions) {
        return this.serviceClient.getRelatedTermsWithResponse(termId, requestOptions);
    }

    /**
     * Get a specific Glossary by its GUID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific Glossary by its GUID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String glossaryId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(glossaryId, requestOptions);
    }

    /**
     * Update the given glossary.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreTermsAndCategories</td><td>Boolean</td><td>No</td><td>Whether ignore terms and categories</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateWithResponse(String glossaryId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponse(glossaryId, body, requestOptions);
    }

    /**
     * Delete a glossary. Will delete underlying terms/categories together. Recommend
     * separate delete terms and categories.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String glossaryId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(glossaryId, requestOptions);
    }

    /**
     * Get the categories belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         childrenCategories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 parentCategoryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *         ]
     *         parentCategory (Optional): (recursive schema, see parentCategory above)
     *         terms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the categories belonging to a specific glossary along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCategoriesWithResponse(String glossaryId, RequestOptions requestOptions) {
        return this.serviceClient.getCategoriesWithResponse(glossaryId, requestOptions);
    }

    /**
     * Get the category headers belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         categoryGuid: String (Optional)
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         parentCategoryGuid: String (Optional)
     *         relationGuid: String (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the category headers belonging to a specific glossary along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCategoriesHeadersWithResponse(String glossaryId, RequestOptions requestOptions) {
        return this.serviceClient.getCategoriesHeadersWithResponse(glossaryId, requestOptions);
    }

    /**
     * Get a specific glossary with detailed information. This API is not
     * recommend.
     * 
     * Recommend to fetch terms/categories details separately using
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms and
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryId}/categories.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     *     categoryInfo (Optional): {
     *         String (Required): {
     *             guid: String (Optional)
     *             classifications (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             shortDescription: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             anchor (Optional): {
     *                 displayText: String (Optional)
     *                 glossaryGuid: String (Optional)
     *                 relationGuid: String (Optional)
     *             }
     *             childrenCategories (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             parentCategory (Optional): (recursive schema, see parentCategory above)
     *             terms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     termInfo (Optional): {
     *         String (Required): {
     *             guid: String (Optional)
     *             classifications (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String (Optional)
     *             name: String (Optional)
     *             qualifiedName: String (Optional)
     *             shortDescription: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             createTime: Long (Optional)
     *             createdBy: String (Optional)
     *             updateTime: Long (Optional)
     *             updatedBy: String (Optional)
     *             abbreviation: String (Optional)
     *             templateName (Optional): [
     *                 Object (Optional)
     *             ]
     *             anchor (Optional): (recursive schema, see anchor above)
     *             antonyms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             status: String(Draft/Approved/Alert/Expired) (Optional)
     *             nickName: String (Optional)
     *             hierarchyInfo (Optional): [
     *                  (Optional){
     *                     guid: String (Optional)
     *                     typeName: String (Optional)
     *                     uniqueAttributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     name: String (Optional)
     *                     displayText: String (Optional)
     *                     itemPath: String (Optional)
     *                     resourceId: String (Optional)
     *                     properties (Optional): {
     *                         String: Object (Required)
     *                     }
     *                 }
     *             ]
     *             resources (Optional): [
     *                  (Optional){
     *                     displayName: String (Optional)
     *                     url: String (Optional)
     *                 }
     *             ]
     *             contacts (Optional): {
     *                 String (Required): [
     *                      (Required){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *             attributes (Optional): {
     *                 String (Required): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             assignedEntities (Optional): [
     *                  (Optional){
     *                     guid: String (Optional)
     *                     typeName: String (Optional)
     *                     uniqueAttributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     displayText: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     relationshipType: String (Optional)
     *                     relationshipAttributes (Optional): {
     *                         attributes (Optional): {
     *                             String: Object (Required)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                     }
     *                     relationshipGuid: String (Optional)
     *                     relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *                 }
     *             ]
     *             categories (Optional): [
     *                  (Optional){
     *                     categoryGuid: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     relationGuid: String (Optional)
     *                     status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 }
     *             ]
     *             classifies (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             examples (Optional): [
     *                 String (Optional)
     *             ]
     *             isA (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             preferredTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             preferredToTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             replacedBy (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             replacementTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             seeAlso (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             synonyms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             translatedTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             translationTerms (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             usage: String (Optional)
     *             validValues (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             validValuesFor (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specific glossary with detailed information along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDetailedWithResponse(String glossaryId, RequestOptions requestOptions) {
        return this.serviceClient.getDetailedWithResponse(glossaryId, requestOptions);
    }

    /**
     * Update the glossary partially. Some properties such as qualifiedName are not
     * allowed to be updated.
     * 
     * So far we only supports partial updating
     * shortDescription, longDescription, language and usage for glossary.
     * 
     * Recommend
     * using 'ignoreTermsAndCategories=true' to reduce response body size.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>ignoreTermsAndCategories</td><td>Boolean</td><td>No</td><td>Whether ignore terms and categories</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     String: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     guid: String (Optional)
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Required)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     longDescription: String (Optional)
     *     name: String (Optional)
     *     qualifiedName: String (Optional)
     *     shortDescription: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     createTime: Long (Optional)
     *     createdBy: String (Optional)
     *     updateTime: Long (Optional)
     *     updatedBy: String (Optional)
     *     categories (Optional): [
     *          (Optional){
     *             categoryGuid: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             parentCategoryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *     ]
     *     language: String (Optional)
     *     terms (Optional): [
     *          (Optional){
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     usage: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the glossary object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateWithResponse(String glossaryId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.partialUpdateWithResponse(glossaryId, body, requestOptions);
    }

    /**
     * Get terms belonging to a specific glossary. Recommend using limit/offset to get
     * pagination result.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         guid: String (Optional)
     *         classifications (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 entityGuid: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 removePropagationsOnEntityDelete: Boolean (Optional)
     *                 validityPeriods (Optional): [
     *                      (Optional){
     *                         endTime: String (Optional)
     *                         startTime: String (Optional)
     *                         timeZone: String (Optional)
     *                     }
     *                 ]
     *             }
     *         ]
     *         longDescription: String (Optional)
     *         name: String (Optional)
     *         qualifiedName: String (Optional)
     *         shortDescription: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         createTime: Long (Optional)
     *         createdBy: String (Optional)
     *         updateTime: Long (Optional)
     *         updatedBy: String (Optional)
     *         abbreviation: String (Optional)
     *         templateName (Optional): [
     *             Object (Optional)
     *         ]
     *         anchor (Optional): {
     *             displayText: String (Optional)
     *             glossaryGuid: String (Optional)
     *             relationGuid: String (Optional)
     *         }
     *         antonyms (Optional): [
     *              (Optional){
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 expression: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                 steward: String (Optional)
     *                 termGuid: String (Optional)
     *             }
     *         ]
     *         status: String(Draft/Approved/Alert/Expired) (Optional)
     *         nickName: String (Optional)
     *         hierarchyInfo (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 name: String (Optional)
     *                 displayText: String (Optional)
     *                 itemPath: String (Optional)
     *                 resourceId: String (Optional)
     *                 properties (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *         ]
     *         resources (Optional): [
     *              (Optional){
     *                 displayName: String (Optional)
     *                 url: String (Optional)
     *             }
     *         ]
     *         contacts (Optional): {
     *             String (Required): [
     *                  (Required){
     *                     id: String (Optional)
     *                     info: String (Optional)
     *                 }
     *             ]
     *         }
     *         attributes (Optional): {
     *             String (Required): {
     *                 String: Object (Required)
     *             }
     *         }
     *         assignedEntities (Optional): [
     *              (Optional){
     *                 guid: String (Optional)
     *                 typeName: String (Optional)
     *                 uniqueAttributes (Optional): {
     *                     String: Object (Required)
     *                 }
     *                 displayText: String (Optional)
     *                 entityStatus: String(ACTIVE/DELETED) (Optional)
     *                 relationshipType: String (Optional)
     *                 relationshipAttributes (Optional): {
     *                     attributes (Optional): {
     *                         String: Object (Required)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                 }
     *                 relationshipGuid: String (Optional)
     *                 relationshipStatus: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *         categories (Optional): [
     *              (Optional){
     *                 categoryGuid: String (Optional)
     *                 description: String (Optional)
     *                 displayText: String (Optional)
     *                 relationGuid: String (Optional)
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             }
     *         ]
     *         classifies (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         examples (Optional): [
     *             String (Optional)
     *         ]
     *         isA (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         synonyms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         usage: String (Optional)
     *         validValues (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return terms belonging to a specific glossary along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermsWithResponse(String glossaryId, RequestOptions requestOptions) {
        return this.serviceClient.getTermsWithResponse(glossaryId, requestOptions);
    }

    /**
     * Get term headers belonging to a specific glossary. Recommend using limit/offset
     * to get pagination result.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>limit</td><td>Integer</td><td>No</td><td>The page size - by default there is no paging.</td></tr>
     * <tr><td>offset</td><td>Integer</td><td>No</td><td>The offset for pagination purpose.</td></tr>
     * <tr><td>sort</td><td>String</td><td>No</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         description: String (Optional)
     *         displayText: String (Optional)
     *         expression: String (Optional)
     *         relationGuid: String (Optional)
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *         steward: String (Optional)
     *         termGuid: String (Optional)
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return term headers belonging to a specific glossary along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTermHeadersWithResponse(String glossaryId, RequestOptions requestOptions) {
        return this.serviceClient.getTermHeadersWithResponse(glossaryId, requestOptions);
    }

    /**
     * Get all glossaries. Recommend using limit/offset to get pagination result.
     * Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
     * separately using 'GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms'
     * and 'GET '/datamap/api/atlas/v2/glossary/{glossaryId}/categories'.
     * 
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @param ignoreTermsAndCategories Whether ignore terms and categories.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all glossaries.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossary> batchGet(Integer limit, Integer offset, String sort, Boolean ignoreTermsAndCategories) {
        // Generated convenience method for batchGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        if (ignoreTermsAndCategories != null) {
            requestOptions.addQueryParam("ignoreTermsAndCategories", String.valueOf(ignoreTermsAndCategories), false);
        }
        return batchGetWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY);
    }

    /**
     * Get all glossaries. Recommend using limit/offset to get pagination result.
     * Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
     * separately using 'GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms'
     * and 'GET '/datamap/api/atlas/v2/glossary/{glossaryId}/categories'.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all glossaries.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossary> batchGet() {
        // Generated convenience method for batchGetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return batchGetWithResponse(requestOptions).getValue().toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY);
    }

    /**
     * Create a glossary.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary object.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossary create(AtlasGlossary body) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createWithResponse(BinaryData.fromObject(body), requestOptions).getValue().toObject(AtlasGlossary.class);
    }

    /**
     * Create glossary category in bulk.
     * 
     * @param body An array of glossary category definitions to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossaryCategory> createCategories(List<AtlasGlossaryCategory> body) {
        // Generated convenience method for createCategoriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCategoriesWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_CATEGORY);
    }

    /**
     * Create a glossary category.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary category.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryCategory createCategory(AtlasGlossaryCategory body) {
        // Generated convenience method for createCategoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCategoryWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryCategory.class);
    }

    /**
     * Get specific glossary category by its GUID.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specific glossary category by its GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryCategory getCategory(String categoryId) {
        // Generated convenience method for getCategoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCategoryWithResponse(categoryId, requestOptions).getValue().toObject(AtlasGlossaryCategory.class);
    }

    /**
     * Update the given glossary category by its GUID.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary category.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryCategory updateCategory(String categoryId, AtlasGlossaryCategory body) {
        // Generated convenience method for updateCategoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateCategoryWithResponse(categoryId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryCategory.class);
    }

    /**
     * Delete a glossary category.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCategory(String categoryId) {
        // Generated convenience method for deleteCategoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteCategoryWithResponse(categoryId, requestOptions).getValue();
    }

    /**
     * Update the glossary category partially. So far we only supports partial
     * updating shortDescription and longDescription for category.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values for partial update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary category.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryCategory partialUpdateCategory(String categoryId, Map<String, String> body) {
        // Generated convenience method for partialUpdateCategoryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return partialUpdateCategoryWithResponse(categoryId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryCategory.class);
    }

    /**
     * Get all related categories (parent and children). Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all related categories (parent and children).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Map<String, List<AtlasRelatedCategoryHeader>> getRelatedCategories(String categoryId, Integer limit,
        Integer offset, String sort) {
        // Generated convenience method for getRelatedCategoriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getRelatedCategoriesWithResponse(categoryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_MAP_STRING_LIST_ATLAS_RELATED_CATEGORY_HEADER);
    }

    /**
     * Get all related categories (parent and children). Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all related categories (parent and children).
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Map<String, List<AtlasRelatedCategoryHeader>> getRelatedCategories(String categoryId) {
        // Generated convenience method for getRelatedCategoriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRelatedCategoriesWithResponse(categoryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_MAP_STRING_LIST_ATLAS_RELATED_CATEGORY_HEADER);
    }

    /**
     * Get all terms associated with the specific category.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all terms associated with the specific category.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedTermHeader> getCategoryTerms(String categoryId, Integer limit, Integer offset,
        String sort) {
        // Generated convenience method for getCategoryTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getCategoryTermsWithResponse(categoryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_TERM_HEADER);
    }

    /**
     * Get all terms associated with the specific category.
     * 
     * @param categoryId The globally unique identifier of the category.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all terms associated with the specific category.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedTermHeader> getCategoryTerms(String categoryId) {
        // Generated convenience method for getCategoryTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCategoryTermsWithResponse(categoryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_TERM_HEADER);
    }

    /**
     * Create a glossary term.
     * 
     * @param body Body parameter.
     * @param includeTermHierarchy Whether include term hierarchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary term.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryTerm createTerm(AtlasGlossaryTerm body, Boolean includeTermHierarchy) {
        // Generated convenience method for createTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (includeTermHierarchy != null) {
            requestOptions.addQueryParam("includeTermHierarchy", String.valueOf(includeTermHierarchy), false);
        }
        return createTermWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryTerm.class);
    }

    /**
     * Create a glossary term.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary term.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryTerm createTerm(AtlasGlossaryTerm body) {
        // Generated convenience method for createTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createTermWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryTerm.class);
    }

    /**
     * Get a specific glossary term by its GUID.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific glossary term by its GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryTerm getTerm(String termId) {
        // Generated convenience method for getTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTermWithResponse(termId, requestOptions).getValue().toObject(AtlasGlossaryTerm.class);
    }

    /**
     * Update the given glossary term by its GUID.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body Body parameter.
     * @param includeTermHierarchy Whether include term hierarchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary term.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryTerm updateTerm(String termId, AtlasGlossaryTerm body, Boolean includeTermHierarchy) {
        // Generated convenience method for updateTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (includeTermHierarchy != null) {
            requestOptions.addQueryParam("includeTermHierarchy", String.valueOf(includeTermHierarchy), false);
        }
        return updateTermWithResponse(termId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryTerm.class);
    }

    /**
     * Update the given glossary term by its GUID.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary term.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryTerm updateTerm(String termId, AtlasGlossaryTerm body) {
        // Generated convenience method for updateTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateTermWithResponse(termId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryTerm.class);
    }

    /**
     * Delete a glossary term.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTerm(String termId) {
        // Generated convenience method for deleteTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTermWithResponse(termId, requestOptions).getValue();
    }

    /**
     * Update the glossary term partially. So far we only supports partial updating
     * shortDescription, longDescription, abbreviation, usage and status for term.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values to be updated.
     * @param includeTermHierarchy Whether include term hierarchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary term.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryTerm partialUpdateTerm(String termId, Map<String, String> body, Boolean includeTermHierarchy) {
        // Generated convenience method for partialUpdateTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (includeTermHierarchy != null) {
            requestOptions.addQueryParam("includeTermHierarchy", String.valueOf(includeTermHierarchy), false);
        }
        return partialUpdateTermWithResponse(termId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryTerm.class);
    }

    /**
     * Update the glossary term partially. So far we only supports partial updating
     * shortDescription, longDescription, abbreviation, usage and status for term.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary term.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryTerm partialUpdateTerm(String termId, Map<String, String> body) {
        // Generated convenience method for partialUpdateTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return partialUpdateTermWithResponse(termId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossaryTerm.class);
    }

    /**
     * Create glossary terms in bulk.
     * 
     * @param body An array of glossary term definitions to be created in bulk.
     * @param includeTermHierarchy Whether include term hierarchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossaryTerm> createTerms(List<AtlasGlossaryTerm> body, Boolean includeTermHierarchy) {
        // Generated convenience method for createTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (includeTermHierarchy != null) {
            requestOptions.addQueryParam("includeTermHierarchy", String.valueOf(includeTermHierarchy), false);
        }
        return createTermsWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_TERM);
    }

    /**
     * Create glossary terms in bulk.
     * 
     * @param body An array of glossary term definitions to be created in bulk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossaryTerm> createTerms(List<AtlasGlossaryTerm> body) {
        // Generated convenience method for createTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createTermsWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_TERM);
    }

    /**
     * List all related objects assigned with the specified term. Recommend using
     * limit/offset to get pagination result.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedObjectId> getEntitiesAssignedWithTerm(String termId, Integer limit, Integer offset,
        String sort) {
        // Generated convenience method for getEntitiesAssignedWithTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getEntitiesAssignedWithTermWithResponse(termId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_OBJECT_ID);
    }

    /**
     * List all related objects assigned with the specified term. Recommend using
     * limit/offset to get pagination result.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedObjectId> getEntitiesAssignedWithTerm(String termId) {
        // Generated convenience method for getEntitiesAssignedWithTermWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEntitiesAssignedWithTermWithResponse(termId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_OBJECT_ID);
    }

    /**
     * Assign the given term to the provided list of related objects. Recommend using
     * small batches with multiple API calls.
     * 
     * [Entities Create Or Update
     * operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
     * is an alternative to assign a term to multiple entities.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body An array of related object IDs to which the term has to be associated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void assignTermToEntities(String termId, List<AtlasRelatedObjectId> body) {
        // Generated convenience method for assignTermToEntitiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        assignTermToEntitiesWithResponse(termId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Delete the term assignment for the given list of related objects.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param body An array of related object IDs from which the term has to be dissociated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTermAssignmentFromEntities(String termId, List<AtlasRelatedObjectId> body) {
        // Generated convenience method for deleteTermAssignmentFromEntitiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTermAssignmentFromEntitiesWithResponse(termId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Get all related terms for a specific term by its GUID. Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all related terms for a specific term by its GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Map<String, List<AtlasRelatedTermHeader>> getRelatedTerms(String termId, Integer limit, Integer offset,
        String sort) {
        // Generated convenience method for getRelatedTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getRelatedTermsWithResponse(termId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_MAP_STRING_LIST_ATLAS_RELATED_TERM_HEADER);
    }

    /**
     * Get all related terms for a specific term by its GUID. Limit, offset, and sort
     * parameters are currently not being enabled and won't work even they are passed.
     * 
     * @param termId The globally unique identifier for glossary term.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all related terms for a specific term by its GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Map<String, List<AtlasRelatedTermHeader>> getRelatedTerms(String termId) {
        // Generated convenience method for getRelatedTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRelatedTermsWithResponse(termId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_MAP_STRING_LIST_ATLAS_RELATED_TERM_HEADER);
    }

    /**
     * Get a specific Glossary by its GUID.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific Glossary by its GUID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossary get(String glossaryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(glossaryId, requestOptions).getValue().toObject(AtlasGlossary.class);
    }

    /**
     * Update the given glossary.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param body Body parameter.
     * @param ignoreTermsAndCategories Whether ignore terms and categories.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary object.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossary update(String glossaryId, AtlasGlossary body, Boolean ignoreTermsAndCategories) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (ignoreTermsAndCategories != null) {
            requestOptions.addQueryParam("ignoreTermsAndCategories", String.valueOf(ignoreTermsAndCategories), false);
        }
        return updateWithResponse(glossaryId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossary.class);
    }

    /**
     * Update the given glossary.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary object.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossary update(String glossaryId, AtlasGlossary body) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return updateWithResponse(glossaryId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossary.class);
    }

    /**
     * Delete a glossary. Will delete underlying terms/categories together. Recommend
     * separate delete terms and categories.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String glossaryId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(glossaryId, requestOptions).getValue();
    }

    /**
     * Get the categories belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the categories belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossaryCategory> getCategories(String glossaryId, Integer limit, Integer offset, String sort) {
        // Generated convenience method for getCategoriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getCategoriesWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_CATEGORY);
    }

    /**
     * Get the categories belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the categories belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossaryCategory> getCategories(String glossaryId) {
        // Generated convenience method for getCategoriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCategoriesWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_CATEGORY);
    }

    /**
     * Get the category headers belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the category headers belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedCategoryHeader> getCategoriesHeaders(String glossaryId, Integer limit, Integer offset,
        String sort) {
        // Generated convenience method for getCategoriesHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getCategoriesHeadersWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_CATEGORY_HEADER);
    }

    /**
     * Get the category headers belonging to a specific glossary. Recommend using
     * limit/offset to get pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the category headers belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedCategoryHeader> getCategoriesHeaders(String glossaryId) {
        // Generated convenience method for getCategoriesHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCategoriesHeadersWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_CATEGORY_HEADER);
    }

    /**
     * Get a specific glossary with detailed information. This API is not
     * recommend.
     * 
     * Recommend to fetch terms/categories details separately using
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms and
     * 
     * GET /datamap/api/atlas/v2/glossary/{glossaryId}/categories.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific glossary with detailed information.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossaryExtInfo getDetailed(String glossaryId) {
        // Generated convenience method for getDetailedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDetailedWithResponse(glossaryId, requestOptions).getValue().toObject(AtlasGlossaryExtInfo.class);
    }

    /**
     * Update the glossary partially. Some properties such as qualifiedName are not
     * allowed to be updated.
     * 
     * So far we only supports partial updating
     * shortDescription, longDescription, language and usage for glossary.
     * 
     * Recommend
     * using 'ignoreTermsAndCategories=true' to reduce response body size.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values.
     * @param ignoreTermsAndCategories Whether ignore terms and categories.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary object.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossary partialUpdate(String glossaryId, Map<String, String> body, Boolean ignoreTermsAndCategories) {
        // Generated convenience method for partialUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (ignoreTermsAndCategories != null) {
            requestOptions.addQueryParam("ignoreTermsAndCategories", String.valueOf(ignoreTermsAndCategories), false);
        }
        return partialUpdateWithResponse(glossaryId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossary.class);
    }

    /**
     * Update the glossary partially. Some properties such as qualifiedName are not
     * allowed to be updated.
     * 
     * So far we only supports partial updating
     * shortDescription, longDescription, language and usage for glossary.
     * 
     * Recommend
     * using 'ignoreTermsAndCategories=true' to reduce response body size.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param body A map containing keys as attribute names and values as corresponding attribute
     * values.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the glossary object.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AtlasGlossary partialUpdate(String glossaryId, Map<String, String> body) {
        // Generated convenience method for partialUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return partialUpdateWithResponse(glossaryId, BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(AtlasGlossary.class);
    }

    /**
     * Get terms belonging to a specific glossary. Recommend using limit/offset to get
     * pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return terms belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossaryTerm> getTerms(String glossaryId, Integer limit, Integer offset, String sort) {
        // Generated convenience method for getTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getTermsWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_TERM);
    }

    /**
     * Get terms belonging to a specific glossary. Recommend using limit/offset to get
     * pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return terms belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasGlossaryTerm> getTerms(String glossaryId) {
        // Generated convenience method for getTermsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTermsWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_TERM);
    }

    /**
     * Get term headers belonging to a specific glossary. Recommend using limit/offset
     * to get pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @param limit The page size - by default there is no paging.
     * @param offset The offset for pagination purpose.
     * @param sort The sort order, ASC (default) or DESC.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return term headers belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedTermHeader> getTermHeaders(String glossaryId, Integer limit, Integer offset, String sort) {
        // Generated convenience method for getTermHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit), false);
        }
        if (offset != null) {
            requestOptions.addQueryParam("offset", String.valueOf(offset), false);
        }
        if (sort != null) {
            requestOptions.addQueryParam("sort", sort, false);
        }
        return getTermHeadersWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_TERM_HEADER);
    }

    /**
     * Get term headers belonging to a specific glossary. Recommend using limit/offset
     * to get pagination result.
     * 
     * @param glossaryId The globally unique identifier for glossary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return term headers belonging to a specific glossary.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<AtlasRelatedTermHeader> getTermHeaders(String glossaryId) {
        // Generated convenience method for getTermHeadersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTermHeadersWithResponse(glossaryId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_ATLAS_RELATED_TERM_HEADER);
    }

    @Generated
    private static final TypeReference<List<AtlasGlossary>> TYPE_REFERENCE_LIST_ATLAS_GLOSSARY
        = new TypeReference<List<AtlasGlossary>>() {
        };

    @Generated
    private static final TypeReference<List<AtlasRelatedTermHeader>> TYPE_REFERENCE_LIST_ATLAS_RELATED_TERM_HEADER
        = new TypeReference<List<AtlasRelatedTermHeader>>() {
        };

    @Generated
    private static final TypeReference<List<AtlasGlossaryTerm>> TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_TERM
        = new TypeReference<List<AtlasGlossaryTerm>>() {
        };

    @Generated
    private static final TypeReference<Map<String, List<AtlasRelatedCategoryHeader>>> TYPE_REFERENCE_MAP_STRING_LIST_ATLAS_RELATED_CATEGORY_HEADER
        = new TypeReference<Map<String, List<AtlasRelatedCategoryHeader>>>() {
        };

    @Generated
    private static final TypeReference<List<AtlasRelatedObjectId>> TYPE_REFERENCE_LIST_ATLAS_RELATED_OBJECT_ID
        = new TypeReference<List<AtlasRelatedObjectId>>() {
        };

    @Generated
    private static final TypeReference<List<AtlasGlossaryCategory>> TYPE_REFERENCE_LIST_ATLAS_GLOSSARY_CATEGORY
        = new TypeReference<List<AtlasGlossaryCategory>>() {
        };

    @Generated
    private static final TypeReference<Map<String, List<AtlasRelatedTermHeader>>> TYPE_REFERENCE_MAP_STRING_LIST_ATLAS_RELATED_TERM_HEADER
        = new TypeReference<Map<String, List<AtlasRelatedTermHeader>>>() {
        };

    @Generated
    private static final TypeReference<List<AtlasRelatedCategoryHeader>> TYPE_REFERENCE_LIST_ATLAS_RELATED_CATEGORY_HEADER
        = new TypeReference<List<AtlasRelatedCategoryHeader>>() {
        };
}
