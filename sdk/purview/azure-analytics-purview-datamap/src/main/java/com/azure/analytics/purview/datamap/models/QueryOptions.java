// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The search query of advanced search request.
 */
@Fluent
public final class QueryOptions implements JsonSerializable<QueryOptions> {
    /*
     * The keywords applied to all searchable fields.
     */
    @Generated
    private String keywords;

    /*
     * The limit of the number of the search result. default value is 50; maximum
     * value is 1000.
     */
    @Generated
    private Integer limit;

    /*
     * The token used to get next batch of data. Default 'Null' to get the first
     * batch, and will return new token in each response unless there's no more data.
     */
    @Generated
    private String continuationToken;

    /*
     * The sort order of search results, can specify multiple fields.
     */
    @Generated
    private List<Object> orderby;

    /*
     * The filter for the search. See examples for the usage of supported filters.
     */
    @Generated
    private Object filter;

    /*
     * The facets for search. See examples for the usage of supported facets.
     */
    @Generated
    private List<SearchFacetItem> facets;

    /*
     * The taxonomy setting for search.
     */
    @Generated
    private SearchTaxonomySetting taxonomySetting;

    /**
     * Creates an instance of QueryOptions class.
     */
    @Generated
    public QueryOptions() {
    }

    /**
     * Get the keywords property: The keywords applied to all searchable fields.
     * 
     * @return the keywords value.
     */
    @Generated
    public String getKeywords() {
        return this.keywords;
    }

    /**
     * Set the keywords property: The keywords applied to all searchable fields.
     * 
     * @param keywords the keywords value to set.
     * @return the QueryOptions object itself.
     */
    @Generated
    public QueryOptions setKeywords(String keywords) {
        this.keywords = keywords;
        return this;
    }

    /**
     * Get the limit property: The limit of the number of the search result. default value is 50; maximum
     * value is 1000.
     * 
     * @return the limit value.
     */
    @Generated
    public Integer getLimit() {
        return this.limit;
    }

    /**
     * Set the limit property: The limit of the number of the search result. default value is 50; maximum
     * value is 1000.
     * 
     * @param limit the limit value to set.
     * @return the QueryOptions object itself.
     */
    @Generated
    public QueryOptions setLimit(Integer limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the continuationToken property: The token used to get next batch of data. Default 'Null' to get the first
     * batch, and will return new token in each response unless there's no more data.
     * 
     * @return the continuationToken value.
     */
    @Generated
    public String getContinuationToken() {
        return this.continuationToken;
    }

    /**
     * Set the continuationToken property: The token used to get next batch of data. Default 'Null' to get the first
     * batch, and will return new token in each response unless there's no more data.
     * 
     * @param continuationToken the continuationToken value to set.
     * @return the QueryOptions object itself.
     */
    @Generated
    public QueryOptions setContinuationToken(String continuationToken) {
        this.continuationToken = continuationToken;
        return this;
    }

    /**
     * Get the orderby property: The sort order of search results, can specify multiple fields.
     * 
     * @return the orderby value.
     */
    @Generated
    public List<Object> getOrderby() {
        return this.orderby;
    }

    /**
     * Set the orderby property: The sort order of search results, can specify multiple fields.
     * 
     * @param orderby the orderby value to set.
     * @return the QueryOptions object itself.
     */
    @Generated
    public QueryOptions setOrderby(List<Object> orderby) {
        this.orderby = orderby;
        return this;
    }

    /**
     * Get the filter property: The filter for the search. See examples for the usage of supported filters.
     * 
     * @return the filter value.
     */
    @Generated
    public Object getFilter() {
        return this.filter;
    }

    /**
     * Set the filter property: The filter for the search. See examples for the usage of supported filters.
     * 
     * @param filter the filter value to set.
     * @return the QueryOptions object itself.
     */
    @Generated
    public QueryOptions setFilter(Object filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the facets property: The facets for search. See examples for the usage of supported facets.
     * 
     * @return the facets value.
     */
    @Generated
    public List<SearchFacetItem> getFacets() {
        return this.facets;
    }

    /**
     * Set the facets property: The facets for search. See examples for the usage of supported facets.
     * 
     * @param facets the facets value to set.
     * @return the QueryOptions object itself.
     */
    @Generated
    public QueryOptions setFacets(List<SearchFacetItem> facets) {
        this.facets = facets;
        return this;
    }

    /**
     * Get the taxonomySetting property: The taxonomy setting for search.
     * 
     * @return the taxonomySetting value.
     */
    @Generated
    public SearchTaxonomySetting getTaxonomySetting() {
        return this.taxonomySetting;
    }

    /**
     * Set the taxonomySetting property: The taxonomy setting for search.
     * 
     * @param taxonomySetting the taxonomySetting value to set.
     * @return the QueryOptions object itself.
     */
    @Generated
    public QueryOptions setTaxonomySetting(SearchTaxonomySetting taxonomySetting) {
        this.taxonomySetting = taxonomySetting;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keywords", this.keywords);
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeStringField("continuationToken", this.continuationToken);
        jsonWriter.writeArrayField("orderby", this.orderby, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeUntypedField("filter", this.filter);
        jsonWriter.writeArrayField("facets", this.facets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("taxonomySetting", this.taxonomySetting);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryOptions.
     */
    @Generated
    public static QueryOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryOptions deserializedQueryOptions = new QueryOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keywords".equals(fieldName)) {
                    deserializedQueryOptions.keywords = reader.getString();
                } else if ("limit".equals(fieldName)) {
                    deserializedQueryOptions.limit = reader.getNullable(JsonReader::getInt);
                } else if ("continuationToken".equals(fieldName)) {
                    deserializedQueryOptions.continuationToken = reader.getString();
                } else if ("orderby".equals(fieldName)) {
                    List<Object> orderby = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedQueryOptions.orderby = orderby;
                } else if ("filter".equals(fieldName)) {
                    deserializedQueryOptions.filter = reader.readUntyped();
                } else if ("facets".equals(fieldName)) {
                    List<SearchFacetItem> facets = reader.readArray(reader1 -> SearchFacetItem.fromJson(reader1));
                    deserializedQueryOptions.facets = facets;
                } else if ("taxonomySetting".equals(fieldName)) {
                    deserializedQueryOptions.taxonomySetting = SearchTaxonomySetting.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryOptions;
        });
    }
}
