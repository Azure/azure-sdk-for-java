// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap;

import com.azure.analytics.purview.datamap.implementation.PurviewDataMapClientImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.client.traits.TokenCredentialTrait;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the PurviewDataMapClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        EntityClient.class,
        GlossaryClient.class,
        DiscoveryClient.class,
        LineageClient.class,
        RelationshipClient.class,
        TypeClient.class,
        EntityAsyncClient.class,
        GlossaryAsyncClient.class,
        DiscoveryAsyncClient.class,
        LineageAsyncClient.class,
        RelationshipAsyncClient.class,
        TypeAsyncClient.class })
public final class PurviewDataMapClientBuilder
    implements HttpTrait<PurviewDataMapClientBuilder>, ConfigurationTrait<PurviewDataMapClientBuilder>,
    TokenCredentialTrait<PurviewDataMapClientBuilder>, EndpointTrait<PurviewDataMapClientBuilder> {
    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final String[] DEFAULT_SCOPES = new String[] { "https://purview.azure.net/.default" };

    @Generated
    private static final Map<String, String> PROPERTIES
        = CoreUtils.getProperties("azure-analytics-purview-datamap.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the PurviewDataMapClientBuilder.
     */
    @Generated
    public PurviewDataMapClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.info("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The TokenCredential used for authentication.
     */
    @Generated
    private TokenCredential tokenCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder credential(TokenCredential tokenCredential) {
        this.tokenCredential = tokenCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public PurviewDataMapClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    @Generated
    private PurviewDataMapServiceVersion serviceVersion;

    /**
     * Sets Service version.
     * 
     * @param serviceVersion the serviceVersion value.
     * @return the PurviewDataMapClientBuilder.
     */
    @Generated
    public PurviewDataMapClientBuilder serviceVersion(PurviewDataMapServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     * 
     * @param retryPolicy the retryPolicy value.
     * @return the PurviewDataMapClientBuilder.
     */
    @Generated
    public PurviewDataMapClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of PurviewDataMapClientImpl with the provided parameters.
     * 
     * @return an instance of PurviewDataMapClientImpl.
     */
    @Generated
    private PurviewDataMapClientImpl buildInnerClient() {
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        PurviewDataMapServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : PurviewDataMapServiceVersion.getLatest();
        PurviewDataMapClientImpl client = new PurviewDataMapClientImpl(localPipeline,
            JacksonAdapter.createDefaultSerializerAdapter(), this.endpoint, localServiceVersion);
        return client;
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = new HttpHeaders();
        localClientOptions.getHeaders()
            .forEach(header -> headers.set(HttpHeaderName.fromString(header.getName()), header.getValue()));
        if (headers.getSize() > 0) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        if (tokenCredential != null) {
            policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, DEFAULT_SCOPES));
        }
        this.pipelinePolicies.stream().filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient).clientOptions(localClientOptions).build();
        return httpPipeline;
    }

    /**
     * Builds an instance of EntityAsyncClient class.
     * 
     * @return an instance of EntityAsyncClient.
     */
    @Generated
    public EntityAsyncClient buildEntityAsyncClient() {
        return new EntityAsyncClient(buildInnerClient().getEntities());
    }

    /**
     * Builds an instance of GlossaryAsyncClient class.
     * 
     * @return an instance of GlossaryAsyncClient.
     */
    @Generated
    public GlossaryAsyncClient buildGlossaryAsyncClient() {
        return new GlossaryAsyncClient(buildInnerClient().getGlossaries());
    }

    /**
     * Builds an instance of DiscoveryAsyncClient class.
     * 
     * @return an instance of DiscoveryAsyncClient.
     */
    @Generated
    public DiscoveryAsyncClient buildDiscoveryAsyncClient() {
        return new DiscoveryAsyncClient(buildInnerClient().getDiscoveries());
    }

    /**
     * Builds an instance of LineageAsyncClient class.
     * 
     * @return an instance of LineageAsyncClient.
     */
    @Generated
    public LineageAsyncClient buildLineageAsyncClient() {
        return new LineageAsyncClient(buildInnerClient().getLineages());
    }

    /**
     * Builds an instance of RelationshipAsyncClient class.
     * 
     * @return an instance of RelationshipAsyncClient.
     */
    @Generated
    public RelationshipAsyncClient buildRelationshipAsyncClient() {
        return new RelationshipAsyncClient(buildInnerClient().getRelationships());
    }

    /**
     * Builds an instance of TypeAsyncClient class.
     * 
     * @return an instance of TypeAsyncClient.
     */
    @Generated
    public TypeAsyncClient buildTypeAsyncClient() {
        return new TypeAsyncClient(buildInnerClient().getTypes());
    }

    /**
     * Builds an instance of EntityClient class.
     * 
     * @return an instance of EntityClient.
     */
    @Generated
    public EntityClient buildEntityClient() {
        return new EntityClient(buildInnerClient().getEntities());
    }

    /**
     * Builds an instance of GlossaryClient class.
     * 
     * @return an instance of GlossaryClient.
     */
    @Generated
    public GlossaryClient buildGlossaryClient() {
        return new GlossaryClient(buildInnerClient().getGlossaries());
    }

    /**
     * Builds an instance of DiscoveryClient class.
     * 
     * @return an instance of DiscoveryClient.
     */
    @Generated
    public DiscoveryClient buildDiscoveryClient() {
        return new DiscoveryClient(buildInnerClient().getDiscoveries());
    }

    /**
     * Builds an instance of LineageClient class.
     * 
     * @return an instance of LineageClient.
     */
    @Generated
    public LineageClient buildLineageClient() {
        return new LineageClient(buildInnerClient().getLineages());
    }

    /**
     * Builds an instance of RelationshipClient class.
     * 
     * @return an instance of RelationshipClient.
     */
    @Generated
    public RelationshipClient buildRelationshipClient() {
        return new RelationshipClient(buildInnerClient().getRelationships());
    }

    /**
     * Builds an instance of TypeClient class.
     * 
     * @return an instance of TypeClient.
     */
    @Generated
    public TypeClient buildTypeClient() {
        return new TypeClient(buildInnerClient().getTypes());
    }

    private static final ClientLogger LOGGER = new ClientLogger(PurviewDataMapClientBuilder.class);
}
