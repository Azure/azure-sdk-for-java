// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The timezone information.
 */
@Fluent
public final class TimeZone implements JsonSerializable<TimeZone> {
    /*
     * The value of the daylight saving time.
     */
    @Generated
    private Integer dstSavings;

    /*
     * The ID of the timezone.
     */
    @Generated
    private String id;

    /*
     * An array of available IDs.
     */
    @Generated
    private List<String> availableIds;

    /*
     * The timezone information.
     */
    @Generated
    private TimeZone defaultProperty;

    /*
     * The display name of the timezone.
     */
    @Generated
    private String displayName;

    /*
     * The raw offset of the timezone.
     */
    @Generated
    private Integer rawOffset;

    /**
     * Creates an instance of TimeZone class.
     */
    @Generated
    public TimeZone() {
    }

    /**
     * Get the dstSavings property: The value of the daylight saving time.
     * 
     * @return the dstSavings value.
     */
    @Generated
    public Integer getDstSavings() {
        return this.dstSavings;
    }

    /**
     * Set the dstSavings property: The value of the daylight saving time.
     * 
     * @param dstSavings the dstSavings value to set.
     * @return the TimeZone object itself.
     */
    @Generated
    public TimeZone setDstSavings(Integer dstSavings) {
        this.dstSavings = dstSavings;
        return this;
    }

    /**
     * Get the id property: The ID of the timezone.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the timezone.
     * 
     * @param id the id value to set.
     * @return the TimeZone object itself.
     */
    @Generated
    public TimeZone setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the availableIds property: An array of available IDs.
     * 
     * @return the availableIds value.
     */
    @Generated
    public List<String> getAvailableIds() {
        return this.availableIds;
    }

    /**
     * Set the availableIds property: An array of available IDs.
     * 
     * @param availableIds the availableIds value to set.
     * @return the TimeZone object itself.
     */
    @Generated
    public TimeZone setAvailableIds(List<String> availableIds) {
        this.availableIds = availableIds;
        return this;
    }

    /**
     * Get the defaultProperty property: The timezone information.
     * 
     * @return the defaultProperty value.
     */
    @Generated
    public TimeZone getDefaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Set the defaultProperty property: The timezone information.
     * 
     * @param defaultProperty the defaultProperty value to set.
     * @return the TimeZone object itself.
     */
    @Generated
    public TimeZone setDefaultProperty(TimeZone defaultProperty) {
        this.defaultProperty = defaultProperty;
        return this;
    }

    /**
     * Get the displayName property: The display name of the timezone.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the timezone.
     * 
     * @param displayName the displayName value to set.
     * @return the TimeZone object itself.
     */
    @Generated
    public TimeZone setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the rawOffset property: The raw offset of the timezone.
     * 
     * @return the rawOffset value.
     */
    @Generated
    public Integer getRawOffset() {
        return this.rawOffset;
    }

    /**
     * Set the rawOffset property: The raw offset of the timezone.
     * 
     * @param rawOffset the rawOffset value to set.
     * @return the TimeZone object itself.
     */
    @Generated
    public TimeZone setRawOffset(Integer rawOffset) {
        this.rawOffset = rawOffset;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("dstSavings", this.dstSavings);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("availableIds", this.availableIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("default", this.defaultProperty);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeNumberField("rawOffset", this.rawOffset);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeZone from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeZone if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the TimeZone.
     */
    @Generated
    public static TimeZone fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeZone deserializedTimeZone = new TimeZone();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dstSavings".equals(fieldName)) {
                    deserializedTimeZone.dstSavings = reader.getNullable(JsonReader::getInt);
                } else if ("id".equals(fieldName)) {
                    deserializedTimeZone.id = reader.getString();
                } else if ("availableIds".equals(fieldName)) {
                    List<String> availableIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedTimeZone.availableIds = availableIds;
                } else if ("default".equals(fieldName)) {
                    deserializedTimeZone.defaultProperty = TimeZone.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    deserializedTimeZone.displayName = reader.getString();
                } else if ("rawOffset".equals(fieldName)) {
                    deserializedTimeZone.rawOffset = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimeZone;
        });
    }
}
