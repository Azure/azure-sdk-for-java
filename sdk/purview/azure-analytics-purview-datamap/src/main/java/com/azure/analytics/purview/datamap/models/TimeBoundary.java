// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Captures time-boundary details.
 */
@Fluent
public final class TimeBoundary implements JsonSerializable<TimeBoundary> {
    /*
     * The end of the time boundary.
     */
    @Generated
    private String endTime;

    /*
     * The start of the time boundary.
     */
    @Generated
    private String startTime;

    /*
     * The timezone of the time boundary.
     */
    @Generated
    private String timeZone;

    /**
     * Creates an instance of TimeBoundary class.
     */
    @Generated
    public TimeBoundary() {
    }

    /**
     * Get the endTime property: The end of the time boundary.
     * 
     * @return the endTime value.
     */
    @Generated
    public String getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end of the time boundary.
     * 
     * @param endTime the endTime value to set.
     * @return the TimeBoundary object itself.
     */
    @Generated
    public TimeBoundary setEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the startTime property: The start of the time boundary.
     * 
     * @return the startTime value.
     */
    @Generated
    public String getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start of the time boundary.
     * 
     * @param startTime the startTime value to set.
     * @return the TimeBoundary object itself.
     */
    @Generated
    public TimeBoundary setStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the timeZone property: The timezone of the time boundary.
     * 
     * @return the timeZone value.
     */
    @Generated
    public String getTimeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: The timezone of the time boundary.
     * 
     * @param timeZone the timeZone value to set.
     * @return the TimeBoundary object itself.
     */
    @Generated
    public TimeBoundary setTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endTime", this.endTime);
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeBoundary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeBoundary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeBoundary.
     */
    @Generated
    public static TimeBoundary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeBoundary deserializedTimeBoundary = new TimeBoundary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endTime".equals(fieldName)) {
                    deserializedTimeBoundary.endTime = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedTimeBoundary.startTime = reader.getString();
                } else if ("timeZone".equals(fieldName)) {
                    deserializedTimeBoundary.timeZone = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimeBoundary;
        });
    }
}
