// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.AtlasGlossaryCategory;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryHeader;
import com.azure.analytics.purview.datamap.models.AtlasRelatedCategoryHeader;
import com.azure.analytics.purview.datamap.models.AtlasRelatedTermHeader;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GlossaryPartialUpdateCategoryTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testGlossaryPartialUpdateCategoryTests() {
        // method invocation
        AtlasGlossaryCategory response = glossaryClient.partialUpdateCategory("3243ea0a-9492-47e1-392e-a84e64980af9",
            mapOf("longDescription", "Example Long Description"));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "guid"
        Assertions.assertEquals("ed7458f0-9463-48a5-b5c6-4f785fb34e12", response.getGuid());
        // verify property "longDescription"
        Assertions.assertEquals("Example Long Description", response.getLongDescription());
        // verify property "name"
        Assertions.assertEquals("ExampleCategory1", response.getName());
        // verify property "qualifiedName"
        Assertions.assertEquals("ExampleCategory1.ExampleCategory2@Glossary", response.getQualifiedName());
        // verify property "lastModifiedTS"
        Assertions.assertEquals("3", response.getLastModifiedTS());
        // verify property "anchor"
        AtlasGlossaryHeader responseAnchor = response.getAnchor();
        Assertions.assertNotNull(responseAnchor);
        Assertions.assertEquals("c018ddaf-7c21-4b37-a838-dae5f110c3d8", responseAnchor.getGlossaryGuid());
        Assertions.assertEquals("7bdcef93-a57a-4d1d-95ab-9d3036f394a0", responseAnchor.getRelationGuid());
        // verify property "childrenCategories"
        List<AtlasRelatedCategoryHeader> responseChildrenCategories = response.getChildrenCategories();
        AtlasRelatedCategoryHeader responseChildrenCategoriesFirstItem = responseChildrenCategories.iterator().next();
        Assertions.assertNotNull(responseChildrenCategoriesFirstItem);
        Assertions.assertEquals("0d6766f6-f4b6-435b-bda2-d3edc358998e",
            responseChildrenCategoriesFirstItem.getCategoryGuid());
        Assertions.assertEquals("ExampleCategory3", responseChildrenCategoriesFirstItem.getDisplayText());
        Assertions.assertEquals("ed7458f0-9463-48a5-b5c6-4f785fb34e12",
            responseChildrenCategoriesFirstItem.getParentCategoryGuid());
        Assertions.assertEquals("e50be8c5-7905-4c92-b676-4278866c2c2f",
            responseChildrenCategoriesFirstItem.getRelationGuid());
        // verify property "parentCategory"
        AtlasRelatedCategoryHeader responseParentCategory = response.getParentCategory();
        Assertions.assertNotNull(responseParentCategory);
        Assertions.assertEquals("e47c4584-daca-4f9e-9092-194e04692c9a", responseParentCategory.getCategoryGuid());
        Assertions.assertEquals("82d569cd-2273-4ef9-9f67-c6f2ed637c20", responseParentCategory.getRelationGuid());
        // verify property "terms"
        List<AtlasRelatedTermHeader> responseTerms = response.getTerms();
        AtlasRelatedTermHeader responseTermsFirstItem = responseTerms.iterator().next();
        Assertions.assertNotNull(responseTermsFirstItem);
        Assertions.assertEquals("ExampleTerm1", responseTermsFirstItem.getDisplayText());
        Assertions.assertEquals("6aebf5ac-0c83-40c0-98bf-958fe9c99007", responseTermsFirstItem.getRelationGuid());
        Assertions.assertEquals("54688d39-b298-4104-9e80-f2a16f44aaea", responseTermsFirstItem.getTermGuid());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
