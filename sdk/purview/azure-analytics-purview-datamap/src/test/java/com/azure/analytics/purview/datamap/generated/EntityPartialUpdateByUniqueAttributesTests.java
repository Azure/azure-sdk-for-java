// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.AtlasEntity;
import com.azure.analytics.purview.datamap.models.AtlasEntityHeader;
import com.azure.analytics.purview.datamap.models.AtlasEntityWithExtInfo;
import com.azure.analytics.purview.datamap.models.EntityMutationResult;
import com.azure.analytics.purview.datamap.models.EntityStatus;
import com.azure.core.util.BinaryData;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class EntityPartialUpdateByUniqueAttributesTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testEntityPartialUpdateByUniqueAttributesTests() {
        // method invocation
        EntityMutationResult response
            = entityClient
                .updateByUniqueAttribute("azure_storage_account",
                    new AtlasEntityWithExtInfo().setReferredEntities(mapOf())
                        .setEntity(new AtlasEntity()
                            .setAttributes(mapOf("owner",
                                BinaryData.fromBytes("ExampleOwner".getBytes(StandardCharsets.UTF_8)), "qualifiedName",
                                BinaryData.fromBytes(
                                    "https://exampleaccount.core.windows.net".getBytes(StandardCharsets.UTF_8)),
                                "createTime", BinaryData.fromBytes("0".getBytes(StandardCharsets.UTF_8)), "name",
                                BinaryData.fromBytes("ExampleNewName".getBytes(StandardCharsets.UTF_8))))
                            .setTypeName("azure_storage_account")
                            .setLastModifiedTS("1")
                            .setCreateTime(1605766397985L)
                            .setCreatedBy("8c062c84-5d25-449f-a990-9d8ab70b8ec7")
                            .setGuid("dc507ccf-0c57-4165-9327-f37b0d13fda0")
                            .setRelationshipAttributes(
                                mapOf("services", BinaryData.fromBytes("[]".getBytes(StandardCharsets.UTF_8)),
                                    "meanings", BinaryData.fromBytes("[]".getBytes(StandardCharsets.UTF_8))))
                            .setStatus(EntityStatus.ACTIVE)
                            .setUpdateTime(1605766397985L)
                            .setUpdatedBy("8c062c84-5d25-449f-a990-9d8ab70b8ec7")
                            .setVersion(0L)),
                    "https://exampleaccount.core.windows.net");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "guidAssignments"
        Assertions.assertNotNull(response.getGuidAssignments());
        // verify property "mutatedEntities"
        Assertions.assertNotNull(response.getMutatedEntities());
        // verify property "partialUpdatedEntities"
        List<AtlasEntityHeader> responsePartialUpdatedEntities = response.getPartialUpdatedEntities();
        AtlasEntityHeader responsePartialUpdatedEntitiesFirstItem = responsePartialUpdatedEntities.iterator().next();
        Assertions.assertNotNull(responsePartialUpdatedEntitiesFirstItem);
        Assertions.assertNotNull(responsePartialUpdatedEntitiesFirstItem.getAttributes());
        Assertions.assertEquals("azure_storage_account", responsePartialUpdatedEntitiesFirstItem.getTypeName());
        Assertions.assertEquals("2", responsePartialUpdatedEntitiesFirstItem.getLastModifiedTS());
        Assertions.assertEquals("dc507ccf-0c57-4165-9327-f37b0d13fda0",
            responsePartialUpdatedEntitiesFirstItem.getGuid());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
