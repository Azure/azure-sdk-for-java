// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.AtlasEntity;
import com.azure.analytics.purview.datamap.models.AtlasEntityWithExtInfo;
import com.azure.analytics.purview.datamap.models.EntityMutationResult;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class EntityAddCustomAttributeTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testEntityAddCustomAttributeTests() throws IOException {
        // method invocation
        EntityMutationResult response
            = entityClient
                .createOrUpdate(
                    new AtlasEntityWithExtInfo().setReferredEntities(mapOf())
                        .setEntity(
                            new AtlasEntity()
                                .setAttributes(mapOf("owner", "ExampleOwner", "modifiedTime", 0, "createTime", 0,
                                    "qualifiedName", "https://exampleaccount.core.windows.net", "name",
                                    "ExampleStorageAccount", "description",
                                    JacksonAdapter.createDefaultSerializerAdapter()
                                        .deserialize("null", Object.class, SerializerEncoding.JSON),
                                    "publicAccessLevel",
                                    JacksonAdapter.createDefaultSerializerAdapter()
                                        .deserialize("null", Object.class, SerializerEncoding.JSON)))
                                .setTypeName("azure_storage_account")
                                .setCustomAttributes(mapOf("custAttr1", "attr1", "custAttr2", "attr2"))),
                    null, null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "guidAssignments"
        Assertions.assertNotNull(response.getGuidAssignments());
        // verify property "mutatedEntities"
        Assertions.assertNotNull(response.getMutatedEntities());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
