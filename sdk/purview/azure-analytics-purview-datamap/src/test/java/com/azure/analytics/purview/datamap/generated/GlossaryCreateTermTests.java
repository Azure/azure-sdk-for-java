// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.AtlasGlossaryHeader;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryTerm;
import com.azure.analytics.purview.datamap.models.ContactInfo;
import com.azure.analytics.purview.datamap.models.ResourceLink;
import com.azure.analytics.purview.datamap.models.TermStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GlossaryCreateTermTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testGlossaryCreateTermTests() {
        // method invocation
        AtlasGlossaryTerm response = glossaryClient.createTerm(new AtlasGlossaryTerm()
            .setLongDescription("Example Long Description")
            .setName("ExampleTerm1")
            .setShortDescription("Example Short Description")
            .setAbbreviation("T1")
            .setAnchor(new AtlasGlossaryHeader().setGlossaryGuid("c018ddaf-7c21-4b37-a838-dae5f110c3d8"))
            .setStatus(TermStatus.APPROVED)
            .setResources(
                Arrays.asList(new ResourceLink().setDisplayName("Example Display Name").setUrl("Example Url")))
            .setContacts(mapOf("Expert",
                Arrays.asList(
                    new ContactInfo().setId("30435ff9-9b96-44af-a5a9-e05c8b1ae2df").setInfo("Example Expert Info")),
                "Steward",
                Arrays.asList(
                    new ContactInfo().setId("30435ff9-9b96-44af-a5a9-e05c8b1ae2df").setInfo("Example Steward info")))),
            null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "guid"
        Assertions.assertEquals("54688d39-b298-4104-9e80-f2a16f44aaea", response.getGuid());
        // verify property "longDescription"
        Assertions.assertEquals("Example Long Description", response.getLongDescription());
        // verify property "name"
        Assertions.assertEquals("ExampleTerm1", response.getName());
        // verify property "qualifiedName"
        Assertions.assertEquals("ExampleTerm1@Glossary", response.getQualifiedName());
        // verify property "shortDescription"
        Assertions.assertEquals("Example Short Description", response.getShortDescription());
        // verify property "createTime"
        Assertions.assertEquals(1606287247276L, response.getCreateTime());
        // verify property "createdBy"
        Assertions.assertEquals("23863cef-a2e9-40a3-a427-44dc0d201f61", response.getCreatedBy());
        // verify property "updateTime"
        Assertions.assertEquals(1606287247276L, response.getUpdateTime());
        // verify property "updatedBy"
        Assertions.assertEquals("23863cef-a2e9-40a3-a427-44dc0d201f61", response.getUpdatedBy());
        // verify property "abbreviation"
        Assertions.assertEquals("T1", response.getAbbreviation());
        // verify property "anchor"
        AtlasGlossaryHeader responseAnchor = response.getAnchor();
        Assertions.assertNotNull(responseAnchor);
        Assertions.assertEquals("c018ddaf-7c21-4b37-a838-dae5f110c3d8", responseAnchor.getGlossaryGuid());
        Assertions.assertEquals("7b6a8149-a928-476a-a068-dce58653cfa0", responseAnchor.getRelationGuid());
        // verify property "status"
        Assertions.assertEquals(TermStatus.APPROVED, response.getStatus());
        // verify property "resources"
        List<ResourceLink> responseResources = response.getResources();
        ResourceLink responseResourcesFirstItem = responseResources.iterator().next();
        Assertions.assertNotNull(responseResourcesFirstItem);
        Assertions.assertEquals("Example Display Name", responseResourcesFirstItem.getDisplayName());
        Assertions.assertEquals("Example Url", responseResourcesFirstItem.getUrl());
        // verify property "contacts"
        Assertions.assertNotNull(response.getContacts());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
