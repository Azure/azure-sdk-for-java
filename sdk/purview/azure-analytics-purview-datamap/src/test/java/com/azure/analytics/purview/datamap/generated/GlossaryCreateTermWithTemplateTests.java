// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.AtlasGlossaryHeader;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryTerm;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GlossaryCreateTermWithTemplateTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testGlossaryCreateTermWithTemplateTests() throws IOException {
        // method invocation
        AtlasGlossaryTerm response = glossaryClient.createTerm(new AtlasGlossaryTerm().setName("ExampleTerm")
            .setAnchor(new AtlasGlossaryHeader().setGlossaryGuid("c018ddaf-7c21-4b37-a838-dae5f110c3d8"))
            .setAttributes(mapOf("ExampleTermTemplateAttribute",
                mapOf("plain string", "Example String", "date", 1606233600000L, "single choice",
                    "Example Single Choice A", "multi choice",
                    JacksonAdapter.createDefaultSerializerAdapter()
                        .deserialize("[\"Example Multi Choice A\",\"Example Multi Choice B\"]", Object.class,
                            SerializerEncoding.JSON)))),
            null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "guid"
        Assertions.assertEquals("9390cc82-1077-403e-a4d2-b6a69834707b", response.getGuid());
        // verify property "name"
        Assertions.assertEquals("ExampleTerm", response.getName());
        // verify property "qualifiedName"
        Assertions.assertEquals("ExampleTerm@Glossary", response.getQualifiedName());
        // verify property "lastModifiedTS"
        Assertions.assertEquals("1", response.getLastModifiedTS());
        // verify property "createTime"
        Assertions.assertEquals(1606287247276L, response.getCreateTime());
        // verify property "createdBy"
        Assertions.assertEquals("23863cef-a2e9-40a3-a427-44dc0d201f61", response.getCreatedBy());
        // verify property "updateTime"
        Assertions.assertEquals(1606287247276L, response.getUpdateTime());
        // verify property "updatedBy"
        Assertions.assertEquals("23863cef-a2e9-40a3-a427-44dc0d201f61", response.getUpdatedBy());
        // verify property "anchor"
        AtlasGlossaryHeader responseAnchor = response.getAnchor();
        Assertions.assertNotNull(responseAnchor);
        Assertions.assertEquals("c018ddaf-7c21-4b37-a838-dae5f110c3d8", responseAnchor.getGlossaryGuid());
        Assertions.assertEquals("7b6a8149-a928-476a-a068-dce58653cfa0", responseAnchor.getRelationGuid());
        // verify property "attributes"
        Assertions.assertNotNull(response.getAttributes());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
