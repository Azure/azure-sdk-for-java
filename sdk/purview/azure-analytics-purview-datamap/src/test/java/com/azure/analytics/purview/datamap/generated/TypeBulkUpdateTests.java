// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.AtlasAttributeDef;
import com.azure.analytics.purview.datamap.models.AtlasClassificationDef;
import com.azure.analytics.purview.datamap.models.AtlasConstraintDef;
import com.azure.analytics.purview.datamap.models.AtlasEntityDef;
import com.azure.analytics.purview.datamap.models.AtlasEnumDef;
import com.azure.analytics.purview.datamap.models.AtlasRelationshipDef;
import com.azure.analytics.purview.datamap.models.AtlasRelationshipEndDef;
import com.azure.analytics.purview.datamap.models.AtlasStructDef;
import com.azure.analytics.purview.datamap.models.AtlasTypesDef;
import com.azure.analytics.purview.datamap.models.CardinalityValue;
import com.azure.analytics.purview.datamap.models.RelationshipCategory;
import com.azure.analytics.purview.datamap.models.TypeCategory;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class TypeBulkUpdateTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testTypeBulkUpdateTests() {
        // method invocation
        AtlasTypesDef response = typeDefinitionClient.batchUpdate(new AtlasTypesDef()
            .setClassificationDefs(Arrays.asList())
            .setEntityDefs(Arrays.asList(
                new AtlasEntityDef().setName("azure_sql_server")
                    .setTypeVersion("1.0")
                    .setAttributeDefs(Arrays.asList(new AtlasAttributeDef().setCardinality(CardinalityValue.SET)
                        .setIsIndexable(false)
                        .setIsOptional(true)
                        .setIsUnique(false)
                        .setName("databases")
                        .setTypeName("array<azure_sql_db>")))
                    .setSuperTypes(Arrays.asList("azure_resource")),
                new AtlasEntityDef().setName("azure_sql_db")
                    .setTypeVersion("1.0")
                    .setAttributeDefs(Arrays.asList(new AtlasAttributeDef().setCardinality(CardinalityValue.SINGLE)
                        .setConstraints(Arrays.asList(
                            new AtlasConstraintDef().setParams(mapOf("attribute", "databases")).setType("inverseRef")))
                        .setIsIndexable(false)
                        .setIsOptional(false)
                        .setIsUnique(false)
                        .setName("server")
                        .setTypeName("azure_sql_server"),
                        new AtlasAttributeDef().setCardinality(CardinalityValue.SET)
                            .setIsIndexable(false)
                            .setIsOptional(true)
                            .setIsUnique(false)
                            .setName("schemas")
                            .setTypeName("array<azure_sql_schema>"),
                        new AtlasAttributeDef().setCardinality(CardinalityValue.SINGLE)
                            .setIsIndexable(false)
                            .setIsOptional(true)
                            .setIsUnique(false)
                            .setName("collation")
                            .setTypeName("string"),
                        new AtlasAttributeDef().setCardinality(CardinalityValue.SINGLE)
                            .setIsIndexable(false)
                            .setIsOptional(true)
                            .setIsUnique(false)
                            .setName("compatibilityLevel")
                            .setTypeName("int")))
                    .setSuperTypes(Arrays.asList("azure_resource"))))
            .setEnumDefs(Arrays.asList())
            .setRelationshipDefs(Arrays.asList(
                new AtlasRelationshipDef().setName("azure_sql_server_databases")
                    .setTypeVersion("1.0")
                    .setEndDef1(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SET)
                        .setIsContainer(true)
                        .setIsLegacyAttribute(true)
                        .setName("databases")
                        .setType("azure_sql_server"))
                    .setEndDef2(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SINGLE)
                        .setIsContainer(false)
                        .setIsLegacyAttribute(true)
                        .setName("server")
                        .setType("azure_sql_db"))
                    .setRelationshipCategory(RelationshipCategory.COMPOSITION),
                new AtlasRelationshipDef().setName("azure_sql_db_schemas")
                    .setTypeVersion("1.0")
                    .setEndDef1(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SET)
                        .setIsContainer(true)
                        .setIsLegacyAttribute(true)
                        .setName("schemas")
                        .setType("azure_sql_db"))
                    .setEndDef2(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SINGLE)
                        .setIsContainer(false)
                        .setIsLegacyAttribute(true)
                        .setName("db")
                        .setType("azure_sql_schema"))
                    .setRelationshipCategory(RelationshipCategory.COMPOSITION)))
            .setStructDefs(Arrays.asList()));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "classificationDefs"
        List<AtlasClassificationDef> responseClassificationDefs = response.getClassificationDefs();
        Assertions.assertEquals(0, responseClassificationDefs.size());
        // verify property "entityDefs"
        List<AtlasEntityDef> responseEntityDefs = response.getEntityDefs();
        AtlasEntityDef responseEntityDefsFirstItem = responseEntityDefs.iterator().next();
        Assertions.assertNotNull(responseEntityDefsFirstItem);
        Assertions.assertEquals(TypeCategory.ENTITY, responseEntityDefsFirstItem.getCategory());
        Assertions.assertEquals(1548841689501L, responseEntityDefsFirstItem.getCreateTime());
        Assertions.assertEquals("ExampleCreator", responseEntityDefsFirstItem.getCreatedBy());
        Assertions.assertEquals("azure_sql_server", responseEntityDefsFirstItem.getDescription());
        Assertions.assertEquals("a59fe369-2b1d-4bba-bb74-c273f3d74eb1", responseEntityDefsFirstItem.getGuid());
        Assertions.assertEquals("azure_sql_server", responseEntityDefsFirstItem.getName());
        Assertions.assertEquals("1.0", responseEntityDefsFirstItem.getTypeVersion());
        Assertions.assertEquals(1553671448662L, responseEntityDefsFirstItem.getUpdateTime());
        Assertions.assertEquals("ExampleUpdator", responseEntityDefsFirstItem.getUpdatedBy());
        Assertions.assertEquals(3L, responseEntityDefsFirstItem.getVersion());
        List<AtlasAttributeDef> responseEntityDefsFirstItemAttributeDefs
            = responseEntityDefsFirstItem.getAttributeDefs();
        AtlasAttributeDef responseEntityDefsFirstItemAttributeDefsFirstItem
            = responseEntityDefsFirstItemAttributeDefs.iterator().next();
        Assertions.assertNotNull(responseEntityDefsFirstItemAttributeDefsFirstItem);
        Assertions.assertEquals(CardinalityValue.SET,
            responseEntityDefsFirstItemAttributeDefsFirstItem.getCardinality());
        Assertions.assertEquals(false, responseEntityDefsFirstItemAttributeDefsFirstItem.isIncludeInNotification());
        Assertions.assertEquals(false, responseEntityDefsFirstItemAttributeDefsFirstItem.isIndexable());
        Assertions.assertEquals(true, responseEntityDefsFirstItemAttributeDefsFirstItem.isOptional());
        Assertions.assertEquals(false, responseEntityDefsFirstItemAttributeDefsFirstItem.isUnique());
        Assertions.assertEquals("databases", responseEntityDefsFirstItemAttributeDefsFirstItem.getName());
        Assertions.assertEquals("array<azure_sql_db>", responseEntityDefsFirstItemAttributeDefsFirstItem.getTypeName());
        Assertions.assertEquals(2147483647, responseEntityDefsFirstItemAttributeDefsFirstItem.getValuesMaxCount());
        Assertions.assertEquals(0, responseEntityDefsFirstItemAttributeDefsFirstItem.getValuesMinCount());
        List<String> responseEntityDefsFirstItemSubTypes = responseEntityDefsFirstItem.getSubTypes();
        Assertions.assertEquals(0, responseEntityDefsFirstItemSubTypes.size());
        List<String> responseEntityDefsFirstItemSuperTypes = responseEntityDefsFirstItem.getSuperTypes();
        Assertions.assertEquals("azure_resource", responseEntityDefsFirstItemSuperTypes.iterator().next());
        // verify property "enumDefs"
        List<AtlasEnumDef> responseEnumDefs = response.getEnumDefs();
        Assertions.assertEquals(0, responseEnumDefs.size());
        // verify property "relationshipDefs"
        List<AtlasRelationshipDef> responseRelationshipDefs = response.getRelationshipDefs();
        AtlasRelationshipDef responseRelationshipDefsFirstItem = responseRelationshipDefs.iterator().next();
        Assertions.assertNotNull(responseRelationshipDefsFirstItem);
        Assertions.assertEquals(TypeCategory.RELATIONSHIP, responseRelationshipDefsFirstItem.getCategory());
        Assertions.assertEquals(1548841689879L, responseRelationshipDefsFirstItem.getCreateTime());
        Assertions.assertEquals("ExampleCreator", responseRelationshipDefsFirstItem.getCreatedBy());
        Assertions.assertEquals("azure_sql_server_databases", responseRelationshipDefsFirstItem.getDescription());
        Assertions.assertEquals("1e0584a8-2587-4e1d-a772-db1e879469af", responseRelationshipDefsFirstItem.getGuid());
        Assertions.assertEquals("azure_sql_server_databases", responseRelationshipDefsFirstItem.getName());
        Assertions.assertEquals("1.0", responseRelationshipDefsFirstItem.getTypeVersion());
        Assertions.assertEquals(1553671449536L, responseRelationshipDefsFirstItem.getUpdateTime());
        Assertions.assertEquals("ExampleUpdator", responseRelationshipDefsFirstItem.getUpdatedBy());
        Assertions.assertEquals(3L, responseRelationshipDefsFirstItem.getVersion());
        List<AtlasAttributeDef> responseRelationshipDefsFirstItemAttributeDefs
            = responseRelationshipDefsFirstItem.getAttributeDefs();
        Assertions.assertEquals(0, responseRelationshipDefsFirstItemAttributeDefs.size());
        AtlasRelationshipEndDef responseRelationshipDefsFirstItemEndDef1
            = responseRelationshipDefsFirstItem.getEndDef1();
        Assertions.assertNotNull(responseRelationshipDefsFirstItemEndDef1);
        Assertions.assertEquals(CardinalityValue.SET, responseRelationshipDefsFirstItemEndDef1.getCardinality());
        Assertions.assertEquals(true, responseRelationshipDefsFirstItemEndDef1.isContainer());
        Assertions.assertEquals(true, responseRelationshipDefsFirstItemEndDef1.isLegacyAttribute());
        Assertions.assertEquals("databases", responseRelationshipDefsFirstItemEndDef1.getName());
        Assertions.assertEquals("azure_sql_server", responseRelationshipDefsFirstItemEndDef1.getType());
        AtlasRelationshipEndDef responseRelationshipDefsFirstItemEndDef2
            = responseRelationshipDefsFirstItem.getEndDef2();
        Assertions.assertNotNull(responseRelationshipDefsFirstItemEndDef2);
        Assertions.assertEquals(CardinalityValue.SINGLE, responseRelationshipDefsFirstItemEndDef2.getCardinality());
        Assertions.assertEquals(false, responseRelationshipDefsFirstItemEndDef2.isContainer());
        Assertions.assertEquals(true, responseRelationshipDefsFirstItemEndDef2.isLegacyAttribute());
        Assertions.assertEquals("server", responseRelationshipDefsFirstItemEndDef2.getName());
        Assertions.assertEquals("azure_sql_db", responseRelationshipDefsFirstItemEndDef2.getType());
        Assertions.assertEquals(RelationshipCategory.COMPOSITION,
            responseRelationshipDefsFirstItem.getRelationshipCategory());
        Assertions.assertEquals("r:azure_sql_server_databases",
            responseRelationshipDefsFirstItem.getRelationshipLabel());
        // verify property "structDefs"
        List<AtlasStructDef> responseStructDefs = response.getStructDefs();
        Assertions.assertEquals(0, responseStructDefs.size());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
