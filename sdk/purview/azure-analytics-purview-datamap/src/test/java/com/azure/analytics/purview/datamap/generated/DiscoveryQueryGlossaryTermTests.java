// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.QueryOptions;
import com.azure.analytics.purview.datamap.models.QueryResult;
import com.azure.analytics.purview.datamap.models.SearchFacetItem;
import com.azure.analytics.purview.datamap.models.SearchFacetItemValue;
import com.azure.analytics.purview.datamap.models.SearchFacetResultValue;
import com.azure.analytics.purview.datamap.models.SearchFacetSort;
import com.azure.analytics.purview.datamap.models.SearchResultValue;
import com.azure.analytics.purview.datamap.models.SearchSortOrder;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class DiscoveryQueryGlossaryTermTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testDiscoveryQueryGlossaryTermTests() throws IOException {
        // method invocation
        QueryResult response = discoveryClient.query(new QueryOptions().setKeywords("fakeTokenPlaceholder")
            .setLimit(10)
            .setFilter(JacksonAdapter.createDefaultSerializerAdapter()
                .deserialize(
                    "{\"and\":[{\"objectType\":\"Glossary terms\"},{\"or\":[{\"glossaryType\":\"AtlasGlossary\"},{\"glossaryType\":\"AtlasGlossaryTerm\"}]}]}",
                    Object.class, SerializerEncoding.JSON))
            .setFacets(Arrays.asList(
                new SearchFacetItem().setCount(10)
                    .setFacet("termStatus")
                    .setSort(new SearchFacetSort().setCount(SearchSortOrder.DESCEND)),
                new SearchFacetItem().setCount(10)
                    .setFacet("termTemplate")
                    .setSort(new SearchFacetSort().setCount(SearchSortOrder.DESCEND)))));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "searchCount"
        Assertions.assertEquals(2, response.getSearchCount());
        // verify property "searchCountApproximate"
        Assertions.assertEquals(false, response.isSearchCountApproximate());
        // verify property "searchFacets"
        SearchFacetResultValue responseSearchFacets = response.getSearchFacets();
        Assertions.assertNotNull(responseSearchFacets);
        List<SearchFacetItemValue> responseSearchFacetsTermStatus = responseSearchFacets.getTermStatus();
        SearchFacetItemValue responseSearchFacetsTermStatusFirstItem = responseSearchFacetsTermStatus.iterator().next();
        Assertions.assertNotNull(responseSearchFacetsTermStatusFirstItem);
        Assertions.assertEquals(1, responseSearchFacetsTermStatusFirstItem.getCount());
        Assertions.assertEquals("Approved", responseSearchFacetsTermStatusFirstItem.getValue());
        List<SearchFacetItemValue> responseSearchFacetsTermTemplate = responseSearchFacets.getTermTemplate();
        SearchFacetItemValue responseSearchFacetsTermTemplateFirstItem
            = responseSearchFacetsTermTemplate.iterator().next();
        Assertions.assertNotNull(responseSearchFacetsTermTemplateFirstItem);
        Assertions.assertEquals(1, responseSearchFacetsTermTemplateFirstItem.getCount());
        Assertions.assertEquals("termTemplateSample", responseSearchFacetsTermTemplateFirstItem.getValue());
        // verify property "value"
        List<SearchResultValue> responseValue = response.getValue();
        SearchResultValue responseValueFirstItem = responseValue.iterator().next();
        Assertions.assertNotNull(responseValueFirstItem);
        Assertions.assertEquals(1.0D, responseValueFirstItem.getSearchScore());
        Assertions.assertEquals("Glossary terms", responseValueFirstItem.getObjectType());
        Assertions.assertEquals(1625819659805L, responseValueFirstItem.getCreateTime());
        Assertions.assertEquals(1625819659805L, responseValueFirstItem.getUpdateTime());
        Assertions.assertEquals("b1e51cc4-9249-4c81-bbc7-e2f3117706f3", responseValueFirstItem.getId());
        Assertions.assertEquals("termSample1", responseValueFirstItem.getName());
        Assertions.assertEquals("termSample1@DefaultGlossary", responseValueFirstItem.getQualifiedName());
        Assertions.assertEquals("AtlasGlossaryTerm", responseValueFirstItem.getGlossaryType());
        Assertions.assertEquals("DefaultGlossary", responseValueFirstItem.getGlossary());
        Assertions.assertEquals("Approved", responseValueFirstItem.getTermStatus());
        List<String> responseValueFirstItemTermTemplate = responseValueFirstItem.getTermTemplate();
        Assertions.assertEquals("termTemplateSample", responseValueFirstItemTermTemplate.iterator().next());
        Assertions.assertEquals("it is the definition of the term", responseValueFirstItem.getLongDescription());
    }
}
