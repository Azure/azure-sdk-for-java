// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.analytics.purview.datamap.DiscoveryClient;
import com.azure.analytics.purview.datamap.DiscoveryClientBuilder;
import com.azure.analytics.purview.datamap.EntityClient;
import com.azure.analytics.purview.datamap.EntityClientBuilder;
import com.azure.analytics.purview.datamap.GlossaryClient;
import com.azure.analytics.purview.datamap.GlossaryClientBuilder;
import com.azure.analytics.purview.datamap.LineageClient;
import com.azure.analytics.purview.datamap.LineageClientBuilder;
import com.azure.analytics.purview.datamap.RelationshipClient;
import com.azure.analytics.purview.datamap.RelationshipClientBuilder;
import com.azure.analytics.purview.datamap.TypeClient;
import com.azure.analytics.purview.datamap.TypeClientBuilder;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

class EntityClientTestBase extends TestProxyTestBase {
    protected EntityClient entityClient;

    protected GlossaryClient glossaryClient;

    protected DiscoveryClient discoveryClient;

    protected LineageClient lineageClient;

    protected RelationshipClient relationshipClient;

    protected TypeClient typeClient;

    @Override
    protected void beforeTest() {
        EntityClientBuilder entityClientbuilder
            = new EntityClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            entityClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            entityClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            entityClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        entityClient = entityClientbuilder.buildClient();

        GlossaryClientBuilder glossaryClientbuilder
            = new GlossaryClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            glossaryClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            glossaryClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            glossaryClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        glossaryClient = glossaryClientbuilder.buildClient();

        DiscoveryClientBuilder discoveryClientbuilder
            = new DiscoveryClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            discoveryClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            discoveryClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            discoveryClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        discoveryClient = discoveryClientbuilder.buildClient();

        LineageClientBuilder lineageClientbuilder
            = new LineageClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            lineageClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            lineageClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            lineageClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        lineageClient = lineageClientbuilder.buildClient();

        RelationshipClientBuilder relationshipClientbuilder = new RelationshipClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            relationshipClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            relationshipClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            relationshipClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        relationshipClient = relationshipClientbuilder.buildClient();

        TypeClientBuilder typeClientbuilder
            = new TypeClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                .httpClient(HttpClient.createDefault())
                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            typeClientbuilder.httpClient(interceptorManager.getPlaybackClient())
                .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            typeClientbuilder.addPolicy(interceptorManager.getRecordPolicy())
                .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            typeClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        typeClient = typeClientbuilder.buildClient();

    }
}
