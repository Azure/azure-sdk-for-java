// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.models.AtlasObjectId;
import com.azure.analytics.purview.datamap.models.AtlasRelationship;
import com.azure.analytics.purview.datamap.models.StatusAtlasRelationship;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class RelationshipUpdateTests extends DataMapClientTestBase {
    @Test
    @Disabled
    public void testRelationshipUpdateTests() throws IOException {
        // method invocation
        AtlasRelationship response = relationshipClient.update(new AtlasRelationship()
            .setAttributes(mapOf("expression", "Example Expression", "steward", "Example Steward", "description",
                "Example Description", "source",
                JacksonAdapter.createDefaultSerializerAdapter()
                    .deserialize("null", Object.class, SerializerEncoding.JSON),
                "status",
                JacksonAdapter.createDefaultSerializerAdapter()
                    .deserialize("null", Object.class, SerializerEncoding.JSON)))
            .setTypeName("AtlasGlossarySynonym")
            .setCreatedBy("ExampleCreator")
            .setEnd1(
                new AtlasObjectId().setGuid("77481037-2874-9bdc-9b9e-76bb94ee71aa").setTypeName("AtlasGlossaryTerm"))
            .setEnd2(
                new AtlasObjectId().setGuid("b0942506-2d7d-1f45-d286-c29ca9e7f2ef").setTypeName("AtlasGlossaryTerm"))
            .setGuid("b2810301-293f-493f-88f1-7ac8784fb1fd")
            .setLabel("r:AtlasGlossarySynonym")
            .setStatus(StatusAtlasRelationship.ACTIVE)
            .setUpdatedBy("ExampleUpdator")
            .setVersion(0L));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "attributes"
        Assertions.assertNotNull(response.getAttributes());
        // verify property "typeName"
        Assertions.assertEquals("AtlasGlossarySynonym", response.getTypeName());
        // verify property "createTime"
        Assertions.assertEquals(1553839805039L, response.getCreateTime());
        // verify property "createdBy"
        Assertions.assertEquals("ExampleCreator", response.getCreatedBy());
        // verify property "end1"
        AtlasObjectId responseEnd1 = response.getEnd1();
        Assertions.assertNotNull(responseEnd1);
        Assertions.assertEquals("77481037-2874-9bdc-9b9e-76bb94ee71aa", responseEnd1.getGuid());
        Assertions.assertEquals("AtlasGlossaryTerm", responseEnd1.getTypeName());
        // verify property "end2"
        AtlasObjectId responseEnd2 = response.getEnd2();
        Assertions.assertNotNull(responseEnd2);
        Assertions.assertEquals("b0942506-2d7d-1f45-d286-c29ca9e7f2ef", responseEnd2.getGuid());
        Assertions.assertEquals("AtlasGlossaryTerm", responseEnd2.getTypeName());
        // verify property "guid"
        Assertions.assertEquals("b2810301-293f-493f-88f1-7ac8784fb1fd", response.getGuid());
        // verify property "label"
        Assertions.assertEquals("r:AtlasGlossarySynonym", response.getLabel());
        // verify property "status"
        Assertions.assertEquals(StatusAtlasRelationship.ACTIVE, response.getStatus());
        // verify property "updateTime"
        Assertions.assertEquals(1553839805039L, response.getUpdateTime());
        // verify property "updatedBy"
        Assertions.assertEquals("ExampleUpdator", response.getUpdatedBy());
        // verify property "version"
        Assertions.assertEquals(0L, response.getVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
