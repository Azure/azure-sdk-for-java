// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.DataMapClientBuilder;
import com.azure.analytics.purview.datamap.GlossaryClient;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryHeader;
import com.azure.analytics.purview.datamap.models.AtlasGlossaryTerm;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class GlossaryCreateTermWithTemplate {
    public static void main(String[] args) throws IOException {
        GlossaryClient glossaryClient
            = new DataMapClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint("{Endpoint}")
                .buildGlossaryClient();
        // BEGIN:com.azure.analytics.purview.datamap.generated.glossarycreateterm.glossarycreatetermwithtemplate
        AtlasGlossaryTerm response = glossaryClient.createTerm(new AtlasGlossaryTerm().setName("ExampleTerm")
            .setAnchor(new AtlasGlossaryHeader().setGlossaryGuid("c018ddaf-7c21-4b37-a838-dae5f110c3d8"))
            .setAttributes(mapOf("ExampleTermTemplateAttribute",
                mapOf("plain string", "Example String", "date", 1606233600000L, "single choice",
                    "Example Single Choice A", "multi choice",
                    JacksonAdapter.createDefaultSerializerAdapter()
                        .deserialize("[\"Example Multi Choice A\",\"Example Multi Choice B\"]", Object.class,
                            SerializerEncoding.JSON)))),
            null);
        // END:com.azure.analytics.purview.datamap.generated.glossarycreateterm.glossarycreatetermwithtemplate
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
