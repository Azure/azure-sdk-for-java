// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.analytics.purview.datamap.generated;

import com.azure.analytics.purview.datamap.DataMapClientBuilder;
import com.azure.analytics.purview.datamap.TypeDefinitionClient;
import com.azure.analytics.purview.datamap.models.AtlasAttributeDef;
import com.azure.analytics.purview.datamap.models.AtlasConstraintDef;
import com.azure.analytics.purview.datamap.models.AtlasEntityDef;
import com.azure.analytics.purview.datamap.models.AtlasRelationshipDef;
import com.azure.analytics.purview.datamap.models.AtlasRelationshipEndDef;
import com.azure.analytics.purview.datamap.models.AtlasTypesDef;
import com.azure.analytics.purview.datamap.models.CardinalityValue;
import com.azure.analytics.purview.datamap.models.RelationshipCategory;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class TypeBulkUpdate {
    public static void main(String[] args) {
        TypeDefinitionClient typeDefinitionClient
            = new DataMapClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint("{Endpoint}")
                .buildTypeDefinitionClient();
        // BEGIN:com.azure.analytics.purview.datamap.generated.typedefinitionbatchupdate.typebulkupdate
        AtlasTypesDef response = typeDefinitionClient.batchUpdate(new AtlasTypesDef()
            .setClassificationDefs(Arrays.asList())
            .setEntityDefs(Arrays.asList(
                new AtlasEntityDef().setName("azure_sql_server")
                    .setTypeVersion("1.0")
                    .setAttributeDefs(Arrays.asList(new AtlasAttributeDef().setCardinality(CardinalityValue.SET)
                        .setIsIndexable(false)
                        .setIsOptional(true)
                        .setIsUnique(false)
                        .setName("databases")
                        .setTypeName("array<azure_sql_db>")))
                    .setSuperTypes(Arrays.asList("azure_resource")),
                new AtlasEntityDef().setName("azure_sql_db")
                    .setTypeVersion("1.0")
                    .setAttributeDefs(Arrays.asList(new AtlasAttributeDef().setCardinality(CardinalityValue.SINGLE)
                        .setConstraints(Arrays.asList(
                            new AtlasConstraintDef().setParams(mapOf("attribute", "databases")).setType("inverseRef")))
                        .setIsIndexable(false)
                        .setIsOptional(false)
                        .setIsUnique(false)
                        .setName("server")
                        .setTypeName("azure_sql_server"),
                        new AtlasAttributeDef().setCardinality(CardinalityValue.SET)
                            .setIsIndexable(false)
                            .setIsOptional(true)
                            .setIsUnique(false)
                            .setName("schemas")
                            .setTypeName("array<azure_sql_schema>"),
                        new AtlasAttributeDef().setCardinality(CardinalityValue.SINGLE)
                            .setIsIndexable(false)
                            .setIsOptional(true)
                            .setIsUnique(false)
                            .setName("collation")
                            .setTypeName("string"),
                        new AtlasAttributeDef().setCardinality(CardinalityValue.SINGLE)
                            .setIsIndexable(false)
                            .setIsOptional(true)
                            .setIsUnique(false)
                            .setName("compatibilityLevel")
                            .setTypeName("int")))
                    .setSuperTypes(Arrays.asList("azure_resource"))))
            .setEnumDefs(Arrays.asList())
            .setRelationshipDefs(Arrays.asList(
                new AtlasRelationshipDef().setName("azure_sql_server_databases")
                    .setTypeVersion("1.0")
                    .setEndDef1(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SET)
                        .setIsContainer(true)
                        .setIsLegacyAttribute(true)
                        .setName("databases")
                        .setType("azure_sql_server"))
                    .setEndDef2(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SINGLE)
                        .setIsContainer(false)
                        .setIsLegacyAttribute(true)
                        .setName("server")
                        .setType("azure_sql_db"))
                    .setRelationshipCategory(RelationshipCategory.COMPOSITION),
                new AtlasRelationshipDef().setName("azure_sql_db_schemas")
                    .setTypeVersion("1.0")
                    .setEndDef1(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SET)
                        .setIsContainer(true)
                        .setIsLegacyAttribute(true)
                        .setName("schemas")
                        .setType("azure_sql_db"))
                    .setEndDef2(new AtlasRelationshipEndDef().setCardinality(CardinalityValue.SINGLE)
                        .setIsContainer(false)
                        .setIsLegacyAttribute(true)
                        .setName("db")
                        .setType("azure_sql_schema"))
                    .setRelationshipCategory(RelationshipCategory.COMPOSITION)))
            .setStructDefs(Arrays.asList()));
        // END:com.azure.analytics.purview.datamap.generated.typedefinitionbatchupdate.typebulkupdate
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
