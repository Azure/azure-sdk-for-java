// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.purview.catalog;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.experimental.http.DynamicRequest;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.util.serializer.ObjectSerializer;

/** Initializes a new instance of the RelationshipRestClient type. */
@ServiceClient(builder = PurviewCatalogServiceRestAPIDocumentBuilder.class)
public final class RelationshipRestClient {
    private final String accountName;

    private final String apiVersion;

    private final HttpPipeline pipeline;

    private final ObjectSerializer objectSerializer;

    /**
     * Initializes an instance of RelationshipRestClient client.
     *
     * @param accountName The name of your Purview account.
     * @param apiVersion Api Version.
     * @param pipeline The HTTP pipeline to send requests through.
     * @param objectSerializer The serializer to serialize an object into a string.
     */
    RelationshipRestClient(
            String accountName, String apiVersion, HttpPipeline pipeline, ObjectSerializer objectSerializer) {
        this.accountName = accountName;
        this.apiVersion = apiVersion;
        this.pipeline = pipeline;
        this.objectSerializer = objectSerializer;
    }

    /**
     * Create a new relationship between entities.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     attributes: {
     *         String: Object
     *     }
     *     typeName: String
     *     lastModifiedTS: String
     *     blockedPropagatedClassifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             propagate: Boolean
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     createTime: Float
     *     createdBy: String
     *     end1: {
     *         guid: String
     *         typeName: String
     *         uniqueAttributes: {
     *             String: Object
     *         }
     *     }
     *     end2: JsonAtlasObjectId
     *     guid: String
     *     homeId: String
     *     label: String
     *     propagateTags: String(NONE/ONE_TO_TWO/TWO_TO_ONE/BOTH)
     *     propagatedClassifications: [
     *         JsonAtlasClassification
     *     ]
     *     provenanceType: Float
     *     status: String(ACTIVE/DELETED)
     *     updateTime: Float
     *     updatedBy: String
     *     version: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * JsonAtlasRelationship
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest create() {
        return new DynamicRequest(objectSerializer, pipeline)
                .setUrl("https://{accountName}.catalog.purview.azure.com/api/atlas/v2/relationship")
                .setPathParam("accountName", accountName)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Update an existing relationship between entities.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     attributes: {
     *         String: Object
     *     }
     *     typeName: String
     *     lastModifiedTS: String
     *     blockedPropagatedClassifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             propagate: Boolean
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     createTime: Float
     *     createdBy: String
     *     end1: {
     *         guid: String
     *         typeName: String
     *         uniqueAttributes: {
     *             String: Object
     *         }
     *     }
     *     end2: JsonAtlasObjectId
     *     guid: String
     *     homeId: String
     *     label: String
     *     propagateTags: String(NONE/ONE_TO_TWO/TWO_TO_ONE/BOTH)
     *     propagatedClassifications: [
     *         JsonAtlasClassification
     *     ]
     *     provenanceType: Float
     *     status: String(ACTIVE/DELETED)
     *     updateTime: Float
     *     updatedBy: String
     *     version: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * JsonAtlasRelationship
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest update() {
        return new DynamicRequest(objectSerializer, pipeline)
                .setUrl("https://{accountName}.catalog.purview.azure.com/api/atlas/v2/relationship")
                .setPathParam("accountName", accountName)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Get relationship information between entities by its GUID.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>extendedInfo</td><td>Boolean</td><td>Limits whether includes extended information.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities: {
     *         String: {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             classificationNames: [
     *                 String
     *             ]
     *             classifications: [
     *                 {
     *                     attributes: {
     *                         String: Object
     *                     }
     *                     typeName: String
     *                     lastModifiedTS: String
     *                     entityGuid: String
     *                     entityStatus: String(ACTIVE/DELETED)
     *                     propagate: Boolean
     *                     removePropagationsOnEntityDelete: Boolean
     *                     validityPeriods: [
     *                         {
     *                             endTime: String
     *                             startTime: String
     *                             timeZone: String
     *                         }
     *                     ]
     *                     source: String
     *                     sourceDetails: {
     *                         String: Object
     *                     }
     *                 }
     *             ]
     *             displayText: String
     *             guid: String
     *             meaningNames: [
     *                 String
     *             ]
     *             meanings: [
     *                 {
     *                     confidence: Integer
     *                     createdBy: String
     *                     description: String
     *                     displayText: String
     *                     expression: String
     *                     relationGuid: String
     *                     source: String
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER)
     *                     steward: String
     *                     termGuid: String
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED)
     *         }
     *     }
     *     relationship: {
     *         attributes: {
     *             String: Object
     *         }
     *         typeName: String
     *         lastModifiedTS: String
     *         blockedPropagatedClassifications: [
     *             JsonAtlasClassification
     *         ]
     *         createTime: Float
     *         createdBy: String
     *         end1: {
     *             guid: String
     *             typeName: String
     *             uniqueAttributes: {
     *                 String: Object
     *             }
     *         }
     *         end2: JsonAtlasObjectId
     *         guid: String
     *         homeId: String
     *         label: String
     *         propagateTags: String(NONE/ONE_TO_TWO/TWO_TO_ONE/BOTH)
     *         propagatedClassifications: [
     *             JsonAtlasClassification
     *         ]
     *         provenanceType: Float
     *         status: String(ACTIVE/DELETED)
     *         updateTime: Float
     *         updatedBy: String
     *         version: Float
     *     }
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the relationship.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getById2(String guid) {
        return new DynamicRequest(objectSerializer, pipeline)
                .setUrl("https://{accountName}.catalog.purview.azure.com/api/atlas/v2/relationship/guid/{guid}")
                .setPathParam("accountName", accountName)
                .setPathParam("guid", guid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Delete a relationship between entities by its GUID.
     *
     * @param guid The globally unique identifier of the relationship.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest deleteById(String guid) {
        return new DynamicRequest(objectSerializer, pipeline)
                .setUrl("https://{accountName}.catalog.purview.azure.com/api/atlas/v2/relationship/guid/{guid}")
                .setPathParam("accountName", accountName)
                .setPathParam("guid", guid)
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json;q=0.9")
                .setHttpMethod(HttpMethod.DELETE);
    }
}
