// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the Sku.
 */
@Fluent
public final class AccountSku extends AccountSkuAutoGenerated {
    /**
     * Creates an instance of AccountSku class.
     */
    public AccountSku() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountSku withCapacity(Integer capacity) {
        super.withCapacity(capacity);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountSku withName(Name name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("capacity", capacity());
        jsonWriter.writeStringField("name", name() == null ? null : name().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountSku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountSku if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the AccountSku.
     */
    public static AccountSku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountSku deserializedAccountSku = new AccountSku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("capacity".equals(fieldName)) {
                    deserializedAccountSku.withCapacity(reader.getNullable(JsonReader::getInt));
                } else if ("name".equals(fieldName)) {
                    deserializedAccountSku.withName(Name.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountSku;
        });
    }
}
