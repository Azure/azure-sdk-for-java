// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.purview.models.AccountPropertiesEndpoints;
import com.azure.resourcemanager.purview.models.AccountPropertiesManagedResources;
import com.azure.resourcemanager.purview.models.CloudConnectors;
import com.azure.resourcemanager.purview.models.ProvisioningState;
import com.azure.resourcemanager.purview.models.PublicNetworkAccess;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The account properties.
 */
@Fluent
public final class AccountProperties implements JsonSerializable<AccountProperties> {
    /*
     * Cloud connectors.
     * External cloud identifier used as part of scanning configuration.
     */
    private CloudConnectors cloudConnectors;

    /*
     * Gets the time at which the entity was created.
     */
    private OffsetDateTime createdAt;

    /*
     * Gets the creator of the entity.
     */
    private String createdBy;

    /*
     * Gets the creators of the entity's object id.
     */
    private String createdByObjectId;

    /*
     * The URIs that are the public endpoints of the account.
     */
    private AccountPropertiesEndpoints endpoints;

    /*
     * Gets or sets the friendly name.
     */
    private String friendlyName;

    /*
     * Gets or sets the managed resource group name
     */
    private String managedResourceGroupName;

    /*
     * Gets the resource identifiers of the managed resources.
     */
    private AccountPropertiesManagedResources managedResources;

    /*
     * Gets the private endpoint connections information.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * Gets or sets the state of the provisioning.
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the public network access.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /**
     * Creates an instance of AccountProperties class.
     */
    public AccountProperties() {
    }

    /**
     * Get the cloudConnectors property: Cloud connectors.
     * External cloud identifier used as part of scanning configuration.
     * 
     * @return the cloudConnectors value.
     */
    public CloudConnectors cloudConnectors() {
        return this.cloudConnectors;
    }

    /**
     * Set the cloudConnectors property: Cloud connectors.
     * External cloud identifier used as part of scanning configuration.
     * 
     * @param cloudConnectors the cloudConnectors value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withCloudConnectors(CloudConnectors cloudConnectors) {
        this.cloudConnectors = cloudConnectors;
        return this;
    }

    /**
     * Get the createdAt property: Gets the time at which the entity was created.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Get the createdBy property: Gets the creator of the entity.
     * 
     * @return the createdBy value.
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * Get the createdByObjectId property: Gets the creators of the entity's object id.
     * 
     * @return the createdByObjectId value.
     */
    public String createdByObjectId() {
        return this.createdByObjectId;
    }

    /**
     * Get the endpoints property: The URIs that are the public endpoints of the account.
     * 
     * @return the endpoints value.
     */
    public AccountPropertiesEndpoints endpoints() {
        return this.endpoints;
    }

    /**
     * Get the friendlyName property: Gets or sets the friendly name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Get the managedResourceGroupName property: Gets or sets the managed resource group name.
     * 
     * @return the managedResourceGroupName value.
     */
    public String managedResourceGroupName() {
        return this.managedResourceGroupName;
    }

    /**
     * Set the managedResourceGroupName property: Gets or sets the managed resource group name.
     * 
     * @param managedResourceGroupName the managedResourceGroupName value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withManagedResourceGroupName(String managedResourceGroupName) {
        this.managedResourceGroupName = managedResourceGroupName;
        return this;
    }

    /**
     * Get the managedResources property: Gets the resource identifiers of the managed resources.
     * 
     * @return the managedResources value.
     */
    public AccountPropertiesManagedResources managedResources() {
        return this.managedResources;
    }

    /**
     * Get the privateEndpointConnections property: Gets the private endpoint connections information.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the provisioningState property: Gets or sets the state of the provisioning.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publicNetworkAccess property: Gets or sets the public network access.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Gets or sets the public network access.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cloudConnectors() != null) {
            cloudConnectors().validate();
        }
        if (endpoints() != null) {
            endpoints().validate();
        }
        if (managedResources() != null) {
            managedResources().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("cloudConnectors", this.cloudConnectors);
        jsonWriter.writeStringField("managedResourceGroupName", this.managedResourceGroupName);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountProperties.
     */
    public static AccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountProperties deserializedAccountProperties = new AccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cloudConnectors".equals(fieldName)) {
                    deserializedAccountProperties.cloudConnectors = CloudConnectors.fromJson(reader);
                } else if ("createdAt".equals(fieldName)) {
                    deserializedAccountProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdBy".equals(fieldName)) {
                    deserializedAccountProperties.createdBy = reader.getString();
                } else if ("createdByObjectId".equals(fieldName)) {
                    deserializedAccountProperties.createdByObjectId = reader.getString();
                } else if ("endpoints".equals(fieldName)) {
                    deserializedAccountProperties.endpoints = AccountPropertiesEndpoints.fromJson(reader);
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedAccountProperties.friendlyName = reader.getString();
                } else if ("managedResourceGroupName".equals(fieldName)) {
                    deserializedAccountProperties.managedResourceGroupName = reader.getString();
                } else if ("managedResources".equals(fieldName)) {
                    deserializedAccountProperties.managedResources = AccountPropertiesManagedResources.fromJson(reader);
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedAccountProperties.privateEndpointConnections = privateEndpointConnections;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAccountProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedAccountProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountProperties;
        });
    }
}
