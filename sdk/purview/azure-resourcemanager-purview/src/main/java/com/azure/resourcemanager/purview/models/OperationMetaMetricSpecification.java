// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * metric specifications for the operation.
 */
@Fluent
public final class OperationMetaMetricSpecification implements JsonSerializable<OperationMetaMetricSpecification> {
    /*
     * aggregation type of metric
     */
    private String aggregationType;

    /*
     * properties for dimension
     */
    private List<DimensionProperties> dimensions;

    /*
     * description of the metric
     */
    private String displayDescription;

    /*
     * localized name of the metric
     */
    private String displayName;

    /*
     * enable regional mdm account
     */
    private String enableRegionalMdmAccount;

    /*
     * internal metric name
     */
    private String internalMetricName;

    /*
     * name of the metric
     */
    private String name;

    /*
     * dimension name use to replace resource id if specified
     */
    private String resourceIdDimensionNameOverride;

    /*
     * Metric namespace.
     * Only set the namespace if different from the default value,
     * leaving it empty makes it use the value from the ARM manifest.
     */
    private String sourceMdmNamespace;

    /*
     * supported aggregation types
     */
    private List<String> supportedAggregationTypes;

    /*
     * supported time grain types
     */
    private List<String> supportedTimeGrainTypes;

    /*
     * units for the metric
     */
    private String unit;

    /**
     * Creates an instance of OperationMetaMetricSpecification class.
     */
    public OperationMetaMetricSpecification() {
    }

    /**
     * Get the aggregationType property: aggregation type of metric.
     * 
     * @return the aggregationType value.
     */
    public String aggregationType() {
        return this.aggregationType;
    }

    /**
     * Set the aggregationType property: aggregation type of metric.
     * 
     * @param aggregationType the aggregationType value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withAggregationType(String aggregationType) {
        this.aggregationType = aggregationType;
        return this;
    }

    /**
     * Get the dimensions property: properties for dimension.
     * 
     * @return the dimensions value.
     */
    public List<DimensionProperties> dimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: properties for dimension.
     * 
     * @param dimensions the dimensions value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withDimensions(List<DimensionProperties> dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Get the displayDescription property: description of the metric.
     * 
     * @return the displayDescription value.
     */
    public String displayDescription() {
        return this.displayDescription;
    }

    /**
     * Set the displayDescription property: description of the metric.
     * 
     * @param displayDescription the displayDescription value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withDisplayDescription(String displayDescription) {
        this.displayDescription = displayDescription;
        return this;
    }

    /**
     * Get the displayName property: localized name of the metric.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: localized name of the metric.
     * 
     * @param displayName the displayName value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the enableRegionalMdmAccount property: enable regional mdm account.
     * 
     * @return the enableRegionalMdmAccount value.
     */
    public String enableRegionalMdmAccount() {
        return this.enableRegionalMdmAccount;
    }

    /**
     * Set the enableRegionalMdmAccount property: enable regional mdm account.
     * 
     * @param enableRegionalMdmAccount the enableRegionalMdmAccount value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withEnableRegionalMdmAccount(String enableRegionalMdmAccount) {
        this.enableRegionalMdmAccount = enableRegionalMdmAccount;
        return this;
    }

    /**
     * Get the internalMetricName property: internal metric name.
     * 
     * @return the internalMetricName value.
     */
    public String internalMetricName() {
        return this.internalMetricName;
    }

    /**
     * Set the internalMetricName property: internal metric name.
     * 
     * @param internalMetricName the internalMetricName value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withInternalMetricName(String internalMetricName) {
        this.internalMetricName = internalMetricName;
        return this;
    }

    /**
     * Get the name property: name of the metric.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: name of the metric.
     * 
     * @param name the name value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the resourceIdDimensionNameOverride property: dimension name use to replace resource id if specified.
     * 
     * @return the resourceIdDimensionNameOverride value.
     */
    public String resourceIdDimensionNameOverride() {
        return this.resourceIdDimensionNameOverride;
    }

    /**
     * Set the resourceIdDimensionNameOverride property: dimension name use to replace resource id if specified.
     * 
     * @param resourceIdDimensionNameOverride the resourceIdDimensionNameOverride value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification
        withResourceIdDimensionNameOverride(String resourceIdDimensionNameOverride) {
        this.resourceIdDimensionNameOverride = resourceIdDimensionNameOverride;
        return this;
    }

    /**
     * Get the sourceMdmNamespace property: Metric namespace.
     * Only set the namespace if different from the default value,
     * leaving it empty makes it use the value from the ARM manifest.
     * 
     * @return the sourceMdmNamespace value.
     */
    public String sourceMdmNamespace() {
        return this.sourceMdmNamespace;
    }

    /**
     * Set the sourceMdmNamespace property: Metric namespace.
     * Only set the namespace if different from the default value,
     * leaving it empty makes it use the value from the ARM manifest.
     * 
     * @param sourceMdmNamespace the sourceMdmNamespace value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withSourceMdmNamespace(String sourceMdmNamespace) {
        this.sourceMdmNamespace = sourceMdmNamespace;
        return this;
    }

    /**
     * Get the supportedAggregationTypes property: supported aggregation types.
     * 
     * @return the supportedAggregationTypes value.
     */
    public List<String> supportedAggregationTypes() {
        return this.supportedAggregationTypes;
    }

    /**
     * Set the supportedAggregationTypes property: supported aggregation types.
     * 
     * @param supportedAggregationTypes the supportedAggregationTypes value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withSupportedAggregationTypes(List<String> supportedAggregationTypes) {
        this.supportedAggregationTypes = supportedAggregationTypes;
        return this;
    }

    /**
     * Get the supportedTimeGrainTypes property: supported time grain types.
     * 
     * @return the supportedTimeGrainTypes value.
     */
    public List<String> supportedTimeGrainTypes() {
        return this.supportedTimeGrainTypes;
    }

    /**
     * Set the supportedTimeGrainTypes property: supported time grain types.
     * 
     * @param supportedTimeGrainTypes the supportedTimeGrainTypes value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withSupportedTimeGrainTypes(List<String> supportedTimeGrainTypes) {
        this.supportedTimeGrainTypes = supportedTimeGrainTypes;
        return this;
    }

    /**
     * Get the unit property: units for the metric.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: units for the metric.
     * 
     * @param unit the unit value to set.
     * @return the OperationMetaMetricSpecification object itself.
     */
    public OperationMetaMetricSpecification withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dimensions() != null) {
            dimensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aggregationType", this.aggregationType);
        jsonWriter.writeArrayField("dimensions", this.dimensions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("displayDescription", this.displayDescription);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("enableRegionalMdmAccount", this.enableRegionalMdmAccount);
        jsonWriter.writeStringField("internalMetricName", this.internalMetricName);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("resourceIdDimensionNameOverride", this.resourceIdDimensionNameOverride);
        jsonWriter.writeStringField("sourceMdmNamespace", this.sourceMdmNamespace);
        jsonWriter.writeArrayField("supportedAggregationTypes", this.supportedAggregationTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("supportedTimeGrainTypes", this.supportedTimeGrainTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("unit", this.unit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationMetaMetricSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationMetaMetricSpecification if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationMetaMetricSpecification.
     */
    public static OperationMetaMetricSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationMetaMetricSpecification deserializedOperationMetaMetricSpecification
                = new OperationMetaMetricSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aggregationType".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.aggregationType = reader.getString();
                } else if ("dimensions".equals(fieldName)) {
                    List<DimensionProperties> dimensions
                        = reader.readArray(reader1 -> DimensionProperties.fromJson(reader1));
                    deserializedOperationMetaMetricSpecification.dimensions = dimensions;
                } else if ("displayDescription".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.displayDescription = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.displayName = reader.getString();
                } else if ("enableRegionalMdmAccount".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.enableRegionalMdmAccount = reader.getString();
                } else if ("internalMetricName".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.internalMetricName = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.name = reader.getString();
                } else if ("resourceIdDimensionNameOverride".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.resourceIdDimensionNameOverride = reader.getString();
                } else if ("sourceMdmNamespace".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.sourceMdmNamespace = reader.getString();
                } else if ("supportedAggregationTypes".equals(fieldName)) {
                    List<String> supportedAggregationTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperationMetaMetricSpecification.supportedAggregationTypes = supportedAggregationTypes;
                } else if ("supportedTimeGrainTypes".equals(fieldName)) {
                    List<String> supportedTimeGrainTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperationMetaMetricSpecification.supportedTimeGrainTypes = supportedTimeGrainTypes;
                } else if ("unit".equals(fieldName)) {
                    deserializedOperationMetaMetricSpecification.unit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationMetaMetricSpecification;
        });
    }
}
