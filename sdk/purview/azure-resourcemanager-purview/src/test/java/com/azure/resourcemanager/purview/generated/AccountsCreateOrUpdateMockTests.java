// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.purview.PurviewManager;
import com.azure.resourcemanager.purview.models.Account;
import com.azure.resourcemanager.purview.models.CloudConnectors;
import com.azure.resourcemanager.purview.models.Identity;
import com.azure.resourcemanager.purview.models.PublicNetworkAccess;
import com.azure.resourcemanager.purview.models.Type;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AccountsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"cloudConnectors\":{\"awsExternalId\":\"fuzmuvpbtt\"},\"createdAt\":\"2021-09-09T07:20:50Z\",\"createdBy\":\"rp\",\"createdByObjectId\":\"ebmnzbtbhjpglk\",\"endpoints\":{\"catalog\":\"hdneuelfph\",\"guardian\":\"yhtozfikdowwqu\",\"scan\":\"xzxcl\"},\"friendlyName\":\"thhqzonosggbh\",\"managedResourceGroupName\":\"hfwdsjnkaljutiis\",\"managedResources\":{\"eventHubNamespace\":\"ffgdkz\",\"resourceGroup\":\"wkfvhqcrailvp\",\"storageAccount\":\"pfuflrw\"},\"privateEndpointConnections\":[],\"provisioningState\":\"Succeeded\",\"publicNetworkAccess\":\"Enabled\"},\"sku\":{\"capacity\":1095036678,\"name\":\"Standard\"},\"identity\":{\"principalId\":\"fcnihgwq\",\"tenantId\":\"nedgfbc\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"location\":\"pkeqdcvdrhvoo\",\"tags\":{\"opcjwvnhd\":\"tbobz\",\"mgxcxrslpm\":\"d\",\"qsluicp\":\"twuoegrpkhjwni\"},\"id\":\"ggkzzlvmbmpa\",\"name\":\"modfvuefywsbpfvm\",\"type\":\"yhrfouyftaakcpw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PurviewManager manager =
            PurviewManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Account response =
            manager
                .accounts()
                .define("lqlfm")
                .withRegion("hvhgureod")
                .withExistingResourceGroup("mvaolps")
                .withTags(
                    mapOf(
                        "bqdxbx", "bdagxt", "ripl", "akbogqxndlkzgxh", "bxmubyynt", "podxunkb", "tkoievseotgq", "lrb"))
                .withIdentity(new Identity().withType(Type.NONE).withUserAssignedIdentities(mapOf()))
                .withCloudConnectors(new CloudConnectors())
                .withManagedResourceGroupName("mweriofzpy")
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .create();

        Assertions.assertEquals("pkeqdcvdrhvoo", response.location());
        Assertions.assertEquals("tbobz", response.tags().get("opcjwvnhd"));
        Assertions.assertEquals(Type.NONE, response.identity().type());
        Assertions.assertEquals("hfwdsjnkaljutiis", response.managedResourceGroupName());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
