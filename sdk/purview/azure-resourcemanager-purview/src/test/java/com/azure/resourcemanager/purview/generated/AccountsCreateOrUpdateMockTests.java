// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.purview.PurviewManager;
import com.azure.resourcemanager.purview.models.Account;
import com.azure.resourcemanager.purview.models.CloudConnectors;
import com.azure.resourcemanager.purview.models.Identity;
import com.azure.resourcemanager.purview.models.PublicNetworkAccess;
import com.azure.resourcemanager.purview.models.Type;
import com.azure.resourcemanager.purview.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"cloudConnectors\":{\"awsExternalId\":\"dw\"},\"createdAt\":\"2021-05-05T12:21:29Z\",\"createdBy\":\"wib\",\"createdByObjectId\":\"cdl\",\"endpoints\":{\"catalog\":\"hfwpracstwit\",\"guardian\":\"hevxcced\",\"scan\":\"nmdyodnwzxl\"},\"friendlyName\":\"cvnhltiugc\",\"managedResourceGroupName\":\"avvwxqi\",\"managedResources\":{\"eventHubNamespace\":\"unyowxwl\",\"resourceGroup\":\"jrkvfgbvfvpdbo\",\"storageAccount\":\"cizsjqlhkrribdei\"},\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"hvxndzwmkrefajpj\"},\"id\":\"rwkq\",\"name\":\"yhgbijtjivfx\",\"type\":\"sjabibs\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"fsdjpvkvp\"},\"id\":\"jxbkzbzkdvn\",\"name\":\"jabudurgkakmo\",\"type\":\"zhjjklffhmouwq\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"zeeyebi\"},\"id\":\"ikayuhqlbjbsybb\",\"name\":\"wrv\",\"type\":\"ldgmfpgvmpip\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"aqfxss\"},\"id\":\"wutwbdsre\",\"name\":\"pdrhne\",\"type\":\"yowqkdwytisibir\"}],\"provisioningState\":\"Succeeded\",\"publicNetworkAccess\":\"Disabled\"},\"sku\":{\"capacity\":2086081346,\"name\":\"Standard\"},\"identity\":{\"principalId\":\"anlfzxiavrmbz\",\"tenantId\":\"okixrjqcir\",\"type\":\"None\",\"userAssignedIdentities\":{\"jvfbgofelja\":{\"clientId\":\"azszrnwoiindfpw\",\"principalId\":\"ylwbtlhflsjcdhsz\"},\"ueluqhhahhxvrhmz\":{\"clientId\":\"qmqhldvriii\",\"principalId\":\"nalghfkvtvsexso\"},\"hqxujxukndxdi\":{\"clientId\":\"pjgwwspug\",\"principalId\":\"tqs\"}}},\"location\":\"jguufzdm\",\"tags\":{\"hbotzingamvppho\":\"tfih\",\"amvdkfwynwcvtbv\":\"zqzudph\",\"pcnp\":\"ayhmtnvyqiatkz\",\"jguq\":\"zcjaesgvvsccy\"},\"id\":\"hwyg\",\"name\":\"lvdnkfx\",\"type\":\"semdwzrmu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PurviewManager manager = PurviewManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Account response = manager.accounts()
            .define("doaon")
            .withRegion("csdtclusiypbs")
            .withExistingResourceGroup("lgkfbt")
            .withTags(mapOf("sl", "tg", "sx", "eadcygqukyhejhz"))
            .withIdentity(new Identity().withType(Type.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ai", new UserAssignedIdentity(), "n", new UserAssignedIdentity(),
                    "hz", new UserAssignedIdentity())))
            .withCloudConnectors(new CloudConnectors())
            .withManagedResourceGroupName("azxkhnzbonlwnto")
            .withPublicNetworkAccess(PublicNetworkAccess.NOT_SPECIFIED)
            .create();

        Assertions.assertEquals("jguufzdm", response.location());
        Assertions.assertEquals("tfih", response.tags().get("hbotzingamvppho"));
        Assertions.assertEquals(Type.NONE, response.identity().type());
        Assertions.assertEquals("avvwxqi", response.managedResourceGroupName());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
