// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.purview.PurviewManager;
import com.azure.resourcemanager.purview.models.Account;
import com.azure.resourcemanager.purview.models.PublicNetworkAccess;
import com.azure.resourcemanager.purview.models.Type;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AccountsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"cloudConnectors\":{\"awsExternalId\":\"beldawkzbaliourq\"},\"createdAt\":\"2021-02-03T12:11Z\",\"createdBy\":\"uhashsfwx\",\"createdByObjectId\":\"owzxcu\",\"endpoints\":{\"catalog\":\"jooxdjebw\",\"guardian\":\"cwwfvovbvme\",\"scan\":\"civyhzceuo\"},\"friendlyName\":\"jrwjueiotwm\",\"managedResourceGroupName\":\"ytdxwit\",\"managedResources\":{\"eventHubNamespace\":\"jawgqwg\",\"resourceGroup\":\"ni\",\"storageAccount\":\"x\"},\"privateEndpointConnections\":[],\"provisioningState\":\"Creating\",\"publicNetworkAccess\":\"NotSpecified\"},\"sku\":{\"capacity\":1567456771,\"name\":\"Standard\"},\"identity\":{\"principalId\":\"jdauwhvy\",\"tenantId\":\"zbtd\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"location\":\"bm\",\"tags\":{\"eualupjmkhf\":\"uwprzql\",\"wsrtjriplrbpbe\":\"obbc\",\"qhjk\":\"tghfgblcgwxzvl\"},\"id\":\"egibtnmxiebww\",\"name\":\"loayqcgw\",\"type\":\"tzjuzgwyzmhtxo\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PurviewManager manager =
            PurviewManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Account> response =
            manager.accounts().listByResourceGroup("gomz", "fmisg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bm", response.iterator().next().location());
        Assertions.assertEquals("uwprzql", response.iterator().next().tags().get("eualupjmkhf"));
        Assertions.assertEquals(Type.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("ytdxwit", response.iterator().next().managedResourceGroupName());
        Assertions.assertEquals(PublicNetworkAccess.NOT_SPECIFIED, response.iterator().next().publicNetworkAccess());
    }
}
