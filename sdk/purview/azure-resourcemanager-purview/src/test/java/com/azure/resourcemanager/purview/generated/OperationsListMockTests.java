// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.purview.PurviewManager;
import com.azure.resourcemanager.purview.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"display\":{\"description\":\"hbxvvyhgsopbyrqu\",\"operation\":\"g\",\"provider\":\"vwz\",\"resource\":\"nhlmctlpdng\"},\"isDataAction\":false,\"name\":\"bmhrixkwmyijejv\",\"origin\":\"rh\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"blobDuration\":\"exccbdreaxhcexd\",\"displayName\":\"vqahqkghtpwi\",\"name\":\"hyjsvfycx\"},{\"blobDuration\":\"fvoow\",\"displayName\":\"vmtgjqppy\",\"name\":\"tronzmyhgfi\"}],\"metricSpecifications\":[{\"aggregationType\":\"kmcwaekrrjreafx\",\"dimensions\":[{},{},{},{}],\"displayDescription\":\"mhjglikkxwslolb\",\"displayName\":\"vuzlm\",\"enableRegionalMdmAccount\":\"elfk\",\"internalMetricName\":\"plcrpwjxeznoig\",\"name\":\"njwmwkpnbsazejj\",\"resourceIdDimensionNameOverride\":\"kagfhsxtt\",\"sourceMdmNamespace\":\"gzxnfaazpxdtnk\",\"supportedAggregationTypes\":[\"qjjlwuen\",\"rkpyouaibrebqaay\",\"j\",\"ixqtn\"],\"supportedTimeGrainTypes\":[\"ezl\",\"fffiak\"],\"unit\":\"pqqmted\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PurviewManager manager = PurviewManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hbxvvyhgsopbyrqu", response.iterator().next().display().description());
        Assertions.assertEquals("g", response.iterator().next().display().operation());
        Assertions.assertEquals("vwz", response.iterator().next().display().provider());
        Assertions.assertEquals("nhlmctlpdng", response.iterator().next().display().resource());
        Assertions.assertEquals(false, response.iterator().next().isDataAction());
        Assertions.assertEquals("bmhrixkwmyijejv", response.iterator().next().name());
        Assertions.assertEquals("rh", response.iterator().next().origin());
        Assertions.assertEquals("exccbdreaxhcexd",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("vqahqkghtpwi",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("hyjsvfycx",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("kmcwaekrrjreafx",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals("mhjglikkxwslolb",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("vuzlm",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("elfk",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("plcrpwjxeznoig",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertEquals("njwmwkpnbsazejj",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("kagfhsxtt",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions.assertEquals("gzxnfaazpxdtnk",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).sourceMdmNamespace());
        Assertions.assertEquals("qjjlwuen",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("ezl",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals("pqqmted",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
    }
}
