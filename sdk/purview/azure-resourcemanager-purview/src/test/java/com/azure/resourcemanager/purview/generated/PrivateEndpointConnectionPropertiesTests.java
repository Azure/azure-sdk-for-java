// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.purview.fluent.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.purview.models.PrivateEndpoint;
import com.azure.resourcemanager.purview.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.purview.models.Status;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionProperties model = BinaryData.fromString(
            "{\"privateEndpoint\":{\"id\":\"hfuiuaodsfc\"},\"privateLinkServiceConnectionState\":{\"actionsRequired\":\"xodpuozmyzydagfu\",\"description\":\"bezy\",\"status\":\"Rejected\"},\"provisioningState\":\"ktwh\"}")
            .toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("hfuiuaodsfc", model.privateEndpoint().id());
        Assertions.assertEquals("xodpuozmyzydagfu", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("bezy", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals(Status.REJECTED, model.privateLinkServiceConnectionState().status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionProperties model
            = new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint().withId("hfuiuaodsfc"))
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionState().withActionsRequired("xodpuozmyzydagfu")
                        .withDescription("bezy")
                        .withStatus(Status.REJECTED));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("hfuiuaodsfc", model.privateEndpoint().id());
        Assertions.assertEquals("xodpuozmyzydagfu", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("bezy", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals(Status.REJECTED, model.privateLinkServiceConnectionState().status());
    }
}
