// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.purview.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.purview.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.purview.models.PrivateEndpoint;
import com.azure.resourcemanager.purview.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.purview.models.Status;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpoint\":{\"id\":\"zrkgqhcjrefovg\"},\"privateLinkServiceConnectionState\":{\"actionsRequired\":\"sle\",\"description\":\"vxyqjpkcattpngjc\",\"status\":\"Disconnected\"},\"provisioningState\":\"sqpjhvmdajvn\"},\"id\":\"sounqecanoaeu\",\"name\":\"fhyhltrpmopjmcma\",\"type\":\"u\"}")
            .toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("zrkgqhcjrefovg", model.privateEndpoint().id());
        Assertions.assertEquals("sle", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("vxyqjpkcattpngjc", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals(Status.DISCONNECTED, model.privateLinkServiceConnectionState().status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionInner model = new PrivateEndpointConnectionInner()
            .withPrivateEndpoint(new PrivateEndpoint().withId("zrkgqhcjrefovg"))
            .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState().withActionsRequired("sle")
                .withDescription("vxyqjpkcattpngjc")
                .withStatus(Status.DISCONNECTED));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("zrkgqhcjrefovg", model.privateEndpoint().id());
        Assertions.assertEquals("sle", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("vxyqjpkcattpngjc", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals(Status.DISCONNECTED, model.privateLinkServiceConnectionState().status());
    }
}
