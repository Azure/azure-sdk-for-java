// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.catalog.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Entities. */
public final class EntitiesImpl {
    /** The proxy service used to perform REST calls. */
    private final EntitiesService service;

    /** The service client containing this operation class. */
    private final PurviewCatalogClientImpl client;

    /**
     * Initializes an instance of EntitiesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    EntitiesImpl(PurviewCatalogClientImpl client) {
        this.service = RestProxy.create(EntitiesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PurviewCatalogClientEntities to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{Endpoint}/catalog/api")
    @ServiceInterface(name = "PurviewCatalogClient")
    public interface EntitiesService {
        @Post("/atlas/v2/entity")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData entity,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData entity,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/bulk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listByGuids(
                @HostParam("Endpoint") String endpoint,
                @QueryParam(value = "guid", multipleQueryParams = true) List<String> guids,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/bulk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listByGuidsSync(
                @HostParam("Endpoint") String endpoint,
                @QueryParam(value = "guid", multipleQueryParams = true) List<String> guids,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/bulk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateEntities(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData entities,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/bulk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateEntitiesSync(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData entities,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/bulk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteByGuids(
                @HostParam("Endpoint") String endpoint,
                @QueryParam(value = "guid", multipleQueryParams = true) List<String> guids,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/bulk")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteByGuidsSync(
                @HostParam("Endpoint") String endpoint,
                @QueryParam(value = "guid", multipleQueryParams = true) List<String> guids,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/bulk/classification")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addClassification(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData request,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/bulk/classification")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addClassificationSync(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData request,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getByGuid(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getByGuidSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> partialUpdateEntityAttributeByGuid(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @QueryParam("name") String name,
                @BodyParam("application/json") BinaryData body,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> partialUpdateEntityAttributeByGuidSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @QueryParam("name") String name,
                @BodyParam("application/json") BinaryData body,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteByGuid(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteByGuidSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClassification(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @PathParam("classificationName") String classificationName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getClassificationSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @PathParam("classificationName") String classificationName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteClassification(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @PathParam("classificationName") String classificationName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/classification/{classificationName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteClassificationSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @PathParam("classificationName") String classificationName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getClassifications(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getClassificationsSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addClassifications(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @BodyParam("application/json") BinaryData classifications,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addClassificationsSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @BodyParam("application/json") BinaryData classifications,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateClassifications(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @BodyParam("application/json") BinaryData classifications,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/guid/{guid}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updateClassificationsSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @BodyParam("application/json") BinaryData classifications,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getByUniqueAttributes(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getByUniqueAttributesSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> partialUpdateEntityByUniqueAttributes(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @BodyParam("application/json") BinaryData atlasEntityWithExtInfo,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> partialUpdateEntityByUniqueAttributesSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @BodyParam("application/json") BinaryData atlasEntityWithExtInfo,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> deleteByUniqueAttribute(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteByUniqueAttributeSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteClassificationByUniqueAttribute(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @PathParam("classificationName") String classificationName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteClassificationByUniqueAttributeSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @PathParam("classificationName") String classificationName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addClassificationsByUniqueAttribute(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @BodyParam("application/json") BinaryData atlasClassificationArray,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addClassificationsByUniqueAttributeSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @BodyParam("application/json") BinaryData atlasClassificationArray,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateClassificationsByUniqueAttribute(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @BodyParam("application/json") BinaryData atlasClassificationArray,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> updateClassificationsByUniqueAttributeSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @BodyParam("application/json") BinaryData atlasClassificationArray,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/bulk/setClassifications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> setClassifications(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData entityHeaders,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/bulk/setClassifications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> setClassificationsSync(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData entityHeaders,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getEntitiesByUniqueAttributes(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getEntitiesByUniqueAttributesSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getHeader(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/guid/{guid}/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getHeaderSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteBusinessMetadata(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteBusinessMetadataSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addOrUpdateBusinessMetadata(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addOrUpdateBusinessMetadataSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteBusinessMetadataAttributes(
                @HostParam("Endpoint") String endpoint,
                @PathParam("bmName") String bmName,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteBusinessMetadataAttributesSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("bmName") String bmName,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addOrUpdateBusinessMetadataAttributes(
                @HostParam("Endpoint") String endpoint,
                @PathParam("bmName") String bmName,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addOrUpdateBusinessMetadataAttributesSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("bmName") String bmName,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/businessmetadata/import/template")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSampleBusinessMetadataTemplate(
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/atlas/v2/entity/businessmetadata/import/template")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSampleBusinessMetadataTemplateSync(
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        // @Multipart not supported by RestProxy
        @Post("/atlas/v2/entity/businessmetadata/import")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> importBusinessMetadata(
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        // @Multipart not supported by RestProxy
        @Post("/atlas/v2/entity/businessmetadata/import")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> importBusinessMetadataSync(
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteLabels(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteLabelsSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setLabels(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setLabelsSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addLabel(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/guid/{guid}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addLabelSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("guid") String guid,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteLabelsByUniqueAttribute(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                RequestOptions requestOptions,
                Context context);

        @Delete("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteLabelsByUniqueAttributeSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> setLabelsByUniqueAttribute(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                RequestOptions requestOptions,
                Context context);

        @Post("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> setLabelsByUniqueAttributeSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addLabelsByUniqueAttribute(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                RequestOptions requestOptions,
                Context context);

        @Put("/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> addLabelsByUniqueAttributeSync(
                @HostParam("Endpoint") String endpoint,
                @PathParam("typeName") String typeName,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Create or update an entity in Atlas. Existing entity is matched using its unique guid if supplied or by its
     * unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g.,
     * array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param entity Atlas entity with extended information.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(
            BinaryData entity, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.createOrUpdate(this.client.getEndpoint(), entity, accept, requestOptions, context));
    }

    /**
     * Create or update an entity in Atlas. Existing entity is matched using its unique guid if supplied or by its
     * unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g.,
     * array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param entity Atlas entity with extended information.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(BinaryData entity, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), entity, accept, requestOptions, Context.NONE);
    }

    /**
     * List entities in bulk identified by its GUIDs.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     *     <tr><td>excludeRelationshipTypes</td><td>List&lt;String&gt;</td><td>No</td><td>An array of the relationship types need to be excluded from the response. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guids An array of GUIDs of entities to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasEntitiesWithExtInfo along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listByGuidsWithResponseAsync(List<String> guids, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidsConverted =
                guids.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil.withContext(
                context ->
                        service.listByGuids(
                                this.client.getEndpoint(), guidsConverted, accept, requestOptions, context));
    }

    /**
     * List entities in bulk identified by its GUIDs.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     *     <tr><td>excludeRelationshipTypes</td><td>List&lt;String&gt;</td><td>No</td><td>An array of the relationship types need to be excluded from the response. Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guids An array of GUIDs of entities to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasEntitiesWithExtInfo along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listByGuidsWithResponse(List<String> guids, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidsConverted =
                guids.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.listByGuidsSync(this.client.getEndpoint(), guidsConverted, accept, requestOptions, Context.NONE);
    }

    /**
     * Create or update entities in Atlas in bulk. Existing entity is matched using its unique guid if supplied or by
     * its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g.,
     * array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param entities An array of entities to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateEntitiesWithResponseAsync(
            BinaryData entities, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateEntities(
                                this.client.getEndpoint(), entities, accept, requestOptions, context));
    }

    /**
     * Create or update entities in Atlas in bulk. Existing entity is matched using its unique guid if supplied or by
     * its unique attributes eg: qualifiedName. Map and array of collections are not well supported. E.g.,
     * array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param entities An array of entities to create or update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateEntitiesWithResponse(BinaryData entities, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createOrUpdateEntitiesSync(
                this.client.getEndpoint(), entities, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete a list of entities in bulk identified by their GUIDs or unique attributes.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guids An array of GUIDs of entities to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteByGuidsWithResponseAsync(
            List<String> guids, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidsConverted =
                guids.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return FluxUtil.withContext(
                context ->
                        service.deleteByGuids(
                                this.client.getEndpoint(), guidsConverted, accept, requestOptions, context));
    }

    /**
     * Delete a list of entities in bulk identified by their GUIDs or unique attributes.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guids An array of GUIDs of entities to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteByGuidsWithResponse(List<String> guids, RequestOptions requestOptions) {
        final String accept = "application/json";
        List<String> guidsConverted =
                guids.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.deleteByGuidsSync(
                this.client.getEndpoint(), guidsConverted, accept, requestOptions, Context.NONE);
    }

    /**
     * Associate a classification to multiple entities in bulk.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     classification (Optional): {
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param request The request to associate a classification to multiple entities.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationWithResponseAsync(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addClassification(this.client.getEndpoint(), request, accept, requestOptions, context));
    }

    /**
     * Associate a classification to multiple entities in bulk.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     classification (Optional): {
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     *     entityGuids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }</pre>
     *
     * @param request The request to associate a classification to multiple entities.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addClassificationWithResponse(BinaryData request, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addClassificationSync(this.client.getEndpoint(), request, accept, requestOptions, Context.NONE);
    }

    /**
     * Get complete definition of an entity given its GUID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its GUID along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByGuidWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getByGuid(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * Get complete definition of an entity given its GUID.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getByGuidSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Update entity partially - create or update entity attribute identified by its GUID. Supports only primitive
     * attribute type and entity references. It does not support updating complex types like arrays, and maps. Null
     * updates are not possible.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param name The name of the attribute.
     * @param body The value of the attribute.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> partialUpdateEntityAttributeByGuidWithResponseAsync(
            String guid, String name, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.partialUpdateEntityAttributeByGuid(
                                this.client.getEndpoint(), guid, name, body, accept, requestOptions, context));
    }

    /**
     * Update entity partially - create or update entity attribute identified by its GUID. Supports only primitive
     * attribute type and entity references. It does not support updating complex types like arrays, and maps. Null
     * updates are not possible.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param name The name of the attribute.
     * @param body The value of the attribute.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateEntityAttributeByGuidWithResponse(
            String guid, String name, BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.partialUpdateEntityAttributeByGuidSync(
                this.client.getEndpoint(), guid, name, body, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete an entity identified by its GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteByGuidWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.deleteByGuid(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * Delete an entity identified by its GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteByGuidWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteByGuidSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * List classifications for a given entity represented by a GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Optional)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityGuid: String (Optional)
     *     entityStatus: String(ACTIVE/DELETED) (Optional)
     *     removePropagationsOnEntityDelete: Boolean (Optional)
     *     validityPeriods (Optional): [
     *          (Optional){
     *             endTime: String (Optional)
     *             startTime: String (Optional)
     *             timeZone: String (Optional)
     *         }
     *     ]
     *     source: String (Optional)
     *     sourceDetails (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasClassification along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationWithResponseAsync(
            String guid, String classificationName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getClassification(
                                this.client.getEndpoint(), guid, classificationName, accept, requestOptions, context));
    }

    /**
     * List classifications for a given entity represented by a GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Optional)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     entityGuid: String (Optional)
     *     entityStatus: String(ACTIVE/DELETED) (Optional)
     *     removePropagationsOnEntityDelete: Boolean (Optional)
     *     validityPeriods (Optional): [
     *          (Optional){
     *             endTime: String (Optional)
     *             startTime: String (Optional)
     *             timeZone: String (Optional)
     *         }
     *     ]
     *     source: String (Optional)
     *     sourceDetails (Optional): {
     *         String: Object (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasClassification along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationWithResponse(
            String guid, String classificationName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getClassificationSync(
                this.client.getEndpoint(), guid, classificationName, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete a given classification from an existing entity represented by a GUID.
     *
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteClassificationWithResponseAsync(
            String guid, String classificationName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteClassification(
                                this.client.getEndpoint(), guid, classificationName, accept, requestOptions, context));
    }

    /**
     * Delete a given classification from an existing entity represented by a GUID.
     *
     * @param guid The globally unique identifier of the entity.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteClassificationWithResponse(
            String guid, String classificationName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteClassificationSync(
                this.client.getEndpoint(), guid, classificationName, accept, requestOptions, Context.NONE);
    }

    /**
     * List classifications for a given entity represented by a GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     list (Optional): [
     *         Object (Optional)
     *     ]
     *     pageSize: Integer (Optional)
     *     sortBy: String (Optional)
     *     sortType: String(NONE/ASC/DESC) (Optional)
     *     startIndex: Long (Optional)
     *     totalCount: Long (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasClassifications along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationsWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getClassifications(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * List classifications for a given entity represented by a GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     list (Optional): [
     *         Object (Optional)
     *     ]
     *     pageSize: Integer (Optional)
     *     sortBy: String (Optional)
     *     sortType: String(NONE/ASC/DESC) (Optional)
     *     startIndex: Long (Optional)
     *     totalCount: Long (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasClassifications along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationsWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getClassificationsSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Add classifications to an existing entity represented by a GUID.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param classifications An array of classifications to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationsWithResponseAsync(
            String guid, BinaryData classifications, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addClassifications(
                                this.client.getEndpoint(), guid, classifications, accept, requestOptions, context));
    }

    /**
     * Add classifications to an existing entity represented by a GUID.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param classifications An array of classifications to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addClassificationsWithResponse(
            String guid, BinaryData classifications, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addClassificationsSync(
                this.client.getEndpoint(), guid, classifications, accept, requestOptions, Context.NONE);
    }

    /**
     * Update classifications to an existing entity represented by a guid.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param classifications An array of classifications to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClassificationsWithResponseAsync(
            String guid, BinaryData classifications, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.updateClassifications(
                                this.client.getEndpoint(), guid, classifications, accept, requestOptions, context));
    }

    /**
     * Update classifications to an existing entity represented by a guid.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param classifications An array of classifications to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateClassificationsWithResponse(
            String guid, BinaryData classifications, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateClassificationsSync(
                this.client.getEndpoint(), guid, classifications, accept, requestOptions, Context.NONE);
    }

    /**
     * Get complete definition of an entity given its type and unique attribute. In addition to the typeName path
     * parameter, attribute key-value pair(s) can be provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg.
     * qualifiedName. The REST request would look something like this: GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its type and unique attribute. In addition to the typeName path
     *     parameter, attribute key-value pair(s) can be provided in the following format:
     *     attr:\&lt;attrName&gt;=&lt;attrValue&gt; along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getByUniqueAttributesWithResponseAsync(
            String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getByUniqueAttributes(
                                this.client.getEndpoint(), typeName, accept, requestOptions, context));
    }

    /**
     * Get complete definition of an entity given its type and unique attribute. In addition to the typeName path
     * parameter, attribute key-value pair(s) can be provided in the following format:
     * attr:\&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg.
     * qualifiedName. The REST request would look something like this: GET
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return complete definition of an entity given its type and unique attribute. In addition to the typeName path
     *     parameter, attribute key-value pair(s) can be provided in the following format:
     *     attr:\&lt;attrName&gt;=&lt;attrValue&gt; along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getByUniqueAttributesWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getByUniqueAttributesSync(
                this.client.getEndpoint(), typeName, accept, requestOptions, Context.NONE);
    }

    /**
     * Update entity partially - Allow a subset of attributes to be updated on an entity which is identified by its type
     * and unique attribute eg: Referenceable.qualifiedName. Null updates are not possible. In addition to the typeName
     * path parameter, attribute key-value pair(s) can be provided in the following format:
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg.
     * qualifiedName. The REST request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param atlasEntityWithExtInfo Atlas entity with extended information.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> partialUpdateEntityByUniqueAttributesWithResponseAsync(
            String typeName, BinaryData atlasEntityWithExtInfo, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.partialUpdateEntityByUniqueAttributes(
                                this.client.getEndpoint(),
                                typeName,
                                atlasEntityWithExtInfo,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Update entity partially - Allow a subset of attributes to be updated on an entity which is identified by its type
     * and unique attribute eg: Referenceable.qualifiedName. Null updates are not possible. In addition to the typeName
     * path parameter, attribute key-value pair(s) can be provided in the following format:
     * attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg.
     * qualifiedName. The REST request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entity (Optional): (recursive schema, see entity above)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param atlasEntityWithExtInfo Atlas entity with extended information.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> partialUpdateEntityByUniqueAttributesWithResponse(
            String typeName, BinaryData atlasEntityWithExtInfo, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.partialUpdateEntityByUniqueAttributesSync(
                this.client.getEndpoint(), typeName, atlasEntityWithExtInfo, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete an entity identified by its type and unique attributes. In addition to the typeName path parameter,
     * attribute key-value pair(s) can be provided in the following format: attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
     * NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look
     * something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteByUniqueAttributeWithResponseAsync(
            String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteByUniqueAttribute(
                                this.client.getEndpoint(), typeName, accept, requestOptions, context));
    }

    /**
     * Delete an entity identified by its type and unique attributes. In addition to the typeName path parameter,
     * attribute key-value pair(s) can be provided in the following format: attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
     * NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look
     * something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidAssignments (Optional): {
     *         String: String (Optional)
     *     }
     *     mutatedEntities (Optional): {
     *         String (Optional): [
     *              (Optional){
     *                 attributes (Optional): {
     *                     String: Object (Optional)
     *                 }
     *                 typeName: String (Optional)
     *                 lastModifiedTS: String (Optional)
     *                 classificationNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 classifications (Optional): [
     *                      (Optional){
     *                         attributes (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                         typeName: String (Optional)
     *                         lastModifiedTS: String (Optional)
     *                         entityGuid: String (Optional)
     *                         entityStatus: String(ACTIVE/DELETED) (Optional)
     *                         removePropagationsOnEntityDelete: Boolean (Optional)
     *                         validityPeriods (Optional): [
     *                              (Optional){
     *                                 endTime: String (Optional)
     *                                 startTime: String (Optional)
     *                                 timeZone: String (Optional)
     *                             }
     *                         ]
     *                         source: String (Optional)
     *                         sourceDetails (Optional): {
     *                             String: Object (Optional)
     *                         }
     *                     }
     *                 ]
     *                 displayText: String (Optional)
     *                 guid: String (Optional)
     *                 isIncomplete: Boolean (Optional)
     *                 labels (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meaningNames (Optional): [
     *                     String (Optional)
     *                 ]
     *                 meanings (Optional): [
     *                      (Optional){
     *                         confidence: Integer (Optional)
     *                         createdBy: String (Optional)
     *                         description: String (Optional)
     *                         displayText: String (Optional)
     *                         expression: String (Optional)
     *                         relationGuid: String (Optional)
     *                         source: String (Optional)
     *                         status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                         steward: String (Optional)
     *                         termGuid: String (Optional)
     *                     }
     *                 ]
     *                 status: String(ACTIVE/DELETED) (Optional)
     *             }
     *         ]
     *     }
     *     partialUpdatedEntities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entityMutationResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteByUniqueAttributeSync(
                this.client.getEndpoint(), typeName, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete a given classification from an entity identified by its type and unique attributes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param typeName The name of the type.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteClassificationByUniqueAttributeWithResponseAsync(
            String typeName, String classificationName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteClassificationByUniqueAttribute(
                                this.client.getEndpoint(),
                                typeName,
                                classificationName,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Delete a given classification from an entity identified by its type and unique attributes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param typeName The name of the type.
     * @param classificationName The name of the classification.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteClassificationByUniqueAttributeWithResponse(
            String typeName, String classificationName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteClassificationByUniqueAttributeSync(
                this.client.getEndpoint(), typeName, classificationName, accept, requestOptions, Context.NONE);
    }

    /**
     * Add classification to the entity identified by its type and unique attributes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param atlasClassificationArray An array of classification to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addClassificationsByUniqueAttributeWithResponseAsync(
            String typeName, BinaryData atlasClassificationArray, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addClassificationsByUniqueAttribute(
                                this.client.getEndpoint(),
                                typeName,
                                atlasClassificationArray,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Add classification to the entity identified by its type and unique attributes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param atlasClassificationArray An array of classification to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addClassificationsByUniqueAttributeWithResponse(
            String typeName, BinaryData atlasClassificationArray, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.addClassificationsByUniqueAttributeSync(
                this.client.getEndpoint(), typeName, atlasClassificationArray, accept, requestOptions, Context.NONE);
    }

    /**
     * Update classification on an entity identified by its type and unique attributes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param atlasClassificationArray An array of classification to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateClassificationsByUniqueAttributeWithResponseAsync(
            String typeName, BinaryData atlasClassificationArray, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.updateClassificationsByUniqueAttribute(
                                this.client.getEndpoint(),
                                typeName,
                                atlasClassificationArray,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Update classification on an entity identified by its type and unique attributes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         attributes (Optional): {
     *             String: Object (Optional)
     *         }
     *         typeName: String (Optional)
     *         lastModifiedTS: String (Optional)
     *         entityGuid: String (Optional)
     *         entityStatus: String(ACTIVE/DELETED) (Optional)
     *         removePropagationsOnEntityDelete: Boolean (Optional)
     *         validityPeriods (Optional): [
     *              (Optional){
     *                 endTime: String (Optional)
     *                 startTime: String (Optional)
     *                 timeZone: String (Optional)
     *             }
     *         ]
     *         source: String (Optional)
     *         sourceDetails (Optional): {
     *             String: Object (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param atlasClassificationArray An array of classification to be updated.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateClassificationsByUniqueAttributeWithResponse(
            String typeName, BinaryData atlasClassificationArray, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.updateClassificationsByUniqueAttributeSync(
                this.client.getEndpoint(), typeName, atlasClassificationArray, accept, requestOptions, Context.NONE);
    }

    /**
     * Set classifications on entities in bulk.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidHeaderMap (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Required)
     * ]
     * }</pre>
     *
     * @param entityHeaders Atlas entity headers.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response that indicates each classification mutation result along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> setClassificationsWithResponseAsync(
            BinaryData entityHeaders, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.setClassifications(
                                this.client.getEndpoint(), entityHeaders, accept, requestOptions, context));
    }

    /**
     * Set classifications on entities in bulk.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guidHeaderMap (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             classificationNames (Optional): [
     *                 String (Optional)
     *             ]
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             displayText: String (Optional)
     *             guid: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meaningNames (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             status: String(ACTIVE/DELETED) (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Required)
     * ]
     * }</pre>
     *
     * @param entityHeaders Atlas entity headers.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response that indicates each classification mutation result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> setClassificationsWithResponse(
            BinaryData entityHeaders, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.setClassificationsSync(
                this.client.getEndpoint(), entityHeaders, accept, requestOptions, Context.NONE);
    }

    /**
     * Bulk API to retrieve list of entities identified by its unique attributes.
     *
     * <p>In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following
     * format
     *
     * <p>typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
     *
     * <p>NOTE: The attrName should be an unique attribute for the given entity-type
     *
     * <p>The REST request would look something like this
     *
     * <p>GET
     * /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     *     <tr><td>attr_N:qualifiedName</td><td>String</td><td>No</td><td>Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasEntitiesWithExtInfo along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getEntitiesByUniqueAttributesWithResponseAsync(
            String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getEntitiesByUniqueAttributes(
                                this.client.getEndpoint(), typeName, accept, requestOptions, context));
    }

    /**
     * Bulk API to retrieve list of entities identified by its unique attributes.
     *
     * <p>In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following
     * format
     *
     * <p>typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
     *
     * <p>NOTE: The attrName should be an unique attribute for the given entity-type
     *
     * <p>The REST request would look something like this
     *
     * <p>GET
     * /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>minExtInfo</td><td>Boolean</td><td>No</td><td>Whether to return minimal information for referred entities.</td></tr>
     *     <tr><td>ignoreRelationships</td><td>Boolean</td><td>No</td><td>Whether to ignore relationship attributes.</td></tr>
     *     <tr><td>attr_N:qualifiedName</td><td>String</td><td>No</td><td>Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     referredEntities (Optional): {
     *         String (Optional): {
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             businessAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             classifications (Optional): [
     *                  (Optional){
     *                     attributes (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                     typeName: String (Optional)
     *                     lastModifiedTS: String (Optional)
     *                     entityGuid: String (Optional)
     *                     entityStatus: String(ACTIVE/DELETED) (Optional)
     *                     removePropagationsOnEntityDelete: Boolean (Optional)
     *                     validityPeriods (Optional): [
     *                          (Optional){
     *                             endTime: String (Optional)
     *                             startTime: String (Optional)
     *                             timeZone: String (Optional)
     *                         }
     *                     ]
     *                     source: String (Optional)
     *                     sourceDetails (Optional): {
     *                         String: Object (Optional)
     *                     }
     *                 }
     *             ]
     *             createTime: Float (Optional)
     *             createdBy: String (Optional)
     *             customAttributes (Optional): {
     *                 String: String (Optional)
     *             }
     *             guid: String (Optional)
     *             homeId: String (Optional)
     *             isIncomplete: Boolean (Optional)
     *             labels (Optional): [
     *                 String (Optional)
     *             ]
     *             meanings (Optional): [
     *                  (Optional){
     *                     confidence: Integer (Optional)
     *                     createdBy: String (Optional)
     *                     description: String (Optional)
     *                     displayText: String (Optional)
     *                     expression: String (Optional)
     *                     relationGuid: String (Optional)
     *                     source: String (Optional)
     *                     status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *                     steward: String (Optional)
     *                     termGuid: String (Optional)
     *                 }
     *             ]
     *             provenanceType: Float (Optional)
     *             proxy: Boolean (Optional)
     *             relationshipAttributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             status: String(ACTIVE/DELETED) (Optional)
     *             updateTime: Float (Optional)
     *             updatedBy: String (Optional)
     *             version: Float (Optional)
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *             contacts (Optional): {
     *                 String (Optional): [
     *                      (Optional){
     *                         id: String (Optional)
     *                         info: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     }
     *     entities (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return atlasEntitiesWithExtInfo along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEntitiesByUniqueAttributesWithResponse(
            String typeName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getEntitiesByUniqueAttributesSync(
                this.client.getEndpoint(), typeName, accept, requestOptions, Context.NONE);
    }

    /**
     * Get entity header given its GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Optional)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     classificationNames (Optional): [
     *         String (Optional)
     *     ]
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     displayText: String (Optional)
     *     guid: String (Optional)
     *     isIncomplete: Boolean (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     meaningNames (Optional): [
     *         String (Optional)
     *     ]
     *     meanings (Optional): [
     *          (Optional){
     *             confidence: Integer (Optional)
     *             createdBy: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             source: String (Optional)
     *             status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(ACTIVE/DELETED) (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entity header given its GUID along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getHeaderWithResponseAsync(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getHeader(this.client.getEndpoint(), guid, accept, requestOptions, context));
    }

    /**
     * Get entity header given its GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     attributes (Optional): {
     *         String: Object (Optional)
     *     }
     *     typeName: String (Optional)
     *     lastModifiedTS: String (Optional)
     *     classificationNames (Optional): [
     *         String (Optional)
     *     ]
     *     classifications (Optional): [
     *          (Optional){
     *             attributes (Optional): {
     *                 String: Object (Optional)
     *             }
     *             typeName: String (Optional)
     *             lastModifiedTS: String (Optional)
     *             entityGuid: String (Optional)
     *             entityStatus: String(ACTIVE/DELETED) (Optional)
     *             removePropagationsOnEntityDelete: Boolean (Optional)
     *             validityPeriods (Optional): [
     *                  (Optional){
     *                     endTime: String (Optional)
     *                     startTime: String (Optional)
     *                     timeZone: String (Optional)
     *                 }
     *             ]
     *             source: String (Optional)
     *             sourceDetails (Optional): {
     *                 String: Object (Optional)
     *             }
     *         }
     *     ]
     *     displayText: String (Optional)
     *     guid: String (Optional)
     *     isIncomplete: Boolean (Optional)
     *     labels (Optional): [
     *         String (Optional)
     *     ]
     *     meaningNames (Optional): [
     *         String (Optional)
     *     ]
     *     meanings (Optional): [
     *          (Optional){
     *             confidence: Integer (Optional)
     *             createdBy: String (Optional)
     *             description: String (Optional)
     *             displayText: String (Optional)
     *             expression: String (Optional)
     *             relationGuid: String (Optional)
     *             source: String (Optional)
     *             status: String(DISCOVERED/PROPOSED/IMPORTED/VALIDATED/DEPRECATED/OBSOLETE/OTHER) (Optional)
     *             steward: String (Optional)
     *             termGuid: String (Optional)
     *         }
     *     ]
     *     status: String(ACTIVE/DELETED) (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return entity header given its GUID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getHeaderWithResponse(String guid, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getHeaderSync(this.client.getEndpoint(), guid, accept, requestOptions, Context.NONE);
    }

    /**
     * Remove business metadata from an entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBusinessMetadataWithResponseAsync(String guid, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.deleteBusinessMetadata(this.client.getEndpoint(), guid, requestOptions, context));
    }

    /**
     * Remove business metadata from an entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteBusinessMetadataWithResponse(String guid, RequestOptions requestOptions) {
        return service.deleteBusinessMetadataSync(this.client.getEndpoint(), guid, requestOptions, Context.NONE);
    }

    /**
     * Add business metadata to an entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>isOverwrite</td><td>Boolean</td><td>No</td><td>Whether to overwrite the existing business metadata on the entity or not, default is false.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOrUpdateBusinessMetadataWithResponseAsync(
            String guid, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addOrUpdateBusinessMetadata(this.client.getEndpoint(), guid, requestOptions, context));
    }

    /**
     * Add business metadata to an entity.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>isOverwrite</td><td>Boolean</td><td>No</td><td>Whether to overwrite the existing business metadata on the entity or not, default is false.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addOrUpdateBusinessMetadataWithResponse(String guid, RequestOptions requestOptions) {
        return service.addOrUpdateBusinessMetadataSync(this.client.getEndpoint(), guid, requestOptions, Context.NONE);
    }

    /**
     * Delete business metadata attributes from an entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param bmName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBusinessMetadataAttributesWithResponseAsync(
            String bmName, String guid, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteBusinessMetadataAttributes(
                                this.client.getEndpoint(), bmName, guid, requestOptions, context));
    }

    /**
     * Delete business metadata attributes from an entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param bmName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteBusinessMetadataAttributesWithResponse(
            String bmName, String guid, RequestOptions requestOptions) {
        return service.deleteBusinessMetadataAttributesSync(
                this.client.getEndpoint(), bmName, guid, requestOptions, Context.NONE);
    }

    /**
     * Add or update business metadata attributes.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param bmName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOrUpdateBusinessMetadataAttributesWithResponseAsync(
            String bmName, String guid, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addOrUpdateBusinessMetadataAttributes(
                                this.client.getEndpoint(), bmName, guid, requestOptions, context));
    }

    /**
     * Add or update business metadata attributes.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: Object (Optional)
     * }
     * }</pre>
     *
     * @param bmName BusinessMetadata name.
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addOrUpdateBusinessMetadataAttributesWithResponse(
            String bmName, String guid, RequestOptions requestOptions) {
        return service.addOrUpdateBusinessMetadataAttributesSync(
                this.client.getEndpoint(), bmName, guid, requestOptions, Context.NONE);
    }

    /**
     * Get the sample Template for uploading/creating bulk BusinessMetaData.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the sample Template for uploading/creating bulk BusinessMetaData along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSampleBusinessMetadataTemplateWithResponseAsync(
            RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return FluxUtil.withContext(
                context ->
                        service.getSampleBusinessMetadataTemplate(
                                this.client.getEndpoint(), accept, requestOptions, context));
    }

    /**
     * Get the sample Template for uploading/creating bulk BusinessMetaData.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the sample Template for uploading/creating bulk BusinessMetaData along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSampleBusinessMetadataTemplateWithResponse(RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return service.getSampleBusinessMetadataTemplateSync(
                this.client.getEndpoint(), accept, requestOptions, Context.NONE);
    }

    /**
     * Upload the file for creating Business Metadata in BULK.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "multipart/form-data".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedImportInfoList (Optional): [
     *          (Optional){
     *             childObjectName: String (Optional)
     *             importStatus: String(SUCCESS/FAILED) (Optional)
     *             parentObjectName: String (Optional)
     *             remarks: String (Optional)
     *         }
     *     ]
     *     successImportInfoList (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return bulkImportResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> importBusinessMetadataWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.importBusinessMetadata(this.client.getEndpoint(), accept, requestOptions, context));
    }

    /**
     * Upload the file for creating Business Metadata in BULK.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "multipart/form-data".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedImportInfoList (Optional): [
     *          (Optional){
     *             childObjectName: String (Optional)
     *             importStatus: String(SUCCESS/FAILED) (Optional)
     *             parentObjectName: String (Optional)
     *             remarks: String (Optional)
     *         }
     *     ]
     *     successImportInfoList (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return bulkImportResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> importBusinessMetadataWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.importBusinessMetadataSync(this.client.getEndpoint(), accept, requestOptions, Context.NONE);
    }

    /**
     * delete given labels to a given entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLabelsWithResponseAsync(String guid, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.deleteLabels(this.client.getEndpoint(), guid, requestOptions, context));
    }

    /**
     * delete given labels to a given entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLabelsWithResponse(String guid, RequestOptions requestOptions) {
        return service.deleteLabelsSync(this.client.getEndpoint(), guid, requestOptions, Context.NONE);
    }

    /**
     * Set labels to a given entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLabelsWithResponseAsync(String guid, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.setLabels(this.client.getEndpoint(), guid, requestOptions, context));
    }

    /**
     * Set labels to a given entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setLabelsWithResponse(String guid, RequestOptions requestOptions) {
        return service.setLabelsSync(this.client.getEndpoint(), guid, requestOptions, Context.NONE);
    }

    /**
     * add given labels to a given entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addLabelWithResponseAsync(String guid, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.addLabel(this.client.getEndpoint(), guid, requestOptions, context));
    }

    /**
     * add given labels to a given entity.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param guid The globally unique identifier of the entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addLabelWithResponse(String guid, RequestOptions requestOptions) {
        return service.addLabelSync(this.client.getEndpoint(), guid, requestOptions, Context.NONE);
    }

    /**
     * Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no
     * labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing
     * labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided
     * in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be
     * unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLabelsByUniqueAttributeWithResponseAsync(
            String typeName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteLabelsByUniqueAttribute(
                                this.client.getEndpoint(), typeName, requestOptions, context));
    }

    /**
     * Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no
     * labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing
     * labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided
     * in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be
     * unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        return service.deleteLabelsByUniqueAttributeSync(
                this.client.getEndpoint(), typeName, requestOptions, Context.NONE);
    }

    /**
     * Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing
     * labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue
     * should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> setLabelsByUniqueAttributeWithResponseAsync(
            String typeName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.setLabelsByUniqueAttribute(
                                this.client.getEndpoint(), typeName, requestOptions, context));
    }

    /**
     * Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing
     * labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be
     * provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue
     * should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> setLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        return service.setLabelsByUniqueAttributeSync(
                this.client.getEndpoint(), typeName, requestOptions, Context.NONE);
    }

    /**
     * Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no
     * labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in
     * the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique
     * across entities, eg. qualifiedName. The REST request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addLabelsByUniqueAttributeWithResponseAsync(
            String typeName, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addLabelsByUniqueAttribute(
                                this.client.getEndpoint(), typeName, requestOptions, context));
    }

    /**
     * Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no
     * labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in
     * the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique
     * across entities, eg. qualifiedName. The REST request would look something like this: PUT
     * /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>attr:qualifiedName</td><td>String</td><td>No</td><td>The qualified name of the entity</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String (Optional)
     * ]
     * }</pre>
     *
     * @param typeName The name of the type.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addLabelsByUniqueAttributeWithResponse(String typeName, RequestOptions requestOptions) {
        return service.addLabelsByUniqueAttributeSync(
                this.client.getEndpoint(), typeName, requestOptions, Context.NONE);
    }
}
