// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.analytics.purview.catalog;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.experimental.http.DynamicRequest;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.util.serializer.ObjectSerializer;

/** Initializes a new instance of the GlossaryBaseClient type. */
@ServiceClient(builder = PurviewCatalogClientBuilder.class)
public final class GlossaryBaseClient {
    private final String endpoint;

    private final String apiVersion;

    private final HttpPipeline httpPipeline;

    private final ObjectSerializer serializer;

    /**
     * Initializes an instance of GlossaryBaseClient client.
     *
     * @param endpoint The catalog endpoint of your Purview account. Example:
     *     https://{accountName}.catalog.purview.azure.com.
     * @param apiVersion Api Version.
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializer The serializer to serialize an object into a string.
     */
    GlossaryBaseClient(String endpoint, String apiVersion, HttpPipeline httpPipeline, ObjectSerializer serializer) {
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.httpPipeline = httpPipeline;
        this.serializer = serializer;
    }

    /**
     * Get all glossaries registered with Atlas.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         classifications: [
     *             {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *                 entityGuid: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 removePropagationsOnEntityDelete: Boolean
     *                 validityPeriods: [
     *                     {
     *                         endTime: String
     *                         startTime: String
     *                         timeZone: String
     *                     }
     *                 ]
     *                 source: String
     *                 sourceDetails: {
     *                     String: Object
     *                 }
     *             }
     *         ]
     *         longDescription: String
     *         name: String
     *         qualifiedName: String
     *         shortDescription: String
     *         lastModifiedTS: String
     *         categories: [
     *             {
     *                 categoryGuid: String
     *                 description: String
     *                 displayText: String
     *                 parentCategoryGuid: String
     *                 relationGuid: String
     *             }
     *         ]
     *         language: String
     *         terms: [
     *             {
     *                 description: String
     *                 displayText: String
     *                 expression: String
     *                 relationGuid: String
     *                 source: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *                 steward: String
     *                 termGuid: String
     *             }
     *         ]
     *         usage: String
     *     }
     * ]
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listGlossaries() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary")
                .setPathParam("Endpoint", endpoint)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Create a glossary.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     language: String
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     usage: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest createGlossary() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary")
                .setPathParam("Endpoint", endpoint)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Create glossary category in bulk.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         classifications: [
     *             {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *                 entityGuid: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 removePropagationsOnEntityDelete: Boolean
     *                 validityPeriods: [
     *                     {
     *                         endTime: String
     *                         startTime: String
     *                         timeZone: String
     *                     }
     *                 ]
     *                 source: String
     *                 sourceDetails: {
     *                     String: Object
     *                 }
     *             }
     *         ]
     *         longDescription: String
     *         name: String
     *         qualifiedName: String
     *         shortDescription: String
     *         lastModifiedTS: String
     *         anchor: {
     *             displayText: String
     *             glossaryGuid: String
     *             relationGuid: String
     *         }
     *         childrenCategories: [
     *             {
     *                 categoryGuid: String
     *                 description: String
     *                 displayText: String
     *                 parentCategoryGuid: String
     *                 relationGuid: String
     *             }
     *         ]
     *         parentCategory: (recursive schema, see parentCategory above)
     *         terms: [
     *             {
     *                 description: String
     *                 displayText: String
     *                 expression: String
     *                 relationGuid: String
     *                 source: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *                 steward: String
     *                 termGuid: String
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     (recursive schema, see above)
     * ]
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest createGlossaryCategories() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/categories")
                .setPathParam("Endpoint", endpoint)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Create a glossary category.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     childrenCategories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     parentCategory: (recursive schema, see parentCategory above)
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest createGlossaryCategory() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/category")
                .setPathParam("Endpoint", endpoint)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Get specific glossary category by its GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     childrenCategories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     parentCategory: (recursive schema, see parentCategory above)
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param categoryGuid The globally unique identifier of the category.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getGlossaryCategory(String categoryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/category/{categoryGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("categoryGuid", categoryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Update the given glossary category by its GUID.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     childrenCategories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     parentCategory: (recursive schema, see parentCategory above)
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param categoryGuid The globally unique identifier of the category.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest updateGlossaryCategory(String categoryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/category/{categoryGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("categoryGuid", categoryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Delete a glossary category.
     *
     * @param categoryGuid The globally unique identifier of the category.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest deleteGlossaryCategory(String categoryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/category/{categoryGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("categoryGuid", categoryGuid)
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json;q=0.9")
                .setHttpMethod(HttpMethod.DELETE);
    }

    /**
     * Update the glossary category partially.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     childrenCategories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     parentCategory: (recursive schema, see parentCategory above)
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param categoryGuid The globally unique identifier of the category.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest partialUpdateGlossaryCategory(String categoryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/category/{categoryGuid}/partial")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("categoryGuid", categoryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being
     * enabled and won't work even they are passed.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param categoryGuid The globally unique identifier of the category.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listRelatedCategories(String categoryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/category/{categoryGuid}/related")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("categoryGuid", categoryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get all terms associated with the specific category.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         description: String
     *         displayText: String
     *         expression: String
     *         relationGuid: String
     *         source: String
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *         steward: String
     *         termGuid: String
     *     }
     * ]
     * }</pre>
     *
     * @param categoryGuid The globally unique identifier of the category.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listCategoryTerms(String categoryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/category/{categoryGuid}/terms")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("categoryGuid", categoryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Create a glossary term.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     abbreviation: String
     *     templateName: [
     *         Object
     *     ]
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     antonyms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     createTime: Float
     *     createdBy: String
     *     updateTime: Float
     *     updatedBy: String
     *     status: String(Draft/Approved/Alert/Expired)
     *     resources: [
     *         {
     *             displayName: String
     *             url: String
     *         }
     *     ]
     *     contacts: {
     *         String: [
     *             {
     *                 id: String
     *                 info: String
     *             }
     *         ]
     *     }
     *     attributes: {
     *         String: {
     *             String: Object
     *         }
     *     }
     *     assignedEntities: [
     *         {
     *             guid: String
     *             typeName: String
     *             uniqueAttributes: {
     *                 String: Object
     *             }
     *             displayText: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             relationshipType: String
     *             relationshipAttributes: {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *             }
     *             relationshipGuid: String
     *             relationshipStatus: String(ACTIVE/DELETED)
     *         }
     *     ]
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             relationGuid: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *         }
     *     ]
     *     classifies: [
     *         (recursive schema, see above)
     *     ]
     *     examples: [
     *         String
     *     ]
     *     isA: [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms: [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms: [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy: [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms: [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso: [
     *         (recursive schema, see above)
     *     ]
     *     synonyms: [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms: [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms: [
     *         (recursive schema, see above)
     *     ]
     *     usage: String
     *     validValues: [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor: [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest createGlossaryTerm() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/term")
                .setPathParam("Endpoint", endpoint)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Get a specific glossary term by its GUID.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     abbreviation: String
     *     templateName: [
     *         Object
     *     ]
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     antonyms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     createTime: Float
     *     createdBy: String
     *     updateTime: Float
     *     updatedBy: String
     *     status: String(Draft/Approved/Alert/Expired)
     *     resources: [
     *         {
     *             displayName: String
     *             url: String
     *         }
     *     ]
     *     contacts: {
     *         String: [
     *             {
     *                 id: String
     *                 info: String
     *             }
     *         ]
     *     }
     *     attributes: {
     *         String: {
     *             String: Object
     *         }
     *     }
     *     assignedEntities: [
     *         {
     *             guid: String
     *             typeName: String
     *             uniqueAttributes: {
     *                 String: Object
     *             }
     *             displayText: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             relationshipType: String
     *             relationshipAttributes: {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *             }
     *             relationshipGuid: String
     *             relationshipStatus: String(ACTIVE/DELETED)
     *         }
     *     ]
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             relationGuid: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *         }
     *     ]
     *     classifies: [
     *         (recursive schema, see above)
     *     ]
     *     examples: [
     *         String
     *     ]
     *     isA: [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms: [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms: [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy: [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms: [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso: [
     *         (recursive schema, see above)
     *     ]
     *     synonyms: [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms: [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms: [
     *         (recursive schema, see above)
     *     ]
     *     usage: String
     *     validValues: [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor: [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getGlossaryTerm(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/term/{termGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Update the given glossary term by its GUID.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     abbreviation: String
     *     templateName: [
     *         Object
     *     ]
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     antonyms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     createTime: Float
     *     createdBy: String
     *     updateTime: Float
     *     updatedBy: String
     *     status: String(Draft/Approved/Alert/Expired)
     *     resources: [
     *         {
     *             displayName: String
     *             url: String
     *         }
     *     ]
     *     contacts: {
     *         String: [
     *             {
     *                 id: String
     *                 info: String
     *             }
     *         ]
     *     }
     *     attributes: {
     *         String: {
     *             String: Object
     *         }
     *     }
     *     assignedEntities: [
     *         {
     *             guid: String
     *             typeName: String
     *             uniqueAttributes: {
     *                 String: Object
     *             }
     *             displayText: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             relationshipType: String
     *             relationshipAttributes: {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *             }
     *             relationshipGuid: String
     *             relationshipStatus: String(ACTIVE/DELETED)
     *         }
     *     ]
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             relationGuid: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *         }
     *     ]
     *     classifies: [
     *         (recursive schema, see above)
     *     ]
     *     examples: [
     *         String
     *     ]
     *     isA: [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms: [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms: [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy: [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms: [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso: [
     *         (recursive schema, see above)
     *     ]
     *     synonyms: [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms: [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms: [
     *         (recursive schema, see above)
     *     ]
     *     usage: String
     *     validValues: [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor: [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest updateGlossaryTerm(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/term/{termGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Delete a glossary term.
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest deleteGlossaryTerm(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/term/{termGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json;q=0.9")
                .setHttpMethod(HttpMethod.DELETE);
    }

    /**
     * Update the glossary term partially.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     abbreviation: String
     *     templateName: [
     *         Object
     *     ]
     *     anchor: {
     *         displayText: String
     *         glossaryGuid: String
     *         relationGuid: String
     *     }
     *     antonyms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     createTime: Float
     *     createdBy: String
     *     updateTime: Float
     *     updatedBy: String
     *     status: String(Draft/Approved/Alert/Expired)
     *     resources: [
     *         {
     *             displayName: String
     *             url: String
     *         }
     *     ]
     *     contacts: {
     *         String: [
     *             {
     *                 id: String
     *                 info: String
     *             }
     *         ]
     *     }
     *     attributes: {
     *         String: {
     *             String: Object
     *         }
     *     }
     *     assignedEntities: [
     *         {
     *             guid: String
     *             typeName: String
     *             uniqueAttributes: {
     *                 String: Object
     *             }
     *             displayText: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             relationshipType: String
     *             relationshipAttributes: {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *             }
     *             relationshipGuid: String
     *             relationshipStatus: String(ACTIVE/DELETED)
     *         }
     *     ]
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             relationGuid: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *         }
     *     ]
     *     classifies: [
     *         (recursive schema, see above)
     *     ]
     *     examples: [
     *         String
     *     ]
     *     isA: [
     *         (recursive schema, see above)
     *     ]
     *     preferredTerms: [
     *         (recursive schema, see above)
     *     ]
     *     preferredToTerms: [
     *         (recursive schema, see above)
     *     ]
     *     replacedBy: [
     *         (recursive schema, see above)
     *     ]
     *     replacementTerms: [
     *         (recursive schema, see above)
     *     ]
     *     seeAlso: [
     *         (recursive schema, see above)
     *     ]
     *     synonyms: [
     *         (recursive schema, see above)
     *     ]
     *     translatedTerms: [
     *         (recursive schema, see above)
     *     ]
     *     translationTerms: [
     *         (recursive schema, see above)
     *     ]
     *     usage: String
     *     validValues: [
     *         (recursive schema, see above)
     *     ]
     *     validValuesFor: [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest partialUpdateGlossaryTerm(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/term/{termGuid}/partial")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Create glossary terms in bulk.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         classifications: [
     *             {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *                 entityGuid: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 removePropagationsOnEntityDelete: Boolean
     *                 validityPeriods: [
     *                     {
     *                         endTime: String
     *                         startTime: String
     *                         timeZone: String
     *                     }
     *                 ]
     *                 source: String
     *                 sourceDetails: {
     *                     String: Object
     *                 }
     *             }
     *         ]
     *         longDescription: String
     *         name: String
     *         qualifiedName: String
     *         shortDescription: String
     *         lastModifiedTS: String
     *         abbreviation: String
     *         templateName: [
     *             Object
     *         ]
     *         anchor: {
     *             displayText: String
     *             glossaryGuid: String
     *             relationGuid: String
     *         }
     *         antonyms: [
     *             {
     *                 description: String
     *                 displayText: String
     *                 expression: String
     *                 relationGuid: String
     *                 source: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *                 steward: String
     *                 termGuid: String
     *             }
     *         ]
     *         createTime: Float
     *         createdBy: String
     *         updateTime: Float
     *         updatedBy: String
     *         status: String(Draft/Approved/Alert/Expired)
     *         resources: [
     *             {
     *                 displayName: String
     *                 url: String
     *             }
     *         ]
     *         contacts: {
     *             String: [
     *                 {
     *                     id: String
     *                     info: String
     *                 }
     *             ]
     *         }
     *         attributes: {
     *             String: {
     *                 String: Object
     *             }
     *         }
     *         assignedEntities: [
     *             {
     *                 guid: String
     *                 typeName: String
     *                 uniqueAttributes: {
     *                     String: Object
     *                 }
     *                 displayText: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 relationshipType: String
     *                 relationshipAttributes: {
     *                     attributes: {
     *                         String: Object
     *                     }
     *                     typeName: String
     *                     lastModifiedTS: String
     *                 }
     *                 relationshipGuid: String
     *                 relationshipStatus: String(ACTIVE/DELETED)
     *             }
     *         ]
     *         categories: [
     *             {
     *                 categoryGuid: String
     *                 description: String
     *                 displayText: String
     *                 relationGuid: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             }
     *         ]
     *         classifies: [
     *             (recursive schema, see above)
     *         ]
     *         examples: [
     *             String
     *         ]
     *         isA: [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms: [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms: [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy: [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms: [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso: [
     *             (recursive schema, see above)
     *         ]
     *         synonyms: [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms: [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms: [
     *             (recursive schema, see above)
     *         ]
     *         usage: String
     *         validValues: [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor: [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     (recursive schema, see above)
     * ]
     * }</pre>
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest createGlossaryTerms() {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/terms")
                .setPathParam("Endpoint", endpoint)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Get all related objects assigned with the specified term.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         typeName: String
     *         uniqueAttributes: {
     *             String: Object
     *         }
     *         displayText: String
     *         entityStatus: String(ACTIVE/DELETED)
     *         relationshipType: String
     *         relationshipAttributes: {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *         }
     *         relationshipGuid: String
     *         relationshipStatus: String(ACTIVE/DELETED)
     *     }
     * ]
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getEntitiesAssignedWithTerm(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Assign the given term to the provided list of related objects.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         typeName: String
     *         uniqueAttributes: {
     *             String: Object
     *         }
     *         displayText: String
     *         entityStatus: String(ACTIVE/DELETED)
     *         relationshipType: String
     *         relationshipAttributes: {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *         }
     *         relationshipGuid: String
     *         relationshipStatus: String(ACTIVE/DELETED)
     *     }
     * ]
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest assignTermToEntities(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json;q=0.9")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Delete the term assignment for the given list of related objects.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         typeName: String
     *         uniqueAttributes: {
     *             String: Object
     *         }
     *         displayText: String
     *         entityStatus: String(ACTIVE/DELETED)
     *         relationshipType: String
     *         relationshipAttributes: {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *         }
     *         relationshipGuid: String
     *         relationshipStatus: String(ACTIVE/DELETED)
     *     }
     * ]
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest removeTermAssignmentFromEntities(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json;q=0.9")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Delete the term assignment for the given list of related objects.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         typeName: String
     *         uniqueAttributes: {
     *             String: Object
     *         }
     *         displayText: String
     *         entityStatus: String(ACTIVE/DELETED)
     *         relationshipType: String
     *         relationshipAttributes: {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *         }
     *         relationshipGuid: String
     *         relationshipStatus: String(ACTIVE/DELETED)
     *     }
     * ]
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest deleteTermAssignmentFromEntities(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/terms/{termGuid}/assignedEntities")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json;q=0.9")
                .setHttpMethod(HttpMethod.DELETE);
    }

    /**
     * Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being
     * enabled and won't work even they are passed.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param termGuid The globally unique identifier for glossary term.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listRelatedTerms(String termGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/terms/{termGuid}/related")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("termGuid", termGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get a specific Glossary by its GUID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     language: String
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     usage: String
     * }
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getGlossary(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Update the given glossary.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     language: String
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     usage: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * (recursive schema, see above)
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest updateGlossary(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Delete a glossary.
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest deleteGlossary(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json;q=0.9")
                .setHttpMethod(HttpMethod.DELETE);
    }

    /**
     * Get the categories belonging to a specific glossary.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         classifications: [
     *             {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *                 entityGuid: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 removePropagationsOnEntityDelete: Boolean
     *                 validityPeriods: [
     *                     {
     *                         endTime: String
     *                         startTime: String
     *                         timeZone: String
     *                     }
     *                 ]
     *                 source: String
     *                 sourceDetails: {
     *                     String: Object
     *                 }
     *             }
     *         ]
     *         longDescription: String
     *         name: String
     *         qualifiedName: String
     *         shortDescription: String
     *         lastModifiedTS: String
     *         anchor: {
     *             displayText: String
     *             glossaryGuid: String
     *             relationGuid: String
     *         }
     *         childrenCategories: [
     *             {
     *                 categoryGuid: String
     *                 description: String
     *                 displayText: String
     *                 parentCategoryGuid: String
     *                 relationGuid: String
     *             }
     *         ]
     *         parentCategory: (recursive schema, see parentCategory above)
     *         terms: [
     *             {
     *                 description: String
     *                 displayText: String
     *                 expression: String
     *                 relationGuid: String
     *                 source: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *                 steward: String
     *                 termGuid: String
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listGlossaryCategories(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}/categories")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get the category headers belonging to a specific glossary.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         categoryGuid: String
     *         description: String
     *         displayText: String
     *         parentCategoryGuid: String
     *         relationGuid: String
     *     }
     * ]
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listGlossaryCategoriesHeaders(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}/categories/headers")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get a specific glossary with detailed information.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     language: String
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     usage: String
     *     categoryInfo: {
     *         String: {
     *             guid: String
     *             classifications: [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String
     *             name: String
     *             qualifiedName: String
     *             shortDescription: String
     *             lastModifiedTS: String
     *             anchor: {
     *                 displayText: String
     *                 glossaryGuid: String
     *                 relationGuid: String
     *             }
     *             childrenCategories: [
     *                 (recursive schema, see above)
     *             ]
     *             parentCategory: (recursive schema, see parentCategory above)
     *             terms: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     termInfo: {
     *         String: {
     *             guid: String
     *             classifications: [
     *                 (recursive schema, see above)
     *             ]
     *             longDescription: String
     *             name: String
     *             qualifiedName: String
     *             shortDescription: String
     *             lastModifiedTS: String
     *             abbreviation: String
     *             templateName: [
     *                 Object
     *             ]
     *             anchor: (recursive schema, see anchor above)
     *             antonyms: [
     *                 (recursive schema, see above)
     *             ]
     *             createTime: Float
     *             createdBy: String
     *             updateTime: Float
     *             updatedBy: String
     *             status: String(Draft/Approved/Alert/Expired)
     *             resources: [
     *                 {
     *                     displayName: String
     *                     url: String
     *                 }
     *             ]
     *             contacts: {
     *                 String: [
     *                     {
     *                         id: String
     *                         info: String
     *                     }
     *                 ]
     *             }
     *             attributes: {
     *                 String: {
     *                     String: Object
     *                 }
     *             }
     *             assignedEntities: [
     *                 {
     *                     guid: String
     *                     typeName: String
     *                     uniqueAttributes: {
     *                         String: Object
     *                     }
     *                     displayText: String
     *                     entityStatus: String(ACTIVE/DELETED)
     *                     relationshipType: String
     *                     relationshipAttributes: {
     *                         attributes: {
     *                             String: Object
     *                         }
     *                         typeName: String
     *                         lastModifiedTS: String
     *                     }
     *                     relationshipGuid: String
     *                     relationshipStatus: String(ACTIVE/DELETED)
     *                 }
     *             ]
     *             categories: [
     *                 {
     *                     categoryGuid: String
     *                     description: String
     *                     displayText: String
     *                     relationGuid: String
     *                     status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *                 }
     *             ]
     *             classifies: [
     *                 (recursive schema, see above)
     *             ]
     *             examples: [
     *                 String
     *             ]
     *             isA: [
     *                 (recursive schema, see above)
     *             ]
     *             preferredTerms: [
     *                 (recursive schema, see above)
     *             ]
     *             preferredToTerms: [
     *                 (recursive schema, see above)
     *             ]
     *             replacedBy: [
     *                 (recursive schema, see above)
     *             ]
     *             replacementTerms: [
     *                 (recursive schema, see above)
     *             ]
     *             seeAlso: [
     *                 (recursive schema, see above)
     *             ]
     *             synonyms: [
     *                 (recursive schema, see above)
     *             ]
     *             translatedTerms: [
     *                 (recursive schema, see above)
     *             ]
     *             translationTerms: [
     *                 (recursive schema, see above)
     *             ]
     *             usage: String
     *             validValues: [
     *                 (recursive schema, see above)
     *             ]
     *             validValuesFor: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getDetailedGlossary(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}/detailed")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     String: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     guid: String
     *     classifications: [
     *         {
     *             attributes: {
     *                 String: Object
     *             }
     *             typeName: String
     *             lastModifiedTS: String
     *             entityGuid: String
     *             entityStatus: String(ACTIVE/DELETED)
     *             removePropagationsOnEntityDelete: Boolean
     *             validityPeriods: [
     *                 {
     *                     endTime: String
     *                     startTime: String
     *                     timeZone: String
     *                 }
     *             ]
     *             source: String
     *             sourceDetails: {
     *                 String: Object
     *             }
     *         }
     *     ]
     *     longDescription: String
     *     name: String
     *     qualifiedName: String
     *     shortDescription: String
     *     lastModifiedTS: String
     *     categories: [
     *         {
     *             categoryGuid: String
     *             description: String
     *             displayText: String
     *             parentCategoryGuid: String
     *             relationGuid: String
     *         }
     *     ]
     *     language: String
     *     terms: [
     *         {
     *             description: String
     *             displayText: String
     *             expression: String
     *             relationGuid: String
     *             source: String
     *             status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             steward: String
     *             termGuid: String
     *         }
     *     ]
     *     usage: String
     * }
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest partialUpdateGlossary(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}/partial")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.PUT);
    }

    /**
     * Get terms belonging to a specific glossary.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         classifications: [
     *             {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *                 entityGuid: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 removePropagationsOnEntityDelete: Boolean
     *                 validityPeriods: [
     *                     {
     *                         endTime: String
     *                         startTime: String
     *                         timeZone: String
     *                     }
     *                 ]
     *                 source: String
     *                 sourceDetails: {
     *                     String: Object
     *                 }
     *             }
     *         ]
     *         longDescription: String
     *         name: String
     *         qualifiedName: String
     *         shortDescription: String
     *         lastModifiedTS: String
     *         abbreviation: String
     *         templateName: [
     *             Object
     *         ]
     *         anchor: {
     *             displayText: String
     *             glossaryGuid: String
     *             relationGuid: String
     *         }
     *         antonyms: [
     *             {
     *                 description: String
     *                 displayText: String
     *                 expression: String
     *                 relationGuid: String
     *                 source: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *                 steward: String
     *                 termGuid: String
     *             }
     *         ]
     *         createTime: Float
     *         createdBy: String
     *         updateTime: Float
     *         updatedBy: String
     *         status: String(Draft/Approved/Alert/Expired)
     *         resources: [
     *             {
     *                 displayName: String
     *                 url: String
     *             }
     *         ]
     *         contacts: {
     *             String: [
     *                 {
     *                     id: String
     *                     info: String
     *                 }
     *             ]
     *         }
     *         attributes: {
     *             String: {
     *                 String: Object
     *             }
     *         }
     *         assignedEntities: [
     *             {
     *                 guid: String
     *                 typeName: String
     *                 uniqueAttributes: {
     *                     String: Object
     *                 }
     *                 displayText: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 relationshipType: String
     *                 relationshipAttributes: {
     *                     attributes: {
     *                         String: Object
     *                     }
     *                     typeName: String
     *                     lastModifiedTS: String
     *                 }
     *                 relationshipGuid: String
     *                 relationshipStatus: String(ACTIVE/DELETED)
     *             }
     *         ]
     *         categories: [
     *             {
     *                 categoryGuid: String
     *                 description: String
     *                 displayText: String
     *                 relationGuid: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             }
     *         ]
     *         classifies: [
     *             (recursive schema, see above)
     *         ]
     *         examples: [
     *             String
     *         ]
     *         isA: [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms: [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms: [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy: [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms: [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso: [
     *             (recursive schema, see above)
     *         ]
     *         synonyms: [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms: [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms: [
     *             (recursive schema, see above)
     *         ]
     *         usage: String
     *         validValues: [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor: [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listGlossaryTerms(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}/terms")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Get term headers belonging to a specific glossary.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>sort</td><td>String</td><td>The sort order, ASC (default) or DESC.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         description: String
     *         displayText: String
     *         expression: String
     *         relationGuid: String
     *         source: String
     *         status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *         steward: String
     *         termGuid: String
     *     }
     * ]
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listGlossaryTermHeaders(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/atlas/v2/glossary/{glossaryGuid}/terms/headers")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Import Glossary Terms from local csv file.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     status: String(NotStarted/Succeeded/Failed/Running)
     *     createTime: String
     *     lastUpdateTime: String
     *     errorCode: Integer
     *     errorMessage: String
     *     importedTerms: String
     *     totalTermsDetected: String
     * }
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @param contentLength The contentLength parameter.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest importGlossaryTermsViaCsv(String glossaryGuid, long contentLength) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/glossary/{glossaryGuid}/terms/import")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Content-Length", String.valueOf(contentLength))
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "multipart/form-data")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Import Glossary Terms from local csv file by glossaryName.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     status: String(NotStarted/Succeeded/Failed/Running)
     *     createTime: String
     *     lastUpdateTime: String
     *     errorCode: Integer
     *     errorMessage: String
     *     importedTerms: String
     *     totalTermsDetected: String
     * }
     * }</pre>
     *
     * @param glossaryName The name of the glossary.
     * @param contentLength The contentLength parameter.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest importGlossaryTermsViaCsvByGlossaryName(String glossaryName, long contentLength) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/glossary/name/{glossaryName}/terms/import")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryName", glossaryName)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Content-Length", String.valueOf(contentLength))
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "multipart/form-data")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Get the status of import csv operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     status: String(NotStarted/Succeeded/Failed/Running)
     *     createTime: String
     *     lastUpdateTime: String
     *     errorCode: Integer
     *     errorMessage: String
     *     importedTerms: String
     *     totalTermsDetected: String
     * }
     * }</pre>
     *
     * @param operationGuid The globally unique identifier for async operation/job.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest getImportCsvOperationStatus(String operationGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/glossary/terms/import/{operationGuid}")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("operationGuid", operationGuid)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Export Glossary Terms as csv file.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     String
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * @param glossaryGuid The globally unique identifier for glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest exportGlossaryTermsAsCsv(String glossaryGuid) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/glossary/{glossaryGuid}/terms/export")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryGuid", glossaryGuid)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "text/csv")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.POST);
    }

    /**
     * Get terms by glossary name.
     *
     * <p><strong>Optional Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>limit</td><td>Integer</td><td>The page size - by default there is no paging.</td></tr>
     *     <tr><td>offset</td><td>Integer</td><td>The offset for pagination purpose.</td></tr>
     *     <tr><td>includeTermHierarchy</td><td>Boolean</td><td>Whether include term hierarchy</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         guid: String
     *         classifications: [
     *             {
     *                 attributes: {
     *                     String: Object
     *                 }
     *                 typeName: String
     *                 lastModifiedTS: String
     *                 entityGuid: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 removePropagationsOnEntityDelete: Boolean
     *                 validityPeriods: [
     *                     {
     *                         endTime: String
     *                         startTime: String
     *                         timeZone: String
     *                     }
     *                 ]
     *                 source: String
     *                 sourceDetails: {
     *                     String: Object
     *                 }
     *             }
     *         ]
     *         longDescription: String
     *         name: String
     *         qualifiedName: String
     *         shortDescription: String
     *         lastModifiedTS: String
     *         abbreviation: String
     *         templateName: [
     *             Object
     *         ]
     *         anchor: {
     *             displayText: String
     *             glossaryGuid: String
     *             relationGuid: String
     *         }
     *         antonyms: [
     *             {
     *                 description: String
     *                 displayText: String
     *                 expression: String
     *                 relationGuid: String
     *                 source: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *                 steward: String
     *                 termGuid: String
     *             }
     *         ]
     *         createTime: Float
     *         createdBy: String
     *         updateTime: Float
     *         updatedBy: String
     *         status: String(Draft/Approved/Alert/Expired)
     *         resources: [
     *             {
     *                 displayName: String
     *                 url: String
     *             }
     *         ]
     *         contacts: {
     *             String: [
     *                 {
     *                     id: String
     *                     info: String
     *                 }
     *             ]
     *         }
     *         attributes: {
     *             String: {
     *                 String: Object
     *             }
     *         }
     *         assignedEntities: [
     *             {
     *                 guid: String
     *                 typeName: String
     *                 uniqueAttributes: {
     *                     String: Object
     *                 }
     *                 displayText: String
     *                 entityStatus: String(ACTIVE/DELETED)
     *                 relationshipType: String
     *                 relationshipAttributes: {
     *                     attributes: {
     *                         String: Object
     *                     }
     *                     typeName: String
     *                     lastModifiedTS: String
     *                 }
     *                 relationshipGuid: String
     *                 relationshipStatus: String(ACTIVE/DELETED)
     *             }
     *         ]
     *         categories: [
     *             {
     *                 categoryGuid: String
     *                 description: String
     *                 displayText: String
     *                 relationGuid: String
     *                 status: String(DRAFT/ACTIVE/DEPRECATED/OBSOLETE/OTHER)
     *             }
     *         ]
     *         classifies: [
     *             (recursive schema, see above)
     *         ]
     *         examples: [
     *             String
     *         ]
     *         isA: [
     *             (recursive schema, see above)
     *         ]
     *         preferredTerms: [
     *             (recursive schema, see above)
     *         ]
     *         preferredToTerms: [
     *             (recursive schema, see above)
     *         ]
     *         replacedBy: [
     *             (recursive schema, see above)
     *         ]
     *         replacementTerms: [
     *             (recursive schema, see above)
     *         ]
     *         seeAlso: [
     *             (recursive schema, see above)
     *         ]
     *         synonyms: [
     *             (recursive schema, see above)
     *         ]
     *         translatedTerms: [
     *             (recursive schema, see above)
     *         ]
     *         translationTerms: [
     *             (recursive schema, see above)
     *         ]
     *         usage: String
     *         validValues: [
     *             (recursive schema, see above)
     *         ]
     *         validValuesFor: [
     *             (recursive schema, see above)
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param glossaryName The name of the glossary.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest listTermsByGlossaryName(String glossaryName) {
        return new DynamicRequest(serializer, httpPipeline)
                .setUrl("{Endpoint}/api/glossary/name/{glossaryName}/terms")
                .setPathParam("Endpoint", endpoint)
                .setPathParam("glossaryName", glossaryName)
                .addQueryParam("api-version", apiVersion)
                .addHeader("Accept", "application/json")
                .addHeader("Content-Type", "application/json")
                .setHttpMethod(HttpMethod.GET);
    }

    /**
     * Create an empty DynamicRequest with the serializer and pipeline initialized for this client.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest invoke() {
        return new DynamicRequest(serializer, httpPipeline);
    }
}
