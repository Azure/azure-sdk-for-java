// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mpcnetworkfunction.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mpcnetworkfunction.models.NetworkFunctionAdministrativeState;
import com.azure.resourcemanager.mpcnetworkfunction.models.NetworkFunctionOperationalStatus;
import com.azure.resourcemanager.mpcnetworkfunction.models.NetworkFunctionType;
import com.azure.resourcemanager.mpcnetworkfunction.models.ProvisioningState;
import com.azure.resourcemanager.mpcnetworkfunction.models.SkuDefinitions;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Network Function Properties. */
@Fluent
public final class NetworkFunctionResourceProperties {
    /*
     * Provisioned SKU Value.
     */
    @JsonProperty(value = "sku", required = true)
    private SkuDefinitions sku;

    /*
     * Type of network function
     */
    @JsonProperty(value = "networkFunctionType", required = true)
    private NetworkFunctionType networkFunctionType;

    /*
     * Administrative state of the network function
     */
    @JsonProperty(value = "networkFunctionAdministrativeState", required = true)
    private NetworkFunctionAdministrativeState networkFunctionAdministrativeState;

    /*
     * Operational state of the network function
     */
    @JsonProperty(value = "networkFunctionOperationalStatus", access = JsonProperty.Access.WRITE_ONLY)
    private NetworkFunctionOperationalStatus networkFunctionOperationalStatus;

    /*
     * Count of infrastructure elements used by this network function (vCPUs, in units of 8)
     */
    @JsonProperty(value = "infrastructureElementCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer infrastructureElementCount;

    /*
     * Capacity of the network function in units of 10000.  This represents the session count or the Simultaneously
     * Attached Users (SAU) count as applicable
     */
    @JsonProperty(value = "capacity")
    private Integer capacity;

    /*
     * User provided description
     */
    @JsonProperty(value = "userDescription")
    private String userDescription;

    /*
     * User provided deployment notes.  This is used to optionally provide details about the NF deployment
     */
    @JsonProperty(value = "deploymentNotes")
    private String deploymentNotes;

    /*
     * The status of the last operation.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of NetworkFunctionResourceProperties class. */
    public NetworkFunctionResourceProperties() {
    }

    /**
     * Get the sku property: Provisioned SKU Value.
     *
     * @return the sku value.
     */
    public SkuDefinitions sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Provisioned SKU Value.
     *
     * @param sku the sku value to set.
     * @return the NetworkFunctionResourceProperties object itself.
     */
    public NetworkFunctionResourceProperties withSku(SkuDefinitions sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the networkFunctionType property: Type of network function.
     *
     * @return the networkFunctionType value.
     */
    public NetworkFunctionType networkFunctionType() {
        return this.networkFunctionType;
    }

    /**
     * Set the networkFunctionType property: Type of network function.
     *
     * @param networkFunctionType the networkFunctionType value to set.
     * @return the NetworkFunctionResourceProperties object itself.
     */
    public NetworkFunctionResourceProperties withNetworkFunctionType(NetworkFunctionType networkFunctionType) {
        this.networkFunctionType = networkFunctionType;
        return this;
    }

    /**
     * Get the networkFunctionAdministrativeState property: Administrative state of the network function.
     *
     * @return the networkFunctionAdministrativeState value.
     */
    public NetworkFunctionAdministrativeState networkFunctionAdministrativeState() {
        return this.networkFunctionAdministrativeState;
    }

    /**
     * Set the networkFunctionAdministrativeState property: Administrative state of the network function.
     *
     * @param networkFunctionAdministrativeState the networkFunctionAdministrativeState value to set.
     * @return the NetworkFunctionResourceProperties object itself.
     */
    public NetworkFunctionResourceProperties withNetworkFunctionAdministrativeState(
        NetworkFunctionAdministrativeState networkFunctionAdministrativeState) {
        this.networkFunctionAdministrativeState = networkFunctionAdministrativeState;
        return this;
    }

    /**
     * Get the networkFunctionOperationalStatus property: Operational state of the network function.
     *
     * @return the networkFunctionOperationalStatus value.
     */
    public NetworkFunctionOperationalStatus networkFunctionOperationalStatus() {
        return this.networkFunctionOperationalStatus;
    }

    /**
     * Get the infrastructureElementCount property: Count of infrastructure elements used by this network function
     * (vCPUs, in units of 8).
     *
     * @return the infrastructureElementCount value.
     */
    public Integer infrastructureElementCount() {
        return this.infrastructureElementCount;
    }

    /**
     * Get the capacity property: Capacity of the network function in units of 10000. This represents the session count
     * or the Simultaneously Attached Users (SAU) count as applicable.
     *
     * @return the capacity value.
     */
    public Integer capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: Capacity of the network function in units of 10000. This represents the session count
     * or the Simultaneously Attached Users (SAU) count as applicable.
     *
     * @param capacity the capacity value to set.
     * @return the NetworkFunctionResourceProperties object itself.
     */
    public NetworkFunctionResourceProperties withCapacity(Integer capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the userDescription property: User provided description.
     *
     * @return the userDescription value.
     */
    public String userDescription() {
        return this.userDescription;
    }

    /**
     * Set the userDescription property: User provided description.
     *
     * @param userDescription the userDescription value to set.
     * @return the NetworkFunctionResourceProperties object itself.
     */
    public NetworkFunctionResourceProperties withUserDescription(String userDescription) {
        this.userDescription = userDescription;
        return this;
    }

    /**
     * Get the deploymentNotes property: User provided deployment notes. This is used to optionally provide details
     * about the NF deployment.
     *
     * @return the deploymentNotes value.
     */
    public String deploymentNotes() {
        return this.deploymentNotes;
    }

    /**
     * Set the deploymentNotes property: User provided deployment notes. This is used to optionally provide details
     * about the NF deployment.
     *
     * @param deploymentNotes the deploymentNotes value to set.
     * @return the NetworkFunctionResourceProperties object itself.
     */
    public NetworkFunctionResourceProperties withDeploymentNotes(String deploymentNotes) {
        this.deploymentNotes = deploymentNotes;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property sku in model NetworkFunctionResourceProperties"));
        }
        if (networkFunctionType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property networkFunctionType in model NetworkFunctionResourceProperties"));
        }
        if (networkFunctionAdministrativeState() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property networkFunctionAdministrativeState in model"
                            + " NetworkFunctionResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NetworkFunctionResourceProperties.class);
}
