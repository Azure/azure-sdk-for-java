// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.appconfiguration.fluent.models.SnapshotInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of Snapshot.
 */
public interface Snapshot {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the provisioningState property: The provisioning state of the snapshot.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the status property: The current status of the snapshot.
     * 
     * @return the status value.
     */
    SnapshotStatus status();

    /**
     * Gets the filters property: A list of filters used to filter the key-values included in the snapshot.
     * 
     * @return the filters value.
     */
    List<KeyValueFilter> filters();

    /**
     * Gets the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'key' composition type ensures there are no two key-values containing the same key. The 'key_label'
     * composition type ensures there are no two key-values containing the same key and label.
     * 
     * @return the compositionType value.
     */
    CompositionType compositionType();

    /**
     * Gets the created property: The time that the snapshot was created.
     * 
     * @return the created value.
     */
    OffsetDateTime created();

    /**
     * Gets the expires property: The time that the snapshot will expire.
     * 
     * @return the expires value.
     */
    OffsetDateTime expires();

    /**
     * Gets the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a snapshot. If not specified, the
     * default lifetime of key-value revisions will be used.
     * 
     * @return the retentionPeriod value.
     */
    Long retentionPeriod();

    /**
     * Gets the size property: The size in bytes of the snapshot.
     * 
     * @return the size value.
     */
    Long size();

    /**
     * Gets the itemsCount property: The amount of key-values in the snapshot.
     * 
     * @return the itemsCount value.
     */
    Long itemsCount();

    /**
     * Gets the tags property: The tags of the snapshot. NOTE: These are data plane tags, not Azure Resource Manager
     * (ARM) tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: A value representing the current state of the snapshot.
     * 
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the inner com.azure.resourcemanager.appconfiguration.fluent.models.SnapshotInner object.
     * 
     * @return the inner object.
     */
    SnapshotInner innerModel();

    /**
     * The entirety of the Snapshot definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The Snapshot definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the Snapshot definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the Snapshot definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, configStoreName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param configStoreName The name of the configuration store.
             * @return the next definition stage.
             */
            WithCreate withExistingConfigurationStore(String resourceGroupName, String configStoreName);
        }

        /**
         * The stage of the Snapshot definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithFilters,
            DefinitionStages.WithCompositionType, DefinitionStages.WithRetentionPeriod {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            Snapshot create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Snapshot create(Context context);
        }

        /**
         * The stage of the Snapshot definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: The tags of the snapshot. NOTE: These are data plane tags, not Azure
             * Resource Manager (ARM) tags..
             * 
             * @param tags The tags of the snapshot. NOTE: These are data plane tags, not Azure Resource Manager (ARM)
             * tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the Snapshot definition allowing to specify filters.
         */
        interface WithFilters {
            /**
             * Specifies the filters property: A list of filters used to filter the key-values included in the
             * snapshot..
             * 
             * @param filters A list of filters used to filter the key-values included in the snapshot.
             * @return the next definition stage.
             */
            WithCreate withFilters(List<KeyValueFilter> filters);
        }

        /**
         * The stage of the Snapshot definition allowing to specify compositionType.
         */
        interface WithCompositionType {
            /**
             * Specifies the compositionType property: The composition type describes how the key-values within the
             * snapshot are composed. The 'key' composition type ensures there are no two key-values containing the same
             * key. The 'key_label' composition type ensures there are no two key-values containing the same key and
             * label..
             * 
             * @param compositionType The composition type describes how the key-values within the snapshot are
             * composed. The 'key' composition type ensures there are no two key-values containing the same key. The
             * 'key_label' composition type ensures there are no two key-values containing the same key and label.
             * @return the next definition stage.
             */
            WithCreate withCompositionType(CompositionType compositionType);
        }

        /**
         * The stage of the Snapshot definition allowing to specify retentionPeriod.
         */
        interface WithRetentionPeriod {
            /**
             * Specifies the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in
             * the archived state before expiring. This property is only writable during the creation of a snapshot. If
             * not specified, the default lifetime of key-value revisions will be used..
             * 
             * @param retentionPeriod The amount of time, in seconds, that a snapshot will remain in the archived state
             * before expiring. This property is only writable during the creation of a snapshot. If not specified, the
             * default lifetime of key-value revisions will be used.
             * @return the next definition stage.
             */
            WithCreate withRetentionPeriod(Long retentionPeriod);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    Snapshot refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Snapshot refresh(Context context);
}
