// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The data plane proxy settings for a configuration store.
 */
@Fluent
public final class DataPlaneProxyProperties implements JsonSerializable<DataPlaneProxyProperties> {
    /*
     * The data plane proxy authentication mode. This property manages the authentication mode of request to the data
     * plane resources.
     */
    private AuthenticationMode authenticationMode;

    /*
     * The data plane proxy private link delegation. This property manages if a request from delegated Azure Resource
     * Manager (ARM) private link is allowed when the data plane resource requires private link.
     */
    private PrivateLinkDelegation privateLinkDelegation;

    /**
     * Creates an instance of DataPlaneProxyProperties class.
     */
    public DataPlaneProxyProperties() {
    }

    /**
     * Get the authenticationMode property: The data plane proxy authentication mode. This property manages the
     * authentication mode of request to the data plane resources.
     * 
     * @return the authenticationMode value.
     */
    public AuthenticationMode authenticationMode() {
        return this.authenticationMode;
    }

    /**
     * Set the authenticationMode property: The data plane proxy authentication mode. This property manages the
     * authentication mode of request to the data plane resources.
     * 
     * @param authenticationMode the authenticationMode value to set.
     * @return the DataPlaneProxyProperties object itself.
     */
    public DataPlaneProxyProperties withAuthenticationMode(AuthenticationMode authenticationMode) {
        this.authenticationMode = authenticationMode;
        return this;
    }

    /**
     * Get the privateLinkDelegation property: The data plane proxy private link delegation. This property manages if a
     * request from delegated Azure Resource Manager (ARM) private link is allowed when the data plane resource requires
     * private link.
     * 
     * @return the privateLinkDelegation value.
     */
    public PrivateLinkDelegation privateLinkDelegation() {
        return this.privateLinkDelegation;
    }

    /**
     * Set the privateLinkDelegation property: The data plane proxy private link delegation. This property manages if a
     * request from delegated Azure Resource Manager (ARM) private link is allowed when the data plane resource requires
     * private link.
     * 
     * @param privateLinkDelegation the privateLinkDelegation value to set.
     * @return the DataPlaneProxyProperties object itself.
     */
    public DataPlaneProxyProperties withPrivateLinkDelegation(PrivateLinkDelegation privateLinkDelegation) {
        this.privateLinkDelegation = privateLinkDelegation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authenticationMode",
            this.authenticationMode == null ? null : this.authenticationMode.toString());
        jsonWriter.writeStringField("privateLinkDelegation",
            this.privateLinkDelegation == null ? null : this.privateLinkDelegation.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataPlaneProxyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataPlaneProxyProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataPlaneProxyProperties.
     */
    public static DataPlaneProxyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataPlaneProxyProperties deserializedDataPlaneProxyProperties = new DataPlaneProxyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationMode".equals(fieldName)) {
                    deserializedDataPlaneProxyProperties.authenticationMode
                        = AuthenticationMode.fromString(reader.getString());
                } else if ("privateLinkDelegation".equals(fieldName)) {
                    deserializedDataPlaneProxyProperties.privateLinkDelegation
                        = PrivateLinkDelegation.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataPlaneProxyProperties;
        });
    }
}
