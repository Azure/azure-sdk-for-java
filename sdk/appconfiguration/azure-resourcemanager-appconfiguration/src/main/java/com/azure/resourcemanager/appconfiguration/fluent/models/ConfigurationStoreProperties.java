// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.appconfiguration.models.CreateMode;
import com.azure.resourcemanager.appconfiguration.models.DataPlaneProxyProperties;
import com.azure.resourcemanager.appconfiguration.models.EncryptionProperties;
import com.azure.resourcemanager.appconfiguration.models.PrivateEndpointConnectionReference;
import com.azure.resourcemanager.appconfiguration.models.ProvisioningState;
import com.azure.resourcemanager.appconfiguration.models.PublicNetworkAccess;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The properties of a configuration store.
 */
@Fluent
public final class ConfigurationStoreProperties implements JsonSerializable<ConfigurationStoreProperties> {
    /*
     * The provisioning state of the configuration store.
     */
    private ProvisioningState provisioningState;

    /*
     * The creation date of configuration store.
     */
    private OffsetDateTime creationDate;

    /*
     * The DNS endpoint where the configuration store API will be available.
     */
    private String endpoint;

    /*
     * The encryption settings of the configuration store.
     */
    private EncryptionProperties encryption;

    /*
     * The list of private endpoint connections that are set up for this resource.
     */
    private List<PrivateEndpointConnectionReference> privateEndpointConnections;

    /*
     * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * Disables all authentication methods other than AAD authentication.
     */
    private Boolean disableLocalAuth;

    /*
     * The amount of time in days that the configuration store will be retained when it is soft deleted.
     */
    private Integer softDeleteRetentionInDays;

    /*
     * Property specifying whether protection against purge is enabled for this configuration store.
     */
    private Boolean enablePurgeProtection;

    /*
     * Property specifying the configuration of data plane proxy for Azure Resource Manager (ARM).
     */
    private DataPlaneProxyProperties dataPlaneProxy;

    /*
     * Indicates whether the configuration store need to be recovered.
     */
    private CreateMode createMode;

    /**
     * Creates an instance of ConfigurationStoreProperties class.
     */
    public ConfigurationStoreProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the configuration store.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the creationDate property: The creation date of configuration store.
     * 
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the endpoint property: The DNS endpoint where the configuration store API will be available.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the encryption property: The encryption settings of the configuration store.
     * 
     * @return the encryption value.
     */
    public EncryptionProperties encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption settings of the configuration store.
     * 
     * @param encryption the encryption value to set.
     * @return the ConfigurationStoreProperties object itself.
     */
    public ConfigurationStoreProperties withEncryption(EncryptionProperties encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: The list of private endpoint connections that are set up for this
     * resource.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionReference> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the publicNetworkAccess property: Control permission for data plane traffic coming from public networks while
     * private endpoint is enabled.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Control permission for data plane traffic coming from public networks while
     * private endpoint is enabled.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ConfigurationStoreProperties object itself.
     */
    public ConfigurationStoreProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the disableLocalAuth property: Disables all authentication methods other than AAD authentication.
     * 
     * @return the disableLocalAuth value.
     */
    public Boolean disableLocalAuth() {
        return this.disableLocalAuth;
    }

    /**
     * Set the disableLocalAuth property: Disables all authentication methods other than AAD authentication.
     * 
     * @param disableLocalAuth the disableLocalAuth value to set.
     * @return the ConfigurationStoreProperties object itself.
     */
    public ConfigurationStoreProperties withDisableLocalAuth(Boolean disableLocalAuth) {
        this.disableLocalAuth = disableLocalAuth;
        return this;
    }

    /**
     * Get the softDeleteRetentionInDays property: The amount of time in days that the configuration store will be
     * retained when it is soft deleted.
     * 
     * @return the softDeleteRetentionInDays value.
     */
    public Integer softDeleteRetentionInDays() {
        return this.softDeleteRetentionInDays;
    }

    /**
     * Set the softDeleteRetentionInDays property: The amount of time in days that the configuration store will be
     * retained when it is soft deleted.
     * 
     * @param softDeleteRetentionInDays the softDeleteRetentionInDays value to set.
     * @return the ConfigurationStoreProperties object itself.
     */
    public ConfigurationStoreProperties withSoftDeleteRetentionInDays(Integer softDeleteRetentionInDays) {
        this.softDeleteRetentionInDays = softDeleteRetentionInDays;
        return this;
    }

    /**
     * Get the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * configuration store.
     * 
     * @return the enablePurgeProtection value.
     */
    public Boolean enablePurgeProtection() {
        return this.enablePurgeProtection;
    }

    /**
     * Set the enablePurgeProtection property: Property specifying whether protection against purge is enabled for this
     * configuration store.
     * 
     * @param enablePurgeProtection the enablePurgeProtection value to set.
     * @return the ConfigurationStoreProperties object itself.
     */
    public ConfigurationStoreProperties withEnablePurgeProtection(Boolean enablePurgeProtection) {
        this.enablePurgeProtection = enablePurgeProtection;
        return this;
    }

    /**
     * Get the dataPlaneProxy property: Property specifying the configuration of data plane proxy for Azure Resource
     * Manager (ARM).
     * 
     * @return the dataPlaneProxy value.
     */
    public DataPlaneProxyProperties dataPlaneProxy() {
        return this.dataPlaneProxy;
    }

    /**
     * Set the dataPlaneProxy property: Property specifying the configuration of data plane proxy for Azure Resource
     * Manager (ARM).
     * 
     * @param dataPlaneProxy the dataPlaneProxy value to set.
     * @return the ConfigurationStoreProperties object itself.
     */
    public ConfigurationStoreProperties withDataPlaneProxy(DataPlaneProxyProperties dataPlaneProxy) {
        this.dataPlaneProxy = dataPlaneProxy;
        return this;
    }

    /**
     * Get the createMode property: Indicates whether the configuration store need to be recovered.
     * 
     * @return the createMode value.
     */
    public CreateMode createMode() {
        return this.createMode;
    }

    /**
     * Set the createMode property: Indicates whether the configuration store need to be recovered.
     * 
     * @param createMode the createMode value to set.
     * @return the ConfigurationStoreProperties object itself.
     */
    public ConfigurationStoreProperties withCreateMode(CreateMode createMode) {
        this.createMode = createMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryption() != null) {
            encryption().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
        if (dataPlaneProxy() != null) {
            dataPlaneProxy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeBooleanField("disableLocalAuth", this.disableLocalAuth);
        jsonWriter.writeNumberField("softDeleteRetentionInDays", this.softDeleteRetentionInDays);
        jsonWriter.writeBooleanField("enablePurgeProtection", this.enablePurgeProtection);
        jsonWriter.writeJsonField("dataPlaneProxy", this.dataPlaneProxy);
        jsonWriter.writeStringField("createMode", this.createMode == null ? null : this.createMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationStoreProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationStoreProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationStoreProperties.
     */
    public static ConfigurationStoreProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationStoreProperties deserializedConfigurationStoreProperties = new ConfigurationStoreProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("creationDate".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.creationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endpoint".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.endpoint = reader.getString();
                } else if ("encryption".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.encryption = EncryptionProperties.fromJson(reader);
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionReference> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionReference.fromJson(reader1));
                    deserializedConfigurationStoreProperties.privateEndpointConnections = privateEndpointConnections;
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("disableLocalAuth".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.disableLocalAuth
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("softDeleteRetentionInDays".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.softDeleteRetentionInDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("enablePurgeProtection".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.enablePurgeProtection
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("dataPlaneProxy".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.dataPlaneProxy = DataPlaneProxyProperties.fromJson(reader);
                } else if ("createMode".equals(fieldName)) {
                    deserializedConfigurationStoreProperties.createMode = CreateMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationStoreProperties;
        });
    }
}
