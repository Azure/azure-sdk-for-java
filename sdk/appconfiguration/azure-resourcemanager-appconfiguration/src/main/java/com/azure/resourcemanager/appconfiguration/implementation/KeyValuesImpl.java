// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appconfiguration.fluent.KeyValuesClient;
import com.azure.resourcemanager.appconfiguration.fluent.models.KeyValueInner;
import com.azure.resourcemanager.appconfiguration.models.KeyValue;
import com.azure.resourcemanager.appconfiguration.models.KeyValues;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class KeyValuesImpl implements KeyValues {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(KeyValuesImpl.class);

    private final KeyValuesClient innerClient;

    private final com.azure.resourcemanager.appconfiguration.AppConfigurationManager serviceManager;

    public KeyValuesImpl(
        KeyValuesClient innerClient,
        com.azure.resourcemanager.appconfiguration.AppConfigurationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<KeyValue> listByConfigurationStore(String resourceGroupName, String configStoreName) {
        PagedIterable<KeyValueInner> inner =
            this.serviceClient().listByConfigurationStore(resourceGroupName, configStoreName);
        return Utils.mapPage(inner, inner1 -> new KeyValueImpl(inner1, this.manager()));
    }

    public PagedIterable<KeyValue> listByConfigurationStore(
        String resourceGroupName, String configStoreName, String skipToken, Context context) {
        PagedIterable<KeyValueInner> inner =
            this.serviceClient().listByConfigurationStore(resourceGroupName, configStoreName, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new KeyValueImpl(inner1, this.manager()));
    }

    public KeyValue get(String resourceGroupName, String configStoreName, String keyValueName) {
        KeyValueInner inner = this.serviceClient().get(resourceGroupName, configStoreName, keyValueName);
        if (inner != null) {
            return new KeyValueImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<KeyValue> getWithResponse(
        String resourceGroupName, String configStoreName, String keyValueName, Context context) {
        Response<KeyValueInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, configStoreName, keyValueName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new KeyValueImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String configStoreName, String keyValueName) {
        this.serviceClient().delete(resourceGroupName, configStoreName, keyValueName);
    }

    public void delete(String resourceGroupName, String configStoreName, String keyValueName, Context context) {
        this.serviceClient().delete(resourceGroupName, configStoreName, keyValueName, context);
    }

    public KeyValue getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = Utils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String keyValueName = Utils.getValueFromIdByName(id, "keyValues");
        if (keyValueName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'keyValues'.", id)));
        }
        return this.getWithResponse(resourceGroupName, configStoreName, keyValueName, Context.NONE).getValue();
    }

    public Response<KeyValue> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = Utils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String keyValueName = Utils.getValueFromIdByName(id, "keyValues");
        if (keyValueName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'keyValues'.", id)));
        }
        return this.getWithResponse(resourceGroupName, configStoreName, keyValueName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = Utils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String keyValueName = Utils.getValueFromIdByName(id, "keyValues");
        if (keyValueName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'keyValues'.", id)));
        }
        this.delete(resourceGroupName, configStoreName, keyValueName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String configStoreName = Utils.getValueFromIdByName(id, "configurationStores");
        if (configStoreName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationStores'.", id)));
        }
        String keyValueName = Utils.getValueFromIdByName(id, "keyValues");
        if (keyValueName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'keyValues'.", id)));
        }
        this.delete(resourceGroupName, configStoreName, keyValueName, context);
    }

    private KeyValuesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appconfiguration.AppConfigurationManager manager() {
        return this.serviceManager;
    }

    public KeyValueImpl define(String name) {
        return new KeyValueImpl(name, this.manager());
    }
}
