// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.appconfiguration.fluent.models.SnapshotInner;
import com.azure.resourcemanager.appconfiguration.models.CompositionType;
import com.azure.resourcemanager.appconfiguration.models.KeyValueFilter;
import com.azure.resourcemanager.appconfiguration.models.ProvisioningState;
import com.azure.resourcemanager.appconfiguration.models.Snapshot;
import com.azure.resourcemanager.appconfiguration.models.SnapshotStatus;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class SnapshotImpl implements Snapshot, Snapshot.Definition {
    private SnapshotInner innerObject;

    private final com.azure.resourcemanager.appconfiguration.AppConfigurationManager serviceManager;

    SnapshotImpl(SnapshotInner innerObject,
        com.azure.resourcemanager.appconfiguration.AppConfigurationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public SnapshotStatus status() {
        return this.innerModel().status();
    }

    public List<KeyValueFilter> filters() {
        List<KeyValueFilter> inner = this.innerModel().filters();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public CompositionType compositionType() {
        return this.innerModel().compositionType();
    }

    public OffsetDateTime created() {
        return this.innerModel().created();
    }

    public OffsetDateTime expires() {
        return this.innerModel().expires();
    }

    public Long retentionPeriod() {
        return this.innerModel().retentionPeriod();
    }

    public Long size() {
        return this.innerModel().size();
    }

    public Long itemsCount() {
        return this.innerModel().itemsCount();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SnapshotInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appconfiguration.AppConfigurationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String configStoreName;

    private String snapshotName;

    public SnapshotImpl withExistingConfigurationStore(String resourceGroupName, String configStoreName) {
        this.resourceGroupName = resourceGroupName;
        this.configStoreName = configStoreName;
        return this;
    }

    public Snapshot create() {
        this.innerObject = serviceManager.serviceClient()
            .getSnapshots()
            .create(resourceGroupName, configStoreName, snapshotName, this.innerModel(), Context.NONE);
        return this;
    }

    public Snapshot create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSnapshots()
            .create(resourceGroupName, configStoreName, snapshotName, this.innerModel(), context);
        return this;
    }

    SnapshotImpl(String name, com.azure.resourcemanager.appconfiguration.AppConfigurationManager serviceManager) {
        this.innerObject = new SnapshotInner();
        this.serviceManager = serviceManager;
        this.snapshotName = name;
    }

    public Snapshot refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSnapshots()
            .getWithResponse(resourceGroupName, configStoreName, snapshotName, Context.NONE)
            .getValue();
        return this;
    }

    public Snapshot refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSnapshots()
            .getWithResponse(resourceGroupName, configStoreName, snapshotName, context)
            .getValue();
        return this;
    }

    public SnapshotImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public SnapshotImpl withFilters(List<KeyValueFilter> filters) {
        this.innerModel().withFilters(filters);
        return this;
    }

    public SnapshotImpl withCompositionType(CompositionType compositionType) {
        this.innerModel().withCompositionType(compositionType);
        return this;
    }

    public SnapshotImpl withRetentionPeriod(Long retentionPeriod) {
        this.innerModel().withRetentionPeriod(retentionPeriod);
        return this;
    }
}
