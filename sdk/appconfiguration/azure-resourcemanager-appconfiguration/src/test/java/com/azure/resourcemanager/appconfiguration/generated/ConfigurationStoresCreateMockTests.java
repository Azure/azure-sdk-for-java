// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.appconfiguration.AppConfigurationManager;
import com.azure.resourcemanager.appconfiguration.models.ConfigurationStore;
import com.azure.resourcemanager.appconfiguration.models.CreateMode;
import com.azure.resourcemanager.appconfiguration.models.EncryptionProperties;
import com.azure.resourcemanager.appconfiguration.models.IdentityType;
import com.azure.resourcemanager.appconfiguration.models.PublicNetworkAccess;
import com.azure.resourcemanager.appconfiguration.models.ResourceIdentity;
import com.azure.resourcemanager.appconfiguration.models.Sku;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ConfigurationStoresCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{},\"principalId\":\"nxknalaulp\",\"tenantId\":\"gdtpnapnyiro\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"creationDate\":\"2020-12-20T18:46:56Z\",\"endpoint\":\"pgylg\",\"encryption\":{},\"privateEndpointConnections\":[],\"publicNetworkAccess\":\"Disabled\",\"disableLocalAuth\":false,\"softDeleteRetentionInDays\":119641642,\"enablePurgeProtection\":true,\"createMode\":\"Recover\"},\"sku\":{\"name\":\"qwwncw\"},\"location\":\"hxg\",\"tags\":{\"kteo\":\"mgucna\",\"pfqbuaceopzf\":\"llwptfdy\"},\"id\":\"rhhuaopppcqeqx\",\"name\":\"lzdahzxctobgbkdm\",\"type\":\"izpost\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AppConfigurationManager manager =
            AppConfigurationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ConfigurationStore response =
            manager
                .configurationStores()
                .define("vawjvzunlu")
                .withRegion("ttouwaboekqvkel")
                .withExistingResourceGroup("zlmwlxkvugfhz")
                .withSku(new Sku().withName("luu"))
                .withTags(mapOf("aalnjixi", "vbxwyjsflhh"))
                .withIdentity(new ResourceIdentity().withType(IdentityType.NONE).withUserAssignedIdentities(mapOf()))
                .withEncryption(new EncryptionProperties())
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .withDisableLocalAuth(false)
                .withSoftDeleteRetentionInDays(820009390)
                .withEnablePurgeProtection(false)
                .withCreateMode(CreateMode.RECOVER)
                .create();

        Assertions.assertEquals("hxg", response.location());
        Assertions.assertEquals("mgucna", response.tags().get("kteo"));
        Assertions.assertEquals(IdentityType.NONE, response.identity().type());
        Assertions.assertEquals("qwwncw", response.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.publicNetworkAccess());
        Assertions.assertEquals(false, response.disableLocalAuth());
        Assertions.assertEquals(119641642, response.softDeleteRetentionInDays());
        Assertions.assertEquals(true, response.enablePurgeProtection());
        Assertions.assertEquals(CreateMode.RECOVER, response.createMode());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
