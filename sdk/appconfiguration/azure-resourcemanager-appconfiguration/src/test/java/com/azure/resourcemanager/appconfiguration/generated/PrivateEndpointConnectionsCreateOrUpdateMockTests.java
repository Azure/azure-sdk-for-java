// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appconfiguration.AppConfigurationManager;
import com.azure.resourcemanager.appconfiguration.models.ConnectionStatus;
import com.azure.resourcemanager.appconfiguration.models.PrivateEndpoint;
import com.azure.resourcemanager.appconfiguration.models.PrivateEndpointConnection;
import com.azure.resourcemanager.appconfiguration.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{\"id\":\"xleptramx\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"lwnwxuqlcvydyp\",\"actionsRequired\":\"Recreate\"}},\"id\":\"ooaojkniodkooebw\",\"name\":\"ujhemmsbvdkcrodt\",\"type\":\"infwjlfltkacjve\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppConfigurationManager manager = AppConfigurationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("judpfrxt")
            .withExistingConfigurationStore("mewzsyyc", "uzsoi")
            .withPrivateEndpoint(new PrivateEndpoint().withId("ytdw"))
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(ConnectionStatus.APPROVED).withDescription("qu"))
            .create();

        Assertions.assertEquals("xleptramx", response.privateEndpoint().id());
        Assertions.assertEquals(ConnectionStatus.PENDING, response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("lwnwxuqlcvydyp", response.privateLinkServiceConnectionState().description());
    }
}
