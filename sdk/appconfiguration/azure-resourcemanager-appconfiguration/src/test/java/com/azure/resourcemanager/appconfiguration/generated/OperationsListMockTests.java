// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appconfiguration.AppConfigurationManager;
import com.azure.resourcemanager.appconfiguration.models.OperationDefinition;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"ok\",\"isDataAction\":false,\"display\":{\"provider\":\"d\",\"resource\":\"gsyocogj\",\"operation\":\"dtbnnha\",\"description\":\"ocrkvcikh\"},\"origin\":\"p\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"queziky\",\"displayName\":\"gxk\",\"blobDuration\":\"la\"}],\"metricSpecifications\":[{\"name\":\"wuipiccjzkzivg\",\"displayName\":\"c\",\"displayDescription\":\"y\",\"unit\":\"yrnxxmueedn\",\"aggregationType\":\"dvstkw\",\"internalMetricName\":\"tchealmf\",\"dimensions\":[{}],\"fillGapWithZero\":true},{\"name\":\"gdv\",\"displayName\":\"gpiohgwxrtfudxe\",\"displayDescription\":\"gyqagvrvmnpkuk\",\"unit\":\"i\",\"aggregationType\":\"blxgwimf\",\"internalMetricName\":\"hfjx\",\"dimensions\":[{},{},{}],\"fillGapWithZero\":false}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppConfigurationManager manager = AppConfigurationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OperationDefinition> response
            = manager.operations().list("xbldtlwwrlkdmtn", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ok", response.iterator().next().name());
        Assertions.assertEquals(false, response.iterator().next().isDataAction());
        Assertions.assertEquals("gsyocogj", response.iterator().next().display().resource());
        Assertions.assertEquals("dtbnnha", response.iterator().next().display().operation());
        Assertions.assertEquals("ocrkvcikh", response.iterator().next().display().description());
        Assertions.assertEquals("p", response.iterator().next().origin());
        Assertions.assertEquals("queziky",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("gxk",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("la",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("wuipiccjzkzivg",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("c",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("y",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("yrnxxmueedn",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("dvstkw",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals("tchealmf",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .internalMetricName());
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .fillGapWithZero());
    }
}
