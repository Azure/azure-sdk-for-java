// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appconfiguration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appconfiguration.fluent.models.OperationDefinitionInner;
import com.azure.resourcemanager.appconfiguration.models.LogSpecification;
import com.azure.resourcemanager.appconfiguration.models.MetricDimension;
import com.azure.resourcemanager.appconfiguration.models.MetricSpecification;
import com.azure.resourcemanager.appconfiguration.models.OperationDefinitionDisplay;
import com.azure.resourcemanager.appconfiguration.models.OperationProperties;
import com.azure.resourcemanager.appconfiguration.models.ServiceSpecification;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationDefinitionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationDefinitionInner model = BinaryData.fromString(
            "{\"name\":\"mmnkzsmodmgl\",\"isDataAction\":true,\"display\":{\"provider\":\"kwtmutduqktapspw\",\"resource\":\"uertumk\",\"operation\":\"svqwhbmdgbbjfd\",\"description\":\"mbmbexppbh\"},\"origin\":\"qrolfpf\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"qux\",\"displayName\":\"jyj\",\"blobDuration\":\"jaoyfhrtx\"},{\"name\":\"n\",\"displayName\":\"kujysvlejuvfq\",\"blobDuration\":\"rlyxwjkcprbnw\"}],\"metricSpecifications\":[{\"name\":\"vtb\",\"displayName\":\"ysszdnrujqguh\",\"displayDescription\":\"ouqfprwz\",\"unit\":\"nguitnwuizgazxu\",\"aggregationType\":\"zuckyfi\",\"internalMetricName\":\"fidfvzw\",\"dimensions\":[{}],\"fillGapWithZero\":false},{\"name\":\"mwisdkfthwxmnt\",\"displayName\":\"waopvkmijcmmxd\",\"displayDescription\":\"fufsrpymzi\",\"unit\":\"sezcxtb\",\"aggregationType\":\"gfycc\",\"internalMetricName\":\"ewmdw\",\"dimensions\":[{},{},{},{}],\"fillGapWithZero\":false}]}}}")
            .toObject(OperationDefinitionInner.class);
        Assertions.assertEquals("mmnkzsmodmgl", model.name());
        Assertions.assertEquals(true, model.isDataAction());
        Assertions.assertEquals("uertumk", model.display().resource());
        Assertions.assertEquals("svqwhbmdgbbjfd", model.display().operation());
        Assertions.assertEquals("mbmbexppbh", model.display().description());
        Assertions.assertEquals("qrolfpf", model.origin());
        Assertions.assertEquals("qux", model.properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("jyj",
            model.properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("jaoyfhrtx",
            model.properties().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("vtb", model.properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("ysszdnrujqguh",
            model.properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("ouqfprwz",
            model.properties().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("nguitnwuizgazxu",
            model.properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("zuckyfi",
            model.properties().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals("fidfvzw",
            model.properties().serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertEquals(false,
            model.properties().serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationDefinitionInner model = new OperationDefinitionInner().withName("mmnkzsmodmgl")
            .withIsDataAction(true)
            .withDisplay(new OperationDefinitionDisplay().withResource("uertumk")
                .withOperation("svqwhbmdgbbjfd")
                .withDescription("mbmbexppbh"))
            .withOrigin("qrolfpf")
            .withProperties(new OperationProperties().withServiceSpecification(new ServiceSpecification()
                .withLogSpecifications(Arrays.asList(
                    new LogSpecification().withName("qux").withDisplayName("jyj").withBlobDuration("jaoyfhrtx"),
                    new LogSpecification().withName("n")
                        .withDisplayName("kujysvlejuvfq")
                        .withBlobDuration("rlyxwjkcprbnw")))
                .withMetricSpecifications(Arrays.asList(
                    new MetricSpecification().withName("vtb")
                        .withDisplayName("ysszdnrujqguh")
                        .withDisplayDescription("ouqfprwz")
                        .withUnit("nguitnwuizgazxu")
                        .withAggregationType("zuckyfi")
                        .withInternalMetricName("fidfvzw")
                        .withDimensions(Arrays.asList(new MetricDimension()))
                        .withFillGapWithZero(false),
                    new MetricSpecification().withName("mwisdkfthwxmnt")
                        .withDisplayName("waopvkmijcmmxd")
                        .withDisplayDescription("fufsrpymzi")
                        .withUnit("sezcxtb")
                        .withAggregationType("gfycc")
                        .withInternalMetricName("ewmdw")
                        .withDimensions(Arrays.asList(new MetricDimension(), new MetricDimension(),
                            new MetricDimension(), new MetricDimension()))
                        .withFillGapWithZero(false)))));
        model = BinaryData.fromObject(model).toObject(OperationDefinitionInner.class);
        Assertions.assertEquals("mmnkzsmodmgl", model.name());
        Assertions.assertEquals(true, model.isDataAction());
        Assertions.assertEquals("uertumk", model.display().resource());
        Assertions.assertEquals("svqwhbmdgbbjfd", model.display().operation());
        Assertions.assertEquals("mbmbexppbh", model.display().description());
        Assertions.assertEquals("qrolfpf", model.origin());
        Assertions.assertEquals("qux", model.properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("jyj",
            model.properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("jaoyfhrtx",
            model.properties().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("vtb", model.properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("ysszdnrujqguh",
            model.properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("ouqfprwz",
            model.properties().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("nguitnwuizgazxu",
            model.properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("zuckyfi",
            model.properties().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals("fidfvzw",
            model.properties().serviceSpecification().metricSpecifications().get(0).internalMetricName());
        Assertions.assertEquals(false,
            model.properties().serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
    }
}
