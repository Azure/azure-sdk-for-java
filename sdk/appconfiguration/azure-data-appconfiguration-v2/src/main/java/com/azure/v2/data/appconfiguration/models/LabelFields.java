// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.utils.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * Defines values for LabelFields.
 */
public final class LabelFields implements ExpandableEnum<String> {
    private static final Map<String, LabelFields> VALUES = new ConcurrentHashMap<>();

    private static final Function<String, LabelFields> NEW_INSTANCE = LabelFields::new;

    /**
     * Static value name for LabelFields.
     */
    public static final LabelFields NAME = fromValue("name");

    private final String value;

    private LabelFields(String value) {
        this.value = value;
    }

    /**
     * Creates or finds a LabelFields.
     * 
     * @param value a value to look for.
     * @return the corresponding LabelFields.
     * @throws IllegalArgumentException if value is null.
     */
    public static LabelFields fromValue(String value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known LabelFields values.
     * 
     * @return Known LabelFields values.
     */
    public static Collection<LabelFields> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the LabelFields instance.
     * 
     * @return the value of the LabelFields instance.
     */
    @Override
    public String getValue() {
        return this.value;
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
