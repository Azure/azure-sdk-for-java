// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.implementation;

import com.azure.v2.data.appconfiguration.AzureAppConfigurationServiceVersion;
import com.azure.v2.data.appconfiguration.implementation.models.KeyListResult;
import com.azure.v2.data.appconfiguration.implementation.models.KeyValueListResult;
import com.azure.v2.data.appconfiguration.implementation.models.LabelListResult;
import com.azure.v2.data.appconfiguration.implementation.models.SnapshotListResult;
import com.azure.v2.data.appconfiguration.models.Error;
import com.azure.v2.data.appconfiguration.models.Key;
import com.azure.v2.data.appconfiguration.models.KeyValue;
import com.azure.v2.data.appconfiguration.models.Label;
import com.azure.v2.data.appconfiguration.models.Snapshot;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.PagedResponse;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.models.binarydata.BinaryData;
import io.clientcore.core.serialization.ObjectSerializer;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the AzureAppConfigurationClient type.
 */
public final class AzureAppConfigurationClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureAppConfigurationClientService service;

    /**
     */
    private final String endpoint;

    /**
     * Gets.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final AzureAppConfigurationServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AzureAppConfigurationServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of AzureAppConfigurationClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint
     * @param serviceVersion Service version.
     */
    public AzureAppConfigurationClientImpl(HttpPipeline httpPipeline, String endpoint,
        AzureAppConfigurationServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(AzureAppConfigurationClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for AzureAppConfigurationClient to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "AzureAppConfiguratio", host = "{endpoint}")
    public interface AzureAppConfigurationClientService {
        static AzureAppConfigurationClientService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer) {
            try {
                Class<?> clazz = Class.forName(
                    "com.azure.v2.data.appconfiguration.implementation.AzureAppConfigurationClientServiceImpl");
                return (AzureAppConfigurationClientService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class)
                    .invoke(null, pipeline, serializer);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyListResult> getKeys(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkKeys(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getKeyValues(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkKeyValues(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> getKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> putKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/kv/{key}", expectedStatusCodes = { 200, 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> deleteKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkKeyValue(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<SnapshotListResult> getSnapshots(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkSnapshots(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Snapshot> getSnapshot(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Snapshot> updateSnapshot(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @PathParam("name") String name, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData entity, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkSnapshot(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<LabelListResult> getLabels(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkLabels(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> putLock(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("key") String key, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> deleteLock(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("key") String key,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getRevisions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Void> checkRevisions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyListResult> getKeysNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getKeyValuesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<SnapshotListResult> getSnapshotsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<LabelListResult> getLabelsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getRevisionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);
    }

    /**
     * Gets a list of keys.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned keys.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Required)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of keys.
     */
    private PagedResponse<Key> getKeysSinglePage(String accept, RequestOptions requestOptions) {
        Response<KeyListResult> res
            = service.getKeys(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of keys.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned keys.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Required)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of keys.
     */
    public PagedIterable<Key> getKeys(String accept, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getKeysSinglePage(accept, requestOptions),
            (pagingOptions, nextLink) -> getKeysNextSinglePage(nextLink, accept, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned keys.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> checkKeysWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.checkKeys(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, requestOptions);
    }

    /**
     * Gets a list of key-values.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>A filter used get key-values for a snapshot. The value should
     * be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             label: String (Optional)
     *             content_type: String (Optional)
     *             value: String (Optional)
     *             last_modified: OffsetDateTime (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             locked: Boolean (Optional)
     *             etag: String (Optional)
     *         }
     *     ]
     *     etag: String (Optional)
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of key-values.
     */
    private PagedResponse<KeyValue> getKeyValuesSinglePage(String accept, RequestOptions requestOptions) {
        Response<KeyValueListResult> res
            = service.getKeyValues(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>A filter used get key-values for a snapshot. The value should
     * be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             label: String (Optional)
     *             content_type: String (Optional)
     *             value: String (Optional)
     *             last_modified: OffsetDateTime (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             locked: Boolean (Optional)
     *             etag: String (Optional)
     *         }
     *     ]
     *     etag: String (Optional)
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of key-values.
     */
    public PagedIterable<KeyValue> getKeyValues(String accept, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getKeyValuesSinglePage(accept, requestOptions),
            (pagingOptions, nextLink) -> getKeyValuesNextSinglePage(nextLink, accept, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>A filter used get key-values for a snapshot. The value should
     * be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> checkKeyValuesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.checkKeyValues(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions);
    }

    /**
     * Gets a single key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to retrieve.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a single key-value.
     */
    public Response<KeyValue> getKeyValueWithResponse(String key, String accept, RequestOptions requestOptions) {
        return service.getKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, accept,
            requestOptions);
    }

    /**
     * Creates a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to create.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a key-value pair representing application settings.
     */
    public Response<KeyValue> putKeyValueWithResponse(String key, String accept, RequestOptions requestOptions) {
        return service.putKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, accept,
            requestOptions);
    }

    /**
     * Deletes a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to delete.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a key-value pair representing application settings.
     */
    public Response<KeyValue> deleteKeyValueWithResponse(String key, String accept, RequestOptions requestOptions) {
        return service.deleteKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, accept,
            requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to retrieve.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param key The key of the key-value to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> checkKeyValueWithResponse(String key, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.checkKeyValue(this.getEndpoint(), this.getServiceVersion().getVersion(), key, accept,
            requestOptions);
    }

    /**
     * Gets a list of key-value snapshots.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned snapshots.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>status</td><td>List&lt;String&gt;</td><td>No</td><td>Used to filter returned snapshots by their status
     * property. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             status: String(provisioning/ready/archived/failed) (Optional)
     *             filters (Required): [
     *                  (Required){
     *                     key: String (Required)
     *                     label: String (Optional)
     *                     tags (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             ]
     *             composition_type: String(key/key_label) (Optional)
     *             created: OffsetDateTime (Optional)
     *             expires: OffsetDateTime (Optional)
     *             retention_period: Long (Optional)
     *             size: Long (Optional)
     *             items_count: Long (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             etag: String (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of key-value snapshots.
     */
    private PagedResponse<Snapshot> getSnapshotsSinglePage(String accept, RequestOptions requestOptions) {
        Response<SnapshotListResult> res
            = service.getSnapshots(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned snapshots.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>status</td><td>List&lt;String&gt;</td><td>No</td><td>Used to filter returned snapshots by their status
     * property. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             status: String(provisioning/ready/archived/failed) (Optional)
     *             filters (Required): [
     *                  (Required){
     *                     key: String (Required)
     *                     label: String (Optional)
     *                     tags (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             ]
     *             composition_type: String(key/key_label) (Optional)
     *             created: OffsetDateTime (Optional)
     *             expires: OffsetDateTime (Optional)
     *             retention_period: Long (Optional)
     *             size: Long (Optional)
     *             items_count: Long (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             etag: String (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of key-value snapshots.
     */
    public PagedIterable<Snapshot> getSnapshots(String accept, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getSnapshotsSinglePage(accept, requestOptions),
            (pagingOptions, nextLink) -> getSnapshotsNextSinglePage(nextLink, accept, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> checkSnapshotsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.checkSnapshots(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions);
    }

    /**
     * Gets a single key-value snapshot.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     status: String(provisioning/ready/archived/failed) (Optional)
     *     filters (Required): [
     *          (Required){
     *             key: String (Required)
     *             label: String (Optional)
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     composition_type: String(key/key_label) (Optional)
     *     created: OffsetDateTime (Optional)
     *     expires: OffsetDateTime (Optional)
     *     retention_period: Long (Optional)
     *     size: Long (Optional)
     *     items_count: Long (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a single key-value snapshot.
     */
    public Response<Snapshot> getSnapshotWithResponse(String name, String accept, RequestOptions requestOptions) {
        return service.getSnapshot(this.getEndpoint(), this.getServiceVersion().getVersion(), name, accept,
            requestOptions);
    }

    /**
     * Updates the state of a key-value snapshot.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(provisioning/ready/archived/failed) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     status: String(provisioning/ready/archived/failed) (Optional)
     *     filters (Required): [
     *          (Required){
     *             key: String (Required)
     *             label: String (Optional)
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     composition_type: String(key/key_label) (Optional)
     *     created: OffsetDateTime (Optional)
     *     expires: OffsetDateTime (Optional)
     *     retention_period: Long (Optional)
     *     size: Long (Optional)
     *     items_count: Long (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param contentType Content-Type header. Allowed values: "application/merge-patch+json", "application/json".
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values.
     */
    public Response<Snapshot> updateSnapshotWithResponse(String contentType, String name, String accept,
        BinaryData entity, RequestOptions requestOptions) {
        return service.updateSnapshot(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType, name,
            accept, entity, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param name The name of the key-value snapshot to check.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> checkSnapshotWithResponse(String name, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.checkSnapshot(this.getEndpoint(), this.getServiceVersion().getVersion(), name, accept,
            requestOptions);
    }

    /**
     * Gets a list of labels.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned labels.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of labels.
     */
    private PagedResponse<Label> getLabelsSinglePage(String accept, RequestOptions requestOptions) {
        Response<LabelListResult> res
            = service.getLabels(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned labels.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of labels.
     */
    public PagedIterable<Label> getLabels(String accept, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getLabelsSinglePage(accept, requestOptions),
            (pagingOptions, nextLink) -> getLabelsNextSinglePage(nextLink, accept, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned labels.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> checkLabelsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.checkLabels(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, requestOptions);
    }

    /**
     * Locks a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label, if any, of the key-value to lock.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a key-value pair representing application settings.
     */
    public Response<KeyValue> putLockWithResponse(String key, String accept, RequestOptions requestOptions) {
        return service.putLock(this.getEndpoint(), this.getServiceVersion().getVersion(), key, accept, requestOptions);
    }

    /**
     * Unlocks a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label, if any, of the key-value to unlock.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a key-value pair representing application settings.
     */
    public Response<KeyValue> deleteLockWithResponse(String key, String accept, RequestOptions requestOptions) {
        return service.deleteLock(this.getEndpoint(), this.getServiceVersion().getVersion(), key, accept,
            requestOptions);
    }

    /**
     * Gets a list of key-value revisions.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             label: String (Optional)
     *             content_type: String (Optional)
     *             value: String (Optional)
     *             last_modified: OffsetDateTime (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             locked: Boolean (Optional)
     *             etag: String (Optional)
     *         }
     *     ]
     *     etag: String (Optional)
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of key-value revisions.
     */
    private PagedResponse<KeyValue> getRevisionsSinglePage(String accept, RequestOptions requestOptions) {
        Response<KeyValueListResult> res
            = service.getRevisions(this.getEndpoint(), this.getServiceVersion().getVersion(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             label: String (Optional)
     *             content_type: String (Optional)
     *             value: String (Optional)
     *             last_modified: OffsetDateTime (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             locked: Boolean (Optional)
     *             etag: String (Optional)
     *         }
     *     ]
     *     etag: String (Optional)
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return a list of key-value revisions.
     */
    public PagedIterable<KeyValue> getRevisions(String accept, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getRevisionsSinglePage(accept, requestOptions),
            (pagingOptions, nextLink) -> getRevisionsNextSinglePage(nextLink, accept, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> checkRevisionsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.checkRevisions(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions);
    }

    /**
     * Gets a list of keys.
     * 
     * Get the next page of items.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Required)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the result of a list request.
     */
    private PagedResponse<Key> getKeysNextSinglePage(String nextLink, String accept, RequestOptions requestOptions) {
        Response<KeyListResult> res = service.getKeysNext(nextLink, this.getEndpoint(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     * 
     * Get the next page of items.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             label: String (Optional)
     *             content_type: String (Optional)
     *             value: String (Optional)
     *             last_modified: OffsetDateTime (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             locked: Boolean (Optional)
     *             etag: String (Optional)
     *         }
     *     ]
     *     etag: String (Optional)
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the result of a list request.
     */
    private PagedResponse<KeyValue> getKeyValuesNextSinglePage(String nextLink, String accept,
        RequestOptions requestOptions) {
        Response<KeyValueListResult> res
            = service.getKeyValuesNext(nextLink, this.getEndpoint(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * Get the next page of items.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             status: String(provisioning/ready/archived/failed) (Optional)
     *             filters (Required): [
     *                  (Required){
     *                     key: String (Required)
     *                     label: String (Optional)
     *                     tags (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             ]
     *             composition_type: String(key/key_label) (Optional)
     *             created: OffsetDateTime (Optional)
     *             expires: OffsetDateTime (Optional)
     *             retention_period: Long (Optional)
     *             size: Long (Optional)
     *             items_count: Long (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             etag: String (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the result of a snapshot list request.
     */
    private PagedResponse<Snapshot> getSnapshotsNextSinglePage(String nextLink, String accept,
        RequestOptions requestOptions) {
        Response<SnapshotListResult> res
            = service.getSnapshotsNext(nextLink, this.getEndpoint(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     * 
     * Get the next page of items.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             name: String (Optional)
     *         }
     *     ]
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the result of a list request.
     */
    private PagedResponse<Label> getLabelsNextSinglePage(String nextLink, String accept,
        RequestOptions requestOptions) {
        Response<LabelListResult> res = service.getLabelsNext(nextLink, this.getEndpoint(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * Get the next page of items.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     items (Optional): [
     *          (Optional){
     *             key: String (Required)
     *             label: String (Optional)
     *             content_type: String (Optional)
     *             value: String (Optional)
     *             last_modified: OffsetDateTime (Optional)
     *             tags (Optional): {
     *                 String: String (Required)
     *             }
     *             locked: Boolean (Optional)
     *             etag: String (Optional)
     *         }
     *     ]
     *     etag: String (Optional)
     *     &#64;nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the result of a list request.
     */
    private PagedResponse<KeyValue> getRevisionsNextSinglePage(String nextLink, String accept,
        RequestOptions requestOptions) {
        Response<KeyValueListResult> res
            = service.getRevisionsNext(nextLink, this.getEndpoint(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }
}
