// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.data.appconfiguration.implementation;

import com.azure.v2.data.appconfiguration.models.Error;
import com.azure.v2.data.appconfiguration.models.Key;
import com.azure.v2.data.appconfiguration.models.KeyListResult;
import com.azure.v2.data.appconfiguration.models.KeyValue;
import com.azure.v2.data.appconfiguration.models.KeyValueFields;
import com.azure.v2.data.appconfiguration.models.KeyValueListResult;
import com.azure.v2.data.appconfiguration.models.Label;
import com.azure.v2.data.appconfiguration.models.LabelFields;
import com.azure.v2.data.appconfiguration.models.LabelListResult;
import com.azure.v2.data.appconfiguration.models.OperationDetails;
import com.azure.v2.data.appconfiguration.models.Snapshot;
import com.azure.v2.data.appconfiguration.models.SnapshotFields;
import com.azure.v2.data.appconfiguration.models.SnapshotListResult;
import com.azure.v2.data.appconfiguration.models.SnapshotStatus;
import com.azure.v2.data.appconfiguration.models.SnapshotUpdateParameters;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.PagedResponse;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.serialization.ObjectSerializer;
import io.clientcore.core.utils.Context;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the AzureAppConfiguration type.
 */
public final class AzureAppConfigurationImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AzureAppConfigurationService service;

    /**
     * Used to guarantee real-time consistency between requests.
     */
    private final String syncToken;

    /**
     * Gets Used to guarantee real-time consistency between requests.
     * 
     * @return the syncToken value.
     */
    public String getSyncToken() {
        return this.syncToken;
    }

    /**
     * The endpoint of the App Configuration instance to send requests to.
     */
    private final String endpoint;

    /**
     * Gets The endpoint of the App Configuration instance to send requests to.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of AzureAppConfiguration client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param endpoint The endpoint of the App Configuration instance to send requests to.
     * @param apiVersion Api Version.
     */
    public AzureAppConfigurationImpl(HttpPipeline httpPipeline, String syncToken, String endpoint, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.syncToken = syncToken;
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.service = RestProxy.create(AzureAppConfigurationService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for AzureAppConfiguration to be used by the proxy service to perform REST
     * calls.
     */
    @ServiceInterface(name = "AzureAppConfiguratio", host = "{endpoint}")
    public interface AzureAppConfigurationService {
        static AzureAppConfigurationService getNewInstance(HttpPipeline pipeline, ObjectSerializer serializer,
            @HostParam("endpoint") String endpoint) {
            try {
                Class<?> clazz = Class
                    .forName("com.azure.v2.data.appconfiguration.implementation.AzureAppConfigurationServiceImpl");
                return (AzureAppConfigurationService) clazz
                    .getMethod("getNewInstance", HttpPipeline.class, ObjectSerializer.class, String.class)
                    .invoke(null, pipeline, serializer, endpoint);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }

        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyListResult> getKeys(@QueryParam("name") String name, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyListResult getKeys(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return getKeys(null, null, apiVersion, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> checkKeys(@QueryParam("name") String name, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/keys", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void checkKeys(@QueryParam("api-version") String apiVersion) {
            checkKeys(null, null, apiVersion, null, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getKeyValues(@QueryParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select, @QueryParam("snapshot") String snapshot,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValueListResult getKeyValues(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return getKeyValues(null, null, null, apiVersion, null, null, null, null, null, null, null, accept, null)
                .getValue();
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> checkKeyValues(@QueryParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select, @QueryParam("snapshot") String snapshot,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void checkKeyValues(@QueryParam("api-version") String apiVersion) {
            checkKeyValues(null, null, null, apiVersion, null, null, null, null, null, null, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> getKeyValue(@PathParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @QueryParam("$Select") String select,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValue getKeyValue(@PathParam("key") String key, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return getKeyValue(key, null, null, apiVersion, null, null, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> putKeyValue(@PathParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") KeyValue entity, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValue putKeyValue(@PathParam("key") String key, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return putKeyValue(key, null, null, apiVersion, null, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/kv/{key}", expectedStatusCodes = { 200, 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> deleteKeyValue(@PathParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/kv/{key}", expectedStatusCodes = { 200, 204 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValue deleteKeyValue(@PathParam("key") String key, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return deleteKeyValue(key, null, null, apiVersion, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> checkKeyValue(@PathParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, @QueryParam("$Select") String select,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/kv/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void checkKeyValue(@PathParam("key") String key, @QueryParam("api-version") String apiVersion) {
            checkKeyValue(key, null, null, apiVersion, null, null, null, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<SnapshotListResult> getSnapshots(@QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after, @QueryParam("$Select") String select,
            @QueryParam("status") String status, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default SnapshotListResult getSnapshots(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return getSnapshots(null, null, apiVersion, null, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> checkSnapshots(@HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @QueryParam("After") String after,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void checkSnapshots(@QueryParam("api-version") String apiVersion) {
            checkSnapshots(null, apiVersion, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Snapshot> getSnapshot(@HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @QueryParam("$Select") String select, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default Snapshot getSnapshot(@QueryParam("api-version") String apiVersion, @PathParam("name") String name,
            @HeaderParam("Accept") String accept) {
            return getSnapshot(null, apiVersion, name, null, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/snapshots/{name}", expectedStatusCodes = { 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Snapshot> createSnapshot(@PathParam("name") String name, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") Snapshot entity,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/snapshots/{name}", expectedStatusCodes = { 201 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default Snapshot createSnapshot(@PathParam("name") String name, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") Snapshot entity, @HeaderParam("Accept") String accept) {
            return createSnapshot(name, null, apiVersion, entity, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<Snapshot> updateSnapshot(@PathParam("name") String name, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            @BodyParam("application/json") SnapshotUpdateParameters entity, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PATCH, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default Snapshot updateSnapshot(@PathParam("name") String name, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SnapshotUpdateParameters entity, @HeaderParam("Accept") String accept) {
            return updateSnapshot(name, null, apiVersion, null, null, entity, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> checkSnapshot(@PathParam("name") String name, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/snapshots/{name}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void checkSnapshot(@PathParam("name") String name, @QueryParam("api-version") String apiVersion) {
            checkSnapshot(name, null, apiVersion, null, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<LabelListResult> getLabels(@QueryParam("name") String name,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select, @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default LabelListResult getLabels(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return getLabels(null, null, apiVersion, null, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> checkLabels(@QueryParam("name") String name, @HeaderParam("Sync-Token") String syncToken,
            @QueryParam("api-version") String apiVersion, @QueryParam("After") String after,
            @HeaderParam("Accept-Datetime") String acceptDatetime, @QueryParam("$Select") String select,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/labels", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void checkLabels(@QueryParam("api-version") String apiVersion) {
            checkLabels(null, null, apiVersion, null, null, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> putLock(@PathParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValue putLock(@PathParam("key") String key, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return putLock(key, null, null, apiVersion, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValue> deleteLock(@PathParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.DELETE, path = "/locks/{key}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValue deleteLock(@PathParam("key") String key, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return deleteLock(key, null, null, apiVersion, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getRevisions(@QueryParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValueListResult getRevisions(@QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept) {
            return getRevisions(null, null, null, apiVersion, null, null, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        Response<Void> checkRevisions(@QueryParam("key") String key, @QueryParam("label") String label,
            @HeaderParam("Sync-Token") String syncToken, @QueryParam("api-version") String apiVersion,
            @QueryParam("After") String after, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @QueryParam("$Select") String select,
            @QueryParam(value = "tags", multipleQueryParams = true) List<String> tags, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.HEAD, path = "/revisions", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail
        default void checkRevisions(@QueryParam("api-version") String apiVersion) {
            checkRevisions(null, null, null, apiVersion, null, null, null, null, null);
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "/operations", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<OperationDetails> getOperationDetails(@QueryParam("api-version") String apiVersion,
            @QueryParam("snapshot") String snapshot, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/operations", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default OperationDetails getOperationDetails(@QueryParam("api-version") String apiVersion,
            @QueryParam("snapshot") String snapshot, @HeaderParam("Accept") String accept) {
            return getOperationDetails(apiVersion, snapshot, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyListResult> getKeysNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyListResult getKeysNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Accept") String accept) {
            return getKeysNext(nextLink, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getKeyValuesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValueListResult getKeyValuesNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Accept") String accept) {
            return getKeyValuesNext(nextLink, null, null, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<SnapshotListResult> getSnapshotsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default SnapshotListResult getSnapshotsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Accept") String accept) {
            return getSnapshotsNext(nextLink, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<LabelListResult> getLabelsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default LabelListResult getLabelsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Accept") String accept) {
            return getLabelsNext(nextLink, null, null, accept, null).getValue();
        }

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        Response<KeyValueListResult> getRevisionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Sync-Token") String syncToken, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(method = HttpMethod.GET, path = "{nextLink}", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = Error.class)
        default KeyValueListResult getRevisionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HeaderParam("Accept") String accept) {
            return getRevisionsNext(nextLink, null, null, accept, null).getValue();
        }
    }

    /**
     * Gets a list of keys.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    public PagedResponse<Key> getKeysSinglePage(String name, String after, String acceptDatetime) {
        final String accept = "application/vnd.microsoft.appconfig.keyset+json, application/problem+json";
        Response<KeyListResult> res = service.getKeys(name, this.getSyncToken(), this.getApiVersion(), after,
            acceptDatetime, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of keys.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    public PagedResponse<Key> getKeysSinglePage(String name, String after, String acceptDatetime,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.keyset+json, application/problem+json";
        Response<KeyListResult> res = service.getKeys(name, this.getSyncToken(), this.getApiVersion(), after,
            acceptDatetime, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of keys.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    public PagedIterable<Key> getKeys(String name, String after, String acceptDatetime) {
        return new PagedIterable<>((pagingOptions) -> getKeysSinglePage(name, after, acceptDatetime),
            (pagingOptions, nextLink) -> getKeysNextSinglePage(nextLink, acceptDatetime));
    }

    /**
     * Gets a list of keys.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    public PagedIterable<Key> getKeys(String name, String after, String acceptDatetime, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>((pagingOptions) -> getKeysSinglePage(name, after, acceptDatetime, requestOptions),
            (pagingOptions, nextLink) -> getKeysNextSinglePage(nextLink, acceptDatetime, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Void> checkKeysWithResponse(String name, String after, String acceptDatetime,
        RequestOptions requestOptions) {
        return service.checkKeys(name, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime,
            requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void checkKeys(String name, String after, String acceptDatetime) {
        checkKeysWithResponse(name, after, acceptDatetime, RequestOptions.none());
    }

    /**
     * Gets a list of key-values.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of the snapshot. Not
     * valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    public PagedResponse<KeyValue> getKeyValuesSinglePage(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res
            = service.getKeyValues(key, label, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime,
                selectConverted, snapshot, ifMatch, ifNoneMatch, tagsConverted, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of the snapshot. Not
     * valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    public PagedResponse<KeyValue> getKeyValuesSinglePage(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res
            = service.getKeyValues(key, label, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime,
                selectConverted, snapshot, ifMatch, ifNoneMatch, tagsConverted, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-values.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of the snapshot. Not
     * valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    public PagedIterable<KeyValue> getKeyValues(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags) {
        return new PagedIterable<>(
            (pagingOptions) -> getKeyValuesSinglePage(key, label, after, acceptDatetime, select, snapshot, ifMatch,
                ifNoneMatch, tags),
            (pagingOptions, nextLink) -> getKeyValuesNextSinglePage(nextLink, acceptDatetime, ifMatch, ifNoneMatch));
    }

    /**
     * Gets a list of key-values.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of the snapshot. Not
     * valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    public PagedIterable<KeyValue> getKeyValues(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>(
            (pagingOptions) -> getKeyValuesSinglePage(key, label, after, acceptDatetime, select, snapshot, ifMatch,
                ifNoneMatch, tags, requestOptions),
            (pagingOptions, nextLink) -> getKeyValuesNextSinglePage(nextLink, acceptDatetime, ifMatch, ifNoneMatch,
                requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Void> checkKeyValuesWithResponse(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags,
        RequestOptions requestOptions) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.checkKeyValues(key, label, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime,
            selectConverted, snapshot, ifMatch, ifNoneMatch, tagsConverted, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void checkKeyValues(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags) {
        checkKeyValuesWithResponse(key, label, after, acceptDatetime, select, snapshot, ifMatch, ifNoneMatch, tags,
            RequestOptions.none());
    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    public Response<KeyValue> getKeyValueWithResponse(String key, String label, String acceptDatetime, String ifMatch,
        String ifNoneMatch, List<KeyValueFields> select, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.getKeyValue(key, label, this.getSyncToken(), this.getApiVersion(), acceptDatetime, ifMatch,
            ifNoneMatch, selectConverted, accept, requestOptions);
    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    public KeyValue getKeyValue(String key, String label, String acceptDatetime, String ifMatch, String ifNoneMatch,
        List<KeyValueFields> select) {
        return getKeyValueWithResponse(key, label, acceptDatetime, ifMatch, ifNoneMatch, select, RequestOptions.none())
            .getValue();
    }

    /**
     * Creates a key-value.
     * 
     * @param key The key of the key-value to create.
     * @param label The label of the key-value to create.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param entity The key-value to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<KeyValue> putKeyValueWithResponse(String key, String label, String ifMatch, String ifNoneMatch,
        KeyValue entity, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.putKeyValue(key, label, this.getSyncToken(), this.getApiVersion(), ifMatch, ifNoneMatch, entity,
            accept, requestOptions);
    }

    /**
     * Creates a key-value.
     * 
     * @param key The key of the key-value to create.
     * @param label The label of the key-value to create.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param entity The key-value to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public KeyValue putKeyValue(String key, String label, String ifMatch, String ifNoneMatch, KeyValue entity) {
        return putKeyValueWithResponse(key, label, ifMatch, ifNoneMatch, entity, RequestOptions.none()).getValue();
    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete.
     * @param label The label of the key-value to delete.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<KeyValue> deleteKeyValueWithResponse(String key, String label, String ifMatch,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.deleteKeyValue(key, label, this.getSyncToken(), this.getApiVersion(), ifMatch, accept,
            requestOptions);
    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete.
     * @param label The label of the key-value to delete.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public KeyValue deleteKeyValue(String key, String label, String ifMatch) {
        return deleteKeyValueWithResponse(key, label, ifMatch, RequestOptions.none()).getValue();
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Void> checkKeyValueWithResponse(String key, String label, String acceptDatetime, String ifMatch,
        String ifNoneMatch, List<KeyValueFields> select, RequestOptions requestOptions) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.checkKeyValue(key, label, this.getSyncToken(), this.getApiVersion(), acceptDatetime, ifMatch,
            ifNoneMatch, selectConverted, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void checkKeyValue(String key, String label, String acceptDatetime, String ifMatch, String ifNoneMatch,
        List<KeyValueFields> select) {
        checkKeyValueWithResponse(key, label, acceptDatetime, ifMatch, ifNoneMatch, select, RequestOptions.none());
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    public PagedResponse<Snapshot> getSnapshotsSinglePage(String name, String after, List<SnapshotFields> select,
        List<SnapshotStatus> status) {
        final String accept = "application/vnd.microsoft.appconfig.snapshotset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        String statusConverted = (status == null)
            ? null
            : status.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<SnapshotListResult> res = service.getSnapshots(name, this.getSyncToken(), this.getApiVersion(), after,
            selectConverted, statusConverted, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    public PagedResponse<Snapshot> getSnapshotsSinglePage(String name, String after, List<SnapshotFields> select,
        List<SnapshotStatus> status, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.snapshotset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        String statusConverted = (status == null)
            ? null
            : status.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<SnapshotListResult> res = service.getSnapshots(name, this.getSyncToken(), this.getApiVersion(), after,
            selectConverted, statusConverted, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    public PagedIterable<Snapshot> getSnapshots(String name, String after, List<SnapshotFields> select,
        List<SnapshotStatus> status) {
        return new PagedIterable<>((pagingOptions) -> getSnapshotsSinglePage(name, after, select, status),
            (pagingOptions, nextLink) -> getSnapshotsNextSinglePage(nextLink));
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    public PagedIterable<Snapshot> getSnapshots(String name, String after, List<SnapshotFields> select,
        List<SnapshotStatus> status, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>(
            (pagingOptions) -> getSnapshotsSinglePage(name, after, select, status, requestOptions),
            (pagingOptions, nextLink) -> getSnapshotsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Void> checkSnapshotsWithResponse(String after, RequestOptions requestOptions) {
        return service.checkSnapshots(this.getSyncToken(), this.getApiVersion(), after, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void checkSnapshots(String after) {
        checkSnapshotsWithResponse(after, RequestOptions.none());
    }

    /**
     * Gets a single key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to retrieve.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    public Response<Snapshot> getSnapshotWithResponse(String name, String ifMatch, String ifNoneMatch,
        List<SnapshotFields> select, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.snapshot+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.getSnapshot(this.getSyncToken(), this.getApiVersion(), name, ifMatch, ifNoneMatch,
            selectConverted, accept, requestOptions);
    }

    /**
     * Gets a single key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to retrieve.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    public Snapshot getSnapshot(String name, String ifMatch, String ifNoneMatch, List<SnapshotFields> select) {
        return getSnapshotWithResponse(name, ifMatch, ifNoneMatch, select, RequestOptions.none()).getValue();
    }

    /**
     * Creates a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to create.
     * @param entity The key-value snapshot to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Snapshot> createSnapshotWithResponse(String name, Snapshot entity, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.snapshot+json, application/problem+json";
        return service.createSnapshot(name, this.getSyncToken(), this.getApiVersion(), entity, accept, requestOptions);
    }

    /**
     * Creates a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to create.
     * @param entity The key-value snapshot to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Snapshot createSnapshot(String name, Snapshot entity) {
        return createSnapshotWithResponse(name, entity, RequestOptions.none()).getValue();
    }

    /**
     * Updates the state of a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to update.
     * @param entity The parameters used to update the snapshot.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Snapshot> updateSnapshotWithResponse(String name, SnapshotUpdateParameters entity, String ifMatch,
        String ifNoneMatch, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.snapshot+json, application/problem+json";
        return service.updateSnapshot(name, this.getSyncToken(), this.getApiVersion(), ifMatch, ifNoneMatch, entity,
            accept, requestOptions);
    }

    /**
     * Updates the state of a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to update.
     * @param entity The parameters used to update the snapshot.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Snapshot updateSnapshot(String name, SnapshotUpdateParameters entity, String ifMatch, String ifNoneMatch) {
        return updateSnapshotWithResponse(name, entity, ifMatch, ifNoneMatch, RequestOptions.none()).getValue();
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name The name of the key-value snapshot to check.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Void> checkSnapshotWithResponse(String name, String ifMatch, String ifNoneMatch,
        RequestOptions requestOptions) {
        return service.checkSnapshot(name, this.getSyncToken(), this.getApiVersion(), ifMatch, ifNoneMatch,
            requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name The name of the key-value snapshot to check.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void checkSnapshot(String name, String ifMatch, String ifNoneMatch) {
        checkSnapshotWithResponse(name, ifMatch, ifNoneMatch, RequestOptions.none());
    }

    /**
     * Gets a list of labels.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    public PagedResponse<Label> getLabelsSinglePage(String name, String after, String acceptDatetime,
        List<LabelFields> select) {
        final String accept = "application/vnd.microsoft.appconfig.labelset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<LabelListResult> res = service.getLabels(name, this.getSyncToken(), this.getApiVersion(), after,
            acceptDatetime, selectConverted, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    public PagedResponse<Label> getLabelsSinglePage(String name, String after, String acceptDatetime,
        List<LabelFields> select, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.labelset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        Response<LabelListResult> res = service.getLabels(name, this.getSyncToken(), this.getApiVersion(), after,
            acceptDatetime, selectConverted, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of labels.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    public PagedIterable<Label> getLabels(String name, String after, String acceptDatetime, List<LabelFields> select) {
        return new PagedIterable<>((pagingOptions) -> getLabelsSinglePage(name, after, acceptDatetime, select),
            (pagingOptions, nextLink) -> getLabelsNextSinglePage(nextLink, acceptDatetime));
    }

    /**
     * Gets a list of labels.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    public PagedIterable<Label> getLabels(String name, String after, String acceptDatetime, List<LabelFields> select,
        RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>(
            (pagingOptions) -> getLabelsSinglePage(name, after, acceptDatetime, select, requestOptions),
            (pagingOptions, nextLink) -> getLabelsNextSinglePage(nextLink, acceptDatetime, requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Void> checkLabelsWithResponse(String name, String after, String acceptDatetime,
        List<LabelFields> select, RequestOptions requestOptions) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.checkLabels(name, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime,
            selectConverted, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void checkLabels(String name, String after, String acceptDatetime, List<LabelFields> select) {
        checkLabelsWithResponse(name, after, acceptDatetime, select, RequestOptions.none());
    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock.
     * @param label The label, if any, of the key-value to lock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<KeyValue> putLockWithResponse(String key, String label, String ifMatch, String ifNoneMatch,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.putLock(key, label, this.getSyncToken(), this.getApiVersion(), ifMatch, ifNoneMatch, accept,
            requestOptions);
    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock.
     * @param label The label, if any, of the key-value to lock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public KeyValue putLock(String key, String label, String ifMatch, String ifNoneMatch) {
        return putLockWithResponse(key, label, ifMatch, ifNoneMatch, RequestOptions.none()).getValue();
    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock.
     * @param label The label, if any, of the key-value to unlock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<KeyValue> deleteLockWithResponse(String key, String label, String ifMatch, String ifNoneMatch,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kv+json, application/problem+json";
        return service.deleteLock(key, label, this.getSyncToken(), this.getApiVersion(), ifMatch, ifNoneMatch, accept,
            requestOptions);
    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock.
     * @param label The label, if any, of the key-value to unlock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public KeyValue deleteLock(String key, String label, String ifMatch, String ifNoneMatch) {
        return deleteLockWithResponse(key, label, ifMatch, ifNoneMatch, RequestOptions.none()).getValue();
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    public PagedResponse<KeyValue> getRevisionsSinglePage(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res = service.getRevisions(key, label, this.getSyncToken(), this.getApiVersion(),
            after, acceptDatetime, selectConverted, tagsConverted, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    public PagedResponse<KeyValue> getRevisionsSinglePage(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        Response<KeyValueListResult> res = service.getRevisions(key, label, this.getSyncToken(), this.getApiVersion(),
            after, acceptDatetime, selectConverted, tagsConverted, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    public PagedIterable<KeyValue> getRevisions(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags) {
        return new PagedIterable<>(
            (pagingOptions) -> getRevisionsSinglePage(key, label, after, acceptDatetime, select, tags),
            (pagingOptions, nextLink) -> getRevisionsNextSinglePage(nextLink, acceptDatetime));
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    public PagedIterable<KeyValue> getRevisions(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(requestOptions != null && requestOptions.getContext() != null
            ? requestOptions.getContext()
            : Context.none());
        return new PagedIterable<>(
            (pagingOptions) -> getRevisionsSinglePage(key, label, after, acceptDatetime, select, tags, requestOptions),
            (pagingOptions, nextLink) -> getRevisionsNextSinglePage(nextLink, acceptDatetime,
                requestOptionsForNextPage));
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    public Response<Void> checkRevisionsWithResponse(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags, RequestOptions requestOptions) {
        String selectConverted = (select == null)
            ? null
            : select.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        List<String> tagsConverted = (tags == null)
            ? new ArrayList<>()
            : tags.stream().map(item -> Objects.toString(item, "")).collect(Collectors.toList());
        return service.checkRevisions(key, label, this.getSyncToken(), this.getApiVersion(), after, acceptDatetime,
            selectConverted, tagsConverted, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void checkRevisions(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags) {
        checkRevisionsWithResponse(key, label, after, acceptDatetime, select, tags, RequestOptions.none());
    }

    /**
     * Gets the state of a long running operation.
     * 
     * @param snapshot Snapshot identifier for the long running operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    public Response<OperationDetails> getOperationDetailsWithResponse(String snapshot, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getOperationDetails(this.getApiVersion(), snapshot, accept, requestOptions);
    }

    /**
     * Gets the state of a long running operation.
     * 
     * @param snapshot Snapshot identifier for the long running operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    public OperationDetails getOperationDetails(String snapshot) {
        return getOperationDetailsWithResponse(snapshot, RequestOptions.none()).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<Key> getKeysNextSinglePage(String nextLink, String acceptDatetime) {
        final String accept = "application/vnd.microsoft.appconfig.keyset+json, application/problem+json";
        Response<KeyListResult> res
            = service.getKeysNext(nextLink, this.getSyncToken(), acceptDatetime, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<Key> getKeysNextSinglePage(String nextLink, String acceptDatetime,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.keyset+json, application/problem+json";
        Response<KeyListResult> res
            = service.getKeysNext(nextLink, this.getSyncToken(), acceptDatetime, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<KeyValue> getKeyValuesNextSinglePage(String nextLink, String acceptDatetime, String ifMatch,
        String ifNoneMatch) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        Response<KeyValueListResult> res = service.getKeyValuesNext(nextLink, this.getSyncToken(), acceptDatetime,
            ifMatch, ifNoneMatch, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<KeyValue> getKeyValuesNextSinglePage(String nextLink, String acceptDatetime, String ifMatch,
        String ifNoneMatch, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        Response<KeyValueListResult> res = service.getKeyValuesNext(nextLink, this.getSyncToken(), acceptDatetime,
            ifMatch, ifNoneMatch, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a snapshot list request.
     */
    public PagedResponse<Snapshot> getSnapshotsNextSinglePage(String nextLink) {
        final String accept = "application/vnd.microsoft.appconfig.snapshotset+json, application/problem+json";
        Response<SnapshotListResult> res
            = service.getSnapshotsNext(nextLink, this.getSyncToken(), accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a snapshot list request.
     */
    public PagedResponse<Snapshot> getSnapshotsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.snapshotset+json, application/problem+json";
        Response<SnapshotListResult> res
            = service.getSnapshotsNext(nextLink, this.getSyncToken(), accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<Label> getLabelsNextSinglePage(String nextLink, String acceptDatetime) {
        final String accept = "application/vnd.microsoft.appconfig.labelset+json, application/problem+json";
        Response<LabelListResult> res
            = service.getLabelsNext(nextLink, this.getSyncToken(), acceptDatetime, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<Label> getLabelsNextSinglePage(String nextLink, String acceptDatetime,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.labelset+json, application/problem+json";
        Response<LabelListResult> res
            = service.getLabelsNext(nextLink, this.getSyncToken(), acceptDatetime, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<KeyValue> getRevisionsNextSinglePage(String nextLink, String acceptDatetime) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        Response<KeyValueListResult> res
            = service.getRevisionsNext(nextLink, this.getSyncToken(), acceptDatetime, accept, RequestOptions.none());
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a list request.
     */
    public PagedResponse<KeyValue> getRevisionsNextSinglePage(String nextLink, String acceptDatetime,
        RequestOptions requestOptions) {
        final String accept = "application/vnd.microsoft.appconfig.kvset+json, application/problem+json";
        Response<KeyValueListResult> res
            = service.getRevisionsNext(nextLink, this.getSyncToken(), acceptDatetime, accept, requestOptions);
        return new PagedResponse<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getBody(),
            res.getValue().getItems(), null, res.getValue().getNextLink(), null, null, null);
    }
}
