// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * A key-value pair representing application settings.
 */
@Metadata(conditions = { TypeConditions.FLUENT })
public final class KeyValue implements JsonSerializable<KeyValue> {
    /*
     * The key of the key-value.
     */
    @Metadata(generated = true)
    private String key;

    /*
     * The label the key-value belongs to.
     */
    @Metadata(generated = true)
    private String label;

    /*
     * The content type of the value stored within the key-value.
     */
    @Metadata(generated = true)
    private String contentType;

    /*
     * The value of the key-value.
     */
    @Metadata(generated = true)
    private String value;

    /*
     * A date representing the last time the key-value was modified.
     */
    @Metadata(generated = true)
    private OffsetDateTime lastModified;

    /*
     * The tags of the key-value
     */
    @Metadata(generated = true)
    private Map<String, String> tags;

    /*
     * Indicates whether the key-value is locked.
     */
    @Metadata(generated = true)
    private Boolean locked;

    /*
     * A value representing the current state of the resource.
     */
    @Metadata(generated = true)
    private String etag;

    /**
     * Creates an instance of KeyValue class.
     */
    @Metadata(generated = true)
    public KeyValue() {
    }

    /**
     * Get the key property: The key of the key-value.
     * 
     * @return the key value.
     */
    @Metadata(generated = true)
    public String getKey() {
        return this.key;
    }

    /**
     * Get the label property: The label the key-value belongs to.
     * 
     * @return the label value.
     */
    @Metadata(generated = true)
    public String getLabel() {
        return this.label;
    }

    /**
     * Set the label property: The label the key-value belongs to.
     * 
     * @param label the label value to set.
     * @return the KeyValue object itself.
     */
    @Metadata(generated = true)
    public KeyValue setLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the contentType property: The content type of the value stored within the key-value.
     * 
     * @return the contentType value.
     */
    @Metadata(generated = true)
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: The content type of the value stored within the key-value.
     * 
     * @param contentType the contentType value to set.
     * @return the KeyValue object itself.
     */
    @Metadata(generated = true)
    public KeyValue setContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the value property: The value of the key-value.
     * 
     * @return the value value.
     */
    @Metadata(generated = true)
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value of the key-value.
     * 
     * @param value the value value to set.
     * @return the KeyValue object itself.
     */
    @Metadata(generated = true)
    public KeyValue setValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the lastModified property: A date representing the last time the key-value was modified.
     * 
     * @return the lastModified value.
     */
    @Metadata(generated = true)
    public OffsetDateTime getLastModified() {
        return this.lastModified;
    }

    /**
     * Set the lastModified property: A date representing the last time the key-value was modified.
     * 
     * @param lastModified the lastModified value to set.
     * @return the KeyValue object itself.
     */
    @Metadata(generated = true)
    public KeyValue setLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }

    /**
     * Get the tags property: The tags of the key-value.
     * 
     * @return the tags value.
     */
    @Metadata(generated = true)
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags of the key-value.
     * 
     * @param tags the tags value to set.
     * @return the KeyValue object itself.
     */
    @Metadata(generated = true)
    public KeyValue setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the locked property: Indicates whether the key-value is locked.
     * 
     * @return the locked value.
     */
    @Metadata(generated = true)
    public Boolean isLocked() {
        return this.locked;
    }

    /**
     * Set the locked property: Indicates whether the key-value is locked.
     * 
     * @param locked the locked value to set.
     * @return the KeyValue object itself.
     */
    @Metadata(generated = true)
    public KeyValue setLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }

    /**
     * Get the etag property: A value representing the current state of the resource.
     * 
     * @return the etag value.
     */
    @Metadata(generated = true)
    public String getEtag() {
        return this.etag;
    }

    /**
     * Set the etag property: A value representing the current state of the resource.
     * 
     * @param etag the etag value to set.
     * @return the KeyValue object itself.
     */
    @Metadata(generated = true)
    public KeyValue setEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("label", this.label);
        jsonWriter.writeStringField("content_type", this.contentType);
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("last_modified",
            this.lastModified == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModified));
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("locked", this.locked);
        jsonWriter.writeStringField("etag", this.etag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyValue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyValue if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeyValue.
     */
    @Metadata(generated = true)
    public static KeyValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyValue deserializedKeyValue = new KeyValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedKeyValue.key = reader.getString();
                } else if ("label".equals(fieldName)) {
                    deserializedKeyValue.label = reader.getString();
                } else if ("content_type".equals(fieldName)) {
                    deserializedKeyValue.contentType = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedKeyValue.value = reader.getString();
                } else if ("last_modified".equals(fieldName)) {
                    deserializedKeyValue.lastModified
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedKeyValue.tags = tags;
                } else if ("locked".equals(fieldName)) {
                    deserializedKeyValue.locked = reader.getNullable(JsonReader::getBoolean);
                } else if ("etag".equals(fieldName)) {
                    deserializedKeyValue.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeyValue;
        });
    }
}
