// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.data.appconfiguration;

import com.azure.v2.data.appconfiguration.implementation.AzureAppConfigurationImpl;
import com.azure.v2.data.appconfiguration.models.ErrorException;
import com.azure.v2.data.appconfiguration.models.Key;
import com.azure.v2.data.appconfiguration.models.KeyValue;
import com.azure.v2.data.appconfiguration.models.KeyValueFields;
import com.azure.v2.data.appconfiguration.models.Label;
import com.azure.v2.data.appconfiguration.models.LabelFields;
import com.azure.v2.data.appconfiguration.models.OperationDetails;
import com.azure.v2.data.appconfiguration.models.Snapshot;
import com.azure.v2.data.appconfiguration.models.SnapshotFields;
import com.azure.v2.data.appconfiguration.models.SnapshotStatus;
import com.azure.v2.data.appconfiguration.models.SnapshotUpdateParameters;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.exceptions.HttpResponseException;
import io.clientcore.core.http.models.PagedIterable;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import java.util.List;

/**
 * Initializes a new instance of the synchronous AzureAppConfiguration type.
 */
@ServiceClient(builder = AzureAppConfigurationBuilder.class)
public final class AzureAppConfigurationClient {
    @Metadata(generated = true)
    private final AzureAppConfigurationImpl serviceClient;

    /**
     * Initializes an instance of AzureAppConfigurationClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Metadata(generated = true)
    AzureAppConfigurationClient(AzureAppConfigurationImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a list of keys.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String name, String after, String acceptDatetime) {
        return this.serviceClient.getKeys(name, after, acceptDatetime);
    }

    /**
     * Gets a list of keys.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String name, String after, String acceptDatetime, RequestOptions requestOptions) {
        return this.serviceClient.getKeys(name, after, acceptDatetime, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> checkKeysWithResponse(String name, String after, String acceptDatetime,
        RequestOptions requestOptions) {
        return this.serviceClient.checkKeysWithResponse(name, after, acceptDatetime, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void checkKeys(String name, String after, String acceptDatetime) {
        this.serviceClient.checkKeys(name, after, acceptDatetime);
    }

    /**
     * Gets a list of key-values.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of the snapshot. Not
     * valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags) {
        return this.serviceClient.getKeyValues(key, label, after, acceptDatetime, select, snapshot, ifMatch,
            ifNoneMatch, tags);
    }

    /**
     * Gets a list of key-values.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of the snapshot. Not
     * valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags,
        RequestOptions requestOptions) {
        return this.serviceClient.getKeyValues(key, label, after, acceptDatetime, select, snapshot, ifMatch,
            ifNoneMatch, tags, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> checkKeyValuesWithResponse(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags,
        RequestOptions requestOptions) {
        return this.serviceClient.checkKeyValuesWithResponse(key, label, after, acceptDatetime, select, snapshot,
            ifMatch, ifNoneMatch, tags, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void checkKeyValues(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags) {
        this.serviceClient.checkKeyValues(key, label, after, acceptDatetime, select, snapshot, ifMatch, ifNoneMatch,
            tags);
    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @Metadata(generated = true)
    public Response<KeyValue> getKeyValueWithResponse(String key, String label, String acceptDatetime, String ifMatch,
        String ifNoneMatch, List<KeyValueFields> select, RequestOptions requestOptions) {
        return this.serviceClient.getKeyValueWithResponse(key, label, acceptDatetime, ifMatch, ifNoneMatch, select,
            requestOptions);
    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @Metadata(generated = true)
    public KeyValue getKeyValue(String key, String label, String acceptDatetime, String ifMatch, String ifNoneMatch,
        List<KeyValueFields> select) {
        return this.serviceClient.getKeyValue(key, label, acceptDatetime, ifMatch, ifNoneMatch, select);
    }

    /**
     * Creates a key-value.
     * 
     * @param key The key of the key-value to create.
     * @param label The label of the key-value to create.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param entity The key-value to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<KeyValue> putKeyValueWithResponse(String key, String label, String ifMatch, String ifNoneMatch,
        KeyValue entity, RequestOptions requestOptions) {
        return this.serviceClient.putKeyValueWithResponse(key, label, ifMatch, ifNoneMatch, entity, requestOptions);
    }

    /**
     * Creates a key-value.
     * 
     * @param key The key of the key-value to create.
     * @param label The label of the key-value to create.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param entity The key-value to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public KeyValue putKeyValue(String key, String label, String ifMatch, String ifNoneMatch, KeyValue entity) {
        return this.serviceClient.putKeyValue(key, label, ifMatch, ifNoneMatch, entity);
    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete.
     * @param label The label of the key-value to delete.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<KeyValue> deleteKeyValueWithResponse(String key, String label, String ifMatch,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteKeyValueWithResponse(key, label, ifMatch, requestOptions);
    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete.
     * @param label The label of the key-value to delete.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public KeyValue deleteKeyValue(String key, String label, String ifMatch) {
        return this.serviceClient.deleteKeyValue(key, label, ifMatch);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> checkKeyValueWithResponse(String key, String label, String acceptDatetime, String ifMatch,
        String ifNoneMatch, List<KeyValueFields> select, RequestOptions requestOptions) {
        return this.serviceClient.checkKeyValueWithResponse(key, label, acceptDatetime, ifMatch, ifNoneMatch, select,
            requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void checkKeyValue(String key, String label, String acceptDatetime, String ifMatch, String ifNoneMatch,
        List<KeyValueFields> select) {
        this.serviceClient.checkKeyValue(key, label, acceptDatetime, ifMatch, ifNoneMatch, select);
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Snapshot> getSnapshots(String name, String after, List<SnapshotFields> select,
        List<SnapshotStatus> status) {
        return this.serviceClient.getSnapshots(name, after, select, status);
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Snapshot> getSnapshots(String name, String after, List<SnapshotFields> select,
        List<SnapshotStatus> status, RequestOptions requestOptions) {
        return this.serviceClient.getSnapshots(name, after, select, status, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> checkSnapshotsWithResponse(String after, RequestOptions requestOptions) {
        return this.serviceClient.checkSnapshotsWithResponse(after, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void checkSnapshots(String after) {
        this.serviceClient.checkSnapshots(after);
    }

    /**
     * Gets a single key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to retrieve.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @Metadata(generated = true)
    public Response<Snapshot> getSnapshotWithResponse(String name, String ifMatch, String ifNoneMatch,
        List<SnapshotFields> select, RequestOptions requestOptions) {
        return this.serviceClient.getSnapshotWithResponse(name, ifMatch, ifNoneMatch, select, requestOptions);
    }

    /**
     * Gets a single key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to retrieve.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @Metadata(generated = true)
    public Snapshot getSnapshot(String name, String ifMatch, String ifNoneMatch, List<SnapshotFields> select) {
        return this.serviceClient.getSnapshot(name, ifMatch, ifNoneMatch, select);
    }

    /**
     * Creates a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to create.
     * @param entity The key-value snapshot to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Snapshot> createSnapshotWithResponse(String name, Snapshot entity, RequestOptions requestOptions) {
        return this.serviceClient.createSnapshotWithResponse(name, entity, requestOptions);
    }

    /**
     * Creates a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to create.
     * @param entity The key-value snapshot to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Snapshot createSnapshot(String name, Snapshot entity) {
        return this.serviceClient.createSnapshot(name, entity);
    }

    /**
     * Updates the state of a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to update.
     * @param entity The parameters used to update the snapshot.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Snapshot> updateSnapshotWithResponse(String name, SnapshotUpdateParameters entity, String ifMatch,
        String ifNoneMatch, RequestOptions requestOptions) {
        return this.serviceClient.updateSnapshotWithResponse(name, entity, ifMatch, ifNoneMatch, requestOptions);
    }

    /**
     * Updates the state of a key-value snapshot.
     * 
     * @param name The name of the key-value snapshot to update.
     * @param entity The parameters used to update the snapshot.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Snapshot updateSnapshot(String name, SnapshotUpdateParameters entity, String ifMatch, String ifNoneMatch) {
        return this.serviceClient.updateSnapshot(name, entity, ifMatch, ifNoneMatch);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name The name of the key-value snapshot to check.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> checkSnapshotWithResponse(String name, String ifMatch, String ifNoneMatch,
        RequestOptions requestOptions) {
        return this.serviceClient.checkSnapshotWithResponse(name, ifMatch, ifNoneMatch, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name The name of the key-value snapshot to check.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void checkSnapshot(String name, String ifMatch, String ifNoneMatch) {
        this.serviceClient.checkSnapshot(name, ifMatch, ifNoneMatch);
    }

    /**
     * Gets a list of labels.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Label> getLabels(String name, String after, String acceptDatetime, List<LabelFields> select) {
        return this.serviceClient.getLabels(name, after, acceptDatetime, select);
    }

    /**
     * Gets a list of labels.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Label> getLabels(String name, String after, String acceptDatetime, List<LabelFields> select,
        RequestOptions requestOptions) {
        return this.serviceClient.getLabels(name, after, acceptDatetime, select, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> checkLabelsWithResponse(String name, String after, String acceptDatetime,
        List<LabelFields> select, RequestOptions requestOptions) {
        return this.serviceClient.checkLabelsWithResponse(name, after, acceptDatetime, select, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned labels.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void checkLabels(String name, String after, String acceptDatetime, List<LabelFields> select) {
        this.serviceClient.checkLabels(name, after, acceptDatetime, select);
    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock.
     * @param label The label, if any, of the key-value to lock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<KeyValue> putLockWithResponse(String key, String label, String ifMatch, String ifNoneMatch,
        RequestOptions requestOptions) {
        return this.serviceClient.putLockWithResponse(key, label, ifMatch, ifNoneMatch, requestOptions);
    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock.
     * @param label The label, if any, of the key-value to lock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public KeyValue putLock(String key, String label, String ifMatch, String ifNoneMatch) {
        return this.serviceClient.putLock(key, label, ifMatch, ifNoneMatch);
    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock.
     * @param label The label, if any, of the key-value to unlock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<KeyValue> deleteLockWithResponse(String key, String label, String ifMatch, String ifNoneMatch,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteLockWithResponse(key, label, ifMatch, ifNoneMatch, requestOptions);
    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock.
     * @param label The label, if any, of the key-value to unlock.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not match the value
     * provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public KeyValue deleteLock(String key, String label, String ifMatch, String ifNoneMatch) {
        return this.serviceClient.deleteLock(key, label, ifMatch, ifNoneMatch);
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags) {
        return this.serviceClient.getRevisions(key, label, after, acceptDatetime, select, tags);
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @Metadata(generated = true)
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags, RequestOptions requestOptions) {
        return this.serviceClient.getRevisions(key, label, after, acceptDatetime, select, tags, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(generated = true)
    public Response<Void> checkRevisionsWithResponse(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags, RequestOptions requestOptions) {
        return this.serviceClient.checkRevisionsWithResponse(key, label, after, acceptDatetime, select, tags,
            requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @param after Instructs the server to return elements that appear after the element referred to by the specified
     * token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference: https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(generated = true)
    public void checkRevisions(String key, String label, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags) {
        this.serviceClient.checkRevisions(key, label, after, acceptDatetime, select, tags);
    }

    /**
     * Gets the state of a long running operation.
     * 
     * @param snapshot Snapshot identifier for the long running operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    @Metadata(generated = true)
    public Response<OperationDetails> getOperationDetailsWithResponse(String snapshot, RequestOptions requestOptions) {
        return this.serviceClient.getOperationDetailsWithResponse(snapshot, requestOptions);
    }

    /**
     * Gets the state of a long running operation.
     * 
     * @param snapshot Snapshot identifier for the long running operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    @Metadata(generated = true)
    public OperationDetails getOperationDetails(String snapshot) {
        return this.serviceClient.getOperationDetails(snapshot);
    }
}
