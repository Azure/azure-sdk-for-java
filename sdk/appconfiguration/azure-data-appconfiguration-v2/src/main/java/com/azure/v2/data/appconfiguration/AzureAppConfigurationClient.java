// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration;

import com.azure.v2.data.appconfiguration.implementation.AzureAppConfigurationClientImpl;
import com.azure.v2.data.appconfiguration.implementation.models.SnapshotUpdateParameters;
import com.azure.v2.data.appconfiguration.models.ConfigurationSnapshot;
import com.azure.v2.data.appconfiguration.models.ConfigurationSnapshotStatus;
import com.azure.v2.data.appconfiguration.implementation.models.Key;
import com.azure.v2.data.appconfiguration.implementation.models.KeyValue;
import com.azure.v2.data.appconfiguration.models.OperationDetails;
import com.azure.v2.data.appconfiguration.models.SettingFields;
import com.azure.v2.data.appconfiguration.models.SettingLabel;
import com.azure.v2.data.appconfiguration.models.SettingLabelFields;
import com.azure.v2.data.appconfiguration.models.SnapshotFields;
import com.azure.v2.data.appconfiguration.models.UpdateSnapshotRequestContentType;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceClient;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.models.RequestContext;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.paging.PagedIterable;
import io.clientcore.core.models.CoreException;

import java.util.List;

/**
 * Initializes a new instance of the synchronous AzureAppConfigurationClient type.
 */
@ServiceClient(builder = AzureAppConfigurationClientBuilder.class)
class AzureAppConfigurationClient {
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final AzureAppConfigurationClientImpl serviceClient;

    /**
     * Initializes an instance of AzureAppConfigurationClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    AzureAppConfigurationClient(AzureAppConfigurationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String accept, String name, String after, String syncToken,
        String acceptDatetime) {
        return this.serviceClient.getKeys(accept, name, after, syncToken, acceptDatetime);
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String accept) {
        return this.serviceClient.getKeys(accept);
    }

    /**
     * Gets a list of keys.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Key> getKeys(String accept, String name, String after, String syncToken, String acceptDatetime,
        RequestContext requestContext) {
        return this.serviceClient.getKeys(accept, name, after, syncToken, acceptDatetime, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkKeysWithResponse(String name, String after, String syncToken, String acceptDatetime,
        RequestContext requestContext) {
        return this.serviceClient.checkKeysWithResponse(name, after, syncToken, acceptDatetime, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeys(String name, String after, String syncToken, String acceptDatetime) {
        this.serviceClient.checkKeys(name, after, syncToken, acceptDatetime);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeys() {
        this.serviceClient.checkKeys();
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch,
        List<String> tags) {
        return this.serviceClient.getKeyValues(accept, key, label, syncToken, after, acceptDatetime, select, snapshot,
            ifMatch, ifNoneMatch, tags);
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String accept) {
        return this.serviceClient.getKeyValues(accept);
    }

    /**
     * Gets a list of key-values.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getKeyValues(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch,
        List<String> tags, RequestContext requestContext) {
        return this.serviceClient.getKeyValues(accept, key, label, syncToken, after, acceptDatetime, select, snapshot,
            ifMatch, ifNoneMatch, tags, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkKeyValuesWithResponse(String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch,
        List<String> tags, RequestContext requestContext) {
        return this.serviceClient.checkKeyValuesWithResponse(key, label, syncToken, after, acceptDatetime, select,
            snapshot, ifMatch, ifNoneMatch, tags, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValues(String key, String label, String syncToken, String after, String acceptDatetime,
        List<SettingFields> select, String snapshot, String ifMatch, String ifNoneMatch, List<String> tags) {
        this.serviceClient.checkKeyValues(key, label, syncToken, after, acceptDatetime, select, snapshot, ifMatch,
            ifNoneMatch, tags);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValues() {
        this.serviceClient.checkKeyValues();
    }

    /**
     * Gets a single key-value.
     *
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @param label The label of the key-value to retrieve.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> getKeyValueWithResponse(String key, String accept, String label,
        List<SettingFields> select, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch,
        RequestContext requestContext) {
        return this.serviceClient.getKeyValueWithResponse(key, accept, label, select, syncToken, acceptDatetime,
            ifMatch, ifNoneMatch, requestContext);
    }

    /**
     * Gets a single key-value.
     *
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @param label The label of the key-value to retrieve.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue getKeyValue(String key, String accept, String label, List<SettingFields> select, String syncToken,
        String acceptDatetime, String ifMatch, String ifNoneMatch) {
        return this.serviceClient.getKeyValue(key, accept, label, select, syncToken, acceptDatetime, ifMatch,
            ifNoneMatch);
    }

    /**
     * Gets a single key-value.
     *
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue getKeyValue(String key, String accept) {
        return this.serviceClient.getKeyValue(key, accept);
    }

    /**
     * Creates a key-value.
     *
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @param label The label of the key-value to create.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param entity The key-value to create.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> putKeyValueWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, String ifNoneMatch, KeyValue entity, RequestContext requestContext) {
        // Operation 'putKeyValue' can be invoked with multiple content-type. It is difficult to form a correct method
        // signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.putKeyValueWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch, entity,
            requestContext);
    }

    /**
     * Creates a key-value.
     *
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @param label The label of the key-value to create.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param entity The key-value to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putKeyValue(String key, String accept, String label, String syncToken, String ifMatch,
        String ifNoneMatch, KeyValue entity) {
        // Operation 'putKeyValue' can be invoked with multiple content-type. It is difficult to form a correct method
        // signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.putKeyValue(key, accept, label, syncToken, ifMatch, ifNoneMatch, entity);
    }

    /**
     * Creates a key-value.
     *
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putKeyValue(String key, String accept) {
        // Operation 'putKeyValue' can be invoked with multiple content-type. It is difficult to form a correct method
        // signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.putKeyValue(key, accept);
    }

    /**
     * Deletes a key-value.
     *
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @param label The label of the key-value to delete.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> deleteKeyValueWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, RequestContext requestContext) {
        return this.serviceClient.deleteKeyValueWithResponse(key, accept, label, syncToken, ifMatch, requestContext);
    }

    /**
     * Deletes a key-value.
     *
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @param label The label of the key-value to delete.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteKeyValue(String key, String accept, String label, String syncToken, String ifMatch) {
        return this.serviceClient.deleteKeyValue(key, accept, label, syncToken, ifMatch);
    }

    /**
     * Deletes a key-value.
     *
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteKeyValue(String key, String accept) {
        return this.serviceClient.deleteKeyValue(key, accept);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkKeyValueWithResponse(String key, String label, String syncToken, String acceptDatetime,
        String ifMatch, String ifNoneMatch, List<SettingFields> select, RequestContext requestContext) {
        return this.serviceClient.checkKeyValueWithResponse(key, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch,
            select, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValue(String key, String label, String syncToken, String acceptDatetime, String ifMatch,
        String ifNoneMatch, List<SettingFields> select) {
        this.serviceClient.checkKeyValue(key, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, select);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key The key of the key-value to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkKeyValue(String key) {
        this.serviceClient.checkKeyValue(key);
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationSnapshot> getSnapshots(String accept, String name, String after,
        List<SnapshotFields> select, List<ConfigurationSnapshotStatus> status, String syncToken) {
        return this.serviceClient.getSnapshots(accept, name, after, select, status, syncToken);
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationSnapshot> getSnapshots(String accept) {
        return this.serviceClient.getSnapshots(accept);
    }

    /**
     * Gets a list of key-value snapshots.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConfigurationSnapshot> getSnapshots(String accept, String name, String after,
        List<SnapshotFields> select, List<ConfigurationSnapshotStatus> status, String syncToken,
        RequestContext requestContext) {
        return this.serviceClient.getSnapshots(accept, name, after, select, status, syncToken, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkSnapshotsWithResponse(String syncToken, String after, RequestContext requestContext) {
        return this.serviceClient.checkSnapshotsWithResponse(syncToken, after, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshots(String syncToken, String after) {
        this.serviceClient.checkSnapshots(syncToken, after);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshots() {
        this.serviceClient.checkSnapshots();
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSnapshot> getSnapshotWithResponse(String name, String accept,
        List<SnapshotFields> select, String syncToken, String ifMatch, String ifNoneMatch,
        RequestContext requestContext) {
        return this.serviceClient.getSnapshotWithResponse(name, accept, select, syncToken, ifMatch, ifNoneMatch,
            requestContext);
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot getSnapshot(String name, String accept, List<SnapshotFields> select, String syncToken,
        String ifMatch, String ifNoneMatch) {
        return this.serviceClient.getSnapshot(name, accept, select, syncToken, ifMatch, ifNoneMatch);
    }

    /**
     * Gets a single key-value snapshot.
     *
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot getSnapshot(String name, String accept) {
        return this.serviceClient.getSnapshot(name, accept);
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param contentType Content-Type header.
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSnapshot> updateSnapshotWithResponse(UpdateSnapshotRequestContentType contentType,
        String name, String accept, SnapshotUpdateParameters entity, String syncToken, String ifMatch,
        String ifNoneMatch, RequestContext requestContext) {
        // Operation 'updateSnapshot' can be invoked with multiple content-type. It is difficult to form a correct
        // method signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.updateSnapshotWithResponse(contentType, name, accept, entity, syncToken, ifMatch,
            ifNoneMatch, requestContext);
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param contentType Content-Type header.
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot updateSnapshot(UpdateSnapshotRequestContentType contentType, String name,
        String accept, SnapshotUpdateParameters entity, String syncToken, String ifMatch, String ifNoneMatch) {
        // Operation 'updateSnapshot' can be invoked with multiple content-type. It is difficult to form a correct
        // method signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.updateSnapshot(contentType, name, accept, entity, syncToken, ifMatch, ifNoneMatch);
    }

    /**
     * Updates the state of a key-value snapshot.
     *
     * @param contentType Content-Type header.
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSnapshot updateSnapshot(UpdateSnapshotRequestContentType contentType, String name,
        String accept, SnapshotUpdateParameters entity) {
        // Operation 'updateSnapshot' can be invoked with multiple content-type. It is difficult to form a correct
        // method signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.updateSnapshot(contentType, name, accept, entity);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name The name of the key-value snapshot to check.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkSnapshotWithResponse(String name, String syncToken, String ifMatch, String ifNoneMatch,
        RequestContext requestContext) {
        return this.serviceClient.checkSnapshotWithResponse(name, syncToken, ifMatch, ifNoneMatch, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name The name of the key-value snapshot to check.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshot(String name, String syncToken, String ifMatch, String ifNoneMatch) {
        this.serviceClient.checkSnapshot(name, syncToken, ifMatch, ifNoneMatch);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name The name of the key-value snapshot to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkSnapshot(String name) {
        this.serviceClient.checkSnapshot(name);
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SettingLabel> getLabels(String accept, String name, String syncToken, String after,
        String acceptDatetime, List<SettingLabelFields> select) {
        return this.serviceClient.getLabels(accept, name, syncToken, after, acceptDatetime, select);
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SettingLabel> getLabels(String accept) {
        return this.serviceClient.getLabels(accept);
    }

    /**
     * Gets a list of labels.
     *
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SettingLabel> getLabels(String accept, String name, String syncToken, String after,
        String acceptDatetime, List<SettingLabelFields> select, RequestContext requestContext) {
        return this.serviceClient.getLabels(accept, name, syncToken, after, acceptDatetime, select, requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkLabelsWithResponse(String name, String syncToken, String after, String acceptDatetime,
        List<SettingLabelFields> select, RequestContext requestContext) {
        return this.serviceClient.checkLabelsWithResponse(name, syncToken, after, acceptDatetime, select,
            requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkLabels(String name, String syncToken, String after, String acceptDatetime,
        List<SettingLabelFields> select) {
        this.serviceClient.checkLabels(name, syncToken, after, acceptDatetime, select);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkLabels() {
        this.serviceClient.checkLabels();
    }

    /**
     * Locks a key-value.
     *
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to lock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> putLockWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, String ifNoneMatch, RequestContext requestContext) {
        return this.serviceClient.putLockWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch,
            requestContext);
    }

    /**
     * Locks a key-value.
     *
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to lock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putLock(String key, String accept, String label, String syncToken, String ifMatch,
        String ifNoneMatch) {
        return this.serviceClient.putLock(key, accept, label, syncToken, ifMatch, ifNoneMatch);
    }

    /**
     * Locks a key-value.
     *
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue putLock(String key, String accept) {
        return this.serviceClient.putLock(key, accept);
    }

    /**
     * Unlocks a key-value.
     *
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to unlock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<KeyValue> deleteLockWithResponse(String key, String accept, String label, String syncToken,
        String ifMatch, String ifNoneMatch, RequestContext requestContext) {
        return this.serviceClient.deleteLockWithResponse(key, accept, label, syncToken, ifMatch, ifNoneMatch,
            requestContext);
    }

    /**
     * Unlocks a key-value.
     *
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to unlock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @param ifNoneMatch Used to perform an operation only if the targeted resource's etag does not
     * match the value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteLock(String key, String accept, String label, String syncToken, String ifMatch,
        String ifNoneMatch) {
        return this.serviceClient.deleteLock(key, accept, label, syncToken, ifMatch, ifNoneMatch);
    }

    /**
     * Unlocks a key-value.
     *
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyValue deleteLock(String key, String accept) {
        return this.serviceClient.deleteLock(key, accept);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, List<String> tags) {
        return this.serviceClient.getRevisions(accept, key, label, syncToken, after, acceptDatetime, select, tags);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String accept) {
        return this.serviceClient.getRevisions(accept);
    }

    /**
     * Gets a list of key-value revisions.
     *
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyValue> getRevisions(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, List<String> tags, RequestContext requestContext) {
        return this.serviceClient.getRevisions(accept, key, label, syncToken, after, acceptDatetime, select, tags,
            requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> checkRevisionsWithResponse(String key, String label, String syncToken, String after,
        String acceptDatetime, List<SettingFields> select, List<String> tags, RequestContext requestContext) {
        return this.serviceClient.checkRevisionsWithResponse(key, label, syncToken, after, acceptDatetime, select, tags,
            requestContext);
    }

    /**
     * Requests the headers and status of the given resource.
     *
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkRevisions(String key, String label, String syncToken, String after, String acceptDatetime,
        List<SettingFields> select, List<String> tags) {
        this.serviceClient.checkRevisions(key, label, syncToken, after, acceptDatetime, select, tags);
    }

    /**
     * Requests the headers and status of the given resource.
     *
    
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkRevisions() {
        this.serviceClient.checkRevisions();
    }

    /**
     * Gets the state of a long running operation.
     *
     * @param snapshot Snapshot identifier for the long running operation.
     * @param requestContext The options to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationDetails> getOperationDetailsWithResponse(String snapshot, RequestContext requestContext) {
        return this.serviceClient.getOperationDetailsWithResponse(snapshot, requestContext);
    }

    /**
     * Gets the state of a long running operation.
     *
     * @param snapshot Snapshot identifier for the long running operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CoreException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationDetails getOperationDetails(String snapshot) {
        return this.serviceClient.getOperationDetails(snapshot);
    }
}
