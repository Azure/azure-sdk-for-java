// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.utils.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * Defines values for KeyValueFields.
 */
public final class KeyValueFields implements ExpandableEnum<String> {
    private static final Map<String, KeyValueFields> VALUES = new ConcurrentHashMap<>();

    private static final Function<String, KeyValueFields> NEW_INSTANCE = KeyValueFields::new;

    /**
     * Static value key for KeyValueFields.
     */
    public static final KeyValueFields KEY = fromValue("key");

    /**
     * Static value label for KeyValueFields.
     */
    public static final KeyValueFields LABEL = fromValue("label");

    /**
     * Static value content_type for KeyValueFields.
     */
    public static final KeyValueFields CONTENT_TYPE = fromValue("content_type");

    /**
     * Static value value for KeyValueFields.
     */
    public static final KeyValueFields VALUE = fromValue("value");

    /**
     * Static value last_modified for KeyValueFields.
     */
    public static final KeyValueFields LAST_MODIFIED = fromValue("last_modified");

    /**
     * Static value tags for KeyValueFields.
     */
    public static final KeyValueFields TAGS = fromValue("tags");

    /**
     * Static value locked for KeyValueFields.
     */
    public static final KeyValueFields LOCKED = fromValue("locked");

    /**
     * Static value etag for KeyValueFields.
     */
    public static final KeyValueFields ETAG = fromValue("etag");

    private final String value;

    private KeyValueFields(String value) {
        this.value = value;
    }

    /**
     * Creates or finds a KeyValueFields.
     * 
     * @param value a value to look for.
     * @return the corresponding KeyValueFields.
     * @throws IllegalArgumentException if value is null.
     */
    public static KeyValueFields fromValue(String value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known KeyValueFields values.
     * 
     * @return Known KeyValueFields values.
     */
    public static Collection<KeyValueFields> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the KeyValueFields instance.
     * 
     * @return the value of the KeyValueFields instance.
     */
    @Override
    public String getValue() {
        return this.value;
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
