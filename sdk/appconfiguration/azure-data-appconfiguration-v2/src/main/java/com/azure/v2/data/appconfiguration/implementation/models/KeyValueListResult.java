// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.implementation.models;

import com.azure.v2.data.appconfiguration.models.KeyValue;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result of a list request.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class KeyValueListResult implements JsonSerializable<KeyValueListResult> {
    /*
     * The collection value.
     */
    @Metadata(generated = true)
    private List<KeyValue> items;

    /*
     * An identifier representing the returned state of the resource.
     */
    @Metadata(generated = true)
    private String etag;

    /*
     * The URI that can be used to request the next set of paged results.
     */
    @Metadata(generated = true)
    private String nextLink;

    /**
     * Creates an instance of KeyValueListResult class.
     */
    @Metadata(generated = true)
    private KeyValueListResult() {
    }

    /**
     * Get the items property: The collection value.
     * 
     * @return the items value.
     */
    @Metadata(generated = true)
    public List<KeyValue> getItems() {
        return this.items;
    }

    /**
     * Get the etag property: An identifier representing the returned state of the resource.
     * 
     * @return the etag value.
     */
    @Metadata(generated = true)
    public String getEtag() {
        return this.etag;
    }

    /**
     * Get the nextLink property: The URI that can be used to request the next set of paged results.
     * 
     * @return the nextLink value.
     */
    @Metadata(generated = true)
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("etag", this.etag);
        jsonWriter.writeStringField("@nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyValueListResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyValueListResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the KeyValueListResult.
     */
    @Metadata(generated = true)
    public static KeyValueListResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyValueListResult deserializedKeyValueListResult = new KeyValueListResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("items".equals(fieldName)) {
                    List<KeyValue> items = reader.readArray(reader1 -> KeyValue.fromJson(reader1));
                    deserializedKeyValueListResult.items = items;
                } else if ("etag".equals(fieldName)) {
                    deserializedKeyValueListResult.etag = reader.getString();
                } else if ("@nextLink".equals(fieldName)) {
                    deserializedKeyValueListResult.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeyValueListResult;
        });
    }
}
