// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Labels are used to group key-values.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class Label implements JsonSerializable<Label> {
    /*
     * The name of the label.
     */
    @Metadata(generated = true)
    private String name;

    /**
     * Creates an instance of Label class.
     */
    @Metadata(generated = true)
    private Label() {
    }

    /**
     * Get the name property: The name of the label.
     * 
     * @return the name value.
     */
    @Metadata(generated = true)
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Label from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Label if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Label.
     */
    @Metadata(generated = true)
    public static Label fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Label deserializedLabel = new Label();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedLabel.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabel;
        });
    }
}
