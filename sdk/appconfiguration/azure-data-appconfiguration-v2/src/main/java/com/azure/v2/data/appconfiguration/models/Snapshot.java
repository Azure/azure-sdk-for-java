// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.data.appconfiguration.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * A snapshot is a named, immutable subset of an App Configuration store's key-values.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class Snapshot implements JsonSerializable<Snapshot> {
    /*
     * The name of the snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String name;

    /*
     * The current status of the snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private SnapshotStatus status;

    /*
     * A list of filters used to filter the key-values included in the snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final List<KeyValueFilter> filters;

    /*
     * The composition type describes how the key-values within the snapshot are
     * composed. The 'key' composition type ensures there are no two key-values
     * containing the same key. The 'key_label' composition type ensures there are no
     * two key-values containing the same key and label.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private CompositionType compositionType;

    /*
     * The time that the snapshot was created.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private OffsetDateTime created;

    /*
     * The time that the snapshot will expire.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private OffsetDateTime expires;

    /*
     * The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a
     * snapshot. If not specified, the default lifetime of key-value revisions will be
     * used.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Long retentionPeriod;

    /*
     * The size in bytes of the snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Long size;

    /*
     * The amount of key-values in the snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Long itemsCount;

    /*
     * The tags of the snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Map<String, String> tags;

    /*
     * A value representing the current state of the snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String etag;

    /**
     * Creates an instance of Snapshot class.
     * 
     * @param filters the filters value to set.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Snapshot(List<KeyValueFilter> filters) {
        this.filters = filters;
    }

    /**
     * Get the name property: The name of the snapshot.
     * 
     * @return the name value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getName() {
        return this.name;
    }

    /**
     * Get the status property: The current status of the snapshot.
     * 
     * @return the status value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SnapshotStatus getStatus() {
        return this.status;
    }

    /**
     * Get the filters property: A list of filters used to filter the key-values included in the snapshot.
     * 
     * @return the filters value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public List<KeyValueFilter> getFilters() {
        return this.filters;
    }

    /**
     * Get the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'key' composition type ensures there are no two key-values
     * containing the same key. The 'key_label' composition type ensures there are no
     * two key-values containing the same key and label.
     * 
     * @return the compositionType value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public CompositionType getCompositionType() {
        return this.compositionType;
    }

    /**
     * Get the created property: The time that the snapshot was created.
     * 
     * @return the created value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Get the expires property: The time that the snapshot will expire.
     * 
     * @return the expires value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public OffsetDateTime getExpires() {
        return this.expires;
    }

    /**
     * Get the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a
     * snapshot. If not specified, the default lifetime of key-value revisions will be
     * used.
     * 
     * @return the retentionPeriod value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Long getRetentionPeriod() {
        return this.retentionPeriod;
    }

    /**
     * Get the size property: The size in bytes of the snapshot.
     * 
     * @return the size value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Long getSize() {
        return this.size;
    }

    /**
     * Get the itemsCount property: The amount of key-values in the snapshot.
     * 
     * @return the itemsCount value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Long getItemsCount() {
        return this.itemsCount;
    }

    /**
     * Get the tags property: The tags of the snapshot.
     * 
     * @return the tags value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Get the etag property: A value representing the current state of the snapshot.
     * 
     * @return the etag value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getEtag() {
        return this.etag;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("filters", this.filters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("composition_type",
            this.compositionType == null ? null : this.compositionType.getValue());
        jsonWriter.writeNumberField("retention_period", this.retentionPeriod);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Snapshot from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Snapshot if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Snapshot.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static Snapshot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            List<KeyValueFilter> filters = null;
            SnapshotStatus status = null;
            CompositionType compositionType = null;
            OffsetDateTime created = null;
            OffsetDateTime expires = null;
            Long retentionPeriod = null;
            Long size = null;
            Long itemsCount = null;
            Map<String, String> tags = null;
            String etag = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("filters".equals(fieldName)) {
                    filters = reader.readArray(reader1 -> KeyValueFilter.fromJson(reader1));
                } else if ("status".equals(fieldName)) {
                    status = SnapshotStatus.fromValue(reader.getString());
                } else if ("composition_type".equals(fieldName)) {
                    compositionType = CompositionType.fromValue(reader.getString());
                } else if ("created".equals(fieldName)) {
                    created = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("expires".equals(fieldName)) {
                    expires = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("retention_period".equals(fieldName)) {
                    retentionPeriod = reader.getNullable(JsonReader::getLong);
                } else if ("size".equals(fieldName)) {
                    size = reader.getNullable(JsonReader::getLong);
                } else if ("items_count".equals(fieldName)) {
                    itemsCount = reader.getNullable(JsonReader::getLong);
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("etag".equals(fieldName)) {
                    etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            Snapshot deserializedSnapshot = new Snapshot(filters);
            deserializedSnapshot.name = name;
            deserializedSnapshot.status = status;
            deserializedSnapshot.compositionType = compositionType;
            deserializedSnapshot.created = created;
            deserializedSnapshot.expires = expires;
            deserializedSnapshot.retentionPeriod = retentionPeriod;
            deserializedSnapshot.size = size;
            deserializedSnapshot.itemsCount = itemsCount;
            deserializedSnapshot.tags = tags;
            deserializedSnapshot.etag = etag;

            return deserializedSnapshot;
        });
    }
}
