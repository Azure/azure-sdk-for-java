// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.data.appconfiguration;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.MatchConditions;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.data.appconfiguration.implementation.AzureAppConfigurationClientImpl;
import com.azure.data.appconfiguration.models.Key;
import com.azure.data.appconfiguration.models.KeyValue;
import com.azure.data.appconfiguration.models.KeyValueFields;
import com.azure.data.appconfiguration.models.Label;
import com.azure.data.appconfiguration.models.LabelFields;
import com.azure.data.appconfiguration.models.OperationDetails;
import com.azure.data.appconfiguration.models.Snapshot;
import com.azure.data.appconfiguration.models.SnapshotFields;
import com.azure.data.appconfiguration.models.SnapshotStatus;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AzureAppConfigurationClient type.
 */
@ServiceClient(builder = AzureAppConfigurationClientBuilder.class, isAsync = true)
public final class AzureAppConfigurationAsyncClient {
    @Generated
    private final AzureAppConfigurationClientImpl serviceClient;

    /**
     * Initializes an instance of AzureAppConfigurationAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AzureAppConfigurationAsyncClient(AzureAppConfigurationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a list of keys.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned keys.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of keys as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getKeys(String accept, RequestOptions requestOptions) {
        return this.serviceClient.getKeysAsync(accept, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned keys.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkKeysWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.checkKeysWithResponseAsync(requestOptions);
    }

    /**
     * Gets a list of key-values.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>A filter used get key-values for a snapshot. The value should
     * be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of key-values as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getKeyValues(String accept, RequestOptions requestOptions) {
        return this.serviceClient.getKeyValuesAsync(accept, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>snapshot</td><td>String</td><td>No</td><td>A filter used get key-values for a snapshot. The value should
     * be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkKeyValuesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.checkKeyValuesWithResponseAsync(requestOptions);
    }

    /**
     * Gets a single key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to retrieve.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single key-value along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getKeyValueWithResponse(String key, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getKeyValueWithResponseAsync(key, accept, requestOptions);
    }

    /**
     * Creates a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to create.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to create.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a key-value pair representing application settings along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putKeyValueWithResponse(String key, String accept,
        RequestOptions requestOptions) {
        // Operation 'putKeyValue' can be invoked with multiple content-type. It is difficult to form a correct method
        // signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.putKeyValueWithResponseAsync(key, accept, requestOptions);
    }

    /**
     * Deletes a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to delete.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a key-value pair representing application settings along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteKeyValueWithResponse(String key, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteKeyValueWithResponseAsync(key, accept, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label of the key-value to retrieve.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param key The key of the key-value to retrieve.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkKeyValueWithResponse(String key, RequestOptions requestOptions) {
        return this.serviceClient.checkKeyValueWithResponseAsync(key, requestOptions);
    }

    /**
     * Gets a list of key-value snapshots.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned snapshots.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>status</td><td>List&lt;String&gt;</td><td>No</td><td>Used to filter returned snapshots by their status
     * property. In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     status: String(provisioning/ready/archived/failed) (Optional)
     *     filters (Required): [
     *          (Required){
     *             key: String (Required)
     *             label: String (Optional)
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     composition_type: String(key/key_label) (Optional)
     *     created: OffsetDateTime (Optional)
     *     expires: OffsetDateTime (Optional)
     *     retention_period: Long (Optional)
     *     size: Long (Optional)
     *     items_count: Long (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of key-value snapshots as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getSnapshots(String accept, RequestOptions requestOptions) {
        return this.serviceClient.getSnapshotsAsync(accept, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkSnapshotsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.checkSnapshotsWithResponseAsync(requestOptions);
    }

    /**
     * Gets a single key-value snapshot.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     status: String(provisioning/ready/archived/failed) (Optional)
     *     filters (Required): [
     *          (Required){
     *             key: String (Required)
     *             label: String (Optional)
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     composition_type: String(key/key_label) (Optional)
     *     created: OffsetDateTime (Optional)
     *     expires: OffsetDateTime (Optional)
     *     retention_period: Long (Optional)
     *     size: Long (Optional)
     *     items_count: Long (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a single key-value snapshot along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSnapshotWithResponse(String name, String accept,
        RequestOptions requestOptions) {
        return this.serviceClient.getSnapshotWithResponseAsync(name, accept, requestOptions);
    }

    /**
     * Gets the state of a long running operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param snapshot Snapshot identifier for the long running operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the state of a long running operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getOperationDetailsWithResponse(String snapshot, RequestOptions requestOptions) {
        return this.serviceClient.getOperationDetailsWithResponseAsync(snapshot, requestOptions);
    }

    /**
     * Creates a key-value snapshot.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     status: String(provisioning/ready/archived/failed) (Optional)
     *     filters (Required): [
     *          (Required){
     *             key: String (Required)
     *             label: String (Optional)
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     composition_type: String(key/key_label) (Optional)
     *     created: OffsetDateTime (Optional)
     *     expires: OffsetDateTime (Optional)
     *     retention_period: Long (Optional)
     *     size: Long (Optional)
     *     items_count: Long (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     status: String(provisioning/ready/archived/failed) (Optional)
     *     filters (Required): [
     *          (Required){
     *             key: String (Required)
     *             label: String (Optional)
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     composition_type: String(key/key_label) (Optional)
     *     created: OffsetDateTime (Optional)
     *     expires: OffsetDateTime (Optional)
     *     retention_period: Long (Optional)
     *     size: Long (Optional)
     *     items_count: Long (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param contentType Content-Type header. Allowed values: "application/vnd.microsoft.appconfig.snapshot+json",
     * "application/json".
     * @param name The name of the key-value snapshot to create.
     * @param accept The accept parameter.
     * @param entity The key-value snapshot to create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a snapshot is a named, immutable subset of an App Configuration
     * store's key-values.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateSnapshot(String contentType, String name, String accept,
        BinaryData entity, RequestOptions requestOptions) {
        // Operation 'createSnapshot' can be invoked with multiple content-type. It is difficult to form a correct
        // method signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.beginCreateSnapshotAsync(contentType, name, accept, entity, requestOptions);
    }

    /**
     * Updates the state of a key-value snapshot.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(provisioning/ready/archived/failed) (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     status: String(provisioning/ready/archived/failed) (Optional)
     *     filters (Required): [
     *          (Required){
     *             key: String (Required)
     *             label: String (Optional)
     *             tags (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *     ]
     *     composition_type: String(key/key_label) (Optional)
     *     created: OffsetDateTime (Optional)
     *     expires: OffsetDateTime (Optional)
     *     retention_period: Long (Optional)
     *     size: Long (Optional)
     *     items_count: Long (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param contentType Content-Type header. Allowed values: "application/merge-patch+json", "application/json".
     * @param name The name of the key-value snapshot to update.
     * @param accept The accept parameter.
     * @param entity The parameters used to update the snapshot.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a snapshot is a named, immutable subset of an App Configuration store's key-values along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateSnapshotWithResponse(String contentType, String name, String accept,
        BinaryData entity, RequestOptions requestOptions) {
        // Operation 'updateSnapshot' can be invoked with multiple content-type. It is difficult to form a correct
        // method signature for convenience API, and hence the convenience API is not generated.
        return this.serviceClient.updateSnapshotWithResponseAsync(contentType, name, accept, entity, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param name The name of the key-value snapshot to check.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkSnapshotWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.checkSnapshotWithResponseAsync(name, requestOptions);
    }

    /**
     * Gets a list of labels.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned labels.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of labels as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getLabels(String accept, RequestOptions requestOptions) {
        return this.serviceClient.getLabelsAsync(accept, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>name</td><td>String</td><td>No</td><td>A filter for the name of the returned labels.</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkLabelsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.checkLabelsWithResponseAsync(requestOptions);
    }

    /**
     * Locks a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label, if any, of the key-value to lock.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a key-value pair representing application settings along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putLockWithResponse(String key, String accept, RequestOptions requestOptions) {
        return this.serviceClient.putLockWithResponseAsync(key, accept, requestOptions);
    }

    /**
     * Unlocks a key-value.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>The label, if any, of the key-value to unlock.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted resource's
     * etag matches the
     * value provided.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Used to perform an operation only if the targeted
     * resource's etag does not
     * match the value provided.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a key-value pair representing application settings along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> deleteLockWithResponse(String key, String accept, RequestOptions requestOptions) {
        return this.serviceClient.deleteLockWithResponseAsync(key, accept, requestOptions);
    }

    /**
     * Gets a list of key-value revisions.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     key: String (Required)
     *     label: String (Optional)
     *     content_type: String (Optional)
     *     value: String (Optional)
     *     last_modified: OffsetDateTime (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     locked: Boolean (Optional)
     *     etag: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param accept The accept parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of key-value revisions as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getRevisions(String accept, RequestOptions requestOptions) {
        return this.serviceClient.getRevisionsAsync(accept, requestOptions);
    }

    /**
     * Requests the headers and status of the given resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>key</td><td>String</td><td>No</td><td>A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>label</td><td>String</td><td>No</td><td>A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions</td></tr>
     * <tr><td>After</td><td>String</td><td>No</td><td>Instructs the server to return elements that appear after the
     * element referred
     * to by the specified token.</td></tr>
     * <tr><td>$Select</td><td>List&lt;String&gt;</td><td>No</td><td>Used to select what fields are present in the
     * returned resource(s). In the form of "," separated string.</td></tr>
     * <tr><td>tags</td><td>List&lt;String&gt;</td><td>No</td><td>A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions. Call {@link RequestOptions#addQueryParam} to add string to
     * array.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Sync-Token</td><td>String</td><td>No</td><td>Used to guarantee real-time consistency between
     * requests.</td></tr>
     * <tr><td>Accept-Datetime</td><td>String</td><td>No</td><td>Requests the server to respond with the state of the
     * resource at the specified
     * time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> checkRevisionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.checkRevisionsWithResponseAsync(requestOptions);
    }

    /**
     * Gets a list of keys.
     * 
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Key> getKeys(String accept, String name, String after, String syncToken, String acceptDatetime) {
        // Generated convenience method for getKeys
        RequestOptions requestOptions = new RequestOptions();
        if (name != null) {
            requestOptions.addQueryParam("name", name, false);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getKeys(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Key>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Key.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of keys.
     * 
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of keys as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Key> getKeys(String accept) {
        // Generated convenience method for getKeys
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getKeys(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Key>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Key.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned keys.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkKeys(String name, String after, String syncToken, String acceptDatetime) {
        // Generated convenience method for checkKeysWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (name != null) {
            requestOptions.addQueryParam("name", name, false);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        return checkKeysWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkKeys() {
        // Generated convenience method for checkKeysWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return checkKeysWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets a list of key-values.
     * 
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<KeyValue> getKeyValues(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<KeyValueFields> select, String snapshot, List<String> tags,
        MatchConditions matchConditions) {
        // Generated convenience method for getKeyValues
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (key != null) {
            requestOptions.addQueryParam("key", key, false);
        }
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (tags != null) {
            for (String paramItemValue : tags) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("tags", paramItemValue, false);
                }
            }
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getKeyValues(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, KeyValue>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of key-values.
     * 
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-values as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<KeyValue> getKeyValues(String accept) {
        // Generated convenience method for getKeyValues
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getKeyValues(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, KeyValue>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param snapshot A filter used get key-values for a snapshot. The value should be the name of
     * the snapshot. Not valid when used with 'key' and 'label' filters.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkKeyValues(String key, String label, String syncToken, String after, String acceptDatetime,
        List<KeyValueFields> select, String snapshot, List<String> tags, MatchConditions matchConditions) {
        // Generated convenience method for checkKeyValuesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (key != null) {
            requestOptions.addQueryParam("key", key, false);
        }
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (snapshot != null) {
            requestOptions.addQueryParam("snapshot", snapshot, false);
        }
        if (tags != null) {
            for (String paramItemValue : tags) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("tags", paramItemValue, false);
                }
            }
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return checkKeyValuesWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkKeyValues() {
        // Generated convenience method for checkKeyValuesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return checkKeyValuesWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @param label The label of the key-value to retrieve.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> getKeyValue(String key, String accept, String label, List<KeyValueFields> select,
        String syncToken, String acceptDatetime, List<String> tags, MatchConditions matchConditions) {
        // Generated convenience method for getKeyValueWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (tags != null) {
            for (String paramItemValue : tags) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("tags", paramItemValue, false);
                }
            }
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return getKeyValueWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> getKeyValue(String key, String accept) {
        // Generated convenience method for getKeyValueWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getKeyValueWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @param label The label of the key-value to delete.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param ifMatch Used to perform an operation only if the targeted resource's etag matches the
     * value provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> deleteKeyValue(String key, String accept, String label, String syncToken, String ifMatch) {
        // Generated convenience method for deleteKeyValueWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        return deleteKeyValueWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> deleteKeyValue(String key, String accept) {
        // Generated convenience method for deleteKeyValueWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteKeyValueWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve.
     * @param label The label of the key-value to retrieve.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/keyvaluefiltering.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkKeyValue(String key, String label, String syncToken, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags, MatchConditions matchConditions) {
        // Generated convenience method for checkKeyValueWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (tags != null) {
            for (String paramItemValue : tags) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("tags", paramItemValue, false);
                }
            }
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return checkKeyValueWithResponse(key, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkKeyValue(String key) {
        // Generated convenience method for checkKeyValueWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return checkKeyValueWithResponse(key, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned snapshots.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param status Used to filter returned snapshots by their status property.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Snapshot> getSnapshots(String accept, String name, String after, List<SnapshotFields> select,
        List<SnapshotStatus> status, String syncToken) {
        // Generated convenience method for getSnapshots
        RequestOptions requestOptions = new RequestOptions();
        if (name != null) {
            requestOptions.addQueryParam("name", name, false);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (status != null) {
            requestOptions.addQueryParam("status",
                status.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getSnapshots(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Snapshot>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Snapshot.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of key-value snapshots.
     * 
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value snapshots as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Snapshot> getSnapshots(String accept) {
        // Generated convenience method for getSnapshots
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getSnapshots(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Snapshot>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Snapshot.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkSnapshots(String syncToken, String after) {
        // Generated convenience method for checkSnapshotsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        return checkSnapshotsWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkSnapshots() {
        // Generated convenience method for checkSnapshotsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return checkSnapshotsWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets a single key-value snapshot.
     * 
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> getSnapshot(String name, String accept, List<SnapshotFields> select, String syncToken,
        MatchConditions matchConditions) {
        // Generated convenience method for getSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return getSnapshotWithResponse(name, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Snapshot.class));
    }

    /**
     * Gets a single key-value snapshot.
     * 
     * @param name The name of the snapshot.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a single key-value snapshot on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Snapshot> getSnapshot(String name, String accept) {
        // Generated convenience method for getSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSnapshotWithResponse(name, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Snapshot.class));
    }

    /**
     * Gets the state of a long running operation.
     * 
     * @param snapshot Snapshot identifier for the long running operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the state of a long running operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OperationDetails> getOperationDetails(String snapshot) {
        // Generated convenience method for getOperationDetailsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getOperationDetailsWithResponse(snapshot, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(OperationDetails.class));
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name The name of the key-value snapshot to check.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkSnapshot(String name, String syncToken, MatchConditions matchConditions) {
        // Generated convenience method for checkSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return checkSnapshotWithResponse(name, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name The name of the key-value snapshot to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkSnapshot(String name) {
        // Generated convenience method for checkSnapshotWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return checkSnapshotWithResponse(name, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Gets a list of labels.
     * 
     * @param accept The accept parameter.
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Label> getLabels(String accept, String name, String syncToken, String after, String acceptDatetime,
        List<LabelFields> select) {
        // Generated convenience method for getLabels
        RequestOptions requestOptions = new RequestOptions();
        if (name != null) {
            requestOptions.addQueryParam("name", name, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getLabels(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Label>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Label.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of labels.
     * 
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of labels as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Label> getLabels(String accept) {
        // Generated convenience method for getLabels
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getLabels(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Label>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Label.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param name A filter for the name of the returned labels.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkLabels(String name, String syncToken, String after, String acceptDatetime,
        List<LabelFields> select) {
        // Generated convenience method for checkLabelsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (name != null) {
            requestOptions.addQueryParam("name", name, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return checkLabelsWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkLabels() {
        // Generated convenience method for checkLabelsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return checkLabelsWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to lock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> putLock(String key, String accept, String label, String syncToken,
        MatchConditions matchConditions) {
        // Generated convenience method for putLockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return putLockWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> putLock(String key, String accept) {
        // Generated convenience method for putLockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return putLockWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @param label The label, if any, of the key-value to unlock.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param matchConditions Specifies HTTP options for conditional requests.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> deleteLock(String key, String accept, String label, String syncToken,
        MatchConditions matchConditions) {
        // Generated convenience method for deleteLockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = matchConditions == null ? null : matchConditions.getIfMatch();
        String ifNoneMatch = matchConditions == null ? null : matchConditions.getIfNoneMatch();
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return deleteLockWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock.
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a key-value pair representing application settings on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyValue> deleteLock(String key, String accept) {
        // Generated convenience method for deleteLockWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteLockWithResponse(key, accept, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class));
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param accept The accept parameter.
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<KeyValue> getRevisions(String accept, String key, String label, String syncToken, String after,
        String acceptDatetime, List<KeyValueFields> select, List<String> tags) {
        // Generated convenience method for getRevisions
        RequestOptions requestOptions = new RequestOptions();
        if (key != null) {
            requestOptions.addQueryParam("key", key, false);
        }
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (tags != null) {
            for (String paramItemValue : tags) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("tags", paramItemValue, false);
                }
            }
        }
        PagedFlux<BinaryData> pagedFluxResponse = getRevisions(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, KeyValue>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a list of key-value revisions.
     * 
     * @param accept The accept parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of key-value revisions as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<KeyValue> getRevisions(String accept) {
        // Generated convenience method for getRevisions
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getRevisions(accept, requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, KeyValue>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(KeyValue.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key A filter used to match keys. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param label A filter used to match labels. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @param syncToken Used to guarantee real-time consistency between requests.
     * @param after Instructs the server to return elements that appear after the element referred
     * to by the specified token.
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified
     * time.
     * @param select Used to select what fields are present in the returned resource(s).
     * @param tags A filter used to query by tags. Syntax reference:
     * https://aka.ms/azconfig/docs/restapirevisions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkRevisions(String key, String label, String syncToken, String after, String acceptDatetime,
        List<KeyValueFields> select, List<String> tags) {
        // Generated convenience method for checkRevisionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (key != null) {
            requestOptions.addQueryParam("key", key, false);
        }
        if (label != null) {
            requestOptions.addQueryParam("label", label, false);
        }
        if (syncToken != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("Sync-Token"), syncToken);
        }
        if (after != null) {
            requestOptions.addQueryParam("After", after, false);
        }
        if (acceptDatetime != null) {
            requestOptions.setHeader(HttpHeaderName.ACCEPT_DATETIME, acceptDatetime);
        }
        if (select != null) {
            requestOptions.addQueryParam("$Select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (tags != null) {
            for (String paramItemValue : tags) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("tags", paramItemValue, false);
                }
            }
        }
        return checkRevisionsWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> checkRevisions() {
        // Generated convenience method for checkRevisionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return checkRevisionsWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }
}
