// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.data.appconfiguration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** The Snapshot model. */
@Fluent
public final class Snapshot implements JsonSerializable<Snapshot> {
    /*
     * The name of the snapshot.
     */
    private String name;

    /*
     * The current status of the snapshot.
     */
    private SnapshotStatus status;

    /*
     * A list of filters used to filter the key-values included in the snapshot.
     */
    private List<KeyValueFilter> filters;

    /*
     * The composition type describes how the key-values within the snapshot are composed. The 'all' composition type
     * includes all key-values. The 'group_by_key' composition type ensures there are no two key-values containing the
     * same key.
     */
    private CompositionType compositionType;

    /*
     * The time that the snapshot was created.
     */
    private OffsetDateTime created;

    /*
     * The time that the snapshot will expire.
     */
    private OffsetDateTime expires;

    /*
     * The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property
     * is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value
     * revisions will be used.
     */
    private Long retentionPeriod;

    /*
     * The size in bytes of the snapshot.
     */
    private Long size;

    /*
     * The amount of key-values in the snapshot.
     */
    private Long itemsCount;

    /*
     * The tags of the snapshot.
     */
    private Map<String, String> tags;

    /*
     * A value representing the current state of the snapshot.
     */
    private String etag;

    /** Creates an instance of Snapshot class. */
    public Snapshot() {}

    /**
     * Get the name property: The name of the snapshot.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the status property: The current status of the snapshot.
     *
     * @return the status value.
     */
    public SnapshotStatus getStatus() {
        return this.status;
    }

    /**
     * Get the filters property: A list of filters used to filter the key-values included in the snapshot.
     *
     * @return the filters value.
     */
    public List<KeyValueFilter> getFilters() {
        return this.filters;
    }

    /**
     * Set the filters property: A list of filters used to filter the key-values included in the snapshot.
     *
     * @param filters the filters value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setFilters(List<KeyValueFilter> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Get the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'all' composition type includes all key-values. The 'group_by_key' composition type ensures there
     * are no two key-values containing the same key.
     *
     * @return the compositionType value.
     */
    public CompositionType getCompositionType() {
        return this.compositionType;
    }

    /**
     * Set the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'all' composition type includes all key-values. The 'group_by_key' composition type ensures there
     * are no two key-values containing the same key.
     *
     * @param compositionType the compositionType value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setCompositionType(CompositionType compositionType) {
        this.compositionType = compositionType;
        return this;
    }

    /**
     * Get the created property: The time that the snapshot was created.
     *
     * @return the created value.
     */
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Get the expires property: The time that the snapshot will expire.
     *
     * @return the expires value.
     */
    public OffsetDateTime getExpires() {
        return this.expires;
    }

    /**
     * Get the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a snapshot. If not specified, the
     * default lifetime of key-value revisions will be used.
     *
     * @return the retentionPeriod value.
     */
    public Long getRetentionPeriod() {
        return this.retentionPeriod;
    }

    /**
     * Set the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a snapshot. If not specified, the
     * default lifetime of key-value revisions will be used.
     *
     * @param retentionPeriod the retentionPeriod value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setRetentionPeriod(Long retentionPeriod) {
        this.retentionPeriod = retentionPeriod;
        return this;
    }

    /**
     * Get the size property: The size in bytes of the snapshot.
     *
     * @return the size value.
     */
    public Long getSize() {
        return this.size;
    }

    /**
     * Get the itemsCount property: The amount of key-values in the snapshot.
     *
     * @return the itemsCount value.
     */
    public Long getItemsCount() {
        return this.itemsCount;
    }

    /**
     * Get the tags property: The tags of the snapshot.
     *
     * @return the tags value.
     */
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags of the snapshot.
     *
     * @param tags the tags value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the etag property: A value representing the current state of the snapshot.
     *
     * @return the etag value.
     */
    public String getEtag() {
        return this.etag;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("filters", this.filters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("status", Objects.toString(this.status, null));
        jsonWriter.writeStringField("composition_type", Objects.toString(this.compositionType, null));
        jsonWriter.writeStringField("created", Objects.toString(this.created, null));
        jsonWriter.writeStringField("expires", Objects.toString(this.expires, null));
        jsonWriter.writeNumberField("retention_period", this.retentionPeriod);
        jsonWriter.writeNumberField("size", this.size);
        jsonWriter.writeNumberField("items_count", this.itemsCount);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("etag", this.etag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Snapshot from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Snapshot if the JsonReader was pointing to an instance of it, or null if it was pointing
     *     to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Snapshot.
     */
    public static Snapshot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    List<KeyValueFilter> filters = null;
                    String name = null;
                    SnapshotStatus status = null;
                    CompositionType compositionType = null;
                    OffsetDateTime created = null;
                    OffsetDateTime expires = null;
                    Long retentionPeriod = null;
                    Long size = null;
                    Long itemsCount = null;
                    Map<String, String> tags = null;
                    String etag = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("filters".equals(fieldName)) {
                            filters = reader.readArray(reader1 -> KeyValueFilter.fromJson(reader1));
                        } else if ("name".equals(fieldName)) {
                            name = reader.getString();
                        } else if ("status".equals(fieldName)) {
                            status = SnapshotStatus.fromString(reader.getString());
                        } else if ("composition_type".equals(fieldName)) {
                            compositionType = CompositionType.fromString(reader.getString());
                        } else if ("created".equals(fieldName)) {
                            created =
                                    reader.getNullable(
                                            nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                        } else if ("expires".equals(fieldName)) {
                            expires =
                                    reader.getNullable(
                                            nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                        } else if ("retention_period".equals(fieldName)) {
                            retentionPeriod = reader.getNullable(JsonReader::getLong);
                        } else if ("size".equals(fieldName)) {
                            size = reader.getNullable(JsonReader::getLong);
                        } else if ("items_count".equals(fieldName)) {
                            itemsCount = reader.getNullable(JsonReader::getLong);
                        } else if ("tags".equals(fieldName)) {
                            tags = reader.readMap(reader1 -> reader1.getString());
                        } else if ("etag".equals(fieldName)) {
                            etag = reader.getString();
                        } else {
                            reader.skipChildren();
                        }
                    }
                    Snapshot deserializedValue = new Snapshot();
                    deserializedValue.filters = filters;
                    deserializedValue.name = name;
                    deserializedValue.status = status;
                    deserializedValue.compositionType = compositionType;
                    deserializedValue.created = created;
                    deserializedValue.expires = expires;
                    deserializedValue.retentionPeriod = retentionPeriod;
                    deserializedValue.size = size;
                    deserializedValue.itemsCount = itemsCount;
                    deserializedValue.tags = tags;
                    deserializedValue.etag = etag;

                    return deserializedValue;
                });
    }
}
