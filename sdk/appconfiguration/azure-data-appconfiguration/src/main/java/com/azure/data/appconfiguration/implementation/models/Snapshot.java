// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.data.appconfiguration.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** The Snapshot model. */
@Fluent
public final class Snapshot {
    /*
     * The name of the snapshot.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * The current status of the snapshot.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private SnapshotStatus status;

    /*
     * A list of filters used to filter the key-values included in the snapshot.
     */
    @JsonProperty(value = "filters", required = true)
    private List<KeyValueFilter> filters;

    /*
     * The composition type describes how the key-values within the snapshot are composed. The 'all' composition type
     * includes all key-values. The 'group_by_key' composition type ensures there are no two key-values containing the
     * same key.
     */
    @JsonProperty(value = "composition_type")
    private CompositionType compositionType;

    /*
     * The time that the snapshot was created.
     */
    @JsonProperty(value = "created", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime created;

    /*
     * The time that the snapshot will expire.
     */
    @JsonProperty(value = "expires", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime expires;

    /*
     * The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This property
     * is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value
     * revisions will be used.
     */
    @JsonProperty(value = "retention_period")
    private Long retentionPeriod;

    /*
     * The size in bytes of the snapshot.
     */
    @JsonProperty(value = "size", access = JsonProperty.Access.WRITE_ONLY)
    private Long size;

    /*
     * The amount of key-values in the snapshot.
     */
    @JsonProperty(value = "items_count", access = JsonProperty.Access.WRITE_ONLY)
    private Long itemsCount;

    /*
     * The tags of the snapshot.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * A value representing the current state of the snapshot.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /** Creates an instance of Snapshot class. */
    public Snapshot() {}

    /**
     * Get the name property: The name of the snapshot.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the status property: The current status of the snapshot.
     *
     * @return the status value.
     */
    public SnapshotStatus getStatus() {
        return this.status;
    }

    /**
     * Get the filters property: A list of filters used to filter the key-values included in the snapshot.
     *
     * @return the filters value.
     */
    public List<KeyValueFilter> getFilters() {
        return this.filters;
    }

    /**
     * Set the filters property: A list of filters used to filter the key-values included in the snapshot.
     *
     * @param filters the filters value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setFilters(List<KeyValueFilter> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Get the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'all' composition type includes all key-values. The 'group_by_key' composition type ensures there
     * are no two key-values containing the same key.
     *
     * @return the compositionType value.
     */
    public CompositionType getCompositionType() {
        return this.compositionType;
    }

    /**
     * Set the compositionType property: The composition type describes how the key-values within the snapshot are
     * composed. The 'all' composition type includes all key-values. The 'group_by_key' composition type ensures there
     * are no two key-values containing the same key.
     *
     * @param compositionType the compositionType value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setCompositionType(CompositionType compositionType) {
        this.compositionType = compositionType;
        return this;
    }

    /**
     * Get the created property: The time that the snapshot was created.
     *
     * @return the created value.
     */
    public OffsetDateTime getCreated() {
        return this.created;
    }

    /**
     * Get the expires property: The time that the snapshot will expire.
     *
     * @return the expires value.
     */
    public OffsetDateTime getExpires() {
        return this.expires;
    }

    /**
     * Get the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a snapshot. If not specified, the
     * default lifetime of key-value revisions will be used.
     *
     * @return the retentionPeriod value.
     */
    public Long getRetentionPeriod() {
        return this.retentionPeriod;
    }

    /**
     * Set the retentionPeriod property: The amount of time, in seconds, that a snapshot will remain in the archived
     * state before expiring. This property is only writable during the creation of a snapshot. If not specified, the
     * default lifetime of key-value revisions will be used.
     *
     * @param retentionPeriod the retentionPeriod value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setRetentionPeriod(Long retentionPeriod) {
        this.retentionPeriod = retentionPeriod;
        return this;
    }

    /**
     * Get the size property: The size in bytes of the snapshot.
     *
     * @return the size value.
     */
    public Long getSize() {
        return this.size;
    }

    /**
     * Get the itemsCount property: The amount of key-values in the snapshot.
     *
     * @return the itemsCount value.
     */
    public Long getItemsCount() {
        return this.itemsCount;
    }

    /**
     * Get the tags property: The tags of the snapshot.
     *
     * @return the tags value.
     */
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags of the snapshot.
     *
     * @param tags the tags value to set.
     * @return the Snapshot object itself.
     */
    public Snapshot setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the etag property: A value representing the current state of the snapshot.
     *
     * @return the etag value.
     */
    public String getEtag() {
        return this.etag;
    }
}
