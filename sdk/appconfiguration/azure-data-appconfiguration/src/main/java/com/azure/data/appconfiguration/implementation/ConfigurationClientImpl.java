// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.data.appconfiguration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ReturnValueWireType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.ContentType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.data.appconfiguration.ConfigurationAsyncClient;
import com.azure.data.appconfiguration.models.ConfigurationSetting;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the ConfigurationClient type.
 */
public final class ConfigurationClientImpl {

    /**
     * The proxy service used to perform REST calls.
     */
    private final ConfigurationService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of Configuration client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Configuration Service endpoint.
     * @param apiVersion Api Version.
     */
    public ConfigurationClientImpl(
        HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.service =
            RestProxy.create(ConfigurationService.class, this.getHttpPipeline(), this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for {@link ConfigurationAsyncClient} to be used
     * by the proxy service to perform REST calls.
     * <p>
     * This is package-private so that these REST calls are transparent to the user.
     */
    @Host("{url}")
    @ServiceInterface(name = "AppConfig")
    public interface ConfigurationService {
        @Get("kv/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ConfigurationSetting>> getKeyValue(
            @HostParam("url") String url,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$select") String fields,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);

        @Put("kv/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ConfigurationSetting>> setKey(
            @HostParam("url") String url,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @QueryParam("api-version") String apiVersion,
            @BodyParam(ContentType.APPLICATION_JSON) ConfigurationSetting keyValueParameters,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);

        @Delete("kv/{key}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ConfigurationSetting>> delete(
            @HostParam("url") String url,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);

        @Put("locks/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ConfigurationSetting>> lockKeyValue(
            @HostParam("url") String url,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);

        @Delete("locks/{key}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ConfigurationSetting>> unlockKeyValue(
            @HostParam("url") String url,
            @PathParam("key") String key,
            @QueryParam("label") String label,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("If-Match") String ifMatch,
            @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);

        @Get("kv")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        @ReturnValueWireType(ConfigurationSettingPage.class)
        Mono<PagedResponse<ConfigurationSetting>> listKeyValues(
            @HostParam("url") String url,
            @QueryParam("key") String key,
            @QueryParam("label") String label,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$select") String fields,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            Context context);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        @ReturnValueWireType(ConfigurationSettingPage.class)
        Mono<PagedResponse<ConfigurationSetting>> listKeyValues(
            @HostParam("url") String url,
            @PathParam(value = "nextUrl", encoded = true) String nextUrl,
            Context context);

        @Get("revisions")
        @ExpectedResponses({200, 206})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        @ReturnValueWireType(ConfigurationSettingPage.class)
        Mono<PagedResponse<ConfigurationSetting>> listKeyValueRevisions(
            @HostParam("url") String url,
            @QueryParam("key") String key,
            @QueryParam("label") String label,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$select") String fields,
            @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("Range") String range,
            Context context);
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> setKeyWithResponseAsync(String key,
                                                                        String label,
                                                                        ConfigurationSetting configurationSetting,
                                                                        String ifMatch,
                                                                        String ifNoneMatch) {
        return FluxUtil.withContext(
            context ->
                service.setKey(
                    this.getEndpoint(),
                    key,
                    label,
                    this.getApiVersion(),
                    configurationSetting,
                    ifMatch,
                    ifNoneMatch,
                    context));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> setKeyWithResponseAsync(String key,
                                                                        String label,
                                                                        ConfigurationSetting configurationSetting,
                                                                        String ifMatch, String ifNoneMatch,
                                                                        Context context) {
        return service.setKey(
            this.getEndpoint(),
            key,
            label,
            this.getApiVersion(),
            configurationSetting,
            ifMatch,
            ifNoneMatch,
            context);
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ConfigurationSetting> setKeyAsync(String key,
                                           String label, ConfigurationSetting configurationSetting,
                                           String ifMatch, String ifNoneMatch) {
        return setKeyWithResponseAsync(key, label, configurationSetting, ifMatch, ifNoneMatch)
            .flatMap(
                (Response<ConfigurationSetting> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSetting setKey(String key,
                                       String label,
                                       ConfigurationSetting configurationSetting,
                                       String ifMatch,
                                       String ifNoneMatch) {
        return setKeyAsync(key, label, configurationSetting, ifMatch, ifNoneMatch).block();
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSetting> setKeyWithResponse(String key,
                                                             String label,
                                                             ConfigurationSetting configurationSetting,
                                                             String ifMatch, String ifNoneMatch,
                                                             Context context) {
        return setKeyWithResponseAsync(key, label, configurationSetting, ifMatch, ifNoneMatch, context).block();

    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> getKeyValueWithResponseAsync(String key,
                                                                             String label, String fields,
                                                                             String acceptDatetime, String ifMatch,
                                                                             String ifNoneMatch) {
        return FluxUtil.withContext(
            context ->
                service.getKeyValue(
                    this.getEndpoint(),
                    key,
                    label,
                    this.getApiVersion(),
                    fields,
                    acceptDatetime,
                    ifMatch,
                    ifNoneMatch,
                    context));
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> getKeyValueWithResponseAsync(String key,
                                                                             String label, String fields,
                                                                             String acceptDatetime, String ifMatch,
                                                                             String ifNoneMatch, Context context) {
        return service.getKeyValue(
            this.getEndpoint(),
            key,
            label,
            this.getApiVersion(),
            fields,
            acceptDatetime,
            ifMatch,
            ifNoneMatch,
            context);
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ConfigurationSetting> getKeyValueAsync(String key,
                                                String label, String fields, String acceptDatetime,
                                                String ifMatch, String ifNoneMatch) {
        return this.getKeyValueWithResponseAsync(key, label, fields, acceptDatetime, ifMatch, ifNoneMatch)
            .flatMap(
                (Response<ConfigurationSetting> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSetting getKeyValue(String key,
                                            String label,
                                            String fields, String acceptDatetime,
                                            String ifMatch,
                                            String ifNoneMatch) {
        return getKeyValueAsync(key, label, fields, acceptDatetime, ifMatch, ifNoneMatch).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSetting> getKeyValueWithResponse(String key,
                                                                  String label, String fields, String acceptDatetime,
                                                                  String ifMatch, String ifNoneMatch,
                                                                  Context context) {
        return getKeyValueWithResponseAsync(key, label, fields, acceptDatetime, ifMatch, ifNoneMatch, context).block();

    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> deleteWithResponseAsync(String key,
                                                                        String label, String ifMatch,
                                                                        String ifNoneMatch) {
        return FluxUtil.withContext(
            context ->
                service.delete(
                    this.getEndpoint(),
                    key,
                    label,
                    this.getApiVersion(),
                    ifMatch,
                    ifNoneMatch,
                    context));
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> deleteWithResponseAsync(String key,
                                                                        String label, String ifMatch,
                                                                        String ifNoneMatch, Context context) {
        return service.delete(
            this.getEndpoint(),
            key,
            label,
            this.getApiVersion(),
            ifMatch,
            ifNoneMatch,
            context);
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ConfigurationSetting> deleteAsync(String key,
                                           String label,
                                           String ifMatch, String ifNoneMatch) {
        return deleteWithResponseAsync(key, label, ifMatch, ifNoneMatch)
            .flatMap(
                (Response<ConfigurationSetting> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSetting delete(String key,
                                       String label,
                                       String ifMatch,
                                       String ifNoneMatch) {
        return deleteAsync(key, label, ifMatch, ifNoneMatch).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSetting> deleteWithResponse(String key,
                                                             String label,
                                                             String ifMatch, String ifNoneMatch,
                                                             Context context) {
        return deleteWithResponseAsync(key, label, ifMatch, ifNoneMatch, context).block();

    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> lockKeyValueWithResponseAsync(String key,
                                                                              String label, String ifMatch,
                                                                              String ifNoneMatch) {
        return FluxUtil.withContext(
            context ->
                service.lockKeyValue(
                    this.getEndpoint(),
                    key,
                    label,
                    this.getApiVersion(),
                    ifMatch,
                    ifNoneMatch,
                    context));
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> lockKeyValueWithResponseAsync(String key,
                                                                              String label, String ifMatch,
                                                                              String ifNoneMatch, Context context) {
        return service.lockKeyValue(
            this.getEndpoint(),
            key,
            label,
            this.getApiVersion(),
            ifMatch,
            ifNoneMatch,
            context);
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ConfigurationSetting> lockKeyValueAsync(String key,
                                                 String label,
                                                 String ifMatch, String ifNoneMatch) {
        return lockKeyValueWithResponseAsync(key, label, ifMatch, ifNoneMatch)
            .flatMap(
                (Response<ConfigurationSetting> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSetting lockKeyValue(String key,
                                             String label,
                                             String ifMatch,
                                             String ifNoneMatch) {
        return lockKeyValueAsync(key, label, ifMatch, ifNoneMatch).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSetting> lockKeyValueWithResponse(String key,
                                                                   String label,
                                                                   String ifMatch, String ifNoneMatch,
                                                                   Context context) {
        return lockKeyValueWithResponseAsync(key, label, ifMatch, ifNoneMatch, context).block();

    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> unlockKeyValueWithResponseAsync(String key,
                                                                              String label, String ifMatch,
                                                                              String ifNoneMatch) {
        return FluxUtil.withContext(
            context ->
                service.unlockKeyValue(
                    this.getEndpoint(),
                    key,
                    label,
                    this.getApiVersion(),
                    ifMatch,
                    ifNoneMatch,
                    context));
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ConfigurationSetting>> unlockKeyValueWithResponseAsync(String key,
                                                                              String label, String ifMatch,
                                                                              String ifNoneMatch, Context context) {
        return service.unlockKeyValue(
            this.getEndpoint(),
            key,
            label,
            this.getApiVersion(),
            ifMatch,
            ifNoneMatch,
            context);
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ConfigurationSetting> unlockKeyValueAsync(String key,
                                                 String label,
                                                 String ifMatch, String ifNoneMatch) {
        return unlockKeyValueWithResponseAsync(key, label, ifMatch, ifNoneMatch)
            .flatMap(
                (Response<ConfigurationSetting> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConfigurationSetting unlockKeyValue(String key,
                                             String label,
                                             String ifMatch,
                                             String ifNoneMatch) {
        return unlockKeyValueAsync(key, label, ifMatch, ifNoneMatch).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConfigurationSetting> unlockKeyValueWithResponse(String key,
                                                                   String label,
                                                                   String ifMatch, String ifNoneMatch,
                                                                   Context context) {
        return unlockKeyValueWithResponseAsync(key, label, ifMatch, ifNoneMatch, context).block();

    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> listKeyValuesSinglePageAsync(String key,
                                                                                  String label, String fields,
                                                                                  String acceptDatetime) {
        return FluxUtil.withContext(
                context ->
                    service.listKeyValues(
                        this.getEndpoint(), this.getApiVersion(), key, label, fields, acceptDatetime, context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue(),
                        res.getContinuationToken(),
                        null));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> listKeyValuesSinglePageAsync(String key,
                                                                                  String label, String fields,
                                                                                  String acceptDatetime,
                                                                                  Context context) {
        return service.listKeyValues(this.getEndpoint(), this.getApiVersion(), key, label, fields, acceptDatetime,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue(),
                        res.getContinuationToken(),
                        null));
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> listConfigurationSettingsNextPageAsync(String continuationToken) {
        return FluxUtil.withContext(
                context ->
                    service.listKeyValues(
                        this.getEndpoint(), continuationToken, context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue(),
                        res.getContinuationToken(),
                        null));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> listConfigurationSettingsNextPageAsync(String continuationToken,
                                                                                  Context context) {
        return service.listKeyValues(this.getEndpoint(), continuationToken, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue(),
                        res.getContinuationToken(),
                        null));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> listKeyValueRevisionsSinglePageAsync(String key,
                                                                                          String label, String fields,
                                                                                          String acceptDatetime,
                                                                                          String range,
                                                                                          Context context) {
        return service.listKeyValueRevisions(this.getEndpoint(), this.getApiVersion(), key, label, fields,
                acceptDatetime, range,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue(),
                        res.getContinuationToken(),
                        null));
    }
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> listKeyValueRevisionsNextPageAsync(String continuationToken) {
        return FluxUtil.withContext(
                context ->
                    service.listKeyValues(
                        this.getEndpoint(), continuationToken, context))
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue(),
                        res.getContinuationToken(),
                        null));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ConfigurationSetting>> listKeyValueRevisionsNextPageAsync(String continuationToken,
                                                                                        Context context) {
        return
            service.listKeyValues(
                this.getEndpoint(), continuationToken, context)
                .map(
                    res ->
                        new PagedResponseBase<>(
                            res.getRequest(),
                            res.getStatusCode(),
                            res.getHeaders(),
                            res.getValue(),
                            res.getContinuationToken(),
                        null));
    }
}
