/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appconfiguration.v2020_06_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStoreUpdateParameters;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.ErrorException;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.ListKeyValueParameters;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.RegenerateKeyParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ConfigurationStores.
 */
public class ConfigurationStoresInner implements InnerSupportsGet<ConfigurationStoreInner>, InnerSupportsDelete<Void>, InnerSupportsListing<ConfigurationStoreInner> {
    /** The Retrofit service to perform REST calls. */
    private ConfigurationStoresService service;
    /** The service client containing this operation class. */
    private AppConfigurationManagementClientImpl client;

    /**
     * Initializes an instance of ConfigurationStoresInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ConfigurationStoresInner(Retrofit retrofit, AppConfigurationManagementClientImpl client) {
        this.service = retrofit.create(ConfigurationStoresService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ConfigurationStores to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ConfigurationStoresService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/configurationStores")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Body ConfigurationStoreInner configStoreCreationParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Body ConfigurationStoreInner configStoreCreationParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Body ConfigurationStoreUpdateParameters configStoreUpdateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Body ConfigurationStoreUpdateParameters configStoreUpdateParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/ListKeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores regenerateKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/RegenerateKey")
        Observable<Response<ResponseBody>> regenerateKey(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body RegenerateKeyParameters regenerateKeyParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores listKeyValue" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/listKeyValue")
        Observable<Response<ResponseBody>> listKeyValue(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Body ListKeyValueParameters listKeyValueParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_06_01.ConfigurationStores listKeysNext" })
        @GET
        Observable<Response<ResponseBody>> listKeysNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object if successful.
     */
    public PagedList<ConfigurationStoreInner> list() {
        ServiceResponse<Page<ConfigurationStoreInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ConfigurationStoreInner>(response.body()) {
            @Override
            public Page<ConfigurationStoreInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationStoreInner>> listAsync(final ListOperationCallback<ConfigurationStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<Page<ConfigurationStoreInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Page<ConfigurationStoreInner>>() {
                @Override
                public Page<ConfigurationStoreInner> call(ServiceResponse<Page<ConfigurationStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(ServiceResponse<Page<ConfigurationStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationStoreInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConfigurationStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object if successful.
     */
    public PagedList<ConfigurationStoreInner> list(final String skipToken) {
        ServiceResponse<Page<ConfigurationStoreInner>> response = listSinglePageAsync(skipToken).toBlocking().single();
        return new PagedList<ConfigurationStoreInner>(response.body()) {
            @Override
            public Page<ConfigurationStoreInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationStoreInner>> listAsync(final String skipToken, final ListOperationCallback<ConfigurationStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(skipToken),
            new Func1<String, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<Page<ConfigurationStoreInner>> listAsync(final String skipToken) {
        return listWithServiceResponseAsync(skipToken)
            .map(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Page<ConfigurationStoreInner>>() {
                @Override
                public Page<ConfigurationStoreInner> call(ServiceResponse<Page<ConfigurationStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listWithServiceResponseAsync(final String skipToken) {
        return listSinglePageAsync(skipToken)
            .concatMap(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(ServiceResponse<Page<ConfigurationStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
    ServiceResponse<PageImpl<ConfigurationStoreInner>> * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listSinglePageAsync(final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationStoreInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConfigurationStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConfigurationStoreInner>> listDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConfigurationStoreInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConfigurationStoreInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object if successful.
     */
    public PagedList<ConfigurationStoreInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ConfigurationStoreInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ConfigurationStoreInner>(response.body()) {
            @Override
            public Page<ConfigurationStoreInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationStoreInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ConfigurationStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<Page<ConfigurationStoreInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Page<ConfigurationStoreInner>>() {
                @Override
                public Page<ConfigurationStoreInner> call(ServiceResponse<Page<ConfigurationStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(ServiceResponse<Page<ConfigurationStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationStoreInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConfigurationStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object if successful.
     */
    public PagedList<ConfigurationStoreInner> listByResourceGroup(final String resourceGroupName, final String skipToken) {
        ServiceResponse<Page<ConfigurationStoreInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, skipToken).toBlocking().single();
        return new PagedList<ConfigurationStoreInner>(response.body()) {
            @Override
            public Page<ConfigurationStoreInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationStoreInner>> listByResourceGroupAsync(final String resourceGroupName, final String skipToken, final ListOperationCallback<ConfigurationStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<Page<ConfigurationStoreInner>> listByResourceGroupAsync(final String resourceGroupName, final String skipToken) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, skipToken)
            .map(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Page<ConfigurationStoreInner>>() {
                @Override
                public Page<ConfigurationStoreInner> call(ServiceResponse<Page<ConfigurationStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String skipToken) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(ServiceResponse<Page<ConfigurationStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
    ServiceResponse<PageImpl<ConfigurationStoreInner>> * @param resourceGroupName The name of the resource group to which the container registry belongs.
    ServiceResponse<PageImpl<ConfigurationStoreInner>> * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationStoreInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConfigurationStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConfigurationStoreInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConfigurationStoreInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConfigurationStoreInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets the properties of the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationStoreInner object if successful.
     */
    public ConfigurationStoreInner getByResourceGroup(String resourceGroupName, String configStoreName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, configStoreName).toBlocking().single().body();
    }

    /**
     * Gets the properties of the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationStoreInner> getByResourceGroupAsync(String resourceGroupName, String configStoreName, final ServiceCallback<ConfigurationStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, configStoreName), serviceCallback);
    }

    /**
     * Gets the properties of the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationStoreInner object
     */
    public Observable<ConfigurationStoreInner> getByResourceGroupAsync(String resourceGroupName, String configStoreName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, configStoreName).map(new Func1<ServiceResponse<ConfigurationStoreInner>, ConfigurationStoreInner>() {
            @Override
            public ConfigurationStoreInner call(ServiceResponse<ConfigurationStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the properties of the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationStoreInner object
     */
    public Observable<ServiceResponse<ConfigurationStoreInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String configStoreName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConfigurationStoreInner>>>() {
                @Override
                public Observable<ServiceResponse<ConfigurationStoreInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConfigurationStoreInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConfigurationStoreInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConfigurationStoreInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConfigurationStoreInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationStoreInner object if successful.
     */
    public ConfigurationStoreInner create(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters) {
        return createWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreCreationParameters).toBlocking().last().body();
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationStoreInner> createAsync(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters, final ServiceCallback<ConfigurationStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreCreationParameters), serviceCallback);
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ConfigurationStoreInner> createAsync(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters) {
        return createWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreCreationParameters).map(new Func1<ServiceResponse<ConfigurationStoreInner>, ConfigurationStoreInner>() {
            @Override
            public ConfigurationStoreInner call(ServiceResponse<ConfigurationStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ConfigurationStoreInner>> createWithServiceResponseAsync(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (configStoreCreationParameters == null) {
            throw new IllegalArgumentException("Parameter configStoreCreationParameters is required and cannot be null.");
        }
        Validator.validate(configStoreCreationParameters);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), configStoreCreationParameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ConfigurationStoreInner>() { }.getType());
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationStoreInner object if successful.
     */
    public ConfigurationStoreInner beginCreate(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreCreationParameters).toBlocking().single().body();
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationStoreInner> beginCreateAsync(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters, final ServiceCallback<ConfigurationStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreCreationParameters), serviceCallback);
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationStoreInner object
     */
    public Observable<ConfigurationStoreInner> beginCreateAsync(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreCreationParameters).map(new Func1<ServiceResponse<ConfigurationStoreInner>, ConfigurationStoreInner>() {
            @Override
            public ConfigurationStoreInner call(ServiceResponse<ConfigurationStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationStoreInner object
     */
    public Observable<ServiceResponse<ConfigurationStoreInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String configStoreName, ConfigurationStoreInner configStoreCreationParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (configStoreCreationParameters == null) {
            throw new IllegalArgumentException("Parameter configStoreCreationParameters is required and cannot be null.");
        }
        Validator.validate(configStoreCreationParameters);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), configStoreCreationParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConfigurationStoreInner>>>() {
                @Override
                public Observable<ServiceResponse<ConfigurationStoreInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConfigurationStoreInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConfigurationStoreInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConfigurationStoreInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConfigurationStoreInner>() { }.getType())
                .register(201, new TypeToken<ConfigurationStoreInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String configStoreName) {
        deleteWithServiceResponseAsync(resourceGroupName, configStoreName).toBlocking().last().body();
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String configStoreName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, configStoreName), serviceCallback);
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String configStoreName) {
        return deleteWithServiceResponseAsync(resourceGroupName, configStoreName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String configStoreName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String configStoreName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, configStoreName).toBlocking().single().body();
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String configStoreName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, configStoreName), serviceCallback);
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String configStoreName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, configStoreName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String configStoreName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationStoreInner object if successful.
     */
    public ConfigurationStoreInner update(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreUpdateParameters).toBlocking().last().body();
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationStoreInner> updateAsync(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters, final ServiceCallback<ConfigurationStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreUpdateParameters), serviceCallback);
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ConfigurationStoreInner> updateAsync(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreUpdateParameters).map(new Func1<ServiceResponse<ConfigurationStoreInner>, ConfigurationStoreInner>() {
            @Override
            public ConfigurationStoreInner call(ServiceResponse<ConfigurationStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ConfigurationStoreInner>> updateWithServiceResponseAsync(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (configStoreUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter configStoreUpdateParameters is required and cannot be null.");
        }
        Validator.validate(configStoreUpdateParameters);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), configStoreUpdateParameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ConfigurationStoreInner>() { }.getType());
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ConfigurationStoreInner object if successful.
     */
    public ConfigurationStoreInner beginUpdate(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreUpdateParameters).toBlocking().single().body();
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ConfigurationStoreInner> beginUpdateAsync(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters, final ServiceCallback<ConfigurationStoreInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreUpdateParameters), serviceCallback);
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationStoreInner object
     */
    public Observable<ConfigurationStoreInner> beginUpdateAsync(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, configStoreUpdateParameters).map(new Func1<ServiceResponse<ConfigurationStoreInner>, ConfigurationStoreInner>() {
            @Override
            public ConfigurationStoreInner call(ServiceResponse<ConfigurationStoreInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a configuration store with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ConfigurationStoreInner object
     */
    public Observable<ServiceResponse<ConfigurationStoreInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String configStoreName, ConfigurationStoreUpdateParameters configStoreUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (configStoreUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter configStoreUpdateParameters is required and cannot be null.");
        }
        Validator.validate(configStoreUpdateParameters);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), configStoreUpdateParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ConfigurationStoreInner>>>() {
                @Override
                public Observable<ServiceResponse<ConfigurationStoreInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ConfigurationStoreInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ConfigurationStoreInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ConfigurationStoreInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ConfigurationStoreInner>() { }.getType())
                .register(201, new TypeToken<ConfigurationStoreInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiKeyInner&gt; object if successful.
     */
    public PagedList<ApiKeyInner> listKeys(final String resourceGroupName, final String configStoreName) {
        ServiceResponse<Page<ApiKeyInner>> response = listKeysSinglePageAsync(resourceGroupName, configStoreName).toBlocking().single();
        return new PagedList<ApiKeyInner>(response.body()) {
            @Override
            public Page<ApiKeyInner> nextPage(String nextPageLink) {
                return listKeysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiKeyInner>> listKeysAsync(final String resourceGroupName, final String configStoreName, final ListOperationCallback<ApiKeyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listKeysSinglePageAsync(resourceGroupName, configStoreName),
            new Func1<String, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(String nextPageLink) {
                    return listKeysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiKeyInner&gt; object
     */
    public Observable<Page<ApiKeyInner>> listKeysAsync(final String resourceGroupName, final String configStoreName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, configStoreName)
            .map(new Func1<ServiceResponse<Page<ApiKeyInner>>, Page<ApiKeyInner>>() {
                @Override
                public Page<ApiKeyInner> call(ServiceResponse<Page<ApiKeyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiKeyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiKeyInner>>> listKeysWithServiceResponseAsync(final String resourceGroupName, final String configStoreName) {
        return listKeysSinglePageAsync(resourceGroupName, configStoreName)
            .concatMap(new Func1<ServiceResponse<Page<ApiKeyInner>>, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(ServiceResponse<Page<ApiKeyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listKeysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiKeyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiKeyInner>>> listKeysSinglePageAsync(final String resourceGroupName, final String configStoreName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiKeyInner>> result = listKeysDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiKeyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiKeyInner&gt; object if successful.
     */
    public PagedList<ApiKeyInner> listKeys(final String resourceGroupName, final String configStoreName, final String skipToken) {
        ServiceResponse<Page<ApiKeyInner>> response = listKeysSinglePageAsync(resourceGroupName, configStoreName, skipToken).toBlocking().single();
        return new PagedList<ApiKeyInner>(response.body()) {
            @Override
            public Page<ApiKeyInner> nextPage(String nextPageLink) {
                return listKeysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiKeyInner>> listKeysAsync(final String resourceGroupName, final String configStoreName, final String skipToken, final ListOperationCallback<ApiKeyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listKeysSinglePageAsync(resourceGroupName, configStoreName, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(String nextPageLink) {
                    return listKeysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiKeyInner&gt; object
     */
    public Observable<Page<ApiKeyInner>> listKeysAsync(final String resourceGroupName, final String configStoreName, final String skipToken) {
        return listKeysWithServiceResponseAsync(resourceGroupName, configStoreName, skipToken)
            .map(new Func1<ServiceResponse<Page<ApiKeyInner>>, Page<ApiKeyInner>>() {
                @Override
                public Page<ApiKeyInner> call(ServiceResponse<Page<ApiKeyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiKeyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiKeyInner>>> listKeysWithServiceResponseAsync(final String resourceGroupName, final String configStoreName, final String skipToken) {
        return listKeysSinglePageAsync(resourceGroupName, configStoreName, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<ApiKeyInner>>, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(ServiceResponse<Page<ApiKeyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listKeysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the access key for the specified configuration store.
     *
    ServiceResponse<PageImpl<ApiKeyInner>> * @param resourceGroupName The name of the resource group to which the container registry belongs.
    ServiceResponse<PageImpl<ApiKeyInner>> * @param configStoreName The name of the configuration store.
    ServiceResponse<PageImpl<ApiKeyInner>> * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiKeyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiKeyInner>>> listKeysSinglePageAsync(final String resourceGroupName, final String configStoreName, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiKeyInner>> result = listKeysDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiKeyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiKeyInner>> listKeysDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiKeyInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiKeyInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyInner object if successful.
     */
    public ApiKeyInner regenerateKey(String resourceGroupName, String configStoreName) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, configStoreName).toBlocking().single().body();
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyInner> regenerateKeyAsync(String resourceGroupName, String configStoreName, final ServiceCallback<ApiKeyInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, configStoreName), serviceCallback);
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyInner object
     */
    public Observable<ApiKeyInner> regenerateKeyAsync(String resourceGroupName, String configStoreName) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, configStoreName).map(new Func1<ServiceResponse<ApiKeyInner>, ApiKeyInner>() {
            @Override
            public ApiKeyInner call(ServiceResponse<ApiKeyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyInner object
     */
    public Observable<ServiceResponse<ApiKeyInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String configStoreName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String id = null;
        RegenerateKeyParameters regenerateKeyParameters = new RegenerateKeyParameters();
        regenerateKeyParameters.withId(null);
        return service.regenerateKey(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), this.client.acceptLanguage(), regenerateKeyParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param id The id of the key to regenerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiKeyInner object if successful.
     */
    public ApiKeyInner regenerateKey(String resourceGroupName, String configStoreName, String id) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, configStoreName, id).toBlocking().single().body();
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param id The id of the key to regenerate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiKeyInner> regenerateKeyAsync(String resourceGroupName, String configStoreName, String id, final ServiceCallback<ApiKeyInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, configStoreName, id), serviceCallback);
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param id The id of the key to regenerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyInner object
     */
    public Observable<ApiKeyInner> regenerateKeyAsync(String resourceGroupName, String configStoreName, String id) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, configStoreName, id).map(new Func1<ServiceResponse<ApiKeyInner>, ApiKeyInner>() {
            @Override
            public ApiKeyInner call(ServiceResponse<ApiKeyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerates an access key for the specified configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param id The id of the key to regenerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiKeyInner object
     */
    public Observable<ServiceResponse<ApiKeyInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String configStoreName, String id) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        RegenerateKeyParameters regenerateKeyParameters = new RegenerateKeyParameters();
        regenerateKeyParameters.withId(id);
        return service.regenerateKey(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), this.client.acceptLanguage(), regenerateKeyParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiKeyInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiKeyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiKeyInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiKeyInner> regenerateKeyDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiKeyInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiKeyInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists a configuration store key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param listKeyValueParameters The parameters for retrieving a key-value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KeyValueInner object if successful.
     */
    public KeyValueInner listKeyValue(String resourceGroupName, String configStoreName, ListKeyValueParameters listKeyValueParameters) {
        return listKeyValueWithServiceResponseAsync(resourceGroupName, configStoreName, listKeyValueParameters).toBlocking().single().body();
    }

    /**
     * Lists a configuration store key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param listKeyValueParameters The parameters for retrieving a key-value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<KeyValueInner> listKeyValueAsync(String resourceGroupName, String configStoreName, ListKeyValueParameters listKeyValueParameters, final ServiceCallback<KeyValueInner> serviceCallback) {
        return ServiceFuture.fromResponse(listKeyValueWithServiceResponseAsync(resourceGroupName, configStoreName, listKeyValueParameters), serviceCallback);
    }

    /**
     * Lists a configuration store key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param listKeyValueParameters The parameters for retrieving a key-value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<KeyValueInner> listKeyValueAsync(String resourceGroupName, String configStoreName, ListKeyValueParameters listKeyValueParameters) {
        return listKeyValueWithServiceResponseAsync(resourceGroupName, configStoreName, listKeyValueParameters).map(new Func1<ServiceResponse<KeyValueInner>, KeyValueInner>() {
            @Override
            public KeyValueInner call(ServiceResponse<KeyValueInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists a configuration store key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param listKeyValueParameters The parameters for retrieving a key-value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<ServiceResponse<KeyValueInner>> listKeyValueWithServiceResponseAsync(String resourceGroupName, String configStoreName, ListKeyValueParameters listKeyValueParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (listKeyValueParameters == null) {
            throw new IllegalArgumentException("Parameter listKeyValueParameters is required and cannot be null.");
        }
        Validator.validate(listKeyValueParameters);
        return service.listKeyValue(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), listKeyValueParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<KeyValueInner>>>() {
                @Override
                public Observable<ServiceResponse<KeyValueInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<KeyValueInner> clientResponse = listKeyValueDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<KeyValueInner> listKeyValueDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<KeyValueInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<KeyValueInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object if successful.
     */
    public PagedList<ConfigurationStoreInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ConfigurationStoreInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConfigurationStoreInner>(response.body()) {
            @Override
            public Page<ConfigurationStoreInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationStoreInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ConfigurationStoreInner>> serviceFuture, final ListOperationCallback<ConfigurationStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<Page<ConfigurationStoreInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Page<ConfigurationStoreInner>>() {
                @Override
                public Page<ConfigurationStoreInner> call(ServiceResponse<Page<ConfigurationStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(ServiceResponse<Page<ConfigurationStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the configuration stores for a given subscription.
     *
    ServiceResponse<PageImpl<ConfigurationStoreInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationStoreInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConfigurationStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConfigurationStoreInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConfigurationStoreInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConfigurationStoreInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object if successful.
     */
    public PagedList<ConfigurationStoreInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ConfigurationStoreInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ConfigurationStoreInner>(response.body()) {
            @Override
            public Page<ConfigurationStoreInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ConfigurationStoreInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ConfigurationStoreInner>> serviceFuture, final ListOperationCallback<ConfigurationStoreInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<Page<ConfigurationStoreInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Page<ConfigurationStoreInner>>() {
                @Override
                public Page<ConfigurationStoreInner> call(ServiceResponse<Page<ConfigurationStoreInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ConfigurationStoreInner&gt; object
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ConfigurationStoreInner>>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(ServiceResponse<Page<ConfigurationStoreInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the configuration stores for a given resource group.
     *
    ServiceResponse<PageImpl<ConfigurationStoreInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ConfigurationStoreInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ConfigurationStoreInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ConfigurationStoreInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ConfigurationStoreInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ConfigurationStoreInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ConfigurationStoreInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ConfigurationStoreInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ConfigurationStoreInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiKeyInner&gt; object if successful.
     */
    public PagedList<ApiKeyInner> listKeysNext(final String nextPageLink) {
        ServiceResponse<Page<ApiKeyInner>> response = listKeysNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApiKeyInner>(response.body()) {
            @Override
            public Page<ApiKeyInner> nextPage(String nextPageLink) {
                return listKeysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiKeyInner>> listKeysNextAsync(final String nextPageLink, final ServiceFuture<List<ApiKeyInner>> serviceFuture, final ListOperationCallback<ApiKeyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listKeysNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(String nextPageLink) {
                    return listKeysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiKeyInner&gt; object
     */
    public Observable<Page<ApiKeyInner>> listKeysNextAsync(final String nextPageLink) {
        return listKeysNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApiKeyInner>>, Page<ApiKeyInner>>() {
                @Override
                public Page<ApiKeyInner> call(ServiceResponse<Page<ApiKeyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the access key for the specified configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiKeyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiKeyInner>>> listKeysNextWithServiceResponseAsync(final String nextPageLink) {
        return listKeysNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApiKeyInner>>, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(ServiceResponse<Page<ApiKeyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listKeysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the access key for the specified configuration store.
     *
    ServiceResponse<PageImpl<ApiKeyInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiKeyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiKeyInner>>> listKeysNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listKeysNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiKeyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiKeyInner>> result = listKeysNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiKeyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiKeyInner>> listKeysNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiKeyInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiKeyInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
