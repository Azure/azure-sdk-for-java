/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appconfiguration.v2020_06_01.implementation;

import com.microsoft.azure.management.appconfiguration.v2020_06_01.ResourceIdentity;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.ProvisioningState;
import org.joda.time.DateTime;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.EncryptionProperties;
import java.util.List;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.PrivateEndpointConnectionReference;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.PublicNetworkAccess;
import com.microsoft.azure.management.appconfiguration.v2020_06_01.Sku;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * The configuration store along with all resource properties. The
 * Configuration Store will have all information to begin utilizing it.
 */
@JsonFlatten
public class ConfigurationStoreInner extends Resource {
    /**
     * The managed identity information, if configured.
     */
    @JsonProperty(value = "identity")
    private ResourceIdentity identity;

    /**
     * The provisioning state of the configuration store. Possible values
     * include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
     * 'Canceled'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * The creation date of configuration store.
     */
    @JsonProperty(value = "properties.creationDate", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime creationDate;

    /**
     * The DNS endpoint where the configuration store API will be available.
     */
    @JsonProperty(value = "properties.endpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String endpoint;

    /**
     * The encryption settings of the configuration store.
     */
    @JsonProperty(value = "properties.encryption")
    private EncryptionProperties encryption;

    /**
     * The list of private endpoint connections that are set up for this
     * resource.
     */
    @JsonProperty(value = "properties.privateEndpointConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<PrivateEndpointConnectionReference> privateEndpointConnections;

    /**
     * Control permission for data plane traffic coming from public networks
     * while private endpoint is enabled. Possible values include: 'Enabled',
     * 'Disabled'.
     */
    @JsonProperty(value = "properties.publicNetworkAccess")
    private PublicNetworkAccess publicNetworkAccess;

    /**
     * The sku of the configuration store.
     */
    @JsonProperty(value = "sku", required = true)
    private Sku sku;

    /**
     * Get the managed identity information, if configured.
     *
     * @return the identity value
     */
    public ResourceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the managed identity information, if configured.
     *
     * @param identity the identity value to set
     * @return the ConfigurationStoreInner object itself.
     */
    public ConfigurationStoreInner withIdentity(ResourceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the provisioning state of the configuration store. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the creation date of configuration store.
     *
     * @return the creationDate value
     */
    public DateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the DNS endpoint where the configuration store API will be available.
     *
     * @return the endpoint value
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the encryption settings of the configuration store.
     *
     * @return the encryption value
     */
    public EncryptionProperties encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption settings of the configuration store.
     *
     * @param encryption the encryption value to set
     * @return the ConfigurationStoreInner object itself.
     */
    public ConfigurationStoreInner withEncryption(EncryptionProperties encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the list of private endpoint connections that are set up for this resource.
     *
     * @return the privateEndpointConnections value
     */
    public List<PrivateEndpointConnectionReference> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get control permission for data plane traffic coming from public networks while private endpoint is enabled. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the publicNetworkAccess value
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set control permission for data plane traffic coming from public networks while private endpoint is enabled. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param publicNetworkAccess the publicNetworkAccess value to set
     * @return the ConfigurationStoreInner object itself.
     */
    public ConfigurationStoreInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the sku of the configuration store.
     *
     * @return the sku value
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku of the configuration store.
     *
     * @param sku the sku value to set
     * @return the ConfigurationStoreInner object itself.
     */
    public ConfigurationStoreInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

}
