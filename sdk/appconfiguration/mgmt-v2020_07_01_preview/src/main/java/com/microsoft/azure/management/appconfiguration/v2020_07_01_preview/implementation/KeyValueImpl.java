/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.implementation;

import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValue;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;
import java.util.Map;

class KeyValueImpl extends CreatableUpdatableImpl<KeyValue, KeyValueInner, KeyValueImpl> implements KeyValue, KeyValue.Definition, KeyValue.Update {
    private final AppConfigurationManager manager;
    private String resourceGroupName;
    private String configStoreName;
    private String keyValueName;

    KeyValueImpl(String name, AppConfigurationManager manager) {
        super(name, new KeyValueInner());
        this.manager = manager;
        // Set resource name
        this.keyValueName = name;
        //
    }

    KeyValueImpl(KeyValueInner inner, AppConfigurationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.keyValueName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.configStoreName = IdParsingUtils.getValueFromIdByName(inner.id(), "configurationStores");
        this.keyValueName = IdParsingUtils.getValueFromIdByName(inner.id(), "keyValues");
        //
    }

    @Override
    public AppConfigurationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<KeyValue> createResourceAsync() {
        KeyValuesInner client = this.manager().inner().keyValues();
        return client.createOrUpdateAsync(this.resourceGroupName, this.configStoreName, this.keyValueName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<KeyValue> updateResourceAsync() {
        KeyValuesInner client = this.manager().inner().keyValues();
        return client.createOrUpdateAsync(this.resourceGroupName, this.configStoreName, this.keyValueName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<KeyValueInner> getInnerAsync() {
        KeyValuesInner client = this.manager().inner().keyValues();
        return client.getAsync(this.resourceGroupName, this.configStoreName, this.keyValueName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String contentType() {
        return this.inner().contentType();
    }

    @Override
    public String eTag() {
        return this.inner().eTag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String keyVal() {
        return this.inner().key();
    }

    @Override
    public String label() {
        return this.inner().label();
    }

    @Override
    public DateTime lastModified() {
        return this.inner().lastModified();
    }

    @Override
    public Boolean locked() {
        return this.inner().locked();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().tags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String value() {
        return this.inner().value();
    }

    @Override
    public KeyValueImpl withExistingConfigurationStore(String resourceGroupName, String configStoreName) {
        this.resourceGroupName = resourceGroupName;
        this.configStoreName = configStoreName;
        return this;
    }

    @Override
    public KeyValueImpl withContentType(String contentType) {
        this.inner().withContentType(contentType);
        return this;
    }

    @Override
    public KeyValueImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public KeyValueImpl withValue(String value) {
        this.inner().withValue(value);
        return this;
    }

}
