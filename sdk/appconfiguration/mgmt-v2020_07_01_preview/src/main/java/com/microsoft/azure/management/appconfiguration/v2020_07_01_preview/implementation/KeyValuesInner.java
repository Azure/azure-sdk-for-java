/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in KeyValues.
 */
public class KeyValuesInner {
    /** The Retrofit service to perform REST calls. */
    private KeyValuesService service;
    /** The service client containing this operation class. */
    private AppConfigurationManagementClientImpl client;

    /**
     * Initializes an instance of KeyValuesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public KeyValuesInner(Retrofit retrofit, AppConfigurationManagementClientImpl client) {
        this.service = retrofit.create(KeyValuesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for KeyValues to be
     * used by Retrofit to perform actually REST calls.
     */
    interface KeyValuesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValues listByConfigurationStore" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues")
        Observable<Response<ResponseBody>> listByConfigurationStore(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Query("api-version") String apiVersion, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValues get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Path("keyValueName") String keyValueName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValues createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Path("keyValueName") String keyValueName, @Query("api-version") String apiVersion, @Body KeyValueInner keyValueParameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValues delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Path("keyValueName") String keyValueName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValues beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("configStoreName") String configStoreName, @Path("keyValueName") String keyValueName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValues listByConfigurationStoreNext" })
        @GET
        Observable<Response<ResponseBody>> listByConfigurationStoreNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;KeyValueInner&gt; object if successful.
     */
    public PagedList<KeyValueInner> listByConfigurationStore(final String resourceGroupName, final String configStoreName) {
        ServiceResponse<Page<KeyValueInner>> response = listByConfigurationStoreSinglePageAsync(resourceGroupName, configStoreName).toBlocking().single();
        return new PagedList<KeyValueInner>(response.body()) {
            @Override
            public Page<KeyValueInner> nextPage(String nextPageLink) {
                return listByConfigurationStoreNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<KeyValueInner>> listByConfigurationStoreAsync(final String resourceGroupName, final String configStoreName, final ListOperationCallback<KeyValueInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByConfigurationStoreSinglePageAsync(resourceGroupName, configStoreName),
            new Func1<String, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(String nextPageLink) {
                    return listByConfigurationStoreNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;KeyValueInner&gt; object
     */
    public Observable<Page<KeyValueInner>> listByConfigurationStoreAsync(final String resourceGroupName, final String configStoreName) {
        return listByConfigurationStoreWithServiceResponseAsync(resourceGroupName, configStoreName)
            .map(new Func1<ServiceResponse<Page<KeyValueInner>>, Page<KeyValueInner>>() {
                @Override
                public Page<KeyValueInner> call(ServiceResponse<Page<KeyValueInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;KeyValueInner&gt; object
     */
    public Observable<ServiceResponse<Page<KeyValueInner>>> listByConfigurationStoreWithServiceResponseAsync(final String resourceGroupName, final String configStoreName) {
        return listByConfigurationStoreSinglePageAsync(resourceGroupName, configStoreName)
            .concatMap(new Func1<ServiceResponse<Page<KeyValueInner>>, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(ServiceResponse<Page<KeyValueInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByConfigurationStoreNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;KeyValueInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<KeyValueInner>>> listByConfigurationStoreSinglePageAsync(final String resourceGroupName, final String configStoreName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skipToken = null;
        return service.listByConfigurationStore(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<KeyValueInner>> result = listByConfigurationStoreDelegate(response);
                        return Observable.just(new ServiceResponse<Page<KeyValueInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;KeyValueInner&gt; object if successful.
     */
    public PagedList<KeyValueInner> listByConfigurationStore(final String resourceGroupName, final String configStoreName, final String skipToken) {
        ServiceResponse<Page<KeyValueInner>> response = listByConfigurationStoreSinglePageAsync(resourceGroupName, configStoreName, skipToken).toBlocking().single();
        return new PagedList<KeyValueInner>(response.body()) {
            @Override
            public Page<KeyValueInner> nextPage(String nextPageLink) {
                return listByConfigurationStoreNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<KeyValueInner>> listByConfigurationStoreAsync(final String resourceGroupName, final String configStoreName, final String skipToken, final ListOperationCallback<KeyValueInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByConfigurationStoreSinglePageAsync(resourceGroupName, configStoreName, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(String nextPageLink) {
                    return listByConfigurationStoreNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;KeyValueInner&gt; object
     */
    public Observable<Page<KeyValueInner>> listByConfigurationStoreAsync(final String resourceGroupName, final String configStoreName, final String skipToken) {
        return listByConfigurationStoreWithServiceResponseAsync(resourceGroupName, configStoreName, skipToken)
            .map(new Func1<ServiceResponse<Page<KeyValueInner>>, Page<KeyValueInner>>() {
                @Override
                public Page<KeyValueInner> call(ServiceResponse<Page<KeyValueInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;KeyValueInner&gt; object
     */
    public Observable<ServiceResponse<Page<KeyValueInner>>> listByConfigurationStoreWithServiceResponseAsync(final String resourceGroupName, final String configStoreName, final String skipToken) {
        return listByConfigurationStoreSinglePageAsync(resourceGroupName, configStoreName, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<KeyValueInner>>, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(ServiceResponse<Page<KeyValueInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByConfigurationStoreNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the key-values for a given configuration store.
     *
    ServiceResponse<PageImpl<KeyValueInner>> * @param resourceGroupName The name of the resource group to which the container registry belongs.
    ServiceResponse<PageImpl<KeyValueInner>> * @param configStoreName The name of the configuration store.
    ServiceResponse<PageImpl<KeyValueInner>> * @param skipToken A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;KeyValueInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<KeyValueInner>>> listByConfigurationStoreSinglePageAsync(final String resourceGroupName, final String configStoreName, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByConfigurationStore(this.client.subscriptionId(), resourceGroupName, configStoreName, this.client.apiVersion(), skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<KeyValueInner>> result = listByConfigurationStoreDelegate(response);
                        return Observable.just(new ServiceResponse<Page<KeyValueInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<KeyValueInner>> listByConfigurationStoreDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<KeyValueInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<KeyValueInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the properties of the specified key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KeyValueInner object if successful.
     */
    public KeyValueInner get(String resourceGroupName, String configStoreName, String keyValueName) {
        return getWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).toBlocking().single().body();
    }

    /**
     * Gets the properties of the specified key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<KeyValueInner> getAsync(String resourceGroupName, String configStoreName, String keyValueName, final ServiceCallback<KeyValueInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName), serviceCallback);
    }

    /**
     * Gets the properties of the specified key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<KeyValueInner> getAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        return getWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).map(new Func1<ServiceResponse<KeyValueInner>, KeyValueInner>() {
            @Override
            public KeyValueInner call(ServiceResponse<KeyValueInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the properties of the specified key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<ServiceResponse<KeyValueInner>> getWithServiceResponseAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (keyValueName == null) {
            throw new IllegalArgumentException("Parameter keyValueName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, configStoreName, keyValueName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<KeyValueInner>>>() {
                @Override
                public Observable<ServiceResponse<KeyValueInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<KeyValueInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<KeyValueInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<KeyValueInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<KeyValueInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KeyValueInner object if successful.
     */
    public KeyValueInner createOrUpdate(String resourceGroupName, String configStoreName, String keyValueName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).toBlocking().single().body();
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<KeyValueInner> createOrUpdateAsync(String resourceGroupName, String configStoreName, String keyValueName, final ServiceCallback<KeyValueInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName), serviceCallback);
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<KeyValueInner> createOrUpdateAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).map(new Func1<ServiceResponse<KeyValueInner>, KeyValueInner>() {
            @Override
            public KeyValueInner call(ServiceResponse<KeyValueInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<ServiceResponse<KeyValueInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (keyValueName == null) {
            throw new IllegalArgumentException("Parameter keyValueName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final KeyValueInner keyValueParameters = null;
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, configStoreName, keyValueName, this.client.apiVersion(), keyValueParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<KeyValueInner>>>() {
                @Override
                public Observable<ServiceResponse<KeyValueInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<KeyValueInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param keyValueParameters The parameters for creating a key-value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the KeyValueInner object if successful.
     */
    public KeyValueInner createOrUpdate(String resourceGroupName, String configStoreName, String keyValueName, KeyValueInner keyValueParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName, keyValueParameters).toBlocking().single().body();
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param keyValueParameters The parameters for creating a key-value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<KeyValueInner> createOrUpdateAsync(String resourceGroupName, String configStoreName, String keyValueName, KeyValueInner keyValueParameters, final ServiceCallback<KeyValueInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName, keyValueParameters), serviceCallback);
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param keyValueParameters The parameters for creating a key-value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<KeyValueInner> createOrUpdateAsync(String resourceGroupName, String configStoreName, String keyValueName, KeyValueInner keyValueParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName, keyValueParameters).map(new Func1<ServiceResponse<KeyValueInner>, KeyValueInner>() {
            @Override
            public KeyValueInner call(ServiceResponse<KeyValueInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param keyValueParameters The parameters for creating a key-value.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the KeyValueInner object
     */
    public Observable<ServiceResponse<KeyValueInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String configStoreName, String keyValueName, KeyValueInner keyValueParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (keyValueName == null) {
            throw new IllegalArgumentException("Parameter keyValueName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(keyValueParameters);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, configStoreName, keyValueName, this.client.apiVersion(), keyValueParameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<KeyValueInner>>>() {
                @Override
                public Observable<ServiceResponse<KeyValueInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<KeyValueInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<KeyValueInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<KeyValueInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<KeyValueInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String configStoreName, String keyValueName) {
        deleteWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).toBlocking().last().body();
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String configStoreName, String keyValueName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName), serviceCallback);
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        return deleteWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (keyValueName == null) {
            throw new IllegalArgumentException("Parameter keyValueName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, configStoreName, keyValueName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String configStoreName, String keyValueName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).toBlocking().single().body();
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String configStoreName, String keyValueName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName), serviceCallback);
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, configStoreName, keyValueName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a key-value.
     *
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (configStoreName == null) {
            throw new IllegalArgumentException("Parameter configStoreName is required and cannot be null.");
        }
        if (keyValueName == null) {
            throw new IllegalArgumentException("Parameter keyValueName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, configStoreName, keyValueName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;KeyValueInner&gt; object if successful.
     */
    public PagedList<KeyValueInner> listByConfigurationStoreNext(final String nextPageLink) {
        ServiceResponse<Page<KeyValueInner>> response = listByConfigurationStoreNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<KeyValueInner>(response.body()) {
            @Override
            public Page<KeyValueInner> nextPage(String nextPageLink) {
                return listByConfigurationStoreNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<KeyValueInner>> listByConfigurationStoreNextAsync(final String nextPageLink, final ServiceFuture<List<KeyValueInner>> serviceFuture, final ListOperationCallback<KeyValueInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByConfigurationStoreNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(String nextPageLink) {
                    return listByConfigurationStoreNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;KeyValueInner&gt; object
     */
    public Observable<Page<KeyValueInner>> listByConfigurationStoreNextAsync(final String nextPageLink) {
        return listByConfigurationStoreNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<KeyValueInner>>, Page<KeyValueInner>>() {
                @Override
                public Page<KeyValueInner> call(ServiceResponse<Page<KeyValueInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the key-values for a given configuration store.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;KeyValueInner&gt; object
     */
    public Observable<ServiceResponse<Page<KeyValueInner>>> listByConfigurationStoreNextWithServiceResponseAsync(final String nextPageLink) {
        return listByConfigurationStoreNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<KeyValueInner>>, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(ServiceResponse<Page<KeyValueInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByConfigurationStoreNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the key-values for a given configuration store.
     *
    ServiceResponse<PageImpl<KeyValueInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;KeyValueInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<KeyValueInner>>> listByConfigurationStoreNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByConfigurationStoreNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<KeyValueInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<KeyValueInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<KeyValueInner>> result = listByConfigurationStoreNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<KeyValueInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<KeyValueInner>> listByConfigurationStoreNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<KeyValueInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<KeyValueInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
