/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValues;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.KeyValue;

class KeyValuesImpl extends WrapperImpl<KeyValuesInner> implements KeyValues {
    private final AppConfigurationManager manager;

    KeyValuesImpl(AppConfigurationManager manager) {
        super(manager.inner().keyValues());
        this.manager = manager;
    }

    public AppConfigurationManager manager() {
        return this.manager;
    }

    @Override
    public KeyValueImpl define(String name) {
        return wrapModel(name);
    }

    private KeyValueImpl wrapModel(KeyValueInner inner) {
        return  new KeyValueImpl(inner, manager());
    }

    private KeyValueImpl wrapModel(String name) {
        return new KeyValueImpl(name, this.manager());
    }

    @Override
    public Observable<KeyValue> listByConfigurationStoreAsync(final String resourceGroupName, final String configStoreName) {
        KeyValuesInner client = this.inner();
        return client.listByConfigurationStoreAsync(resourceGroupName, configStoreName)
        .flatMapIterable(new Func1<Page<KeyValueInner>, Iterable<KeyValueInner>>() {
            @Override
            public Iterable<KeyValueInner> call(Page<KeyValueInner> page) {
                return page.items();
            }
        })
        .map(new Func1<KeyValueInner, KeyValue>() {
            @Override
            public KeyValue call(KeyValueInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<KeyValue> getAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        KeyValuesInner client = this.inner();
        return client.getAsync(resourceGroupName, configStoreName, keyValueName)
        .flatMap(new Func1<KeyValueInner, Observable<KeyValue>>() {
            @Override
            public Observable<KeyValue> call(KeyValueInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((KeyValue)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String configStoreName, String keyValueName) {
        KeyValuesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, configStoreName, keyValueName).toCompletable();
    }

}
