/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appconfiguration.v2020_07_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.implementation.KeyValueInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.appconfiguration.v2020_07_01_preview.implementation.AppConfigurationManager;
import org.joda.time.DateTime;
import java.util.Map;

/**
 * Type representing KeyValue.
 */
public interface KeyValue extends HasInner<KeyValueInner>, Indexable, Refreshable<KeyValue>, Updatable<KeyValue.Update>, HasManager<AppConfigurationManager> {
    /**
     * @return the contentType value.
     */
    String contentType();

    /**
     * @return the eTag value.
     */
    String eTag();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the key value.
     */
    String keyVal();

    /**
     * @return the label value.
     */
    String label();

    /**
     * @return the lastModified value.
     */
    DateTime lastModified();

    /**
     * @return the locked value.
     */
    Boolean locked();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the value value.
     */
    String value();

    /**
     * The entirety of the KeyValue definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithConfigurationStore, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of KeyValue definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a KeyValue definition.
         */
        interface Blank extends WithConfigurationStore {
        }

        /**
         * The stage of the keyvalue definition allowing to specify ConfigurationStore.
         */
        interface WithConfigurationStore {
           /**
            * Specifies resourceGroupName, configStoreName.
            * @param resourceGroupName The name of the resource group to which the container registry belongs
            * @param configStoreName The name of the configuration store
            * @return the next definition stage
            */
            WithCreate withExistingConfigurationStore(String resourceGroupName, String configStoreName);
        }

        /**
         * The stage of the keyvalue definition allowing to specify ContentType.
         */
        interface WithContentType {
            /**
             * Specifies contentType.
             * @param contentType The content type of the key-value's value.
 Providing a proper content-type can enable transformations of values when they are retrieved by applications
             * @return the next definition stage
             */
            WithCreate withContentType(String contentType);
        }

        /**
         * The stage of the keyvalue definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags A dictionary of tags that can help identify what a key-value may be applicable for
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the keyvalue definition allowing to specify Value.
         */
        interface WithValue {
            /**
             * Specifies value.
             * @param value The value of the key-value
             * @return the next definition stage
             */
            WithCreate withValue(String value);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<KeyValue>, DefinitionStages.WithContentType, DefinitionStages.WithTags, DefinitionStages.WithValue {
        }
    }
    /**
     * The template for a KeyValue update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<KeyValue>, UpdateStages.WithContentType, UpdateStages.WithTags, UpdateStages.WithValue {
    }

    /**
     * Grouping of KeyValue update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the keyvalue update allowing to specify ContentType.
         */
        interface WithContentType {
            /**
             * Specifies contentType.
             * @param contentType The content type of the key-value's value.
 Providing a proper content-type can enable transformations of values when they are retrieved by applications
             * @return the next update stage
             */
            Update withContentType(String contentType);
        }

        /**
         * The stage of the keyvalue update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags A dictionary of tags that can help identify what a key-value may be applicable for
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the keyvalue update allowing to specify Value.
         */
        interface WithValue {
            /**
             * Specifies value.
             * @param value The value of the key-value
             * @return the next update stage
             */
            Update withValue(String value);
        }

    }
}
