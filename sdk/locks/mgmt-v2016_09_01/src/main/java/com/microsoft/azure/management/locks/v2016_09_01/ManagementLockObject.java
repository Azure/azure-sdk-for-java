/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.locks.v2016_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.locks.v2016_09_01.implementation.ManagementLockObjectInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.locks.v2016_09_01.implementation.LocksManager;
import java.util.List;

/**
 * Type representing ManagementLockObject.
 */
public interface ManagementLockObject extends HasInner<ManagementLockObjectInner>, Indexable, Updatable<ManagementLockObject.Update>, Refreshable<ManagementLockObject>, HasManager<LocksManager> {
    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the level value.
     */
    LockLevel level();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the notes value.
     */
    String notes();

    /**
     * @return the owners value.
     */
    List<ManagementLockOwner> owners();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ManagementLockObject definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroupName, DefinitionStages.WithLevel, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ManagementLockObject definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ManagementLockObject definition.
         */
        interface Blank extends WithResourceGroupName {
        }

        /**
         * The stage of the managementlockobject definition allowing to specify ResourceGroupName.
         */
        interface WithResourceGroupName {
           /**
            * Specifies resourceGroupName.
            * @param resourceGroupName The name of the resource group to lock
            * @return the next definition stage
            */
            WithLevel withResourceGroupName(String resourceGroupName);
        }

        /**
         * The stage of the managementlockobject definition allowing to specify Level.
         */
        interface WithLevel {
           /**
            * Specifies level.
            * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it. Possible values include: 'NotSpecified', 'CanNotDelete', 'ReadOnly'
            * @return the next definition stage
            */
            WithCreate withLevel(LockLevel level);
        }

        /**
         * The stage of the managementlockobject definition allowing to specify Notes.
         */
        interface WithNotes {
            /**
             * Specifies notes.
             * @param notes Notes about the lock. Maximum of 512 characters
             * @return the next definition stage
             */
            WithCreate withNotes(String notes);
        }

        /**
         * The stage of the managementlockobject definition allowing to specify Owners.
         */
        interface WithOwners {
            /**
             * Specifies owners.
             * @param owners The owners of the lock
             * @return the next definition stage
             */
            WithCreate withOwners(List<ManagementLockOwner> owners);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ManagementLockObject>, DefinitionStages.WithNotes, DefinitionStages.WithOwners {
        }
    }
    /**
     * The template for a ManagementLockObject update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ManagementLockObject>, UpdateStages.WithNotes, UpdateStages.WithOwners {
    }

    /**
     * Grouping of ManagementLockObject update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the managementlockobject update allowing to specify Notes.
         */
        interface WithNotes {
            /**
             * Specifies notes.
             * @param notes Notes about the lock. Maximum of 512 characters
             * @return the next update stage
             */
            Update withNotes(String notes);
        }

        /**
         * The stage of the managementlockobject update allowing to specify Owners.
         */
        interface WithOwners {
            /**
             * Specifies owners.
             * @param owners The owners of the lock
             * @return the next update stage
             */
            Update withOwners(List<ManagementLockOwner> owners);
        }

    }
}
