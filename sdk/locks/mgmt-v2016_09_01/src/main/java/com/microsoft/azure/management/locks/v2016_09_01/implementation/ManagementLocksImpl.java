/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.locks.v2016_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.locks.v2016_09_01.ManagementLocks;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.azure.management.locks.v2016_09_01.ManagementLockObject;
import com.microsoft.azure.arm.utils.PagedListConverter;

class ManagementLocksImpl extends WrapperImpl<ManagementLocksInner> implements ManagementLocks {
    private PagedListConverter<ManagementLockObjectInner, ManagementLockObject> converter;
    private final LocksManager manager;

    ManagementLocksImpl(LocksManager manager) {
        super(manager.inner().managementLocks());
        this.manager = manager;
        this.converter = new PagedListConverter<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public Observable<ManagementLockObject> typeConvertAsync(ManagementLockObjectInner inner) {
                return Observable.just((ManagementLockObject) wrapModel(inner));
            }
        };
    }

    public LocksManager manager() {
        return this.manager;
    }

    @Override
    public ManagementLockObjectImpl define(String name) {
        return wrapModel(name);
    }

    private ManagementLockObjectImpl wrapModel(ManagementLockObjectInner inner) {
        return  new ManagementLockObjectImpl(inner, manager());
    }

    private ManagementLockObjectImpl wrapModel(String name) {
        return new ManagementLockObjectImpl(name, this.manager());
    }

    @Override
    public Observable<ManagementLockObject> createOrUpdateByScopeAsync(String scope, String lockName, ManagementLockObjectInner parameters) {
        ManagementLocksInner client = this.inner();
        return client.createOrUpdateByScopeAsync(scope, lockName, parameters)
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteByScopeAsync(String scope, String lockName) {
        ManagementLocksInner client = this.inner();
        return client.deleteByScopeAsync(scope, lockName).toCompletable();
    }

    @Override
    public Observable<ManagementLockObject> getByScopeAsync(String scope, String lockName) {
        ManagementLocksInner client = this.inner();
        return client.getByScopeAsync(scope, lockName)
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagementLockObject> createOrUpdateAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, ManagementLockObjectInner parameters) {
        ManagementLocksInner client = this.inner();
        return client.createOrUpdateAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, parameters)
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName) {
        ManagementLocksInner client = this.inner();
        return client.deleteAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName).toCompletable();
    }

    @Override
    public Observable<ManagementLockObject> getAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName) {
        ManagementLocksInner client = this.inner();
        return client.getAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName)
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagementLockObject> createOrUpdateAtSubscriptionLevelAsync(String lockName, ManagementLockObjectInner parameters) {
        ManagementLocksInner client = this.inner();
        return client.createOrUpdateAtSubscriptionLevelAsync(lockName, parameters)
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAtSubscriptionLevelAsync(String lockName) {
        ManagementLocksInner client = this.inner();
        return client.deleteAtSubscriptionLevelAsync(lockName).toCompletable();
    }

    @Override
    public Observable<ManagementLockObject> getAtSubscriptionLevelAsync(String lockName) {
        ManagementLocksInner client = this.inner();
        return client.getAtSubscriptionLevelAsync(lockName)
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagementLockObject> listAtResourceLevelAsync(final String resourceGroupName, final String resourceProviderNamespace, final String parentResourcePath, final String resourceType, final String resourceName) {
        ManagementLocksInner client = this.inner();
        return client.listAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
        .flatMapIterable(new Func1<Page<ManagementLockObjectInner>, Iterable<ManagementLockObjectInner>>() {
            @Override
            public Iterable<ManagementLockObjectInner> call(Page<ManagementLockObjectInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagementLockObject> listByScopeAsync(final String scope) {
        ManagementLocksInner client = this.inner();
        return client.listByScopeAsync(scope)
        .flatMapIterable(new Func1<Page<ManagementLockObjectInner>, Iterable<ManagementLockObjectInner>>() {
            @Override
            public Iterable<ManagementLockObjectInner> call(Page<ManagementLockObjectInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return new ManagementLockObjectImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<ManagementLockObject> list() {
        ManagementLocksInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<ManagementLockObject> listAsync() {
        ManagementLocksInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ManagementLockObjectInner>, Iterable<ManagementLockObjectInner>>() {
            @Override
            public Iterable<ManagementLockObjectInner> call(Page<ManagementLockObjectInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<ManagementLockObject> listByResourceGroup(String resourceGroupName) {
        ManagementLocksInner client = this.inner();
        return converter.convert(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<ManagementLockObject> listByResourceGroupAsync(String resourceGroupName) {
        ManagementLocksInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<ManagementLockObjectInner>, Iterable<ManagementLockObjectInner>>() {
            @Override
            public Iterable<ManagementLockObjectInner> call(Page<ManagementLockObjectInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagementLockObjectInner, ManagementLockObject>() {
            @Override
            public ManagementLockObject call(ManagementLockObjectInner inner) {
                return wrapModel(inner);
            }
        });
    }

    private Observable<ManagementLockObjectInner> getInnerAsync(String resourceGroupName, String name) {
        ManagementLocksInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    public ManagementLockObject getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupAsync(resourceGroupName, name).toBlocking().last();
    }

    @Override
    public Observable<ManagementLockObject> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getInnerAsync(resourceGroupName, name).flatMap(new Func1<ManagementLockObjectInner, Observable<ManagementLockObject>> () {
            @Override
            public Observable<ManagementLockObject> call(ManagementLockObjectInner innerT) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ManagementLockObject)wrapModel(innerT));
                }
            }
        });
    }

    @Override
    public ServiceFuture<ManagementLockObject> getByResourceGroupAsync(String resourceGroupName, String name, ServiceCallback<ManagementLockObject> callback) {
        return ServiceFuture.fromBody(getByResourceGroupAsync(resourceGroupName, name), callback);
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAtResourceGroupLevelAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.deleteByResourceGroupAsync(resourceGroupName, name).await();
    }

    @Override
    public Completable deleteByResourceGroupAsync(String resourceGroupName, String name) {
        return this.inner().deleteAtResourceGroupLevelAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public ServiceFuture<Void> deleteByResourceGroupAsync(String resourceGroupName, String name, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteByResourceGroupAsync(resourceGroupName, name), serviceCallback);
    }

}
