// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.edgeorder.models.CustomerSubscriptionDetails;
import com.azure.resourcemanager.edgeorder.models.CustomerSubscriptionRegisteredFeatures;
import com.azure.resourcemanager.edgeorder.models.FilterableProperty;
import com.azure.resourcemanager.edgeorder.models.ProductFamiliesRequest;
import com.azure.resourcemanager.edgeorder.models.SupportedFilterTypes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProductFamiliesRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProductFamiliesRequest model = BinaryData.fromString(
            "{\"filterableProperties\":{\"xbnjbiksq\":[{\"type\":\"ShipToCountries\",\"supportedValues\":[\"huyb\",\"kpode\",\"ooginuvamih\"]},{\"type\":\"DoubleEncryptionStatus\",\"supportedValues\":[\"narxzxtheotus\",\"vyevcciqi\",\"nhungbw\"]},{\"type\":\"ShipToCountries\",\"supportedValues\":[\"nfygxgispemvtz\",\"kufubljo\",\"xqeofjaeqjhqjba\"]},{\"type\":\"ShipToCountries\",\"supportedValues\":[\"smjqulngsntnbyb\",\"zgcwrw\",\"lxxwrljdouskc\",\"vkocrcjdkwtn\"]}],\"yqduujit\":[{\"type\":\"ShipToCountries\",\"supportedValues\":[\"sainqpjwnzl\",\"jfm\",\"pee\",\"vmgxsab\"]}],\"zdatqxhocdg\":[{\"type\":\"ShipToCountries\",\"supportedValues\":[\"dzevndhkrw\",\"d\"]},{\"type\":\"DoubleEncryptionStatus\",\"supportedValues\":[\"dsbdkvwrwjf\"]},{\"type\":\"ShipToCountries\",\"supportedValues\":[\"nhutjeltmrldhugj\"]}]},\"customerSubscriptionDetails\":{\"registeredFeatures\":[{\"name\":\"phut\",\"state\":\"ndv\"},{\"name\":\"ozwyiftyhxhuro\",\"state\":\"tyxolniwpwc\"}],\"locationPlacementId\":\"jfkgiawxk\",\"quotaId\":\"ryplwckbasyypn\"}}")
            .toObject(ProductFamiliesRequest.class);
        Assertions.assertEquals(SupportedFilterTypes.SHIP_TO_COUNTRIES,
            model.filterableProperties().get("xbnjbiksq").get(0).type());
        Assertions.assertEquals("huyb", model.filterableProperties().get("xbnjbiksq").get(0).supportedValues().get(0));
        Assertions.assertEquals("phut", model.customerSubscriptionDetails().registeredFeatures().get(0).name());
        Assertions.assertEquals("ndv", model.customerSubscriptionDetails().registeredFeatures().get(0).state());
        Assertions.assertEquals("jfkgiawxk", model.customerSubscriptionDetails().locationPlacementId());
        Assertions.assertEquals("ryplwckbasyypn", model.customerSubscriptionDetails().quotaId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProductFamiliesRequest model = new ProductFamiliesRequest()
            .withFilterableProperties(mapOf("xbnjbiksq", Arrays.asList(
                new FilterableProperty().withType(SupportedFilterTypes.SHIP_TO_COUNTRIES)
                    .withSupportedValues(Arrays.asList("huyb", "kpode", "ooginuvamih")),
                new FilterableProperty().withType(SupportedFilterTypes.DOUBLE_ENCRYPTION_STATUS)
                    .withSupportedValues(Arrays.asList("narxzxtheotus", "vyevcciqi", "nhungbw")),
                new FilterableProperty().withType(SupportedFilterTypes.SHIP_TO_COUNTRIES)
                    .withSupportedValues(Arrays.asList("nfygxgispemvtz", "kufubljo", "xqeofjaeqjhqjba")),
                new FilterableProperty().withType(SupportedFilterTypes.SHIP_TO_COUNTRIES)
                    .withSupportedValues(Arrays.asList("smjqulngsntnbyb", "zgcwrw", "lxxwrljdouskc", "vkocrcjdkwtn"))),
                "yqduujit",
                Arrays.asList(new FilterableProperty().withType(SupportedFilterTypes.SHIP_TO_COUNTRIES)
                    .withSupportedValues(Arrays.asList("sainqpjwnzl", "jfm", "pee", "vmgxsab"))),
                "zdatqxhocdg",
                Arrays.asList(
                    new FilterableProperty().withType(SupportedFilterTypes.SHIP_TO_COUNTRIES)
                        .withSupportedValues(Arrays.asList("dzevndhkrw", "d")),
                    new FilterableProperty().withType(SupportedFilterTypes.DOUBLE_ENCRYPTION_STATUS)
                        .withSupportedValues(Arrays.asList("dsbdkvwrwjf")),
                    new FilterableProperty().withType(SupportedFilterTypes.SHIP_TO_COUNTRIES)
                        .withSupportedValues(Arrays.asList("nhutjeltmrldhugj")))))
            .withCustomerSubscriptionDetails(new CustomerSubscriptionDetails()
                .withRegisteredFeatures(
                    Arrays.asList(new CustomerSubscriptionRegisteredFeatures().withName("phut").withState("ndv"),
                        new CustomerSubscriptionRegisteredFeatures().withName("ozwyiftyhxhuro")
                            .withState("tyxolniwpwc")))
                .withLocationPlacementId("jfkgiawxk")
                .withQuotaId("ryplwckbasyypn"));
        model = BinaryData.fromObject(model).toObject(ProductFamiliesRequest.class);
        Assertions.assertEquals(SupportedFilterTypes.SHIP_TO_COUNTRIES,
            model.filterableProperties().get("xbnjbiksq").get(0).type());
        Assertions.assertEquals("huyb", model.filterableProperties().get("xbnjbiksq").get(0).supportedValues().get(0));
        Assertions.assertEquals("phut", model.customerSubscriptionDetails().registeredFeatures().get(0).name());
        Assertions.assertEquals("ndv", model.customerSubscriptionDetails().registeredFeatures().get(0).state());
        Assertions.assertEquals("jfkgiawxk", model.customerSubscriptionDetails().locationPlacementId());
        Assertions.assertEquals("ryplwckbasyypn", model.customerSubscriptionDetails().quotaId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
