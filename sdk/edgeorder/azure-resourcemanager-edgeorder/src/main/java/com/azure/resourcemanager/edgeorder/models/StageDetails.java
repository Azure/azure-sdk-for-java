// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Resource stage details. */
@Immutable
public final class StageDetails {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(StageDetails.class);

    /*
     * Stage status.
     */
    @JsonProperty(value = "stageStatus", access = JsonProperty.Access.WRITE_ONLY)
    private StageStatus stageStatus;

    /*
     * Stage name
     */
    @JsonProperty(value = "stageName", access = JsonProperty.Access.WRITE_ONLY)
    private StageName stageName;

    /*
     * Display name of the resource stage.
     */
    @JsonProperty(value = "displayName", access = JsonProperty.Access.WRITE_ONLY)
    private String displayName;

    /*
     * Stage start time
     */
    @JsonProperty(value = "startTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startTime;

    /**
     * Get the stageStatus property: Stage status.
     *
     * @return the stageStatus value.
     */
    public StageStatus stageStatus() {
        return this.stageStatus;
    }

    /**
     * Get the stageName property: Stage name.
     *
     * @return the stageName value.
     */
    public StageName stageName() {
        return this.stageName;
    }

    /**
     * Get the displayName property: Display name of the resource stage.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the startTime property: Stage start time.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
