// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.edgeorder.models.AddressDetails;
import com.azure.resourcemanager.edgeorder.models.OrderItemDetails;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Represents order item contract.
 */
@Fluent
public final class OrderItemResourceInner extends Resource {
    /*
     * Order item properties
     */
    private OrderItemProperties innerProperties = new OrderItemProperties();

    /*
     * Represents resource creation and update time
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of OrderItemResourceInner class.
     */
    public OrderItemResourceInner() {
    }

    /**
     * Get the innerProperties property: Order item properties.
     * 
     * @return the innerProperties value.
     */
    private OrderItemProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Represents resource creation and update time.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderItemResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderItemResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the orderItemDetails property: Represents order item details.
     * 
     * @return the orderItemDetails value.
     */
    public OrderItemDetails orderItemDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().orderItemDetails();
    }

    /**
     * Set the orderItemDetails property: Represents order item details.
     * 
     * @param orderItemDetails the orderItemDetails value to set.
     * @return the OrderItemResourceInner object itself.
     */
    public OrderItemResourceInner withOrderItemDetails(OrderItemDetails orderItemDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrderItemProperties();
        }
        this.innerProperties().withOrderItemDetails(orderItemDetails);
        return this;
    }

    /**
     * Get the addressDetails property: Represents shipping and return address for order item.
     * 
     * @return the addressDetails value.
     */
    public AddressDetails addressDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().addressDetails();
    }

    /**
     * Set the addressDetails property: Represents shipping and return address for order item.
     * 
     * @param addressDetails the addressDetails value to set.
     * @return the OrderItemResourceInner object itself.
     */
    public OrderItemResourceInner withAddressDetails(AddressDetails addressDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrderItemProperties();
        }
        this.innerProperties().withAddressDetails(addressDetails);
        return this;
    }

    /**
     * Get the startTime property: Start time of order item.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.innerProperties() == null ? null : this.innerProperties().startTime();
    }

    /**
     * Get the orderId property: Id of the order to which order item belongs to.
     * 
     * @return the orderId value.
     */
    public String orderId() {
        return this.innerProperties() == null ? null : this.innerProperties().orderId();
    }

    /**
     * Set the orderId property: Id of the order to which order item belongs to.
     * 
     * @param orderId the orderId value to set.
     * @return the OrderItemResourceInner object itself.
     */
    public OrderItemResourceInner withOrderId(String orderId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrderItemProperties();
        }
        this.innerProperties().withOrderId(orderId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model OrderItemResourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrderItemResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrderItemResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrderItemResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrderItemResourceInner.
     */
    public static OrderItemResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrderItemResourceInner deserializedOrderItemResourceInner = new OrderItemResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOrderItemResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOrderItemResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOrderItemResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedOrderItemResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedOrderItemResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedOrderItemResourceInner.innerProperties = OrderItemProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedOrderItemResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrderItemResourceInner;
        });
    }
}
