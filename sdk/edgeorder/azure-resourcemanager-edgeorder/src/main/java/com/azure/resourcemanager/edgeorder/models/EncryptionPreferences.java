// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Preferences related to the double encryption.
 */
@Fluent
public final class EncryptionPreferences implements JsonSerializable<EncryptionPreferences> {
    /*
     * Double encryption status as entered by the customer. It is compulsory to give this parameter if the 'Deny' or
     * 'Disabled' policy is configured.
     */
    private DoubleEncryptionStatus doubleEncryptionStatus;

    /**
     * Creates an instance of EncryptionPreferences class.
     */
    public EncryptionPreferences() {
    }

    /**
     * Get the doubleEncryptionStatus property: Double encryption status as entered by the customer. It is compulsory to
     * give this parameter if the 'Deny' or 'Disabled' policy is configured.
     * 
     * @return the doubleEncryptionStatus value.
     */
    public DoubleEncryptionStatus doubleEncryptionStatus() {
        return this.doubleEncryptionStatus;
    }

    /**
     * Set the doubleEncryptionStatus property: Double encryption status as entered by the customer. It is compulsory to
     * give this parameter if the 'Deny' or 'Disabled' policy is configured.
     * 
     * @param doubleEncryptionStatus the doubleEncryptionStatus value to set.
     * @return the EncryptionPreferences object itself.
     */
    public EncryptionPreferences withDoubleEncryptionStatus(DoubleEncryptionStatus doubleEncryptionStatus) {
        this.doubleEncryptionStatus = doubleEncryptionStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("doubleEncryptionStatus",
            this.doubleEncryptionStatus == null ? null : this.doubleEncryptionStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionPreferences from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionPreferences if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionPreferences.
     */
    public static EncryptionPreferences fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionPreferences deserializedEncryptionPreferences = new EncryptionPreferences();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("doubleEncryptionStatus".equals(fieldName)) {
                    deserializedEncryptionPreferences.doubleEncryptionStatus
                        = DoubleEncryptionStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionPreferences;
        });
    }
}
