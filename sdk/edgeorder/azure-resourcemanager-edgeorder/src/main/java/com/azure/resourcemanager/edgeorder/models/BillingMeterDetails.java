// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.edgeorder.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Holds billing meter details for each type of billing.
 */
@Immutable
public final class BillingMeterDetails implements JsonSerializable<BillingMeterDetails> {
    /*
     * Represents Billing type name
     */
    private String name;

    /*
     * Represents MeterDetails
     */
    private MeterDetails meterDetails;

    /*
     * Represents Metering type (eg one-time or recurrent)
     */
    private MeteringType meteringType;

    /*
     * Frequency of recurrence
     */
    private String frequency;

    /**
     * Creates an instance of BillingMeterDetails class.
     */
    public BillingMeterDetails() {
    }

    /**
     * Get the name property: Represents Billing type name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the meterDetails property: Represents MeterDetails.
     * 
     * @return the meterDetails value.
     */
    public MeterDetails meterDetails() {
        return this.meterDetails;
    }

    /**
     * Get the meteringType property: Represents Metering type (eg one-time or recurrent).
     * 
     * @return the meteringType value.
     */
    public MeteringType meteringType() {
        return this.meteringType;
    }

    /**
     * Get the frequency property: Frequency of recurrence.
     * 
     * @return the frequency value.
     */
    public String frequency() {
        return this.frequency;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (meterDetails() != null) {
            meterDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingMeterDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingMeterDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingMeterDetails.
     */
    public static BillingMeterDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingMeterDetails deserializedBillingMeterDetails = new BillingMeterDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedBillingMeterDetails.name = reader.getString();
                } else if ("meterDetails".equals(fieldName)) {
                    deserializedBillingMeterDetails.meterDetails = MeterDetails.fromJson(reader);
                } else if ("meteringType".equals(fieldName)) {
                    deserializedBillingMeterDetails.meteringType = MeteringType.fromString(reader.getString());
                } else if ("frequency".equals(fieldName)) {
                    deserializedBillingMeterDetails.frequency = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingMeterDetails;
        });
    }
}
